[{"title": "Line 30: there is an extra space before \u201cFinder\u201d.", "body": "Line 30: there is an extra space before \u201cFinder\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-30:-there-is-an-extra-space-before-\u201cfinder\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 82: \u201cmore\u201d is misspelled.", "body": "Line 82: \u201cmore\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-82:-\u201cmore\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 195: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "body": "Line 195: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-195:-\u201ccumulativefeemultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 210: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "body": "Line 210: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-210:-\u201ccumulativefeemultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "In Liquidatable.sol:", "body": "In Liquidatable.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-liquidatable.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 95: \u201cmultiplier\u201d is misspelled.", "body": "Line 95: \u201cmultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-95:-\u201cmultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 98: \u201cmultiplier\u201d is misspelled.", "body": "Line 98: \u201cmultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-98:-\u201cmultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 126: \u201cDisputeSucceeded\u201d should be \u201cdisputeSucceeded\u201d.", "body": "Line 126: \u201cDisputeSucceeded\u201d should be \u201cdisputeSucceeded\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-126:-\u201cdisputesucceeded\u201d-should-be-\u201cdisputesucceeded\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 147: there is an unmatched backtick symbol.", "body": "Line 147: there is an unmatched backtick symbol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-147:-there-is-an-unmatched-backtick-symbol.", "labels": ["OpenZeppelin"]}, {"title": "Line 185: \u201ctokens\u201d is misspelled.", "body": "Line 185: \u201ctokens\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-185:-\u201ctokens\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 288: \u201cwhose\u201d is misspelled.", "body": "Line 288: \u201cwhose\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-288:-\u201cwhose\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 370: the word \u201cis\u201d is missing.", "body": "Line 370: the word \u201cis\u201d is missing.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-370:-the-word-\u201cis\u201d-is-missing.", "labels": ["OpenZeppelin"]}, {"title": "Line 371: \u201cfrom times\u201d should be \u201ctimes from\u201d.", "body": "Line 371: \u201cfrom times\u201d should be \u201ctimes from\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-371:-\u201cfrom-times\u201d-should-be-\u201ctimes-from\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 39: \u201cis\u201d should be \u201cas\u201d.", "body": "Line 39: \u201cis\u201d should be \u201cas\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-39:-\u201cis\u201d-should-be-\u201cas\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 66: \u201ca\u201d should be \u201can\u201d.", "body": "Line 66: \u201ca\u201d should be \u201can\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-66:-\u201ca\u201d-should-be-\u201can\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 196: \u201crequestWithdrawal\u201d is misspelled.", "body": "Line 196: \u201crequestWithdrawal\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-196:-\u201crequestwithdrawal\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 298: \u201cthe\u201d should be removed.", "body": "Line 298: \u201cthe\u201d should be removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-298:-\u201cthe\u201d-should-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Line 322: \u201cmint the caller\u201d should be \u201cmint to the caller\u201d.", "body": "Line 322: \u201cmint the caller\u201d should be \u201cmint to the caller\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-322:-\u201cmint-the-caller\u201d-should-be-\u201cmint-to-the-caller\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 377: \u201cBurns\u201d should be \u201cburns\u201d.", "body": "Line 377: \u201cBurns\u201d should be \u201cburns\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-377:-\u201cburns\u201d-should-be-\u201cburns\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In SyntheticToken.sol:", "body": "In SyntheticToken.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-synthetictoken.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 8: there is an extra space before \u201cwho\u201d.", "body": "Line 8: there is an extra space before \u201cwho\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-8:-there-is-an-extra-space-before-\u201cwho\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In TokenFactory.sol:", "body": "In TokenFactory.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-tokenfactory.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 12: it should say \u201creturn it to the caller\u201d.", "body": "Line 12: it should say \u201creturn it to the caller\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-12:-it-should-say-\u201creturn-it-to-the-caller\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 13: \u201cadding new roles\u201d should be \u201cassigning the roles\u201d.", "body": "Line 13: \u201cadding new roles\u201d should be \u201cassigning the roles\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-13:-\u201cadding-new-roles\u201d-should-be-\u201cassigning-the-roles\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 16: \u201ctokens\u201d should be \u201ctoken\u2019s\u201d.", "body": "Line 16: \u201ctokens\u201d should be \u201ctoken\u2019s\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-16:-\u201ctokens\u201d-should-be-\u201ctoken\u2019s\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1298.", "body": "Update: Fixed in PR#1298.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1298.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unnecessary imports", "body": "[N15] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n15]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.", "body": "In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-the-pricelesspositionmanager-and-liquidatable-contracts,-consider-removing-the-imports-statement-for-the-testable-contract,-as-this-contract-is-never-used-in-any-of-them.-similarly,-consider-removing-the-unused-import-for-the-fixedpoint-library-in-the-expiringmultiparty-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1299 and PR#1236.", "body": "Update: Fixed in PR#1299 and PR#1236.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1299-and-pr#1236.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Unexpected initial round", "body": "[N01] Unexpected initial round", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n01]-unexpected-initial-round", "labels": ["OpenZeppelin"]}, {"title": "As explained in the comment for the computeCurrentRoundId function of the VoteTiming library, the round ID depends on the global timestamp but not on the lifetime of the system. Although this is a reasonable choice to simplify the implementation, it has the surprising consequence that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one. To favor readability, consider stating this behavior explicitly in the function\u2019s comments.", "body": "As explained in the comment for the computeCurrentRoundId function of the VoteTiming library, the round ID depends on the global timestamp but not on the lifetime of the system. Although this is a reasonable choice to simplify the implementation, it has the surprising consequence that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one. To favor readability, consider stating this behavior explicitly in the function\u2019s comments.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#as-explained-in-the-comment-for-the-computecurrentroundid-function-of-the-votetiming-library,-the-round-id-depends-on-the-global-timestamp-but-not-on-the-lifetime-of-the-system.-although-this-is-a-reasonable-choice-to-simplify-the-implementation,-it-has-the-surprising-consequence-that-the-initial-round-id-starts-at-an-arbitrary-number-(that-increments,-as-expected,-for-subsequent-rounds)-instead-of-zero-or-one.-to-favor-readability,-consider-stating-this-behavior-explicitly-in-the-function\u2019s-comments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1272.", "body": "Update: Fixed in PR#1272.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1272.", "labels": ["OpenZeppelin"]}, {"title": "[N02] TODOs in code", "body": "[N02] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n02]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for example line 65 of ResultComputation.sol, line 7 of ContractCreator.sol or line 194 of FixedPoint.sol.", "body": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for example line 65 of ResultComputation.sol, line 7 of ContractCreator.sol or line 194 of FixedPoint.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-backlog-of-issues.-see-for-example-line-65-of-resultcomputation.sol,-line-7-of-contractcreator.sol-or-line-194-of-fixedpoint.sol.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1250.", "body": "Update: Fixed in PR#1250.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1250.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Use of uint type", "body": "[N03] Use of uint type", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n03]-use-of-uint-type", "labels": ["OpenZeppelin"]}, {"title": "Several variables are declared as uint throughout the code base. To favor explicitness, consider changing all instances of uint to uint256.", "body": "Several variables are declared as uint throughout the code base. To favor explicitness, consider changing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#several-variables-are-declared-as-uint-throughout-the-code-base.-to-favor-explicitness,-consider-changing-all-instances-of-uint-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1230.", "body": "Update: Fixed in PR#1230.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1230.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Typographical errors", "body": "[N04] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n04]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In IdentifierWhitelist.sol:", "body": "In IdentifierWhitelist.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-identifierwhitelist.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 30 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "body": "Line 30 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-30-should-say-\u201cwill-succeed\u201d-instead-of-\u201cwill-be-succeed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Lines 31, 45 and62 have the same unclear parameter description.", "body": "Lines 31, 45 and62 have the same unclear parameter description.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-31,-45-and62-have-the-same-unclear-parameter-description.", "labels": ["OpenZeppelin"]}, {"title": "In IdentifierWhitelistInterface.sol:", "body": "In IdentifierWhitelistInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-identifierwhitelistinterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 12 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "body": "Line 12 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-12-should-say-\u201cwill-succeed\u201d-instead-of-\u201cwill-be-succeed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In MultiRole.sol:", "body": "In MultiRole.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-multirole.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 189 should say \u201can exclusive\u201d instead of \u201ca exclusive\u201d.", "body": "Line 189 should say \u201can exclusive\u201d instead of \u201ca exclusive\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-189-should-say-\u201can-exclusive\u201d-instead-of-\u201ca-exclusive\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 190 should say \u201cinitialMember\u201d instead of \u201cinitialMembers\u201d.", "body": "Line 190 should say \u201cinitialMember\u201d instead of \u201cinitialMembers\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-190-should-say-\u201cinitialmember\u201d-instead-of-\u201cinitialmembers\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In OracleInterface.sol:", "body": "In OracleInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-oracleinterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 13, 21 and 30 contain the extra word \u201cof\u201d.", "body": "Lines 13, 21 and 30 contain the extra word \u201cof\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-13,-21-and-30-contain-the-extra-word-\u201cof\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 31 misspells \u201cidentifier\u201d.", "body": "Line 31 misspells \u201cidentifier\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-31-misspells-\u201cidentifier\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In Registry.sol:", "body": "In Registry.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-registry.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 127 should say \u201cfrom the calling contract\u201d instead of \u201cto the calling contract\u201d.", "body": "Line 127 should say \u201cfrom the calling contract\u201d instead of \u201cto the calling contract\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-127-should-say-\u201cfrom-the-calling-contract\u201d-instead-of-\u201cto-the-calling-contract\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In ResultComputation.sol:", "body": "In ResultComputation.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-resultcomputation.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 55 has the extra word \u201cbeen\u201d.", "body": "Line 55 has the extra word \u201cbeen\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-55-has-the-extra-word-\u201cbeen\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 95 has the extra word \u201ccorrectly\u201d.", "body": "Line 95 has the extra word \u201ccorrectly\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-95-has-the-extra-word-\u201ccorrectly\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In Voting.sol:", "body": "In Voting.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-voting.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 215 has an extra word \u201cof\u201d.", "body": "Line 215 has an extra word \u201cof\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-215-has-an-extra-word-\u201cof\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 279 says \u201ctime\u201d instead of \u201ctype\u201d.", "body": "Line 279 says \u201ctime\u201d instead of \u201ctype\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-279-says-\u201ctime\u201d-instead-of-\u201ctype\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 279 should say \u201can identifier\u201d instead of \u201ca identifier\u201d.", "body": "Line 279 should say \u201can identifier\u201d instead of \u201ca identifier\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-279-should-say-\u201can-identifier\u201d-instead-of-\u201ca-identifier\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 280 misspells the word \u201clist\u201d.", "body": "Line 280 misspells the word \u201clist\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-280-misspells-the-word-\u201clist\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Lines 314 and 346 have the extra word \u201cis\u201d.", "body": "Lines 314 and 346 have the extra word \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-314-and-346-have-the-extra-word-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 396 references EncryptedSender.sol but there is no such file in the repository.", "body": "Line 396 references EncryptedSender.sol but there is no such file in the repository.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-396-references-encryptedsender.sol-but-there-is-no-such-file-in-the-repository.", "labels": ["OpenZeppelin"]}, {"title": "Lines 605 and 614 should say \u201cround\u2019s\u201d instead of \u201crounds\u201d.", "body": "Lines 605 and 614 should say \u201cround\u2019s\u201d instead of \u201crounds\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-605-and-614-should-say-\u201cround\u2019s\u201d-instead-of-\u201crounds\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 711 misspells the word \u201csnapshotted\u201d.", "body": "Line 711 misspells the word \u201csnapshotted\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-711-misspells-the-word-\u201csnapshotted\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In VotingInterface.sol:", "body": "In VotingInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-votinginterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 46 has the extra word \u201cis\u201d.", "body": "Line 46 has the extra word \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-46-has-the-extra-word-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 47 describes the salt parameter in a confusing way.", "body": "Line 47 describes the salt parameter in a confusing way.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-47-describes-the-salt-parameter-in-a-confusing-way.", "labels": ["OpenZeppelin"]}, {"title": "Line 56 should say \u201carray of structs\u201d instead of \u201cstruct\u201d.", "body": "Line 56 should say \u201carray of structs\u201d instead of \u201cstruct\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-56-should-say-\u201carray-of-structs\u201d-instead-of-\u201cstruct\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 106 describes a named return parameter (totalRewardToIssue) but the name is not part of the function signature.", "body": "Line 106 describes a named return parameter (totalRewardToIssue) but the name is not part of the function signature.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-106-describes-a-named-return-parameter-(totalrewardtoissue)-but-the-name-is-not-part-of-the-function-signature.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1206.", "body": "Update: Fixed in PR#1206.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1206.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistent use of SafeERC20 contract", "body": "[N05] Inconsistent use of SafeERC20 contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n05]-inconsistent-use-of-safeerc20-contract", "labels": ["OpenZeppelin"]}, {"title": "line 29 of", "body": "line 29 of", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-29-of", "labels": ["OpenZeppelin"]}, {"title": "line 71 of", "body": "OpenZeppelins SafeERC20 library is used for ERC20 operations.  To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.  Update: Fixed in PR#1205.  [N06] Inconsistencies in coding style  Solidity Style Guide were found. For example, internal functions in lines  37 and  47 of  start with an underscore,  others do not.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.  [N07] Naming issues  In the MultiRole contract:  The resetMember function should be renamed to resetExclusiveMember.  The getMember function should be renamed to getExclusiveMember.  The addMember function should be renamed to addSharedMember.  The removeMember function should be renamed to removeSharedMember.  In the Withdrawable contract:  The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.  In the Store contract:  The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.  The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.  In the EncryptedStore contract:  The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.  In the Governor contract:  The _uintToBytes function should be renamed to _uintToBytes32.  In the Voting contract:  The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.  In the FixedPoint contract:  The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.  Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.  [N08] Potentially differing time sources in testing environment  The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.  Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.  [N09] Named return variables  Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.  [N10] Consider warning voters about salt reuse  When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the systems expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.  Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.  Update: Fixed in PR#1273.  [N11] Hardcoded condition in require statement  To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.  Update: Fixed in PR#1228.  [N12] Inconsistent NatSpec usage  The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.  Update: Fixed in PR#1270.  [N13] Redundant inheritance from MultiRole contract  DesignatedVoting and  Store inherit from both  Update: Fixed in PR#1203. It should be noted that the related import statements were not removed.  [N14] Untested, undocumented behavior of late penalty fee  The computeRegularFee function of the Store contract computes a penalty fee that is to be paid if the regular fee is overdue. The penalty fee is expected to be computed per overdue week and currently is always floored. For example, if the regular fee is more than a week overdue but less than two, the penalty fee will be computed as if a single week had passed. While this appears to be the systems expected behavior, it was found to be undocumented and barely tested, which may cause confusions in developers, auditors and users alike.  Consider explicitly documenting the behavior of the penalty fee and adding relevant unit tests to ensure the system behaves as intended.  Update: Fixed in PR#1251.  [N15] Unused encrypted vote  When a voter commits to a price, they can optionally include an encrypted version of their vote to be stored in the Voting contract. This value is never decrypted, verified against their hash or processed in any way within the EVM. Instead, it simply uses the EVM as a temporary storage location so that voters do not need to save their vote contents between the commit and reveal phase. Consider emitting an event with the encrypted vote instead, which would likely be more gas efficient than modifying EVM storage.  Update: Fixed in PR#1231. The EncryptedStore contract has been removed, and encrypted votes are logged using the EncryptedVote event of the Voting contract.  [N16] Base contracts not marked as abstract  All base contracts that are not intended to be instantiated directly, such as Withdrawable, MultiRole, Testable or ContractCreator should be marked as abstract to favor readability and avoid unintended usage.  Update: Fixed in PR#1201.  [N17] Implicitly merged withdraw roles  In the withdraw and withdrawErc20 functions of the Withdrawable contract, the caller is also the recipient of the funds. For increased flexibility, consider allowing the withdrawer to specify the recipient address.  Update: The UMA team has decided not to move forward with our recommendation.  Conclusion  Originally, no critical and three high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-71-of", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s SafeERC20 library is used for ERC20 operations.", "body": "OpenZeppelin\u2019s SafeERC20 library is used for ERC20 operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#openzeppelin\u2019s-safeerc20-library-is-used-for-erc20-operations.", "labels": ["OpenZeppelin"]}, {"title": "To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.", "body": "To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#to-be-consistent-throughout-the-code-base-and-avoid-confusion,-consider-modifying-the-withdrawable-and-store-contracts-to-use-the-safeerc20-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1205.", "body": "Update: Fixed in PR#1205.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1205.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistencies in coding style", "body": "[N06] Inconsistencies in coding style", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n06]-inconsistencies-in-coding-style", "labels": ["OpenZeppelin"]}, {"title": "Solidity Style Guide were found. For example, internal functions in lines", "body": "Solidity Style Guide were found. For example, internal functions in lines", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#solidity-style-guide-were-found.-for-example,-internal-functions-in-lines", "labels": ["OpenZeppelin"]}, {"title": "37 and", "body": "37 and", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#37-and", "labels": ["OpenZeppelin"]}, {"title": "47 of", "body": "47 of", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#47-of", "labels": ["OpenZeppelin"]}, {"title": "start with an underscore,", "body": "start with an underscore,", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#start-with-an-underscore,", "labels": ["OpenZeppelin"]}, {"title": "others do not.", "body": "others do not.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#others-do-not.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.", "body": "Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1271.-the-related-style.md-file-has-been-updated-accordingly-in-pr#1286.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Naming issues", "body": "[N07] Naming issues", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n07]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "In the MultiRole contract:", "body": "In the MultiRole contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-multirole-contract:", "labels": ["OpenZeppelin"]}, {"title": "The resetMember function should be renamed to resetExclusiveMember.", "body": "The resetMember function should be renamed to resetExclusiveMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-resetmember-function-should-be-renamed-to-resetexclusivemember.", "labels": ["OpenZeppelin"]}, {"title": "The getMember function should be renamed to getExclusiveMember.", "body": "The getMember function should be renamed to getExclusiveMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-getmember-function-should-be-renamed-to-getexclusivemember.", "labels": ["OpenZeppelin"]}, {"title": "The addMember function should be renamed to addSharedMember.", "body": "The addMember function should be renamed to addSharedMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-addmember-function-should-be-renamed-to-addsharedmember.", "labels": ["OpenZeppelin"]}, {"title": "The removeMember function should be renamed to removeSharedMember.", "body": "The removeMember function should be renamed to removeSharedMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-removemember-function-should-be-renamed-to-removesharedmember.", "labels": ["OpenZeppelin"]}, {"title": "In the Withdrawable contract:", "body": "In the Withdrawable contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-withdrawable-contract:", "labels": ["OpenZeppelin"]}, {"title": "The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.", "body": "The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-owner-parameter-of-the-createwithdrawrole-function-should-be-renamed-to-withdraweraddress.", "labels": ["OpenZeppelin"]}, {"title": "In the Store contract:", "body": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.  The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.  In the EncryptedStore contract:  The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.  In the Governor contract:  The _uintToBytes function should be renamed to _uintToBytes32.  In the Voting contract:  The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.  In the FixedPoint contract:  The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.  Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.  [N08] Potentially differing time sources in testing environment  The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.  Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.  [N09] Named return variables  Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.  [N10] Consider warning voters about salt reuse  When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the systems expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.  Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.  Update: Fixed in PR#1273.  [N11] Hardcoded condition in require statement  To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.  Update: Fixed in PR#1228.  [N12] Inconsistent NatSpec usage  The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.  Update: Fixed in PR#1270.  [N13] Redundant inheritance from MultiRole contract  DesignatedVoting and  Store inherit from both  Update: Fixed in PR#1203. It should be noted that the related import statements were not removed.  [N14] Untested, undocumented behavior of late penalty fee  The computeRegularFee function of the Store contract computes a penalty fee that is to be paid if the regular fee is overdue. The penalty fee is expected to be computed per overdue week and currently is always floored. For example, if the regular fee is more than a week overdue but less than two, the penalty fee will be computed as if a single week had passed. While this appears to be the systems expected behavior, it was found to be undocumented and barely tested, which may cause confusions in developers, auditors and users alike.  Consider explicitly documenting the behavior of the penalty fee and adding relevant unit tests to ensure the system behaves as intended.  Update: Fixed in PR#1251.  [N15] Unused encrypted vote  When a voter commits to a price, they can optionally include an encrypted version of their vote to be stored in the Voting contract. This value is never decrypted, verified against their hash or processed in any way within the EVM. Instead, it simply uses the EVM as a temporary storage location so that voters do not need to save their vote contents between the commit and reveal phase. Consider emitting an event with the encrypted vote instead, which would likely be more gas efficient than modifying EVM storage.  Update: Fixed in PR#1231. The EncryptedStore contract has been removed, and encrypted votes are logged using the EncryptedVote event of the Voting contract.  [N16] Base contracts not marked as abstract  All base contracts that are not intended to be instantiated directly, such as Withdrawable, MultiRole, Testable or ContractCreator should be marked as abstract to favor readability and avoid unintended usage.  Update: Fixed in PR#1201.  [N17] Implicitly merged withdraw roles  In the withdraw and withdrawErc20 functions of the Withdrawable contract, the caller is also the recipient of the funds. For increased flexibility, consider allowing the withdrawer to specify the recipient address.  Update: The UMA team has decided not to move forward with our recommendation.  Conclusion  Originally, no critical and three high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-store-contract:", "labels": ["OpenZeppelin"]}, {"title": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.", "body": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-computefinalfee-function-should-be-renamed-as-it-does-not-actually-compute-anything.-if-keeping-the-name-for-consistency,-this-should-be-explicitly-stated-in-docstrings-to-avoid-confusions.", "labels": ["OpenZeppelin"]}, {"title": "The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.", "body": "The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-fixedoraclefeepersecond-and-weeklydelayfee-variables-should-be-renamed-to-fixedoraclefeepersecondperpfc-and-weeklydelayfeeperpfc-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "In the EncryptedStore contract:", "body": "In the EncryptedStore contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-encryptedstore-contract:", "labels": ["OpenZeppelin"]}, {"title": "The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.", "body": "The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-contract-name-encryptedstore-is-misleading,-as-it-does-not-actually-enforce-any-kind-of-encryption.-it-should-be-renamed-to-messagestore-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "In the Governor contract:", "body": "In the Governor contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-governor-contract:", "labels": ["OpenZeppelin"]}, {"title": "The _uintToBytes function should be renamed to _uintToBytes32.", "body": "The _uintToBytes function should be renamed to _uintToBytes32.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-_uinttobytes-function-should-be-renamed-to-_uinttobytes32.", "labels": ["OpenZeppelin"]}, {"title": "In the Voting contract:", "body": "In the Voting contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-voting-contract:", "labels": ["OpenZeppelin"]}, {"title": "The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.", "body": "The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-getpendingrequests-function-should-be-renamed-to-getactiverequests-or-similar,-since-it-only-returns-active-price-requests.-in-particular,-it-does-not-return-requests-scheduled-to-be-resolved-in-a-future-round.", "labels": ["OpenZeppelin"]}, {"title": "In the FixedPoint contract:", "body": "In the FixedPoint contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-fixedpoint-contract:", "labels": ["OpenZeppelin"]}, {"title": "The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.", "body": "The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-divraw-variable-should-be-renamed-to-ascaled-or-similar,-since-it-has-nothing-to-do-with-division.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.", "body": "Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1227,-pr#1231-and-pr#1204.-the-multirole-library-will-remain-unchanged,-as-well-as-the-getpendingrequests-function-of-the-voting-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Potentially differing time sources in testing environment", "body": "[N08] Potentially differing time sources in testing environment", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n08]-potentially-differing-time-sources-in-testing-environment", "labels": ["OpenZeppelin"]}, {"title": "The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.", "body": "The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-testable-contract-is-a-base-contract-from-which-all-contracts-that-need-to-mock-time-changes-in-testnets-should-inherit.-if-several-contracts-of-the-uma-protocol-derive-from-the-testable-contract,-then-for-each-change-in-time-all-contracts-must-be-updated-at-the-same-timestamp-to-maintain-a-consistent-time-across-the-system.-otherwise-there-might-exist-multiple-time-sources-with-differing-times,-potentially-causing-unexpected-failures-during-testing.-consider-implementing-a-pattern-that-keeps-a-single-source-of-time-in-testing-environments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.", "body": "Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1236.-all-contracts-use-a-shared-timer-contract-during-testing-to-obtain-the-mocked-time.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Named return variables", "body": "[N09] Named return variables", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n09]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.", "body": "Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#named-return-variables-are-used-inconsistently-throughout-the-code-base.-for-example,-the-computecurrentroundid-and-computeroundendtime-functions-of-the-votetiming-library-have-named-return-variables-in-the-function-signature-but-return-their-results-directly.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "body": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-should-improve-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.", "body": "Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1229.-named-returns-are-only-consistently-used-in-functions-that-return-multiple-values.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Consider warning voters about salt reuse", "body": "[N10] Consider warning voters about salt reuse", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n10]-consider-warning-voters-about-salt-reuse", "labels": ["OpenZeppelin"]}, {"title": "When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the system\u2019s expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.", "body": "When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the system\u2019s expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#when-voters-reveal-their-previously-committed-vote-using-the-revealvote-function-of-the-voting-contract,-they-must-provide-the-salt-used-to-mask-the-vote-hash.-since-transaction-data-is-public,-the-salt-will-be-revealed-with-the-vote.-while-this-is-the-system\u2019s-expected-behavior,-it-assumes-that-voters-will-never-reuse-the-same-pair-of-salt-and-price.-otherwise-their-commits-could-be-easily-disclosed-in-advance.", "labels": ["OpenZeppelin"]}, {"title": "Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.", "body": "Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#since-this-is-a-common-mistake,-consider-adding-user-friendly-documentation,-both-in-docstrings-and-external-documentation,-stating-the-risks-of-reusing-salts-in-the-commit-and-reveal-voting-scheme.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1273.", "body": "Update: Fixed in PR#1273.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1273.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Hardcoded condition in require statement", "body": "[N11] Hardcoded condition in require statement", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n11]-hardcoded-condition-in-require-statement", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.", "body": "To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#to-favor-simplicity,-consider-replacing-the-require-statement-in-line-114-of-multirole.sol-with-a-revert-statement.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1228.", "body": "Update: Fixed in PR#1228.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1228.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Inconsistent NatSpec usage", "body": "[N12] Inconsistent NatSpec usage", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n12]-inconsistent-natspec-usage", "labels": ["OpenZeppelin"]}, {"title": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.", "body": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-code-base-uses-the-ethereum-natural-specification-(natspec)-format-inconsistently.-in-particular-the-@param-and-@return-tags-are-often-missing.-consider-adding-the-missing-tags-to-all-contracts-and-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1270.", "body": "Update: Fixed in PR#1270.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1270.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Redundant inheritance from MultiRole contract", "body": "[N13] Redundant inheritance from MultiRole contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n13]-redundant-inheritance-from-multirole-contract", "labels": ["OpenZeppelin"]}, {"title": "DesignatedVoting and", "body": "DesignatedVoting and", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#designatedvoting-and", "labels": ["OpenZeppelin"]}, {"title": "Store inherit from both", "body": "Store inherit from both", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#store-inherit-from-both", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1203. It should be noted that the related import statements were not removed.", "body": "Update: Fixed in PR#1203. It should be noted that the related import statements were not removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1203.-it-should-be-noted-that-the-related-import-statements-were-not-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Untested, undocumented behavior of late penalty fee", "body": "[N14] Untested, undocumented behavior of late penalty fee", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n14]-untested,-undocumented-behavior-of-late-penalty-fee", "labels": ["OpenZeppelin"]}, {"title": "The computeRegularFee function of the Store contract computes a penalty fee that is to be paid if the regular fee is overdue. The penalty fee is expected to be computed per overdue week and currently is always floored. For example, if the regular fee is more than a week overdue but less than two, the penalty fee will be computed as if a single week had passed. While this appears to be the system\u2019s expected behavior, it was found to be undocumented and barely tested, which may cause confusions in developers, auditors and users alike.", "body": "The computeRegularFee function of the Store contract computes a penalty fee that is to be paid if the regular fee is overdue. The penalty fee is expected to be computed per overdue week and currently is always floored. For example, if the regular fee is more than a week overdue but less than two, the penalty fee will be computed as if a single week had passed. While this appears to be the system\u2019s expected behavior, it was found to be undocumented and barely tested, which may cause confusions in developers, auditors and users alike.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-computeregularfee-function-of-the-store-contract-computes-a-penalty-fee-that-is-to-be-paid-if-the-regular-fee-is-overdue.-the-penalty-fee-is-expected-to-be-computed-per-overdue-week-and-currently-is-always-floored.-for-example,-if-the-regular-fee-is-more-than-a-week-overdue-but-less-than-two,-the-penalty-fee-will-be-computed-as-if-a-single-week-had-passed.-while-this-appears-to-be-the-system\u2019s-expected-behavior,-it-was-found-to-be-undocumented-and-barely-tested,-which-may-cause-confusions-in-developers,-auditors-and-users-alike.", "labels": ["OpenZeppelin"]}, {"title": "Consider explicitly documenting the behavior of the penalty fee and adding relevant unit tests to ensure the system behaves as intended.", "body": "Consider explicitly documenting the behavior of the penalty fee and adding relevant unit tests to ensure the system behaves as intended.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#consider-explicitly-documenting-the-behavior-of-the-penalty-fee-and-adding-relevant-unit-tests-to-ensure-the-system-behaves-as-intended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1251.", "body": "Update: Fixed in PR#1251.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1251.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unused encrypted vote", "body": "[N15] Unused encrypted vote", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n15]-unused-encrypted-vote", "labels": ["OpenZeppelin"]}, {"title": "When a voter commits to a price, they can optionally include an encrypted version of their vote to be stored in the Voting contract. This value is never decrypted, verified against their hash or processed in any way within the EVM. Instead, it simply uses the EVM as a temporary storage location so that voters do not need to save their vote contents between the commit and reveal phase. Consider emitting an event with the encrypted vote instead, which would likely be more gas efficient than modifying EVM storage.", "body": "When a voter commits to a price, they can optionally include an encrypted version of their vote to be stored in the Voting contract. This value is never decrypted, verified against their hash or processed in any way within the EVM. Instead, it simply uses the EVM as a temporary storage location so that voters do not need to save their vote contents between the commit and reveal phase. Consider emitting an event with the encrypted vote instead, which would likely be more gas efficient than modifying EVM storage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#when-a-voter-commits-to-a-price,-they-can-optionally-include-an-encrypted-version-of-their-vote-to-be-stored-in-the-voting-contract.-this-value-is-never-decrypted,-verified-against-their-hash-or-processed-in-any-way-within-the-evm.-instead,-it-simply-uses-the-evm-as-a-temporary-storage-location-so-that-voters-do-not-need-to-save-their-vote-contents-between-the-commit-and-reveal-phase.-consider-emitting-an-event-with-the-encrypted-vote-instead,-which-would-likely-be-more-gas-efficient-than-modifying-evm-storage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1231. The EncryptedStore contract has been removed, and encrypted votes are logged using the EncryptedVote event of the Voting contract.", "body": "Update: Fixed in PR#1231. The EncryptedStore contract has been removed, and encrypted votes are logged using the EncryptedVote event of the Voting contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1231.-the-encryptedstore-contract-has-been-removed,-and-encrypted-votes-are-logged-using-the-encryptedvote-event-of-the-voting-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Base contracts not marked as abstract", "body": "[N16] Base contracts not marked as abstract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n16]-base-contracts-not-marked-as-abstract", "labels": ["OpenZeppelin"]}, {"title": "All base contracts that are not intended to be instantiated directly, such as Withdrawable, MultiRole, Testable or ContractCreator should be marked as abstract to favor readability and avoid unintended usage.", "body": "All base contracts that are not intended to be instantiated directly, such as Withdrawable, MultiRole, Testable or ContractCreator should be marked as abstract to favor readability and avoid unintended usage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#all-base-contracts-that-are-not-intended-to-be-instantiated-directly,-such-as-withdrawable,-multirole,-testable-or-contractcreator-should-be-marked-as-abstract-to-favor-readability-and-avoid-unintended-usage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1201.", "body": "Update: Fixed in PR#1201.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1201.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Implicitly merged withdraw roles", "body": "[N17] Implicitly merged withdraw roles", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n17]-implicitly-merged-withdraw-roles", "labels": ["OpenZeppelin"]}, {"title": "In the withdraw and withdrawErc20 functions of the Withdrawable contract, the caller is also the recipient of the funds. For increased flexibility, consider allowing the withdrawer to specify the recipient address.", "body": "In the withdraw and withdrawErc20 functions of the Withdrawable contract, the caller is also the recipient of the funds. For increased flexibility, consider allowing the withdrawer to specify the recipient address.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-withdraw-and-withdrawerc20-functions-of-the-withdrawable-contract,-the-caller-is-also-the-recipient-of-the-funds.-for-increased-flexibility,-consider-allowing-the-withdrawer-to-specify-the-recipient-address.", "labels": ["OpenZeppelin"]}, {"title": "Update: The UMA team has decided not to move forward with our recommendation.", "body": "Update: The UMA team has decided not to move forward with our recommendation.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-the-uma-team-has-decided-not-to-move-forward-with-our-recommendation.", "labels": ["OpenZeppelin"]}, {"title": "None. \ud83d\ude42", "body": "Medium severity  [M01] Undocumented assembly blocks  The CErc20Delegator contract includes multiple assembly blocks.  While this does not pose a security risk per se and the code does not present vulnerabilities after thorough review, these blocks are a critical part of the system and should be better documented. Moreover, as this is a low-level language that is harder to parse by readers, consider including extensive documentation regarding the rationale behind its use, clearly explaining what every single assembly instruction does. This will make it easier for users to trust the code, for reviewers to verify it, and for developers to build on top of it or update it.  In particular, consider explaining:  Why the arguments have to be moved from calldata.  How delegateAndReturn and delegateToViewAndReturn provide the return value without the return keyword.  That the 0x20 hardcoded value in the reverts of delegateTo and delegateToViewImplementation exists to offset a bytes array, and the reason for this offset.  Why this offset is not used in the reverts of the delegateToViewAndReturn and delegateAndReturn functions.  Why the return is displaced by 0x40 in the delegateToViewAndReturn function and why it is not needed in the delegateAndReturn function.  Note that the use of assembly discards several important safety features of Solidity, which may render the code unsafe or more error-prone. Hence, consider implementing thorough tests to cover all potential use cases of these functions to ensure they behave as expected.  Low severity  [L01] Price manipulation possible in SimplePriceOracle  The setUnderlyingPrice and setDirectPrice functions from the SimplePriceOracle contract allow the caller to set asset prices in the contract storage. However, these functions do not implement any access control mechanism and have their visibility set as public, thus allowing anyone to execute them.  Any contract using this Oracle to determine the price of an asset could be subject to price manipulation attacks by anyone.  Although the Compound team has explained that this contract is only to be deployed on testnets, consider specifying this through comments or documentation, and consider enforcing this programmatically, perhaps by ensuring that chainid is not equal to 1.For the general public and the whole DeFi space, we highlight that this contract must not be deployed into mainnet.  [L02] Lack of indexed parameters in PricePosted event  None of the parameters in the PricePosted event defined in the SimplePriceOracle contract are indexed.  Consider indexing the asset parameter to ease the task of searching and filtering for specific events.  [L03] The SAI Price is Unchangeable after SCD shutdown  In the PriceOracleProxy contract, setSaiPrice is able to be called once, upon Single Collateral Dai shutdown, to set the price of SAI within Compound. Afterwards, this price cannot be changed. It is intended that the peg be set to equal the exchange rate at which Maker will purchase SAI for ETH after SCD shutdown.  In anticipation of this, Compound has already shut down the ability to supply or borrow SAI. Users may only withdraw SAI or repay borrows with SAI. Notably, users holding SAI may still take out loans.  Although it is unlikely that the actual market price of SAI will deviate from the peg, there is a chance that it could. If it does, Compound will have no way to change the internal price set for SAI without updating the price via governance. If SAIs real market price increases, it may cause confusion as users will be able to borrow less than they anticipate, and be liquidated sooner than anticipated, when using SAI as collateral. If SAIs real market price drops, users holding SAI as collateral may be able to borrow more value than the SAI they hold is worth, creating insolvency risk for the protocol.  In the unlikely event of SAIs price dropping, and assuming Compound holds a total of 600,000 SAI with a SAI collateral factor of 0.75, Compound would be at risk of losing at most $450,000 USD worth of value. Please note that this will be measured in ETH value post-SCD shutdown, so these figures may change. However for comparison, Compound currently custodies about $115M USD worth of assets, so this risk is small relative to the overall size of all Compound markets.  In the event that SAIs market price diverges from the peg, consider initiating a governance proposal to change the oracle to one that actively reports the real market price of SAI. Additionally, consider using the borrowAllowed hook to prevent users from any further borrowing until their balanceOf cSAI is 0.  Notes & Additional Information    Conclusion  No critical or high severity issues were found. Recommendations were made to mitigate risks related to edge cases involving specific market conditions, and to improve the projects overall quality and robustness. We recommended monitoring the real market prices of USDT and USDC and pausing Compound markets if those prices deviate significantly from $1 USD. Overall we found the code to be very clean, well-organized, and easy to follow.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/compound-tether-integration-audit#none.-\ud83d\ude42", "labels": ["OpenZeppelin"]}, {"title": "[N01] Fragile Use Case", "body": "Instead of simply depositing funds in Compound Finance directly and receiving small steady interest payments, users of the PoolTogether system receive large sporadic payoffs.  Pods allow users to choose an intermediate point on this spectrum, where the probability of winning a particular lottery scales with the size of the pod, but each users share of the winnings is reduced accordingly.  It seems that the usefulness of this feature depends on each users ability to choose the size of the pod that they would like to join, and hence where they fall on the payoff spectrum. They may also want to join a pod with specific participants. However, the lack of access control or lock-in undermines this goal, since a given user may find themselves in a significantly larger or smaller pod than they anticipated, due to the actions of other users.  Consider introducing access control or lock-in requirements, or at least documenting the reason for their absence.  Update: The PoolTogether team have indicated that this is the intended behavior, since they prefer to launch this feature with minimal initial restrictions.  [N02] Magic constant  When a pod wins a lottery, the rewarded function is executed with a stipend of 200000 gas. The reason for this decision was explained to us during the audit but we believe it should also be documented in the contract. Consider documenting the reason for the limit, as well as why the particular value of 200000 was chosen.  Update: Fixed in PoolTogether PR#25. The BasePool.callRewarded comment includes an explanation of the stipend.  [N03] Duplicated Code  In the ExchangeRateTracker contract, the currentExchangeRateMantissa function could be simplified by calling the currentExchangeRate function.  Similarly, the tokenToCollateralValue function and the collateralToTokenValue function could reuse the tokenToCollateralValueAt and collateralToTokenValueAt functions respectively (perhaps after a minor refactor).  Update: Partially fixed in PR#8. The currentExchangeRateMantissa function was removed. The conversion functions were retained for convenience.  [N04] Reinitialize exchange tracker  The ExchangeRateTracker data structure can be reinitialized, effectively clearing its contents.  To improve predictability, consider preventing initialize from being called on an initialized tracker. If desired, a reset function can be used instead.  Update: Fixed in PR#9. There is a check to ensure initialize can only be called once.  [N05] Unnecessary addition  When calculating the unconsolidated balance, the result may be calculated by adding zero to the desired value. Consider setting the result directly without the unnecessary addition.  Update: This issue is obsolete because the function was removed when addressing [L03] Complicated Code.  [N06] Typographical errors  line 25 of ExchangeRateTracker.sol:  lines 54-56 of ScheduledBalance.sol:  line 123 of ScheduledBalance.sol:  line 153 of ScheduledBalance.sol:  line 167 of Pods.sol:  line 226 of Pods.sol:  Update: Fixed in PR#10.  Conclusion  One critical and one high severity issue was found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n01]-fragile-use-case", "labels": ["OpenZeppelin"]}, {"title": "Instead of simply depositing funds in Compound Finance directly and receiving small steady interest payments, users of the PoolTogether system receive large sporadic payoffs.", "body": "Instead of simply depositing funds in Compound Finance directly and receiving small steady interest payments, users of the PoolTogether system receive large sporadic payoffs.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#instead-of-simply-depositing-funds-in-compound-finance-directly-and-receiving-small-steady-interest-payments,-users-of-the-pooltogether-system-receive-large-sporadic-payoffs.", "labels": ["OpenZeppelin"]}, {"title": "Pods allow users to choose an intermediate point on this spectrum, where the probability of winning a particular lottery scales with the size of the pod, but each user\u2019s share of the winnings is reduced accordingly.", "body": "Pods allow users to choose an intermediate point on this spectrum, where the probability of winning a particular lottery scales with the size of the pod, but each user\u2019s share of the winnings is reduced accordingly.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#pods-allow-users-to-choose-an-intermediate-point-on-this-spectrum,-where-the-probability-of-winning-a-particular-lottery-scales-with-the-size-of-the-pod,-but-each-user\u2019s-share-of-the-winnings-is-reduced-accordingly.", "labels": ["OpenZeppelin"]}, {"title": "It seems that the usefulness of this feature depends on each user\u2019s ability to choose the size of the pod that they would like to join, and hence where they fall on the payoff spectrum. They may also want to join a pod with specific participants. However, the lack of access control or lock-in undermines this goal, since a given user may find themselves in a significantly larger or smaller pod than they anticipated, due to the actions of other users.", "body": "It seems that the usefulness of this feature depends on each user\u2019s ability to choose the size of the pod that they would like to join, and hence where they fall on the payoff spectrum. They may also want to join a pod with specific participants. However, the lack of access control or lock-in undermines this goal, since a given user may find themselves in a significantly larger or smaller pod than they anticipated, due to the actions of other users.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#it-seems-that-the-usefulness-of-this-feature-depends-on-each-user\u2019s-ability-to-choose-the-size-of-the-pod-that-they-would-like-to-join,-and-hence-where-they-fall-on-the-payoff-spectrum.-they-may-also-want-to-join-a-pod-with-specific-participants.-however,-the-lack-of-access-control-or-lock-in-undermines-this-goal,-since-a-given-user-may-find-themselves-in-a-significantly-larger-or-smaller-pod-than-they-anticipated,-due-to-the-actions-of-other-users.", "labels": ["OpenZeppelin"]}, {"title": "Consider introducing access control or lock-in requirements, or at least documenting the reason for their absence.", "body": "Consider introducing access control or lock-in requirements, or at least documenting the reason for their absence.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#consider-introducing-access-control-or-lock-in-requirements,-or-at-least-documenting-the-reason-for-their-absence.", "labels": ["OpenZeppelin"]}, {"title": "Update: The PoolTogether team have indicated that this is the intended behavior, since they prefer to launch this feature with minimal initial restrictions.", "body": "Update: The PoolTogether team have indicated that this is the intended behavior, since they prefer to launch this feature with minimal initial restrictions.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-the-pooltogether-team-have-indicated-that-this-is-the-intended-behavior,-since-they-prefer-to-launch-this-feature-with-minimal-initial-restrictions.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Magic constant", "body": "[N02] Magic constant", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n02]-magic-constant", "labels": ["OpenZeppelin"]}, {"title": "When a pod wins a lottery, the rewarded function is executed with a stipend of 200000 gas. The reason for this decision was explained to us during the audit but we believe it should also be documented in the contract. Consider documenting the reason for the limit, as well as why the particular value of 200000 was chosen.", "body": "When a pod wins a lottery, the rewarded function is executed with a stipend of 200000 gas. The reason for this decision was explained to us during the audit but we believe it should also be documented in the contract. Consider documenting the reason for the limit, as well as why the particular value of 200000 was chosen.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#when-a-pod-wins-a-lottery,-the-rewarded-function-is-executed-with-a-stipend-of-200000-gas.-the-reason-for-this-decision-was-explained-to-us-during-the-audit-but-we-believe-it-should-also-be-documented-in-the-contract.-consider-documenting-the-reason-for-the-limit,-as-well-as-why-the-particular-value-of-200000-was-chosen.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PoolTogether PR#25. The BasePool.callRewarded comment includes an explanation of the stipend.", "body": "Update: Fixed in PoolTogether PR#25. The BasePool.callRewarded comment includes an explanation of the stipend.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-fixed-in-pooltogether-pr#25.-the-basepool.callrewarded-comment-includes-an-explanation-of-the-stipend.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Duplicated Code", "body": "[N03] Duplicated Code", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n03]-duplicated-code", "labels": ["OpenZeppelin"]}, {"title": "In the ExchangeRateTracker contract, the currentExchangeRateMantissa function could be simplified by calling the currentExchangeRate function.", "body": "In the ExchangeRateTracker contract, the currentExchangeRateMantissa function could be simplified by calling the currentExchangeRate function.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#in-the-exchangeratetracker-contract,-the-currentexchangeratemantissa-function-could-be-simplified-by-calling-the-currentexchangerate-function.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, the tokenToCollateralValue function and the collateralToTokenValue function could reuse the tokenToCollateralValueAt and collateralToTokenValueAt functions respectively (perhaps after a minor refactor).", "body": "Similarly, the tokenToCollateralValue function and the collateralToTokenValue function could reuse the tokenToCollateralValueAt and collateralToTokenValueAt functions respectively (perhaps after a minor refactor).", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#similarly,-the-tokentocollateralvalue-function-and-the-collateraltotokenvalue-function-could-reuse-the-tokentocollateralvalueat-and-collateraltotokenvalueat-functions-respectively-(perhaps-after-a-minor-refactor).", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#8. The currentExchangeRateMantissa function was removed. The conversion functions were retained for convenience.", "body": "Update: Partially fixed in PR#8. The currentExchangeRateMantissa function was removed. The conversion functions were retained for convenience.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-partially-fixed-in-pr#8.-the-currentexchangeratemantissa-function-was-removed.-the-conversion-functions-were-retained-for-convenience.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Reinitialize exchange tracker", "body": "[N04] Reinitialize exchange tracker", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n04]-reinitialize-exchange-tracker", "labels": ["OpenZeppelin"]}, {"title": "The ExchangeRateTracker data structure can be reinitialized, effectively clearing its contents.", "body": "The ExchangeRateTracker data structure can be reinitialized, effectively clearing its contents.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#the-exchangeratetracker-data-structure-can-be-reinitialized,-effectively-clearing-its-contents.", "labels": ["OpenZeppelin"]}, {"title": "To improve predictability, consider preventing initialize from being called on an initialized tracker. If desired, a reset function can be used instead.", "body": "To improve predictability, consider preventing initialize from being called on an initialized tracker. If desired, a reset function can be used instead.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#to-improve-predictability,-consider-preventing-initialize-from-being-called-on-an-initialized-tracker.-if-desired,-a-reset-function-can-be-used-instead.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#9. There is a check to ensure initialize can only be called once.", "body": "Update: Fixed in PR#9. There is a check to ensure initialize can only be called once.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-fixed-in-pr#9.-there-is-a-check-to-ensure-initialize-can-only-be-called-once.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessary addition", "body": "[N05] Unnecessary addition", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n05]-unnecessary-addition", "labels": ["OpenZeppelin"]}, {"title": "When calculating the unconsolidated balance, the result may be calculated by adding zero to the desired value. Consider setting the result directly without the unnecessary addition.", "body": "When calculating the unconsolidated balance, the result may be calculated by adding zero to the desired value. Consider setting the result directly without the unnecessary addition.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#when-calculating-the-unconsolidated-balance,-the-result-may-be-calculated-by-adding-zero-to-the-desired-value.-consider-setting-the-result-directly-without-the-unnecessary-addition.", "labels": ["OpenZeppelin"]}, {"title": "Update: This issue is obsolete because the function was removed when addressing \u201c[L03] Complicated Code\u201d.", "body": "Update: This issue is obsolete because the function was removed when addressing \u201c[L03] Complicated Code\u201d.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-this-issue-is-obsolete-because-the-function-was-removed-when-addressing-\u201c[l03]-complicated-code\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Typographical errors", "body": "[N06] Typographical errors", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#[n06]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "line 25 of ExchangeRateTracker.sol:", "body": "line 25 of ExchangeRateTracker.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#line-25-of-exchangeratetracker.sol:", "labels": ["OpenZeppelin"]}, {"title": "lines 54-56 of ScheduledBalance.sol:", "body": "lines 54-56 of ScheduledBalance.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#lines-54-56-of-scheduledbalance.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 123 of ScheduledBalance.sol:", "body": "line 123 of ScheduledBalance.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#line-123-of-scheduledbalance.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 153 of ScheduledBalance.sol:", "body": "line 153 of ScheduledBalance.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#line-153-of-scheduledbalance.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 167 of Pods.sol:", "body": "line 167 of Pods.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#line-167-of-pods.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 226 of Pods.sol:", "body": "line 226 of Pods.sol:", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#line-226-of-pods.sol:", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#10.", "body": "Update: Fixed in PR#10.", "html_url": "https://blog.openzeppelin.com/pooltogether-pods-audit#update:-fixed-in-pr#10.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Unnecessary reads from storage", "body": "[N01] Unnecessary reads from storage", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#[n01]-unnecessary-reads-from-storage", "labels": ["OpenZeppelin"]}, {"title": "The accrueInterest function of the CToken contract was modified to, among other things, reduce the amount of storage read operations. This is intended to make the system more efficient in terms of gas costs. However, there still are redundant read operations that can be avoided. In particular:", "body": "The accrueInterest function of the CToken contract was modified to, among other things, reduce the amount of storage read operations. This is intended to make the system more efficient in terms of gas costs. However, there still are redundant read operations that can be avoided. In particular:", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#the-accrueinterest-function-of-the-ctoken-contract-was-modified-to,-among-other-things,-reduce-the-amount-of-storage-read-operations.-this-is-intended-to-make-the-system-more-efficient-in-terms-of-gas-costs.-however,-there-still-are-redundant-read-operations-that-can-be-avoided.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "State variable totalBorrows is assigned to the borrowsPrior local variable in line 394, but later is read from storage in lines 426 and 431", "body": "State variable totalBorrows is assigned to the borrowsPrior local variable in line 394, but later is read from storage in lines 426 and 431", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#state-variable-totalborrows-is-assigned-to-the-borrowsprior-local-variable-in-line-394,-but-later-is-read-from-storage-in-lines-426-and-431", "labels": ["OpenZeppelin"]}, {"title": "State variable totalReserves is assigned to the reservesPrior local variable in line 395, but later is read from storage in line 436", "body": "State variable totalReserves is assigned to the reservesPrior local variable in line 395, but later is read from storage in line 436", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#state-variable-totalreserves-is-assigned-to-the-reservesprior-local-variable-in-line-395,-but-later-is-read-from-storage-in-line-436", "labels": ["OpenZeppelin"]}, {"title": "Consider reusing the corresponding local variables to avoid redundant SLOADs operations.", "body": "Consider reusing the corresponding local variables to avoid redundant SLOADs operations.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#consider-reusing-the-corresponding-local-variables-to-avoid-redundant-sloads-operations.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inconsistent use of enum for error messages", "body": "[N02] Inconsistent use of enum for error messages", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#[n02]-inconsistent-use-of-enum-for-error-messages", "labels": ["OpenZeppelin"]}, {"title": "A verification previously done in the redeemVerify function has been inlined at the end of the redeemFresh function to avoid an unnecessary call to the Comptroller contract. However, the error message included in the new require statement has been hardcoded instead of using the FailureInfo enum used throughout the rest of the function.", "body": "A verification previously done in the redeemVerify function has been inlined at the end of the redeemFresh function to avoid an unnecessary call to the Comptroller contract. However, the error message included in the new require statement has been hardcoded instead of using the FailureInfo enum used throughout the rest of the function.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#a-verification-previously-done-in-the-redeemverify-function-has-been-inlined-at-the-end-of-the-redeemfresh-function-to-avoid-an-unnecessary-call-to-the-comptroller-contract.-however,-the-error-message-included-in-the-new-require-statement-has-been-hardcoded-instead-of-using-the-failureinfo-enum-used-throughout-the-rest-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the new error to the FailureInfo enum of the TokenErrorReporter contract so as to keep a consistent style in error messages of the redeemFresh function.", "body": "Consider adding the new error to the FailureInfo enum of the TokenErrorReporter contract so as to keep a consistent style in error messages of the redeemFresh function.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#consider-adding-the-new-error-to-the-failureinfo-enum-of-the-tokenerrorreporter-contract-so-as-to-keep-a-consistent-style-in-error-messages-of-the-redeemfresh-function.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Inconsistent use of warning comments when calling doTransferIn function", "body": "[N03] Inconsistent use of warning comments when calling doTransferIn function", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#[n03]-inconsistent-use-of-warning-comments-when-calling-dotransferin-function", "labels": ["OpenZeppelin"]}, {"title": "mintFresh,", "body": "mintFresh,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#mintfresh,", "labels": ["OpenZeppelin"]}, {"title": "repayBorrowFresh and", "body": "repayBorrowFresh and", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#repayborrowfresh-and", "labels": ["OpenZeppelin"]}, {"title": "_addReservesFresh functions of the", "body": "_addReservesFresh functions of the", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#_addreservesfresh-functions-of-the", "labels": ["OpenZeppelin"]}, {"title": "mintFresh and", "body": "mintFresh and", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#mintfresh-and", "labels": ["OpenZeppelin"]}, {"title": "repayBorrowFresh functions, but are missing in the", "body": "repayBorrowFresh functions, but are missing in the", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#repayborrowfresh-functions,-but-are-missing-in-the", "labels": ["OpenZeppelin"]}, {"title": "_addReservesFresh function.", "body": "_addReservesFresh function.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#_addreservesfresh-function.", "labels": ["OpenZeppelin"]}, {"title": "To be consistent in the use of warning comments and favor the code\u2019s readability, consider adding similar warnings in the _addReservesFresh function before doTransferIn is called.", "body": "To be consistent in the use of warning comments and favor the code\u2019s readability, consider adding similar warnings in the _addReservesFresh function before doTransferIn is called.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#to-be-consistent-in-the-use-of-warning-comments-and-favor-the-code\u2019s-readability,-consider-adding-similar-warnings-in-the-_addreservesfresh-function-before-dotransferin-is-called.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Unused verification functions", "body": "[N04] Unused verification functions", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#[n04]-unused-verification-functions", "labels": ["OpenZeppelin"]}, {"title": "transferVerify,", "body": "transferVerify,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#transferverify,", "labels": ["OpenZeppelin"]}, {"title": "mintVerify,", "body": "mintVerify,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#mintverify,", "labels": ["OpenZeppelin"]}, {"title": "redeemVerify,", "body": "redeemVerify,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#redeemverify,", "labels": ["OpenZeppelin"]}, {"title": "borrowVerify,", "body": "borrowVerify,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#borrowverify,", "labels": ["OpenZeppelin"]}, {"title": "repayBorrowVerify,", "body": "repayBorrowVerify,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#repayborrowverify,", "labels": ["OpenZeppelin"]}, {"title": "seizeVerify functions, since they are no longer being used. Alternatively, consider adding an inline comment explicitly stating that these functions are never used to favor readability.", "body": "seizeVerify functions, since they are no longer being used. Alternatively, consider adding an inline comment explicitly stating that these functions are never used to favor readability.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#seizeverify-functions,-since-they-are-no-longer-being-used.-alternatively,-consider-adding-an-inline-comment-explicitly-stating-that-these-functions-are-never-used-to-favor-readability.", "labels": ["OpenZeppelin"]}, {"title": "This note should be disregarded if the mentioned external functions are used by off-chain clients.", "body": "This note should be disregarded if the mentioned external functions are used by off-chain clients.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#this-note-should-be-disregarded-if-the-mentioned-external-functions-are-used-by-off-chain-clients.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unused error codes", "body": "[N05] Unused error codes", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#[n05]-unused-error-codes", "labels": ["OpenZeppelin"]}, {"title": "REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,", "body": "ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE from the  scenario/src/ErrorReporterConstants.ts file.  Conclusions  No critical nor high issues were found. Minor suggestions were made to improve the codes overall quality.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#repay_borrow_transfer_in_not_possible,", "labels": ["OpenZeppelin"]}, {"title": "TOKEN_INSUFFICIENT_ALLOWANCE,", "body": "TOKEN_INSUFFICIENT_ALLOWANCE,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#token_insufficient_allowance,", "labels": ["OpenZeppelin"]}, {"title": "TOKEN_INSUFFICIENT_BALANCE,", "body": "TOKEN_INSUFFICIENT_BALANCE,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#token_insufficient_balance,", "labels": ["OpenZeppelin"]}, {"title": "MINT_TRANSFER_IN_NOT_POSSIBLE,", "body": "MINT_TRANSFER_IN_NOT_POSSIBLE,", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#mint_transfer_in_not_possible,", "labels": ["OpenZeppelin"]}, {"title": "ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE from the", "body": "ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE from the", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#add_reserves_transfer_in_not_possible-from-the", "labels": ["OpenZeppelin"]}, {"title": "scenario/src/ErrorReporterConstants.ts file.", "body": "scenario/src/ErrorReporterConstants.ts file.", "html_url": "https://blog.openzeppelin.com/compound-gas-optimizations-audit#scenario/src/errorreporterconstants.ts-file.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Rogue operators in AffiliateValidator contract", "body": "[N01] Rogue operators in AffiliateValidator contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n01]-rogue-operators-in-affiliatevalidator-contract", "labels": ["OpenZeppelin"]}, {"title": "The AffiliateValidator contract defines a mapping of operators. Operators are registered by the contract owner and are identified with their Ethereum address. The main purpose of an operator is to sign approved keys for users that go through a Know Your Customer (KYC) process, which will validate users in the affiliate system for any Augur market that specifies the corresponding AffiliateValidator contract.", "body": "The AffiliateValidator contract defines a mapping of operators. Operators are registered by the contract owner and are identified with their Ethereum address. The main purpose of an operator is to sign approved keys for users that go through a Know Your Customer (KYC) process, which will validate users in the affiliate system for any Augur market that specifies the corresponding AffiliateValidator contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-affiliatevalidator-contract-defines-a-mapping-of-operators.-operators-are-registered-by-the-contract-owner-and-are-identified-with-their-ethereum-address.-the-main-purpose-of-an-operator-is-to-sign-approved-keys-for-users-that-go-through-a-know-your-customer-(kyc)-process,-which-will-validate-users-in-the-affiliate-system-for-any-augur-market-that-specifies-the-corresponding-affiliatevalidator-contract.", "labels": ["OpenZeppelin"]}, {"title": "Even though operators are expected to be fully trusted entities, their powers must be understood in depth to be aware of misbehaviors. For this reason, following we highlight three potentially unexpected actions that can be carried out by rogue operators.", "body": "Even though operators are expected to be fully trusted entities, their powers must be understood in depth to be aware of misbehaviors. For this reason, following we highlight three potentially unexpected actions that can be carried out by rogue operators.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#even-though-operators-are-expected-to-be-fully-trusted-entities,-their-powers-must-be-understood-in-depth-to-be-aware-of-misbehaviors.-for-this-reason,-following-we-highlight-three-potentially-unexpected-actions-that-can-be-carried-out-by-rogue-operators.", "labels": ["OpenZeppelin"]}, {"title": "When a rogue operator sees a call to the addKey function in a node\u2019s pool of pending transactions, they can front-run it with a new transaction using the same salt as the victim\u2019s transaction. If the rogue operator effectively front-runs, then the salt will be registered as used and the second transaction using that same salt will fail. The rogue operator can do this indefinitely until being removed by the owner of the AffiliateValidator contract. This would prevent any other new key from being added, thus causing a Denial of Service on the targeted contract.", "body": "When a rogue operator sees a call to the addKey function in a node\u2019s pool of pending transactions, they can front-run it with a new transaction using the same salt as the victim\u2019s transaction. If the rogue operator effectively front-runs, then the salt will be registered as used and the second transaction using that same salt will fail. The rogue operator can do this indefinitely until being removed by the owner of the AffiliateValidator contract. This would prevent any other new key from being added, thus causing a Denial of Service on the targeted contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#when-a-rogue-operator-sees-a-call-to-the-addkey-function-in-a-node\u2019s-pool-of-pending-transactions,-they-can-front-run-it-with-a-new-transaction-using-the-same-salt-as-the-victim\u2019s-transaction.-if-the-rogue-operator-effectively-front-runs,-then-the-salt-will-be-registered-as-used-and-the-second-transaction-using-that-same-salt-will-fail.-the-rogue-operator-can-do-this-indefinitely-until-being-removed-by-the-owner-of-the-affiliatevalidator-contract.-this-would-prevent-any-other-new-key-from-being-added,-thus-causing-a-denial-of-service-on-the-targeted-contract.", "labels": ["OpenZeppelin"]}, {"title": "A rogue operator may allow users to use the same key as their referrer. This would prevent the referrer from getting her corresponding affiliate fees, as the call to the validateReference function would be reverted.", "body": "A rogue operator may allow users to use the same key as their referrer. This would prevent the referrer from getting her corresponding affiliate fees, as the call to the validateReference function would be reverted.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#a-rogue-operator-may-allow-users-to-use-the-same-key-as-their-referrer.-this-would-prevent-the-referrer-from-getting-her-corresponding-affiliate-fees,-as-the-call-to-the-validatereference-function-would-be-reverted.", "labels": ["OpenZeppelin"]}, {"title": "A rogue operator may allow users to clear their registered keys by approving and signing keys containing all zeros. This would also prevent the referrer from getting her affiliate fees, as the call to the validateReference function would be reverted.", "body": "A rogue operator may allow users to clear their registered keys by approving and signing keys containing all zeros. This would also prevent the referrer from getting her affiliate fees, as the call to the validateReference function would be reverted.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#a-rogue-operator-may-allow-users-to-clear-their-registered-keys-by-approving-and-signing-keys-containing-all-zeros.-this-would-also-prevent-the-referrer-from-getting-her-affiliate-fees,-as-the-call-to-the-validatereference-function-would-be-reverted.", "labels": ["OpenZeppelin"]}, {"title": "Consider explicitly documenting the role of operators in Augur\u2019s affiliate system, highlighting what is the set of expected actions that they can carry out in the protocol.", "body": "Consider explicitly documenting the role of operators in Augur\u2019s affiliate system, highlighting what is the set of expected actions that they can carry out in the protocol.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#consider-explicitly-documenting-the-role-of-operators-in-augur\u2019s-affiliate-system,-highlighting-what-is-the-set-of-expected-actions-that-they-can-carry-out-in-the-protocol.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Affiliate keys may reveal user KYC information", "body": "[N02] Affiliate keys may reveal user KYC information", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n02]-affiliate-keys-may-reveal-user-kyc-information", "labels": ["OpenZeppelin"]}, {"title": "The keys mapping of the AffiliateValidator contract stores a user-specific key (a bytes32 value), computed and signed by a trusted operator. The Augur team indicated that the key might be a hash of the user\u2019s Know Your Customer (KYC) information, such as phone number and IP address. Different operators with the same information will produce the same user-specific key.", "body": "The keys mapping of the AffiliateValidator contract stores a user-specific key (a bytes32 value), computed and signed by a trusted operator. The Augur team indicated that the key might be a hash of the user\u2019s Know Your Customer (KYC) information, such as phone number and IP address. Different operators with the same information will produce the same user-specific key.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-keys-mapping-of-the-affiliatevalidator-contract-stores-a-user-specific-key-(a-bytes32-value),-computed-and-signed-by-a-trusted-operator.-the-augur-team-indicated-that-the-key-might-be-a-hash-of-the-user\u2019s-know-your-customer-(kyc)-information,-such-as-phone-number-and-ip-address.-different-operators-with-the-same-information-will-produce-the-same-user-specific-key.", "labels": ["OpenZeppelin"]}, {"title": "It should be noted that in this context the hash provides minimal confidentiality. This is because the number of possible inputs to produce the hash is likely small enough to be exhaustible. Since the key will be publicly available and associated directly with the user\u2019s Ethereum address, an attacker can simply try all possible inputs until the correct hash is found, thereby revealing the KYC information. Typically, a large private random number is included when hashing low-entropy inputs to avoid this issue. Yet this would undermine the goal of having the same KYC information produce the same key.", "body": "It should be noted that in this context the hash provides minimal confidentiality. This is because the number of possible inputs to produce the hash is likely small enough to be exhaustible. Since the key will be publicly available and associated directly with the user\u2019s Ethereum address, an attacker can simply try all possible inputs until the correct hash is found, thereby revealing the KYC information. Typically, a large private random number is included when hashing low-entropy inputs to avoid this issue. Yet this would undermine the goal of having the same KYC information produce the same key.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#it-should-be-noted-that-in-this-context-the-hash-provides-minimal-confidentiality.-this-is-because-the-number-of-possible-inputs-to-produce-the-hash-is-likely-small-enough-to-be-exhaustible.-since-the-key-will-be-publicly-available-and-associated-directly-with-the-user\u2019s-ethereum-address,-an-attacker-can-simply-try-all-possible-inputs-until-the-correct-hash-is-found,-thereby-revealing-the-kyc-information.-typically,-a-large-private-random-number-is-included-when-hashing-low-entropy-inputs-to-avoid-this-issue.-yet-this-would-undermine-the-goal-of-having-the-same-kyc-information-produce-the-same-key.", "labels": ["OpenZeppelin"]}, {"title": "The KYC procedure is out of scope for this audit, and revealing KYC information does not introduce a security vulnerability in the Augur protocol itself. Nevertheless, we highlight this issue as it may have not been considered and we understand the Augur team should be aware of the risk.", "body": "The KYC procedure is out of scope for this audit, and revealing KYC information does not introduce a security vulnerability in the Augur protocol itself. Nevertheless, we highlight this issue as it may have not been considered and we understand the Augur team should be aware of the risk.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-kyc-procedure-is-out-of-scope-for-this-audit,-and-revealing-kyc-information-does-not-introduce-a-security-vulnerability-in-the-augur-protocol-itself.-nevertheless,-we-highlight-this-issue-as-it-may-have-not-been-considered-and-we-understand-the-augur-team-should-be-aware-of-the-risk.", "labels": ["OpenZeppelin"]}, {"title": "[N03] ECDSA parameter verification", "body": "[N03] ECDSA parameter verification", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n03]-ecdsa-parameter-verification", "labels": ["OpenZeppelin"]}, {"title": "accepts ECDSA signatures over messages that prepend the appropriate magic constant. However, it does not restrict the possible value of", "body": "accepts ECDSA signatures over messages that prepend the appropriate magic constant. However, it does not restrict the possible value of", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#accepts-ecdsa-signatures-over-messages-that-prepend-the-appropriate-magic-constant.-however,-it-does-not-restrict-the-possible-value-of", "labels": ["OpenZeppelin"]}, {"title": "signature malleability, it is common practice to restrict", "body": "signature malleability, it is common practice to restrict", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#signature-malleability,-it-is-common-practice-to-restrict", "labels": ["OpenZeppelin"]}, {"title": "Note that the AffiliateValidator contract is not vulnerable to signature malleability (within a single contract instance) because the salt used in the signature must be unique. Nevertheless, to favor consistency, consider implementing the additional restrictions. Consider using OpenZeppelin\u2019s ECDSA library as a reference implementation.", "body": "Note that the AffiliateValidator contract is not vulnerable to signature malleability (within a single contract instance) because the salt used in the signature must be unique. Nevertheless, to favor consistency, consider implementing the additional restrictions. Consider using OpenZeppelin\u2019s ECDSA library as a reference implementation.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#note-that-the-affiliatevalidator-contract-is-not-vulnerable-to-signature-malleability-(within-a-single-contract-instance)-because-the-salt-used-in-the-signature-must-be-unique.-nevertheless,-to-favor-consistency,-consider-implementing-the-additional-restrictions.-consider-using-openzeppelin\u2019s-ecdsa-library-as-a-reference-implementation.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Unfulfillable condition in Affiliates contract", "body": "[N04] Unfulfillable condition in Affiliates contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n04]-unfulfillable-condition-in-affiliates-contract", "labels": ["OpenZeppelin"]}, {"title": "getAndValidateReferrer function of the", "body": "when it matches the passed _account address. However, this last scenario is impossible to reach with a non-zero  referrals mapping) already  ensures that the key and value cannot be the same.  To favor readability and avoid unnecessary validations, consider removing the unfulfillable condition.  [N05] Missing inheritance in Affiliates contract  To favor consistency and explicitness, consider modifying the Affiliates contract so that it inherits from the IAffiliates contract.  [N06] Redundant boolean check in ERC1155 contract  Lines 151 and 215 of the ERC1155 contract both explicitly compare a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.  [N07] ERC1155 token contract is an approved operator  returns true if the queried operator is the token contract itself. Although the contract can update balances at will, referring to it as an operator for a particular account may be confusing, particularly since it introduces an inconsistency between the  ERC1155 reference implementation.  Consider returning false when the queried operator is the token contract itself.  [N08] Unnecessary ERC1155 hooks in internal burn functions  _burn and  _burnBatch functions of the  To favor simplicity, consider removing the doAcceptanceCheck flag, and related logic, from the internal burn functions of the ERC1155 contract.  [N09] Redundant preconditions  notifyMarketFinalized function of the  if the universe is not undergoing a fork. However, this condition is already checked during the  call to the recordMarketFinalized function. Internally,  awardRep, which in turn calls the  mintForWarpSync function of the  updateForkValues function of the Universe contract. This function first  validates that the current universe is not forking before continuing execution.  Similarly, the migrateThroughOneFork function of the Market contract ensures the market is not finalized, but this condition is checked in the following call to disavowCrowdsourcers  To favor simplicity and reduce gas costs, consider removing the redundant validations.  [N10] Inconsistent behavior in GnosisSafeRegistry contract  The GnosisSafeRegistry contract implements two different functions for registering new Gnosis Safe Multisig wallets: register and callRegister. However, by calling register instead of callRegister, it is possible to register wallets that:  May not have approved Cash tokens to the Augur contract  May not have approved Cash tokens nor ShareTokens to the CreateOrder contract  May not have approved Cash tokens nor ShareTokens to the FillOrder contract  May not have set a fingerprint in the Affiliates contract  Consider either providing a single function for registering wallets in the GnosisSafeRegistry contract, or explicitly documenting the described inconsistent behavior between the register and callRegister functions, highlighting under which circumstances each function is expected to be called.  [N11] Naming  In the GnosisSafeRegistry contract, the getSafe function should be renamed to getCurrentSafe, getActiveSafe or similar.  In the WarpSync contract:  State variable MARKET_LENGTH should be renamed to MARKET_DURATION  Structure Data and state variable data should have more self-explanatory names.  [N12] Lack of explicit visibility in state variables  The following state variables are implicitly using the default visibility:  In the AffiliateValidator contract: keys, operators and usedSalts.  In the Market contract: affiliateValidator and affiliates.  To favor readability, consider explicitly declaring the visibility of all state variables.  [N13] Named return variables  Named return variables are used inconsistently. For example, while the ProxyFactory contract names its return variables, the Affiliates contract does not. Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  [N14] Reuse zero address constant in Market contract  In line 344 of Market.sol, considering replacing address(0) with the NULL_ADDRESS constant to favor consistency.  [N15] Inconsistent imports  The following imports are not used:  The IWarpSync.sol file unnecessarily imports the IUniverse contract.  The Market.sol file unnecessarily imports the IERC1155 contract.  Consider removing the unnecessary imports.  On the other hand, the following contracts rely on indirect imports:  GnosisSafeRegistry.sol uses the IAugur.sol imports to obtain the IERC20 contract.  WarpSync.sol uses the IMarket.sol imports to obtain the IAugur contract.  Consider importing these contracts explicitly.  [N16] Typos  In the ProxyFactory contracts docstrings: contact should be contract. There are five instances of this typo in the contracts file.  In line 7 of Affiliates.sol: their fingerprint should say its fingerprint and naievly should say naively.  In line 8 of AffiliateValidator.sol: their key should say its key.  In the ERC1155 contract: all instances of _supplys should be _supplies. Moreover, in line 188: the comment should say onERC1155BatchReceived instead of onERC1155Received.  In line 180 of Market.sol: tenative should be tentative.  In line 255 and line 698 of Market.sol: occured should be occurred.  In line 656 of Market.sol: finalzied should be finalized and timestmap should be timestamp  In line 720 of Market.sol: has should be hash.  In line 83 of WarpSync.sol: occuring should be occurring.  [N17] Declare uint as uint256  To favor explicitness, all instances of uint should be declared as uint256. See for example lines 280 and 322 of ERC1155.sol.  [N18] Not explicitly casting to address type  763,  766 and  785 of  [N19] Unused variable  The migrateThroughOneFork function of the Market contract defines a local variable _numOutcomes that is never used. Consider removing the definition.  Conclusion  1 critical and 4 high severity issues were found, all of them fixed and reviewed. Several recommendations were made to improve the projects overall quality and reduce its attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#getandvalidatereferrer-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "when it matches the passed _account address. However, this last scenario is impossible to reach with a non-zero", "body": "when it matches the passed _account address. However, this last scenario is impossible to reach with a non-zero", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#when-it-matches-the-passed-_account-address.-however,-this-last-scenario-is-impossible-to-reach-with-a-non-zero", "labels": ["OpenZeppelin"]}, {"title": "referrals mapping) already", "body": "referrals mapping) already", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#referrals-mapping)-already", "labels": ["OpenZeppelin"]}, {"title": "ensures that the key and value cannot be the same.", "body": "ensures that the key and value cannot be the same.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#ensures-that-the-key-and-value-cannot-be-the-same.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability and avoid unnecessary validations, consider removing the unfulfillable condition.", "body": "To favor readability and avoid unnecessary validations, consider removing the unfulfillable condition.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-readability-and-avoid-unnecessary-validations,-consider-removing-the-unfulfillable-condition.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Missing inheritance in Affiliates contract", "body": "[N05] Missing inheritance in Affiliates contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n05]-missing-inheritance-in-affiliates-contract", "labels": ["OpenZeppelin"]}, {"title": "To favor consistency and explicitness, consider modifying the Affiliates contract so that it inherits from the IAffiliates contract.", "body": "To favor consistency and explicitness, consider modifying the Affiliates contract so that it inherits from the IAffiliates contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-consistency-and-explicitness,-consider-modifying-the-affiliates-contract-so-that-it-inherits-from-the-iaffiliates-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Redundant boolean check in ERC1155 contract", "body": "[N06] Redundant boolean check in ERC1155 contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n06]-redundant-boolean-check-in-erc1155-contract", "labels": ["OpenZeppelin"]}, {"title": "Lines 151 and 215 of the ERC1155 contract both explicitly compare a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "body": "Lines 151 and 215 of the ERC1155 contract both explicitly compare a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#lines-151-and-215-of-the-erc1155-contract-both-explicitly-compare-a-boolean-value-to-true.-this-is-a-redundant-operation-because-the-result-will-be-equivalent-to-the-boolean-value-itself.-consider-removing-the-redundant-comparison.", "labels": ["OpenZeppelin"]}, {"title": "[N07] ERC1155 token contract is an approved operator", "body": "[N07] ERC1155 token contract is an approved operator", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n07]-erc1155-token-contract-is-an-approved-operator", "labels": ["OpenZeppelin"]}, {"title": "returns true if the queried operator is the token contract itself. Although the contract can update balances at will, referring to it as an operator for a particular account may be confusing, particularly since it introduces an inconsistency between the", "body": "returns true if the queried operator is the token contract itself. Although the contract can update balances at will, referring to it as an operator for a particular account may be confusing, particularly since it introduces an inconsistency between the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#returns-true-if-the-queried-operator-is-the-token-contract-itself.-although-the-contract-can-update-balances-at-will,-referring-to-it-as-an-operator-for-a-particular-account-may-be-confusing,-particularly-since-it-introduces-an-inconsistency-between-the", "labels": ["OpenZeppelin"]}, {"title": "ERC1155 reference implementation.", "body": "ERC1155 reference implementation.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#erc1155-reference-implementation.", "labels": ["OpenZeppelin"]}, {"title": "Consider returning false when the queried operator is the token contract itself.", "body": "Consider returning false when the queried operator is the token contract itself.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#consider-returning-false-when-the-queried-operator-is-the-token-contract-itself.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unnecessary ERC1155 hooks in internal burn functions", "body": "[N08] Unnecessary ERC1155 hooks in internal burn functions", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n08]-unnecessary-erc1155-hooks-in-internal-burn-functions", "labels": ["OpenZeppelin"]}, {"title": "_burn and", "body": "_burn and", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#_burn-and", "labels": ["OpenZeppelin"]}, {"title": "_burnBatch functions of the", "body": "_burnBatch functions of the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#_burnbatch-functions-of-the", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider removing the doAcceptanceCheck flag, and related logic, from the internal burn functions of the ERC1155 contract.", "body": "To favor simplicity, consider removing the doAcceptanceCheck flag, and related logic, from the internal burn functions of the ERC1155 contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-simplicity,-consider-removing-the-doacceptancecheck-flag,-and-related-logic,-from-the-internal-burn-functions-of-the-erc1155-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Redundant preconditions", "body": "[N09] Redundant preconditions", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n09]-redundant-preconditions", "labels": ["OpenZeppelin"]}, {"title": "notifyMarketFinalized function of the", "body": "notifyMarketFinalized function of the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#notifymarketfinalized-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "if the universe is not undergoing a fork. However, this condition is already checked during the", "body": "if the universe is not undergoing a fork. However, this condition is already checked during the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#if-the-universe-is-not-undergoing-a-fork.-however,-this-condition-is-already-checked-during-the", "labels": ["OpenZeppelin"]}, {"title": "call to the recordMarketFinalized function. Internally,", "body": "call to the recordMarketFinalized function. Internally,", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#call-to-the-recordmarketfinalized-function.-internally,", "labels": ["OpenZeppelin"]}, {"title": "awardRep, which in turn calls the", "body": "awardRep, which in turn calls the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#awardrep,-which-in-turn-calls-the", "labels": ["OpenZeppelin"]}, {"title": "mintForWarpSync function of the", "body": "mintForWarpSync function of the", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#mintforwarpsync-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "updateForkValues function of the Universe contract. This function first", "body": "updateForkValues function of the Universe contract. This function first", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#updateforkvalues-function-of-the-universe-contract.-this-function-first", "labels": ["OpenZeppelin"]}, {"title": "validates that the current universe is not forking before continuing execution.", "body": "validates that the current universe is not forking before continuing execution.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#validates-that-the-current-universe-is-not-forking-before-continuing-execution.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, the migrateThroughOneFork function of the Market contract ensures the market is not finalized, but this condition is checked in the following call to disavowCrowdsourcers", "body": "Similarly, the migrateThroughOneFork function of the Market contract ensures the market is not finalized, but this condition is checked in the following call to disavowCrowdsourcers", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#similarly,-the-migratethroughonefork-function-of-the-market-contract-ensures-the-market-is-not-finalized,-but-this-condition-is-checked-in-the-following-call-to-disavowcrowdsourcers", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity and reduce gas costs, consider removing the redundant validations.", "body": "To favor simplicity and reduce gas costs, consider removing the redundant validations.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-simplicity-and-reduce-gas-costs,-consider-removing-the-redundant-validations.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Inconsistent behavior in GnosisSafeRegistry contract", "body": "[N10] Inconsistent behavior in GnosisSafeRegistry contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n10]-inconsistent-behavior-in-gnosissaferegistry-contract", "labels": ["OpenZeppelin"]}, {"title": "The GnosisSafeRegistry contract implements two different functions for registering new Gnosis Safe Multisig wallets: register and callRegister. However, by calling register instead of callRegister, it is possible to register wallets that:", "body": "The GnosisSafeRegistry contract implements two different functions for registering new Gnosis Safe Multisig wallets: register and callRegister. However, by calling register instead of callRegister, it is possible to register wallets that:", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-gnosissaferegistry-contract-implements-two-different-functions-for-registering-new-gnosis-safe-multisig-wallets:-register-and-callregister.-however,-by-calling-register-instead-of-callregister,-it-is-possible-to-register-wallets-that:", "labels": ["OpenZeppelin"]}, {"title": "May not have approved Cash tokens to the Augur contract", "body": "May not have approved Cash tokens to the Augur contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#may-not-have-approved-cash-tokens-to-the-augur-contract", "labels": ["OpenZeppelin"]}, {"title": "May not have approved Cash tokens nor ShareTokens to the CreateOrder contract", "body": "May not have approved Cash tokens nor ShareTokens to the CreateOrder contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#may-not-have-approved-cash-tokens-nor-sharetokens-to-the-createorder-contract", "labels": ["OpenZeppelin"]}, {"title": "May not have approved Cash tokens nor ShareTokens to the FillOrder contract", "body": "May not have approved Cash tokens nor ShareTokens to the FillOrder contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#may-not-have-approved-cash-tokens-nor-sharetokens-to-the-fillorder-contract", "labels": ["OpenZeppelin"]}, {"title": "May not have set a fingerprint in the Affiliates contract", "body": "May not have set a fingerprint in the Affiliates contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#may-not-have-set-a-fingerprint-in-the-affiliates-contract", "labels": ["OpenZeppelin"]}, {"title": "Consider either providing a single function for registering wallets in the GnosisSafeRegistry contract, or explicitly documenting the described inconsistent behavior between the register and callRegister functions, highlighting under which circumstances each function is expected to be called.", "body": "Consider either providing a single function for registering wallets in the GnosisSafeRegistry contract, or explicitly documenting the described inconsistent behavior between the register and callRegister functions, highlighting under which circumstances each function is expected to be called.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#consider-either-providing-a-single-function-for-registering-wallets-in-the-gnosissaferegistry-contract,-or-explicitly-documenting-the-described-inconsistent-behavior-between-the-register-and-callregister-functions,-highlighting-under-which-circumstances-each-function-is-expected-to-be-called.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Naming", "body": "[N11] Naming", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n11]-naming", "labels": ["OpenZeppelin"]}, {"title": "In the GnosisSafeRegistry contract, the getSafe function should be renamed to getCurrentSafe, getActiveSafe or similar.", "body": "In the GnosisSafeRegistry contract, the getSafe function should be renamed to getCurrentSafe, getActiveSafe or similar.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-gnosissaferegistry-contract,-the-getsafe-function-should-be-renamed-to-getcurrentsafe,-getactivesafe-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "In the WarpSync contract:", "body": "In the WarpSync contract:", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-warpsync-contract:", "labels": ["OpenZeppelin"]}, {"title": "State variable MARKET_LENGTH should be renamed to MARKET_DURATION", "body": "State variable MARKET_LENGTH should be renamed to MARKET_DURATION", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#state-variable-market_length-should-be-renamed-to-market_duration", "labels": ["OpenZeppelin"]}, {"title": "Structure Data and state variable data should have more self-explanatory names.", "body": "Structure Data and state variable data should have more self-explanatory names.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#structure-data-and-state-variable-data-should-have-more-self-explanatory-names.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Lack of explicit visibility in state variables", "body": "[N12] Lack of explicit visibility in state variables", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n12]-lack-of-explicit-visibility-in-state-variables", "labels": ["OpenZeppelin"]}, {"title": "The following state variables are implicitly using the default visibility:", "body": "The following state variables are implicitly using the default visibility:", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-following-state-variables-are-implicitly-using-the-default-visibility:", "labels": ["OpenZeppelin"]}, {"title": "In the AffiliateValidator contract: keys, operators and usedSalts.", "body": "In the AffiliateValidator contract: keys, operators and usedSalts.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-affiliatevalidator-contract:-keys,-operators-and-usedsalts.", "labels": ["OpenZeppelin"]}, {"title": "In the Market contract: affiliateValidator and affiliates.", "body": "In the Market contract: affiliateValidator and affiliates.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-market-contract:-affiliatevalidator-and-affiliates.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Named return variables", "body": "[N13] Named return variables", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n13]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "Named return variables are used inconsistently. For example, while the ProxyFactory contract names its return variables, the Affiliates contract does not. Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "body": "Named return variables are used inconsistently. For example, while the ProxyFactory contract names its return variables, the Affiliates contract does not. Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#named-return-variables-are-used-inconsistently.-for-example,-while-the-proxyfactory-contract-names-its-return-variables,-the-affiliates-contract-does-not.-consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-should-improve-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Reuse zero address constant in Market contract", "body": "[N14] Reuse zero address constant in Market contract", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n14]-reuse-zero-address-constant-in-market-contract", "labels": ["OpenZeppelin"]}, {"title": "In line 344 of Market.sol, considering replacing address(0) with the NULL_ADDRESS constant to favor consistency.", "body": "In line 344 of Market.sol, considering replacing address(0) with the NULL_ADDRESS constant to favor consistency.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-344-of-market.sol,-considering-replacing-address(0)-with-the-null_address-constant-to-favor-consistency.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Inconsistent imports", "body": "[N15] Inconsistent imports", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n15]-inconsistent-imports", "labels": ["OpenZeppelin"]}, {"title": "The following imports are not used:", "body": "The following imports are not used:", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-following-imports-are-not-used:", "labels": ["OpenZeppelin"]}, {"title": "The IWarpSync.sol file unnecessarily imports the IUniverse contract.", "body": "The IWarpSync.sol file unnecessarily imports the IUniverse contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-iwarpsync.sol-file-unnecessarily-imports-the-iuniverse-contract.", "labels": ["OpenZeppelin"]}, {"title": "The Market.sol file unnecessarily imports the IERC1155 contract.", "body": "The Market.sol file unnecessarily imports the IERC1155 contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-market.sol-file-unnecessarily-imports-the-ierc1155-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the unnecessary imports.", "body": "Consider removing the unnecessary imports.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#consider-removing-the-unnecessary-imports.", "labels": ["OpenZeppelin"]}, {"title": "On the other hand, the following contracts rely on indirect imports:", "body": "On the other hand, the following contracts rely on indirect imports:", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#on-the-other-hand,-the-following-contracts-rely-on-indirect-imports:", "labels": ["OpenZeppelin"]}, {"title": "GnosisSafeRegistry.sol uses the IAugur.sol imports to obtain the IERC20 contract.", "body": "GnosisSafeRegistry.sol uses the IAugur.sol imports to obtain the IERC20 contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#gnosissaferegistry.sol-uses-the-iaugur.sol-imports-to-obtain-the-ierc20-contract.", "labels": ["OpenZeppelin"]}, {"title": "WarpSync.sol uses the IMarket.sol imports to obtain the IAugur contract.", "body": "WarpSync.sol uses the IMarket.sol imports to obtain the IAugur contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#warpsync.sol-uses-the-imarket.sol-imports-to-obtain-the-iaugur-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider importing these contracts explicitly.", "body": "Consider importing these contracts explicitly.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#consider-importing-these-contracts-explicitly.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Typos", "body": "[N16] Typos", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n16]-typos", "labels": ["OpenZeppelin"]}, {"title": "In the ProxyFactory contract\u2019s docstrings: contact should be contract. There are five instances of this typo in the contract\u2019s file.", "body": "In the ProxyFactory contract\u2019s docstrings: contact should be contract. There are five instances of this typo in the contract\u2019s file.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-proxyfactory-contract\u2019s-docstrings:-contact-should-be-contract.-there-are-five-instances-of-this-typo-in-the-contract\u2019s-file.", "labels": ["OpenZeppelin"]}, {"title": "In line 7 of Affiliates.sol: their fingerprint should say its fingerprint and naievly should say naively.", "body": "In line 7 of Affiliates.sol: their fingerprint should say its fingerprint and naievly should say naively.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-7-of-affiliates.sol:-their-fingerprint-should-say-its-fingerprint-and-naievly-should-say-naively.", "labels": ["OpenZeppelin"]}, {"title": "In line 8 of AffiliateValidator.sol: their key should say its key.", "body": "In line 8 of AffiliateValidator.sol: their key should say its key.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-8-of-affiliatevalidator.sol:-their-key-should-say-its-key.", "labels": ["OpenZeppelin"]}, {"title": "In the ERC1155 contract: all instances of _supplys should be _supplies. Moreover, in line 188: the comment should say onERC1155BatchReceived instead of onERC1155Received.", "body": "In the ERC1155 contract: all instances of _supplys should be _supplies. Moreover, in line 188: the comment should say onERC1155BatchReceived instead of onERC1155Received.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-the-erc1155-contract:-all-instances-of-_supplys-should-be-_supplies.-moreover,-in-line-188:-the-comment-should-say-onerc1155batchreceived-instead-of-onerc1155received.", "labels": ["OpenZeppelin"]}, {"title": "In line 180 of Market.sol: tenative should be tentative.", "body": "In line 180 of Market.sol: tenative should be tentative.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-180-of-market.sol:-tenative-should-be-tentative.", "labels": ["OpenZeppelin"]}, {"title": "In line 255 and line 698 of Market.sol: occured should be occurred.", "body": "In line 255 and line 698 of Market.sol: occured should be occurred.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-255-and-line-698-of-market.sol:-occured-should-be-occurred.", "labels": ["OpenZeppelin"]}, {"title": "In line 656 of Market.sol: finalzied should be finalized and timestmap should be timestamp", "body": "In line 656 of Market.sol: finalzied should be finalized and timestmap should be timestamp", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-656-of-market.sol:-finalzied-should-be-finalized-and-timestmap-should-be-timestamp", "labels": ["OpenZeppelin"]}, {"title": "In line 720 of Market.sol: has should be hash.", "body": "In line 720 of Market.sol: has should be hash.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-720-of-market.sol:-has-should-be-hash.", "labels": ["OpenZeppelin"]}, {"title": "In line 83 of WarpSync.sol: occuring should be occurring.", "body": "In line 83 of WarpSync.sol: occuring should be occurring.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#in-line-83-of-warpsync.sol:-occuring-should-be-occurring.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Declare uint as uint256", "body": "[N17] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n17]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, all instances of uint should be declared as uint256. See for example lines 280 and 322 of ERC1155.sol.", "body": "To favor explicitness, all instances of uint should be declared as uint256. See for example lines 280 and 322 of ERC1155.sol.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#to-favor-explicitness,-all-instances-of-uint-should-be-declared-as-uint256.-see-for-example-lines-280-and-322-of-erc1155.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Not explicitly casting to address type", "body": "[N18] Not explicitly casting to address type", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n18]-not-explicitly-casting-to-address-type", "labels": ["OpenZeppelin"]}, {"title": "763,", "body": "763,", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#763,", "labels": ["OpenZeppelin"]}, {"title": "766 and", "body": "766 and", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#766-and", "labels": ["OpenZeppelin"]}, {"title": "785 of", "body": "785 of", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#785-of", "labels": ["OpenZeppelin"]}, {"title": "[N19] Unused variable", "body": "[N19] Unused variable", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#[n19]-unused-variable", "labels": ["OpenZeppelin"]}, {"title": "The migrateThroughOneFork function of the Market contract defines a local variable _numOutcomes that is never used. Consider removing the definition.", "body": "The migrateThroughOneFork function of the Market contract defines a local variable _numOutcomes that is never used. Consider removing the definition.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit-components#the-migratethroughonefork-function-of-the-market-contract-defines-a-local-variable-_numoutcomes-that-is-never-used.-consider-removing-the-definition.", "labels": ["OpenZeppelin"]}, {"title": "Update: several of the following soft recommendations have been implemented across various commits.", "body": "Update: several of the following soft recommendations have been implemented across various commits.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#update:-several-of-the-following-soft-recommendations-have-been-implemented-across-various-commits.", "labels": ["OpenZeppelin"]}, {"title": "Naming", "body": "Naming", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#naming", "labels": ["OpenZeppelin"]}, {"title": "The Cash contract should be renamed to CashMock to denote it is just a testing contract with no relevant functionality for the Augur system. Moreover, consider moving it to a mocks folder.", "body": "The Cash contract should be renamed to CashMock to denote it is just a testing contract with no relevant functionality for the Augur system. Moreover, consider moving it to a mocks folder.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-cash-contract-should-be-renamed-to-cashmock-to-denote-it-is-just-a-testing-contract-with-no-relevant-functionality-for-the-augur-system.-moreover,-consider-moving-it-to-a-mocks-folder.", "labels": ["OpenZeppelin"]}, {"title": "TheTimeControlled contract implements functionality to handle a private timestamp. On the assumption that it is just a mock contract used for testing purposes (as it does not implement any security validations), consider renaming it to TimeControlledMock to explicitly denote it is not going to be used in production. Additionally, consider moving it to a mocks folder.", "body": "TheTimeControlled contract implements functionality to handle a private timestamp. On the assumption that it is just a mock contract used for testing purposes (as it does not implement any security validations), consider renaming it to TimeControlledMock to explicitly denote it is not going to be used in production. Additionally, consider moving it to a mocks folder.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#thetimecontrolled-contract-implements-functionality-to-handle-a-private-timestamp.-on-the-assumption-that-it-is-just-a-mock-contract-used-for-testing-purposes-(as-it-does-not-implement-any-security-validations),-consider-renaming-it-to-timecontrolledmock-to-explicitly-denote-it-is-not-going-to-be-used-in-production.-additionally,-consider-moving-it-to-a-mocks-folder.", "labels": ["OpenZeppelin"]}, {"title": "In the Market contract, consider renaming theAPPROVAL_AMOUNT constant to MAX_APPROVAL_AMOUNT or similar, so as to better denote it represents the maximum amount of tokens that can be approved.", "body": "In the Market contract, consider renaming theAPPROVAL_AMOUNT constant to MAX_APPROVAL_AMOUNT or similar, so as to better denote it represents the maximum amount of tokens that can be approved.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-market-contract,-consider-renaming-theapproval_amount-constant-to-max_approval_amount-or-similar,-so-as-to-better-denote-it-represents-the-maximum-amount-of-tokens-that-can-be-approved.", "labels": ["OpenZeppelin"]}, {"title": "In the Market contract, consider renaming the distributeMarketCreatorFees function to distributeMarketCreatorAndAffiliateFees or similar, to explicitly denote the function also takes care of distributing the affiliate\u2019s fees when appropriate.", "body": "In the Market contract, consider renaming the distributeMarketCreatorFees function to distributeMarketCreatorAndAffiliateFees or similar, to explicitly denote the function also takes care of distributing the affiliate\u2019s fees when appropriate.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-market-contract,-consider-renaming-the-distributemarketcreatorfees-function-to-distributemarketcreatorandaffiliatefees-or-similar,-to-explicitly-denote-the-function-also-takes-care-of-distributing-the-affiliate\u2019s-fees-when-appropriate.", "labels": ["OpenZeppelin"]}, {"title": "In the Auction contract, consider renaming the auctionOver function to isAuctionOver, so as to better denote it returns a boolean flag indicating whether an auction is over or not.", "body": "In the Auction contract, consider renaming the auctionOver function to isAuctionOver, so as to better denote it returns a boolean flag indicating whether an auction is over or not.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auction-contract,-consider-renaming-the-auctionover-function-to-isauctionover,-so-as-to-better-denote-it-returns-a-boolean-flag-indicating-whether-an-auction-is-over-or-not.", "labels": ["OpenZeppelin"]}, {"title": "In the Auction contract, inside the initializeNewAuction function, consider renaming the _currentAuctionIndex local variable to _newAuctionIndex, which should prevent confusions with the currentAuctionIndex state variable. This will add to the code\u2019s readability, avoiding expressions such as require(currentAuctionIndex != _currentAuctionIndex);.", "body": "In the Auction contract, inside the initializeNewAuction function, consider renaming the _currentAuctionIndex local variable to _newAuctionIndex, which should prevent confusions with the currentAuctionIndex state variable. This will add to the code\u2019s readability, avoiding expressions such as require(currentAuctionIndex != _currentAuctionIndex);.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auction-contract,-inside-the-initializenewauction-function,-consider-renaming-the-_currentauctionindex-local-variable-to-_newauctionindex,-which-should-prevent-confusions-with-the-currentauctionindex-state-variable.-this-will-add-to-the-code\u2019s-readability,-avoiding-expressions-such-as-require(currentauctionindex-!=-_currentauctionindex);.", "labels": ["OpenZeppelin"]}, {"title": "In the Auction contract, consider renaming the getRoundType function to getCurrentRoundType.", "body": "In the Auction contract, consider renaming the getRoundType function to getCurrentRoundType.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auction-contract,-consider-renaming-the-getroundtype-function-to-getcurrentroundtype.", "labels": ["OpenZeppelin"]}, {"title": "In the DisputeWindow contract, consider renaming the functions buy and redeem to buyParticipationTokens and redeemParticipationTokens respectively.", "body": "In the DisputeWindow contract, consider renaming the functions buy and redeem to buyParticipationTokens and redeemParticipationTokens respectively.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-disputewindow-contract,-consider-renaming-the-functions-buy-and-redeem-to-buyparticipationtokens-and-redeemparticipationtokens-respectively.", "labels": ["OpenZeppelin"]}, {"title": "In the Universe contract, consider renaming the createChildUniverse function to getOrCreateChildUniverse, as it does not always create a child universe, but under certain circumstances just retrieves an existing one.", "body": "In the Universe contract, consider renaming the createChildUniverse function to getOrCreateChildUniverse, as it does not always create a child universe, but under certain circumstances just retrieves an existing one.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-universe-contract,-consider-renaming-the-createchilduniverse-function-to-getorcreatechilduniverse,-as-it-does-not-always-create-a-child-universe,-but-under-certain-circumstances-just-retrieves-an-existing-one.", "labels": ["OpenZeppelin"]}, {"title": "In the Universe contract, consider renaming the mappings validityBondInAttoCash, designatedReportStakeInAttoRep and designatedReportNoShowBondInAttoRep in order to make them more self-explanatory. The naming should denote that they contain stake and bond values for different dispute windows.", "body": "In the Universe contract, consider renaming the mappings validityBondInAttoCash, designatedReportStakeInAttoRep and designatedReportNoShowBondInAttoRep in order to make them more self-explanatory. The naming should denote that they contain stake and bond values for different dispute windows.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-universe-contract,-consider-renaming-the-mappings-validitybondinattocash,-designatedreportstakeinattorep-and-designatedreportnoshowbondinattorep-in-order-to-make-them-more-self-explanatory.-the-naming-should-denote-that-they-contain-stake-and-bond-values-for-different-dispute-windows.", "labels": ["OpenZeppelin"]}, {"title": "For consistency in naming in the Augur contract, consider renaming the function disputeCrowdsourcerCreated to createDisputeCrowdsourcer.", "body": "For consistency in naming in the Augur contract, consider renaming the function disputeCrowdsourcerCreated to createDisputeCrowdsourcer.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#for-consistency-in-naming-in-the-augur-contract,-consider-renaming-the-function-disputecrowdsourcercreated-to-createdisputecrowdsourcer.", "labels": ["OpenZeppelin"]}, {"title": "In the Augur contract, consider renaming the isValidMarket function to isKnownMarket. This should avoid confusions between the notion of a legit Augur market (which is what the function verifies) and the potential valid or invalid outcomes of a market.", "body": "In the Augur contract, consider renaming the isValidMarket function to isKnownMarket. This should avoid confusions between the notion of a legit Augur market (which is what the function verifies) and the potential valid or invalid outcomes of a market.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-augur-contract,-consider-renaming-the-isvalidmarket-function-to-isknownmarket.-this-should-avoid-confusions-between-the-notion-of-a-legit-augur-market-(which-is-what-the-function-verifies)-and-the-potential-valid-or-invalid-outcomes-of-a-market.", "labels": ["OpenZeppelin"]}, {"title": "Consider changing the ERC20Token contract to be an interface, then renaming it to IERC20 to explicitly denote it is an interface. For consistency, this change should also be reflected in the file\u2019s name.", "body": "Consider changing the ERC20Token contract to be an interface, then renaming it to IERC20 to explicitly denote it is an interface. For consistency, this change should also be reflected in the file\u2019s name.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#consider-changing-the-erc20token-contract-to-be-an-interface,-then-renaming-it-to-ierc20-to-explicitly-denote-it-is-an-interface.-for-consistency,-this-change-should-also-be-reflected-in-the-file\u2019s-name.", "labels": ["OpenZeppelin"]}, {"title": "The _amountToMint parameter in the burnForAuction function of the IV2ReputationToken contract should read _amountToBurn.", "body": "The _amountToMint parameter in the burnForAuction function of the IV2ReputationToken contract should read _amountToBurn.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-_amounttomint-parameter-in-the-burnforauction-function-of-the-iv2reputationtoken-contract-should-read-_amounttoburn.", "labels": ["OpenZeppelin"]}, {"title": "Typos", "body": "Typos", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#typos", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in an inline comment in the Auction contract. In line 40, Indicies should read Indices.", "body": "There is a typo in an inline comment in the Auction contract. In line 40, Indicies should read Indices.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#there-is-a-typo-in-an-inline-comment-in-the-auction-contract.-in-line-40,-indicies-should-read-indices.", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in an inline comment in the AuctionToken contract. In line 21, recieved should read received.", "body": "There is a typo in an inline comment in the AuctionToken contract. In line 21, recieved should read received.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#there-is-a-typo-in-an-inline-comment-in-the-auctiontoken-contract.-in-line-21,-recieved-should-read-received.", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in an inline comment in the ReputationToken contract. In line 62, tenative should read tentative.", "body": "There is a typo in an inline comment in the ReputationToken contract. In line 62, tenative should read tentative.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#there-is-a-typo-in-an-inline-comment-in-the-reputationtoken-contract.-in-line-62,-tenative-should-read-tentative.", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in an inline comment in the Universe contract. In line 84, occuring should read occurring.", "body": "There is a typo in an inline comment in the Universe contract. In line 84, occuring should read occurring.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#there-is-a-typo-in-an-inline-comment-in-the-universe-contract.-in-line-84,-occuring-should-read-occurring.", "labels": ["OpenZeppelin"]}, {"title": "Coding style", "body": "Coding style", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#coding-style", "labels": ["OpenZeppelin"]}, {"title": "Following the Solidity Style Guide wherever possible is advisable. There are a few occurrences in the Augur code base where the guide is not strictly followed, the most relevant point to highlight being long function declarations that should be stacked vertically for readability; from the Solidity Style Guide, \u201ckeeping lines under the PEP 8 recommendation to a maximum of 79 (or 99) characters helps readers easily parse the code\u201d. This can be consistently enforced across the entire code base by means of an automatic linter, such as Solhint.", "body": "Following the Solidity Style Guide wherever possible is advisable. There are a few occurrences in the Augur code base where the guide is not strictly followed, the most relevant point to highlight being long function declarations that should be stacked vertically for readability; from the Solidity Style Guide, \u201ckeeping lines under the PEP 8 recommendation to a maximum of 79 (or 99) characters helps readers easily parse the code\u201d. This can be consistently enforced across the entire code base by means of an automatic linter, such as Solhint.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#following-the-solidity-style-guide-wherever-possible-is-advisable.-there-are-a-few-occurrences-in-the-augur-code-base-where-the-guide-is-not-strictly-followed,-the-most-relevant-point-to-highlight-being-long-function-declarations-that-should-be-stacked-vertically-for-readability;-from-the-solidity-style-guide,-\u201ckeeping-lines-under-the-pep-8-recommendation-to-a-maximum-of-79-(or-99)-characters-helps-readers-easily-parse-the-code\u201d.-this-can-be-consistently-enforced-across-the-entire-code-base-by-means-of-an-automatic-linter,-such-as-solhint.", "labels": ["OpenZeppelin"]}, {"title": "In order to keep a consistent style throughout the project, consider prepending an underscore to the parameter newOwner in the transferOwnership function of the IOwnable interface, to match its counterpart _newOwner in the Ownable contract.", "body": "In order to keep a consistent style throughout the project, consider prepending an underscore to the parameter newOwner in the transferOwnership function of the IOwnable interface, to match its counterpart _newOwner in the Ownable contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-order-to-keep-a-consistent-style-throughout-the-project,-consider-prepending-an-underscore-to-the-parameter-newowner-in-the-transferownership-function-of-the-iownable-interface,-to-match-its-counterpart-_newowner-in-the-ownable-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the named return variable _market in the createMarket function of the MarketFactory contract, and instead declare it as a regular local variable in line 14 of MarketFactory.sol. This suggestion should be applied in all functions were named return variables are used.", "body": "Consider removing the named return variable _market in the createMarket function of the MarketFactory contract, and instead declare it as a regular local variable in line 14 of MarketFactory.sol. This suggestion should be applied in all functions were named return variables are used.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#consider-removing-the-named-return-variable-_market-in-the-createmarket-function-of-the-marketfactory-contract,-and-instead-declare-it-as-a-regular-local-variable-in-line-14-of-marketfactory.sol.-this-suggestion-should-be-applied-in-all-functions-were-named-return-variables-are-used.", "labels": ["OpenZeppelin"]}, {"title": "The file OldLegacyRepToken.sol does not have the same name as the contract it contains; namely, OldLegacyReputationToken. According to the Solidity Style Guide: \u201cContract and library names should also match their filenames\u201d. Consider changing the file\u2019s name to OldLegacyReputationToken.sol to match the contract.", "body": "The file OldLegacyRepToken.sol does not have the same name as the contract it contains; namely, OldLegacyReputationToken. According to the Solidity Style Guide: \u201cContract and library names should also match their filenames\u201d. Consider changing the file\u2019s name to OldLegacyReputationToken.sol to match the contract.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-file-oldlegacyreptoken.sol-does-not-have-the-same-name-as-the-contract-it-contains;-namely,-oldlegacyreputationtoken.-according-to-the-solidity-style-guide:-\u201ccontract-and-library-names-should-also-match-their-filenames\u201d.-consider-changing-the-file\u2019s-name-to-oldlegacyreputationtoken.sol-to-match-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "So as to explicitly denote their visibility and favor readability, consider prepending an underscore to the name of all internal and private functions.", "body": "So as to explicitly denote their visibility and favor readability, consider prepending an underscore to the name of all internal and private functions.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#so-as-to-explicitly-denote-their-visibility-and-favor-readability,-consider-prepending-an-underscore-to-the-name-of-all-internal-and-private-functions.", "labels": ["OpenZeppelin"]}, {"title": "Documentation", "body": "Documentation", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#documentation", "labels": ["OpenZeppelin"]}, {"title": "The private redistributeLosingReputation function in the Market contract includes an inline comment that reads \u201cWe burn 20% of the REP to prevent griefing attacks which rely on getting back lost REP\u201d. Considering that the following line just burns the entire REP balance of the market, further explanations should be added to better describe how that 20% is calculated, and how it matches the market\u2019s balance at that point.", "body": "The private redistributeLosingReputation function in the Market contract includes an inline comment that reads \u201cWe burn 20% of the REP to prevent griefing attacks which rely on getting back lost REP\u201d. Considering that the following line just burns the entire REP balance of the market, further explanations should be added to better describe how that 20% is calculated, and how it matches the market\u2019s balance at that point.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-private-redistributelosingreputation-function-in-the-market-contract-includes-an-inline-comment-that-reads-\u201cwe-burn-20%-of-the-rep-to-prevent-griefing-attacks-which-rely-on-getting-back-lost-rep\u201d.-considering-that-the-following-line-just-burns-the-entire-rep-balance-of-the-market,-further-explanations-should-be-added-to-better-describe-how-that-20%-is-calculated,-and-how-it-matches-the-market\u2019s-balance-at-that-point.", "labels": ["OpenZeppelin"]}, {"title": "The public doInitialReport function in the Market contract allows a reporter to give a description for their report by providing a string in the function\u2019s _description parameter. However, the given description is never actually stored in any contract, but just logged in an event by calling the logInitialReportSubmitted function of the Augur contract. The same is true for contributeToTentative and contribute functions, which only log the passed description calling Augur\u2018s logDisputeCrowdsourcerContribution function. Should this be the system\u2019s expected behavior, consider documenting it and adding related unit tests.", "body": "The public doInitialReport function in the Market contract allows a reporter to give a description for their report by providing a string in the function\u2019s _description parameter. However, the given description is never actually stored in any contract, but just logged in an event by calling the logInitialReportSubmitted function of the Augur contract. The same is true for contributeToTentative and contribute functions, which only log the passed description calling Augur\u2018s logDisputeCrowdsourcerContribution function. Should this be the system\u2019s expected behavior, consider documenting it and adding related unit tests.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-public-doinitialreport-function-in-the-market-contract-allows-a-reporter-to-give-a-description-for-their-report-by-providing-a-string-in-the-function\u2019s-_description-parameter.-however,-the-given-description-is-never-actually-stored-in-any-contract,-but-just-logged-in-an-event-by-calling-the-loginitialreportsubmitted-function-of-the-augur-contract.-the-same-is-true-for-contributetotentative-and-contribute-functions,-which-only-log-the-passed-description-calling-augur\u2018s-logdisputecrowdsourcercontribution-function.-should-this-be-the-system\u2019s-expected-behavior,-consider-documenting-it-and-adding-related-unit-tests.", "labels": ["OpenZeppelin"]}, {"title": "To indicate the payout value for each outcome at market finalization, Augur uses an array called payoutNumerators. Although this fundamental data structure is extensively used across multiple contracts, its purpose nor its contents are ever clearly documented. An outdated description can be found in Augur v1 documentation, which should be modified to reflect the important changes that the payout array suffered in v2 (e.g. the \u201cInvalid\u201d outcome is now considered an explicit outcome). Therefore, for clarity, consider renaming this array to payoutsForOutcomes or similar. Furthermore, consider thoroughly documenting the purpose and contents of this data structure in Augur Core v2, either in external end-user documentation or in docstrings (refer to related reported issue \u201c[M01] Missing docstrings throughout\u201d).", "body": "To indicate the payout value for each outcome at market finalization, Augur uses an array called payoutNumerators. Although this fundamental data structure is extensively used across multiple contracts, its purpose nor its contents are ever clearly documented. An outdated description can be found in Augur v1 documentation, which should be modified to reflect the important changes that the payout array suffered in v2 (e.g. the \u201cInvalid\u201d outcome is now considered an explicit outcome). Therefore, for clarity, consider renaming this array to payoutsForOutcomes or similar. Furthermore, consider thoroughly documenting the purpose and contents of this data structure in Augur Core v2, either in external end-user documentation or in docstrings (refer to related reported issue \u201c[M01] Missing docstrings throughout\u201d).", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-indicate-the-payout-value-for-each-outcome-at-market-finalization,-augur-uses-an-array-called-payoutnumerators.-although-this-fundamental-data-structure-is-extensively-used-across-multiple-contracts,-its-purpose-nor-its-contents-are-ever-clearly-documented.-an-outdated-description-can-be-found-in-augur-v1-documentation,-which-should-be-modified-to-reflect-the-important-changes-that-the-payout-array-suffered-in-v2-(e.g.-the-\u201cinvalid\u201d-outcome-is-now-considered-an-explicit-outcome).-therefore,-for-clarity,-consider-renaming-this-array-to-payoutsforoutcomes-or-similar.-furthermore,-consider-thoroughly-documenting-the-purpose-and-contents-of-this-data-structure-in-augur-core-v2,-either-in-external-end-user-documentation-or-in-docstrings-(refer-to-related-reported-issue-\u201c[m01]-missing-docstrings-throughout\u201d).", "labels": ["OpenZeppelin"]}, {"title": "The exists function of the ContractExists library will return false if it is called from the constructor of a contract, due to the fact that extcodesize is 0 during the execution of the constructor of a contract. Ensure to clearly document this behavior in the function\u2019s docstrings, so as to prevent potential issues in future versions of the code base.", "body": "The exists function of the ContractExists library will return false if it is called from the constructor of a contract, due to the fact that extcodesize is 0 during the execution of the constructor of a contract. Ensure to clearly document this behavior in the function\u2019s docstrings, so as to prevent potential issues in future versions of the code base.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-exists-function-of-the-contractexists-library-will-return-false-if-it-is-called-from-the-constructor-of-a-contract,-due-to-the-fact-that-extcodesize-is-0-during-the-execution-of-the-constructor-of-a-contract.-ensure-to-clearly-document-this-behavior-in-the-function\u2019s-docstrings,-so-as-to-prevent-potential-issues-in-future-versions-of-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "In the Auction contract, there is an inaccurate inline comment that reads: \u201cThis will raise an exception if insufficient CASH was sent\u201d. As the operation it refers to will execute a transferFrom of CASH tokens, consider rephrasing the comment as \u201cThis will raise an exception if insufficient CASH was approved or the sender has an insufficient CASH balance\u201d.", "body": "In the Auction contract, there is an inaccurate inline comment that reads: \u201cThis will raise an exception if insufficient CASH was sent\u201d. As the operation it refers to will execute a transferFrom of CASH tokens, consider rephrasing the comment as \u201cThis will raise an exception if insufficient CASH was approved or the sender has an insufficient CASH balance\u201d.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auction-contract,-there-is-an-inaccurate-inline-comment-that-reads:-\u201cthis-will-raise-an-exception-if-insufficient-cash-was-sent\u201d.-as-the-operation-it-refers-to-will-execute-a-transferfrom-of-cash-tokens,-consider-rephrasing-the-comment-as-\u201cthis-will-raise-an-exception-if-insufficient-cash-was-approved-or-the-sender-has-an-insufficient-cash-balance\u201d.", "labels": ["OpenZeppelin"]}, {"title": "To avoid confusions, consider deleting the inline comment in line 17 of FillOrder.sol, and properly document it in the project\u2019s backlog of issues.", "body": "To avoid confusions, consider deleting the inline comment in line 17 of FillOrder.sol, and properly document it in the project\u2019s backlog of issues.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-avoid-confusions,-consider-deleting-the-inline-comment-in-line-17-of-fillorder.sol,-and-properly-document-it-in-the-project\u2019s-backlog-of-issues.", "labels": ["OpenZeppelin"]}, {"title": "The FXP formulas documented in inline comments in lines 386 and 394 of Universe.sol are incorrect and must be updated. Both formulas should have a parentheses after the initial previous_amount that encompass the remainder of the formula.", "body": "The FXP formulas documented in inline comments in lines 386 and 394 of Universe.sol are incorrect and must be updated. Both formulas should have a parentheses after the initial previous_amount that encompass the remainder of the formula.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-fxp-formulas-documented-in-inline-comments-in-lines-386-and-394-of-universe.sol-are-incorrect-and-must-be-updated.-both-formulas-should-have-a-parentheses-after-the-initial-previous_amount-that-encompass-the-remainder-of-the-formula.", "labels": ["OpenZeppelin"]}, {"title": "Code organization, simplicity and cleanliness", "body": "Code organization, simplicity and cleanliness", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#code-organization,-simplicity-and-cleanliness", "labels": ["OpenZeppelin"]}, {"title": "In the IAugur contract, consider importing IDisputeWindow.sol directly and removing the import statement for IDisputeCrowdsourcer.sol. The IDisputeCrowdsourcer contract is never used in IAugur.", "body": "In the IAugur contract, consider importing IDisputeWindow.sol directly and removing the import statement for IDisputeCrowdsourcer.sol. The IDisputeCrowdsourcer contract is never used in IAugur.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-iaugur-contract,-consider-importing-idisputewindow.sol-directly-and-removing-the-import-statement-for-idisputecrowdsourcer.sol.-the-idisputecrowdsourcer-contract-is-never-used-in-iaugur.", "labels": ["OpenZeppelin"]}, {"title": "In the Augur contract, consider removing the IInitialReporter.sol import as it is never used.", "body": "In the Augur contract, consider removing the IInitialReporter.sol import as it is never used.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-augur-contract,-consider-removing-the-iinitialreporter.sol-import-as-it-is-never-used.", "labels": ["OpenZeppelin"]}, {"title": "To improve the contract\u2019s readability and organization, consider moving all events defined in the Augur contract to the IAugur interface.", "body": "To improve the contract\u2019s readability and organization, consider moving all events defined in the Augur contract to the IAugur interface.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-improve-the-contract\u2019s-readability-and-organization,-consider-moving-all-events-defined-in-the-augur-contract-to-the-iaugur-interface.", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity and avoid confusion, consider deleting the ICash contract as it does not add functionality on top of the ERC20Token from which inherits. Then, all instances of ICash should be renamed to ERC20Token (which in turn should be renamed to IERC20, as suggested in another note in this report).", "body": "To favor simplicity and avoid confusion, consider deleting the ICash contract as it does not add functionality on top of the ERC20Token from which inherits. Then, all instances of ICash should be renamed to ERC20Token (which in turn should be renamed to IERC20, as suggested in another note in this report).", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-favor-simplicity-and-avoid-confusion,-consider-deleting-the-icash-contract-as-it-does-not-add-functionality-on-top-of-the-erc20token-from-which-inherits.-then,-all-instances-of-icash-should-be-renamed-to-erc20token-(which-in-turn-should-be-renamed-to-ierc20,-as-suggested-in-another-note-in-this-report).", "labels": ["OpenZeppelin"]}, {"title": "The ReputationToken contract seems to unnecessarily redefine the functions transfer and transferFrom, inherited from the StandardToken contract. As they do not implement new functionality, but just call the parent\u2019s transfer and transferFrom functions respectively, they could be removed from the ReputationToken contract in order to reduce its attack surface.", "body": "The ReputationToken contract seems to unnecessarily redefine the functions transfer and transferFrom, inherited from the StandardToken contract. As they do not implement new functionality, but just call the parent\u2019s transfer and transferFrom functions respectively, they could be removed from the ReputationToken contract in order to reduce its attack surface.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-reputationtoken-contract-seems-to-unnecessarily-redefine-the-functions-transfer-and-transferfrom,-inherited-from-the-standardtoken-contract.-as-they-do-not-implement-new-functionality,-but-just-call-the-parent\u2019s-transfer-and-transferfrom-functions-respectively,-they-could-be-removed-from-the-reputationtoken-contract-in-order-to-reduce-its-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the maxSupply state variable in the IAuction contract, as it is never used in the child Auction contract. Similarly, in the Auction contract, consider removing the feeBalance state variable.", "body": "Consider removing the maxSupply state variable in the IAuction contract, as it is never used in the child Auction contract. Similarly, in the Auction contract, consider removing the feeBalance state variable.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#consider-removing-the-maxsupply-state-variable-in-the-iauction-contract,-as-it-is-never-used-in-the-child-auction-contract.-similarly,-in-the-auction-contract,-consider-removing-the-feebalance-state-variable.", "labels": ["OpenZeppelin"]}, {"title": "In the AuctionFactory contract, consider importing IAuction.sol directly and removing the import statement for Auction.sol. The Auction contract is never used in AuctionFactory.", "body": "In the AuctionFactory contract, consider importing IAuction.sol directly and removing the import statement for Auction.sol. The Auction contract is never used in AuctionFactory.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auctionfactory-contract,-consider-importing-iauction.sol-directly-and-removing-the-import-statement-for-auction.sol.-the-auction-contract-is-never-used-in-auctionfactory.", "labels": ["OpenZeppelin"]}, {"title": "In the Universe contract, consider removing the import statement for IRepPriceOracle.sol, as the contract IRepPriceOracle is never used in Universe.", "body": "In the Universe contract, consider removing the import statement for IRepPriceOracle.sol, as the contract IRepPriceOracle is never used in Universe.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-universe-contract,-consider-removing-the-import-statement-for-ireppriceoracle.sol,-as-the-contract-ireppriceoracle-is-never-used-in-universe.", "labels": ["OpenZeppelin"]}, {"title": "Consistency", "body": "Consistency", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#consistency", "labels": ["OpenZeppelin"]}, {"title": "The AuctionFactory and ReputationTokenFactory contracts do not inherit from the corresponding interfaces, namely IAuctionFactory and IReputationTokenFactory. Furthermore, in the case of the AuctionFactory, there is a mismatch between the interface and the contract; whereas the former declares a createAuction(IAugur,IUniverse,IReputationToken) function, the latter defines it as createAuction(IAugur,IUniverse,IV2ReputationToken). Consider fixing these issues to favor consistency between interfaces and implementation contracts.", "body": "The AuctionFactory and ReputationTokenFactory contracts do not inherit from the corresponding interfaces, namely IAuctionFactory and IReputationTokenFactory. Furthermore, in the case of the AuctionFactory, there is a mismatch between the interface and the contract; whereas the former declares a createAuction(IAugur,IUniverse,IReputationToken) function, the latter defines it as createAuction(IAugur,IUniverse,IV2ReputationToken). Consider fixing these issues to favor consistency between interfaces and implementation contracts.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-auctionfactory-and-reputationtokenfactory-contracts-do-not-inherit-from-the-corresponding-interfaces,-namely-iauctionfactory-and-ireputationtokenfactory.-furthermore,-in-the-case-of-the-auctionfactory,-there-is-a-mismatch-between-the-interface-and-the-contract;-whereas-the-former-declares-a-createauction(iaugur,iuniverse,ireputationtoken)-function,-the-latter-defines-it-as-createauction(iaugur,iuniverse,iv2reputationtoken).-consider-fixing-these-issues-to-favor-consistency-between-interfaces-and-implementation-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Factories ReputationTokenFactory and TestNetReputationTokenFactory return references to contracts with different interfaces (IV2ReputationToken and IReputationToken respectively). Should this be the factories\u2019 expected behavior, consider clearly documenting this mismatch in interfaces between testnet and production tokens.", "body": "Factories ReputationTokenFactory and TestNetReputationTokenFactory return references to contracts with different interfaces (IV2ReputationToken and IReputationToken respectively). Should this be the factories\u2019 expected behavior, consider clearly documenting this mismatch in interfaces between testnet and production tokens.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#factories-reputationtokenfactory-and-testnetreputationtokenfactory-return-references-to-contracts-with-different-interfaces-(iv2reputationtoken-and-ireputationtoken-respectively).-should-this-be-the-factories\u2019-expected-behavior,-consider-clearly-documenting-this-mismatch-in-interfaces-between-testnet-and-production-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Refactoring", "body": "Refactoring", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#refactoring", "labels": ["OpenZeppelin"]}, {"title": "In line 236 of Market.sol, there is a check to ensure the market has not been finalized before executing the rest of the finalize function. Consider using require(!isFinalized()); for increased readability and to clarify intentions.", "body": "In line 236 of Market.sol, there is a check to ensure the market has not been finalized before executing the rest of the finalize function. Consider using require(!isFinalized()); for increased readability and to clarify intentions.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-line-236-of-market.sol,-there-is-a-check-to-ensure-the-market-has-not-been-finalized-before-executing-the-rest-of-the-finalize-function.-consider-using-require(!isfinalized());-for-increased-readability-and-to-clarify-intentions.", "labels": ["OpenZeppelin"]}, {"title": "In line 243 of Market.sol, consider reusing the getWinningReportingParticipant getter to retrieve the last element in the participants array.", "body": "In line 243 of Market.sol, consider reusing the getWinningReportingParticipant getter to retrieve the last element in the participants array.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-line-243-of-market.sol,-consider-reusing-the-getwinningreportingparticipant-getter-to-retrieve-the-last-element-in-the-participants-array.", "labels": ["OpenZeppelin"]}, {"title": "As it stands, the getWinningPayoutNumerator function in the Market contract will revert the transaction if the market is not finalized. As such behavior is uncommon for a simple getter function, consider removing the require statement and explicitly checking if the market is indeed finalized (using the isFinalized function) independently of the getWinningPayoutNumerator function.", "body": "As it stands, the getWinningPayoutNumerator function in the Market contract will revert the transaction if the market is not finalized. As such behavior is uncommon for a simple getter function, consider removing the require statement and explicitly checking if the market is indeed finalized (using the isFinalized function) independently of the getWinningPayoutNumerator function.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#as-it-stands,-the-getwinningpayoutnumerator-function-in-the-market-contract-will-revert-the-transaction-if-the-market-is-not-finalized.-as-such-behavior-is-uncommon-for-a-simple-getter-function,-consider-removing-the-require-statement-and-explicitly-checking-if-the-market-is-indeed-finalized-(using-the-isfinalized-function)-independently-of-the-getwinningpayoutnumerator-function.", "labels": ["OpenZeppelin"]}, {"title": "We recommend turning all instances of the redundant require statements into modifiers. In general, this is advisable whenever the same code is used in more than one location in the same file, which should help abide by DRY programming principles. For example, in the Augur contract, all instances of require(msg.sender == uploader); could be replaced with an onlyUploader modifier.", "body": "We recommend turning all instances of the redundant require statements into modifiers. In general, this is advisable whenever the same code is used in more than one location in the same file, which should help abide by DRY programming principles. For example, in the Augur contract, all instances of require(msg.sender == uploader); could be replaced with an onlyUploader modifier.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#we-recommend-turning-all-instances-of-the-redundant-require-statements-into-modifiers.-in-general,-this-is-advisable-whenever-the-same-code-is-used-in-more-than-one-location-in-the-same-file,-which-should-help-abide-by-dry-programming-principles.-for-example,-in-the-augur-contract,-all-instances-of-require(msg.sender-==-uploader);-could-be-replaced-with-an-onlyuploader-modifier.", "labels": ["OpenZeppelin"]}, {"title": "In lines 359 and 449 of Augur.sol, consider reusing the isKnownUniverse function to verify that the address corresponds to a legit universe in the Augur system.", "body": "In lines 359 and 449 of Augur.sol, consider reusing the isKnownUniverse function to verify that the address corresponds to a legit universe in the Augur system.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-lines-359-and-449-of-augur.sol,-consider-reusing-the-isknownuniverse-function-to-verify-that-the-address-corresponds-to-a-legit-universe-in-the-augur-system.", "labels": ["OpenZeppelin"]}, {"title": "In several locations in the Augur code base, external functions are called from within the same contract. See for example the line 36 inCompleteSets.sol. This pattern is confusing and unnecessary to achieve the desired effects. Consider separating out functionality into internal functions that may be called from the different external functions rather than having external functions call each other. This will make the intended function permissions more clear and be more in line with the intended use of Solidity\u2019s external and internal functions.", "body": "In several locations in the Augur code base, external functions are called from within the same contract. See for example the line 36 inCompleteSets.sol. This pattern is confusing and unnecessary to achieve the desired effects. Consider separating out functionality into internal functions that may be called from the different external functions rather than having external functions call each other. This will make the intended function permissions more clear and be more in line with the intended use of Solidity\u2019s external and internal functions.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-several-locations-in-the-augur-code-base,-external-functions-are-called-from-within-the-same-contract.-see-for-example-the-line-36-incompletesets.sol.-this-pattern-is-confusing-and-unnecessary-to-achieve-the-desired-effects.-consider-separating-out-functionality-into-internal-functions-that-may-be-called-from-the-different-external-functions-rather-than-having-external-functions-call-each-other.-this-will-make-the-intended-function-permissions-more-clear-and-be-more-in-line-with-the-intended-use-of-solidity\u2019s-external-and-internal-functions.", "labels": ["OpenZeppelin"]}, {"title": "Explicitness", "body": "Explicitness", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#explicitness", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, all instances of uint should be declared uint256 (e.g. see line 15 of ERC777BaseToken.sol).", "body": "To favor explicitness, all instances of uint should be declared uint256 (e.g. see line 15 of ERC777BaseToken.sol).", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-favor-explicitness,-all-instances-of-uint-should-be-declared-uint256-(e.g.-see-line-15-of-erc777basetoken.sol).", "labels": ["OpenZeppelin"]}, {"title": "Consider always explicitly casting all instances of this using address(this). Similarly, all typed variables that refer to a contract or interface should also be explicitly casted when used as an address (e.g. in line 164 of OldLegacyRepToken.sol, _token should be address(_token) and this should be address(this)).", "body": "Consider always explicitly casting all instances of this using address(this). Similarly, all typed variables that refer to a contract or interface should also be explicitly casted when used as an address (e.g. in line 164 of OldLegacyRepToken.sol, _token should be address(_token) and this should be address(this)).", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#consider-always-explicitly-casting-all-instances-of-this-using-address(this).-similarly,-all-typed-variables-that-refer-to-a-contract-or-interface-should-also-be-explicitly-casted-when-used-as-an-address-(e.g.-in-line-164-of-oldlegacyreptoken.sol,-_token-should-be-address(_token)-and-this-should-be-address(this)).", "labels": ["OpenZeppelin"]}, {"title": "In the getUint256Max function of the SafeMathUint256 library, consider changing the returned value from 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to 2 ** 256 - 1, which should greatly favor readability, making the code more self-explanatory and less error-prone.", "body": "In the getUint256Max function of the SafeMathUint256 library, consider changing the returned value from 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to 2 ** 256 - 1, which should greatly favor readability, making the code more self-explanatory and less error-prone.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-getuint256max-function-of-the-safemathuint256-library,-consider-changing-the-returned-value-from-0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff-to-2-**-256---1,-which-should-greatly-favor-readability,-making-the-code-more-self-explanatory-and-less-error-prone.", "labels": ["OpenZeppelin"]}, {"title": "In the Time contract, the return value for the getTypeName function is being implicitly type casted from a string to bytes32. Consider explicitly casting the string to bytes32 before returning it for increased readability and to clarify the intentions of the code.", "body": "In the Time contract, the return value for the getTypeName function is being implicitly type casted from a string to bytes32. Consider explicitly casting the string to bytes32 before returning it for increased readability and to clarify the intentions of the code.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-time-contract,-the-return-value-for-the-gettypename-function-is-being-implicitly-type-casted-from-a-string-to-bytes32.-consider-explicitly-casting-the-string-to-bytes32-before-returning-it-for-increased-readability-and-to-clarify-the-intentions-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "The functions isMultipleOf and div of the SafeMathUint256 library, and div of the SafeMathInt256 library, allow the divisor b to be zero. Solidity automatically asserts when dividing by zero, but to favor explicitness, consider adding require statements that check the divisor is not zero. This pattern can be seen consistently applied in the div and mod functions of OpenZeppelin\u2019s SafeMath library.", "body": "The functions isMultipleOf and div of the SafeMathUint256 library, and div of the SafeMathInt256 library, allow the divisor b to be zero. Solidity automatically asserts when dividing by zero, but to favor explicitness, consider adding require statements that check the divisor is not zero. This pattern can be seen consistently applied in the div and mod functions of OpenZeppelin\u2019s SafeMath library.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#the-functions-ismultipleof-and-div-of-the-safemathuint256-library,-and-div-of-the-safemathint256-library,-allow-the-divisor-b-to-be-zero.-solidity-automatically-asserts-when-dividing-by-zero,-but-to-favor-explicitness,-consider-adding-require-statements-that-check-the-divisor-is-not-zero.-this-pattern-can-be-seen-consistently-applied-in-the-div-and-mod-functions-of-openzeppelin\u2019s-safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "Misc", "body": "Misc", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#misc", "labels": ["OpenZeppelin"]}, {"title": "In the Auction contract, the tradeCashForRep function has an unnecessary payable modifier that must be removed to avoid locking Ether in the contract (as there is no functionality implemented to withdraw any Ether sent).", "body": "In the Auction contract, the tradeCashForRep function has an unnecessary payable modifier that must be removed to avoid locking Ether in the contract (as there is no functionality implemented to withdraw any Ether sent).", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#in-the-auction-contract,-the-tradecashforrep-function-has-an-unnecessary-payable-modifier-that-must-be-removed-to-avoid-locking-ether-in-the-contract-(as-there-is-no-functionality-implemented-to-withdraw-any-ether-sent).", "labels": ["OpenZeppelin"]}, {"title": "To improve gas efficiency, consider modifying the functions mul in SafeMathUint256 and mul in SafeMathInt256 to simply return 0 when the first parameter a equals 0. For reference, check the latest OpenZeppelin\u2019s SafeMath library.", "body": "To improve gas efficiency, consider modifying the functions mul in SafeMathUint256 and mul in SafeMathInt256 to simply return 0 when the first parameter a equals 0. For reference, check the latest OpenZeppelin\u2019s SafeMath library.", "html_url": "https://blog.openzeppelin.com/augur-core-v2-audit#to-improve-gas-efficiency,-consider-modifying-the-functions-mul-in-safemathuint256-and-mul-in-safemathint256-to-simply-return-0-when-the-first-parameter-a-equals-0.-for-reference,-check-the-latest-openzeppelin\u2019s-safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Missing units", "body": "[N01] Missing units", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n01]-missing-units", "labels": ["OpenZeppelin"]}, {"title": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the votingDelay is measured.", "body": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the votingDelay is measured.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#to-avoid-errors-in-future-changes-to-the-code-base,-consider-using-an-inline-comment-to-clearly-state-in-which-units-the-votingdelay-is-measured.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Not explicitly defining maximum allowance", "body": "[N02] Not explicitly defining maximum allowance", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n02]-not-explicitly-defining-maximum-allowance", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider declaring a constant MAX_ALLOWANCE_AMOUNT or MAX_UINT256 to be used in the transferFrom function of the Comp contract instead of uint(-1).", "body": "To favor readability, consider declaring a constant MAX_ALLOWANCE_AMOUNT or MAX_UINT256 to be used in the transferFrom function of the Comp contract instead of uint(-1).", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#to-favor-readability,-consider-declaring-a-constant-max_allowance_amount-or-max_uint256-to-be-used-in-the-transferfrom-function-of-the-comp-contract-instead-of-uint(-1).", "labels": ["OpenZeppelin"]}, {"title": "[N03] Declare uint as uint256", "body": "[N03] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n03]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, all instances of uint should be declared as uint256.", "body": "To favor explicitness, all instances of uint should be declared as uint256.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#to-favor-explicitness,-all-instances-of-uint-should-be-declared-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Inconsistent coding style", "body": "[N04] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n04]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "There are minor deviations from Compound\u2019s coding style. In particular:", "body": "There are minor deviations from Compound\u2019s coding style. In particular:", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#there-are-minor-deviations-from-compound\u2019s-coding-style.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "Public functions __acceptAdmin, __abdicate, __queueSetTimelockPendingAdmin and __executeSetTimelockPendingAdmin of the GovernorAlpha contract are unnecessarily prepended with double underscores.", "body": "Public functions __acceptAdmin, __abdicate, __queueSetTimelockPendingAdmin and __executeSetTimelockPendingAdmin of the GovernorAlpha contract are unnecessarily prepended with double underscores.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#public-functions-__acceptadmin,-__abdicate,-__queuesettimelockpendingadmin-and-__executesettimelockpendingadmin-of-the-governoralpha-contract-are-unnecessarily-prepended-with-double-underscores.", "labels": ["OpenZeppelin"]}, {"title": "The if statement in line 234 of GovernorAlpha.sol is missing opening and closing braces.", "body": "The if statement in line 234 of GovernorAlpha.sol is missing opening and closing braces.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#the-if-statement-in-line-234-of-governoralpha.sol-is-missing-opening-and-closing-braces.", "labels": ["OpenZeppelin"]}, {"title": "Internal functions getChainId in GovernorAlpha and Comp contracts should be prepended with an underscore to explicitly denote their visibility.", "body": "Internal functions getChainId in GovernorAlpha and Comp contracts should be prepended with an underscore to explicitly denote their visibility.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#internal-functions-getchainid-in-governoralpha-and-comp-contracts-should-be-prepended-with-an-underscore-to-explicitly-denote-their-visibility.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider always following a consistent coding style throughout the entire code base.", "body": "To favor readability, consider always following a consistent coding style throughout the entire code base.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#to-favor-readability,-consider-always-following-a-consistent-coding-style-throughout-the-entire-code-base.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Naming", "body": "[N05] Naming", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n05]-naming", "labels": ["OpenZeppelin"]}, {"title": "The __acceptAdmin function of the GovernorAlpha contract should be renamed to __acceptTimelockAdmin.", "body": "The __acceptAdmin function of the GovernorAlpha contract should be renamed to __acceptTimelockAdmin.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#the-__acceptadmin-function-of-the-governoralpha-contract-should-be-renamed-to-__accepttimelockadmin.", "labels": ["OpenZeppelin"]}, {"title": "The NewProposal event of the GovernorAlpha contract should be renamed to ProposalCreated to be consistent with other proposal-related events (e.g., ProposalCanceled, ProposalQueued and ProposalExecuted)", "body": "The NewProposal event of the GovernorAlpha contract should be renamed to ProposalCreated to be consistent with other proposal-related events (e.g., ProposalCanceled, ProposalQueued and ProposalExecuted)", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#the-newproposal-event-of-the-governoralpha-contract-should-be-renamed-to-proposalcreated-to-be-consistent-with-other-proposal-related-events-(e.g.,-proposalcanceled,-proposalqueued-and-proposalexecuted)", "labels": ["OpenZeppelin"]}, {"title": "[N06] Typos", "body": "[N06] Typos", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n06]-typos", "labels": ["OpenZeppelin"]}, {"title": "In the Comp.sol file:", "body": "In the Comp.sol file:", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#in-the-comp.sol-file:", "labels": ["OpenZeppelin"]}, {"title": "Line 33 should say each account's instead of each accounts.", "body": "Line 33 should say each account's instead of each accounts.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#line-33-should-say-each-account's-instead-of-each-accounts.", "labels": ["OpenZeppelin"]}, {"title": "Lines 57 and 60 should say that's instead of thats.", "body": "Lines 57 and 60 should say that's instead of thats.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#lines-57-and-60-should-say-that's-instead-of-thats.", "labels": ["OpenZeppelin"]}, {"title": "Line 57 should say its delegate instead of their delegate.", "body": "Line 57 should say its delegate instead of their delegate.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#line-57-should-say-its-delegate-instead-of-their-delegate.", "labels": ["OpenZeppelin"]}, {"title": "In the README.md file:", "body": "In the README.md file:", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#in-the-readme.md-file:", "labels": ["OpenZeppelin"]}, {"title": "Copmtroller should say Comptroller in the \u201cGovernor Alpha\u201d subsection of the \u201cContracts\u201d section.", "body": "Copmtroller should say Comptroller in the \u201cGovernor Alpha\u201d subsection of the \u201cContracts\u201d section.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#copmtroller-should-say-comptroller-in-the-\u201cgovernor-alpha\u201d-subsection-of-the-\u201ccontracts\u201d-section.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Undocumented use of uint96 type", "body": "[N07] Undocumented use of uint96 type", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n07]-undocumented-use-of-uint96-type", "labels": ["OpenZeppelin"]}, {"title": "Checkpoint struct to represent each checkpoint that marks an account\u2019s number of votes from a given block. This struct", "body": "Checkpoint struct to represent each checkpoint that marks an account\u2019s number of votes from a given block. This struct", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#checkpoint-struct-to-represent-each-checkpoint-that-marks-an-account\u2019s-number-of-votes-from-a-given-block.-this-struct", "labels": ["OpenZeppelin"]}, {"title": "declares the number of votes as a uint96 type to efficiently pack the struct data into 128 bits. Yet, this argument is currently not documented in the code. Note that the", "body": "declares the number of votes as a uint96 type to efficiently pack the struct data into 128 bits. Yet, this argument is currently not documented in the code. Note that the", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#declares-the-number-of-votes-as-a-uint96-type-to-efficiently-pack-the-struct-data-into-128-bits.-yet,-this-argument-is-currently-not-documented-in-the-code.-note-that-the", "labels": ["OpenZeppelin"]}, {"title": "the Receipt struct of the", "body": "the Receipt struct of the", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#the-receipt-struct-of-the", "labels": ["OpenZeppelin"]}, {"title": "balances,", "body": "balances,", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#balances,", "labels": ["OpenZeppelin"]}, {"title": "allowances and", "body": "allowances and", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#allowances-and", "labels": ["OpenZeppelin"]}, {"title": "checkpoints of the", "body": "checkpoints of the", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#checkpoints-of-the", "labels": ["OpenZeppelin"]}, {"title": "Consider explicitly documenting the use of unusual Solidity types with inline comments to make the code more self-explanatory, thus favoring the project\u2019s readability.", "body": "Consider explicitly documenting the use of unusual Solidity types with inline comments to make the code more self-explanatory, thus favoring the project\u2019s readability.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#consider-explicitly-documenting-the-use-of-unusual-solidity-types-with-inline-comments-to-make-the-code-more-self-explanatory,-thus-favoring-the-project\u2019s-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Voting period assumes block frequency to calculate time", "body": "[N08] Voting period assumes block frequency to calculate time", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n08]-voting-period-assumes-block-frequency-to-calculate-time", "labels": ["OpenZeppelin"]}, {"title": "According to the GovernanceAlpha contract, the voting period is expected to last 17280 blocks, which given the current block time (around 15 seconds), would map to approximately 3 days. The number of blocks that the voting period lasts is currently hardcoded and cannot be modified by any means. However, it is known that Ethereum\u2019s \u201cdifficulty bomb\u201d may increasingly make mining more difficult, thus increasing the average block time (see Etherscan\u2019s average block time for reference). As a consequence, the voting period could eventually last much longer than expected.", "body": "According to the GovernanceAlpha contract, the voting period is expected to last 17280 blocks, which given the current block time (around 15 seconds), would map to approximately 3 days. The number of blocks that the voting period lasts is currently hardcoded and cannot be modified by any means. However, it is known that Ethereum\u2019s \u201cdifficulty bomb\u201d may increasingly make mining more difficult, thus increasing the average block time (see Etherscan\u2019s average block time for reference). As a consequence, the voting period could eventually last much longer than expected.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#according-to-the-governancealpha-contract,-the-voting-period-is-expected-to-last-17280-blocks,-which-given-the-current-block-time-(around-15-seconds),-would-map-to-approximately-3-days.-the-number-of-blocks-that-the-voting-period-lasts-is-currently-hardcoded-and-cannot-be-modified-by-any-means.-however,-it-is-known-that-ethereum\u2019s-\u201cdifficulty-bomb\u201d-may-increasingly-make-mining-more-difficult,-thus-increasing-the-average-block-time-(see-etherscan\u2019s-average-block-time-for-reference).-as-a-consequence,-the-voting-period-could-eventually-last-much-longer-than-expected.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the necessary logic in the GovernorAlpha contract so that the voting period time may be adjusted via governance proposals if ever needed.", "body": "Consider adding the necessary logic in the GovernorAlpha contract so that the voting period time may be adjusted via governance proposals if ever needed.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#consider-adding-the-necessary-logic-in-the-governoralpha-contract-so-that-the-voting-period-time-may-be-adjusted-via-governance-proposals-if-ever-needed.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Redundant boolean check", "body": "[N09] Redundant boolean check", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n09]-redundant-boolean-check", "labels": ["OpenZeppelin"]}, {"title": "Line 234 of GovernorAlpha.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "body": "Line 234 of GovernorAlpha.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#line-234-of-governoralpha.sol-explicitly-compares-a-boolean-value-to-true.-this-is-a-redundant-operation-because-the-result-will-be-equivalent-to-the-boolean-value-itself.-consider-removing-the-redundant-comparison.", "labels": ["OpenZeppelin"]}, {"title": "[N10] VoteCast event does not log the voter\u2019s address", "body": "[N10] VoteCast event does not log the voter\u2019s address", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n10]-votecast-event-does-not-log-the-voter\u2019s-address", "labels": ["OpenZeppelin"]}, {"title": "Every time voters cast their votes for a proposal calling the castVote or castVoteBySig functions, a VoteCast event is emitted. However, this event does not currently log the voter\u2019s address, therefore hindering off-chain tracking of votes by voter.", "body": "Every time voters cast their votes for a proposal calling the castVote or castVoteBySig functions, a VoteCast event is emitted. However, this event does not currently log the voter\u2019s address, therefore hindering off-chain tracking of votes by voter.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#every-time-voters-cast-their-votes-for-a-proposal-calling-the-castvote-or-castvotebysig-functions,-a-votecast-event-is-emitted.-however,-this-event-does-not-currently-log-the-voter\u2019s-address,-therefore-hindering-off-chain-tracking-of-votes-by-voter.", "labels": ["OpenZeppelin"]}, {"title": "Consider logging the address of the voter in the VoteCast event.", "body": "Consider logging the address of the voter in the VoteCast event.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#consider-logging-the-address-of-the-voter-in-the-votecast-event.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Contracts do not compile with solc 0.5.12", "body": "[N11] Contracts do not compile with solc 0.5.12", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n11]-contracts-do-not-compile-with-solc-0.5.12", "labels": ["OpenZeppelin"]}, {"title": "The Comp and GovernorAlpha contracts specify a compiler version equal or greater than solc 0.5.12. However, as seen in the output below, both contracts fail to compile with solc 0.5.12:", "body": "The Comp and GovernorAlpha contracts specify a compiler version equal or greater than solc 0.5.12. However, as seen in the output below, both contracts fail to compile with solc 0.5.12:", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#the-comp-and-governoralpha-contracts-specify-a-compiler-version-equal-or-greater-than-solc-0.5.12.-however,-as-seen-in-the-output-below,-both-contracts-fail-to-compile-with-solc-0.5.12:", "labels": ["OpenZeppelin"]}, {"title": "Consider only allowing compilation with versions greater than 0.5.12.", "body": "Consider only allowing compilation with versions greater than 0.5.12.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#consider-only-allowing-compilation-with-versions-greater-than-0.5.12.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Inconsistent style for validating proposal state", "body": "[N12] Inconsistent style for validating proposal state", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n12]-inconsistent-style-for-validating-proposal-state", "labels": ["OpenZeppelin"]}, {"title": "validating proposal state in the cancel function of the", "body": "validating proposal state in the cancel function of the", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#validating-proposal-state-in-the-cancel-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "execute and", "body": "execute and", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#execute-and", "labels": ["OpenZeppelin"]}, {"title": "queue. In particular, given that the", "body": "queue. In particular, given that the", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#queue.-in-particular,-given-that-the", "labels": ["OpenZeppelin"]}, {"title": "[N13] Incorrect error messages in require statements", "body": "[N13] Incorrect error messages in require statements", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#[n13]-incorrect-error-messages-in-require-statements", "labels": ["OpenZeppelin"]}, {"title": "Two require statements contain incorrect error messages. In particular:", "body": "Two require statements contain incorrect error messages. In particular:", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#two-require-statements-contain-incorrect-error-messages.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "In line 258 of GovernorAlpha.sol: castVote should say _castVote.", "body": "In line 258 of GovernorAlpha.sol: castVote should say _castVote.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#in-line-258-of-governoralpha.sol:-castvote-should-say-_castvote.", "labels": ["OpenZeppelin"]}, {"title": "In line 261 of GovernorAlpha.sol: castVote should say _castVote.", "body": "In line 261 of GovernorAlpha.sol: castVote should say _castVote.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#in-line-261-of-governoralpha.sol:-castvote-should-say-_castvote.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing these error messages to avoid confusions during debugging.", "body": "Consider fixing these error messages to avoid confusions during debugging.", "html_url": "https://blog.openzeppelin.com/compound-alpha-governance-system-audit#consider-fixing-these-error-messages-to-avoid-confusions-during-debugging.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Inconsistent coding style for function parameters", "body": "[N01] Inconsistent coding style for function parameters", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n01]-inconsistent-coding-style-for-function-parameters", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of underscores in the names of function parameters. While some parameters include an underscore and the end of their names, others do not. To favor readability throughout the code base, consider always following a consistent coding style.", "body": "There is an inconsistent use of underscores in the names of function parameters. While some parameters include an underscore and the end of their names, others do not. To favor readability throughout the code base, consider always following a consistent coding style.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#there-is-an-inconsistent-use-of-underscores-in-the-names-of-function-parameters.-while-some-parameters-include-an-underscore-and-the-end-of-their-names,-others-do-not.-to-favor-readability-throughout-the-code-base,-consider-always-following-a-consistent-coding-style.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Redundant assignment of sorted price array", "body": "[N02] Redundant assignment of sorted price array", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n02]-redundant-assignment-of-sorted-price-array", "labels": ["OpenZeppelin"]}, {"title": "medianPrice function of the", "body": "calls the private  sort function to sort the  to a new sortedPrices array. In Solidity, arrays are  reference types, so the  [N03] Undocumented system design for untrusted price sources  The Open Oracle is designed to allow anyone to submit asset prices by calling the postPrices function of the DelFiPrice contract or the put function of the OpenOraclePriceData contract. However, only prices reported from trusted sources, defined in the sources array, are taken into account to calculate the official median price of an asset. This system design renders prices reported from untrusted reporters pointless, though at the same time allows them to submit prices. While this seems to be inline with the systems intended behavior, a clearer explanation addressing this (either in code or external documentation) might be beneficial for users, developers and auditors alike.  [N04] Lack of explicit visibility in state variables  State variables anchor, upperBoundAnchorRatio and lowerBoundAnchorRatio of the DelFiPrice contract are implicitly using the default visibility. To favor readability, consider explicitly declaring the visibility of all state variables.  [N05] Naming  The data mapping of the OpenOraclePriceData contract should be renamed with a more self-explanatory name that states what kind of data the mapping stores. Similarly, the get and put functions can also benefit from more self-explanatory naming.  The data address of the OpenOracleView contract should be renamed to clearly denote it refers to a contract address.  The source function of the OpenOracleData contract should be renamed to getSource, getSourceFromMessage or similar.  The PriceUpdated event of the DelFiPrice contract should be renamed to MedianPriceUpdated.  The prices mapping of the DelFiPrice contract should be renamed to medianPrices.  [N06] Declare uint as uint256  The projects code often uses uint as variable type. See for example lines 36, 53 and 58 of the DelFiPrice.sol contract.  To favor explicitness, all instances of uint should be declared as uint256.  [N07] Unnecessary casting operations  line 54 of DelFiPrice.sol, the  stored as an OpenOraclePriceData type. Therefore, consider removing the unnecessary casting operations.  [N08] Unused named return variable  The  DelFiPrice contract declares a named return variable called median. Given that it is not used, consider removing this variable.  [N09] Considerations on rogue sources  According to its specification, Compounds Open Oracle relies on a consortium of trusted sources that make asset prices available on known https endpoints. Anyone can query these public web endpoints, obtaining the signed data that is later expected to be posted on Ethereum smart contracts. Anyone can post data on chain, but only data signed by the trusted sources will be considered when calculating the median price for an asset.  Each source will have an associated Ethereum address under which their prices will be registered on chain. The number of sources is not enforced in any way at the smart contract level. More interestingly, the array holding all trusted sources addresses is set at deployment and cannot be later modified.  The oracles official price for an asset is the median of a set of prices reported by the trusted sources. Therefore, it only takes 50% of the sources to go rogue in order to manipulate the oracles price at will. The cartelized sources will have total control of the oracles official price, even if the remaining 50% of the sources keep reporting the real prices of an asset. It is unclear how many sources the Open Oracle will trust, but the lower the number of sources, the easier it would be to conduct this attack. While a conglomerate of malicious sources may sound unlikely at first, one should take into account that the incentives for a set of sources to take control over the oracle increase with the number of projects fully relying on the oracles prices. If initially trusted sources happen to go rogue and manipulate prices before the Compound team notices, all on-chain finance systems trusting the Open Oracle may suffer severe financial losses.  The Compound team is aware of the potential risk of rogue sources, and according to the specification The consortium operates on a trust-but-verify principle. If reporters use timestamps too far in the future or report prices which deviate too far from the norm, they will likely be voted out of the Compound Reference Price view. At the time of the audit there is no governance mechanism in place to vote out a trusted source. As a consequence, the only available way to replace sources is to re-deploy the DelFiPrice contract with a new set of sources.  So as to rapidly detect and mitigate any malicious behavior, we strongly advise closely monitoring the prices and timestamps posted on chain, tracking the Write event triggered after every price update. Furthermore, consider outlining a response and recovery plan so as to act quickly in case an attempt to compromise the Open Oracle is detected.  Conclusions  No critical and one high severity issue were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#medianprice-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "calls the private", "body": "calls the private", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#calls-the-private", "labels": ["OpenZeppelin"]}, {"title": "sort function to sort the", "body": "sort function to sort the", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#sort-function-to-sort-the", "labels": ["OpenZeppelin"]}, {"title": "to a new sortedPrices array. In Solidity, arrays are", "body": "to a new sortedPrices array. In Solidity, arrays are", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#to-a-new-sortedprices-array.-in-solidity,-arrays-are", "labels": ["OpenZeppelin"]}, {"title": "reference types, so the", "body": "reference types, so the", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#reference-types,-so-the", "labels": ["OpenZeppelin"]}, {"title": "[N03] Undocumented system design for untrusted price sources", "body": "[N03] Undocumented system design for untrusted price sources", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n03]-undocumented-system-design-for-untrusted-price-sources", "labels": ["OpenZeppelin"]}, {"title": "The Open Oracle is designed to allow anyone to submit asset prices by calling the postPrices function of the DelFiPrice contract or the put function of the OpenOraclePriceData contract. However, only prices reported from trusted sources, defined in the sources array, are taken into account to calculate the official median price of an asset. This system design renders prices reported from untrusted reporters pointless, though at the same time allows them to submit prices. While this seems to be inline with the system\u2019s intended behavior, a clearer explanation addressing this (either in code or external documentation) might be beneficial for users, developers and auditors alike.", "body": "The Open Oracle is designed to allow anyone to submit asset prices by calling the postPrices function of the DelFiPrice contract or the put function of the OpenOraclePriceData contract. However, only prices reported from trusted sources, defined in the sources array, are taken into account to calculate the official median price of an asset. This system design renders prices reported from untrusted reporters pointless, though at the same time allows them to submit prices. While this seems to be inline with the system\u2019s intended behavior, a clearer explanation addressing this (either in code or external documentation) might be beneficial for users, developers and auditors alike.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-open-oracle-is-designed-to-allow-anyone-to-submit-asset-prices-by-calling-the-postprices-function-of-the-delfiprice-contract-or-the-put-function-of-the-openoraclepricedata-contract.-however,-only-prices-reported-from-trusted-sources,-defined-in-the-sources-array,-are-taken-into-account-to-calculate-the-official-median-price-of-an-asset.-this-system-design-renders-prices-reported-from-untrusted-reporters-pointless,-though-at-the-same-time-allows-them-to-submit-prices.-while-this-seems-to-be-inline-with-the-system\u2019s-intended-behavior,-a-clearer-explanation-addressing-this-(either-in-code-or-external-documentation)-might-be-beneficial-for-users,-developers-and-auditors-alike.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Lack of explicit visibility in state variables", "body": "[N04] Lack of explicit visibility in state variables", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n04]-lack-of-explicit-visibility-in-state-variables", "labels": ["OpenZeppelin"]}, {"title": "State variables anchor, upperBoundAnchorRatio and lowerBoundAnchorRatio of the DelFiPrice contract are implicitly using the default visibility. To favor readability, consider explicitly declaring the visibility of all state variables.", "body": "State variables anchor, upperBoundAnchorRatio and lowerBoundAnchorRatio of the DelFiPrice contract are implicitly using the default visibility. To favor readability, consider explicitly declaring the visibility of all state variables.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#state-variables-anchor,-upperboundanchorratio-and-lowerboundanchorratio-of-the-delfiprice-contract-are-implicitly-using-the-default-visibility.-to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Naming", "body": "[N05] Naming", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n05]-naming", "labels": ["OpenZeppelin"]}, {"title": "The data mapping of the OpenOraclePriceData contract should be renamed with a more self-explanatory name that states what kind of data the mapping stores. Similarly, the get and put functions can also benefit from more self-explanatory naming.", "body": "The data mapping of the OpenOraclePriceData contract should be renamed with a more self-explanatory name that states what kind of data the mapping stores. Similarly, the get and put functions can also benefit from more self-explanatory naming.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-data-mapping-of-the-openoraclepricedata-contract-should-be-renamed-with-a-more-self-explanatory-name-that-states-what-kind-of-data-the-mapping-stores.-similarly,-the-get-and-put-functions-can-also-benefit-from-more-self-explanatory-naming.", "labels": ["OpenZeppelin"]}, {"title": "The data address of the OpenOracleView contract should be renamed to clearly denote it refers to a contract address.", "body": "The data address of the OpenOracleView contract should be renamed to clearly denote it refers to a contract address.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-data-address-of-the-openoracleview-contract-should-be-renamed-to-clearly-denote-it-refers-to-a-contract-address.", "labels": ["OpenZeppelin"]}, {"title": "The source function of the OpenOracleData contract should be renamed to getSource, getSourceFromMessage or similar.", "body": "The source function of the OpenOracleData contract should be renamed to getSource, getSourceFromMessage or similar.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-source-function-of-the-openoracledata-contract-should-be-renamed-to-getsource,-getsourcefrommessage-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The PriceUpdated event of the DelFiPrice contract should be renamed to MedianPriceUpdated.", "body": "The PriceUpdated event of the DelFiPrice contract should be renamed to MedianPriceUpdated.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-priceupdated-event-of-the-delfiprice-contract-should-be-renamed-to-medianpriceupdated.", "labels": ["OpenZeppelin"]}, {"title": "The prices mapping of the DelFiPrice contract should be renamed to medianPrices.", "body": "The prices mapping of the DelFiPrice contract should be renamed to medianPrices.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-prices-mapping-of-the-delfiprice-contract-should-be-renamed-to-medianprices.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Declare uint as uint256", "body": "[N06] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n06]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "The project\u2019s code often uses uint as variable type. See for example lines 36, 53 and 58 of the DelFiPrice.sol contract.", "body": "The project\u2019s code often uses uint as variable type. See for example lines 36, 53 and 58 of the DelFiPrice.sol contract.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-project\u2019s-code-often-uses-uint-as-variable-type.-see-for-example-lines-36,-53-and-58-of-the-delfiprice.sol-contract.", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, all instances of uint should be declared as uint256.", "body": "To favor explicitness, all instances of uint should be declared as uint256.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#to-favor-explicitness,-all-instances-of-uint-should-be-declared-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unnecessary casting operations", "body": "[N07] Unnecessary casting operations", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n07]-unnecessary-casting-operations", "labels": ["OpenZeppelin"]}, {"title": "line 54 of DelFiPrice.sol, the", "body": "line 54 of DelFiPrice.sol, the", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#line-54-of-delfiprice.sol,-the", "labels": ["OpenZeppelin"]}, {"title": "stored as an OpenOraclePriceData type. Therefore, consider removing the unnecessary casting operations.", "body": "stored as an OpenOraclePriceData type. Therefore, consider removing the unnecessary casting operations.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#stored-as-an-openoraclepricedata-type.-therefore,-consider-removing-the-unnecessary-casting-operations.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused named return variable", "body": "[N08] Unused named return variable", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n08]-unused-named-return-variable", "labels": ["OpenZeppelin"]}, {"title": "The medianPrice function of the DelFiPrice contract declares a named return variable called median. Given that it is not used, consider removing this variable.", "body": "The medianPrice function of the DelFiPrice contract declares a named return variable called median. Given that it is not used, consider removing this variable.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-medianprice-function-of-the-delfiprice-contract-declares-a-named-return-variable-called-median.-given-that-it-is-not-used,-consider-removing-this-variable.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Considerations on rogue sources", "body": "According to its specification, Compounds Open Oracle relies on a consortium of trusted sources that make asset prices available on known https endpoints. Anyone can query these public web endpoints, obtaining the signed data that is later expected to be posted on Ethereum smart contracts. Anyone can post data on chain, but only data signed by the trusted sources will be considered when calculating the median price for an asset.  Each source will have an associated Ethereum address under which their prices will be registered on chain. The number of sources is not enforced in any way at the smart contract level. More interestingly, the array holding all trusted sources addresses is set at deployment and cannot be later modified.  The oracles official price for an asset is the median of a set of prices reported by the trusted sources. Therefore, it only takes 50% of the sources to go rogue in order to manipulate the oracles price at will. The cartelized sources will have total control of the oracles official price, even if the remaining 50% of the sources keep reporting the real prices of an asset. It is unclear how many sources the Open Oracle will trust, but the lower the number of sources, the easier it would be to conduct this attack. While a conglomerate of malicious sources may sound unlikely at first, one should take into account that the incentives for a set of sources to take control over the oracle increase with the number of projects fully relying on the oracles prices. If initially trusted sources happen to go rogue and manipulate prices before the Compound team notices, all on-chain finance systems trusting the Open Oracle may suffer severe financial losses.  The Compound team is aware of the potential risk of rogue sources, and according to the specification The consortium operates on a trust-but-verify principle. If reporters use timestamps too far in the future or report prices which deviate too far from the norm, they will likely be voted out of the Compound Reference Price view. At the time of the audit there is no governance mechanism in place to vote out a trusted source. As a consequence, the only available way to replace sources is to re-deploy the DelFiPrice contract with a new set of sources.  So as to rapidly detect and mitigate any malicious behavior, we strongly advise closely monitoring the prices and timestamps posted on chain, tracking the Write event triggered after every price update. Furthermore, consider outlining a response and recovery plan so as to act quickly in case an attempt to compromise the Open Oracle is detected.  Conclusions  No critical and one high severity issue were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#[n09]-considerations-on-rogue-sources", "labels": ["OpenZeppelin"]}, {"title": "According to its specification, Compound\u2019s Open Oracle relies on a consortium of trusted sources that make asset prices available on known https endpoints. Anyone can query these public web endpoints, obtaining the signed data that is later expected to be posted on Ethereum smart contracts. Anyone can post data on chain, but only data signed by the trusted sources will be considered when calculating the median price for an asset.", "body": "According to its specification, Compound\u2019s Open Oracle relies on a consortium of trusted sources that make asset prices available on known https endpoints. Anyone can query these public web endpoints, obtaining the signed data that is later expected to be posted on Ethereum smart contracts. Anyone can post data on chain, but only data signed by the trusted sources will be considered when calculating the median price for an asset.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#according-to-its-specification,-compound\u2019s-open-oracle-relies-on-a-consortium-of-trusted-sources-that-make-asset-prices-available-on-known-https-endpoints.-anyone-can-query-these-public-web-endpoints,-obtaining-the-signed-data-that-is-later-expected-to-be-posted-on-ethereum-smart-contracts.-anyone-can-post-data-on-chain,-but-only-data-signed-by-the-trusted-sources-will-be-considered-when-calculating-the-median-price-for-an-asset.", "labels": ["OpenZeppelin"]}, {"title": "Each source will have an associated Ethereum address under which their prices will be registered on chain. The number of sources is not enforced in any way at the smart contract level. More interestingly, the array holding all trusted sources\u2019 addresses is set at deployment and cannot be later modified.", "body": "Each source will have an associated Ethereum address under which their prices will be registered on chain. The number of sources is not enforced in any way at the smart contract level. More interestingly, the array holding all trusted sources\u2019 addresses is set at deployment and cannot be later modified.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#each-source-will-have-an-associated-ethereum-address-under-which-their-prices-will-be-registered-on-chain.-the-number-of-sources-is-not-enforced-in-any-way-at-the-smart-contract-level.-more-interestingly,-the-array-holding-all-trusted-sources\u2019-addresses-is-set-at-deployment-and-cannot-be-later-modified.", "labels": ["OpenZeppelin"]}, {"title": "The oracle\u2019s \u201cofficial\u201d price for an asset is the median of a set of prices reported by the trusted sources. Therefore, it only takes 50% of the sources to go rogue in order to manipulate the oracle\u2019s price at will. The cartelized sources will have total control of the oracle\u2019s official price, even if the remaining 50% of the sources keep reporting the real prices of an asset. It is unclear how many sources the Open Oracle will trust, but the lower the number of sources, the easier it would be to conduct this attack. While a conglomerate of malicious sources may sound unlikely at first, one should take into account that the incentives for a set of sources to take control over the oracle increase with the number of projects fully relying on the oracle\u2019s prices. If initially trusted sources happen to go rogue and manipulate prices before the Compound team notices, all on-chain finance systems trusting the Open Oracle may suffer severe financial losses.", "body": "The oracle\u2019s \u201cofficial\u201d price for an asset is the median of a set of prices reported by the trusted sources. Therefore, it only takes 50% of the sources to go rogue in order to manipulate the oracle\u2019s price at will. The cartelized sources will have total control of the oracle\u2019s official price, even if the remaining 50% of the sources keep reporting the real prices of an asset. It is unclear how many sources the Open Oracle will trust, but the lower the number of sources, the easier it would be to conduct this attack. While a conglomerate of malicious sources may sound unlikely at first, one should take into account that the incentives for a set of sources to take control over the oracle increase with the number of projects fully relying on the oracle\u2019s prices. If initially trusted sources happen to go rogue and manipulate prices before the Compound team notices, all on-chain finance systems trusting the Open Oracle may suffer severe financial losses.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-oracle\u2019s-\u201cofficial\u201d-price-for-an-asset-is-the-median-of-a-set-of-prices-reported-by-the-trusted-sources.-therefore,-it-only-takes-50%-of-the-sources-to-go-rogue-in-order-to-manipulate-the-oracle\u2019s-price-at-will.-the-cartelized-sources-will-have-total-control-of-the-oracle\u2019s-official-price,-even-if-the-remaining-50%-of-the-sources-keep-reporting-the-real-prices-of-an-asset.-it-is-unclear-how-many-sources-the-open-oracle-will-trust,-but-the-lower-the-number-of-sources,-the-easier-it-would-be-to-conduct-this-attack.-while-a-conglomerate-of-malicious-sources-may-sound-unlikely-at-first,-one-should-take-into-account-that-the-incentives-for-a-set-of-sources-to-take-control-over-the-oracle-increase-with-the-number-of-projects-fully-relying-on-the-oracle\u2019s-prices.-if-initially-trusted-sources-happen-to-go-rogue-and-manipulate-prices-before-the-compound-team-notices,-all-on-chain-finance-systems-trusting-the-open-oracle-may-suffer-severe-financial-losses.", "labels": ["OpenZeppelin"]}, {"title": "The Compound team is aware of the potential risk of rogue sources, and according to the specification \u201cThe consortium operates on a trust-but-verify principle. If reporters use timestamps too far in the future or report prices which deviate too far from the norm, they will likely be voted out of the Compound Reference Price view\u201d. At the time of the audit there is no governance mechanism in place to \u201cvote out\u201d a trusted source. As a consequence, the only available way to replace sources is to re-deploy the DelFiPrice contract with a new set of sources.", "body": "The Compound team is aware of the potential risk of rogue sources, and according to the specification \u201cThe consortium operates on a trust-but-verify principle. If reporters use timestamps too far in the future or report prices which deviate too far from the norm, they will likely be voted out of the Compound Reference Price view\u201d. At the time of the audit there is no governance mechanism in place to \u201cvote out\u201d a trusted source. As a consequence, the only available way to replace sources is to re-deploy the DelFiPrice contract with a new set of sources.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#the-compound-team-is-aware-of-the-potential-risk-of-rogue-sources,-and-according-to-the-specification-\u201cthe-consortium-operates-on-a-trust-but-verify-principle.-if-reporters-use-timestamps-too-far-in-the-future-or-report-prices-which-deviate-too-far-from-the-norm,-they-will-likely-be-voted-out-of-the-compound-reference-price-view\u201d.-at-the-time-of-the-audit-there-is-no-governance-mechanism-in-place-to-\u201cvote-out\u201d-a-trusted-source.-as-a-consequence,-the-only-available-way-to-replace-sources-is-to-re-deploy-the-delfiprice-contract-with-a-new-set-of-sources.", "labels": ["OpenZeppelin"]}, {"title": "So as to rapidly detect and mitigate any malicious behavior, we strongly advise closely monitoring the prices and timestamps posted on chain, tracking the Write event triggered after every price update. Furthermore, consider outlining a response and recovery plan so as to act quickly in case an attempt to compromise the Open Oracle is detected.", "body": "So as to rapidly detect and mitigate any malicious behavior, we strongly advise closely monitoring the prices and timestamps posted on chain, tracking the Write event triggered after every price update. Furthermore, consider outlining a response and recovery plan so as to act quickly in case an attempt to compromise the Open Oracle is detected.", "html_url": "https://blog.openzeppelin.com/compound-open-oracle-audit#so-as-to-rapidly-detect-and-mitigate-any-malicious-behavior,-we-strongly-advise-closely-monitoring-the-prices-and-timestamps-posted-on-chain,-tracking-the-write-event-triggered-after-every-price-update.-furthermore,-consider-outlining-a-response-and-recovery-plan-so-as-to-act-quickly-in-case-an-attempt-to-compromise-the-open-oracle-is-detected.", "labels": ["OpenZeppelin"]}, {"title": "[C01][Fixed] Malicious users could steal from the OptionsContract contract", "body": "[C01][Fixed] Malicious users could steal from the OptionsContract contract", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[c01][fixed]-malicious-users-could-steal-from-the-optionscontract-contract", "labels": ["OpenZeppelin"]}, {"title": "The require statement in Line 249 of OptionContract contract is not using the SafeMath library.", "body": "The require statement in Line 249 of OptionContract contract is not using the SafeMath library.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#the-require-statement-in-line-249-of-optioncontract-contract-is-not-using-the-safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "Let\u2019s assume that in the OptionsFactory the assets have been already added, that now == 500, and that UserA calls the createOptionsContract function to create a new type of Option. There, UserA passes to the function the following time parameters:_expiry = 1000_windowSize = 1001", "body": "Let\u2019s assume that in the OptionsFactory the assets have been already added, that now == 500, and that UserA calls the createOptionsContract function to create a new type of Option. There, UserA passes to the function the following time parameters:_expiry = 1000_windowSize = 1001", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#let\u2019s-assume-that-in-the-optionsfactory-the-assets-have-been-already-added,-that-now-==-500,-and-that-usera-calls-the-createoptionscontract-function-to-create-a-new-type-of-option.-there,-usera-passes-to-the-function-the-following-time-parameters:_expiry-=-1000_windowsize-=-1001", "labels": ["OpenZeppelin"]}, {"title": "Using those values, a new OptionsContract is created, and both windowSize and expiry are simply assigned without checks.", "body": "Using those values, a new OptionsContract is created, and both windowSize and expiry are simply assigned without checks.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#using-those-values,-a-new-optionscontract-is-created,-and-both-windowsize-and-expiry-are-simply-assigned-without-checks.", "labels": ["OpenZeppelin"]}, {"title": "At this moment, UserB calls openRepo, then addETHCollateral or addERC20Collateral, and then issueOTokens. So far, the only time requirement in all those functions was:", "body": "At this moment, UserB calls openRepo, then addETHCollateral or addERC20Collateral, and then issueOTokens. So far, the only time requirement in all those functions was:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#at-this-moment,-userb-calls-openrepo,-then-addethcollateral-or-adderc20collateral,-and-then-issueotokens.-so-far,-the-only-time-requirement-in-all-those-functions-was:", "labels": ["OpenZeppelin"]}, {"title": "require(block.timestamp < expiry);", "body": "require(block.timestamp < expiry);", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#require(block.timestamp-<-expiry);", "labels": ["OpenZeppelin"]}, {"title": "Because 500 < 1000, it does not revert.", "body": "Because 500 < 1000, it does not revert.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#because-500-<-1000,-it-does-not-revert.", "labels": ["OpenZeppelin"]}, {"title": "UserC received the issued oTokens and let\u2019s supose that the underlying asset dropped its value, so UserC wants to exercise.", "body": "UserC received the issued oTokens and let\u2019s supose that the underlying asset dropped its value, so UserC wants to exercise.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#userc-received-the-issued-otokens-and-let\u2019s-supose-that-the-underlying-asset-dropped-its-value,-so-userc-wants-to-exercise.", "labels": ["OpenZeppelin"]}, {"title": "Here it is the first and only time that windowSize is actually used. The new time requirement is:", "body": "Here it is the first and only time that windowSize is actually used. The new time requirement is:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#here-it-is-the-first-and-only-time-that-windowsize-is-actually-used.-the-new-time-requirement-is:", "labels": ["OpenZeppelin"]}, {"title": "require(block.timestamp \u2265 expiry - windowSize);", "body": "require(block.timestamp \u2265 expiry - windowSize);", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#require(block.timestamp-\u2265-expiry---windowsize);", "labels": ["OpenZeppelin"]}, {"title": "Because it is not using SafeMath, expiry - windowSize == 1000 - 1001 == (2**256 - 1) - 1 so the statement 500 \u2265 (2**256 - 1) is false.", "body": "Because it is not using SafeMath, expiry - windowSize == 1000 - 1001 == (2**256 - 1) - 1 so the statement 500 \u2265 (2**256 - 1) is false.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#because-it-is-not-using-safemath,-expiry---windowsize-==-1000---1001-==-(2**256---1)---1-so-the-statement-500-\u2265-(2**256---1)-is-false.", "labels": ["OpenZeppelin"]}, {"title": "For that reason, the put holder cannot exercise his right and the contract will continue until expiry comes, where the repo owner will call claimCollateral and because its requirement is:", "body": "For that reason, the put holder cannot exercise his right and the contract will continue until expiry comes, where the repo owner will call claimCollateral and because its requirement is:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#for-that-reason,-the-put-holder-cannot-exercise-his-right-and-the-contract-will-continue-until-expiry-comes,-where-the-repo-owner-will-call-claimcollateral-and-because-its-requirement-is:", "labels": ["OpenZeppelin"]}, {"title": "require(block.timestamp \u2265 expiry)", "body": "require(block.timestamp \u2265 expiry)", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#require(block.timestamp-\u2265-expiry)", "labels": ["OpenZeppelin"]}, {"title": "UserB can withdraw the collateral, taking the premium without having any obligation to insure UserC with his underlying asset.", "body": "UserB can withdraw the collateral, taking the premium without having any obligation to insure UserC with his underlying asset.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#userb-can-withdraw-the-collateral,-taking-the-premium-without-having-any-obligation-to-insure-userc-with-his-underlying-asset.", "labels": ["OpenZeppelin"]}, {"title": "This problem comes from having a time checkpoint with a dynamic size, as was addressed in the issue \u201c[L06] Confusing time frame for actions\u201d, and for not using the SafeMath library when it is needed. Consider using the SafeMath methods for this operation and fixed time checkpoints along with inner checks during the set up.", "body": "This problem comes from having a time checkpoint with a dynamic size, as was addressed in the issue \u201c[L06] Confusing time frame for actions\u201d, and for not using the SafeMath library when it is needed. Consider using the SafeMath methods for this operation and fixed time checkpoints along with inner checks during the set up.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#this-problem-comes-from-having-a-time-checkpoint-with-a-dynamic-size,-as-was-addressed-in-the-issue-\u201c[l06]-confusing-time-frame-for-actions\u201d,-and-for-not-using-the-safemath-library-when-it-is-needed.-consider-using-the-safemath-methods-for-this-operation-and-fixed-time-checkpoints-along-with-inner-checks-during-the-set-up.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The require statement now uses the SafeMath library.", "body": "Update: Fixed. The require statement now uses the SafeMath library.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-fixed.-the-require-statement-now-uses-the-safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "[H01] Liquidation process could push the protocol into insolvency", "body": "[H01] Liquidation process could push the protocol into insolvency", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[h01]-liquidation-process-could-push-the-protocol-into-insolvency", "labels": ["OpenZeppelin"]}, {"title": "Under certain asset price change conditions, the liquidation process could push the protocol into insolvency. The design of the current liquidation process incentivizes liquidators by providing them with a liquidation bonus. However, at times when the protocol is already under collateralization stress, offering a liquidation bonus plus, in Opyn\u2019s case, a protocol fee, will push further the particular Option into insolvency. Essentially these actions work against the original purpose of the liquidation function.", "body": "Under certain asset price change conditions, the liquidation process could push the protocol into insolvency. The design of the current liquidation process incentivizes liquidators by providing them with a liquidation bonus. However, at times when the protocol is already under collateralization stress, offering a liquidation bonus plus, in Opyn\u2019s case, a protocol fee, will push further the particular Option into insolvency. Essentially these actions work against the original purpose of the liquidation function.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#under-certain-asset-price-change-conditions,-the-liquidation-process-could-push-the-protocol-into-insolvency.-the-design-of-the-current-liquidation-process-incentivizes-liquidators-by-providing-them-with-a-liquidation-bonus.-however,-at-times-when-the-protocol-is-already-under-collateralization-stress,-offering-a-liquidation-bonus-plus,-in-opyn\u2019s-case,-a-protocol-fee,-will-push-further-the-particular-option-into-insolvency.-essentially-these-actions-work-against-the-original-purpose-of-the-liquidation-function.", "labels": ["OpenZeppelin"]}, {"title": "In the following chart we explore how the protocol\u2019s insolvency state is affected during a liquidation event, generated by the collateral to oToken price fluctuation, together with 3 variables: collateralizationRatio, liquidationIncentive, and liquidationFee.", "body": "In the following chart we explore how the protocol\u2019s insolvency state is affected during a liquidation event, generated by the collateral to oToken price fluctuation, together with 3 variables: collateralizationRatio, liquidationIncentive, and liquidationFee.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#in-the-following-chart-we-explore-how-the-protocol\u2019s-insolvency-state-is-affected-during-a-liquidation-event,-generated-by-the-collateral-to-otoken-price-fluctuation,-together-with-3-variables:-collateralizationratio,-liquidationincentive,-and-liquidationfee.", "labels": ["OpenZeppelin"]}, {"title": "On the left, we issue Vo value of oTokens with collateral value of Vc:Vc = Vo * CollateralizationRatio", "body": "On the left, we issue Vo value of oTokens with collateral value of Vc:Vc = Vo * CollateralizationRatio", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#on-the-left,-we-issue-vo-value-of-otokens-with-collateral-value-of-vc:vc-=-vo-*-collateralizationratio", "labels": ["OpenZeppelin"]}, {"title": "On the right, when total collateral value drops to Vc1, collateralization ratio drops, allowing someone to proceed with the liquidation. Assume that a user provides Lo value of oTokens for liquidation and that the Repo is under liquidationFactor. Then, the amount of collateral that will be deducted is:", "body": "On the right, when total collateral value drops to Vc1, collateralization ratio drops, allowing someone to proceed with the liquidation. Assume that a user provides Lo value of oTokens for liquidation and that the Repo is under liquidationFactor. Then, the amount of collateral that will be deducted is:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#on-the-right,-when-total-collateral-value-drops-to-vc1,-collateralization-ratio-drops,-allowing-someone-to-proceed-with-the-liquidation.-assume-that-a-user-provides-lo-value-of-otokens-for-liquidation-and-that-the-repo-is-under-liquidationfactor.-then,-the-amount-of-collateral-that-will-be-deducted-is:", "labels": ["OpenZeppelin"]}, {"title": "Lo * (1 + liquidationIncentive + liquidationFee)", "body": "Lo * (1 + liquidationIncentive + liquidationFee)", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#lo-*-(1-+-liquidationincentive-+-liquidationfee)", "labels": ["OpenZeppelin"]}, {"title": "After this liquidation event, looking at the leftover oToken value and the leftover collateral value, if the leftover the collateral is less than the leftover the oToken value then the protocol is insolvent. Which means:", "body": "After this liquidation event, looking at the leftover oToken value and the leftover collateral value, if the leftover the collateral is less than the leftover the oToken value then the protocol is insolvent. Which means:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#after-this-liquidation-event,-looking-at-the-leftover-otoken-value-and-the-leftover-collateral-value,-if-the-leftover-the-collateral-is-less-than-the-leftover-the-otoken-value-then-the-protocol-is-insolvent.-which-means:", "labels": ["OpenZeppelin"]}, {"title": "Vc1 - Lo(1 + liquidationIncentive + liquidationFee) < Vo - Lo", "body": "Vc1 - Lo(1 + liquidationIncentive + liquidationFee) < Vo - Lo", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#vc1---lo(1-+-liquidationincentive-+-liquidationfee)-<-vo---lo", "labels": ["OpenZeppelin"]}, {"title": "together with Vc = Vo * collateralizationRatio from the left part of the chart, we can get:", "body": "together with Vc = Vo * collateralizationRatio from the left part of the chart, we can get:", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#together-with-vc-=-vo-*-collateralizationratio-from-the-left-part-of-the-chart,-we-can-get:", "labels": ["OpenZeppelin"]}, {"title": "Vc1 < Vc/collateralizationRatio + Lo(liquidationIncentive + liquidationFee)", "body": "Vc1 < Vc/collateralizationRatio + Lo(liquidationIncentive + liquidationFee)", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#vc1-<-vc/collateralizationratio-+-lo(liquidationincentive-+-liquidationfee)", "labels": ["OpenZeppelin"]}, {"title": "Which basically means that when the new value of collateral drops to this level, the liquidation process will push the protocol into insolvency. Plus from this moment on, and because the collateralization ratio is still low, further liquidation events are still allowed. Such events will further push the protocol deeper into insolvency.", "body": "Which basically means that when the new value of collateral drops to this level, the liquidation process will push the protocol into insolvency. Plus from this moment on, and because the collateralization ratio is still low, further liquidation events are still allowed. Such events will further push the protocol deeper into insolvency.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#which-basically-means-that-when-the-new-value-of-collateral-drops-to-this-level,-the-liquidation-process-will-push-the-protocol-into-insolvency.-plus-from-this-moment-on,-and-because-the-collateralization-ratio-is-still-low,-further-liquidation-events-are-still-allowed.-such-events-will-further-push-the-protocol-deeper-into-insolvency.", "labels": ["OpenZeppelin"]}, {"title": "Consider setting up an offline observation mechanism to ensure liquidation events happen as fast as they can before the price gets closer to the mentioned value.", "body": "Consider setting up an offline observation mechanism to ensure liquidation events happen as fast as they can before the price gets closer to the mentioned value.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#consider-setting-up-an-offline-observation-mechanism-to-ensure-liquidation-events-happen-as-fast-as-they-can-before-the-price-gets-closer-to-the-mentioned-value.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Opyn team is implementing a liquidator bot to help solve this issue.", "body": "Update: The Opyn team is implementing a liquidator bot to help solve this issue.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-the-opyn-team-is-implementing-a-liquidator-bot-to-help-solve-this-issue.", "labels": ["OpenZeppelin"]}, {"title": "[H02][Partially Fixed] Malicious Admin can steal from the protocol", "body": "[H02][Partially Fixed] Malicious Admin can steal from the protocol", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[h02][partially-fixed]-malicious-admin-can-steal-from-the-protocol", "labels": ["OpenZeppelin"]}, {"title": "These privileges render the admin with exceptional power over general users, where it could override parameters set up in the deployment. This design puts the whole protocol in a vulnerable state if the admin account is hacked or an internal admin becomes malicious. For example, a malicious admin could easily steal from the protocol by setting a high liquidationFee.", "body": "These privileges render the admin with exceptional power over general users, where it could override parameters set up in the deployment. This design puts the whole protocol in a vulnerable state if the admin account is hacked or an internal admin becomes malicious. For example, a malicious admin could easily steal from the protocol by setting a high liquidationFee.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#these-privileges-render-the-admin-with-exceptional-power-over-general-users,-where-it-could-override-parameters-set-up-in-the-deployment.-this-design-puts-the-whole-protocol-in-a-vulnerable-state-if-the-admin-account-is-hacked-or-an-internal-admin-becomes-malicious.-for-example,-a-malicious-admin-could-easily-steal-from-the-protocol-by-setting-a-high-liquidationfee.", "labels": ["OpenZeppelin"]}, {"title": "Consider the use of an multi-sig account and time-locks to improve the safety of the contract against the powers of a malicious admin.", "body": "Consider the use of an multi-sig account and time-locks to improve the safety of the contract against the powers of a malicious admin.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#consider-the-use-of-an-multi-sig-account-and-time-locks-to-improve-the-safety-of-the-contract-against-the-powers-of-a-malicious-admin.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e. The team has put some restrictions on the parameter update function which restricts admin power when assigning values. The team has also indicated they are working on a multi-sig solution to further protect the admin account.", "body": "Update: Partially Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e. The team has put some restrictions on the parameter update function which restricts admin power when assigning values. The team has also indicated they are working on a multi-sig solution to further protect the admin account.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-partially-fixed-in-the-follow-up-commit-3adfd9afa6d463869d9e0a78cc7f316ae34eb89e.-the-team-has-put-some-restrictions-on-the-parameter-update-function-which-restricts-admin-power-when-assigning-values.-the-team-has-also-indicated-they-are-working-on-a-multi-sig-solution-to-further-protect-the-admin-account.", "labels": ["OpenZeppelin"]}, {"title": "[M01][Fixed] Potential race condition with Repo ownership transfer", "body": "[M01][Fixed] Potential race condition with Repo ownership transfer", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[m01][fixed]-potential-race-condition-with-repo-ownership-transfer", "labels": ["OpenZeppelin"]}, {"title": "Currently a Repo owner can transfer the ownership by calling transferRepoOwnership. A malicious original owner could front run this transaction with another one that puts the Repo in a worse collateralization status, For example, mint more oTokens and remove collateral. This could potentially harm the new owner.", "body": "Currently a Repo owner can transfer the ownership by calling transferRepoOwnership. A malicious original owner could front run this transaction with another one that puts the Repo in a worse collateralization status, For example, mint more oTokens and remove collateral. This could potentially harm the new owner.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#currently-a-repo-owner-can-transfer-the-ownership-by-calling-transferrepoownership.-a-malicious-original-owner-could-front-run-this-transaction-with-another-one-that-puts-the-repo-in-a-worse-collateralization-status,-for-example,-mint-more-otokens-and-remove-collateral.-this-could-potentially-harm-the-new-owner.", "labels": ["OpenZeppelin"]}, {"title": "Depending on how the arrangement for the ownership transfer has been done and how important this function is and the risk it presents, we recommend the team to consider solutions accordingly such as: implementing a time lock and allow the proposed new owner to accept the ownership, state the risk clearly to users in documentation or remove this function all together.", "body": "Depending on how the arrangement for the ownership transfer has been done and how important this function is and the risk it presents, we recommend the team to consider solutions accordingly such as: implementing a time lock and allow the proposed new owner to accept the ownership, state the risk clearly to users in documentation or remove this function all together.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#depending-on-how-the-arrangement-for-the-ownership-transfer-has-been-done-and-how-important-this-function-is-and-the-risk-it-presents,-we-recommend-the-team-to-consider-solutions-accordingly-such-as:-implementing-a-time-lock-and-allow-the-proposed-new-owner-to-accept-the-ownership,-state-the-risk-clearly-to-users-in-documentation-or-remove-this-function-all-together.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where this function is removed.", "body": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where this function is removed.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-fixed-in-the-follow-up-commit-3adfd9afa6d463869d9e0a78cc7f316ae34eb89e-where-this-function-is-removed.", "labels": ["OpenZeppelin"]}, {"title": "[M02][Fixed] Lack of event emissions after sensitive changes", "body": "[M02][Fixed] Lack of event emissions after sensitive changes", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[m02][fixed]-lack-of-event-emissions-after-sensitive-changes", "labels": ["OpenZeppelin"]}, {"title": "It is beneficial for critical functions to trigger events for purposes like record keeping and filtering. However, functions like updateParameters, transferFee, and transferCollateral will not emit an event through inherited ERC20 functions, if the collateral is ETH.Consider double checking all critical functions to see if those trigger events properly.", "body": "It is beneficial for critical functions to trigger events for purposes like record keeping and filtering. However, functions like updateParameters, transferFee, and transferCollateral will not emit an event through inherited ERC20 functions, if the collateral is ETH.Consider double checking all critical functions to see if those trigger events properly.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#it-is-beneficial-for-critical-functions-to-trigger-events-for-purposes-like-record-keeping-and-filtering.-however,-functions-like-updateparameters,-transferfee,-and-transfercollateral-will-not-emit-an-event-through-inherited-erc20-functions,-if-the-collateral-is-eth.consider-double-checking-all-critical-functions-to-see-if-those-trigger-events-properly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where events were added to critical functions.", "body": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where events were added to critical functions.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-fixed-in-the-follow-up-commit-3adfd9afa6d463869d9e0a78cc7f316ae34eb89e-where-events-were-added-to-critical-functions.", "labels": ["OpenZeppelin"]}, {"title": "[L01][Fixed] Not following check-effect-interaction pattern", "body": "[L01][Fixed] Not following check-effect-interaction pattern", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[l01][fixed]-not-following-check-effect-interaction-pattern", "labels": ["OpenZeppelin"]}, {"title": "In the issueOTokens function of the OptionsContract contract a Repo owner can mint new oTokens and send them to a third party.", "body": "In the issueOTokens function of the OptionsContract contract a Repo owner can mint new oTokens and send them to a third party.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#in-the-issueotokens-function-of-the-optionscontract-contract-a-repo-owner-can-mint-new-otokens-and-send-them-to-a-third-party.", "labels": ["OpenZeppelin"]}, {"title": "Once the check confirms that the new amount of oTokens is safe, it mints them and transfers them to the destinatary.", "body": "Once the check confirms that the new amount of oTokens is safe, it mints them and transfers them to the destinatary.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#once-the-check-confirms-that-the-new-amount-of-otokens-is-safe,-it-mints-them-and-transfers-them-to-the-destinatary.", "labels": ["OpenZeppelin"]}, {"title": "There is an issue with the order of the operations: First the oTokens are minted, and then the put balance of the Repo is updated .", "body": "There is an issue with the order of the operations: First the oTokens are minted, and then the put balance of the Repo is updated .", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#there-is-an-issue-with-the-order-of-the-operations:-first-the-otokens-are-minted,-and-then-the-put-balance-of-the-repo-is-updated-.", "labels": ["OpenZeppelin"]}, {"title": "Although a reentrancy cannot happen in this case, to preserve a safer check-effect-interaction pattern, consider inverting the order of those operations.", "body": "Although a reentrancy cannot happen in this case, to preserve a safer check-effect-interaction pattern, consider inverting the order of those operations.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#although-a-reentrancy-cannot-happen-in-this-case,-to-preserve-a-safer-check-effect-interaction-pattern,-consider-inverting-the-order-of-those-operations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where _mint function is only called after vault.oTokensIssued has been updated.", "body": "Update: Fixed in the follow-up commit 3adfd9afa6d463869d9e0a78cc7f316ae34eb89e where _mint function is only called after vault.oTokensIssued has been updated.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-fixed-in-the-follow-up-commit-3adfd9afa6d463869d9e0a78cc7f316ae34eb89e-where-_mint-function-is-only-called-after-vault.otokensissued-has-been-updated.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Different behavior between ETH and Tokens collateral", "body": "[L02] Different behavior between ETH and Tokens collateral", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[l02]-different-behavior-between-eth-and-tokens-collateral", "labels": ["OpenZeppelin"]}, {"title": "The project allows the usage of ETH or ERC20 tokens as collateral. Because ETH is a coin and not a token, it does not have a contract which keeps the account balances nor an address defined for that asset.", "body": "The project allows the usage of ETH or ERC20 tokens as collateral. Because ETH is a coin and not a token, it does not have a contract which keeps the account balances nor an address defined for that asset.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#the-project-allows-the-usage-of-eth-or-erc20-tokens-as-collateral.-because-eth-is-a-coin-and-not-a-token,-it-does-not-have-a-contract-which-keeps-the-account-balances-nor-an-address-defined-for-that-asset.", "labels": ["OpenZeppelin"]}, {"title": "The project solves this by pretending that ETH is an ERC20 compliant token in the zero address.", "body": "The project solves this by pretending that ETH is an ERC20 compliant token in the zero address.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#the-project-solves-this-by-pretending-that-eth-is-an-erc20-compliant-token-in-the-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "This is a type of semantic overload over the zero address, which is used for two purposes. 1. to represent \u2018ETH contract address\u2019. 2. to show if a token asset is supported or not by checking if the desired asset has changed its address in the tokens mapping from the default zero address.", "body": "This is a type of semantic overload over the zero address, which is used for two purposes. 1. to represent \u2018ETH contract address\u2019. 2. to show if a token asset is supported or not by checking if the desired asset has changed its address in the tokens mapping from the default zero address.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#this-is-a-type-of-semantic-overload-over-the-zero-address,-which-is-used-for-two-purposes.-1.-to-represent-\u2018eth-contract-address\u2019.-2.-to-show-if-a-token-asset-is-supported-or-not-by-checking-if-the-desired-asset-has-changed-its-address-in-the-tokens-mapping-from-the-default-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "Another problem is that if in the future the project needs to support only ERC20 token collaterals, ETH cannot be removed from the supported assets when the deleteAsset function is called.", "body": "Another problem is that if in the future the project needs to support only ERC20 token collaterals, ETH cannot be removed from the supported assets when the deleteAsset function is called.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#another-problem-is-that-if-in-the-future-the-project-needs-to-support-only-erc20-token-collaterals,-eth-cannot-be-removed-from-the-supported-assets-when-the-deleteasset-function-is-called.", "labels": ["OpenZeppelin"]}, {"title": "Consider treating ETH as a different collateral type instead of adapting it to a ERC20 compliant token or add the necessary functionalities to keep up with the token based ones.", "body": "Consider treating ETH as a different collateral type instead of adapting it to a ERC20 compliant token or add the necessary functionalities to keep up with the token based ones.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#consider-treating-eth-as-a-different-collateral-type-instead-of-adapting-it-to-a-erc20-compliant-token-or-add-the-necessary-functionalities-to-keep-up-with-the-token-based-ones.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Opyn team explained they always plan on supporting ETH as a collateral asset hence didn\u2019t remove it.", "body": "Update: The Opyn team explained they always plan on supporting ETH as a collateral asset hence didn\u2019t remove it.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-the-opyn-team-explained-they-always-plan-on-supporting-eth-as-a-collateral-asset-hence-didn\u2019t-remove-it.", "labels": ["OpenZeppelin"]}, {"title": "[L03] Cannot update exponent after deployment", "body": "[L03] Cannot update exponent after deployment", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[l03]-cannot-update-exponent-after-deployment", "labels": ["OpenZeppelin"]}, {"title": "calling the updateParameters function.", "body": "calling the updateParameters function.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#calling-the-updateparameters-function.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, only the value of those variables can be changed. The exponents of those Number variables cannot be changed.", "body": "Nevertheless, only the value of those variables can be changed. The exponents of those Number variables cannot be changed.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#nevertheless,-only-the-value-of-those-variables-can-be-changed.-the-exponents-of-those-number-variables-cannot-be-changed.", "labels": ["OpenZeppelin"]}, {"title": "Consider letting the function updateParameters to update also the exponents used in the project.", "body": "Consider letting the function updateParameters to update also the exponents used in the project.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#consider-letting-the-function-updateparameters-to-update-also-the-exponents-used-in-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Opyn team explained that the exponent cap is there on purpose. They don\u2019t anticipate taking a fee lower than 0.01% so the extra precision is unnecessary", "body": "Update: The Opyn team explained that the exponent cap is there on purpose. They don\u2019t anticipate taking a fee lower than 0.01% so the extra precision is unnecessary", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#update:-the-opyn-team-explained-that-the-exponent-cap-is-there-on-purpose.-they-don\u2019t-anticipate-taking-a-fee-lower-than-0.01%-so-the-extra-precision-is-unnecessary", "labels": ["OpenZeppelin"]}, {"title": "[L04][Fixed] Miscalculated maxCollateralLiquidatable in liquidate function", "body": "[L04][Fixed] Miscalculated maxCollateralLiquidatable in liquidate function", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#[l04][fixed]-miscalculated-maxcollateralliquidatable-in-liquidate-function", "labels": ["OpenZeppelin"]}, {"title": "line 518: if the", "body": "line 518: if the", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#line-518:-if-the", "labels": ["OpenZeppelin"]}, {"title": "maxCollateralLiquidatable.div(10 ** uint32(liquidationFactor.exponent))", "body": "maxCollateralLiquidatable.div(10 ** uint32(liquidationFactor.exponent))", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#maxcollateralliquidatable.div(10-**-uint32(liquidationfactor.exponent))", "labels": ["OpenZeppelin"]}, {"title": "but this should be", "body": "but this should be", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#but-this-should-be", "labels": ["OpenZeppelin"]}, {"title": "maxCollateralLiquidatable.mul(10 ** uint32(liquidationFactor.exponent))", "body": "maxCollateralLiquidatable.mul(10 ** uint32(liquidationFactor.exponent))", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#maxcollateralliquidatable.mul(10-**-uint32(liquidationfactor.exponent))", "labels": ["OpenZeppelin"]}, {"title": "instead.", "body": "instead.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#instead.", "labels": ["OpenZeppelin"]}, {"title": "This bug is not really exploitable because liquidationFactor should be always \u2264 1 , which means liquidation.exponent should be always < 0.", "body": "This bug is not really exploitable because liquidationFactor should be always \u2264 1 , which means liquidation.exponent should be always < 0.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#this-bug-is-not-really-exploitable-because-liquidationfactor-should-be-always-\u2264-1-,-which-means-liquidation.exponent-should-be-always-<-0.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing the math issue, or simply remove it from the condition liquidationFactor.exponent > 0 since it should never happen.", "body": "Consider fixing the math issue, or simply remove it from the condition liquidationFactor.exponent > 0 since it should never happen.", "html_url": "https://blog.openzeppelin.com/opyn-contracts-audit#consider-fixing-the-math-issue,-or-simply-remove-it-from-the-condition-liquidationfactor.exponent->-0-since-it-should-never-happen.", "labels": ["OpenZeppelin"]}]