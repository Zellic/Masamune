[{"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/99", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "[WP-M3] `NFTPair.sol#repay()` `loan.borrower` can be a contract with no `onERC721Received` method, which may cause the NFT to be frozen and put user's funds at risk", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "[WP-M3] `NFTPair.sol#repay()` `loan.borrower` can be a contract with no `onERC721Received` method, which may cause the NFT to be frozen and put user's funds at risk"}, {"title": "Using \"transfer/transferFrom\" instead of \"safeTransfer/safeTransferFrom\" throughout the contracts", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "Using \"transfer/transferFrom\" instead of \"safeTransfer/safeTransferFrom\" throughout the contracts"}, {"title": "NFT unrecoverable. Lender might not be able to handle NFT collateral if not implemented `onERC721Received()` function.", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/84", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "NFT unrecoverable. Lender might not be able to handle NFT collateral if not implemented `onERC721Received()` function."}, {"title": "use of transferFrom", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/83", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "use of transferFrom"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/81", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/80", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/77", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/75", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/74", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/67", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/66", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/65", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Reentrancy at _requestLoan allows requesting a loan without supplying collateral", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/61", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "Reentrancy at _requestLoan allows requesting a loan without supplying collateral"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/59", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Mistake while checking LTV to lender accepted LTV", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/55", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-abranft-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L316   # Vulnerability details  ## Impact It comments in the _lend() function that lender accepted conditions must be at least as good as the borrower is asking for. The line which checks the accepted LTV (lender's LTV) against borrower asking LTV is:                 params.ltvBPS >= accepted.ltvBPS, This means lender should be offering a lower LTV, which must be the opposite way around.  I think this may have the potential to strand the lender, if he enters a lower LTV. For example borrower asking LTV is 86%. However, lender enters his accepted LTV as 80%. lend() will execute with 86% LTV and punish the lender, whereas it should revert and acknowledge the lender that his bid is not good enough.  ## Proof of Concept https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L316  ## Tools Used Manual analysis  ## Recommended Mitigation Steps The condition should be changed as:                 params.ltvBPS <= accepted.ltvBPS,    "}, {"title": "Lender is able to seize the collateral by changing the loan parameters", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/51", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-abranft-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L198-L223 https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L200-L212 https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L288   # Vulnerability details  ## Impact The lender should only be able to seize the collateral if: - the borrower didn't repay in time - the collateral loses too much of its value  But, the lender is able to seize the collateral at any time by modifying the loan parameters.  ## Proof of Concept The [`updateLoanParams()`](https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L198-L223) allows the lender to modify the parameters of an active loan in favor of the borrower. But, by setting the `ltvBPS` value to `0` they are able to seize the collateral.  If `ltvBPS` is `0` the following require statement in `removeCollateral()` will always be true:  https://github.com/code-423n4/2022-04-abranft/blob/main/contracts/NFTPairWithOracle.sol#L288  `rate * 0 / BPS < amount` is always `true`.  That allows the lender to seize the collateral although its value didn't decrease nor did the time to repay the loan come.  So the required steps are: 1. lend the funds to the borrower 2. call `updateLoanParams()` to set the `ltvBPS` value to `0` 3. call `removeCollateral()` to steal the collateral from the contract  ## Tools Used none  ## Recommended Mitigation Steps Don't allow `updateLoanParams()` to change the `ltvBPS` value.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/45", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/42", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/41", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/40", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Critical Oracle Manipulation Risk by Lender", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/37", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-abranft-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L286-L288 https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L200-L211   # Vulnerability details  ## Impact  The intended use of the Oracle is to protect the lender from a drop in the borrower's collateral value. If the collateral value goes up significantly and higher than borrowed amount + interest, the lender should not be able to seize the collateral at the expense of the borrower. However, in the `NFTPairWithOracle` contract, the lender could change the Oracle once a loan is outstanding, and therefore seize the collateral at the expense of the borrower, if the actual value of the collateral has increased significantly. This is a critical risk because borrowers asset could be lost to malicious lenders.   ## Proof of Concept  In `NFTPairWithOracle`, the `params` are set by the `borrower` when they call `requestLoan()`, including the Oracle used. Once a lender agrees with the parameters and calls the `lend()` function, the `loan.status` changes to `LOAN_OUTSTANDING`.   Then, the lender can call the `updateLoanParams()` function and pass in its own `params` including the Oracle used. The `require` statement from line 205 to 211 does not check if `params.oracle` and `cur.oracle` are the same. A malicious lender could pass in his own `oracle` after the loan becomes outstanding, and the change would be reflected in line 221.   https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L200-L211  In a situation where the actual value of the collateral has gone up by a lot, exceeding the amount the lender is owed (principal + interest), the lender would have an incentive to seize the collateral. If the Oracle is not tampered with, lender should not be able to do this, because line 288 should fail. But a lender could freely change Oracle once the loan is outstanding, then a tampered Oracle could produce a very low `rate` in line 287 such that line 288 would pass, allowing the lender to seize the collateral, hurting the borrower.   https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L286-L288    ## Tools Used  Manual review  ## Recommended Mitigation Steps  Once a loan is agreed to, the oracle used should not change. I'd recommend adding a check in the `require` statement in line 205 - 211 that `params.oracle == cur.oracle`  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/30", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/29", "labels": ["G (Gas Optimization)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "The return value `success` of the get function of the INFTOracle interface is not checked", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/21", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-abranft-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/interfaces/INFTOracle.sol#L10-L10   # Vulnerability details  ## Impact ```     function get(address pair, uint256 tokenId) external returns (bool success, uint256 rate); ``` The get function of the INFTOracle interface returns two values, but the success value is not checked when used in the NFTPairWithOracle contract. When success is false, NFTOracle may return stale data.  ## Proof of Concept https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/interfaces/INFTOracle.sol#L10-L10 https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L287-L287 https://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L321-L321 ## Tools Used None ## Recommended Mitigation Steps ``` (bool success, uint256 rate) = loanParams.oracle.get(address(this), tokenId); require(success); ```  "}, {"title": "to/loan.borrower is unchecked in removeCollateral()/repay(), which can cause user's collateral NFT to be frozen", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/20", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "to/loan.borrower is unchecked in removeCollateral()/repay(), which can cause user's collateral NFT to be frozen"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/12", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-abranft-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/11", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/8", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/7", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/5", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-abranft-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/174", "labels": [], "target": "2022-04-mimo-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/165", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/162", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/157", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/153", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/152", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "ABDKMath64 performs multiplication on results of division", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/151", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-04-mimo-findings", "body": "ABDKMath64 performs multiplication on results of division"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/150", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "SuperVault's leverageSwap and emptyVaultOperation can become stuck", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/145", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-04-mimo-findings", "body": "SuperVault's leverageSwap and emptyVaultOperation can become stuck"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/141", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/140", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/139", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/138", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/137", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Users can use updateBoost function to claim unfairly large rewards from liquidity mining contracts for themselves at cost of other users.", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/136", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-04-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/PARMinerV2.sol#L159-L165 https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/GenericMinerV2.sol#L88-L94   # Vulnerability details  ## Impact Users aware of this vulnerability could effectively steal a portion of liquidity mining rewards from honest users.  Affected contracts are: `SupplyMinerV2`, ` DemandMinerV2`, ` PARMinerV2`   `VotingMinerV2` is less affected because locking veMIMO in `votingEscrow`  triggers a call to `releaseMIMO` of this miner contract (which in turn updates user's boost multiplier).   ## Proof of Concept Let's focus here on `SupplyMinerV2`. The exploits for other liquidity mining contracts are analogous.  ### Scenario 1:  Both Alice and Bob deposit 1 WETH to `coreVaults`  and borrow 100 PAR from `coreVaults`. They both have no locked veMIMO.   Now they wait for a month without interacting with the protocol. In the meantime, `SupplyMinerV2` accumulated 100 MIMO for rewards.  Alice locks huge amount of veMIMO in `votingEscrow`, so now her `boostMultiplier`  is 4.  Let's assume that Alice and Bob are the only users of the protocol. Because they borrowed the same amounts of PAR, they should have the same stakes for past month, so a fair reward for each of them (for this past month) should be 50 MIMO. If they simply repay their debts now, 50 MIMO is indeed what they get.  However if Alice calls `supplyMiner.updateBoost(alice)` before repaying her debt, she can claim 80 MIMO and leave only 20 MIMO for Bob. She can basically apply the multiplier 4 to her past stake.  ### Scenario 2:  Both Alice and Bob deposit 1 WETH to `coreVaults`  and borrow 100 PAR from `coreVaults`. Bob locks huge amount of veMIMO in `votingEscrow` for 4 years, so now his `boostMultiplier` is 4.   Alice and Bob wait for 4 years without interacting with the protocol.  `SupplyMinerV2` accumulated 1000 MIMO rewards.   Because of his locked veMIMO, Bob should be able to claim larger reward than Alice. Maybe not 4 times larger but definitely larger.  However, if Alice includes  a transaction with call `supplyMiner.updateBoost(bob)` before Bob's `vaultsCore.repay()` , then she can claim 500 MIMO. She can effectively set Bob's `boostMultiplier` for past 4 years to 1.  ## Tools Used Tested in Foundry  ## Recommended Mitigation Steps I have 2 ideas: 1. Remove `updateBoost` function. There shouldn't be a way to update boost multiplier without claiming rewards and updating `_userInfo.accAmountPerShare` .  So `releaseRewards`  should be sufficient. 2. A better, but also much more difficult solution, would be to redesign boost updates in such a way that distribution of rewards no longer depends on when and how often boost multiplier is updated. If the formula for boost multiplier stays the same, this approach might require calculating integrals of the multiplier as a function of time.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/129", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Non-standard ERC20 Tokens are Not Supported", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/127", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-04-mimo-findings", "body": "Non-standard ERC20 Tokens are Not Supported"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/124", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Fund loss or theft by attacker with creating a flash loan and setting SuperVault as receiver so executeOperation()  will be get called by lendingPool but with attackers specified params", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/123", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L76-L99   # Vulnerability details  ## Impact According to Aave documentation, when requesting flash-loan, it's possible to specify a `receiver`, so function `executeOperation()` of that `receiver` will be called by `lendingPool`. https://docs.aave.com/developers/v/2.0/guides/flash-loans In the `SuperVault` there is no check to prevent this attack so attacker can use this and perform  `griefing attack` and make miner contract lose all its funds. or he can create specifically crafted `params` so when `executeOperation()` is called by `lendingPool`, attacker could steal vault's user funds.   ## Proof of Concept To exploit this attacker will do this steps: 1. will call `Aave lendingPool` to get a flash-loan and specify `SuperVault` as `receiver` of flash-loan. and also create a specific `params` that invoke `Operation.REBALANCE` action to change user vault's collateral. 2. `lendingPool` will call `executeOperation()` of `SuperVault` with attacker specified data. 3. `executeOperation()` will check `msg.sender` and will process the function call which will cause some dummy exchanges that will cost user exchange fee and flash-loan fee. 4. attacker will repeat this attack until user losses all his funds. ```   function executeOperation(     address[] calldata assets,     uint256[] calldata amounts,     uint256[] calldata premiums,     address,     bytes calldata params   ) external returns (bool) {     require(msg.sender == address(lendingPool), \"SV002\");     (Operation operation, bytes memory operationParams) = abi.decode(params, (Operation, bytes));     IERC20 asset = IERC20(assets[0]);     uint256 flashloanRepayAmount = amounts[0] + premiums[0];     if (operation == Operation.LEVERAGE) {       leverageOperation(asset, flashloanRepayAmount, operationParams);     }     if (operation == Operation.REBALANCE) {       rebalanceOperation(asset, amounts[0], flashloanRepayAmount, operationParams);     }     if (operation == Operation.EMPTY) {       emptyVaultOperation(asset, amounts[0], flashloanRepayAmount, operationParams);     }      asset.approve(address(lendingPool), flashloanRepayAmount);     return true;   } ```  To steal user fund in `SupperVault` attacker needs more steps. in all these actions (`Operation.REBALANCE`, `Operation.LEVERAGE`, `Operation.EMPTY`) contract will call `aggregatorSwap()` with data that are controlled by attacker. ```   function aggregatorSwap(     uint256 dexIndex,     IERC20 token,     uint256 amount,     bytes memory dexTxData   ) internal {     (address proxy, address router) = _dexAP.dexMapping(dexIndex);     require(proxy != address(0) && router != address(0), \"SV201\");      token.approve(proxy, amount);     router.call(dexTxData);   } ```  Attacker can put special data in `dexTxData` that make contract to do an exchange with bad price. To do this, attacker will create a smart contract that will do this steps: 1. manipulate price in exchange with flash loan. 2. make a call to `executeOperation()` by `Aave flash-loan` with `receiver` and specific `params` so that `SuperVault` will make calls to manipulated exchange for exchanging. 3. do the reverse of #1 and pay the flash-loan and steal the user fund. The details are: Attacker can manipulate swapping pool price with flash-loan, then Attacker will create specific `params` and perform steps 1 to 4. so contract will try to exchange tokens and because of attacker price manipulation and specific `dexTxData`, contract will have bad deals. After that, attacker can reverse the process of swap manipulation and get his  flash-loan tokens and some of `SuperVault` funds and. then pay the flash-loan.  ## Tools Used VIM  ## Recommended Mitigation Steps There should be some state variable which stores the fact that `SuperVault` imitated flash-loan. When contract tries to start flash-loan, it sets the `isFlash` to `True` and `executeOperation()` only accepts calls if `isFlash` is `True`. and after the flash loan code will set `isFlash` to `False.`  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/117", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/114", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/113", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Return values are not checked for `transferFrom` and `transfer` calls to external tokens", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/110", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-mimo-findings", "body": "Return values are not checked for `transferFrom` and `transfer` calls to external tokens"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/109", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/108", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/106", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/105", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/102", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/101", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "in contract DemandMinerV2, function setFeeCollector() allows to set ZERO address for _feeCollector", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/98", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "in contract DemandMinerV2, function setFeeCollector() allows to set ZERO address for _feeCollector"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/97", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/95", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/89", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/88", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "User can call liquidate() and steal all collateral due to arbitrary router call", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/83", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-04-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/PARMinerV2.sol#L126 https://github.com/Uniswap/v2-periphery/blob/2efa12e0f2d808d9b49737927f0e416fafa5af68/contracts/UniswapV2Router02.sol#L299 https://github.com/Uniswap/solidity-lib/blob/c01640b0f0f1d8a85cba8de378cc48469fcfd9a6/contracts/libraries/TransferHelper.sol#L47-L50   # Vulnerability details  ## Impact A malicious user is able to steal all collateral of an unhealthy position in `PARMinerV2.sol`. The code for the `liquidate()` function is written so that the following steps are followed:  - User calls `PARMinerV2.liquidate()` - PARMinerV2 performs the liquidation with `_a.parallel().core().liquidatePartial()` - PARMinerV2 receives the liquidated collateral - An arbitrary router function is called to swap the collateral to PAR - Finally, `PARMinerV2.liquidate()` checks that PARMinerV2's PAR balance is higher than the balance at the beginning of the function call.  The exploit occurs with the arbitrary router call. The malicious user is able to supply the `dexTxnData` parameter which dictates the function call to the router. If the user supplied a function such as UniswapV2Router's `swapExactTokenForETH()`, then control flow will be given to the user, allowing them to perform the exploit.  Note: The Mimo developers have stated that the routers used by the protocol will be DEX Aggregators such as 1inch and Paraswap, but this submission will be referring to UniswapV2Router for simplicity. It can be assumed that the dex aggregators currently allow swapping tokens for ETH.  Continuing the exploit, once the attacker has gained control due to the ETH transfer, they are able to swap the ETH for PAR. Finally, they deposit the PAR with `PARMinerV2.deposit()`. This will cause the final check of `liquidate()` to pass because PARMinerV2's PAR balance will be larger than the start of the liquidation call.  The attacker is able to steal all collateral from every unhealthy position that they liquidate. In the most extreme case, the attacker is able to open their own risky positions with the hope that the position becomes unhealthy. They will borrow the PAR and then liquidate themselves to take back the collateral. Thus effectively stealing PAR.  ## Proof of Concept Steps for exploit:  - Attacker monitors unhealthy positions. Finds a position to liquidate. - Attacker calls `PARMinerV2.liquidate()` - Position liquidated. Collateral transferred back to `PARMinerV2` - In the `liquidate()` function, attacker supplies bytes for `UniswapV2Router.swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)`. For `to`, they supply the attacker contract. - `swapExactTokensForETH()` firstly swaps the collateral for ETH and then transfers the ETH to the user with `TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);` - `TransferHelper.safeTransferETH()` contains a call to the receiver via `(bool success, ) = to.call{value: value}(new bytes(0));` - Therefore, the attacker contract will indeed gain control of execution.  The attacker contract will then perform the following steps:  - Swap the received ETH to PAR. - Deposit the PAR in `PARMinerV2` - Withdraw the deposited PAR.  ## Tools Used Static review.  ## Recommended Mitigation Steps The arbitrary call to the router contracts is risky because of the various functions that they can contain. Perhaps a solution is to only allow certain calls such as swapping tokens to tokens, not ETH. This would require frequently updated knowledge of the router's functions, though would be beneficial for security.   Also, adding a check that the `_totalStake` variable has not increased during the liquidation call will mitigate the risk of the attacker depositing the PAR to increase the contract's balance. The attacker would have no option but to transfer the PAR to PARMinerV2 as is intended.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Missing validation could cause `liquidatePartial` to revert", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/79", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "Missing validation could cause `liquidatePartial` to revert"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/75", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/71", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/68", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "BalancerV2LPOracle.sol incorrectly values LP when oracle decimals don't match", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/66", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-04-mimo-findings", "body": "BalancerV2LPOracle.sol incorrectly values LP when oracle decimals don't match"}, {"title": "Remove pragma experimental ABIEncoderV2 line from v0.8 contracts", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/63", "labels": ["QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "Remove pragma experimental ABIEncoderV2 line from v0.8 contracts"}, {"title": "InceptionVaultsCore:Unsupported fee-on-transfer tokens", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/61", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-04-mimo-findings", "body": "InceptionVaultsCore:Unsupported fee-on-transfer tokens"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/59", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Decimal token underflow could produce loose of funds", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/55", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-04-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/oracles/GUniLPOracle.sol#L47 https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/oracles/GUniLPOracle.sol#L51   # Vulnerability details  ## Impact It is possible to produce underflows with specific tokens which can cause errors when calculating prices.  ## Proof of Concept The pragma is `pragma solidity 0.6.12;` therefore, integer overflows must be protected with safe math. But in the case of [GUniLPOracle](https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/oracles/GUniLPOracle.sol#L51), there is a decimal subtraction that could underflow if any token in the pool has more than 18 decimals. this could cause an error when calculating price values.  ## Recommended Mitigation Steps Ensure that tokens have less than 18 decimals.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/14", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/13", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Generic ReEntrancy in DemandMinerV2 deposit and withdraw", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/12", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-04-mimo-findings", "body": "Generic ReEntrancy in DemandMinerV2 deposit and withdraw"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/11", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Misleading variable usage", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/10", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "Misleading variable usage"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-04-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/2", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-04-mimo-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/176", "labels": [], "target": "2022-05-cudos-findings", "body": "Agreements & Disclosures"}, {"title": "Signature malleability for ecrecover", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/175", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "Signature malleability for ecrecover"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/172", "labels": ["bug", "invalid", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/169", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/166", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/164", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/156", "labels": ["bug", "duplicate", "disagree with severity", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/153", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/152", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/148", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/147", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/145", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Validators can cause transactions where they are not the one being paid the fees, to revert", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/143", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "Validators can cause transactions where they are not the one being paid the fees, to revert"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/141", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "The Gravity.sol should have pause/unpause functionality", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/139", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-05-cudos-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L175   # Vulnerability details  ## Impact  In case a hack is occuring or an exploit is discovered, the team (or validators in this case) should be able to pause functionality until the necessary changes are made to the system. Additionally, the gravity.sol contract should be manged by proxy so that upgrades can be made by the validators.  Because an attack would probably span a number of blocks, a method for pausing the contract would be able to interrupt any such attack if discovered.  To use a thorchain example again, the team behind thorchain noticed an attack was going to occur well before the system transferred funds to the hacker. However, they were not able to shut the system down fast enough. (According to the incidence report here: https://github.com/HalbornSecurity/PublicReports/blob/master/Incident%20Reports/Thorchain_Incident_Analysis_July_23_2021.pdf)   ## Proof of Concept  https://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L175  ## Tools Used  Code Review  ## Recommended Mitigation Steps  Pause functionality on the contract would have helped secure the funds quickly.   "}, {"title": "Access Control Misconfiguration allows whitelisted user to add users to whitelist", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "Access Control Misconfiguration allows whitelisted user to add users to whitelist"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/134", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/133", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/132", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/130", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/129", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Calls inside loops that may address DoS.", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/126", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-cudos-findings", "body": "Calls inside loops that may address DoS."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/125", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/124", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Missing check in the updateValset function", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/123", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "Missing check in the updateValset function"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/117", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/116", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/113", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/110", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/109", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/105", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/96", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/93", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/92", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/89", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/84", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/81", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/80", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/76", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "`updateValset` doesn't set a timeout, leading to DoS of valid operations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "`updateValset` doesn't set a timeout, leading to DoS of valid operations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/66", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/59", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Non-Cudos Erc20 funds sent through sendToCosmos() will be lost.", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/58", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-05-cudos-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L595-L609   # Vulnerability details  ## Impact  No checks for non-Cudos tokens mean that non-Cudos ERC20 tokens will be lost to the contract, with the user not having any chance of retrieving them.  However, the admin can retrieve them through withdrawERC20.  Impact is that users lose their funds, but admins gain them.  The mistakes could be mitigated on the contract, by checking against a list of supported tokens, so that users don't get the bad experience of losing funds and CUDOS doesn't have to manually refund users  ## Proof of Concept  User sends 100 ETH through sendToCosmos, hoping to retrieve 100 synthetic ETH on Cudos chain but finds that funds never appear.   ```   function sendToCosmos(   address _tokenContract,   bytes32 _destination,   uint256 _amount  ) public nonReentrant  {   IERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);   state_lastEventNonce = state_lastEventNonce.add(1);   emit SendToCosmosEvent(    _tokenContract,    msg.sender,    _destination,    _amount,    state_lastEventNonce   );  }  ```  https://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L595-L609  Admin can retrieve these funds should they wish, but user never gets them back because the contract does not check whether the token is supported.  ```   function withdrawERC20(   address _tokenAddress)    external {   require(cudosAccessControls.hasAdminRole(msg.sender), \"Recipient is not an admin\");   uint256 totalBalance = IERC20(_tokenAddress).balanceOf(address(this));   IERC20(_tokenAddress).safeTransfer(msg.sender , totalBalance);  }   ```     https://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L632-L638  ## Tools Used Logic and discussion with @germanimp  ## Recommended Mitigation Steps  Add checks in sendToCosmos to check the incoming tokenAddress against a supported token list, so that user funds don't get lost and admin don't need to bother refunding.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/57", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/55", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/41", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/40", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/39", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/38", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "verifySig function does not check if ecrecover return value is 0", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/35", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "verifySig function does not check if ecrecover return value is 0"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/31", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/30", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/29", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/27", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/26", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/25", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/23", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Signature bypass", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/20", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "Signature bypass"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/18", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/17", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Admin drains all ERC based user funds using withdrawERC20()", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/14", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-cudos-findings", "body": "Admin drains all ERC based user funds using withdrawERC20()"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/12", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-cudos-findings", "body": "Gas Optimizations"}, {"title": "Protocol doesn't handle fee on transfer tokens", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/3", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-cudos-findings", "body": "Protocol doesn't handle fee on transfer tokens"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/1", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-cudos-findings", "body": "QA Report"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/289", "labels": [], "target": "2022-05-factorydao-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/285", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/281", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/280", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/279", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/277", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/276", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/275", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/273", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/266", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/265", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/264", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/258", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/251", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/250", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/248", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/237", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/236", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/234", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/233", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/226", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/225", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/222", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/221", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/220", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/219", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/218", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/216", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/215", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/214", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/209", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/208", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/203", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/202", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/199", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/198", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/193", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/190", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/187", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/186", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/183", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/182", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/177", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/176", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "PermissionlessBasicPoolFactory's withdraw can become frozen on zero reward token transfers", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/175", "labels": ["bug", "2 (Med Risk)"], "target": "2022-05-factorydao-findings", "body": "PermissionlessBasicPoolFactory's withdraw can become frozen on zero reward token transfers"}, {"title": "getRewards() in PermissionlessBasicPoolFactory calculate wrong reward amount for receiptId==0", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/161", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L156-L173   # Vulnerability details  ## Impact In `getRewards()` of `PermissionlessBasicPoolFactory` contract, there is a check to see that receipt is initialized receipt, but the condition used by code will be true for `receiptId` equal `0`. because `receiptId==0` is not initilized for any pool and the value of `pools[poolId].receipts[0].id` will be `0` so the condition `receipt.id == receiptId` will be passed on `getRewards()`. Any function that depends on `getRewards()` to check that if `receptId` has deposited fund, can be fooled. right now this bug has no direct money loss, but this function doesn't work as it suppose too.  ## Proof of Concept This is `getRewards()` code: ```     function getRewards(uint poolId, uint receiptId) public view returns (uint[] memory) {         Pool storage pool = pools[poolId];         Receipt memory receipt = pool.receipts[receiptId];         require(pool.id == poolId, 'Uninitialized pool');         require(receipt.id == receiptId, 'Uninitialized receipt');         uint nowish = block.timestamp;         if (nowish > pool.endTime) {             nowish = pool.endTime;         }          uint secondsDiff = nowish - receipt.timeDeposited;         uint[] memory rewardsLocal = new uint[](pool.rewardsWeiPerSecondPerToken.length);         for (uint i = 0; i < pool.rewardsWeiPerSecondPerToken.length; i++) {             rewardsLocal[i] = (secondsDiff * pool.rewardsWeiPerSecondPerToken[i] * receipt.amountDepositedWei) / 1e18;         }         return rewardsLocal;     } ``` if the value of `receiptId` set as `0` then even so `receiptId==0` is not initialized but this line: ```         require(receipt.id == receiptId, 'Uninitialized receipt'); ``` will be passed, because, receipts start from number `1` and `pool.receipts[0]` will have zero value for his fields. This is the code in `deposit()` which is responsible for creating receipt objects. ```         pool.totalDepositsWei += amount;         pool.numReceipts++;          Receipt storage receipt = pool.receipts[pool.numReceipts];         receipt.id = pool.numReceipts;         receipt.amountDepositedWei = amount;         receipt.timeDeposited = block.timestamp;         receipt.owner = msg.sender; ``` as you can see `pool.numReceipts++` and `pool.receipts[pool.numReceipts]` increase `numReceipts` and use it as receipts index. so receipnts will start from index `1`. This bug will cause that `getRewards(poolId, 0)` return `0` instead of reverting. any function that depend on reverting of `getRewards()` for uninitialized receipts can be excploited by sending `receipntId` as `0`. this function can be inside this contract or other contracts. (`withdraw` use `getRewards` and we will see that we can create `WithdrawalOccurred` event for `receiptsId` as 0)  ## Tools Used VIM  ## Recommended Mitigation Steps If you want to start from index `1` then add this line too to ensure `receipntId` is not `0` too: ``` require(receiptId > 0, 'Uninitialized receipt'); ``` or we could check for uninitialized receipnts with `owner` field as non-zero.   "}, {"title": "`SpeedBumpPriceGate.sol#addGate()` Lack of input validation may casue div by 0 error", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/153", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "`SpeedBumpPriceGate.sol#addGate()` Lack of input validation may casue div by 0 error"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Verification should be leafed based and not address based", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/148", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleVesting.sol#L115 https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleDropFactory.sol#L92   # Vulnerability details  ## Impact Contracts should clarify what is the intended behavior for Merkle trees with multiple leafs with the same address.   ## Recommended Mitigation Steps  There is 2 possible behaviors:   - either - what is currently done - you only authorize one claim per address, in which case the multiple leaf are here to give users a choice - for example you could use `MerkleVesting` to give users the choice between 2 sets of vesting parameters and have something close to `MerkleResistor`.  - either you use a mapping based on the leaf to store if a leaf has been claimed or not.    This behavior should be clarified in the comments at least, and made clear to merkle tree builders.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Inconsistent solidity versions", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/133", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "Inconsistent solidity versions"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/132", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/131", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "MerkleVesting withdrawal does not verify that tokens were transferred successfully", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/130", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "MerkleVesting withdrawal does not verify that tokens were transferred successfully"}, {"title": "Merkle-tree-related contracts vulnerable to cross-chain-replay attacks", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/126", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "Merkle-tree-related contracts vulnerable to cross-chain-replay attacks"}, {"title": "Pool owners can prevent withdrawals of specific receipts", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/125", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L230-L234   # Vulnerability details  ## Impact Pool owners can prevent withdrawals of specific receipts without impacting any other functionality  ## Proof of Concept Reciepts are non-transferrable, so a malicious owner can monitor the blockchain for receipt creations, and inspect which account holds the receiptId. Next, by changing settings in a custom reward token that reverts for specific addresses, the owner can prevent that specific receipt owner from withdrawing: ```solidity File: contracts/PermissionlessBasicPoolFactory.sol   #1  230               success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount); 231           } 232    233           success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei); 234           require(success, 'Token transfer failed'); ``` https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L230-L234  While the sponsor mentions that malicious tokens make the pool malicious, this particular issue has a straight forward fix outlined below in the mitigation section  ## Tools Used Code inspection  ## Recommended Mitigation Steps Rather than reverting the whole withdrawal if only one transfer fails, return a boolean of whether all withdrawals were successful, and allow `withdraw()` to be called multiple times, keeping track of what has been transferred and what hasn't   "}, {"title": "Pool owners can prevent the payment of taxes", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/124", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L258-L272   # Vulnerability details  ## Impact Pool owners can prevent taxes from being paid without impacting any other functionality  ## Proof of Concept By adding a custom reward token that always reverts for transfers to `globalBenericiary`, the owner can prevent taxes from being paid: ```solidity File: contracts/PermissionlessBasicPoolFactory.sol   #1  258       /// @notice Withdraw taxes from pool 259       /// @dev Anyone may call this, it just moves the taxes from this contract to the globalBeneficiary 260       /// @param poolId which pool are we talking about? 261       function withdrawTaxes(uint poolId) external { 262           Pool storage pool = pools[poolId]; 263           require(pool.id == poolId, 'Uninitialized pool'); 264    265           bool success = true; 266           for (uint i = 0; i < pool.rewardTokens.length; i++) { 267               uint tax = taxes[poolId][i]; 268               taxes[poolId][i] = 0; 269               success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax); 270           } 271           require(success, 'Token transfer failed'); 272       } ``` https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L258-L272  While the sponsor mentions that malicious tokens make the pool malicious, this particular issue has a simple fix outlined below in the mitigation section  ## Tools Used Code inspection  ## Recommended Mitigation Steps Force taxes to be paid during `withdraw()`   "}, {"title": "Unbounded loop in `withdraw()` may cause rewards to be locked in the contract", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/122", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L224-L231   # Vulnerability details  ## Impact The `withdraw()` has an unbounded loop with external calls. If the gas costs of functions change between when deposits are made and when rewards are withdrawn, or if the gas cost of the deposit (`transferFrom()`) is less than the gas cost of the withdrawal (`transfer()`), then the `withdraw()` function may revert due to exceeding the block size gas limit.  ## Proof of Concept `transfer()` is an external call, and `rewards.length` has no maximum size: ```solidity File: contracts/PermissionlessBasicPoolFactory.sol   #1  224           for (uint i = 0; i < rewards.length; i++) { 225               pool.rewardsWeiClaimed[i] += rewards[i]; 226               pool.rewardFunding[i] -= rewards[i]; 227               uint tax = (pool.taxPerCapita * rewards[i]) / 1000; 228               uint transferAmount = rewards[i] - tax; 229               taxes[poolId][i] += tax; 230               success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount); 231           } ``` https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L224-L231  ## Tools Used Code inspection  ## Recommended Mitigation Steps Allow the specification of an offset and length to the `withdraw()` function, so that withdrawals can be broken up into smaller batches if required   "}, {"title": "Rebasing tokens go to the pool owner, or remain locked in the various contracts", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/121", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "Rebasing tokens go to the pool owner, or remain locked in the various contracts"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/115", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/114", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/111", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "MerkleResistor: zero coinsPerSecond will brick tranche initialization and withdrawals", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/107", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleResistor.sol#L259 https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleResistor.sol#L264   # Vulnerability details  ## Details & Impact  It is possible for `coinsPerSecond` to be zero. In these cases, the `startTime` calculation   ```solidity uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond); ```  will revert from division by zero, preventing initialization, and by extension, withdrawals of vested tokens.  ## Proof of Concept  We assume vesting time chosen is the maximum (`tree.maxEndTime`) so that `totalCoins = maxTotalPayments`. These examples showcase some possibilities for which the calculated `coinsPerSecond` can be zero.  ### Example 1: High upfront percentage  - `pctUpFront = 99` (99% up front) - `totalCoins = 10_000e6` (10k USDC) - `vestingTime = 1 year`  ```solidity uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100); // 10_000e6 * (100 - 99) / (365 * 86400 * 100) // = 0 ```  ### Example 2: Small reward amount / token decimals  - `pctUpFront = 0` - `totalCoins = 100_000e2` (100k EURS) - `vestingTime = 180 days`  ```solidity uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100); // 100_000e2 * 100 / (180 * 86400 * 100) // = 0 ```  ## Recommended Mitigation Steps  Scale up `coinsPerSecond` by `PRECISION`, then scale down when executing withdrawals. While it isn\u2019t foolproof, the possibility of `coinsPerSecond` being zero is reduced significantly.  ```solidity // L264 uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) * PRECISION / (vestingTime * 100);  // L184 currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond / PRECISION; ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/97", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/95", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/94", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/90", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "A transfer that is not validated its result.", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/87", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "A transfer that is not validated its result."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/81", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "wrong out of range check", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/79", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "wrong out of range check"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/77", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/76", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/71", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/61", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "`MerkleDropFactory.depositTokens()`  does not require the tree to exist", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/59", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "`MerkleDropFactory.depositTokens()`  does not require the tree to exist"}, {"title": "Merkle leaves are the same length as the parents that are hashed", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/58", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-factorydao-findings", "body": "Merkle leaves are the same length as the parents that are hashed"}, {"title": "DoS: Blacklisted user may prevent `withdrawExcessRewards()`", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/57", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L242-L256 https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L224-L234   # Vulnerability details  ## Impact  If one user becomes blacklisted or otherwise cannot be transferred funds in any of the rewards tokens or the deposit token then they will not be able to call `withdraw()` for that token.  The impact of one user not being able to call `withdraw()` is that the owner will now never be able to call `withdrawExcessRewards()` and therefore lock not only the users rewards and deposit but also and excess rewards attributed to the owner.  Thus, one malicious user may deliberately get them selves blacklisted to prevent the owner from claiming the final rewards. Since the attacker may do this with negligible balance in their `deposit()` this attack is very cheap.  ## Proof of Concept  It is possible for `IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);` to fail for numerous reasons. Such as if a user has been blacklisted (in certain ERC20 tokens) or if a token is paused or there is an attack and the token is stuck.  This will prevent `withdraw()` from being called.  ```solidity         for (uint i = 0; i < rewards.length; i++) {             pool.rewardsWeiClaimed[i] += rewards[i];             pool.rewardFunding[i] -= rewards[i];             uint tax = (pool.taxPerCapita * rewards[i]) / 1000;             uint transferAmount = rewards[i] - tax;             taxes[poolId][i] += tax;             success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);         }          success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei);         require(success, 'Token transfer failed'); ```  Since line 245 of `withdrawExcessRewards()` requires that `require(pool.totalDepositsWei == 0, 'Cannot withdraw until all deposits are withdrawn');`, if one single user is unable to withdraw then it is impossible for the owner to claim the excess rewards and they are forever stuck in the contract.  ## Recommended Mitigation Steps  Consider allowing `withdrawExcessRewards()` to be called after a set period of time after the pool end if most users have withdrawn or some similar criteria.  "}, {"title": "Centralisation Risk: Owner may abuse the tax rate to claim 99.9% of pools", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/56", "labels": ["bug", "2 (Med Risk)"], "target": "2022-05-factorydao-findings", "body": "Centralisation Risk: Owner may abuse the tax rate to claim 99.9% of pools"}, {"title": "DoS: Attacker may significantly increase the cost of `withdrawExcessRewards()` by creating a significant number of excess receipts", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/54", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L245   # Vulnerability details  ## Impact  An attacker may cause a DoS attack on `withdrawExcessRewards()` by creating a excessive number of `receipts` with minimal value. Each of these receipts will need to be withdrawn before the owner can call `withdrawExcessRewards()`.   The impact is the owner would have to pay an unbounded amount of gas to `withdraw()` all the accounts and receive their excess funds.  ## Proof of Concept  `withdrawExcessRewards()` has the requirement that `totalDepositsWei` for the pool is zero before the owner may call this function as seen on line 245.  ```solidity         require(pool.totalDepositsWei == 0, 'Cannot withdraw until all deposits are withdrawn'); ```  `pool.totalDepositsWei` is added to each time a user calls `deposit()`. It is increased by the amount the user deposits. There are no restrictions on the amount that may be deposited as a result a user may add 1 wei (or the smallest unit on any currency) which has negligible value.  The owner can force withdraw these accounts by calling `withdraw()` so long as `block.timestamp > pool.endTime`. They would be required to do this for each account that was created.  This could be a significant amount of gas costs, especially if the gas price has increased since the attacker originally made the deposits.  ## Recommended Mitigation Steps  Consider adding a minimum deposit amount for each pool that can be configured by the pool owner.  Alternatively, allow the owner to call `withdrawExcessRewards()` given some other criteria such as  - A fix period of time (e.g. 1 month) has passed since the end of the auction; and - 90% of the deposits have been withdrawn These criteria can be customised as desired by the design team.  "}, {"title": "Owner of a pool may prevent any taxes being withdrawn", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/52", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L261-L272   # Vulnerability details  ## Impact  It is possible for the owner of a pool to prevent any taxes being withdrawn by the `globalBeneficiary`. The impact is the taxed tokens will be permanently locked in the contract and `withdrawTaxes()` will not be callable for that `poolId`.   ## Proof of Concept  The attack works by setting one of the `rewardTokenAddresses` to a malicious contract during `addPool()`. The malicious contract is set such that it will revert on the call `pool.rewardTokens[i]).transfer(globalBeneficiary, tax)` if an only if the `to` address is `globalBeneficiary.  The result of this attack is that if one reward transfer fails then entire `withdrawTaxes()` transaction will revert and no taxes can be claimed. However, the pool will function correctly for all other users.  ```solidity     function withdrawTaxes(uint poolId) external {         Pool storage pool = pools[poolId];         require(pool.id == poolId, 'Uninitialized pool');           bool success = true;         for (uint i = 0; i < pool.rewardTokens.length; i++) {             uint tax = taxes[poolId][i];             taxes[poolId][i] = 0;             success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);         }         require(success, 'Token transfer failed');     } ```  ## Recommended Mitigation Steps  There are a few mitigations to this issue.  The first is for the `withdrawTaxes()` function to take both `poolId` and `rewardIndex` as a parameters to allowing the tax beneficiary to only withdraw from certain reward tokens in the pool. This would allow the beneficiary to withdraw from all reward tokens except malicious ones.  The second mitigation is to implement a `try-catch` condition around the withdrawal of reward tokens. In the catch statement re-instate the `taxes[poolId][i] = tax` if the transfer fails. Alternatively just skip the reward tokens if the transfer fails though this would be undesirable if a token is paused for some reason.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/50", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "SpeedBumpPriceGate: Excess ether did not return to the user", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/48", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/SpeedBumpPriceGate.sol#L65-L82   # Vulnerability details  ## Impact The passThruGate function of the SpeedBumpPriceGate contract is used to charge NFT purchase fees. Since the price of NFT will change due to the previous purchase, users are likely to send more ether than the actual purchase price in order to ensure that they can purchase NFT. However, the passThruGate function did not return the excess ether, which would cause asset loss to the user. Consider the following scenario:  1. An NFT is sold for 0.15 eth 2. User A believes that the value of the NFT is acceptable within 0.3 eth, considering that someone may buy the NFT before him, so user A transfers 0.3 eth to buy the NFT 3. When user A's transaction is executed, the price of the NFT is 0.15 eth, but since the contract does not return excess eth, user A actually spends 0.3 eth. ## Proof of Concept https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/SpeedBumpPriceGate.sol#L65-L82 ## Tools Used None ## Recommended Mitigation Steps ``` -   function passThruGate(uint index, address) override external payable { +  function passThruGate(uint index, address payer) override external payable {         uint price = getCost(index);         require(msg.value >= price, 'Please send more ETH');          // bump up the price         Gate storage gate = gates[index];         // multiply by the price increase factor         gate.lastPrice = (price * gate.priceIncreaseFactor) / gate.priceIncreaseDenominator;         // move up the reference         gate.lastPurchaseBlock = block.number;          // pass thru the ether         if (msg.value > 0) {             // use .call so we can send to contracts, for example gnosis safe, re-entrance is not a threat here -           (bool sent, bytes memory data) = gate.beneficiary.call{value: msg.value}(\"\"); +          (bool sent, bytes memory data) = gate.beneficiary.call{value: price}(\"\");             require(sent, 'ETH transfer failed');         } +      if (msg.value - price > 0){  +         (bool sent, bytes memory data) = payer.call{value: msg.value - price}(\"\"); +          require(sent, 'ETH transfer failed');}     } ```  "}, {"title": "ERC20 tokens with different decimals than 18 leads to loss of funds", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/47", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L169 https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L282   # Vulnerability details  ## Impact Contract `PermissionlessBasicPoolFactory` calculates rewards by using hardcoded value of decimals `18` (1e18) for ERC20 tokens. This leads to wrong rewards calculations and effectively loss of funds for all pools that will be using ERC20 tokens with different decimals than `18`. Example of such a token is USDC that has 6 decimals only.  ## Proof of Concept * https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L169 * https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L282  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add support for different number of decimals than `18` by dynamically checking `decimals()` for the tokens that are part of the rewards calculations. Alternatively if such a support is not needed, new require statements should be added to `addPool` that will be checking that the number of decimals for all ERC20 tokens is `18`.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/44", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/43", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "amount requires to be updated to contract balance increase (1)", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/34", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L137-L149   # Vulnerability details  ## Impact Every time transferFrom or transfer function in ERC20 standard is called there is a possibility that underlying smart contract did not transfer the exact amount entered. It is required to find out contract balance increase/decrease after the transfer. This pattern also prevents from re-entrancy attack vector.  ## Proof of Concept  ## Tools Used  ## Recommended Mitigation Steps Recommended code: ```solidity function fundPool(uint poolId) internal {     Pool storage pool = pools[poolId];     bool success = true;     uint amount;     for (uint i = 0; i < pool.rewardFunding.length; i++) {         amount = getMaximumRewards(poolId, i);         // transfer the tokens from pool-creator to this contract           uint256 balanceBefore = IERC20(pool.rewardTokens[i]).balanceOf(address(this)); // remembering asset balance before the transfer         IERC20(pool.rewardTokens[i]).safeTransferFrom(msg.sender, address(this), amount);         uint256 newAmount = IERC20(pool.rewardTokens[i]).balanceOf(address(this)) - balanceBefore; // updating actual amount to the contract balance increase         success = success && newAmount == amount; // making sure amounts match          // bookkeeping to make sure pools don't share tokens         pool.rewardFunding[i] += amount;     }     require(success, 'Token deposits failed'); } ```  "}, {"title": "safeTransferFrom is recommended instead of transfer (1)", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/22", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L144   # Vulnerability details  ## Impact  ERC20 standard allows transferF function of some contracts to return bool or return nothing. Some tokens such as USDT return nothing. This could lead to funds stuck in the contract without possibility to retrieve them. Using safeTransferFrom of SafeERC20.sol is recommended instead.  ## Proof of Concept  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/token/ERC20/utils/SafeERC20.sol  ## Tools Used   ## Recommended Mitigation Steps  "}, {"title": "Malicious token reward could disable withdrawals", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/20", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-factorydao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L230   # Vulnerability details  ## Impact `PermissionlessBasicPoolFactory.withdraw` requires each reward token transfers to succeed before withdrawing the deposit. If one of the reward token is a malicious/pausable contract that reverts on transfer, unaware users that deposited into this pool will have their funds stuck in the contract.   ## Recommended Mitigation Steps Add an `emergencyWithdraw` function that ignores failed reward token transfers.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/19", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/18", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-factorydao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/10", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/7", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-factorydao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/122", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/121", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/118", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/117", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "`call()` should be used instead of `transfer()` on an `address payable`", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/116", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-bunker-findings", "body": "`call()` should be used instead of `transfer()` on an `address payable`"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "`UniswapV2PriceOracle.sol` Requires Constant Upkeep Otherwise It May Lead To Liquidation", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/111", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-bunker-findings", "body": "`UniswapV2PriceOracle.sol` Requires Constant Upkeep Otherwise It May Lead To Liquidation"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/108", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "`COMP` Distributions Can Be Manipulated And Duplicated Across Any Number Of Accounts", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/105", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-05-bunker-findings", "body": "`COMP` Distributions Can Be Manipulated And Duplicated Across Any Number Of Accounts"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/104", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/99", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/94", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "CNft.sol - revert inside safeTransferFrom will break composability & standard behaviour", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/93", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-05-bunker-findings", "body": "# Lines of code  https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CNft.sol#L204   # Vulnerability details  The function safeTransferFrom is a standard interface in ERC1155, and its expected to succeed if all the parametes are valid, and revert on error, which is not the case here so its a deviation.  Refer to the EIP-1155 safeTransferFrom rules: > MUST revert if _to is the zero address. > MUST revert if balance of holder for token _id is lower than the _value sent to the recipient. > MUST revert on any other error.  There is no loss of assets, but the assets or tokens and CNft contract can be unusable by other protocols, and likelihood & impact of this issue is high.  ## Impact If other protocols want to integrate CNft, then in that case just for CNft Contract / tokens, they have to take exception and use safeBatchTransferFrom, instead of safeTransferFrom. If they dont take care of this exception, then their protocol functions will fail while using CNft, even if valid values are given.  ## Proof of Concept Contract : CNft.sol  Function : safeTransferFrom  > Line 204   revert(\"CNFT: Use safeBatchTransferFrom instead\");  ## Recommended Mitigation Steps Instead of revert, call function safeBatchTransferFrom with 1 item in the array, e.g., > safeBatchTransferFrom(from, to, [id], [amount], data)   "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/89", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/88", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Usage of `transferFrom` leads to irreversible loss of user funds.", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/84", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-bunker-findings", "body": "Usage of `transferFrom` leads to irreversible loss of user funds."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/83", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/82", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "`Comptroller#_initializeNftCollateral` Collateral Factor for new market may be larger than `collateralFactorMaxMantissa`, which can lead to bad debt", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/79", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-bunker-findings", "body": "# Lines of code  https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L1337-L1359   # Vulnerability details  https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L1337-L1359  ```solidity function _initializeNftCollateral(CNftInterface cNft, NftPriceOracle _nftOracle, uint256 _collateralFactorMantissa) external returns (uint) {     require(address(nftMarket) == address(0), \"nft collateral already initialized\");     require(address(cNft) != address(0), \"cannot initialize nft market to the 0 address\");      if (msg.sender != admin) {         return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);     }      if (markets[address(cNft)].isListed) {         return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);     }      cNft.isCNft(); // Sanity check to make sure its really a cNFT.      nftMarket = cNft;     nftOracle = _nftOracle;      // Note that isComped is not in active use anymore     markets[address(cNft)] = Market({isListed: true, isComped: false, collateralFactorMantissa: _collateralFactorMantissa});      // We do not support borrowing NFTs.     borrowGuardianPaused[address(cNft)] = false; } ```  https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L80-L81  ```solidity // No collateralFactorMantissa may exceed this value uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9 ```   There is a `collateralFactorMaxMantissa` which limits the collateral factor to be always lower than 0.9.  Per the comment:  > No collateralFactorMantissa may exceed this value  However, in `_initializeNftCollateral()`, the `_collateralFactorMantissa` is set without any check, which means it can be set to a value > 0.9 or even > 1.  As a result, the borrowers may deliberately choose not to repay as their collateral may not be worth the debt in the first place. This can accumulate bad debt in the whole system.  ### Recommendation  Change to:  ```solidity // Check collateral factor <= 0.9 Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa}); if (lessThanExp(highLimit, _collateralFactorMantissa)) {     return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION); }  markets[address(cNft)] = Market({isListed: true, isComped: false, collateralFactorMantissa: _collateralFactorMantissa}); ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/77", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/73", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/70", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/68", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/67", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/65", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/64", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/63", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/61", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/57", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/56", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Lack of Storage Gap for Upgradeable Contracts", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-bunker-findings", "body": "# Lines of code  https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/ERC1155Enumerable.sol#L70-L71 https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CNft.sol#L282-L283   # Vulnerability details  ## Impact  The code base contains several upgradeable contracts that inherit other upgradeable contracts, including `ERC1155Enumerable.sol` and `CNFT.sol`. These contracts currently do not contain any storage gap.  For upgradeable contracts, there must be storage gap to \"allow developers to freely add new state variables in the future without compromising the storage compatibility with existing deployments\" (quote OpenZeppelin). Otherwise it may be very difficult to write new implementation code. Without storage gap, the variable in child contract might be overwritten by the upgraded base contract if new variables are added to the base contract. This could have unintended and very serious consequences to the child contracts, potentially causing loss of user fund or cause the contract to malfunction completely.   Refer to the bottom part of this article: https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable   ## Proof of Concept  All OpenZeppelin upgradeable contract templates contain storage gap, including `ReentrancyGuardUpgradeable`, `OwnableUpgradeable` and `ERC1155Upgradeable` that are used in this project. Refer to the bottom of the code in the links below:   https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/security/ReentrancyGuardUpgradeable.sol  https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol  https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC1155/ERC1155Upgradeable.sol  The storage gap is essential for upgradeable contract because \"It allows us to freely add new state variables in the future without compromising the storage compatibility with existing deployments\". Refer to the bottom part of this article:   https://docs.openzeppelin.com/contracts/3.x/upgradeable  Note that it isn't enough to simply have the OpenZeppelin base contracts contain storage gaps. In this project, the `CNFt` contract inherits the `ERC1155Enumerable` contract, which inherits `ERC1155Upgradeable`. We know the `ERC1155Upgradeable` contract contains a storage gap, so that contract can add additional variables without affecting its child contracts. However, `ERC1155Enumerable` currently does not contain a storage gap, and if in a future upgrade, a new variable is used in the `ERC1155Enumerable` contract, the storage slot of that new variable would overlap with the existing storage slots that are used by `CNFt` and overwrites it, causing unintended and potentially serious consequences including a complete malfunction of the `CNFt` contract. Refer to the bottom of this link for an example and explanation:   https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable  ## Tools Used  Manual review  ## Recommended Mitigation Steps  Recommend adding appropriate storage gap at the end of upgradeable contracts such as the below. Please reference OpenZeppelin upgradeable contract templates.   ```solidity   uint256[50] private __gap; ```  "}, {"title": "ERC20 APPROVE FRONT-RUNNING ATTACK", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/50", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-bunker-findings", "body": "ERC20 APPROVE FRONT-RUNNING ATTACK"}, {"title": "Inherited shadowed variable used ", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/42", "labels": ["QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "Inherited shadowed variable used "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/37", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/35", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/34", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/31", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/29", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/28", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/27", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/26", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/18", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/17", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/5", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/4", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-bunker-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/3", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-bunker-findings", "body": "Gas Optimizations"}, {"title": "Chainlink pricer is using a deprecated API", "html_url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/1", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-bunker-findings", "body": "Chainlink pricer is using a deprecated API"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/281", "labels": [], "target": "2022-05-runes-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/280", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "`mintlistSummon` can begin without `finalPrice` being reassigned", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/279", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "`mintlistSummon` can begin without `finalPrice` being reassigned"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/278", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/277", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/276", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/263", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/262", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/260", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Pause Mechanism Does Not Allow Anyone to Pause The Contract if Certain Invariants Are Satisfied", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/258", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-05-runes-findings", "body": "Pause Mechanism Does Not Allow Anyone to Pause The Contract if Certain Invariants Are Satisfied"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/257", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Use of `.send()` May Revert if The Recipient's Fallback Function Consumes More Than 2300 Gas", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/254", "labels": ["bug", "2 (Med Risk)"], "target": "2022-05-runes-findings", "body": "Use of `.send()` May Revert if The Recipient's Fallback Function Consumes More Than 2300 Gas"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/253", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/249", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/248", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/247", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/245", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/243", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/242", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/240", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/237", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/235", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/234", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/233", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/229", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/225", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/222", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/220", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Refunds could be stuck for users", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "Refunds could be stuck for users"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/216", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/214", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/209", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/207", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/205", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/204", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/203", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/202", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/198", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/189", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Contract may not have enough fund to cover refund", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/187", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619   # Vulnerability details  ## Impact Owner of the contract can call `withdrawAll` before the refund process is done to send all ETH to the vault. Since there are no payable receive function in `ForgottenRunesWarriorsMinter`, the owner won't be able to replenish the contract for the refund process.  ## Proof of Concept https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619  ```solidity     function withdrawAll() public payable onlyOwner {         require(address(vault) != address(0), 'no vault');         require(payable(vault).send(address(this).balance));     } ```  ## Recommended Mitigation Steps Only allow owner to call `withdrawAll` after refund period  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/181", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/180", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/179", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/177", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/175", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/173", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/171", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/169", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/161", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/160", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/159", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/158", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/157", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/156", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/155", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/153", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/152", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/150", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/146", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/145", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/144", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/143", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/142", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/141", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/138", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/137", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/136", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/134", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/119", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/118", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/117", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/116", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/115", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/114", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/113", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/110", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/108", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/107", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/106", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/105", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "The owner can mint all of the NFTs.", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/104", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-05-runes-findings", "body": "The owner can mint all of the NFTs."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/102", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/94", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/92", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Mintlist phase is not limited to 24 hours", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-runes-findings", "body": "Mintlist phase is not limited to 24 hours"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/83", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/82", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/81", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Refunded WETH funds can be lost for customized minter contract", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/77", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-05-runes-findings", "body": "Refunded WETH funds can be lost for customized minter contract"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/76", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/75", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/73", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/71", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "IERC20.transfer does not support all ERC20 token", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/70", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176 https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L627-L630   # Vulnerability details  Token like [USDT](https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#contracts) known for using non-standard ERC20. ([Missing return boolean on transfer](https://forum.openzeppelin.com/t/can-not-call-the-function-approve-of-the-usdt-contract/2130/4)).  Contract function [forwardERC20](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176) will always revert when try to transfer this kind of tokens.  ## Impact  Cannot withdraw some special ERC20 token through contract call. Unexpected contract functionality = Medium severity  ## Migration  Use [SafeTransferLib.safeTransfer](https://github.com/Rari-Capital/solmate/blob/4197b521ef3eb81f675d35e64b7b597b24d33500/src/utils/SafeTransferLib.sol#L65-L94) instead of IERC20 transfer. This accepts ERC20 token with no boolean return like USDT.   "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/69", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/64", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/62", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/60", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/55", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/54", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/52", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/51", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/50", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/47", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/45", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-05-runes-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/44", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/42", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-05-runes-findings", "body": "QA Report"}, {"title": "Critical variables shouldn't be changed after they are set", "html_url": "https://github.com/code-423n4/2022-05-runes-findings/issues/38", "labels": ["bug", "2 (Med Risk)"], "target": "2022-05-runes-findings", "body": "Critical variables shouldn't be changed after they are set"}]