[{"title": "Agreement & Disclosures", "html_url": "https://github.com/code-423n4/2022-06-nibbl-findings/issues/1", "labels": [], "target": "2022-06-nibbl-findings", "body": "Agreement & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/157", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/156", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/153", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/152", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/151", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/150", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Access control modifier can be bypassed", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/147", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Access control modifier can be bypassed"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/145", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/144", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/141", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/135", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Malicious Governance can set malicious `bribesProcessor` to steal rewards that are not protected", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/134", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Malicious Governance can set malicious `bribesProcessor` to steal rewards that are not protected"}, {"title": "auraBAL can be stuck into the Strategy contract", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/129", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "# Lines of code  https://github.com/Badger-Finance/vested-aura/blob/v0.0.2/contracts/MyStrategy.sol#L220-L228 https://github.com/Badger-Finance/vested-aura/blob/v0.0.2/contracts/MyStrategy.sol#L288   # Vulnerability details  ## Impact The internal `_harvest()` function defined is responsible to claim auraBAL from the aura locker and within the function it swaps them to auraBAL -> BAL/ETH BPT -> WETH -> AURA, finally it locks AURA to the locker to increase the position. For claiming auraBAL it calls `LOCKER.getReward(address(this))` and it calculates the tokes earned, checking the balance before and after the claiming.  The function to get the rewards is public and any address can call it for the strategy address, and it will transfer all rewards tokens to the strategy, but in this scenario the auraBAL will remain in stuck into the contract, because they won't be counted as auraBAL earned during the next `_harvest()`. Also they could not sweep because auraBAL is a protected token.  Also, the aura Locker will be able to add other token as reward apart of auraBAL, but the harvest function won't be able to manage them, so they will need to be sweep every time.  The same scenario can happen during the `claimBribesFromHiddenHand()` call, the `IRewardDistributor.Claim[] calldata _claims` pass as input parameters could be frontrunned, and another address can call the `hiddenHandDistributor.claim(_claims)` (except for ETH rewards) for the strategy address, and like during the `_harvest()` only the tokens received during the call will be counted as earned. However every token, except auraBAL can be sweep, but the `_notifyBribesProcessor()` may never be called.  ## Proof of Concept At every `_harvest()` it checks the balance before the claim and after, to calculate the auraBAL earned, so every auraBAL transferred to the strategy address not during this call, won't be swapped to AURA.   ## Recommended Mitigation Steps Instead of calculating the balance before and after the claim, for both `harvest\u2260 and `claimBribesFromHiddenHand()`, the whole balance could be taken, directly after the claim.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/121", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/116", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/114", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Inconsistency in paused functionalities", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/113", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "Inconsistency in paused functionalities"}, {"title": "Badger rewards from Hidden Hand can permanently prevent Strategy from receiving bribes", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/111", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "# Lines of code  https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L428-L430 https://github.com/Badger-Finance/badger-vaults-1.5/blob/3c96bd83e9400671256b235422f63644f1ae3d2a/contracts/BaseStrategy.sol#L351 https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L407-L408   # Vulnerability details  ## Impact If the contract receives rewards from the hidden hand marketplace in BADGER then the contract tries to transfer the same amount of tokens twice to two different accounts, once with `_sendBadgerToTree()` in `MyStrategy` and again with `_processExtraToken()` in the `BasicStrategy` contract. As it is very likely that the strategy will not start with any BADGER tokens, the second transfer will revert (as we are using safeTransfer). This means that `claimBribesFromHiddenHand()` will always revert preventing any other bribes from being received. ## Proof of Concept 1. `claimBribesFromHiddenHand()` is called by strategist 2. Multiple bribes are sent to the strategy including BADGER. For example lets say 50 USDT And 50 BADGER 3. Strategy receives BADGER and calls `_handleRewardTransfer()` which calls `_sendBadgerToTree()`. 50 BADGER is sent to the Badger Tree so balance has dropped to 0. 4. 50 Badger is then again sent to Vault however balance is 0 so the command fails and reverts 5. No more tokens can be claimed anymore  ## Tools Used VS Code ## Recommended Mitigation Steps `_processExtraToken()` eventually sends the badger to the badger tree through the `Vault` contract. Change ```     function _sendBadgerToTree(uint256 amount) internal {         IERC20Upgradeable(BADGER).safeTransfer(BADGER_TREE, amount);         _processExtraToken(address(BADGER), amount);     } ``` to ```     function _sendBadgerToTree(uint256 amount) internal {         _processExtraToken(address(BADGER), amount);     } ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/109", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/108", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/106", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "`_harvest` has no slippage protection when swapping `auraBAL` for `AURA`  ", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/104", "labels": ["bug", "2 (Med Risk)", "valid"], "target": "2022-06-badger-findings", "body": "`_harvest` has no slippage protection when swapping `auraBAL` for `AURA`  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/100", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/99", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/98", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Withdrawing all funds at once to vault can be DoS attacked by frontrunning and locking dust", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/92", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "# Lines of code  https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L184-L187   # Vulnerability details  ## Impact  All funds can be migrated (withdrawn) at once to the caller vault by using the `BaseStrategy.withdrawToVault` function which internally calls `MyStrategy._withdrawAll`.  The latter function has the following check in place:  [MyStrategy.sol#L184-L187](https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L184-L187)  ```solidity require(     balanceOfPool() == 0 && LOCKER.balanceOf(address(this)) == 0,     \"You have to wait for unlock or have to manually rebalance out of it\" ); ```  Funds can only be withdrawn (migrated) if the balance in `LOCKER` is fully unlocked.  By locking a small amount of want tokens via `AuraLocker.lock` with the `strategy` address, a malicious individual can cause DoS and prevent withdrawing and migrating funds to the vault.  ## Proof of Concept  The following test case will replicate the DoS attack by locking \"dust\" want tokens for the `strategy` address. This causes `vault.withdrawToVault` to revert.  ```python def test_frontrun_migration(locker, deployer, vault, strategy, want, governance, keeper):     # Setup     randomUser = accounts[6]     snap = SnapshotManager(vault, strategy, \"StrategySnapshot\")      startingBalance = want.balanceOf(deployer)     depositAmount = startingBalance // 2     assert startingBalance >= depositAmount     # End Setup      # Deposit     want.approve(vault, MaxUint256, {\"from\": deployer})     snap.settDeposit(depositAmount, {\"from\": deployer})      chain.sleep(15)     chain.mine()      vault.earn({\"from\": keeper})      chain.snapshot()      # Test no harvests     chain.sleep(86400 * 250)  ## Wait 250 days so we can withdraw later     chain.mine()      before = {\"settWant\": want.balanceOf(vault), \"stratWant\": strategy.balanceOf()}      strategy.prepareWithdrawAll({\"from\": governance})      want.approve(locker, 1, {\"from\": deployer})     locker.lock(strategy, 1, { \"from\": deployer }) # Donate \"dust\" want tokens to strategy      vault.withdrawToVault({\"from\": governance}) # @audit-info reverts with \"You have to wait for unlock or have to manually rebalance\"      after = {\"settWant\": want.balanceOf(vault), \"stratWant\": strategy.balanceOf()}      assert after[\"settWant\"] > before[\"settWant\"]     assert after[\"stratWant\"] < before[\"stratWant\"]     assert after[\"stratWant\"] == 0 ```  ## Tools Used  Manual review  ## Recommended mitigation steps  Call `LOCKER.processExpiredLocks(false);` in `MyStrategy._withdrawAll` directly and remove the check which enforces unlocking all want tokens on L184-L187.   "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/82", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/80", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/71", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/70", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/69", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/63", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/60", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/59", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/57", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/55", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/54", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/53", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/52", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/47", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/46", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/45", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/44", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/43", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/38", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/36", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/34", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "with claimBribesFromHiddenHand() It's possible to send auraBAL rewards from LOCKER to bribeProcessor even so auraBAL is in protected tokens and it is supposed to get harvested in _harvest", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/31", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "with claimBribesFromHiddenHand() It's possible to send auraBAL rewards from LOCKER to bribeProcessor even so auraBAL is in protected tokens and it is supposed to get harvested in _harvest"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/25", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/22", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "attacker can call sweepRewardToken() when `bribesProcessor==0` and reward funds will be lost because there is no check in sweepRewardToken() and _handleRewardTransfer() and _sendTokenToBribesProcessor()", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/18", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-06-badger-findings", "body": "# Lines of code  https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L107-L113 https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L405-L413 https://github.com/Badger-Finance/vested-aura/blob/d504684e4f9b56660a9e6c6dfb839dcebac3c174/contracts/MyStrategy.sol#L421-L425   # Vulnerability details  ## Impact If the value of `bribesProcessor` was `0x0` (the default is `0x0` and `governance()`  can set to `0x0`) then attacker can call `sweepRewardToken()` make contract to send his total balance in attacker specified token to `0x0` address.  ## Proof of Concept the default value of `bribesProcessor` is `0x0` and `governance` can set the value to `0x0` at any time. rewards are stacking in contract address and they are supposed to send to `bribesProcessor`. This is `sweepRewardToken()` and `_handleRewardTransfer()` and `_sendTokenToBribesProcessor()` code: ```   /// @dev Function to move rewards that are not protected   /// @notice Only not protected, moves the whole amount using _handleRewardTransfer   /// @notice because token paths are hardcoded, this function is safe to be called by anyone   /// @notice Will not notify the BRIBES_PROCESSOR as this could be triggered outside bribes   function sweepRewardToken(address token) public nonReentrant {       _onlyGovernanceOrStrategist();       _onlyNotProtectedTokens(token);        uint256 toSend = IERC20Upgradeable(token).balanceOf(address(this));       _handleRewardTransfer(token, toSend);   }    function _handleRewardTransfer(address token, uint256 amount) internal {       // NOTE: BADGER is emitted through the tree       if (token == BADGER) {           _sendBadgerToTree(amount);       } else {           // NOTE: All other tokens are sent to bribes processor           _sendTokenToBribesProcessor(token, amount);       }   }    function _sendTokenToBribesProcessor(address token, uint256 amount) internal {       // TODO: Too many SLOADs       IERC20Upgradeable(token).safeTransfer(address(bribesProcessor), amount);       emit RewardsCollected(token, amount);   } ``` As you can see calling `sweepRewardToken()` eventually (`sweepRewardToken() -> _handleRewardTransfer() -> _sendTokenToBribesProcessor()`) would transfer reward funds to `bribesProcessor` and there is no check that `bribesProcessor!=0x0` in execution follow. so attacker can call `sweepRewardToken()` when `bribesProcessor` is `0x0` and contract will lose all reward tokens.   ## Tools Used VIM  ## Recommended Mitigation Steps check the value of `bribesProcessor` in `_sendTokenToBribesProcessor()`  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/14", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/13", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/12", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/4", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "valid"], "target": "2022-06-badger-findings", "body": "Gas Optimizations"}, {"title": "Agreement & Disclosures", "html_url": "https://github.com/code-423n4/2022-06-badger-findings/issues/1", "labels": [], "target": "2022-06-badger-findings", "body": "Agreement & Disclosures"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/305", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/304", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/302", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/301", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/299", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/297", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/296", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/295", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/293", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Insufficient staking tokens to migrate into new contract", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/292", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Insufficient staking tokens to migrate into new contract"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/290", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Functions in the `BatchRequests` contract revert for removed contract addresses", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/283", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/BatchRequests.sol#L50-L59 https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/BatchRequests.sol#L33-L44   # Vulnerability details  ## Impact  Removing Yieldy contract addresses from the `contracts` array with `BatchRequests.removeAddress` replaces the contract address with a zero-address (due to how `delete` works).  Each function that loops over the `contracts` array or accesses an array item by index, should zero-address check the value before calling any external contract functions. If this zero-address check is missing, an external call to this zero-address will revert.  ## Proof of Concept  [BatchRequests.canBatchContractByIndex](https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/BatchRequests.sol#L50-L59)  ```solidity function canBatchContractByIndex(uint256 _index)     external     view     returns (address, bool) {     return (         contracts[_index],         IStaking(contracts[_index]).canBatchTransactions() // @audit-info `contracts` with zero-address elements (due to deletion) will revert - add zero-address check and return false     ); } ```  [BatchRequests.canBatchContracts](https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/BatchRequests.sol#L33-L44)  ```solidity function canBatchContracts() external view returns (Batch[] memory) {     uint256 contractsLength = contracts.length;     Batch[] memory batch = new Batch[](contractsLength);     for (uint256 i; i < contractsLength; ) {         bool canBatch = IStaking(contracts[i]).canBatchTransactions(); // @audit-info `contracts` with zero-address elements (due to deletion) will revert - add zero-address check         batch[i] = Batch(contracts[i], canBatch);         unchecked {             ++i;         }     }     return batch; } ```  ## Tools Used  Manual review  ## Recommended mitigation steps  Add zero-address checks to both mentioned functions.   "}, {"title": "Removal of liquidity from the reserve can be griefed", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/282", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor disputed"], "target": "2022-06-yieldy-findings", "body": "Removal of liquidity from the reserve can be griefed"}, {"title": "Sending batch withdrawal requests can possibly DoS", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/280", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Sending batch withdrawal requests can possibly DoS"}, {"title": "instantUnstake function can be frontrunned with fee increase", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/279", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "instantUnstake function can be frontrunned with fee increase"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/277", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/275", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/273", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "User fund lose in addLiquidity() of LiquidityReserve by increasing (totalLockedValue / totalSupply()) to very large number by attacker", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/272", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2022-06-yieldy-findings", "body": "User fund lose in addLiquidity() of LiquidityReserve by increasing (totalLockedValue / totalSupply()) to very large number by attacker"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/271", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/269", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/267", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/263", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/261", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "`_storeRebase()` is called with the wrong parameters", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/259", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Yieldy.sol#L110-L114 https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Yieldy.sol#L97-L100   # Vulnerability details  `_storeRebase()`'s signature is as such:  - [Yieldy.sol#_storeRebase()](https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Yieldy.sol#L110-L114)  ```solidity File: Yieldy.sol 104:     /** 105:         @notice emits event with data about rebase 106:         @param _previousCirculating uint 107:         @param _profit uint 108:         @param _epoch uint 109:      */ 110:     function _storeRebase( 111:         uint256 _previousCirculating, 112:         uint256 _profit, 113:         uint256 _epoch 114:     ) internal { ```  However, instead of being called with the expected `_previousCirculating` value, it's called with the current circulation value:  - [Yieldy.sol#rebase()](https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Yieldy.sol#L97-L100)  ```solidity File: Yieldy.sol 89:             uint256 updatedTotalSupply = currentTotalSupply + _profit; ... 103:             _totalSupply = updatedTotalSupply; 104:  105:             _storeRebase(updatedTotalSupply, _profit, _epoch); // @audit-info this should be currentTotalSupply otherwise previous = current ```  As a consequence, the functionality isn't doing what it was created for.  ## Mitigation  Consider calling `_storeRebase()` with `currentTotalSupply`:  ```diff File: Yieldy.sol - 105:             _storeRebase(updatedTotalSupply, _profit, _epoch); + 105:             _storeRebase(currentTotalSupply, _profit, _epoch); ```   "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/258", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/257", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/256", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/254", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/248", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/247", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "It's possible to perform DOS and fund lose in Stacking by transferring tokens directly to contract ", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/246", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "It's possible to perform DOS and fund lose in Stacking by transferring tokens directly to contract "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/244", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Arbitrage on `stake()`", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/243", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Arbitrage on `stake()`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/240", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/239", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/237", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/236", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/235", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Inconsistent balance when fee-on transfer tokens.", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/234", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Inconsistent balance when fee-on transfer tokens."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/233", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/231", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/230", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/229", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/228", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/227", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/225", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "token transfers in LiquidityReserve and Staking contract don't support deflationary ERC20 tokens, and user funds can be lost if stacking token was deflationary", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/222", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "token transfers in LiquidityReserve and Staking contract don't support deflationary ERC20 tokens, and user funds can be lost if stacking token was deflationary"}, {"title": "Targeted Denial of Service during Staking", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Targeted Denial of Service during Staking"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/218", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/216", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/214", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/213", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/212", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "owner can transfer TOKE balance of Staking contract instantly without time-lock even so that funds belongs to users", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "owner can transfer TOKE balance of Staking contract instantly without time-lock even so that funds belongs to users"}, {"title": "Timelock should be implemented to prevent malicious DAO members from rug pull all money.", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/205", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Timelock should be implemented to prevent malicious DAO members from rug pull all money."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/203", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/202", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/201", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Cannot mint to exactly max supply using `_mint` function", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/200", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Cannot mint to exactly max supply using `_mint` function"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/199", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/197", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/194", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/192", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/191", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/189", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "`Staking.sol#stake()` DoS by staking 1 wei for the recipient when `warmUpPeriod > 0`", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/187", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "upgraded by judge"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Staking.sol#L435-L447   # Vulnerability details  ```solidity if (warmUpPeriod == 0) {     IYieldy(YIELDY_TOKEN).mint(_recipient, _amount); } else {     // create a claim and mint tokens so a user can claim them once warm up has passed     warmUpInfo[_recipient] = Claim({         amount: info.amount + _amount,         credits: info.credits +             IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),         expiry: epoch.number + warmUpPeriod     });      IYieldy(YIELDY_TOKEN).mint(address(this), _amount); } ```  `Staking.sol#stake()` is a public function and you can specify an arbitrary address as the `_recipient`.  When `warmUpPeriod > 0`, with as little as 1 wei of `YIELDY_TOKEN`, the `_recipient`'s `warmUpInfo` will be push back til `epoch.number + warmUpPeriod`.  ### Recommendation  Consider changing to not allow deposit to another address when `warmUpPeriod > 0`.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/186", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/183", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/182", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Possible reentrancy due to not following checks-effects-interactions pattern", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/181", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Possible reentrancy due to not following checks-effects-interactions pattern"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/177", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/175", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Staking `preSign` could use some basic validations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/172", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Staking.sol#L769   # Vulnerability details  The function `preSign` acceps any `orderUid` `function preSign(bytes calldata orderUid) external onlyOwner`  Because of how Cowswap works, accepting any `orderUid` can be used as a rug-vector.  This is because the orderData contains a `receiver` which in lack of validation could be any address.  You'd also be signing other parameters such as minOut and how long the order could be filled for, which you may or may not want to validate to give stronger security guarantees to end users.   ## Recomended mitigation steps I'd recommend adding basic validation for tokenOut, minOut and receiver.  Feel free to check the work we've done at Badger to validate order parameters, giving way stronger guarantees to end users. https://github.com/GalloDaSballo/fair-selling/blob/44c0c0629289a0c4ccb3ca971cc5cd665ce5cb82/contracts/CowSwapSeller.sol#L194  Also notice how through the code above we are able to re-construct the `orderUid`, feel free to re-use that code which has been validated by the original Cowswap / GPv2 Developers  "}, {"title": "Burn access control can be bypassed", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/169", "labels": ["bug", "duplicate", "2 (Med Risk)"], "target": "2022-06-yieldy-findings", "body": "Burn access control can be bypassed"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/166", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "No way to set CURVE_POOL approval after setting new curve pool address", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/165", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "No way to set CURVE_POOL approval after setting new curve pool address"}, {"title": "Yield of `LiquidityReserve` can be stolen", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/164", "labels": ["bug", "3 (High Risk)", "disagree with severity"], "target": "2022-06-yieldy-findings", "body": "Yield of `LiquidityReserve` can be stolen"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/163", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/160", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/159", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/157", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/156", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/155", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/150", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "claimWithdraw does not have the revert check for incorrect input.", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-06-yieldy-findings", "body": "claimWithdraw does not have the revert check for incorrect input."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/147", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/140", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/139", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/137", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/131", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/130", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/128", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Staking: Manipulations of setAffiliateFee", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Staking: Manipulations of setAffiliateFee"}, {"title": "Staking: the rebase function needs to be called before calling the function in the Yieldy contract that uses the rebasingCreditsPerToken variable", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/126", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Staking.sol#L674-L696   # Vulnerability details  ## Impact In the Yieldy contract, functions such as balanceOf/creditsForTokenBalance/tokenBalanceForCredits/transfer/transferFrom/burn/mint will use the rebasingCreditsPerToken variable, so before calling these functions in the Staking contract, make sure that the rebase of this epoch has occurred. Therefore, the rebase function should also be called in the unstake/claim/claimWithdraw function of the Staking contract. ## Proof of Concept https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Staking.sol#L674-L696 https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/Staking.sol#L465-L508 ## Tools Used None ## Recommended Mitigation Steps ```     function claim(address _recipient) public {         Claim memory info = warmUpInfo[_recipient]; +      rebase(); ...     function claimWithdraw(address _recipient) public {         Claim memory info = coolDownInfo[_recipient]; +      rebase(); ...     function unstake(uint256 _amount, bool _trigger) external {         // prevent unstaking if override due to vulnerabilities asdf         require(!isUnstakingPaused, \"Unstaking is paused\"); -        if (_trigger) {             rebase(); -        } ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/122", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/120", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/119", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/118", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/117", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/114", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/113", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": " No validation on `setAffiliateFee`", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": " No validation on `setAffiliateFee`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/107", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/106", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Setting `affiliateFee` too high can result in affiliate receiving all the reward tokens accumulated in `Staking.sol`", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Setting `affiliateFee` too high can result in affiliate receiving all the reward tokens accumulated in `Staking.sol`"}, {"title": "Possible DOS (out-of-gas) on loops.", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/94", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Possible DOS (out-of-gas) on loops."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/91", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Lack of Storage Gap ", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Lack of Storage Gap "}, {"title": "coolDown & warmUp period do not work when a low _firstEpochEndTime is passed to initialize", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/88", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "coolDown & warmUp period do not work when a low _firstEpochEndTime is passed to initialize"}, {"title": "No withdrawal possible for ETH TOKE pool", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/87", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/Staking.sol#L308   # Vulnerability details  ## Impact The `withdraw` function of the ETH Tokemak pool has an additional parameter `asEth`. This can be seen in the Tokemak [Github repository](https://github.com/Tokemak/tokemak-smart-contracts-public/blob/2f54689d5d16ddfd1751493b161a049d6c98c382/contracts/pools/EthPool.sol#L94) or also when looking at the deployed code of the [ETH pool](https://etherscan.io/address/0xb104A7fA1041168556218DDb40Fe2516F88246d5#code). Compare that to e.g. the [USDC pool](https://etherscan.io/address/0xca5e07804beef19b6e71b9db18327d215cd58d4e#code), which does not have this parameter.  This means that the call to `withdraw` will when the staking token is ETH / WETH and no withdrawals would be possible.  ## Proof of Concept A new `Staking` contract with ETH / WETH as the staking token is deployed. Deposits in Tokemak work fine, so users stake their tokens. However, because of the previously described issue, no withdrawal is possible, leaving the funds locked.  ## Recommended Mitigation Steps Handle the case where the underlying asset is WETH / ETH separately and pass this boolean in that case.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/83", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "YIELDY MINT FUNCTION VIOLATING SECURITY DESIGN PATTERN", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/78", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "YIELDY MINT FUNCTION VIOLATING SECURITY DESIGN PATTERN"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/72", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/70", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/69", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/66", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/65", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/58", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Incorrect withdrawal requested", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/56", "labels": ["bug", "2 (Med Risk)"], "target": "2022-06-yieldy-findings", "body": "Incorrect withdrawal requested"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/54", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/53", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Incorrect rebase percentage calculation", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/52", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Incorrect rebase percentage calculation"}, {"title": "Staking: rebase() does not rebase according to the status of the current epoch.", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/49", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Staking: rebase() does not rebase according to the status of the current epoch."}, {"title": "MINIMUM_LIQUIDITY checks missing - Bringing Liquidity below required min", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/48", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/main/src/contracts/LiquidityReserve.sol#L161   # Vulnerability details  ## Impact Whale who provided most liquidity to the contract can simply use removeLiquidity function and can remove all of his liquidity. This can leave the residual liquidity to be less than MINIMUM_LIQUIDITY which is incorrect  ## Proof of Concept  1. Whale A provided initial liquidity plus more liquidity using enableLiquidityReserve and addLiquidity function  2. There are other small liquidity providers as well  3. Now Whale A decides to remove all the liquidity provided   4. This means after liquidity removal the balance liquidity will even drop below MINIMUM_LIQUIDITY which is incorrect  ## Recommended Mitigation Steps Add below check  ``` require(             IERC20Upgradeable(stakingToken).balanceOf(address(this)) - MINIMUM_LIQUIDITY >=                 amountToWithdraw,             \"Not enough funds\"         ); ```  "}, {"title": "MINTER_BURNER_ROLE can burn any amount of Yieldy from an arbitrary address", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/43", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "MINTER_BURNER_ROLE can burn any amount of Yieldy from an arbitrary address"}, {"title": "Used deprecated methods", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/42", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L38 https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L61-L62   # Vulnerability details  ## Impact A deprecated method is used in `Yieldy` contract.  ## Proof of Concept  In `Yieldy` contract the method `_setupRole` is used, and and it is explicitly marked as deprecated by OpenZeppelin.  > * NOTE: This function is deprecated in favor of {_grantRole}.  Affected source code:  - [Yieldy.sol#L38](https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L38) - [Yieldy.sol#L61-L62](https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L61-L62)  ## Recommended Mitigation Steps - The method `_setupRole` must be changed to `_grantRole`.  "}, {"title": "Denial of Service by wrong `BatchRequests.removeAddress` logic", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/38", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L93 https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L57 https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L37   # Vulnerability details  ## Impact The `BatchRequests.removeAddress` logic is wrong and it will produce a denial of service.  ## Proof of Concept  Removing the element from the array is done using the `delete` statement, but this is not the proper way to remove an entry from an array, it will just set that position to `address(0)`.  Append dummy data:  - `addAddress('0x0000000000000000000000000000000000000001')` - `addAddress('0x0000000000000000000000000000000000000002')` - `addAddress('0x0000000000000000000000000000000000000003')` - `getAddresses()` => `address[]: 0x0000000000000000000000000000000000000001,0x0000000000000000000000000000000000000002,0x0000000000000000000000000000000000000003`  Remove address: - `removeAddress(0x0000000000000000000000000000000000000002)` (or `0x0000000000000000000000000000000000000003`) - `getAddresses()` => `address[]: 0x0000000000000000000000000000000000000001,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000003`  Service is denied because it will try to call `canBatchContracts`  to `address(0)`.  ## Recommended Mitigation Steps - To remove an entry in an array you have to use `pop` and move the last element to the removed entry position.  "}, {"title": "Unsecure `transferFrom`", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/36", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "sponsor disputed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L212   # Vulnerability details  ## Impact The security of the `Yieldy` contract is delegated to the compiler used.  ## Proof of Concept The `allowance` of an account does not have to reflect the real balance of an account, however in the `transferFrom` method, it is the value that is checked in order to verify that the user has enough balance to make the transfer.  ```javascript     function transferFrom(         address _from,         address _to,         uint256 _value     ) public override returns (bool) {         require(_allowances[_from][msg.sender] >= _value, \"Allowance too low\"); ```  However, the real balance of the `Yieldy` contract is based on the calculation made by the `creditsForTokenBalance` method, so an underflow could be made in the subtraction of the balance of the `from` account.  ```javascript         uint256 creditAmount = creditsForTokenBalance(_value);         creditBalances[_from] = creditBalances[_from] - creditAmount;         creditBalances[_to] = creditBalances[_to] + creditAmount;         emit Transfer(_from, _to, _value); ```  This means that the security of the contract is delegated to the checks added by the compiler depending on the pragma used, it must be taken into account that these checks may appear and disappear in future versions of the compiler, so they must be checked at the level of smart contracts.  Affected source code:  - [Yieldy.sol#L212](https://github.com/code-423n4/2022-06-yieldy/blob/8400e637d9259b7917bde259a5a2fbbeb5946d45/src/contracts/Yieldy.sol#L212)  ## Recommended Mitigation Steps - Check that the from account has a `creditAmount` balance.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/35", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/34", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Users of Migration.sol may forfeit rebase rewards", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/33", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Users of Migration.sol may forfeit rebase rewards"}, {"title": "moveFundsToUpgradedContract() will fail because of instantUnstake fee", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/32", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "moveFundsToUpgradedContract() will fail because of instantUnstake fee"}, {"title": "Rebases can be frontrun with very little token downtime even when warmUpPeriod > 0", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/31", "labels": ["bug", "2 (Med Risk)"], "target": "2022-06-yieldy-findings", "body": "Rebases can be frontrun with very little token downtime even when warmUpPeriod > 0"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/30", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Withdrawals initiated after cycle withdrawal request won't be withdrawn in the correct cycle", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/29", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "Withdrawals initiated after cycle withdrawal request won't be withdrawn in the correct cycle"}, {"title": "User can initiate withdraw for previous epoch if rebase hasn't been called since end of epoch", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/28", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-yieldy-findings", "body": "User can initiate withdraw for previous epoch if rebase hasn't been called since end of epoch"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/24", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/21", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/19", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/18", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/17", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/16", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/15", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/11", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/10", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "instantUnstake fee can be avoided", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/9", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-yieldy-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L196   # Vulnerability details  ## Impact Users can utilize the `instantUnstake` function without paying the liquidity provider fee using rounding errors in the fee calculation. This attack only allows for a relatively small amount of tokens to be unstaked in each call, so is likely not feasible on mainnet. However, on low-cost L2s and for tokens with a small decimal precision it is likely a feasible workaround.  ## Proof of Concept The `instantUnstake` fee is handled by sending the user back `amount - fee`. We can work around the fee by unstaking small amounts (`amount < BASIS_POINTS / fee`) in a loop until reaching the desired amount.  ## Tools Used N/A  ## Recommended Mitigation Steps Avoid using subtraction to calculate the fee as this causes the fee to be rounded down rather than the amount. I'd propose calculating amount less fee using a muldiv operation over (1 - fee). In this case, the fee is effectively rounded up instead of down, so it can never be 0 unless fee is 0. Uniswapv2 uses a similar solution for their LP fee: https://github.com/Uniswap/v2-core/blob/8b82b04a0b9e696c0e83f8b2f00e5d7be6888c79/contracts/UniswapV2Pair.sol#L180-L182  It might look like the following: ``` uint256 amountMinusFee = amount * (BASIS_POINTS - fee) / BASIS_POINTS ```  "}, {"title": "Reentrancy vulnerability Staking.sol", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "Reentrancy vulnerability Staking.sol"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-yieldy-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/4", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-yieldy-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-06-yieldy-findings/issues/1", "labels": [], "target": "2022-06-yieldy-findings", "body": "Agreements & Disclosures"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/176", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Admin Can Broke All Functionality Through Weth Address", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/173", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-06-canto-v2-findings", "body": "Admin Can Broke All Functionality Through Weth Address"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/172", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/171", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/170", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/168", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/167", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/166", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/165", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/164", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/163", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/162", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/161", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/160", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/158", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/157", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/156", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/155", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "The LP pair underlying price quote could be manipulated", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/152", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/ea5840de72eab58bec837bb51986ac73712fcfde/contracts/Stableswap/BaseV1-periphery.sol#L522-L526 https://github.com/Plex-Engineer/lending-market-v2/blob/ea5840de72eab58bec837bb51986ac73712fcfde/contracts/Stableswap/BaseV1-periphery.sol#L198-L217   # Vulnerability details  # The LP pair underlying price quote could be manipulated   ## Impact  The underlying price for LP pool pair can be manipulated. This kind of price mainpulation happened before, can be found here: [Warp Fincance event](https://rekt.news/warp-finance-rekt/).  Whick may lead to the exploit of the pool by a malicious user.  ## Proof of Concept  file: lending-market-v2/contracts/Stableswap/BaseV1-periphery.sol 522-526\uff0c 198-217: ```             uint price0 = (token0 != USDC) ? IBaseV1Pair(pairFor(USDC, token0, stable0)).quote(token0, 1, 8) : 1;             uint price1 = (token1 != USDC) ? IBaseV1Pair(pairFor(USDC, token1, stable1)).quote(token1, 1, 8) : 1;             // how much of each asset is 1 LP token redeemable for             (uint amt0, uint amt1) = quoteRemoveLiquidity(token0, token1, stablePair, 1);             price = amt0 * price0 + amt1 * price1;       function quoteRemoveLiquidity(         address tokenA,         address tokenB,         bool stable,         uint liquidity     ) public view returns (uint amountA, uint amountB) {         // create the pair if it doesn\"t exist yet         address _pair = IBaseV1Factory(factory).getPair(tokenA, tokenB, stable);          if (_pair == address(0)) {             return (0,0);         }          (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);         uint _totalSupply = erc20(_pair).totalSupply();          amountA = liquidity * reserveA / _totalSupply; // using balances ensures pro-rata distribution         amountB = liquidity * reserveB / _totalSupply; // using balances ensures pro-rata distribution      } ```  The price of the LP pair is determined by the TVL of the pool, given by: `amt0 * price0 + amt1 * price1`. However, when a malicious user dumps large amount of any token into the pool, the whole TVL will be significantly increased, which leads to inproper calculation of the price.   ## Tools Used mannual analysis  ## Recommended Mitigation Steps  A differenct approach to calculate the LP price can be found [here](https://cmichel.io/pricing-lp-tokens/).   "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/150", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/146", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Potential overflow at ``updateBaseRate()`` function", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/142", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/NoteInterest.sol#L145-L147   # Vulnerability details  ## Impact When casting to ``int`` from ``uint``, the overflow might happen.  ## Proof of Concept https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/NoteInterest.sol#L145-L147   ```             uint twapMantissa = oracle.getUnderlyingPrice(cNote); // returns price as mantissa             //uint ir = (1 - twapMantissa).mul(adjusterCoefficient).add(baseRatePerYear);             int diff = BASE - int(twapMantissa); //possible annoyance if 1e18 - twapMantissa > 2**255, differ ```  ``int(twapMantissa)`` can overflow depending on the value of ``uint twapMantissa``. Even if this is not expected, handling this case should be good.  ## Tools Used Static analysis  ## Recommended Mitigation Steps Consider using the logic of ``toInt256`` provided by OpenZeppelin.  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol#L1130-L1134  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/139", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Underlying asset price oracle for CToken in BaseV1-periphery is inaccuarte", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/134", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/Stableswap/BaseV1-periphery.sol#L489   # Vulnerability details  ## Impact Detailed description of the impact of this finding.  Underlying asset price oracle for CToken in BaseV1-periphery is inaccuarte  ## Proof of Concept Provide direct links to all referenced code in GitHub. Add screenshots, logs, or any other relevant proof that illustrates the concept.  ```     function getUnderlyingPrice(CToken ctoken) external override view returns(uint price) {         IBaseV1Pair pair;         uint8 stable;         bool stablePair;         address underlying;          if (compareStrings(ctoken.symbol(), \"cCANTO\")) {             stable = 0;             underlying = address(wcanto);         }          //set price statically to 1 when the Comptroller is retrieving Price         else if (compareStrings(ctoken.symbol(), \"cNOTE\") && msg.sender == Comptroller) {             return 1; // Note price is fixed to 1         } ```  we should not be return 1. 1 is 1 wei. we should be 10 ** 18  ## Tools Used VIM  ## Recommended Mitigation Steps  we can return 10 ** 18  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/132", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/130", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/129", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/125", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Oracle periodSize is very low allowing the TWAP price to be easily manipulated", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/124", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/ea5840de72eab58bec837bb51986ac73712fcfde/contracts/Stableswap/BaseV1-core.sol#L72   # Vulnerability details  ## Impact TWAP oracle easily manipulated  ## Proof of Concept periodSize is set to 0 meaning that the oracle will take a new observation every single block, which would allow an attacker to easily flood the TWAP oracle and manipulate the price  ## Tools Used  ## Recommended Mitigation Steps Increase periodSize to be greater than 0, 1800 is typically standard  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/122", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/119", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/117", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/113", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Non view function is called with staticcall in `CErc20Delegator`", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/112", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/CErc20Delegator.sol#L237 https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/CErc20Delegator.sol#L246   # Vulnerability details  ## Impact  When using CToken implementation with CErc20Delegator, the functions `borrowRatePerBlock` and `supplyRatePerBlock` will revert when the underlying functions try to update some states.  ## Detail  The v1 of [borrowRatePerBlock](https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/CToken.sol#L208) and [supplyRatePerBlock](https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/CToken.sol#L216) were view functions, but they are not anymore. The `CErc20Delegator` is still using `delegateToViewImplementation` for those functions. Those functions can be used, as long as the implementation does not update any state variables, i.e. [the block number increase since the last update is less or equal to the `updateFrequency`](https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/NoteInterest.sol#L141). However, when these functions are called after sufficient blocks are mined, they are going to revert. Although one can still call the implementation using [`delegateToImplementation`](https://github.com/Plex-Engineer/lending-market-v2/blob/443a8c0fed3c5018e95f3881a31b81a555c42b2d/contracts/CErc20Delegator.sol#L437), it is not a good usability, especially if those functions are used for external user interface.   ## Proof Of Concept  [gist for the test](https://gist.github.com/zzzitron/37fb99cebed786b4c983d20a76e8793e#file-2022-06-newblockchain-v2-poc-ctoken-test-ts-L49-L62)  The gist shows a simple test. It calls `borrowRatePerBlock` and `supplyRatePerBlock` first time, it suceeds. Then, it mines for more than 300 times, which is the `updateFrequency` parameter. Then it calls again then fails.  Notes on the test file: - The setup is taken from `tests/Treasury/Accountant.test.ts` - using `solidity` from ethereum-waffle for chai to use `reverted`   ```   // in hardhat.config.js   import chai from \"chai\";   import { solidity } from \"ethereum-waffle\";    chai.use(solidity);   ```  ## Tools Used  hardhat   ## Recommended Mitigation Steps  Instead of using `delegateToViewImplementation` use `delegateToImplementation`. Alternatively, implement view functions to query these rates in `NoteInterest.sol` and `CToken.sol`. It will enable to query the rates without spending gas.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/106", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/100", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "A cap is needed on the amount of Note than can be borrowed", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/92", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "A cap is needed on the amount of Note than can be borrowed"}, {"title": "Stableswap - Deadline do not work", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/90", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "Stableswap - Deadline do not work"}, {"title": "Total supply can be incorrect in `ERC20`", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/88", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "Total supply can be incorrect in `ERC20`"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "CALL() Should be used instead of Transfer() on An address payable ", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "CALL() Should be used instead of Transfer() on An address payable "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/84", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/82", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/81", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/79", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/73", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/63", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/60", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/59", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/57", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/56", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/55", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/52", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/50", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Multiple initialization in `NoteInterest`", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/49", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-06-canto-v2-findings", "body": "Multiple initialization in `NoteInterest`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Deny of service in `CNote.doTransferOut`", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/43", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.dev/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/CNote.sol#L148   # Vulnerability details  ## Impact The `CNote.doTransferOut` method is susceptible to denial of service.  ## Proof of Concept The logic of the `doTransferOut` method in `CNote` is as follows: ```javascript     function doTransferOut(address payable to, uint amount) virtual override internal {         require(address(_accountant) != address(0));         EIP20Interface token = EIP20Interface(underlying);         if (to != address(_accountant)) {             uint err = _accountant.supplyMarket(amount);             if (err != 0) { revert AccountantRedeemError(amount); }         }            token.transfer(to, amount);         bool success;         assembly {             switch returndatasize()                 case 0 { success := not(0) }                 case 32 {                      returndatacopy(0, 0, 32)                     success := mload(0)                 }                 default { revert(0, 0) }         }          require(success, \"TOKEN_TRANSFER_OUT_FAILED\");         require(token.balanceOf(address(this)) == 0, \"cNote::doTransferOut: TransferOut Failed\"); // <-- ERROR     } ```  The `doTransferOut` method receives an `amount` which is transferred to `to`, after it the balance of the contract token is checked to be equal to zero or the transaction will be reverted.  In the following cases a denial of service will occur: - In the case that is used an `amount` different than the balance, the transaction will be reverted. - **In the case that an attacker front-runs the transaction and sends one token more than the established by the `_accountant`.** - In case of increasing balance tokens like `mDai` that constantly change their balance, the established by the `_accountant` will be different when the transaction is persisted.  ## Recommended Mitigation Steps - Use balance differences instead of the 0 check.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/42", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "getBorrowRate returns rate per year instead of per block", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/38", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/NoteInterest.sol#L118 https://github.com/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/CToken.sol#L209   # Vulnerability details  ## Impact According to the documentation in `InterestRateModel`, `getBorrowRate` has to return the borrow rate per block and the function `borrowRatePerBlock` in `CToken` directly returns the value of `getBorrowRate`. However, the rate per year is returned for `NoteInterest`. Therefore, using `NoteInterest` as an interest model will result in completely wrong values.   ## Recommended Mitigation Steps Return `baseRatePerBlock`.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/36", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/35", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/29", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Deny of service in `AccountantDelegate.sweepInterest`", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/28", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.dev/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/Accountant/AccountantDelegate.sol#L101   # Vulnerability details  ## Impact The `sweepInterest` method is susceptible to denial of service.  ## Proof of Concept The logic of the `sweepInterest` method relative to the `treasury` is as follows: ```javascript   bool success = cnote.transfer(treasury, amtToSweep);   if (!success) { revert  SweepError(treasury , amtToSweep); }   TreasuryInterface Treas = TreasuryInterface(treasury);   Treas.redeem(address(cnote),amtToSweep);   require(cnote.balanceOf(treasury) == 0, \"AccountantDelegate::sweepInterestError\"); ```  As you can see, `amtToSweep` is passed to it and `redeem` that amount. Later it is checked that the balance of `cnote` in the `treasury` address must be 0. However, all calculations related to `amtToSweep` come out of the balance of [address(this)](https://github.dev/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/Accountant/AccountantDelegate.sol#L83-L84) so if a third party sends a single token `cnote` to the address of `treasury` the method will be denied.  ## Recommended Mitigation Steps - Check that the balance is the same after and before the `bool success = cnote.transfer(treasury, amtToSweep);`  "}, {"title": "WETH: withdraw() calls native payable.transfer, which can be unusable for smart contract calls", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "WETH: withdraw() calls native payable.transfer, which can be unusable for smart contract calls"}, {"title": "missing zero address check can cause initialize to be called more than once", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/14", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-canto-v2-findings", "body": "missing zero address check can cause initialize to be called more than once"}, {"title": "AccountantDelegate: The sweepInterest function sweeps an incorrect number of cnote.", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/11", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-06-canto-v2-findings", "body": "# Lines of code  https://github.com/Plex-Engineer/lending-market-v2/blob/ea5840de72eab58bec837bb51986ac73712fcfde/contracts/Accountant/AccountantDelegate.sol#L80-L99   # Vulnerability details  ## Impact In the sweepInterest function of the AccountantDelegate contract, the number of cnote sent to treasury should be cNoteToSweep instead of amtToSweep, as amtToSweep will normally be smaller than cNoteToSweep, which will cause the interest to be locked in the in the contract. ```   uint amtToSweep = sub_(cNoteAmt, noteDiff); // amount to sweep in Note,    uint cNoteToSweep = div_(amtToSweep, exRate); // amount of cNote to sweep = amtToSweep(Note) / exRate    cNoteToSweep = (cNoteToSweep > cNoteBal) ? cNoteBal :  cNoteToSweep;    bool success = cnote.transfer(treasury, amtToSweep);   if (!success) {    revert  SweepError(treasury , amtToSweep); //handles if transfer of tokens is not successful   }    TreasuryInterface Treas = TreasuryInterface(treasury);   Treas.redeem(address(cnote),amtToSweep); ``` ## Proof of Concept https://github.com/Plex-Engineer/lending-market-v2/blob/ea5840de72eab58bec837bb51986ac73712fcfde/contracts/Accountant/AccountantDelegate.sol#L80-L99  ## Tools Used None ## Recommended Mitigation Steps ```diff   uint amtToSweep = sub_(cNoteAmt, noteDiff); // amount to sweep in Note,    uint cNoteToSweep = div_(amtToSweep, exRate); // amount of cNote to sweep = amtToSweep(Note) / exRate    cNoteToSweep = (cNoteToSweep > cNoteBal) ? cNoteBal :  cNoteToSweep;  -  bool success = cnote.transfer(treasury, amtToSweep); +               bool success = cnote.transfer(treasury, cNoteToSweep);   if (!success) { -   revert  SweepError(treasury , amtToSweep); //handles if transfer of tokens is not successful +                       revert  SweepError(treasury , cNoteToSweep); //handles if transfer of tokens is not successful   }    TreasuryInterface Treas = TreasuryInterface(treasury); -  Treas.redeem(address(cnote),amtToSweep); +               Treas.redeem(address(cnote),cNoteToSweep); ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/10", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/9", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-canto-v2-findings", "body": "Gas Optimizations"}, {"title": "Existing proposal check is missing", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-canto-v2-findings", "body": "Existing proposal check is missing"}, {"title": "Agreement & Disclosures", "html_url": "https://github.com/code-423n4/2022-06-canto-v2-findings/issues/1", "labels": [], "target": "2022-06-canto-v2-findings", "body": "Agreement & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/435", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/432", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/430", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/429", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/428", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/425", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/424", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/423", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "`fee` can change without the consent of users", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/422", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L240  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L497   # Vulnerability details  ## Impact Fees are applied during `withdraw`, but can change between the time the order is filled and its terms are agreed upon and the withdrawal time, leading to a loss of the expected funds for the concerned users.  ## Proof of Concept The scenario would be:   - Alice and Bob agrees to fill an order at a time fees are 0.1%  - During the duration of the option, fees are increased to 3%  - At withdrawal they'll pay 3% of the strike, although they wouldn't have created the order in the first place with such fees   ## Recommended Mitigation Steps Mitigation could be:  - Store the fees in `Order` and verify that they are correct when the order is filled, so they are hardcoded in the struct  - Add a timestamp: this wouldn't fully mitigate but would still be better than the current setup  - Keep past fees and fee change timestamps in memory (for example in an array) to be able to retrieve the creation time fees at withdrawal  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/420", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/419", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Zero strike call options can be systemically used to steal premium from the taker", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/418", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L435-L437   # Vulnerability details  Some non-malicious ERC20 do not allow for zero amount transfers and order.baseAsset can be such an asset. Zero strike calls are valid and common enough derivative type. However, the zero strike calls with such baseAsset will not be able to be exercised, allowing maker to steal from the taker as a malicious maker can just wait for expiry and withdraw the assets, effectively collecting the premium for free. The premium of zero strike calls are usually substantial.  Marking this as high severity as in such cases malicious maker knowing this specifics can steal from taker the whole premium amount. I.e. such orders will be fully valid for a taker from all perspectives as inability to exercise is a peculiarity of the system which taker in the most cases will not know beforehand.  ## Proof of Concept  Currently system do not check the strike value, unconditionally attempting to transfer it:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L435-L437  ```solidity             } else {                 ERC20(order.baseAsset).safeTransferFrom(msg.sender, address(this), order.strike);             } ```  As a part of call exercise logic:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L422-L443  ```solidity     function exercise(Order memory order, uint256[] calldata floorAssetTokenIds) public payable {         ...          if (order.isCall) {             // -- exercising a call option              // transfer strike from exerciser to putty             // handle the case where the taker uses native ETH instead of WETH to pay the strike             if (weth == order.baseAsset && msg.value > 0) {                 // check enough ETH was sent to cover the strike                 require(msg.value == order.strike, \"Incorrect ETH amount sent\");                  // convert ETH to WETH                 // we convert the strike ETH to WETH so that the logic in withdraw() works                 // - because withdraw() assumes an ERC20 interface on the base asset.                 IWETH(weth).deposit{value: msg.value}();             } else {                 ERC20(order.baseAsset).safeTransferFrom(msg.sender, address(this), order.strike);             }              // transfer assets from putty to exerciser             _transferERC20sOut(order.erc20Assets);             _transferERC721sOut(order.erc721Assets);             _transferFloorsOut(order.floorTokens, positionFloorAssetTokenIds[uint256(orderHash)]);         } ```  Some tokens do not allow zero amount transfers:  https://github.com/d-xo/weird-erc20#revert-on-zero-value-transfers  This way for such a token and zero strike option the maker can create short call order, receive the premium:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L327-L339  ```solidity             if (weth == order.baseAsset && msg.value > 0) {                 // check enough ETH was sent to cover the premium                 require(msg.value == order.premium, \"Incorrect ETH amount sent\");                  // convert ETH to WETH and send premium to maker                 // converting to WETH instead of forwarding native ETH to the maker has two benefits;                 // 1) active market makers will mostly be using WETH not native ETH                 // 2) attack surface for re-entrancy is reduced                 IWETH(weth).deposit{value: msg.value}();                 IWETH(weth).transfer(order.maker, msg.value);             } else {                 ERC20(order.baseAsset).safeTransferFrom(msg.sender, order.maker, order.premium);             } ```  Transfer in the assets:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L366-L371  ```solidity         // filling short call: transfer assets from maker to contract         if (!order.isLong && order.isCall) {             _transferERC20sIn(order.erc20Assets, order.maker);             _transferERC721sIn(order.erc721Assets, order.maker);             return positionId;         } ```  And wait for expiration, knowing that all attempts to exercise will revert:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L435-L437  ```solidity             } else {                 ERC20(order.baseAsset).safeTransferFrom(msg.sender, address(this), order.strike);             } ```  Then recover her assets:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L508-L519  ```solidity         // transfer assets from putty to owner if put is exercised or call is expired         if ((order.isCall && !isExercised) || (!order.isCall && isExercised)) {             _transferERC20sOut(order.erc20Assets);             _transferERC721sOut(order.erc721Assets);              // for call options the floor token ids are saved in the long position in fillOrder(),             // and for put options the floor tokens ids are saved in the short position in exercise()             uint256 floorPositionId = order.isCall ? longPositionId : uint256(orderHash);             _transferFloorsOut(order.floorTokens, positionFloorAssetTokenIds[floorPositionId]);              return;         } ```  ## Recommended Mitigation Steps  Consider checking that strike is positive before transfer in all the cases, for example:  ```solidity             } else { +               if (order.strike > 0) {                     ERC20(order.baseAsset).safeTransferFrom(msg.sender, address(this), order.strike); +               }             } ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/417", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/415", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/413", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/412", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/411", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/409", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/408", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/407", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/403", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/402", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/399", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/398", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "`cancel()` function does not check if the order already was filled at some point.", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/396", "labels": ["bug", "help wanted", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L526   # Vulnerability details  ## Impact An **order** could be canceled even after the **order** was filled. Even if this does not affect any other part of the process, the mapping `cancelledOrders` still gets updated and a `CancelledOrder` event is emitted, this could cause issues on a front-end or monitoring tools working with the protocol.  ## Proof of Concept  ```solidity function cancel(Order memory order) public {         require(msg.sender == order.maker, \"Not your order\");          bytes32 orderHash = hashOrder(order);          // mark the order as cancelled         cancelledOrders[orderHash] = true;          emit CancelledOrder(orderHash, order);     } ```  ## Recommended Mitigation Steps Check if the order was already filled before. This could be done by checking if an `nft` with the order id was created before.  ```diff function cancel(Order memory order) public {         require(msg.sender == order.maker, \"Not your order\");          bytes32 orderHash = hashOrder(order);          +       require(ownerOf(uint256(orderHash)) == address(0), \"This order was already filled\");          // mark the order as cancelled         cancelledOrders[orderHash] = true;          emit CancelledOrder(orderHash, order);     } ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/393", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/392", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/391", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/390", "labels": ["bug", "QA (Quality Assurance)", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/385", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/384", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "setBaseURI() and setFee() functions are payable but don't perform any logic on assets", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/383", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-06-putty-findings", "body": "setBaseURI() and setFee() functions are payable but don't perform any logic on assets"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/381", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/379", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/378", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "The contract serves as a flashloan pool without fee", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/377", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "old-submission-method"], "target": "2022-06-putty-findings", "body": "The contract serves as a flashloan pool without fee"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/374", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Zero strike call options will avoid paying system fee", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/373", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L494-L506   # Vulnerability details  Zero and near zero strike calls are common derivative type. For such derivatives the system will not be receiving fees are the fee is now formulated as a fraction of order strike.  Also, it can be a problem for OTM call options, when the option itself is nearly worthless, while the fee will be substantial as strike will be big. Say 1k ETH BAYC call doesn't have much value, but the associated fee will be 10x of usual fee, i.e. substantial, while there is nothing to justify that.  Marking this as medium severity as that's a design specifics that can turn off or distort core system fee gathering.  ## Proof of Concept  Currently fee is linked to the order strike which makes it vary heavily for different types of orders, for example deep ITM and OTM calls:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L494-L506  ```solidity         // transfer strike to owner if put is expired or call is exercised         if ((order.isCall && isExercised) || (!order.isCall && !isExercised)) {             // send the fee to the admin/DAO if fee is greater than 0%             uint256 feeAmount = 0;             if (fee > 0) {                 feeAmount = (order.strike * fee) / 1000;                 ERC20(order.baseAsset).safeTransfer(owner(), feeAmount);             }              ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike - feeAmount);              return;         } ```  ## Recommended Mitigation Steps  Consider linking the fee to option premium as this is option value that cannot be easily manipulated and exactly corresponds to the trading volume of the system.  I.e. consider moving fee gathering to fillOrder:  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L322-L340  ```solidity         // transfer premium to whoever is short from whomever is long         if (order.isLong) {             ERC20(order.baseAsset).safeTransferFrom(order.maker, msg.sender, order.premium);         } else {             // handle the case where the user uses native ETH instead of WETH to pay the premium             if (weth == order.baseAsset && msg.value > 0) {                 // check enough ETH was sent to cover the premium                 require(msg.value == order.premium, \"Incorrect ETH amount sent\");                  // convert ETH to WETH and send premium to maker                 // converting to WETH instead of forwarding native ETH to the maker has two benefits;                 // 1) active market makers will mostly be using WETH not native ETH                 // 2) attack surface for re-entrancy is reduced                 IWETH(weth).deposit{value: msg.value}();                 IWETH(weth).transfer(order.maker, msg.value);             } else {                 ERC20(order.baseAsset).safeTransferFrom(msg.sender, order.maker, order.premium);             }         } ```  "}, {"title": "Create a short call order with non empty floor makes the option impossible to exercise and withdraw", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/369", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L296-L298   # Vulnerability details  ## Impact  **HIGH** - assets can be lost If a short call order is created with non empty floorTokens array, the taker cannot exercise. Also, the maker cannot withdraw after the expiration. The maker will still get premium when the order is filled. If the non empty floorTokens array was included as an accident, it is a loss for both parties: the taker loses premium without possible exercise, the maker loses the locked ERC20s and ERC721s. This bug is not suitable for exploitation to get a 'free' premium by creating not exercisable options, because the maker will lose the ERC20s and ERC721s without getting any strike. In that sense it is similar but different issue to the `Create a short put order with zero tokenAmount makes the option impossible to exercise`, therefore reported separately.   ## Proof of Concept  - [proof of concept](https://gist.github.com/zzzitron/9f83516255fa6153a4deb04f2163a0b3#file-2022-07-puttyv2-t-sol-L153-L202) - [reference case](https://gist.github.com/zzzitron/9f83516255fa6153a4deb04f2163a0b3#file-2022-07-puttyv2-t-sol-L194-L21://gist.github.com/zzzitron/9f83516255fa6153a4deb04f2163a0b3#file-2022-07-puttyv2-t-sol-L204-L226)  The proof of concept shows a scenario where babe makes an short call order with non empty `floorTokens` array. Bob filled the order, and now he has long call option NFT. He wants to exercise his option and calls `exercise`. There are two cases. - case 1: he calls exercise with empty `floorAssetTokenIds` array - case 2: he calls exercise with non-empty `floorAssetTokenIds` array with matching length to the `orders.floorTokens`  In the case1, [the input `floorAssetTokenIds` were checked to be empty for put orders](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L406), and his call passes this requirement. But eventually `_transferFloorsIn` was called and he gets `Index out of bounds` error, because `floorTokens` is not empty [which does not match with empty `floorAssetTokenIds`](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L627-L629). ```solidity // case 1   // PuttyV2.sol: _transferFloorsIn called by exercise   // The floorTokens and floorTokenIds do not match the lenghts   // floorTokens.length is not zero, while floorTokenIds.length is zero         ERC721(floorTokens[i]).safeTransferFrom(from, address(this), floorTokenIds[i]); ```  In the case2, [the input `floorAssetTokenIds` were checked to be empty for put orders](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L406), but it is not empty. So it reverts. ``` // case2 // PuttyV2.sol: exercise // non empty floorAssetTokenIds array is passed for put option, it will revert          !order.isCall             ? require(floorAssetTokenIds.length == order.floorTokens.length, \"Wrong amount of floor tokenIds\")             : require(floorAssetTokenIds.length == 0, \"Invalid floor tokenIds length\"); ```  After the option is expired, the maker - babe is trying to withdraw but fails due to the [same issue with the case1](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L516). ```solidity // maker trying to withdraw // PuttyV2.sol: withdraw    _transferFloorsOut(order.floorTokens, positionFloorAssetTokenIds[floorPositionId]); ```  Note on the poc: - The [test for case1 is commented out](https://gist.github.com/zzzitron/9f83516255fa6153a4deb04f2163a0b3#file-2022-07-puttyv2-t-sol-L182-L183) because foundry could not catch the revert. But by running the test with un-commenting these lines will show that the call reverts with `Index out of bounds`. - For the same reason the [withdraw](https://gist.github.com/zzzitron/9f83516255fa6153a4deb04f2163a0b3#file-2022-07-puttyv2-t-sol-L199-L200) also is commented out - The reference case just shows that it works as intended when the order does not contain non-empty `floorTokens`.  ## Tools Used  foundry  ## Recommended Mitigation Steps  It happens because the [`fillOrder` does not ensure](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L296-L298) the `order.floorTokens` to be empty when the order is short call.    "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/366", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/364", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/358", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/351", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Use of Solidity version 0.8.13 which has two known issues applicable to PuttyV2", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/348", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L2   # Vulnerability details  The solidity version 0.8.13 has below two issues applicable to PuttyV2 1) Vulnerability related to ABI-encoding. ref : https://blog.soliditylang.org/2022/05/18/solidity-0.8.14-release-announcement/ This vulnerability can be misused since the function hashOrder() and hashOppositeOrder() has applicable conditions. \"...pass a nested array directly to another external function call or use abi.encode on it.\"  2) Vulnerability related to 'Optimizer Bug Regarding Memory Side Effects of Inline Assembly' ref : https://blog.soliditylang.org/2022/06/15/solidity-0.8.15-release-announcement/ PuttyV2 inherits solidity contracts from openzeppelin and solmate, and both these uses inline assembly, and optimization is enabled while compiling.  ## Recommended Mitigation Steps Use recent Solidity version 0.8.15 which has the fix for these issues    "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/344", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/343", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/340", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Payable admin functions", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/338", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Payable admin functions"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/337", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/335", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/334", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/331", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/330", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/329", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Putty position tokens may be minted to non ERC721 receivers", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/327", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-putty-findings", "body": "Putty position tokens may be minted to non ERC721 receivers"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/320", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/317", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/315", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/314", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/313", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/312", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/309", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/307", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/306", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/304", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "[Denial-of-Service] Contract Owner Could Block Users From Withdrawing Their Strike", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/296", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L500   # Vulnerability details  ## Proof-of-Concept  When users withdraw their strike escrowed in Putty contract, Putty will charge a certain amount of fee from the strike amount. The fee will first be sent to the contract owner, and the remaining strike amount will then be sent to the users.  [https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L500](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L500)  ```solidity function withdraw(Order memory order) public {  ..SNIP..   // transfer strike to owner if put is expired or call is exercised  if ((order.isCall && isExercised) || (!order.isCall && !isExercised)) {   // send the fee to the admin/DAO if fee is greater than 0%   uint256 feeAmount = 0;   if (fee > 0) {    feeAmount = (order.strike * fee) / 1000;    ERC20(order.baseAsset).safeTransfer(owner(), feeAmount);   }    ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike - feeAmount);    return;  }  ..SNIP.. } ```  There are two methods on how the owner can deny user from withdrawing their strike amount from the contract  #### Method #1 - Set the `owner()` to `zero` address  Many of the token implementations do not allow transfer to `zero` address ([Reference](https://github.com/d-xo/weird-erc20#revert-on-transfer-to-the-zero-address)). Popular ERC20 implementations such as the following Openzeppelin's ERC20 implementation do not allow transfer to `zero` address, and will revert immediately if the `to` address (recipient) points to a `zero` address during a transfer.  [https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fbf494511fd522b931f7f92e2df87d671ea8b0b/contracts/token/ERC20/ERC20.sol#L226](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fbf494511fd522b931f7f92e2df87d671ea8b0b/contracts/token/ERC20/ERC20.sol#L226)  ```solidity function _transfer(     address from,     address to,     uint256 amount ) internal virtual {     require(from != address(0), \"ERC20: transfer from the zero address\");     require(to != address(0), \"ERC20: transfer to the zero address\");      _beforeTokenTransfer(from, to, amount);      uint256 fromBalance = _balances[from];     require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");     unchecked {         _balances[from] = fromBalance - amount;         // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by         // decrementing then incrementing.         _balances[to] += amount;     }      emit Transfer(from, to, amount);      _afterTokenTransfer(from, to, amount); } ```  It is possible for the owner to transfer the ownership to a `zero` address, thus causing the fee transfer to the contract owner to always revert. When the fee transfer always reverts, no one can withdraw their strike amount from the contract.  This issue will affect all orders that adopt a `baseAsset` that reverts when transferring to `zero` address.  #### Method #2 - If `baseAsset` is a ERC777 token  > Note: `owner()` could point to a contract or EOA account. By pointing to a contract, the contract could implement logic to revert whenever someone send tokens to it.  ERC777 contains a `tokensReceived` hook that will notify the recipient whenever someone sends some tokens to the recipient .   Assuming that the `baseAsset` is a ERC77 token, the recipient, which is the `owner()` in this case, could always revert whenever `PuttyV2` contract attempts to send the fee to recipient. This will cause the `withdraw` function to revert too. As a result, no one can withdraw their strike amount from the contract.  This issue will affect all orders that has ERC777 token as its `baseAsset`.  ## Impact  User cannot withdraw their strike amount and their asset will be stuck in the contract.  ## Recommended Mitigation Steps  It is recommended to adopt a [withdrawal pattern](https://docs.soliditylang.org/en/v0.8.15/common-patterns.html#withdrawal-from-contracts) for retrieving owner fee.  Instead of transferring the fee directly to owner address during withdrawal, save the amount of fee that the owner is entitled to in a state variable. Then, implement a new function that allows the owner to withdraw the fee from the `PuttyV2` contract.  Consider the following implementation. In the following example, there is no way for the owner to perform denial-of-user because the outcome of the fee transfer (succeed or fail) to the owner will not affect the user's strike withdrawal process.   This will give users more assurance and confidence about the security of their funds stored within Putty.  ```solidity mapping(address => uint256) public ownerFees;  function withdraw(Order memory order) public {  ..SNIP..     // transfer strike to owner if put is expired or call is exercised     if ((order.isCall && isExercised) || (!order.isCall && !isExercised)) {         // send the fee to the admin/DAO if fee is greater than 0%         uint256 feeAmount = 0;         if (fee > 0) {             feeAmount = (order.strike * fee) / 1000;             ownerFees[order.baseAsset] += feeAmount         }          ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike - feeAmount);          return;     }     ..SNIP.. }  function withdrawFee(address baseAsset) public onlyOwner {  uint256 _feeAmount = ownerFees[baseAsset];  ownerFees[baseAsset] = 0;  ERC20(baseAsset).safeTransfer(owner(), _feeAmount); } ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/293", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/292", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/289", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/288", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Put options are free of any fees", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/285", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L450-L451   # Vulnerability details  ## Impact  Fees are expected to be paid whenever an option is exercised (as per the function comment on [L235](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L235)).  ### Put options  If a put option is exercised, the exerciser receives the strike price (initially deposited by the short position holder) denominated in `order.baseAsset`.  ### Call options  If a call option is exercised, the exerciser sends the strike price to Putty and the short position holder is able to withdraw the strike amount.  However, the current protocol implementation is missing to deduct fees for exercised put options. Put options are free of any fees.  ## Proof of Concept  The protocol fee is correctly charged for exercised calls:  [PuttyV2.withdraw](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L494-L506)  ```solidity // transfer strike to owner if put is expired or call is exercised if ((order.isCall && isExercised) || (!order.isCall && !isExercised)) {     // send the fee to the admin/DAO if fee is greater than 0%     uint256 feeAmount = 0;     if (fee > 0) {         feeAmount = (order.strike * fee) / 1000;         ERC20(order.baseAsset).safeTransfer(owner(), feeAmount); // @audit DoS due to reverting erc20 token transfer (weird erc20 tokens, blacklisted or paused owner; erc777 hook on owner receiver side can prevent transfer hence reverting and preventing withdrawal) - use pull pattern @high  // @audit zero value token transfers can revert. Small strike prices and low fee can lead to rounding down to 0 - check feeAmount > 0 @high  // @audit should not take fees if renounced owner (zero address) as fees can not be withdrawn @medium     }      ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike - feeAmount); // @audit fee should not be paid if strike is simply returned to short owner for expired put @high      return; } ```  Contrary, put options are free of any fees:  [PuttyV2.sol#L450-L451](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L450-L451)  ```solidity // transfer strike from putty to exerciser ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike); ```  ## Tools Used  Manual review  ## Recommended mitigation steps  Charge fees also for exercised put options.   "}, {"title": "Options with a small strike price will round down to 0 and can prevent assets to be withdrawn", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/283", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code\r \r https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L499-L500\r \r \r # Vulnerability details\r \r ## Impact\r \r Certain ERC-20 tokens do not support zero-value token transfers and revert. Using such a token as a `order.baseAsset` for a rather small option strike and a low protocol fee rate can lead to rounding down to 0 and prevent asset withdrawals for those positions.\r \r ## Proof of Concept\r \r [PuttyV2.sol#L499-L500](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L499-L500)\r \r ```solidity\r // send the fee to the admin/DAO if fee is greater than 0%\r uint256 feeAmount = 0;\r if (fee > 0) {\r     feeAmount = (order.strike * fee) / 1000;\r     ERC20(order.baseAsset).safeTransfer(owner(), feeAmount); // @audit-info zero-value ERC20 token transfers can revert for certain tokens\r }\r ```\r \r Some ERC20 tokens revert for zero-value transfers (e.g. `LEND`). If used as a `order.baseAsset` and a small strike price, the fee token transfer will revert. Hence, assets and the strike can not be withdrawn and remain locked in the contract.\r \r See [Weird ERC20 Tokens - Revert on Zero Value Transfers](https://github.com/d-xo/weird-erc20#revert-on-zero-value-transfers)\r \r **Example:**\r \r - `order.baseAsset` is one of those weird ERC-20 tokens\r - `order.strike = 999` (depending on the token decimals, a very small option position)\r - `fee = 1` (0.1%)\r \r $((999 * 1) / 1000 = 0.999)$ rounded down to 0 -> zero-value transfer reverting transaction\r \r ## Tools Used\r \r Manual review\r \r ## Recommended mitigation steps\r \r Add a simple check for zero-value token transfers:\r \r ```solidity\r // send the fee to the admin/DAO if fee is greater than 0%\r uint256 feeAmount = 0;\r if (fee > 0) {\r     feeAmount = (order.strike * fee) / 1000;\r \r     if (feeAmount > 0) {\r         ERC20(order.baseAsset).safeTransfer(owner(), feeAmount);\r     }\r }\r ```\r \r \r "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/281", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/280", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/279", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/277", "labels": ["bug", "question", "QA (Quality Assurance)", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/274", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/272", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/271", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/270", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Fee is being deducted when Put is expired and not when it is exercised.", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/269", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code\r \r https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L495-L503\r https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L451\r \r \r # Vulnerability details\r \r ## Impact\r Fee is being deducted when Put is expired and not when it is exercised in `PuttyV2.sol`.\r Comment section of the `setFee()` function mentions `\"fee rate that is applied on exercise\"` which signifies that the fee amount is meant to be deducted from strike only when a position is being exercised (or has been exercised).\r \r But, in function `withdraw()` at [PuttyV2.solL#495-L503](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L495-L503)  the fee is being deducted even when the Put position is not exercised and has expired. \r \r Also, in function `exercise()` there is no fee deduction from the `order.strike` when the Put position is exercised and the strike is being transferred to the caller ([PuttyV2.solL#451](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L451)).\r \r This unintended deduction from assets of Put Shorter and the absence of fee deduction from strike when Put is exercised are directly impacting the assets and therefore marked as Medium Risk.\r \r ## Proof of Concept\r `if` condition present at [PuttyV2.solL#495](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L495) passes if `order.isCall` is `false` and `isExercised` is false.\r \r `feeAmount` becomes positive if `fee > 0` and it gets deducted from the `order.strike` which gets transferred to `msg.sender` at line number [PuttyV2.solL#503](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L503).\r \r ## Tools Used\r Manual Analysis\r \r ## Recommended Mitigation Steps\r 1. Update `if` condition at [PuttyV2.sol#L498](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L498) with `(fee > 0 && order.isCall && isExercised)`\r \r 2. Add feeAmount calculation and deduction after put is exercised and strike is transferred at [PuttyV2.sol#L451](https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L451) as follows:\r \r ```solidity\r uint256 feeAmount = 0;\r if (fee > 0) {\r     feeAmount = (order.strike * fee) / 1000;\r     ERC20(order.baseAsset).safeTransfer(owner(), feeAmount);\r }\r ERC20(order.baseAsset).safeTransfer(msg.sender, order.strike - feeAmount);\r ```\r \r "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/268", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/264", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/262", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/261", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/255", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/241", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/240", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/239", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/237", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "The order maker can cancel the order, after it has been filled.", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/236", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "The order maker can cancel the order, after it has been filled."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/235", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/234", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/233", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/230", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/229", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/228", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Unbounded loops may cause `exercise()`s and `withdraw()`s to fail ", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/227", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Unbounded loops may cause `exercise()`s and `withdraw()`s to fail "}, {"title": "`fillOrder()` and `exercise()` may lock Ether sent to the contract, forever", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/226", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L324 https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L338 https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L436   # Vulnerability details  ## Impact `fillOrder()` and `exercise()` have code paths that require Ether to be sent to them (e.g. using WETH as the base asset, or the provision of the exercise price), and therefore those two functions have the `payable` modifier. However, there are code paths within those functions that do not require Ether. Ether passed to the functions, when the non-Ether code paths are taken, is locked in the contract forever, and the sender gets nothing extra in return for it.   ## Proof of Concept Ether can't be pulled from the `order.maker` during the filling of a long order, so `msg.value` shouldn't be provided here: ```solidity File: contracts/src/PuttyV2.sol   #1  323           if (order.isLong) { 324               ERC20(order.baseAsset).safeTransferFrom(order.maker, msg.sender, order.premium); 325           } else { ``` https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L323-L325   If the `baseAsset` isn't WETH during order fulfillment, `msg.value` is unused: ```solidity File: contracts/src/PuttyV2.sol   #2  337               } else { 338                   ERC20(order.baseAsset).safeTransferFrom(msg.sender, order.maker, order.premium); 339               } ``` https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L337-L339   Same for the exercise of call options: ```solidity File: contracts/src/PuttyV2.sol   #3  435               } else { 436                   ERC20(order.baseAsset).safeTransferFrom(msg.sender, address(this), order.strike); 437               } ``` https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L435-L437   ## Tools Used Code inspection  ## Recommended Mitigation Steps Add a `require(0 == msg.value)` for the above three conditions   "}, {"title": "Put option sellers can prevent exercise by specifying zero amounts, or non-existant tokens", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/223", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L453-L454   # Vulnerability details  ## Impact Put option buyers pay an option premium to the seller for the privilege of being able to 'put' assets to the seller and get the strike price for it rather than the current market price. If they're unable to perform the 'put', they've paid the premium for nothing, and essentially have had funds stolen from them.   ## Proof of Concept If the put option seller includes in `order.erc20Assets`, an amount of zero for any of the assets, or specifies an asset that doesn't currently have any code at its address, the put buyer will be unable to exercise the option, and will have paid the premium for nothing: ```solidity File: contracts/src/PuttyV2.sol   #1  453               // transfer assets from exerciser to putty 454               _transferERC20sIn(order.erc20Assets, msg.sender); ``` https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L453-L454   The function reverts if any amount is equal to zero, or the asset doesn't exist: ```solidity File: contracts/src/PuttyV2.sol   #2  593       function _transferERC20sIn(ERC20Asset[] memory assets, address from) internal { 594           for (uint256 i = 0; i < assets.length; i++) { 595               address token = assets[i].token; 596               uint256 tokenAmount = assets[i].tokenAmount; 597    598               require(token.code.length > 0, \"ERC20: Token is not contract\"); 599               require(tokenAmount > 0, \"ERC20: Amount too small\"); 600    601               ERC20(token).safeTransferFrom(from, address(this), tokenAmount); 602           } 603       } ``` https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L593-L603    ## Tools Used Code inspection   ## Recommended Mitigation Steps Verify the asset amounts and addresses during `fillOrder()`, and allow exercise if the token no longer exists at that point in time    "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/220", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/218", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/214", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/213", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/212", "labels": ["bug", "QA (Quality Assurance)", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/210", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/204", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/200", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/199", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Use a reentrancy guard ", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/198", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-06-putty-findings", "body": "Use a reentrancy guard "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/195", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/194", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/191", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/190", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/189", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/188", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/187", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Order cancellation is prone to frontrunning and is dependent on a centralized database", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/186", "labels": ["bug", "help wanted", "2 (Med Risk)", "resolved", "sponsor confirmed", "old-submission-method"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/3b6b844bc39e897bd0bbb69897f2deff12dc3893/contracts/src/PuttyV2.sol#L526-L535   # Vulnerability details  ## Impact  Order cancellation requires makers to call `cancel()`, inputting the order as a function parameter. This is the only cancellation method, and it can cause two issues.  This first issue is that it is an on-chain signal for MEV users to frontrun the cancellation and fill the order.  The second issue is the dependency to a centralized service for cancelling the order. As orders are signed off chain, they would be stored in a centralized database. It is unlikely that an end user would locally record all the orders they make. This means that when cancelling an order, maker needs to request the order parameters from the centralized service. If the centralized service goes offline, it could allow malicious parties who have a copy of the order database to fill orders that would have been cancelled otherwise.  ## Proof of Concept  1. Bob signs an order which gets recorded in Putty servers. 2. Alice mirrors all the orders using Putty APIs. 3. Putty servers go offline. 4. Bob wants to cancel his order because changing token prices makes his order less favourable to him. 5. Bob cannot cancel his order because Putty servers are down and he does not remember the exact amounts of tokens he used. 6. Alice goes through all the orders in her local mirror and fulfills the non-cancelled orders, including Bob's, with extremely favourable terms for herself.  ## Tools Used  Pen & paper.  ## Recommended Mitigation Steps  Aside from the standard order cancellation method, have an extra method to cancel all orders of a caller. This can be achieved using a \"minimum valid nonce\" state variable, as a mapping from user address to nonce.  ```solidity mapping(address => uint256) minimumValidNonce; ```  Allow users to increment their `minimumValidNonce`. Make sure the incrementation function do not allow incrementing more than `2**64` such that callers cannot lock themselves out of creating orders by increasing `minimumValidNonce` to `2**256-1` by mistake. Then, prevent filling orders if `order.nonce < minimumValidNonce`.  Another method to achieve bulk cancelling is using counters. For example, Seaport [uses counters](https://github.com/ProjectOpenSea/seaport/blob/171f2cd7faf13b2bf0455851499f1981274977f7/contracts/lib/CounterManager.sol), which is an extra order parameter that has to match the corresponding counter state variable. It allows maker to cancel all his orders by [incrementing the counter state variable by one](https://github.com/ProjectOpenSea/seaport/blob/171f2cd7faf13b2bf0455851499f1981274977f7/contracts/lib/Consideration.sol#L475-L478).   Either of these extra cancellation methods would enable cancelling orders without signalling to MEV bots, and without a dependency to a centralized database.  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/184", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/182", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/181", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/180", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/179", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/178", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/177", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "It's possible to cancel orders after they are filled and exercised which would make contract storage state to be in contradiction state", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/173", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "It's possible to cancel orders after they are filled and exercised which would make contract storage state to be in contradiction state"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/169", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/167", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/166", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/163", "labels": ["bug", "QA (Quality Assurance)", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/162", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/160", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/159", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/154", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/153", "labels": ["bug", "QA (Quality Assurance)", "high quality QA"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/150", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/147", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/146", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/142", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Long whitelist could cause out of gas error", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/137", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-06-putty-findings", "body": "Long whitelist could cause out of gas error"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/125", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/119", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Order duration can be set to 0 by Malicious maker", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/107", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-06-putty-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-06-putty/blob/main/contracts/src/PuttyV2.sol#L287   # Vulnerability details  ## Impact A malicious maker can set a minimum order duration as 0 which means order will instantly expire after filling. Taker will get only the withdraw option and that too with fees on strike price, thus forcing the taker to lose money in this meaningless transaction  ## Proof of Concept !. Maker creates an order with zero Order duration 2. Taker fills this order but the order instantly expires since duration was 0 3. Taker gets the only option to withdraw with fees on strike price  ## Recommended Mitigation Steps Enforce atleast x days of duration  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/102", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/100", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/99", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/94", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/92", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Malicious long options can be used by makers to DOS takers", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-06-putty-findings", "body": "Malicious long options can be used by makers to DOS takers"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/86", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/84", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "cancel() function does not check if the order has already been filled", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/81", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "cancel() function does not check if the order has already been filled"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/75", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "filled orders can be cancelled", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/73", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "filled orders can be cancelled"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/70", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "orders can be cancelled at any time", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "orders can be cancelled at any time"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/59", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-06-putty-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-06-putty-findings", "body": "QA Report"}, {"title": "Overlap Between `ERC721.transferFrom()` and `ERC20.transferFrom()` Allows `order.erc20Assets` or `order.baseAsset` To Be ERC721 Rather Than ERC20", "html_url": "https://github.com/code-423n4/2022-06-putty-findings/issues/52", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-06-putty-findings", "body": "Overlap Between `ERC721.transferFrom()` and `ERC20.transferFrom()` Allows `order.erc20Assets` or `order.baseAsset` To Be ERC721 Rather Than ERC20"}]