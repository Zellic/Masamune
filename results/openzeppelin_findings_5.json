[{"title": "SafeERC20 and IGnosisAuction in RibbonDeltaVault", "body": "SafeERC20 and IGnosisAuction in RibbonDeltaVault", "html_url": "https://blog.openzeppelin.com/ribbon-finance-audit#safeerc20-and-ignosisauction-in-ribbondeltavault", "labels": ["OpenZeppelin"]}, {"title": "IOtoken in StrikeSelection", "body": "IOtoken in StrikeSelection", "html_url": "https://blog.openzeppelin.com/ribbon-finance-audit#iotoken-in-strikeselection", "labels": ["OpenZeppelin"]}, {"title": "To improve the overall legibility and maintainability of the codebase, consider removing any unused import statements.", "body": "To improve the overall legibility and maintainability of the codebase, consider removing any unused import statements.", "html_url": "https://blog.openzeppelin.com/ribbon-finance-audit#to-improve-the-overall-legibility-and-maintainability-of-the-codebase,-consider-removing-any-unused-import-statements.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 35fd1001b4c0b4b76b47e1a88dac8f6c2606b6f1 in PR#113. SafeERC20 is still imported in RibbonDeltaVault but not used.", "body": "Update: Partially fixed in commit 35fd1001b4c0b4b76b47e1a88dac8f6c2606b6f1 in PR#113. SafeERC20 is still imported in RibbonDeltaVault but not used.", "html_url": "https://blog.openzeppelin.com/ribbon-finance-audit#update:-partially-fixed-in-commit-35fd1001b4c0b4b76b47e1a88dac8f6c2606b6f1-in-pr#113.-safeerc20-is-still-imported-in-ribbondeltavault-but-not-used.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Overloaded error message", "body": "[N01] Overloaded error message", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#[n01]-overloaded-error-message", "labels": ["OpenZeppelin"]}, {"title": "This error message is too vague. The error message, \"Sender cannot cancel the exchange proposal\", does not provide enough information for a user to correct the problem.", "body": "This error message is too vague. The error message, \"Sender cannot cancel the exchange proposal\", does not provide enough information for a user to correct the problem.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#this-error-message-is-too-vague.-the-error-message,-\"sender-cannot-cancel-the-exchange-proposal\",-does-not-provide-enough-information-for-a-user-to-correct-the-problem.", "labels": ["OpenZeppelin"]}, {"title": "This error subtly handles 3 separate failure cases:", "body": "This error subtly handles 3 separate failure cases:", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#this-error-subtly-handles-3-separate-failure-cases:", "labels": ["OpenZeppelin"]}, {"title": "When the proposal is in the Proposed state and the msg.sender is not the exchanger.", "body": "When the proposal is in the Proposed state and the msg.sender is not the exchanger.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#when-the-proposal-is-in-the-proposed-state-and-the-msg.sender-is-not-the-exchanger.", "labels": ["OpenZeppelin"]}, {"title": "When the proposal is in the Approved state and the msg.sender is not the contract owner.", "body": "When the proposal is in the Approved state and the msg.sender is not the contract owner.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#when-the-proposal-is-in-the-approved-state-and-the-msg.sender-is-not-the-contract-owner.", "labels": ["OpenZeppelin"]}, {"title": "When the proposal is in any state aside from Proposed and Approved.", "body": "When the proposal is in any state aside from Proposed and Approved.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#when-the-proposal-is-in-any-state-aside-from-proposed-and-approved.", "labels": ["OpenZeppelin"]}, {"title": "Error messages should be informative enough that a user understands and is able to correct the error. Consider splitting up this require into multiple cases with their own error messages, to help users troubleshoot in the event of a revert. This can be done with if/else clauses and require statements.", "body": "Error messages should be informative enough that a user understands and is able to correct the error. Consider splitting up this require into multiple cases with their own error messages, to help users troubleshoot in the event of a revert. This can be done with if/else clauses and require statements.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#error-messages-should-be-informative-enough-that-a-user-understands-and-is-able-to-correct-the-error.-consider-splitting-up-this-require-into-multiple-cases-with-their-own-error-messages,-to-help-users-troubleshoot-in-the-event-of-a-revert.-this-can-be-done-with-if/else-clauses-and-require-statements.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #8344.", "body": "Conclusions  No critical and two high severity issues were found. Some changes were proposed to modify the design of GrandaMento to reduce the potential attack surface. Some changes were proposed to help follow best practices, and some issues were reported to inform users of potentially unseen risks of the GrandaMento contract.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#update:-fixed-in-pull-request-#8344.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Unclear comments", "body": "[N02] Unclear comments", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#[n02]-unclear-comments", "labels": ["OpenZeppelin"]}, {"title": "Within the GrandaMento contract, this comment appears to be unfinished, and this comment could be clearer, specifying that the user who is performing the trade is the one \u201cselling\u201d (rather than the protocol being the one \u201cselling\u201d).", "body": "Within the GrandaMento contract, this comment appears to be unfinished, and this comment could be clearer, specifying that the user who is performing the trade is the one \u201cselling\u201d (rather than the protocol being the one \u201cselling\u201d).", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#within-the-grandamento-contract,-this-comment-appears-to-be-unfinished,-and-this-comment-could-be-clearer,-specifying-that-the-user-who-is-performing-the-trade-is-the-one-\u201cselling\u201d-(rather-than-the-protocol-being-the-one-\u201cselling\u201d).", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the two comments identified above to make the codebase clearer for reviewers and future developers.", "body": "Consider updating the two comments identified above to make the codebase clearer for reviewers and future developers.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-granda-mento#consider-updating-the-two-comments-identified-above-to-make-the-codebase-clearer-for-reviewers-and-future-developers.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Undocumented implicit approval requirements", "body": "[N01] Undocumented implicit approval requirements", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n01]-undocumented-implicit-approval-requirements", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, the contracts implicitly assume that they have been granted an appropriate allowance before calling transferFrom or safeTransferFrom. For instance:", "body": "Throughout the codebase, the contracts implicitly assume that they have been granted an appropriate allowance before calling transferFrom or safeTransferFrom. For instance:", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#throughout-the-codebase,-the-contracts-implicitly-assume-that-they-have-been-granted-an-appropriate-allowance-before-calling-transferfrom-or-safetransferfrom.-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "Within the burn function in WETHGateway", "body": "Within the burn function in WETHGateway", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#within-the-burn-function-in-wethgateway", "labels": ["OpenZeppelin"]}, {"title": "Within the put function of BetaBank", "body": "Within the put function of BetaBank", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#within-the-put-function-of-betabank", "labels": ["OpenZeppelin"]}, {"title": "Within the mint function of BToken", "body": "Within the mint function of BToken", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#within-the-mint-function-of-btoken", "labels": ["OpenZeppelin"]}, {"title": "In favor of explicitness and to improve the overall clarity of the codebase, consider documenting all approval requirements in the corresponding functions\u2019 comments.", "body": "In favor of explicitness and to improve the overall clarity of the codebase, consider documenting all approval requirements in the corresponding functions\u2019 comments.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-favor-of-explicitness-and-to-improve-the-overall-clarity-of-the-codebase,-consider-documenting-all-approval-requirements-in-the-corresponding-functions\u2019-comments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed.", "body": "The Beta team stated that they wish to maintain the current design in order to retain the ability to emit different error messages in the various contracts.  [L03] Errors and omissions in events throughout codebase  Many of the event definitions are lacking indexed parameters. Some examples include:  The Mint and Burn events in BToken.  Most of the events in BetaConfig.  The events in BetaBank.  The events in BetaOracleUniswapV2  Some events only include the new value of a state variable being set. It is considered best practice to emit both the old and the new values. Some examples include:  The governor-related events in BetaOracleUniswapV2, BetaBank, and BetaConfig.  The SetX events in BetaBank.  Finally, the AcceptGovernor event can be removed in all contracts, replacing it with the SetGovernor event.  Consider making the above changes to the codebase to avoid hindering the task of off-chain services searching and filtering for events.  Update: Partially fixed in PR#67.  [L04] initialize can be frontrun  The BetaBank is designed with upgradeability in mind, and uses an initialize function rather than a constructor to facilitate future upgrades. This is a common upgradeability pattern, but since the initialize function is public, anyone can call it with arbitrary or malicious values. If the contract is not initialized in the same transaction as it is constructed, then a legitimate actor could be frontrun by a malicious actor when calling initialize.  Consider initializing contracts within the same transaction as their construction to be a priority in the design of the upgrade scheme and deployment mechanisms for this project. Alternatively, consider limiting who can call the initialize function.  Update: Acknowledged. The Beta team state:  Keep as is. During deployment, we use proxy deploy pattern.  [L05] Interest rate tier deviates from whitepaper  Section 2.6 of the Beta whitepaper states that The optimal range used by the protocol is [0.7, 0.8], and the interest rate remains constant while utilization is within this range. The notation used indicates this range is inclusive and the relevant equations corroborate that fact.  However, the corresponding code in BetaInterestModelV1 sets the range where the interest rate remains stable as .7 <= u < .8. Note that the range there is exclusive of .8.  To reduce confusion and clarify intentions, consider bringing the implementation and the whitepaper into agreement.   The Beta team state:  At 0.8, the rate wont get updated anyways, so its the same.  [L06] Lack of documentation  There are several instances throughout the codebase where NatSpec is missing or incomplete. Some examples of this are:  Functions in WETHGateway are missing NatSpec @returns.  WETHGateways constructor is missing NatSpec comments.  BTokens constructor is missing NatSpec comments.  BetaOracleUniswapV2 is missing NatSpec @parameters and @returns for most of its functions.  Additionally, some of the existing NatSpec contains erroneous information. Examples of this include:  The BToken borrow function incorrectly labels debtShare as a @param but it is a @return.  The BetaBank selflessLiquidate functions @param _amount incorrectly states that it Must not exceed half debt.  Additionally, inline comments generally are severely lacking throughout the codebase:  Global variables, such as those in BToken, should be explained.  Constants, such as those in BToken, should be explained.  Modifiers, such as those in BetaBank, should be explained.  Functions containing confusing or complex logic, such as BetaInterestModelV1getNextInterestRate, should have thorough inline comments explaining the logic they implement.  To increase the overall quality and readability of the codebase, consider updating and augmenting the current NatSpec and inline documentation so that all functions, modifiers, variables, and constants are well documented.  Update: Fixed in PR#68.  [L07] Lack of input validation  While several of the functions in the codebase that take external input do verify those inputs, there are also several instances of constructors and functions that lack sufficient input validation. This is especially true of functions that take input from trusted parties such as the governor. Even a trusted party may make an error while inputting values, and many clients pass along zero values by default for empty fields.  Instances of functions and constructors lacking input validation include:  The setConfig, setOracle and setInterestModel functions in BetaBank all accept zero address inputs.  The BToken and BetaOracleUniswapV2 constructors both accept zero address inputs. The variables they accept zero addresses for are immutable, so a new deployment would be necessary to correct any mistakes.  The initialize function of BetaBank accepts zero address inputs.  The pause and unpause functions in BetaBank do not check the pause state first, potentially wasting SSTOREs.  Consider implementing require statements where appropriate to validate all user-controlled input.  Update: Fixed in PR#69.  [L08] liquidate rounding leads to incorrect debtValue  BetaBank liquidate function, the  BToken repay, which then returns the number of  fetchDebtShareValue. However, due to rounding, the value returned by  fetchDebtShareValuecan be different than the amount of debt actually paid by a small amount.  To increase the accuracy of the liquidation function, consider having BToken repay return the value of the debt paid off, or alternatively consider looking up the amount repaid with 2 calls to totalLoan.   The Beta team state:  This is the intended behavior.  [L09] Magic constants  Literal values expressed in scientific notation are used throughout the codebase. For example:  On line 441 of BetaBank, where 1e18 is returned by the _fetchPositionLTV function. The literal value is used elsewhere in the same function.  The BetaConfig contract uses the literal value 1e18 extensively to place upper bounds on rates and loan-to-value ratios.  Throughout BetaInterestModelV1 hard-coded numeric values are used.  These hard-coded numeric values often lack any sort of explicit explanatory inline documentation, making the code difficult to read and understand.  To improve readability and overall clarity, consider defining a constant variable for every magic value used, and giving each a clear and self-explanatory name. Alternatively, consider adding detailed inline comments explaining how the literal values were calculated or why they were chosen.    [L10] Using old Solidity version  Throughout the codebase, Solidity 0.8.3 is used. However, at the time of writing there is one known bug in version 0.8.3. Consider upgrading the codebase to use the latest version of Solidity, 0.8.6.  Update: Fixed in PR#83.  [L11] Divisions by zero possible  There are instances in the codebase where divisions by zero are not actively prevented. For example, this happens on line 103 in BetaOracleUniswapV2. Although divisions by zero will result in reversions, they will not have error messages, making failed transaction more difficult to debug by users.  Consider actively preventing divisions by zero with appropriate require statements that have informative and user-friendly error messages.  Update: Fixed in PR#69. minTwapTime can no longer be 0.  [L12] Using tx.origin excludes smart contract wallets  The allowActionFor function in BetaBank takes two arguments, a position owner and a message sender. It returns true if the provided sender is allowed to act on behalf of the provided owner.  The onlyOwner modifier in the BetaBank contract is simply a wrapper around allowActionFor that always provides msg.sender as the sender argument. This modifier is used on most position management functions in BetaBank.  The result is that to fully interact with BetaBank, a caller must either be:1. The owner of a position and also whitelisted in the ownerWhitelists mapping or2. The initiator of a transaction where the caller to BetaBank is in the runnerWhitelists(ostensibly this whitelist is reserved for Beta runners).  The runners are outside the scope of this audit, but it is apparent from the second condition alone that smart contract wallets, unable to satisfy the requirement that _owner == tx.origin, will not be able to interact with BetaBank via runners. This means that such wallets will be unable to use the Beta Finance protocol as it is intended to be used.  If this is desirable or expected behavior, consider explicitly documenting this restriction alongside the allowActionFor function. Otherwise, consider modifying conditions so that they do not exclude smart contract wallet users from interacting with BetaBank via runners.   The Beta team state:  This is the intended behavior.  Notes & Additional Information  [N01] Undocumented implicit approval requirements  Throughout the codebase, the contracts implicitly assume that they have been granted an appropriate allowance before calling transferFrom or safeTransferFrom. For instance:  Within the burn function in WETHGateway  Within the put function of BetaBank  Within the mint function of BToken  In favor of explicitness and to improve the overall clarity of the codebase, consider documenting all approval requirements in the corresponding functions comments.    [N02] Incomplete interface  IBetaConfig is missing several public functions from the corresponding  BetaConfig contract. Missing functions include  To help clarify intentions and make integrating with the project less error prone, consider including all public and external functions in the appropriate interfaces throughout the codebase.  Update: Partially fixed in PR#70.  [N03] Misleading conditional  line 82 of the BToken contract there is a conditional that tests whether the  To increase overall code clarity and readability, consider limiting conditionals so that they only compare against values that are possible.  Update: Fixed in PR#71.  [N04] Naming issues  Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.  Consider the following suggestions:  In the BetaBank contract  The runnerWhitelists and ownerWhitelists variables and the setRunnerWhitelistsand setOwnerWhitelists functions are unnecessarily pluralized.  The allowActionFor function should be renamed to isPermittedCaller.  The lastCumu variable and the currentPrice0Cumu and currentPrice1Cumu functions should be renamed to include the complete Cumulative word.  The exts variable should be renamed to externalOracles.  The take function should be renamed to takeCollateral.  The put function should be renamed to putCollateral.  The borrow function should be renamed to borrowUnderlying.  The repay function should be renamed to repayUnderlying.  The checkPID modifier should be renamed to checkPIDExists.  The onlyOwner modifier should be renamed to isPermittedByOwner.  In the BToken contract  The totalAvailable variable should be renamed to totalLoanable.  Update: Partially fixed in PR#72. Some of the above changes were made.  [N05] Non-standard implementation of ERC20 metadata  While ERC20 metadata  including decimals, name, and symbol  are all optional parts of the ERC20 standard, they are often relied upon by off-chain services to facilitate user interactions with ERC20 tokens. These off-chain services, ranging from centralized exchanges to wallet clients, often use metadata to present user balances and token information in a user-friendly manner.  The BToken contract has metadata that is based on the underlying token it represents. However instead of storing this data once, it reassembles the metadata of the underlying token as part of every call to the view functions outlined above. This means that the stability of that metadata cannot be relied upon.  While we did not identify a security risk stemming from this behavior in the codebase itself, it may cause unnecessary issues with projects wishing to integrate with BTokens. Since non-stable metadata is abnormal, it could potentially deter other projects from integrating with BTokens. In the worst case, some popular off-chain service could make assumptions about stable metadata that could prove to be problematic and confusing for BToken users.  Consider making BToken metadata stable to simplify ecosystem integrations in the future.    [N06] Inconsistent use of SafeERC20  Contracts throughout the codebase that handle ERC20 token transfers and approvals utilize OpenZeppelins SafeERC20 and its methods to perform the function calls safely. However there are a handful of occurrences where this is not the case, and instead the transfers and approvals are performed as calls directly to the token.  While each of these calls is to a currently known token and not to arbitrary ERC20s, future token versions and changes could cause these direct function calls to be unsafe.  Consider using SafeERC20 throughout the entire codebase to ensure all token calls are handled safely.  Update: Fixed in PR#73.  [N07] Not using latest stable version of OpenZeppelin Contracts  An old version of OpenZeppelin Contracts, version 4.0.0, is being used throughout the codebase. Consider using the latest stable release of the library, which is version 4.2.0 at the time of writing.  Update: Fixed in PR#74.  [N08] Redundant require  In the BetaConfig contract, the getCollFactor function, Returns the collateral factor of the given token. However, if the collateral factor is not greater than zero, then the function will revert rather than return.  here and  here), and whenever it is called it is accompanied by an additional  Consider removing the redundancy to save gas, and simplify the codebase.   The Beta team states:  Config may get updated and this extra check will serve as a safety measure for bad config contract implementation.  [N09] Reimplementing OpenZeppelin Contracts library  The lock modifier in BetaBank implements custom logic to prevent reentrancy of security-critical functions. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library.  In particular, consider inheriting from the OpenZeppelin ReentrancyGuard contract, which is already used in the BToken contract. This will help reduce the codes attack surface.  Additionally, the IERC20Metadata interface in BToken reimplements the OpenZeppelin IERC20Metadata interface. Consider instead utilizing this community-vetted implementation.    [N10] Rounding calculation can overflow  In lines 172 and 116 of BToken, the result of an integer division is rounded up. The addition contained in this calculation might overflow if the underlying token operates with extremely large amounts.  Although it is unlikely to encounter a token that can lead to this issue, given the permissionless nature of the system it is not possible to prevent a user from using such a token. Consider using the ceilDiv function from OpenZeppelins Math Library in order to avoid overflows caused by the rounding calculations.  Update: Fixed in PR#76.  [N11] Typos  The codebase contains the following typos:  adjust the rate should be adjusts the rate.  Not constructor should be No constructor.  borrow should be borrowed.  is is should be is.  timePast should be timePassed on line 81 of BToken and line 37 of BetaInterestModelV1.  decimals should be decimal in lines 20 and 69 of BToken.  Must not exceed half debt should be removed.  Consider correcting these typos to improve code readability.  Update: Fixed in PR#77.  [N12] Unused named return  The deploy function in BTokenDeployer names its return value as bToken. However ultimately uses an explicit return, not the named return.  Consider removing unnecessary named returns to clarify the intentions and improve the readability of the codebase.  Update: Fixed in PR#78.  [N13] Unused variable  On line 402 of the BetaBank contract, the variable underlying is declared, but it is never used.  Consider removing unused variables to reduce the size of the codebase and improve overall code clarity.  Update: Fixed in PR#79.  [N14] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. The lack of explicitness can make the codebase less readable, for instance type(uint).max is not as clear to reason about as the more verbose type(uint256).max.  In favor of explicitness, consider replacing all instances of uint with uint256.    Conclusions  0 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  To download a PDF of this audit, click here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-not-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Incomplete interface", "body": "[N02] Incomplete interface", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n02]-incomplete-interface", "labels": ["OpenZeppelin"]}, {"title": "IBetaConfig is missing several public functions from the corresponding", "body": "IBetaConfig is missing several public functions from the corresponding", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#ibetaconfig-is-missing-several-public-functions-from-the-corresponding", "labels": ["OpenZeppelin"]}, {"title": "BetaConfig contract. Missing functions include", "body": "BetaConfig contract. Missing functions include", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#betaconfig-contract.-missing-functions-include", "labels": ["OpenZeppelin"]}, {"title": "To help clarify intentions and make integrating with the project less error prone, consider including all public and external functions in the appropriate interfaces throughout the codebase.", "body": "To help clarify intentions and make integrating with the project less error prone, consider including all public and external functions in the appropriate interfaces throughout the codebase.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#to-help-clarify-intentions-and-make-integrating-with-the-project-less-error-prone,-consider-including-all-public-and-external-functions-in-the-appropriate-interfaces-throughout-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#70.", "body": "Update: Partially fixed in PR#70.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-partially-fixed-in-pr#70.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Misleading conditional", "body": "[N03] Misleading conditional", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n03]-misleading-conditional", "labels": ["OpenZeppelin"]}, {"title": "line 82 of the BToken contract there is a conditional that tests whether the", "body": "line 82 of the BToken contract there is a conditional that tests whether the", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#line-82-of-the-btoken-contract-there-is-a-conditional-that-tests-whether-the", "labels": ["OpenZeppelin"]}, {"title": "To increase overall code clarity and readability, consider limiting conditionals so that they only compare against values that are possible.", "body": "To increase overall code clarity and readability, consider limiting conditionals so that they only compare against values that are possible.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#to-increase-overall-code-clarity-and-readability,-consider-limiting-conditionals-so-that-they-only-compare-against-values-that-are-possible.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#71.", "body": "Update: Fixed in PR#71.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#71.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Naming issues", "body": "[N04] Naming issues", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n04]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.", "body": "Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#good-naming-is-one-of-the-keys-for-readable-code,-and-to-make-the-intention-of-the-code-clear-for-future-changes.-there-are-some-names-in-the-code-that-make-it-confusing-or-hard-to-understand.", "labels": ["OpenZeppelin"]}, {"title": "Consider the following suggestions:", "body": "Consider the following suggestions:", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-the-following-suggestions:", "labels": ["OpenZeppelin"]}, {"title": "In the BetaBank contract", "body": "In the BetaBank contract", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-the-betabank-contract", "labels": ["OpenZeppelin"]}, {"title": "The runnerWhitelists and ownerWhitelists variables and the setRunnerWhitelistsand setOwnerWhitelists functions are unnecessarily pluralized.", "body": "The runnerWhitelists and ownerWhitelists variables and the setRunnerWhitelistsand setOwnerWhitelists functions are unnecessarily pluralized.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-runnerwhitelists-and-ownerwhitelists-variables-and-the-setrunnerwhitelistsand-setownerwhitelists-functions-are-unnecessarily-pluralized.", "labels": ["OpenZeppelin"]}, {"title": "The allowActionFor function should be renamed to isPermittedCaller.", "body": "The allowActionFor function should be renamed to isPermittedCaller.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-allowactionfor-function-should-be-renamed-to-ispermittedcaller.", "labels": ["OpenZeppelin"]}, {"title": "The lastCumu variable and the currentPrice0Cumu and currentPrice1Cumu functions should be renamed to include the complete Cumulative word.", "body": "The lastCumu variable and the currentPrice0Cumu and currentPrice1Cumu functions should be renamed to include the complete Cumulative word.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-lastcumu-variable-and-the-currentprice0cumu-and-currentprice1cumu-functions-should-be-renamed-to-include-the-complete-cumulative-word.", "labels": ["OpenZeppelin"]}, {"title": "The exts variable should be renamed to externalOracles.", "body": "The exts variable should be renamed to externalOracles.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-exts-variable-should-be-renamed-to-externaloracles.", "labels": ["OpenZeppelin"]}, {"title": "The take function should be renamed to takeCollateral.", "body": "The take function should be renamed to takeCollateral.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-take-function-should-be-renamed-to-takecollateral.", "labels": ["OpenZeppelin"]}, {"title": "The put function should be renamed to putCollateral.", "body": "The put function should be renamed to putCollateral.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-put-function-should-be-renamed-to-putcollateral.", "labels": ["OpenZeppelin"]}, {"title": "The borrow function should be renamed to borrowUnderlying.", "body": "The borrow function should be renamed to borrowUnderlying.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-borrow-function-should-be-renamed-to-borrowunderlying.", "labels": ["OpenZeppelin"]}, {"title": "The repay function should be renamed to repayUnderlying.", "body": "The repay function should be renamed to repayUnderlying.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-repay-function-should-be-renamed-to-repayunderlying.", "labels": ["OpenZeppelin"]}, {"title": "The checkPID modifier should be renamed to checkPIDExists.", "body": "The checkPID modifier should be renamed to checkPIDExists.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-checkpid-modifier-should-be-renamed-to-checkpidexists.", "labels": ["OpenZeppelin"]}, {"title": "The onlyOwner modifier should be renamed to isPermittedByOwner.", "body": "The onlyOwner modifier should be renamed to isPermittedByOwner.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-onlyowner-modifier-should-be-renamed-to-ispermittedbyowner.", "labels": ["OpenZeppelin"]}, {"title": "In the BToken contract", "body": "In the BToken contract", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-the-btoken-contract", "labels": ["OpenZeppelin"]}, {"title": "The totalAvailable variable should be renamed to totalLoanable.", "body": "The totalAvailable variable should be renamed to totalLoanable.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-totalavailable-variable-should-be-renamed-to-totalloanable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#72. Some of the above changes were made.", "body": "Update: Partially fixed in PR#72. Some of the above changes were made.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-partially-fixed-in-pr#72.-some-of-the-above-changes-were-made.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Non-standard implementation of ERC20 metadata", "body": "[N05] Non-standard implementation of ERC20 metadata", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n05]-non-standard-implementation-of-erc20-metadata", "labels": ["OpenZeppelin"]}, {"title": "While ERC20 metadata \u2013 including decimals, name, and symbol \u2013 are all optional parts of the ERC20 standard, they are often relied upon by off-chain services to facilitate user interactions with ERC20 tokens. These off-chain services, ranging from centralized exchanges to wallet clients, often use metadata to present user balances and token information in a user-friendly manner.", "body": "While ERC20 metadata \u2013 including decimals, name, and symbol \u2013 are all optional parts of the ERC20 standard, they are often relied upon by off-chain services to facilitate user interactions with ERC20 tokens. These off-chain services, ranging from centralized exchanges to wallet clients, often use metadata to present user balances and token information in a user-friendly manner.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#while-erc20-metadata-\u2013-including-decimals,-name,-and-symbol-\u2013-are-all-optional-parts-of-the-erc20-standard,-they-are-often-relied-upon-by-off-chain-services-to-facilitate-user-interactions-with-erc20-tokens.-these-off-chain-services,-ranging-from-centralized-exchanges-to-wallet-clients,-often-use-metadata-to-present-user-balances-and-token-information-in-a-user-friendly-manner.", "labels": ["OpenZeppelin"]}, {"title": "The BToken contract has metadata that is based on the underlying token it represents. However instead of storing this data once, it reassembles the metadata of the underlying token as part of every call to the view functions outlined above. This means that the stability of that metadata cannot be relied upon.", "body": "The BToken contract has metadata that is based on the underlying token it represents. However instead of storing this data once, it reassembles the metadata of the underlying token as part of every call to the view functions outlined above. This means that the stability of that metadata cannot be relied upon.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-btoken-contract-has-metadata-that-is-based-on-the-underlying-token-it-represents.-however-instead-of-storing-this-data-once,-it-reassembles-the-metadata-of-the-underlying-token-as-part-of-every-call-to-the-view-functions-outlined-above.-this-means-that-the-stability-of-that-metadata-cannot-be-relied-upon.", "labels": ["OpenZeppelin"]}, {"title": "While we did not identify a security risk stemming from this behavior in the codebase itself, it may cause unnecessary issues with projects wishing to integrate with BTokens. Since non-stable metadata is abnormal, it could potentially deter other projects from integrating with BTokens. In the worst case, some popular off-chain service could make assumptions about stable metadata that could prove to be problematic and confusing for BToken users.", "body": "While we did not identify a security risk stemming from this behavior in the codebase itself, it may cause unnecessary issues with projects wishing to integrate with BTokens. Since non-stable metadata is abnormal, it could potentially deter other projects from integrating with BTokens. In the worst case, some popular off-chain service could make assumptions about stable metadata that could prove to be problematic and confusing for BToken users.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#while-we-did-not-identify-a-security-risk-stemming-from-this-behavior-in-the-codebase-itself,-it-may-cause-unnecessary-issues-with-projects-wishing-to-integrate-with-btokens.-since-non-stable-metadata-is-abnormal,-it-could-potentially-deter-other-projects-from-integrating-with-btokens.-in-the-worst-case,-some-popular-off-chain-service-could-make-assumptions-about-stable-metadata-that-could-prove-to-be-problematic-and-confusing-for-btoken-users.", "labels": ["OpenZeppelin"]}, {"title": "Consider making BToken metadata stable to simplify ecosystem integrations in the future.", "body": "Consider making BToken metadata stable to simplify ecosystem integrations in the future.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-making-btoken-metadata-stable-to-simplify-ecosystem-integrations-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistent use of SafeERC20", "body": "[N06] Inconsistent use of SafeERC20", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n06]-inconsistent-use-of-safeerc20", "labels": ["OpenZeppelin"]}, {"title": "Contracts throughout the codebase that handle ERC20 token transfers and approvals utilize OpenZeppelin\u2019s SafeERC20 and its methods to perform the function calls safely. However there are a handful of occurrences where this is not the case, and instead the transfers and approvals are performed as calls directly to the token.", "body": "Contracts throughout the codebase that handle ERC20 token transfers and approvals utilize OpenZeppelin\u2019s SafeERC20 and its methods to perform the function calls safely. However there are a handful of occurrences where this is not the case, and instead the transfers and approvals are performed as calls directly to the token.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#contracts-throughout-the-codebase-that-handle-erc20-token-transfers-and-approvals-utilize-openzeppelin\u2019s-safeerc20-and-its-methods-to-perform-the-function-calls-safely.-however-there-are-a-handful-of-occurrences-where-this-is-not-the-case,-and-instead-the-transfers-and-approvals-are-performed-as-calls-directly-to-the-token.", "labels": ["OpenZeppelin"]}, {"title": "While each of these calls is to a currently \u201cknown token\u201d and not to arbitrary ERC20s, future token versions and changes could cause these direct function calls to be unsafe.", "body": "While each of these calls is to a currently \u201cknown token\u201d and not to arbitrary ERC20s, future token versions and changes could cause these direct function calls to be unsafe.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#while-each-of-these-calls-is-to-a-currently-\u201cknown-token\u201d-and-not-to-arbitrary-erc20s,-future-token-versions-and-changes-could-cause-these-direct-function-calls-to-be-unsafe.", "labels": ["OpenZeppelin"]}, {"title": "Consider using SafeERC20 throughout the entire codebase to ensure all token calls are handled safely.", "body": "Consider using SafeERC20 throughout the entire codebase to ensure all token calls are handled safely.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-using-safeerc20-throughout-the-entire-codebase-to-ensure-all-token-calls-are-handled-safely.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#73.", "body": "Update: Fixed in PR#73.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#73.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Not using latest stable version of OpenZeppelin Contracts", "body": "[N07] Not using latest stable version of OpenZeppelin Contracts", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n07]-not-using-latest-stable-version-of-openzeppelin-contracts", "labels": ["OpenZeppelin"]}, {"title": "An old version of OpenZeppelin Contracts, version 4.0.0, is being used throughout the codebase. Consider using the latest stable release of the library, which is version 4.2.0 at the time of writing.", "body": "An old version of OpenZeppelin Contracts, version 4.0.0, is being used throughout the codebase. Consider using the latest stable release of the library, which is version 4.2.0 at the time of writing.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#an-old-version-of-openzeppelin-contracts,-version-4.0.0,-is-being-used-throughout-the-codebase.-consider-using-the-latest-stable-release-of-the-library,-which-is-version-4.2.0-at-the-time-of-writing.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#74.", "body": "Update: Fixed in PR#74.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#74.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Redundant require", "body": "[N08] Redundant require", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n08]-redundant-require", "labels": ["OpenZeppelin"]}, {"title": "In the BetaConfig contract, the getCollFactor function, \u201cReturns the collateral factor of the given token.\u201d However, if the collateral factor is not greater than zero, then the function will revert rather than return.", "body": "In the BetaConfig contract, the getCollFactor function, \u201cReturns the collateral factor of the given token.\u201d However, if the collateral factor is not greater than zero, then the function will revert rather than return.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-the-betaconfig-contract,-the-getcollfactor-function,-\u201creturns-the-collateral-factor-of-the-given-token.\u201d-however,-if-the-collateral-factor-is-not-greater-than-zero,-then-the-function-will-revert-rather-than-return.", "labels": ["OpenZeppelin"]}, {"title": "here and", "body": "here and", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#here-and", "labels": ["OpenZeppelin"]}, {"title": "here), and whenever it is called it is accompanied by an additional", "body": "here), and whenever it is called it is accompanied by an additional", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#here),-and-whenever-it-is-called-it-is-accompanied-by-an-additional", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the redundancy to save gas, and simplify the codebase.", "body": "Consider removing the redundancy to save gas, and simplify the codebase.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-removing-the-redundancy-to-save-gas,-and-simplify-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. The Beta team states:", "body": "Update: Not fixed. The Beta team states:", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-not-fixed.-the-beta-team-states:", "labels": ["OpenZeppelin"]}, {"title": "Config may get updated and this extra check will serve as a safety measure for bad config contract implementation.", "body": "Config may get updated and this extra check will serve as a safety measure for bad config contract implementation.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#config-may-get-updated-and-this-extra-check-will-serve-as-a-safety-measure-for-bad-config-contract-implementation.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Reimplementing OpenZeppelin Contracts library", "body": "[N09] Reimplementing OpenZeppelin Contracts library", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n09]-reimplementing-openzeppelin-contracts-library", "labels": ["OpenZeppelin"]}, {"title": "The lock modifier in BetaBank implements custom logic to prevent reentrancy of security-critical functions. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library.", "body": "The lock modifier in BetaBank implements custom logic to prevent reentrancy of security-critical functions. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-lock-modifier-in-betabank-implements-custom-logic-to-prevent-reentrancy-of-security-critical-functions.-although-this-does-not-pose-a-security-risk,-consider-always-inheriting-functionality-from-the-secure,-community-vetted,-openzeppelin-contracts-library.", "labels": ["OpenZeppelin"]}, {"title": "In particular, consider inheriting from the OpenZeppelin ReentrancyGuard contract, which is already used in the BToken contract. This will help reduce the code\u2019s attack surface.", "body": "In particular, consider inheriting from the OpenZeppelin ReentrancyGuard contract, which is already used in the BToken contract. This will help reduce the code\u2019s attack surface.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-particular,-consider-inheriting-from-the-openzeppelin-reentrancyguard-contract,-which-is-already-used-in-the-btoken-contract.-this-will-help-reduce-the-code\u2019s-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the IERC20Metadata interface in BToken reimplements the OpenZeppelin IERC20Metadata interface. Consider instead utilizing this community-vetted implementation.", "body": "Additionally, the IERC20Metadata interface in BToken reimplements the OpenZeppelin IERC20Metadata interface. Consider instead utilizing this community-vetted implementation.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#additionally,-the-ierc20metadata-interface-in-btoken-reimplements-the-openzeppelin-ierc20metadata-interface.-consider-instead-utilizing-this-community-vetted-implementation.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Rounding calculation can overflow", "body": "[N10] Rounding calculation can overflow", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n10]-rounding-calculation-can-overflow", "labels": ["OpenZeppelin"]}, {"title": "In lines 172 and 116 of BToken, the result of an integer division is rounded up. The addition contained in this calculation might overflow if the underlying token operates with extremely large amounts.", "body": "In lines 172 and 116 of BToken, the result of an integer division is rounded up. The addition contained in this calculation might overflow if the underlying token operates with extremely large amounts.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-lines-172-and-116-of-btoken,-the-result-of-an-integer-division-is-rounded-up.-the-addition-contained-in-this-calculation-might-overflow-if-the-underlying-token-operates-with-extremely-large-amounts.", "labels": ["OpenZeppelin"]}, {"title": "Although it is unlikely to encounter a token that can lead to this issue, given the permissionless nature of the system it is not possible to prevent a user from using such a token. Consider using the ceilDiv function from OpenZeppelin\u2019s Math Library in order to avoid overflows caused by the rounding calculations.", "body": "Although it is unlikely to encounter a token that can lead to this issue, given the permissionless nature of the system it is not possible to prevent a user from using such a token. Consider using the ceilDiv function from OpenZeppelin\u2019s Math Library in order to avoid overflows caused by the rounding calculations.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#although-it-is-unlikely-to-encounter-a-token-that-can-lead-to-this-issue,-given-the-permissionless-nature-of-the-system-it-is-not-possible-to-prevent-a-user-from-using-such-a-token.-consider-using-the-ceildiv-function-from-openzeppelin\u2019s-math-library-in-order-to-avoid-overflows-caused-by-the-rounding-calculations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#76.", "body": "Update: Fixed in PR#76.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#76.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Typos", "body": "[N11] Typos", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n11]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "\u201cadjust the rate\u201d should be \u201cadjusts the rate\u201d.", "body": "\u201cadjust the rate\u201d should be \u201cadjusts the rate\u201d.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cadjust-the-rate\u201d-should-be-\u201cadjusts-the-rate\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cNot constructor\u201d should be \u201cNo constructor\u201d.", "body": "\u201cNot constructor\u201d should be \u201cNo constructor\u201d.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cnot-constructor\u201d-should-be-\u201cno-constructor\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cborrow\u201d should be \u201cborrowed\u201d.", "body": "\u201cborrow\u201d should be \u201cborrowed\u201d.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cborrow\u201d-should-be-\u201cborrowed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cis is\u201d should be \u201cis\u201d.", "body": "\u201cis is\u201d should be \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cis-is\u201d-should-be-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "timePast should be timePassed on line 81 of BToken and line 37 of BetaInterestModelV1.", "body": "timePast should be timePassed on line 81 of BToken and line 37 of BetaInterestModelV1.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#timepast-should-be-timepassed-on-line-81-of-btoken-and-line-37-of-betainterestmodelv1.", "labels": ["OpenZeppelin"]}, {"title": "\u201cdecimals\u201d should be \u201cdecimal\u201d in lines 20 and 69 of BToken.", "body": "\u201cdecimals\u201d should be \u201cdecimal\u201d in lines 20 and 69 of BToken.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cdecimals\u201d-should-be-\u201cdecimal\u201d-in-lines-20-and-69-of-btoken.", "labels": ["OpenZeppelin"]}, {"title": "\u201cMust not exceed half debt\u201d should be removed.", "body": "\u201cMust not exceed half debt\u201d should be removed.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#\u201cmust-not-exceed-half-debt\u201d-should-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#77.", "body": "Update: Fixed in PR#77.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#77.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Unused named return", "body": "[N12] Unused named return", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n12]-unused-named-return", "labels": ["OpenZeppelin"]}, {"title": "The deploy function in BTokenDeployer names its return value as bToken. However ultimately uses an explicit return, not the named return.", "body": "The deploy function in BTokenDeployer names its return value as bToken. However ultimately uses an explicit return, not the named return.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#the-deploy-function-in-btokendeployer-names-its-return-value-as-btoken.-however-ultimately-uses-an-explicit-return,-not-the-named-return.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing unnecessary named returns to clarify the intentions and improve the readability of the codebase.", "body": "Consider removing unnecessary named returns to clarify the intentions and improve the readability of the codebase.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-removing-unnecessary-named-returns-to-clarify-the-intentions-and-improve-the-readability-of-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#78.", "body": "Update: Fixed in PR#78.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#78.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Unused variable", "body": "[N13] Unused variable", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n13]-unused-variable", "labels": ["OpenZeppelin"]}, {"title": "On line 402 of the BetaBank contract, the variable underlying is declared, but it is never used.", "body": "On line 402 of the BetaBank contract, the variable underlying is declared, but it is never used.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#on-line-402-of-the-betabank-contract,-the-variable-underlying-is-declared,-but-it-is-never-used.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing unused variables to reduce the size of the codebase and improve overall code clarity.", "body": "Consider removing unused variables to reduce the size of the codebase and improve overall code clarity.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#consider-removing-unused-variables-to-reduce-the-size-of-the-codebase-and-improve-overall-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#79.", "body": "Update: Fixed in PR#79.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#update:-fixed-in-pr#79.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Use of uint instead of uint256", "body": "[N14] Use of uint instead of uint256", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#[n14]-use-of-uint-instead-of-uint256", "labels": ["OpenZeppelin"]}, {"title": "Across the codebase, there are hundreds of instances of uint, as opposed to uint256. The lack of explicitness can make the codebase less readable, for instance type(uint).max is not as clear to reason about as the more verbose type(uint256).max.", "body": "Across the codebase, there are hundreds of instances of uint, as opposed to uint256. The lack of explicitness can make the codebase less readable, for instance type(uint).max is not as clear to reason about as the more verbose type(uint256).max.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#across-the-codebase,-there-are-hundreds-of-instances-of-uint,-as-opposed-to-uint256.-the-lack-of-explicitness-can-make-the-codebase-less-readable,-for-instance-type(uint).max-is-not-as-clear-to-reason-about-as-the-more-verbose-type(uint256).max.", "labels": ["OpenZeppelin"]}, {"title": "In favor of explicitness, consider replacing all instances of uint with uint256.", "body": "In favor of explicitness, consider replacing all instances of uint with uint256.", "html_url": "https://blog.openzeppelin.com/beta-finance-audit#in-favor-of-explicitness,-consider-replacing-all-instances-of-uint-with-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N01] _getAmountToPeg lacks comments", "body": "[N01] _getAmountToPeg lacks comments", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n01]-_getamounttopeg-lacks-comments", "labels": ["OpenZeppelin"]}, {"title": "The _getAmountToPeg function of the UniswapPCVController contract performs a key calculation in the reweight algorithm. If the Uniswap price of Fei in relation to the other token is below the peg the reweight algorithm rebases the Uniswap pool, but otherwise performs a _reverseReweight of the Uniswap pool.", "body": "The _getAmountToPeg function of the UniswapPCVController contract performs a key calculation in the reweight algorithm. If the Uniswap price of Fei in relation to the other token is below the peg the reweight algorithm rebases the Uniswap pool, but otherwise performs a _reverseReweight of the Uniswap pool.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-_getamounttopeg-function-of-the-uniswappcvcontroller-contract-performs-a-key-calculation-in-the-reweight-algorithm.-if-the-uniswap-price-of-fei-in-relation-to-the-other-token-is-below-the-peg-the-reweight-algorithm-rebases-the-uniswap-pool,-but-otherwise-performs-a-_reversereweight-of-the-uniswap-pool.", "labels": ["OpenZeppelin"]}, {"title": "The _reverseReweight relies on calculations from the _getAmountToPeg function involving a fairly simple formula. The derivation of this formula is not immediately straight-forward but appears in the Fei protocol\u2019s documentation. Since this derivation appears in external documentation but not commented in the code, it is easy for readers to become confused and miss the connection.", "body": "The _reverseReweight relies on calculations from the _getAmountToPeg function involving a fairly simple formula. The derivation of this formula is not immediately straight-forward but appears in the Fei protocol\u2019s documentation. Since this derivation appears in external documentation but not commented in the code, it is easy for readers to become confused and miss the connection.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-_reversereweight-relies-on-calculations-from-the-_getamounttopeg-function-involving-a-fairly-simple-formula.-the-derivation-of-this-formula-is-not-immediately-straight-forward-but-appears-in-the-fei-protocol\u2019s-documentation.-since-this-derivation-appears-in-external-documentation-but-not-commented-in-the-code,-it-is-easy-for-readers-to-become-confused-and-miss-the-connection.", "labels": ["OpenZeppelin"]}, {"title": "To aid in understanding and readability, consider documenting as comments in code derivations of all mathematical formulae.", "body": "To aid in understanding and readability, consider documenting as comments in code derivations of all mathematical formulae.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#to-aid-in-understanding-and-readability,-consider-documenting-as-comments-in-code-derivations-of-all-mathematical-formulae.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#76.", "body": "Update: Fixed in PR#76.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-fixed-in-pr#76.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Interfaces missing functions", "body": "[N02] Interfaces missing functions", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n02]-interfaces-missing-functions", "labels": ["OpenZeppelin"]}, {"title": "Many of the contracts in the codebase have a matching interface which defines the function signatures for the contract. However some of the interfaces are missing functions which are defined in the respective implementing contract. Examples of this are:", "body": "Many of the contracts in the codebase have a matching interface which defines the function signatures for the contract. However some of the interfaces are missing functions which are defined in the respective implementing contract. Examples of this are:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#many-of-the-contracts-in-the-codebase-have-a-matching-interface-which-defines-the-function-signatures-for-the-contract.-however-some-of-the-interfaces-are-missing-functions-which-are-defined-in-the-respective-implementing-contract.-examples-of-this-are:", "labels": ["OpenZeppelin"]}, {"title": "IUniswapPCVDeposit is missing setPair.", "body": "IUniswapPCVDeposit is missing setPair.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#iuniswappcvdeposit-is-missing-setpair.", "labels": ["OpenZeppelin"]}, {"title": "IPCVSwapper is missing wrapETH, setMaximumSlippage, setMaxSpentPerSwap, setSwapFrequency, and setInvertOraclePrice.", "body": "IPCVSwapper is missing wrapETH, setMaximumSlippage, setMaxSpentPerSwap, setSwapFrequency, and setInvertOraclePrice.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#ipcvswapper-is-missing-wrapeth,-setmaximumslippage,-setmaxspentperswap,-setswapfrequency,-and-setinvertoracleprice.", "labels": ["OpenZeppelin"]}, {"title": "IReserveStabilizer is missing token.", "body": "IReserveStabilizer is missing token.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#ireservestabilizer-is-missing-token.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating these interfaces to define the missing function signatures.", "body": "Consider updating these interfaces to define the missing function signatures.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-updating-these-interfaces-to-define-the-missing-function-signatures.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, ITribeReserveStabilizer is missing all of the functions defined in IReserveStabilizer. Consider having ITribeReserveStabilizer inherit IReserveStabilizer.", "body": "Additionally, ITribeReserveStabilizer is missing all of the functions defined in IReserveStabilizer. Consider having ITribeReserveStabilizer inherit IReserveStabilizer.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#additionally,-itribereservestabilizer-is-missing-all-of-the-functions-defined-in-ireservestabilizer.-consider-having-itribereservestabilizer-inherit-ireservestabilizer.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed.", "body": "The Fei Protocol team state:  Any address can burn its own FEI, this is expected behavior  [M03] Lack of input validation  Throughout this codebase we found there to be an overall lack of input validation. The functions lacking input validation are either modified by the onlyGovernance modifier or are constructors. However simple human error in entering these values, by perhaps entering too many or too few 0s, can have far reaching negative consequences.  Some points where a lapse in input validation could be particularly problematic include:  There is no check in the callstack of the setAllocation function of the BondingCurve contract to ensure that the token featured in the BondingCurve is the token handled by the PCVDeposit. In the case this mismatch would occur, the PCVController would have to manually reallocate these stray tokens using the withdrawERC20 function.  The PCVDripController contract drips tokens from one PCVDeposit contract to another, but it never validates that the token each of them handle are the same. This means it could drip a token into a deposit contract that handles a different token. This mismatch could affect the accounting dictating the logic of the drip function. In particular, the check of dripEligible may wind up considering the balance of the wrong token.  The constructor of PCVSwapperUniswap contract does not check that the two tokens in the pair are tokenSpent and tokenReceived. This can affect the calculations of the inputs to the uniswap swap, leading to accounting errors in pcv.  Examples of onlyGovernor modified functions lacking input validation are:  The setFeiOracle function of the TribeReserveStabilizer contract doesnt check newFeiOracle is not the zero-address.  The setDuration function of the UniswapPCVController contract does not validation the _duration is non-zero or within sensible bounds.  The functions that could benefit from input validation in this codebase are numerous and there are many more than are listed here.  Consider implementing programmatic safeguards validating input parameters to ensure all function calls and contract constructions would fail early and loudly on erroneous inputs. This is needed especially in the case of functions or contracts vetted by governance, where subtle bugs in parameters that pass the governance process can have far reaching impacts on a system.  Update: Partially fixed in PR#75. The first 2 points outlined in this issue were not addressed, however the remaining issues were fixed.  [M04] ReserveStabilizer performs unsafe token transfer  The exchangeFei function of the ReserveStabilizer contract burns a users FEI and in exchange transfers them tokens at a discounted rate. However, the boolean return value of the token transfer performed is not checked. This means that ERC20-compatible tokens that return false on failure, such as ZRX, will not cause the call to revert. In turn the user will receive no tokens for their FEI.  Consider updating the token transfer to instead use OpenZeppelins SafeERC20, which will handle all edge cases of token transfers for you.  Update: Fixed in PR#71.  [M05] Incorrect use of Time-Weighted Average Prices  Throughout the codebase, oracles of type IOracle are used to update, and read asset prices. These prices are then used to inform decisions that together try to keep the price of FEI stable. The oracle interface is designed such that the protocol can use any combination of oracles from different protocols, but currently only those from Chainlink, and Uniswap have been integrated  with the live protocol solely using Uniswap at launch in January, and now solely Chainlink. However, the way that the protocol inverts the price read from IOracle is not safe when the price is a Time-Weighted Average Price (TWAP) calculated with an arithmetic mean, as is the case with Uniswap V2.  For example, assume we have tokens ABC and DEF, where the price of ABC/DEF at time 1 is 100, and the price at time 5 is 700. With some simplification of scaling, the cumulative prices tracked in UniswapV2 would be:  The average prices over the window from 0 to 5 are therefore calculated as:  If instead of using the DEF price of 0.00314, the inverted ABC price is used, this is a price of 1/580 = 0.00172. This is approximately 54% of the correct price.  The codebase twice uses the IOracle.invert function to calculate the reciprocal of a price like this  without knowledge of whether the oracle is using Chainlink spot prices, Uniswap TWAPs, or something else. If these prices are TWAPs, the amount returned to a caller by the ReserveStabilizer, and the slippage parameter in the PCVSwapperUniswap will be incorrect by potentially large percentages.  Consider updating the code to ensure that Uniswap TWAPs are never inverted using a reciprocal, and instead the inverse accumulator is used to correctly calculate the inverse TWAP.  Update: Partially fixed in PR#69. The updated code makes it possible to use oracles correctly and safely, and is a complete fix as long as one condition is never broken: If the oracle or backupOracle in OracleRef returns a Uniswap TWAP as the price, the doInvert variable should never be set to true. If this condition is broken, the prices used throughout the codebase will be incorrect, and could lead to vulnerabilities.  Low severity  [L01] Duplicate definitions  The WETH address is set as a public immutable state variable in:  PCVSwapperUniswap  EthReserveStabilizer  The uint256 constant BASIS_POINTS_GRANULARITY is defined in various parts of the protocol, all having the same value of 10_000:  BondingCurve  UniswapPCVDeposit  PCVSwapperUniswap  RatioPCVController  UniswapPCVController  ReserveStabilizer  While these definitions were made with consistent values across the codebase, the multiple definitions could introduce inconsistencies in future updates to the protocol  Consider defining values shared across the protocol once in a common library.    [L02] ERC20 BondingCurve accepts ETH  BondingCurve contract has a  purchase function which allows users to purchase FEI using ERC20 tokens. Due to the fact that  EthBondingCurve inherits  its purchase function to be payable,  Consider requiring that the msg.value of a call to BondingCurve.purchase is 0 to prevent ETH getting stuck inside the contract.  Update: Fixed in PR#72.  [L03] Using old Solidity version  Throughout the contract, Solidity ^0.8.0 is used. However, at the time of writing there are 2 known bugs in version 0.8.0. Consider upgrading your contracts to use the latest version of Solidity, 0.8.7.  Update: Fixed in PR#73.  [L04] Role definition differs from implementation  The Tribe Minter role is defined in the Fei protocol to only be held by a single contract. This role, as the name suggests, controls the ability of an entity to mint TRIBE. Currently this role is held by the Timelock contract but it is planned that this Tribe Minter role will be transitioned to the TribeReserveStabilizer contract. The TribeReserveStabilizer needs the Tribe Minter role since it mints TRIBE to exchange for FEI in its exchangeFei function.  mint function, modified by the  onlyGovernor modifier, that makes an  internal call to mint TRIBE. This means that the  Consider either updating the documentation so that it is clear which entities can mint TRIBE, or removing the onlyGovernor modified mint function from the TribeReserveStabilizer.  Update: The Fei Protocol team state:  We will update the documentation.  [L05] Uninitialized global variable  The OracleRef contract relies on 2 oracle addresses  the main oracle, and a backupOracle. However, only the oracle can be initialized upon construction of the contract  the backupOracle remains uninitialized even if the creator wants the contract to have a backup oracle.  Consider adding a parameter to the constructor of OracleRef to allow the backupOracle to be initialized on creation of the contract.  Update: Fixed in PR#67.  [L06] Variable shadowing in ReserveStabilizer  The ReserveStabilizer contract has a global variable token, which stores the address of the token exchanged on this stabilizer. The ReserveStabilizer.withdrawERC20 function additionally defines a local variable named token, shadowing the global variable definition. Creating shadowed variable names can lead to bugs where the writer intends to use the global variable, but the compiler uses the local shadow variable instead. Additionally it makes the code harder to read, and confusing to understand.  Consider renaming the local token variable within withdrawERC20.  Update: Fixed in PR#74.  Notes & Additional Information  [N01] _getAmountToPeg lacks comments  The _getAmountToPeg function of the UniswapPCVController contract performs a key calculation in the reweight algorithm. If the Uniswap price of Fei in relation to the other token is below the peg the reweight algorithm rebases the Uniswap pool, but otherwise performs a _reverseReweight of the Uniswap pool.  The _reverseReweight relies on calculations from the _getAmountToPeg function involving a fairly simple formula. The derivation of this formula is not immediately straight-forward but appears in the Fei protocols documentation. Since this derivation appears in external documentation but not commented in the code, it is easy for readers to become confused and miss the connection.  To aid in understanding and readability, consider documenting as comments in code derivations of all mathematical formulae.  Update: Fixed in PR#76.  [N02] Interfaces missing functions  Many of the contracts in the codebase have a matching interface which defines the function signatures for the contract. However some of the interfaces are missing functions which are defined in the respective implementing contract. Examples of this are:  IUniswapPCVDeposit is missing setPair.  IPCVSwapper is missing wrapETH, setMaximumSlippage, setMaxSpentPerSwap, setSwapFrequency, and setInvertOraclePrice.  IReserveStabilizer is missing token.  Consider updating these interfaces to define the missing function signatures.  Additionally, ITribeReserveStabilizer is missing all of the functions defined in IReserveStabilizer. Consider having ITribeReserveStabilizer inherit IReserveStabilizer.    [N03] Missing Natspec  While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:  The _token parameter of the ReserveStabilizers constructor.  The return parameter of BondingCurve.balance.  The _duration parameter of PCVSwapperUniswap.setSwapFrequency.  The _invertOraclePrice parameter of PCVSwapperUniswap.setInvertOraclePrice.  The return parameters throughout PCVSwapperUniswap.  The parameters throughout RatioPCVController.  The documented order of the constructor parameters in BondingCurve is inconsistent with their order in the constructor definition.  Additionally, some of the existent Natspec contains erroneous information. Examples of this include:  The BondingCurve constructor states its parameter will be a UniswapOracle, however this is not the case.  The Natspec documenting PCVSwapperUniswaps _getDecimalNormalizer, _getMinimumAcceptableAmountOut, _getExpectedAmountOut, and _getExpectedAmountIn references 4 named external functions that do not exist in the codebase.  The Natspec for _getBondingCurvePriceMultiplier states that it calculates a multiplier at the current totalPurchased relative to Scale, however neither totalPurchased nor scale factor into the calculation.  Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.  Update: Partially fixed in PR#79. The NatSpec of the following functions was not fixed: PCVSwapperUniswap.setInvertOraclePrice, and PCVSwapperUniswap._getDecimalNormalizer.  [N04] Renaming suggestions  Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.  Consider the following suggestions:  In the UniswapPCVController contract:  magnitude to meetsMagnitudeRequirement.  time to meetsTimeRequirement.  In the BondingCurve contract:  adjustedAmount to feiValueOfAmountIn.  Update: Fixed in PR#77.  [N05] Inconsistent style  There are various occurrences of style inconsistency within this codebase:  The constant definition to value 10000 is inconsistent with all other definitions having value 10,000 using the underscore notation 10_000.  Unnecessary indentations on L248 of BondingCurve.sol and throughout PCVSwapperUniswap.sol.  Inconsistent use of underscores _ in parameters where they are not used in TribeReserveStabilizer contract, they are used occasionally in UniswapPCVController and BondingCurve contracts, and are used everywhere in RatioPCVController contract.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style is recommended.  Update: Partially fixed in PR#77. However both the indentations throughout PCVSwapperUniswap.sol, and the use of underscores in parameters throughout the codebase remain inconsistent.  [N06] Typos  The codebase contains the following typos:  innacurate should be inaccurate.  oldReweigtMinDistanceBPs should be oldReweightMinDistanceBPs.  drip ETH to target should be drip PCV to target.  ETH PCV Dripper should be PCV Dripper.  Consider correcting these typos to improve code readability.  Update: Fixed in PR#77.  [N07] Unnecessary return value  In the PCVSplitter contract, the checkAllocation function returns a boolean. However the function always reverts on failure, and the only call to this function does not check its return value.  Similarly, the _getUniswapPrice function in UniswapPCVController returns 3 parameters, but only the first of these is ever used.  Consider removing the unused return value from the function to simplify the codebase.  Update: Fixed in PR#78.  [N08] Unnecessary imports  Consider removing the following import statements, as they are never used in their corresponding contracts:  import \"@openzeppelin/contracts/utils/Address.sol\"; in CoreRef.sol.  import \"@openzeppelin/contracts/utils/math/Math.sol\"; in BondingCurve.sol.  import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in PCVSplitter.sol.  import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in IUniswapPCVDeposit.sol.  import \"@openzeppelin/contracts/utils/math/Math.sol\"; in UniswapPCVController.sol.  Update: Fixed in PR#77.  [N09] Using ERC20 not IERC20  In the PCVSwapperUniswap contract, ERC20 is imported to allow the contract to interact with a variety of tokens. Throughout the rest of the codebase, as is customary, the interface IERC20 is instead used to interact with tokens.  Consider updating PCVSwapperUniswap to be consistent with the rest of the codebase, by using IERC20 to interact with tokens.  Update: Fixed in PR#69. IERC20MetaData was used instead of IERC20, as the metadata functions were required to fix another issue.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-not-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Missing Natspec", "body": "[N03] Missing Natspec", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n03]-missing-natspec", "labels": ["OpenZeppelin"]}, {"title": "While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:", "body": "While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#while-the-majority-of-the-codebase-is-well-commented,-with-natspec-used-for-most-functions,-there-are-some-places-that-natspec-is-missing-or-incomplete.-some-examples-of-this-are:", "labels": ["OpenZeppelin"]}, {"title": "The _token parameter of the ReserveStabilizer\u2018s constructor.", "body": "The _token parameter of the ReserveStabilizer\u2018s constructor.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-_token-parameter-of-the-reservestabilizer\u2018s-constructor.", "labels": ["OpenZeppelin"]}, {"title": "The return parameter of BondingCurve.balance.", "body": "The return parameter of BondingCurve.balance.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-return-parameter-of-bondingcurve.balance.", "labels": ["OpenZeppelin"]}, {"title": "The _duration parameter of PCVSwapperUniswap.setSwapFrequency.", "body": "The _duration parameter of PCVSwapperUniswap.setSwapFrequency.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-_duration-parameter-of-pcvswapperuniswap.setswapfrequency.", "labels": ["OpenZeppelin"]}, {"title": "The _invertOraclePrice parameter of PCVSwapperUniswap.setInvertOraclePrice.", "body": "The _invertOraclePrice parameter of PCVSwapperUniswap.setInvertOraclePrice.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-_invertoracleprice-parameter-of-pcvswapperuniswap.setinvertoracleprice.", "labels": ["OpenZeppelin"]}, {"title": "The return parameters throughout PCVSwapperUniswap.", "body": "The return parameters throughout PCVSwapperUniswap.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-return-parameters-throughout-pcvswapperuniswap.", "labels": ["OpenZeppelin"]}, {"title": "The parameters throughout RatioPCVController.", "body": "The parameters throughout RatioPCVController.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-parameters-throughout-ratiopcvcontroller.", "labels": ["OpenZeppelin"]}, {"title": "The documented order of the constructor parameters in BondingCurve is inconsistent with their order in the constructor definition.", "body": "The documented order of the constructor parameters in BondingCurve is inconsistent with their order in the constructor definition.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-documented-order-of-the-constructor-parameters-in-bondingcurve-is-inconsistent-with-their-order-in-the-constructor-definition.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, some of the existent Natspec contains erroneous information. Examples of this include:", "body": "Additionally, some of the existent Natspec contains erroneous information. Examples of this include:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#additionally,-some-of-the-existent-natspec-contains-erroneous-information.-examples-of-this-include:", "labels": ["OpenZeppelin"]}, {"title": "The BondingCurve constructor states its parameter will be a UniswapOracle, however this is not the case.", "body": "The BondingCurve constructor states its parameter will be a UniswapOracle, however this is not the case.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-bondingcurve-constructor-states-its-parameter-will-be-a-uniswaporacle,-however-this-is-not-the-case.", "labels": ["OpenZeppelin"]}, {"title": "The Natspec documenting PCVSwapperUniswap\u2018s _getDecimalNormalizer, _getMinimumAcceptableAmountOut, _getExpectedAmountOut, and _getExpectedAmountIn references 4 named external functions that do not exist in the codebase.", "body": "The Natspec documenting PCVSwapperUniswap\u2018s _getDecimalNormalizer, _getMinimumAcceptableAmountOut, _getExpectedAmountOut, and _getExpectedAmountIn references 4 named external functions that do not exist in the codebase.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-natspec-documenting-pcvswapperuniswap\u2018s-_getdecimalnormalizer,-_getminimumacceptableamountout,-_getexpectedamountout,-and-_getexpectedamountin-references-4-named-external-functions-that-do-not-exist-in-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "The Natspec for _getBondingCurvePriceMultiplier states that it calculates a multiplier \u201cat the current totalPurchased relative to Scale\u201d, however neither totalPurchased nor scale factor into the calculation.", "body": "The Natspec for _getBondingCurvePriceMultiplier states that it calculates a multiplier \u201cat the current totalPurchased relative to Scale\u201d, however neither totalPurchased nor scale factor into the calculation.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-natspec-for-_getbondingcurvepricemultiplier-states-that-it-calculates-a-multiplier-\u201cat-the-current-totalpurchased-relative-to-scale\u201d,-however-neither-totalpurchased-nor-scale-factor-into-the-calculation.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.", "body": "Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-updating-the-above-examples-and-checking-that-complete-natspec-exists-for-all-functions-throughout-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#79. The NatSpec of the following functions was not fixed: PCVSwapperUniswap.setInvertOraclePrice, and PCVSwapperUniswap._getDecimalNormalizer.", "body": "Update: Partially fixed in PR#79. The NatSpec of the following functions was not fixed: PCVSwapperUniswap.setInvertOraclePrice, and PCVSwapperUniswap._getDecimalNormalizer.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-partially-fixed-in-pr#79.-the-natspec-of-the-following-functions-was-not-fixed:-pcvswapperuniswap.setinvertoracleprice,-and-pcvswapperuniswap._getdecimalnormalizer.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Renaming suggestions", "body": "[N04] Renaming suggestions", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n04]-renaming-suggestions", "labels": ["OpenZeppelin"]}, {"title": "Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.", "body": "Good naming is one of the keys for readable code, and to make the intention of the code clear for future changes. There are some names in the code that make it confusing or hard to understand.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#good-naming-is-one-of-the-keys-for-readable-code,-and-to-make-the-intention-of-the-code-clear-for-future-changes.-there-are-some-names-in-the-code-that-make-it-confusing-or-hard-to-understand.", "labels": ["OpenZeppelin"]}, {"title": "Consider the following suggestions:", "body": "Consider the following suggestions:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-the-following-suggestions:", "labels": ["OpenZeppelin"]}, {"title": "In the UniswapPCVController contract:", "body": "In the UniswapPCVController contract:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#in-the-uniswappcvcontroller-contract:", "labels": ["OpenZeppelin"]}, {"title": "magnitude to meetsMagnitudeRequirement.", "body": "magnitude to meetsMagnitudeRequirement.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#magnitude-to-meetsmagnituderequirement.", "labels": ["OpenZeppelin"]}, {"title": "time to meetsTimeRequirement.", "body": "time to meetsTimeRequirement.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#time-to-meetstimerequirement.", "labels": ["OpenZeppelin"]}, {"title": "In the BondingCurve contract:", "body": "In the BondingCurve contract:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#in-the-bondingcurve-contract:", "labels": ["OpenZeppelin"]}, {"title": "adjustedAmount to feiValueOfAmountIn.", "body": "adjustedAmount to feiValueOfAmountIn.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#adjustedamount-to-feivalueofamountin.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#77.", "body": "[N07] Unnecessary return value  In the PCVSplitter contract, the checkAllocation function returns a boolean. However the function always reverts on failure, and the only call to this function does not check its return value.  Similarly, the _getUniswapPrice function in UniswapPCVController returns 3 parameters, but only the first of these is ever used.  Consider removing the unused return value from the function to simplify the codebase.  Update: Fixed in PR#78.  [N08] Unnecessary imports  Consider removing the following import statements, as they are never used in their corresponding contracts:  import \"@openzeppelin/contracts/utils/Address.sol\"; in CoreRef.sol.  import \"@openzeppelin/contracts/utils/math/Math.sol\"; in BondingCurve.sol.  import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in PCVSplitter.sol.  import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in IUniswapPCVDeposit.sol.  import \"@openzeppelin/contracts/utils/math/Math.sol\"; in UniswapPCVController.sol.    [N09] Using ERC20 not IERC20  In the PCVSwapperUniswap contract, ERC20 is imported to allow the contract to interact with a variety of tokens. Throughout the rest of the codebase, as is customary, the interface IERC20 is instead used to interact with tokens.  Consider updating PCVSwapperUniswap to be consistent with the rest of the codebase, by using IERC20 to interact with tokens.  Update: Fixed in PR#69. IERC20MetaData was used instead of IERC20, as the metadata functions were required to fix another issue.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-fixed-in-pr#77.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistent style", "body": "[N05] Inconsistent style", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n05]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "There are various occurrences of style inconsistency within this codebase:", "body": "There are various occurrences of style inconsistency within this codebase:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#there-are-various-occurrences-of-style-inconsistency-within-this-codebase:", "labels": ["OpenZeppelin"]}, {"title": "The constant definition to value 10000 is inconsistent with all other definitions having value \u201c10,000\u201d using the \u201cunderscore\u201d notation 10_000.", "body": "The constant definition to value 10000 is inconsistent with all other definitions having value \u201c10,000\u201d using the \u201cunderscore\u201d notation 10_000.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-constant-definition-to-value-10000-is-inconsistent-with-all-other-definitions-having-value-\u201c10,000\u201d-using-the-\u201cunderscore\u201d-notation-10_000.", "labels": ["OpenZeppelin"]}, {"title": "Unnecessary indentations on L248 of BondingCurve.sol and throughout PCVSwapperUniswap.sol.", "body": "Unnecessary indentations on L248 of BondingCurve.sol and throughout PCVSwapperUniswap.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#unnecessary-indentations-on-l248-of-bondingcurve.sol-and-throughout-pcvswapperuniswap.sol.", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent use of underscores \u201c_\u201d in parameters where they are not used in TribeReserveStabilizer contract, they are used occasionally in UniswapPCVController and BondingCurve contracts, and are used everywhere in RatioPCVController contract.", "body": "Inconsistent use of underscores \u201c_\u201d in parameters where they are not used in TribeReserveStabilizer contract, they are used occasionally in UniswapPCVController and BondingCurve contracts, and are used everywhere in RatioPCVController contract.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#inconsistent-use-of-underscores-\u201c_\u201d-in-parameters-where-they-are-not-used-in-tribereservestabilizer-contract,-they-are-used-occasionally-in-uniswappcvcontroller-and-bondingcurve-contracts,-and-are-used-everywhere-in-ratiopcvcontroller-contract.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style is recommended.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#77. However both the indentations throughout PCVSwapperUniswap.sol, and the use of underscores in parameters throughout the codebase remain inconsistent.", "body": "Update: Partially fixed in PR#77. However both the indentations throughout PCVSwapperUniswap.sol, and the use of underscores in parameters throughout the codebase remain inconsistent.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-partially-fixed-in-pr#77.-however-both-the-indentations-throughout-pcvswapperuniswap.sol,-and-the-use-of-underscores-in-parameters-throughout-the-codebase-remain-inconsistent.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Typos", "body": "[N06] Typos", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n06]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "innacurate should be inaccurate.", "body": "innacurate should be inaccurate.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#innacurate-should-be-inaccurate.", "labels": ["OpenZeppelin"]}, {"title": "oldReweigtMinDistanceBPs should be oldReweightMinDistanceBPs.", "body": "oldReweigtMinDistanceBPs should be oldReweightMinDistanceBPs.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#oldreweigtmindistancebps-should-be-oldreweightmindistancebps.", "labels": ["OpenZeppelin"]}, {"title": "drip ETH to target should be drip PCV to target.", "body": "drip ETH to target should be drip PCV to target.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#drip-eth-to-target-should-be-drip-pcv-to-target.", "labels": ["OpenZeppelin"]}, {"title": "ETH PCV Dripper should be PCV Dripper.", "body": "ETH PCV Dripper should be PCV Dripper.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#eth-pcv-dripper-should-be-pcv-dripper.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unnecessary return value", "body": "[N07] Unnecessary return value", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n07]-unnecessary-return-value", "labels": ["OpenZeppelin"]}, {"title": "In the PCVSplitter contract, the checkAllocation function returns a boolean. However the function always reverts on failure, and the only call to this function does not check its return value.", "body": "In the PCVSplitter contract, the checkAllocation function returns a boolean. However the function always reverts on failure, and the only call to this function does not check its return value.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#in-the-pcvsplitter-contract,-the-checkallocation-function-returns-a-boolean.-however-the-function-always-reverts-on-failure,-and-the-only-call-to-this-function-does-not-check-its-return-value.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, the _getUniswapPrice function in UniswapPCVController returns 3 parameters, but only the first of these is ever used.", "body": "Similarly, the _getUniswapPrice function in UniswapPCVController returns 3 parameters, but only the first of these is ever used.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#similarly,-the-_getuniswapprice-function-in-uniswappcvcontroller-returns-3-parameters,-but-only-the-first-of-these-is-ever-used.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the unused return value from the function to simplify the codebase.", "body": "Consider removing the unused return value from the function to simplify the codebase.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-removing-the-unused-return-value-from-the-function-to-simplify-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#78.", "body": "Update: Fixed in PR#78.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-fixed-in-pr#78.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unnecessary imports", "body": "[N08] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n08]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the following import statements, as they are never used in their corresponding contracts:", "body": "Consider removing the following import statements, as they are never used in their corresponding contracts:", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-removing-the-following-import-statements,-as-they-are-never-used-in-their-corresponding-contracts:", "labels": ["OpenZeppelin"]}, {"title": "import \"@openzeppelin/contracts/utils/Address.sol\"; in CoreRef.sol.", "body": "import \"@openzeppelin/contracts/utils/Address.sol\"; in CoreRef.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#import-\"@openzeppelin/contracts/utils/address.sol\";-in-coreref.sol.", "labels": ["OpenZeppelin"]}, {"title": "import \"@openzeppelin/contracts/utils/math/Math.sol\"; in BondingCurve.sol.", "body": "import \"@openzeppelin/contracts/utils/math/Math.sol\"; in BondingCurve.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#import-\"@openzeppelin/contracts/utils/math/math.sol\";-in-bondingcurve.sol.", "labels": ["OpenZeppelin"]}, {"title": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in PCVSplitter.sol.", "body": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in PCVSplitter.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#import-\"@openzeppelin/contracts/token/erc20/ierc20.sol\";-in-pcvsplitter.sol.", "labels": ["OpenZeppelin"]}, {"title": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in IUniswapPCVDeposit.sol.", "body": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; in IUniswapPCVDeposit.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#import-\"@openzeppelin/contracts/token/erc20/ierc20.sol\";-in-iuniswappcvdeposit.sol.", "labels": ["OpenZeppelin"]}, {"title": "import \"@openzeppelin/contracts/utils/math/Math.sol\"; in UniswapPCVController.sol.", "body": "import \"@openzeppelin/contracts/utils/math/Math.sol\"; in UniswapPCVController.sol.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#import-\"@openzeppelin/contracts/utils/math/math.sol\";-in-uniswappcvcontroller.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Using ERC20 not IERC20", "body": "[N09] Using ERC20 not IERC20", "html_url": "https://blog.openzeppelin.com/fei-audit-2#[n09]-using-erc20-not-ierc20", "labels": ["OpenZeppelin"]}, {"title": "In the PCVSwapperUniswap contract, ERC20 is imported to allow the contract to interact with a variety of tokens. Throughout the rest of the codebase, as is customary, the interface IERC20 is instead used to interact with tokens.", "body": "In the PCVSwapperUniswap contract, ERC20 is imported to allow the contract to interact with a variety of tokens. Throughout the rest of the codebase, as is customary, the interface IERC20 is instead used to interact with tokens.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#in-the-pcvswapperuniswap-contract,-erc20-is-imported-to-allow-the-contract-to-interact-with-a-variety-of-tokens.-throughout-the-rest-of-the-codebase,-as-is-customary,-the-interface-ierc20-is-instead-used-to-interact-with-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating PCVSwapperUniswap to be consistent with the rest of the codebase, by using IERC20 to interact with tokens.", "body": "Consider updating PCVSwapperUniswap to be consistent with the rest of the codebase, by using IERC20 to interact with tokens.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#consider-updating-pcvswapperuniswap-to-be-consistent-with-the-rest-of-the-codebase,-by-using-ierc20-to-interact-with-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#69. IERC20MetaData was used instead of IERC20, as the metadata functions were required to fix another issue.", "body": "Update: Fixed in PR#69. IERC20MetaData was used instead of IERC20, as the metadata functions were required to fix another issue.", "html_url": "https://blog.openzeppelin.com/fei-audit-2#update:-fixed-in-pr#69.-ierc20metadata-was-used-instead-of-ierc20,-as-the-metadata-functions-were-required-to-fix-another-issue.", "labels": ["OpenZeppelin"]}, {"title": "[N01] TODOs in code", "body": "[N01] TODOs in code", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#[n01]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. See for example:", "body": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. See for example:", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-tracked-in-the-project\u2019s-issues-backlog.-see-for-example:", "labels": ["OpenZeppelin"]}, {"title": "ProxyCloneFactory line 24", "body": "ProxyCloneFactory line 24", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#proxyclonefactory-line-24", "labels": ["OpenZeppelin"]}, {"title": "ProxyCloneFactory line 56", "body": "ProxyCloneFactory line 56", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#proxyclonefactory-line-56", "labels": ["OpenZeppelin"]}, {"title": "Reserve line 214", "body": "Reserve line 214", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#reserve-line-214", "labels": ["OpenZeppelin"]}, {"title": "Election line 402", "body": "Election line 402", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#election-line-402", "labels": ["OpenZeppelin"]}, {"title": "StableToken line 458", "body": "StableToken line 458", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#stabletoken-line-458", "labels": ["OpenZeppelin"]}, {"title": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "body": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#during-development,-having-well-described-\u201ctodo\u201d-comments-will-make-the-process-of-tracking-and-solving-them-easier.-without-that-information,-these-comments-might-tend-to-rot-and-important-information-for-the-security-of-the-system-might-be-forgotten-by-the-time-it-is-released-to-production.", "labels": ["OpenZeppelin"]}, {"title": "These TODO comments should at least have a brief description of the task pending to do, and a link to the corresponding issue in the project repository. Consider updating the TODO comments to add this information. For completeness and traceability, a signature and a timestamp can be added.", "body": "These TODO comments should at least have a brief description of the task pending to do, and a link to the corresponding issue in the project repository. Consider updating the TODO comments to add this information. For completeness and traceability, a signature and a timestamp can be added.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#these-todo-comments-should-at-least-have-a-brief-description-of-the-task-pending-to-do,-and-a-link-to-the-corresponding-issue-in-the-project-repository.-consider-updating-the-todo-comments-to-add-this-information.-for-completeness-and-traceability,-a-signature-and-a-timestamp-can-be-added.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Celo team showed us their project backlog, which contains links to the relevant issues on GitHub.", "body": "Update: The Celo team showed us their project backlog, which contains links to the relevant issues on GitHub.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#update:-the-celo-team-showed-us-their-project-backlog,-which-contains-links-to-the-relevant-issues-on-github.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Typographical errors", "body": "[N02] Typographical errors", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#[n02]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "Several typographical errors were found in the codebase. Some examples are:", "body": "Several typographical errors were found in the codebase. Some examples are:", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#several-typographical-errors-were-found-in-the-codebase.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "Line 669 of Governance.sol should say \u201cproposals\u201d instead of \u201cproposal\u201d.", "body": "Line 669 of Governance.sol should say \u201cproposals\u201d instead of \u201cproposal\u201d.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-669-of-governance.sol-should-say-\u201cproposals\u201d-instead-of-\u201cproposal\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 670 of Governance.sol should say \u201cwere\u201d instead of \u201cwas\u201d.", "body": "Line 670 of Governance.sol should say \u201cwere\u201d instead of \u201cwas\u201d.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-670-of-governance.sol-should-say-\u201cwere\u201d-instead-of-\u201cwas\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 265 of Accounts.sol should say \u201cto act as\u201d instead of \u201cto as\u201d.", "body": "Line 265 of Accounts.sol should say \u201cto act as\u201d instead of \u201cto as\u201d.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-265-of-accounts.sol-should-say-\u201cto-act-as\u201d-instead-of-\u201cto-as\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 918 of Accounts.sol references a non-existent current variable.", "body": "Line 918 of Accounts.sol references a non-existent current variable.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-918-of-accounts.sol-references-a-non-existent-current-variable.", "labels": ["OpenZeppelin"]}, {"title": "Lines 927-928 of Accounts.sol contain empty comments which can be removed.", "body": "Lines 927-928 of Accounts.sol contain empty comments which can be removed.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#lines-927-928-of-accounts.sol-contain-empty-comments-which-can-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Line 19 of IdentityProxy.sol should say \u201cto call\u201d instead of \u201cthe call\u201d.", "body": "Line 19 of IdentityProxy.sol should say \u201cto call\u201d instead of \u201cthe call\u201d.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-19-of-identityproxy.sol-should-say-\u201cto-call\u201d-instead-of-\u201cthe-call\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 24 and Line 29 of ProxyCloneFactory.sol should say \u201cOpenZeppelin\u201d instead of \u201copen-zeppelin\u201d.", "body": "Line 24 and Line 29 of ProxyCloneFactory.sol should say \u201cOpenZeppelin\u201d instead of \u201copen-zeppelin\u201d.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#line-24-and-line-29-of-proxyclonefactory.sol-should-say-\u201copenzeppelin\u201d-instead-of-\u201copen-zeppelin\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting them.", "body": "Consider correcting them.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#consider-correcting-them.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 414cfed.", "body": "Update: Fixed in commit 414cfed.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#update:-fixed-in-commit-414cfed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Redundant Inheritance", "body": "[N03] Redundant Inheritance", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#[n03]-redundant-inheritance", "labels": ["OpenZeppelin"]}, {"title": "The GoldToken contract inherits from Ownable, but it does not include any functions with access control. Moreover, Ownable is already included in the inheritance chain through the UsingRegistry contract. Consider removing the unused and redundant inheritance of Ownable.", "body": "The GoldToken contract inherits from Ownable, but it does not include any functions with access control. Moreover, Ownable is already included in the inheritance chain through the UsingRegistry contract. Consider removing the unused and redundant inheritance of Ownable.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#the-goldtoken-contract-inherits-from-ownable,-but-it-does-not-include-any-functions-with-access-control.-moreover,-ownable-is-already-included-in-the-inheritance-chain-through-the-usingregistry-contract.-consider-removing-the-unused-and-redundant-inheritance-of-ownable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 8b50238.", "body": "Update: Fixed in commit 8b50238.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#update:-fixed-in-commit-8b50238.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Simplify identity heuristic calculation", "body": "[N04] Simplify identity heuristic calculation", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#[n04]-simplify-identity-heuristic-calculation", "labels": ["OpenZeppelin"]}, {"title": "The passesIdentityHeuristic function of the IdentityProxyHub contract evaluates multiple independent conditions, including a compound condition, and then evaluates whether or not they are all satisfied. For simplicity, consider returning immediately when any of the conditions fail. This would make the function easier to reason about, and would also increase efficiency.", "body": "The passesIdentityHeuristic function of the IdentityProxyHub contract evaluates multiple independent conditions, including a compound condition, and then evaluates whether or not they are all satisfied. For simplicity, consider returning immediately when any of the conditions fail. This would make the function easier to reason about, and would also increase efficiency.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#the-passesidentityheuristic-function-of-the-identityproxyhub-contract-evaluates-multiple-independent-conditions,-including-a-compound-condition,-and-then-evaluates-whether-or-not-they-are-all-satisfied.-for-simplicity,-consider-returning-immediately-when-any-of-the-conditions-fail.-this-would-make-the-function-easier-to-reason-about,-and-would-also-increase-efficiency.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 3f405e0. This does not change the logic but it adds comments explaining the reasoning.", "body": "Update: Fixed in commit 3f405e0. This does not change the logic but it adds comments explaining the reasoning.", "html_url": "https://blog.openzeppelin.com/celo-audit-release-4#update:-fixed-in-commit-3f405e0.-this-does-not-change-the-logic-but-it-adds-comments-explaining-the-reasoning.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Spells attempt to swap 0 tokens", "body": "[N01] Spells attempt to swap 0 tokens", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n01]-spells-attempt-to-swap-0-tokens", "labels": ["OpenZeppelin"]}, {"title": "In the various spells, including BalancerSpellV1, SushiswapSpellV1, and UniswapV2SpellV1, there is logic to initiate a swap of tokens that comprise a liquidity pool.", "body": "In the various spells, including BalancerSpellV1, SushiswapSpellV1, and UniswapV2SpellV1, there is logic to initiate a swap of tokens that comprise a liquidity pool.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-the-various-spells,-including-balancerspellv1,-sushiswapspellv1,-and-uniswapv2spellv1,-there-is-logic-to-initiate-a-swap-of-tokens-that-comprise-a-liquidity-pool.", "labels": ["OpenZeppelin"]}, {"title": "sufficient tokenA has been withdrawn, but not enough tokenB, the protocol attempts to", "body": "sufficient tokenA has been withdrawn, but not enough tokenB, the protocol attempts to", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#sufficient-tokena-has-been-withdrawn,-but-not-enough-tokenb,-the-protocol-attempts-to", "labels": ["OpenZeppelin"]}, {"title": "swap some tokenA for tokenB to obtain the desired amounts for both tokens.", "body": "swap some tokenA for tokenB to obtain the desired amounts for both tokens.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#swap-some-tokena-for-tokenb-to-obtain-the-desired-amounts-for-both-tokens.", "labels": ["OpenZeppelin"]}, {"title": "The same logic exists for the opposite situation.", "body": "The same logic exists for the opposite situation.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-same-logic-exists-for-the-opposite-situation.", "labels": ["OpenZeppelin"]}, {"title": "The issue is that the conditional check that controls when a swap should occur includes the situation where there is no excess token to be swapped \u2013 as it uses a strict equality. In this situation an amount of 0 is passed to the swap function as the amount of tokens to sell, which will fail.", "body": "The issue is that the conditional check that controls when a swap should occur includes the situation where there is no excess token to be swapped \u2013 as it uses a strict equality. In this situation an amount of 0 is passed to the swap function as the amount of tokens to sell, which will fail.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-issue-is-that-the-conditional-check-that-controls-when-a-swap-should-occur-includes-the-situation-where-there-is-no-excess-token-to-be-swapped-\u2013-as-it-uses-a-strict-equality.-in-this-situation-an-amount-of-0-is-passed-to-the-swap-function-as-the-amount-of-tokens-to-sell,-which-will-fail.", "labels": ["OpenZeppelin"]}, {"title": "Consider making the conditionals that control the swap attempts strict inequalities to avoid wasting gas in some edge cases, and also to further align the code with intentions.", "body": "Consider making the conditionals that control the swap attempts strict inequalities to avoid wasting gas in some edge cases, and also to further align the code with intentions.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-making-the-conditionals-that-control-the-swap-attempts-strict-inequalities-to-avoid-wasting-gas-in-some-edge-cases,-and-also-to-further-align-the-code-with-intentions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#109.", "body": "Update: Fixed in PR#109.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#109.", "labels": ["OpenZeppelin"]}, {"title": "[N02] CurveSpellV1 unnecessarily has a WERC20", "body": "[N02] CurveSpellV1 unnecessarily has a WERC20", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n02]-curvespellv1-unnecessarily-has-a-werc20", "labels": ["OpenZeppelin"]}, {"title": "CurveSpellV1 is provided a WERC20, which is passed to", "body": "CurveSpellV1 is provided a WERC20, which is passed to", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#curvespellv1-is-provided-a-werc20,-which-is-passed-to", "labels": ["OpenZeppelin"]}, {"title": "IWERC20 global variable. Within", "body": "IWERC20 global variable. Within", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#iwerc20-global-variable.-within", "labels": ["OpenZeppelin"]}, {"title": "Consider redesigning the inheritance model so that unnecessary contracts and variables are not inherited by contracts that do not need them. This will simplify the codebase and increase readability.", "body": "Consider redesigning the inheritance model so that unnecessary contracts and variables are not inherited by contracts that do not need them. This will simplify the codebase and increase readability.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-redesigning-the-inheritance-model-so-that-unnecessary-contracts-and-variables-are-not-inherited-by-contracts-that-do-not-need-them.-this-will-simplify-the-codebase-and-increase-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Alpha team decided not to fix this issue.", "body": "Update: The Alpha team decided not to fix this issue.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-the-alpha-team-decided-not-to-fix-this-issue.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Encoding pool information may lack space for proper mapping", "body": "[N03] Encoding pool information may lack space for proper mapping", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n03]-encoding-pool-information-may-lack-space-for-proper-mapping", "labels": ["OpenZeppelin"]}, {"title": "Within the WMasterChef and WLiquidityGauge contracts, there are functions to encode various aspects of liquidity pool deposits inside a single uint256 value. The functions achieve this by mapping aspects of the deposit \u2013 including the pool id \u2013 to a subset of bits inside the uint256. The limited number of bits available to perform these mappings effectively places upper bounds on the value of particular details that can be encoded.", "body": "Within the WMasterChef and WLiquidityGauge contracts, there are functions to encode various aspects of liquidity pool deposits inside a single uint256 value. The functions achieve this by mapping aspects of the deposit \u2013 including the pool id \u2013 to a subset of bits inside the uint256. The limited number of bits available to perform these mappings effectively places upper bounds on the value of particular details that can be encoded.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#within-the-wmasterchef-and-wliquiditygauge-contracts,-there-are-functions-to-encode-various-aspects-of-liquidity-pool-deposits-inside-a-single-uint256-value.-the-functions-achieve-this-by-mapping-aspects-of-the-deposit-\u2013-including-the-pool-id-\u2013-to-a-subset-of-bits-inside-the-uint256.-the-limited-number-of-bits-available-to-perform-these-mappings-effectively-places-upper-bounds-on-the-value-of-particular-details-that-can-be-encoded.", "labels": ["OpenZeppelin"]}, {"title": "encoded with 16 bits and in", "body": "encoded with 16 bits and in", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#encoded-with-16-bits-and-in", "labels": ["OpenZeppelin"]}, {"title": "encoded with only 8 bits. What this means in practice is that the largest", "body": "encoded with only 8 bits. What this means in practice is that the largest", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#encoded-with-only-8-bits.-what-this-means-in-practice-is-that-the-largest", "labels": ["OpenZeppelin"]}, {"title": "While this limitation exists locally, the liquidity pool providers themselves do not have the same upper bounds on the number of pools that can be created or the maximum pool ids that may result. Pools with ids exceeding local upper bounds would simply be incompatible with the local encoding scheme and would remain unavailable for use within HomoraBank V2.", "body": "While this limitation exists locally, the liquidity pool providers themselves do not have the same upper bounds on the number of pools that can be created or the maximum pool ids that may result. Pools with ids exceeding local upper bounds would simply be incompatible with the local encoding scheme and would remain unavailable for use within HomoraBank V2.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#while-this-limitation-exists-locally,-the-liquidity-pool-providers-themselves-do-not-have-the-same-upper-bounds-on-the-number-of-pools-that-can-be-created-or-the-maximum-pool-ids-that-may-result.-pools-with-ids-exceeding-local-upper-bounds-would-simply-be-incompatible-with-the-local-encoding-scheme-and-would-remain-unavailable-for-use-within-homorabank-v2.", "labels": ["OpenZeppelin"]}, {"title": "While 16 bits is likely a reasonable upper bound for pool ids, 8 bits is significantly more restrictive. Where possible, consider using as many bits as possible to locally encode values that do not have similarly restrictive external upper bounds.", "body": "While 16 bits is likely a reasonable upper bound for pool ids, 8 bits is significantly more restrictive. Where possible, consider using as many bits as possible to locally encode values that do not have similarly restrictive external upper bounds.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#while-16-bits-is-likely-a-reasonable-upper-bound-for-pool-ids,-8-bits-is-significantly-more-restrictive.-where-possible,-consider-using-as-many-bits-as-possible-to-locally-encode-values-that-do-not-have-similarly-restrictive-external-upper-bounds.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#110.", "body": "Update: Fixed in PR#110.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#110.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Gas inefficiencies", "body": "[N04] Gas inefficiencies", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n04]-gas-inefficiencies", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a non-exhaustive list of such opportunities:", "body": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a non-exhaustive list of such opportunities:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#throughout-the-codebase,-there-are-several-opportunities-to-improve-gas-efficiency.-below-is-a-non-exhaustive-list-of-such-opportunities:", "labels": ["OpenZeppelin"]}, {"title": "Throughout the spells, calls are made to bank.POSITION_ID, just to pass the value into bank.getPositionInfo. To reduce these two external calls to just one, consider implementing a getCurrentPositionInfo function.", "body": "Throughout the spells, calls are made to bank.POSITION_ID, just to pass the value into bank.getPositionInfo. To reduce these two external calls to just one, consider implementing a getCurrentPositionInfo function.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#throughout-the-spells,-calls-are-made-to-bank.position_id,-just-to-pass-the-value-into-bank.getpositioninfo.-to-reduce-these-two-external-calls-to-just-one,-consider-implementing-a-getcurrentpositioninfo-function.", "labels": ["OpenZeppelin"]}, {"title": "The require on line 92 of the AggregatorOracle is redundant. A primary source cannot be set that does not meet this condition. Consider removing the redundant require.", "body": "The require on line 92 of the AggregatorOracle is redundant. A primary source cannot be set that does not meet this condition. Consider removing the redundant require.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-require-on-line-92-of-the-aggregatororacle-is-redundant.-a-primary-source-cannot-be-set-that-does-not-meet-this-condition.-consider-removing-the-redundant-require.", "labels": ["OpenZeppelin"]}, {"title": "The poke modifier calls accrue before proceeding with the rest of the modified function code. The accrue function requires that bank.isListed, but this check is often replicated at the beginning of the poke modified functions. Consider removing the check that bank.isListed from functions that use the poke modifier.", "body": "The poke modifier calls accrue before proceeding with the rest of the modified function code. The accrue function requires that bank.isListed, but this check is often replicated at the beginning of the poke modified functions. Consider removing the check that bank.isListed from functions that use the poke modifier.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-poke-modifier-calls-accrue-before-proceeding-with-the-rest-of-the-modified-function-code.-the-accrue-function-requires-that-bank.islisted,-but-this-check-is-often-replicated-at-the-beginning-of-the-poke-modified-functions.-consider-removing-the-check-that-bank.islisted-from-functions-that-use-the-poke-modifier.", "labels": ["OpenZeppelin"]}, {"title": "Line 89 of CurveSpellV1 encodes the tokenID, just to decode it again, and then looks it up in the gauges mapping. However the gauges mapping is publicly accessible, so it would be cheaper to look up gauges[pid][gid].impl.lp_token directly. Consider removing the unnecessary encoding on this line.", "body": "Line 89 of CurveSpellV1 encodes the tokenID, just to decode it again, and then looks it up in the gauges mapping. However the gauges mapping is publicly accessible, so it would be cheaper to look up gauges[pid][gid].impl.lp_token directly. Consider removing the unnecessary encoding on this line.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#line-89-of-curvespellv1-encodes-the-tokenid,-just-to-decode-it-again,-and-then-looks-it-up-in-the-gauges-mapping.-however-the-gauges-mapping-is-publicly-accessible,-so-it-would-be-cheaper-to-look-up-gauges[pid][gid].impl.lp_token-directly.-consider-removing-the-unnecessary-encoding-on-this-line.", "labels": ["OpenZeppelin"]}, {"title": "At the end of BalancerSpellV1\u2018s addLiquidityInternal function, it looks up the current LP token balance. Immediately after calling addLiquidityInternal, addLiquidityWERC20 also looks up the current LP token balance. Consider returning the LP token balance from addLiquidityInternal to avoid fetching it twice.", "body": "At the end of BalancerSpellV1\u2018s addLiquidityInternal function, it looks up the current LP token balance. Immediately after calling addLiquidityInternal, addLiquidityWERC20 also looks up the current LP token balance. Consider returning the LP token balance from addLiquidityInternal to avoid fetching it twice.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#at-the-end-of-balancerspellv1\u2018s-addliquidityinternal-function,-it-looks-up-the-current-lp-token-balance.-immediately-after-calling-addliquidityinternal,-addliquiditywerc20-also-looks-up-the-current-lp-token-balance.-consider-returning-the-lp-token-balance-from-addliquidityinternal-to-avoid-fetching-it-twice.", "labels": ["OpenZeppelin"]}, {"title": "In UniswapV2SpellV1 and SushiswapSpellV1, removeLiquidityInternal and addLiquidityInternal call getPair to fetch the LP token for a given pair. However all functions that call these functions also execute a call to getPair previously. Consider passing the LP token address to removeLiquidityInternal and addLiquidityInternal so that a duplicate call to getPair is not necessary.", "body": "In UniswapV2SpellV1 and SushiswapSpellV1, removeLiquidityInternal and addLiquidityInternal call getPair to fetch the LP token for a given pair. However all functions that call these functions also execute a call to getPair previously. Consider passing the LP token address to removeLiquidityInternal and addLiquidityInternal so that a duplicate call to getPair is not necessary.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-uniswapv2spellv1-and-sushiswapspellv1,-removeliquidityinternal-and-addliquidityinternal-call-getpair-to-fetch-the-lp-token-for-a-given-pair.-however-all-functions-that-call-these-functions-also-execute-a-call-to-getpair-previously.-consider-passing-the-lp-token-address-to-removeliquidityinternal-and-addliquidityinternal-so-that-a-duplicate-call-to-getpair-is-not-necessary.", "labels": ["OpenZeppelin"]}, {"title": "The functions mint and burn in the WStakingRewards contract each perform actions on the staking contract before fetching the rewardPerToken. However, due to the fact that the actions performed on the staking contract have already called rewardPerToken themselves, WStakingRewards can make a cheaper call to the stored rewardPerTokenStored instead.", "body": "The functions mint and burn in the WStakingRewards contract each perform actions on the staking contract before fetching the rewardPerToken. However, due to the fact that the actions performed on the staking contract have already called rewardPerToken themselves, WStakingRewards can make a cheaper call to the stored rewardPerTokenStored instead.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-functions-mint-and-burn-in-the-wstakingrewards-contract-each-perform-actions-on-the-staking-contract-before-fetching-the-rewardpertoken.-however,-due-to-the-fact-that-the-actions-performed-on-the-staking-contract-have-already-called-rewardpertoken-themselves,-wstakingrewards-can-make-a-cheaper-call-to-the-stored-rewardpertokenstored-instead.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#111. Alpha have chosen not to change the final point, stating \u201cIStakingRewards do not necessarily have rewardPerTokenStored, so we\u2019ll keep the implementation as is.\u201d", "body": "Update: Partially fixed in PR#111. Alpha have chosen not to change the final point, stating \u201cIStakingRewards do not necessarily have rewardPerTokenStored, so we\u2019ll keep the implementation as is.\u201d", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-partially-fixed-in-pr#111.-alpha-have-chosen-not-to-change-the-final-point,-stating-\u201cistakingrewards-do-not-necessarily-have-rewardpertokenstored,-so-we\u2019ll-keep-the-implementation-as-is.\u201d", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistent coding style", "body": "[N05] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n05]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "There are general inconsistencies and deviations from the Solidity Style Guide throughout the codebase. These may lead to misconceptions and confusion when reading the code. Below is a non-exhaustive list of inconsistent coding styles observed.", "body": "There are general inconsistencies and deviations from the Solidity Style Guide throughout the codebase. These may lead to misconceptions and confusion when reading the code. Below is a non-exhaustive list of inconsistent coding styles observed.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#there-are-general-inconsistencies-and-deviations-from-the-solidity-style-guide-throughout-the-codebase.-these-may-lead-to-misconceptions-and-confusion-when-reading-the-code.-below-is-a-non-exhaustive-list-of-inconsistent-coding-styles-observed.", "labels": ["OpenZeppelin"]}, {"title": "Typically internal function names should begin with a leading underscore, while public and external functions should not. This makes it clear to readers which functions are publicly accessible. However, throughout the codebase, some internal function names start with an underscore, while others do not. For example:", "body": "Typically internal function names should begin with a leading underscore, while public and external functions should not. This makes it clear to readers which functions are publicly accessible. However, throughout the codebase, some internal function names start with an underscore, while others do not. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#typically-internal-function-names-should-begin-with-a-leading-underscore,-while-public-and-external-functions-should-not.-this-makes-it-clear-to-readers-which-functions-are-publicly-accessible.-however,-throughout-the-codebase,-some-internal-function-names-start-with-an-underscore,-while-others-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "_setPrimarySources is internal and has a leading underscore.", "body": "_setPrimarySources is internal and has a leading underscore.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#_setprimarysources-is-internal-and-has-a-leading-underscore.", "labels": ["OpenZeppelin"]}, {"title": "doTransmitETH is internal and does not have a leading underscore.", "body": "doTransmitETH is internal and does not have a leading underscore.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#dotransmiteth-is-internal-and-does-not-have-a-leading-underscore.", "labels": ["OpenZeppelin"]}, {"title": "Some parameters lead with an underscore, while some do not. For example:", "body": "Some parameters lead with an underscore, while some do not. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#some-parameters-lead-with-an-underscore,-while-some-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The _pendingGovernor parameter in the setPendingGovernor function.", "body": "The _pendingGovernor parameter in the setPendingGovernor function.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-_pendinggovernor-parameter-in-the-setpendinggovernor-function.", "labels": ["OpenZeppelin"]}, {"title": "The token and amount parameters in the doTransmit function.", "body": "The token and amount parameters in the doTransmit function.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-token-and-amount-parameters-in-the-dotransmit-function.", "labels": ["OpenZeppelin"]}, {"title": "Some global values are defined in all capitals, however this style should be reserved for constants. This can lead users to believe that certain values cannot be changed, when in reality they can be. For example:", "body": "Some global values are defined in all capitals, however this style should be reserved for constants. This can lead users to believe that certain values cannot be changed, when in reality they can be. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#some-global-values-are-defined-in-all-capitals,-however-this-style-should-be-reserved-for-constants.-this-can-lead-users-to-believe-that-certain-values-cannot-be-changed,-when-in-reality-they-can-be.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "These 4 variables in HomoraBank are mutable but defined in capitals.", "body": "These 4 variables in HomoraBank are mutable but defined in capitals.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#these-4-variables-in-homorabank-are-mutable-but-defined-in-capitals.", "labels": ["OpenZeppelin"]}, {"title": "Function EXECUTOR is a function that returns a value frequently updated.", "body": "Function EXECUTOR is a function that returns a value frequently updated.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#function-executor-is-a-function-that-returns-a-value-frequently-updated.", "labels": ["OpenZeppelin"]}, {"title": "Some functions use named return values, while others don\u2019t. For example:", "body": "Some functions use named return values, while others don\u2019t. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#some-functions-use-named-return-values,-while-others-don\u2019t.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "optimalDeposit names return variables, and uses those variables.", "body": "optimalDeposit names return variables, and uses those variables.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#optimaldeposit-names-return-variables,-and-uses-those-variables.", "labels": ["OpenZeppelin"]}, {"title": "_optimalDepositA does not name the return variables.", "body": "_optimalDepositA does not name the return variables.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#_optimaldeposita-does-not-name-the-return-variables.", "labels": ["OpenZeppelin"]}, {"title": "encodeId names the return variable, but never uses this name. This is a waste of gas.", "body": "encodeId names the return variable, but never uses this name. This is a waste of gas.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#encodeid-names-the-return-variable,-but-never-uses-this-name.-this-is-a-waste-of-gas.", "labels": ["OpenZeppelin"]}, {"title": "Within global variables, some contract addresses are stored as their interface type, while others are stored as addresses and only cast to their interface when the variable is used. For example:", "body": "Within global variables, some contract addresses are stored as their interface type, while others are stored as addresses and only cast to their interface when the variable is used. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#within-global-variables,-some-contract-addresses-are-stored-as-their-interface-type,-while-others-are-stored-as-addresses-and-only-cast-to-their-interface-when-the-variable-is-used.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "IBank bank is passed to the constructor as an IBank, and stored as the same.", "body": "IBank bank is passed to the constructor as an IBank, and stored as the same.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#ibank-bank-is-passed-to-the-constructor-as-an-ibank,-and-stored-as-the-same.", "labels": ["OpenZeppelin"]}, {"title": "IWERC20 werc20 is passed to the constructor as an address, and cast to an IWERC20 for storage.", "body": "IWERC20 werc20 is passed to the constructor as an address, and cast to an IWERC20 for storage.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#iwerc20-werc20-is-passed-to-the-constructor-as-an-address,-and-cast-to-an-iwerc20-for-storage.", "labels": ["OpenZeppelin"]}, {"title": "address weth is passed to the constructor as an address and stored as the same. However when it is used, it is cast to IWETH.", "body": "address weth is passed to the constructor as an address and stored as the same. However when it is used, it is cast to IWETH.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#address-weth-is-passed-to-the-constructor-as-an-address-and-stored-as-the-same.-however-when-it-is-used,-it-is-cast-to-iweth.", "labels": ["OpenZeppelin"]}, {"title": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "body": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-enforcing-a-standard-coding-style,-such-as-that-provided-by-the-solidity-style-guide,-to-improve-the-project\u2019s-overall-legibility.-also-consider-using-a-linter-like-solhint-to-define-a-style-and-analyze-the-codebase-for-style-deviations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. The Alpha team state that \u201cwe\u2019d like to keep as is, as it doesn\u2019t affect the core logic at all. In the future, we\u2019ll use solhint to help with the coding style.\u201d", "body": "Update: Not fixed. The Alpha team state that \u201cwe\u2019d like to keep as is, as it doesn\u2019t affect the core logic at all. In the future, we\u2019ll use solhint to help with the coding style.\u201d", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-not-fixed.-the-alpha-team-state-that-\u201cwe\u2019d-like-to-keep-as-is,-as-it-doesn\u2019t-affect-the-core-logic-at-all.-in-the-future,-we\u2019ll-use-solhint-to-help-with-the-coding-style.\u201d", "labels": ["OpenZeppelin"]}, {"title": "[N06] Lack of input validation", "body": "[N06] Lack of input validation", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n06]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "Although most of the functions throughout the codebase properly validate function inputs, there are some instances of functions that do not. One example is:", "body": "Although most of the functions throughout the codebase properly validate function inputs, there are some instances of functions that do not. One example is:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#although-most-of-the-functions-throughout-the-codebase-properly-validate-function-inputs,-there-are-some-instances-of-functions-that-do-not.-one-example-is:", "labels": ["OpenZeppelin"]}, {"title": "setOracle accepts the zero address.", "body": "setOracle accepts the zero address.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#setoracle-accepts-the-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "Consider implementing require statements where appropriate to validate all user-controlled input, including governance functions, to avoid the potential for erroneous values to result in unexpected behaviors or wasted gas.", "body": "Consider implementing require statements where appropriate to validate all user-controlled input, including governance functions, to avoid the potential for erroneous values to result in unexpected behaviors or wasted gas.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-implementing-require-statements-where-appropriate-to-validate-all-user-controlled-input,-including-governance-functions,-to-avoid-the-potential-for-erroneous-values-to-result-in-unexpected-behaviors-or-wasted-gas.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#113.", "body": "Update: Fixed in PR#113.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#113.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Lack of explicit visibility in state variable", "body": "[N07] Lack of explicit visibility in state variable", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n07]-lack-of-explicit-visibility-in-state-variable", "labels": ["OpenZeppelin"]}, {"title": "The pairs mapping is using the default visibility.", "body": "The pairs mapping is using the default visibility.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-pairs-mapping-is-using-the-default-visibility.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables-and-constants.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#114.", "body": "Update: Fixed in PR#114.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#114.", "labels": ["OpenZeppelin"]}, {"title": "[N08] BasicSpell not marked as abstract", "body": "[N08] BasicSpell not marked as abstract", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n08]-basicspell-not-marked-as-abstract", "labels": ["OpenZeppelin"]}, {"title": "In Solidity, the keyword abstract is used for contracts that are not functional contracts in their own right. Such contracts must be inherited to create functional contracts. The BasicSpell contract is comprised of a base set of functions, intended to be used by inheriting contracts to interact with the HomoraBank. Consider marking the BasicSpell as abstract to clearly signify that the contract is a base contract designed to aid contracts that inherit it.", "body": "In Solidity, the keyword abstract is used for contracts that are not functional contracts in their own right. Such contracts must be inherited to create functional contracts. The BasicSpell contract is comprised of a base set of functions, intended to be used by inheriting contracts to interact with the HomoraBank. Consider marking the BasicSpell as abstract to clearly signify that the contract is a base contract designed to aid contracts that inherit it.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-solidity,-the-keyword-abstract-is-used-for-contracts-that-are-not-functional-contracts-in-their-own-right.-such-contracts-must-be-inherited-to-create-functional-contracts.-the-basicspell-contract-is-comprised-of-a-base-set-of-functions,-intended-to-be-used-by-inheriting-contracts-to-interact-with-the-homorabank.-consider-marking-the-basicspell-as-abstract-to-clearly-signify-that-the-contract-is-a-base-contract-designed-to-aid-contracts-that-inherit-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#115.", "body": "Update: Fixed in PR#115.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#115.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Divisions performed mid calculation", "body": "[N09] Divisions performed mid calculation", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n09]-divisions-performed-mid-calculation", "labels": ["OpenZeppelin"]}, {"title": "Due to the fact that Solidity truncates when dividing, performing a division in the middle of a calculation can result in truncated amounts being amplified by future calculations. There are a few instance in the codebase where division is performed mid-calculation. For example:", "body": "Due to the fact that Solidity truncates when dividing, performing a division in the middle of a calculation can result in truncated amounts being amplified by future calculations. There are a few instance in the codebase where division is performed mid-calculation. For example:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#due-to-the-fact-that-solidity-truncates-when-dividing,-performing-a-division-in-the-middle-of-a-calculation-can-result-in-truncated-amounts-being-amplified-by-future-calculations.-there-are-a-few-instance-in-the-codebase-where-division-is-performed-mid-calculation.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "In the addLiquidityInternal function", "body": "In the addLiquidityInternal function", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-the-addliquidityinternal-function", "labels": ["OpenZeppelin"]}, {"title": "In the convertForLiquidation function, where division is performed at the end of each line, but each line is part of a larger calculation.", "body": "In the convertForLiquidation function, where division is performed at the end of each line, but each line is part of a larger calculation.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-the-convertforliquidation-function,-where-division-is-performed-at-the-end-of-each-line,-but-each-line-is-part-of-a-larger-calculation.", "labels": ["OpenZeppelin"]}, {"title": "In the _optimalDepositA function", "body": "In the _optimalDepositA function", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-the-_optimaldeposita-function", "labels": ["OpenZeppelin"]}, {"title": "Being mindful of overflows, consider changing the order of operations where possible such that truncating steps are performed last to minimize any unnecessary loss of precision.", "body": "Being mindful of overflows, consider changing the order of operations where possible such that truncating steps are performed last to minimize any unnecessary loss of precision.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#being-mindful-of-overflows,-consider-changing-the-order-of-operations-where-possible-such-that-truncating-steps-are-performed-last-to-minimize-any-unnecessary-loss-of-precision.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. Alpha stated: \u201cThese are the intended orders since multiplications can overflow. Each number (after division) should maintain an extra precision of 1e18, which should be enough.", "body": "Update: Acknowledged. Alpha stated: \u201cThese are the intended orders since multiplications can overflow. Each number (after division) should maintain an extra precision of 1e18, which should be enough.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-acknowledged.-alpha-stated:-\u201cthese-are-the-intended-orders-since-multiplications-can-overflow.-each-number-(after-division)-should-maintain-an-extra-precision-of-1e18,-which-should-be-enough.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Missing Natspec", "body": "[N10] Missing Natspec", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n10]-missing-natspec", "labels": ["OpenZeppelin"]}, {"title": "While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:", "body": "While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#while-the-majority-of-the-codebase-is-well-commented,-with-natspec-used-for-most-functions,-there-are-some-places-that-natspec-is-missing-or-incomplete.-some-examples-of-this-are:", "labels": ["OpenZeppelin"]}, {"title": "setWhitelistUsers has no Natspec.", "body": "setWhitelistUsers has no Natspec.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#setwhitelistusers-has-no-natspec.", "labels": ["OpenZeppelin"]}, {"title": "getPositionDebtShareOf does not describe its parameters. The same is true of getPositionDebts.", "body": "getPositionDebtShareOf does not describe its parameters. The same is true of getPositionDebts.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#getpositiondebtshareof-does-not-describe-its-parameters.-the-same-is-true-of-getpositiondebts.", "labels": ["OpenZeppelin"]}, {"title": "Natspec is missing throughout BNum. Though this contract is out of the scope of this audit, its functions are used in the scope of the audit.", "body": "Natspec is missing throughout BNum. Though this contract is out of the scope of this audit, its functions are used in the scope of the audit.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#natspec-is-missing-throughout-bnum.-though-this-contract-is-out-of-the-scope-of-this-audit,-its-functions-are-used-in-the-scope-of-the-audit.", "labels": ["OpenZeppelin"]}, {"title": "The @return tag to describe return parameters is not used except in WMasterChef.", "body": "The @return tag to describe return parameters is not used except in WMasterChef.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-@return-tag-to-describe-return-parameters-is-not-used-except-in-wmasterchef.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.", "body": "Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-updating-the-above-examples-and-checking-that-complete-natspec-exists-for-all-functions-throughout-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#116. Points 1 and 2 above were corrected, however the team chose not to correct points 3 and 4.", "body": "Update: Partially fixed in PR#116. Points 1 and 2 above were corrected, however the team chose not to correct points 3 and 4.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-partially-fixed-in-pr#116.-points-1-and-2-above-were-corrected,-however-the-team-chose-not-to-correct-points-3-and-4.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Naming issues hinder understanding and clarity of the codebase", "body": "[N11] Naming issues hinder understanding and clarity of the codebase", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n11]-naming-issues-hinder-understanding-and-clarity-of-the-codebase", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are-to-rename:", "labels": ["OpenZeppelin"]}, {"title": "event SetPrimarySource to event SetPrimarySources.", "body": "event SetPrimarySource to event SetPrimarySources.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#event-setprimarysource-to-event-setprimarysources.", "labels": ["OpenZeppelin"]}, {"title": "getPair in BalancerSpellV1, SushiswapSpellV1, and UniswapV2SpellV1 to getAndApprovePair.", "body": "getPair in BalancerSpellV1, SushiswapSpellV1, and UniswapV2SpellV1 to getAndApprovePair.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#getpair-in-balancerspellv1,-sushiswapspellv1,-and-uniswapv2spellv1-to-getandapprovepair.", "labels": ["OpenZeppelin"]}, {"title": "px to price or ethPerX.", "body": "px to price or ethPerX.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#px-to-price-or-ethperx.", "labels": ["OpenZeppelin"]}, {"title": "collateralSize to collateralAmount.", "body": "collateralSize to collateralAmount.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#collateralsize-to-collateralamount.", "labels": ["OpenZeppelin"]}, {"title": "allBanks to tokensWithBank.", "body": "allBanks to tokensWithBank.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#allbanks-to-tokenswithbank.", "labels": ["OpenZeppelin"]}, {"title": "allowContractStatus to allowContractCalls.", "body": "allowContractStatus to allowContractCalls.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#allowcontractstatus-to-allowcontractcalls.", "labels": ["OpenZeppelin"]}, {"title": "balanceOfERC20 to localBalanceOfERC20.", "body": "balanceOfERC20 to localBalanceOfERC20.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#balanceoferc20-to-localbalanceoferc20.", "labels": ["OpenZeppelin"]}, {"title": "struct Oracle to struct TokenFactors.", "body": "struct Oracle to struct TokenFactors.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#struct-oracle-to-struct-tokenfactors.", "labels": ["OpenZeppelin"]}, {"title": "stSushi and enSushi to startSushiRewards and endSushiRewards, respectively.", "body": "stSushi and enSushi to startSushiRewards and endSushiRewards, respectively.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#stsushi-and-ensushi-to-startsushirewards-and-endsushirewards,-respectively.", "labels": ["OpenZeppelin"]}, {"title": "stRewardPerToken and enRewardPerToken to startRewardPerToken and endRewardPerToken, respectively.", "body": "stRewardPerToken and enRewardPerToken to startRewardPerToken and endRewardPerToken, respectively.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#strewardpertoken-and-enrewardpertoken-to-startrewardpertoken-and-endrewardpertoken,-respectively.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming these parts of the contracts to increase overall code clarity.", "body": "Consider renaming these parts of the contracts to increase overall code clarity.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-renaming-these-parts-of-the-contracts-to-increase-overall-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#117. Some of the above recommendations were implemented.", "body": "Update: Partially fixed in PR#117. Some of the above recommendations were implemented.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-partially-fixed-in-pr#117.-some-of-the-above-recommendations-were-implemented.", "labels": ["OpenZeppelin"]}, {"title": "[N12] No SPDX Identifiers", "body": "[N12] No SPDX Identifiers", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n12]-no-spdx-identifiers", "labels": ["OpenZeppelin"]}, {"title": "Consider adding SPDX License Identifiers to the top of each Solidity file in your codebase. Declaring the license associated with your codebase in this manner can help mitigate licensing confusions, and thereby increase community involvement, contributions, and collaborations.", "body": "Consider adding SPDX License Identifiers to the top of each Solidity file in your codebase. Declaring the license associated with your codebase in this manner can help mitigate licensing confusions, and thereby increase community involvement, contributions, and collaborations.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-adding-spdx-license-identifiers-to-the-top-of-each-solidity-file-in-your-codebase.-declaring-the-license-associated-with-your-codebase-in-this-manner-can-help-mitigate-licensing-confusions,-and-thereby-increase-community-involvement,-contributions,-and-collaborations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#118.", "body": "Update: Fixed in PR#118.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#118.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Not using delete to zero values", "body": "[N13] Not using delete to zero values", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n13]-not-using-delete-to-zero-values", "labels": ["OpenZeppelin"]}, {"title": "In the unsetOracles function within the ProxyOracles contract, when entries inside the oracles mapping are \u201cunset\u201d, they are manually replaced with an empty Oracle struct.", "body": "In the unsetOracles function within the ProxyOracles contract, when entries inside the oracles mapping are \u201cunset\u201d, they are manually replaced with an empty Oracle struct.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#in-the-unsetoracles-function-within-the-proxyoracles-contract,-when-entries-inside-the-oracles-mapping-are-\u201cunset\u201d,-they-are-manually-replaced-with-an-empty-oracle-struct.", "labels": ["OpenZeppelin"]}, {"title": "To simplify the code and clarify intent, consider using delete instead.", "body": "To simplify the code and clarify intent, consider using delete instead.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#to-simplify-the-code-and-clarify-intent,-consider-using-delete-instead.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#119.", "body": "Update: Fixed in PR#119.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#119.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Using now instead of block.timestamp", "body": "[N14] Using now instead of block.timestamp", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n14]-using-now-instead-of-block.timestamp", "labels": ["OpenZeppelin"]}, {"title": "Throughout SushiswapSpellV1 and UniswapV2SpellV1, now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity.", "body": "Throughout SushiswapSpellV1 and UniswapV2SpellV1, now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#throughout-sushiswapspellv1-and-uniswapv2spellv1,-now-is-used-rather-than-block.timestamp-to-refer-to-the-block-time.-this-term-can-be-misleading-and-is-deprecated-in-more-recent-versions-of-solidity.", "labels": ["OpenZeppelin"]}, {"title": "Consider using block.timestamp for clarity and to facilitate future upgrades.", "body": "Consider using block.timestamp for clarity and to facilitate future upgrades.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-using-block.timestamp-for-clarity-and-to-facilitate-future-upgrades.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#120.", "body": "Update: Fixed in PR#120.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#120.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Using outdated OpenZeppelin contracts", "body": "[N15] Using outdated OpenZeppelin contracts", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n15]-using-outdated-openzeppelin-contracts", "labels": ["OpenZeppelin"]}, {"title": "The codebase relies on OpenZeppelin Contracts version 3.2.0, which is outdated. Considering the Solidity version in use throughout the codebase, the latest compatible version of OpenZeppelin Contracts is 3.4.0. Consider using the most recent version of OpenZeppelin Contracts where possible.", "body": "The codebase relies on OpenZeppelin Contracts version 3.2.0, which is outdated. Considering the Solidity version in use throughout the codebase, the latest compatible version of OpenZeppelin Contracts is 3.4.0. Consider using the most recent version of OpenZeppelin Contracts where possible.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-codebase-relies-on-openzeppelin-contracts-version-3.2.0,-which-is-outdated.-considering-the-solidity-version-in-use-throughout-the-codebase,-the-latest-compatible-version-of-openzeppelin-contracts-is-3.4.0.-consider-using-the-most-recent-version-of-openzeppelin-contracts-where-possible.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#121", "body": "Update: Fixed in PR#121", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#121", "labels": ["OpenZeppelin"]}, {"title": "[N16] Visibility too permissive for ensureApprove", "body": "[N16] Visibility too permissive for ensureApprove", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n16]-visibility-too-permissive-for-ensureapprove", "labels": ["OpenZeppelin"]}, {"title": "ensureApprove function accepts a", "body": "ensureApprove function accepts a", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#ensureapprove-function-accepts-a", "labels": ["OpenZeppelin"]}, {"title": "BasicSpell contract. Given that these approvals will only be relevant to the system if they are made from within a spell, the", "body": "BasicSpell contract. Given that these approvals will only be relevant to the system if they are made from within a spell, the", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#basicspell-contract.-given-that-these-approvals-will-only-be-relevant-to-the-system-if-they-are-made-from-within-a-spell,-the", "labels": ["OpenZeppelin"]}, {"title": "Consider limiting function visibility where possible to improve the overall clarity and readability of the code.", "body": "Consider limiting function visibility where possible to improve the overall clarity and readability of the code.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-limiting-function-visibility-where-possible-to-improve-the-overall-clarity-and-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#122.", "body": "Update: Fixed in PR#122.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#122.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Typos", "body": "[N17] Typos", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n17]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "Reserev should be Reserve.", "body": "Reserev should be Reserve.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#reserev-should-be-reserve.", "labels": ["OpenZeppelin"]}, {"title": "the spell approve should be the spell has approved.", "body": "the spell approve should be the spell has approved.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-spell-approve-should-be-the-spell-has-approved.", "labels": ["OpenZeppelin"]}, {"title": "to the bank should be in the bank.", "body": "to the bank should be in the bank.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#to-the-bank-should-be-in-the-bank.", "labels": ["OpenZeppelin"]}, {"title": "if not exist should be if it does not exist.", "body": "if not exist should be if it does not exist.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#if-not-exist-should-be-if-it-does-not-exist.", "labels": ["OpenZeppelin"]}, {"title": "resolve should be resolved.", "body": "resolve should be resolved.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#resolve-should-be-resolved.", "labels": ["OpenZeppelin"]}, {"title": "basis point should be basis points.", "body": "basis point should be basis points.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#basis-point-should-be-basis-points.", "labels": ["OpenZeppelin"]}, {"title": "positon should be position.", "body": "positon should be position.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#positon-should-be-position.", "labels": ["OpenZeppelin"]}, {"title": "trigger should be triggering.", "body": "trigger should be triggering.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#trigger-should-be-triggering.", "labels": ["OpenZeppelin"]}, {"title": "bank not exists should be bank does not exist. This typo is repeated 5 times in HomoraBank.sol.", "body": "bank not exists should be bank does not exist. This typo is repeated 5 times in HomoraBank.sol.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#bank-not-exists-should-be-bank-does-not-exist.-this-typo-is-repeated-5-times-in-homorabank.sol.", "labels": ["OpenZeppelin"]}, {"title": "liqudity should be liquidity. This typo is also present on line 341.", "body": "liqudity should be liquidity. This typo is also present on line 341.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#liqudity-should-be-liquidity.-this-typo-is-also-present-on-line-341.", "labels": ["OpenZeppelin"]}, {"title": "pood should be pool.", "body": "pood should be pool.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#pood-should-be-pool.", "labels": ["OpenZeppelin"]}, {"title": "amont should be amount.", "body": "amont should be amount.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#amont-should-be-amount.", "labels": ["OpenZeppelin"]}, {"title": "The pool id that that you received LP token back should be The pool id that you will receive LP tokens back to.", "body": "The pool id that that you received LP token back should be The pool id that you will receive LP tokens back to.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-pool-id-that-that-you-received-lp-token-back-should-be-the-pool-id-that-you-will-receive-lp-tokens-back-to.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#123 \u2013 some of the above recommendations were implemented.", "body": "Update: Partially fixed in PR#123 \u2013 some of the above recommendations were implemented.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-partially-fixed-in-pr#123-\u2013-some-of-the-above-recommendations-were-implemented.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Declare uint as uint256", "body": "[N18] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n18]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, the datatype uint is used as an alias for the more explicit uint256. To favor explicitness, consider declaring all instances of uint as uint256.", "body": "Throughout the codebase, the datatype uint is used as an alias for the more explicit uint256. To favor explicitness, consider declaring all instances of uint as uint256.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#throughout-the-codebase,-the-datatype-uint-is-used-as-an-alias-for-the-more-explicit-uint256.-to-favor-explicitness,-consider-declaring-all-instances-of-uint-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged.", "body": "Alpha stated: These are the intended orders since multiplications can overflow. Each number (after division) should maintain an extra precision of 1e18, which should be enough.  [N10] Missing Natspec  While the majority of the codebase is well-commented, with Natspec used for most functions, there are some places that Natspec is missing or incomplete. Some examples of this are:  setWhitelistUsers has no Natspec.  getPositionDebtShareOf does not describe its parameters. The same is true of getPositionDebts.  Natspec is missing throughout BNum. Though this contract is out of the scope of this audit, its functions are used in the scope of the audit.  The @return tag to describe return parameters is not used except in WMasterChef.  Consider updating the above examples and checking that complete Natspec exists for all functions throughout the codebase.  Update: Partially fixed in PR#116. Points 1 and 2 above were corrected, however the team chose not to correct points 3 and 4.  [N11] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  event SetPrimarySource to event SetPrimarySources.  getPair in BalancerSpellV1, SushiswapSpellV1, and UniswapV2SpellV1 to getAndApprovePair.  px to price or ethPerX.  collateralSize to collateralAmount.  allBanks to tokensWithBank.  allowContractStatus to allowContractCalls.  balanceOfERC20 to localBalanceOfERC20.  struct Oracle to struct TokenFactors.  stSushi and enSushi to startSushiRewards and endSushiRewards, respectively.  stRewardPerToken and enRewardPerToken to startRewardPerToken and endRewardPerToken, respectively.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Partially fixed in PR#117. Some of the above recommendations were implemented.  [N12] No SPDX Identifiers  Consider adding SPDX License Identifiers to the top of each Solidity file in your codebase. Declaring the license associated with your codebase in this manner can help mitigate licensing confusions, and thereby increase community involvement, contributions, and collaborations.  Update: Fixed in PR#118.  [N13] Not using delete to zero values  In the unsetOracles function within the ProxyOracles contract, when entries inside the oracles mapping are unset, they are manually replaced with an empty Oracle struct.  To simplify the code and clarify intent, consider using delete instead.  Update: Fixed in PR#119.  [N14] Using now instead of block.timestamp  Throughout SushiswapSpellV1 and UniswapV2SpellV1, now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity.  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#120.  [N15] Using outdated OpenZeppelin contracts  The codebase relies on OpenZeppelin Contracts version 3.2.0, which is outdated. Considering the Solidity version in use throughout the codebase, the latest compatible version of OpenZeppelin Contracts is 3.4.0. Consider using the most recent version of OpenZeppelin Contracts where possible.  Update: Fixed in PR#121  [N16] Visibility too permissive for ensureApprove  ensureApprove function accepts a  BasicSpell contract. Given that these approvals will only be relevant to the system if they are made from within a spell, the  Consider limiting function visibility where possible to improve the overall clarity and readability of the code.  Update: Fixed in PR#122.  [N17] Typos  The codebase contains the following typos:  Reserev should be Reserve.  the spell approve should be the spell has approved.  to the bank should be in the bank.  if not exist should be if it does not exist.  resolve should be resolved.  basis point should be basis points.  positon should be position.  trigger should be triggering.  bank not exists should be bank does not exist. This typo is repeated 5 times in HomoraBank.sol.  liqudity should be liquidity. This typo is also present on line 341.  pood should be pool.  amont should be amount.  The pool id that that you received LP token back should be The pool id that you will receive LP tokens back to.  Consider correcting these typos to improve code readability.  Update: Partially fixed in PR#123  some of the above recommendations were implemented.  [N18] Declare uint as uint256  Throughout the codebase, the datatype uint is used as an alias for the more explicit uint256. To favor explicitness, consider declaring all instances of uint as uint256.    [N19] Uninformative revert messages in require statements  There are several instances in the codebase where require statements have ambiguous or imprecise error messages. As error messages are intended to notify users about failing conditions, they should provide enough information so that appropriate corrections can be made to interact with the system. Below is a non-exhaustive list of identified instances:  Line 29 of CoreOracle.sol  consider Price oracle failure.  Line 97 of CurveSpellV1.sol  consider Bad pid or gid.  Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.  Update: Fixed in PR#124.  [N20] Unnecessary imports and inheritance  The codebase contains a number of instances of unnecessary imports and unnecessary inheritance. Some examples are:  HomoraBank imports and inherits Initializable. However, Governable already imports and inherits Initializable, so this can be removed from HomoraBank.  CurveSpellV1 imports IWERC20 and does not use it. This import can be removed.  WERC20 imports IERC20 and SafeERC20. However, the latter already imports the former, so WERC20 need not import IERC20. The same is true in WMasterChef, WStakingRewards, and WLiquidityGauge.  Though out of scope, we did notice that ERC1155NaiveReceiver imports OpenZeppelins ERC1155Receiver and IERC1155Receiver. The former imports the latter, so explicitly importing the latter is unnecessary.  Consider removing unnecessary imports and inheritance to simplify the codebase.  Update: Fixed in PR#125.  Conclusions  0 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-acknowledged.", "labels": ["OpenZeppelin"]}, {"title": "[N19] Uninformative revert messages in require statements", "body": "[N19] Uninformative revert messages in require statements", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n19]-uninformative-revert-messages-in-require-statements", "labels": ["OpenZeppelin"]}, {"title": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. As error messages are intended to notify users about failing conditions, they should provide enough information so that appropriate corrections can be made to interact with the system. Below is a non-exhaustive list of identified instances:", "body": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. As error messages are intended to notify users about failing conditions, they should provide enough information so that appropriate corrections can be made to interact with the system. Below is a non-exhaustive list of identified instances:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#there-are-several-instances-in-the-codebase-where-require-statements-have-ambiguous-or-imprecise-error-messages.-as-error-messages-are-intended-to-notify-users-about-failing-conditions,-they-should-provide-enough-information-so-that-appropriate-corrections-can-be-made-to-interact-with-the-system.-below-is-a-non-exhaustive-list-of-identified-instances:", "labels": ["OpenZeppelin"]}, {"title": "Line 29 of CoreOracle.sol \u2013 consider Price oracle failure.", "body": "Line 29 of CoreOracle.sol \u2013 consider Price oracle failure.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#line-29-of-coreoracle.sol-\u2013-consider-price-oracle-failure.", "labels": ["OpenZeppelin"]}, {"title": "Line 97 of CurveSpellV1.sol \u2013 consider Bad pid or gid.", "body": "Line 97 of CurveSpellV1.sol \u2013 consider Bad pid or gid.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#line-97-of-curvespellv1.sol-\u2013-consider-bad-pid-or-gid.", "labels": ["OpenZeppelin"]}, {"title": "Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "body": "Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-consider-not-only-fixing-the-specific-instances-mentioned-above,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#124.", "body": "Update: Fixed in PR#124.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#124.", "labels": ["OpenZeppelin"]}, {"title": "[N20] Unnecessary imports and inheritance", "body": "[N20] Unnecessary imports and inheritance", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#[n20]-unnecessary-imports-and-inheritance", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains a number of instances of unnecessary imports and unnecessary inheritance. Some examples are:", "body": "The codebase contains a number of instances of unnecessary imports and unnecessary inheritance. Some examples are:", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#the-codebase-contains-a-number-of-instances-of-unnecessary-imports-and-unnecessary-inheritance.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "HomoraBank imports and inherits Initializable. However, Governable already imports and inherits Initializable, so this can be removed from HomoraBank.", "body": "HomoraBank imports and inherits Initializable. However, Governable already imports and inherits Initializable, so this can be removed from HomoraBank.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#homorabank-imports-and-inherits-initializable.-however,-governable-already-imports-and-inherits-initializable,-so-this-can-be-removed-from-homorabank.", "labels": ["OpenZeppelin"]}, {"title": "CurveSpellV1 imports IWERC20 and does not use it. This import can be removed.", "body": "CurveSpellV1 imports IWERC20 and does not use it. This import can be removed.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#curvespellv1-imports-iwerc20-and-does-not-use-it.-this-import-can-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "WERC20 imports IERC20 and SafeERC20. However, the latter already imports the former, so WERC20 need not import IERC20. The same is true in WMasterChef, WStakingRewards, and WLiquidityGauge.", "body": "WERC20 imports IERC20 and SafeERC20. However, the latter already imports the former, so WERC20 need not import IERC20. The same is true in WMasterChef, WStakingRewards, and WLiquidityGauge.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#werc20-imports-ierc20-and-safeerc20.-however,-the-latter-already-imports-the-former,-so-werc20-need-not-import-ierc20.-the-same-is-true-in-wmasterchef,-wstakingrewards,-and-wliquiditygauge.", "labels": ["OpenZeppelin"]}, {"title": "Though out of scope, we did notice that ERC1155NaiveReceiver imports OpenZeppelin\u2019s ERC1155Receiver and IERC1155Receiver. The former imports the latter, so explicitly importing the latter is unnecessary.", "body": "Though out of scope, we did notice that ERC1155NaiveReceiver imports OpenZeppelin\u2019s ERC1155Receiver and IERC1155Receiver. The former imports the latter, so explicitly importing the latter is unnecessary.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#though-out-of-scope,-we-did-notice-that-erc1155naivereceiver-imports-openzeppelin\u2019s-erc1155receiver-and-ierc1155receiver.-the-former-imports-the-latter,-so-explicitly-importing-the-latter-is-unnecessary.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing unnecessary imports and inheritance to simplify the codebase.", "body": "Consider removing unnecessary imports and inheritance to simplify the codebase.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#consider-removing-unnecessary-imports-and-inheritance-to-simplify-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#125.", "body": "Update: Fixed in PR#125.", "html_url": "https://blog.openzeppelin.com/alpha-homora-v2#update:-fixed-in-pr#125.", "labels": ["OpenZeppelin"]}, {"title": "None.", "body": "Medium Severity    Low Severity    Notes & Additional Information    Conclusions  We found this bugfix to be straightforward and clean, and we detected no issues worth mentioning.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/the-graph-staking-bugfix-2-audit#none.", "labels": ["OpenZeppelin"]}, {"title": "None.", "body": "Medium Severity    Low Severity  [L01] Duplicated code  _pushTokens and  _pullTokens are introduced as member functions to the  _pushTokens and  _pullTokens are introduced as member functions to the  PR#457. Aside from minor differences in revert messages, these functions sharing the same name have identical logic.  Assuming both of these PRs are merged without additional changes made, there will be duplicate functions across modules in this codebase. This can cause many problems in terms of the maintainability of the codebase.  Consider consolidating duplicate functions within a common library.  Update: Fixed in commit 3c684f4079b118d6aa42cbb4ce944a885f50707e.  [L02] Constant is not declared explicitly  The ATTESTATION_SIZE_BYTES constant is defined in the DisputeManager contract to be 161. Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors, and external contributors alike.  Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Consider either defining ATTESTATION_SIZE_BYTES to be a sum of intermediate constants or documenting in comments from where it is derived.  Update: Fixed in commit d5487d80f9dd099f2970ea98e34ff30813c7693e.  [L03] Same event used for multiple variables  The ParameterUpdated event of the Managed contracts (including the DisputeManager contract) is emitted whenever a new value is set for a contract parameter.  In the case of the _setSlashingPercentage function, the event is emitted only once two variables are set. Moreover, neither old nor new values are emitted together with the event.  Consider being more explicit in the event string input parameter to reflect that two variables have been set.  Update: Fixed in commit 7709b944fdbef185a06d48937a099f0b4b19339b.  [L04] Unclear lack of input validation  The initialize and setSlashingPercentage functions of the DisputeManager contract are lacking of any input validation for the _qrySlashingPercentage and _idxSlashingPercentage variables.  At the same time, the comment in line 264 suggests that those slashing percentages are allowed to be zero.  If this is true and theres a dispute that has been created, any call to acceptDispute will internally call the _slashIndexer and the call will ultimately fail and revert here because of the zero values of the slashing percentages.  This is not a security issue as in this case, to finalize the dispute, the drawDispute function should be called instead. However, unexpected failures may confuse the users.  Consider adding a check in the acceptDispute function that will revert early and loudly whenever a dispute is trying to be accepted with zero slashing percentages. Moreover, make sure to set these parameters to positive values if disputes are intended to be accepted.  Update: Fixed in commit 3b38f9e6d82b7cf7169cad111d9c9cf4cdea3326 where documentation was included to clarify that acceptDispute will fail under certain conditions and that best course of action is to resolve using drawDispute or rejectDispute.  Notes & Additional Information  [N01] Default value used  The IDisputeManager interface is using the zero value DisputeType.IndexingDispute as meaningful value for the enum.  Zero values should never be used to represent meaningful states or values for contract variables, as this can lead to confusion.  Consider adding an initial Null state to the enum to explicitly set non-zero values to proper DisputeTypes.  Update: Fixed in commit 59157c8705c7cda991b6609ede463c6e542d2201.  Conclusions  4 Low severity issues and other notes have been reported with recommended changes to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#none.", "labels": ["OpenZeppelin"]}, {"title": "[L01] Duplicated code", "body": "[L01] Duplicated code", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#[l01]-duplicated-code", "labels": ["OpenZeppelin"]}, {"title": "_pushTokens and", "body": "_pushTokens and", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#_pushtokens-and", "labels": ["OpenZeppelin"]}, {"title": "_pullTokens are introduced as member functions to the", "body": "PR#457. Aside from minor differences in revert messages, these functions sharing the same name have identical logic.  Assuming both of these PRs are merged without additional changes made, there will be duplicate functions across modules in this codebase. This can cause many problems in terms of the maintainability of the codebase.  Consider consolidating duplicate functions within a common library.  Update: Fixed in commit 3c684f4079b118d6aa42cbb4ce944a885f50707e.  [L02] Constant is not declared explicitly  The ATTESTATION_SIZE_BYTES constant is defined in the DisputeManager contract to be 161. Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors, and external contributors alike.  Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Consider either defining ATTESTATION_SIZE_BYTES to be a sum of intermediate constants or documenting in comments from where it is derived.  Update: Fixed in commit d5487d80f9dd099f2970ea98e34ff30813c7693e.  [L03] Same event used for multiple variables  The ParameterUpdated event of the Managed contracts (including the DisputeManager contract) is emitted whenever a new value is set for a contract parameter.  In the case of the _setSlashingPercentage function, the event is emitted only once two variables are set. Moreover, neither old nor new values are emitted together with the event.  Consider being more explicit in the event string input parameter to reflect that two variables have been set.  Update: Fixed in commit 7709b944fdbef185a06d48937a099f0b4b19339b.  [L04] Unclear lack of input validation  The initialize and setSlashingPercentage functions of the DisputeManager contract are lacking of any input validation for the _qrySlashingPercentage and _idxSlashingPercentage variables.  At the same time, the comment in line 264 suggests that those slashing percentages are allowed to be zero.  If this is true and theres a dispute that has been created, any call to acceptDispute will internally call the _slashIndexer and the call will ultimately fail and revert here because of the zero values of the slashing percentages.  This is not a security issue as in this case, to finalize the dispute, the drawDispute function should be called instead. However, unexpected failures may confuse the users.  Consider adding a check in the acceptDispute function that will revert early and loudly whenever a dispute is trying to be accepted with zero slashing percentages. Moreover, make sure to set these parameters to positive values if disputes are intended to be accepted.  Update: Fixed in commit 3b38f9e6d82b7cf7169cad111d9c9cf4cdea3326 where documentation was included to clarify that acceptDispute will fail under certain conditions and that best course of action is to resolve using drawDispute or rejectDispute.  Notes & Additional Information  [N01] Default value used  The IDisputeManager interface is using the zero value DisputeType.IndexingDispute as meaningful value for the enum.  Zero values should never be used to represent meaningful states or values for contract variables, as this can lead to confusion.  Consider adding an initial Null state to the enum to explicitly set non-zero values to proper DisputeTypes.  Update: Fixed in commit 59157c8705c7cda991b6609ede463c6e542d2201.  Conclusions  4 Low severity issues and other notes have been reported with recommended changes to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#_pulltokens-are-introduced-as-member-functions-to-the", "labels": ["OpenZeppelin"]}, {"title": "PR#457. Aside from minor differences in revert messages, these functions sharing the same name have identical logic.", "body": "PR#457. Aside from minor differences in revert messages, these functions sharing the same name have identical logic.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#pr#457.-aside-from-minor-differences-in-revert-messages,-these-functions-sharing-the-same-name-have-identical-logic.", "labels": ["OpenZeppelin"]}, {"title": "Assuming both of these PR\u2019s are merged without additional changes made, there will be duplicate functions across modules in this codebase. This can cause many problems in terms of the maintainability of the codebase.", "body": "Assuming both of these PR\u2019s are merged without additional changes made, there will be duplicate functions across modules in this codebase. This can cause many problems in terms of the maintainability of the codebase.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#assuming-both-of-these-pr\u2019s-are-merged-without-additional-changes-made,-there-will-be-duplicate-functions-across-modules-in-this-codebase.-this-can-cause-many-problems-in-terms-of-the-maintainability-of-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider consolidating duplicate functions within a common library.", "body": "Consider consolidating duplicate functions within a common library.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#consider-consolidating-duplicate-functions-within-a-common-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 3c684f4079b118d6aa42cbb4ce944a885f50707e.", "body": "Update: Fixed in commit 3c684f4079b118d6aa42cbb4ce944a885f50707e.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#update:-fixed-in-commit-3c684f4079b118d6aa42cbb4ce944a885f50707e.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Constant is not declared explicitly", "body": "[L02] Constant is not declared explicitly", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#[l02]-constant-is-not-declared-explicitly", "labels": ["OpenZeppelin"]}, {"title": "The ATTESTATION_SIZE_BYTES constant is defined in the DisputeManager contract to be 161. Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors, and external contributors alike.", "body": "The ATTESTATION_SIZE_BYTES constant is defined in the DisputeManager contract to be 161. Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors, and external contributors alike.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#the-attestation_size_bytes-constant-is-defined-in-the-disputemanager-contract-to-be-161.-literal-values-in-the-codebase-without-an-explained-meaning-make-the-code-harder-to-read,-understand-and-maintain,-thus-hindering-the-experience-of-developers,-auditors,-and-external-contributors-alike.", "labels": ["OpenZeppelin"]}, {"title": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.", "body": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#developers-should-define-a-constant-variable-for-every-magic-value-used-(including-booleans),-giving-it-a-clear-and-self-explanatory-name.-additionally,-for-complex-values,-inline-comments-explaining-how-they-were-calculated-or-why-they-were-chosen-are-highly-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Consider either defining ATTESTATION_SIZE_BYTES to be a sum of intermediate constants or documenting in comments from where it is derived.", "body": "Consider either defining ATTESTATION_SIZE_BYTES to be a sum of intermediate constants or documenting in comments from where it is derived.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#consider-either-defining-attestation_size_bytes-to-be-a-sum-of-intermediate-constants-or-documenting-in-comments-from-where-it-is-derived.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit d5487d80f9dd099f2970ea98e34ff30813c7693e.", "body": "Update: Fixed in commit d5487d80f9dd099f2970ea98e34ff30813c7693e.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#update:-fixed-in-commit-d5487d80f9dd099f2970ea98e34ff30813c7693e.", "labels": ["OpenZeppelin"]}, {"title": "[L03] Same event used for multiple variables", "body": "[L03] Same event used for multiple variables", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#[l03]-same-event-used-for-multiple-variables", "labels": ["OpenZeppelin"]}, {"title": "The ParameterUpdated event of the Managed contracts (including the DisputeManager contract) is emitted whenever a new value is set for a contract parameter.", "body": "The ParameterUpdated event of the Managed contracts (including the DisputeManager contract) is emitted whenever a new value is set for a contract parameter.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#the-parameterupdated-event-of-the-managed-contracts-(including-the-disputemanager-contract)-is-emitted-whenever-a-new-value-is-set-for-a-contract-parameter.", "labels": ["OpenZeppelin"]}, {"title": "In the case of the _setSlashingPercentage function, the event is emitted only once two variables are set. Moreover, neither old nor new values are emitted together with the event.", "body": "In the case of the _setSlashingPercentage function, the event is emitted only once two variables are set. Moreover, neither old nor new values are emitted together with the event.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#in-the-case-of-the-_setslashingpercentage-function,-the-event-is-emitted-only-once-two-variables-are-set.-moreover,-neither-old-nor-new-values-are-emitted-together-with-the-event.", "labels": ["OpenZeppelin"]}, {"title": "Consider being more explicit in the event string input parameter to reflect that two variables have been set.", "body": "Consider being more explicit in the event string input parameter to reflect that two variables have been set.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#consider-being-more-explicit-in-the-event-string-input-parameter-to-reflect-that-two-variables-have-been-set.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 7709b944fdbef185a06d48937a099f0b4b19339b.", "body": "Update: Fixed in commit 7709b944fdbef185a06d48937a099f0b4b19339b.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#update:-fixed-in-commit-7709b944fdbef185a06d48937a099f0b4b19339b.", "labels": ["OpenZeppelin"]}, {"title": "[L04] Unclear lack of input validation", "body": "[L04] Unclear lack of input validation", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#[l04]-unclear-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "The initialize and setSlashingPercentage functions of the DisputeManager contract are lacking of any input validation for the _qrySlashingPercentage and _idxSlashingPercentage variables.", "body": "The initialize and setSlashingPercentage functions of the DisputeManager contract are lacking of any input validation for the _qrySlashingPercentage and _idxSlashingPercentage variables.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#the-initialize-and-setslashingpercentage-functions-of-the-disputemanager-contract-are-lacking-of-any-input-validation-for-the-_qryslashingpercentage-and-_idxslashingpercentage-variables.", "labels": ["OpenZeppelin"]}, {"title": "At the same time, the comment in line 264 suggests that those slashing percentages are allowed to be zero.", "body": "At the same time, the comment in line 264 suggests that those slashing percentages are allowed to be zero.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#at-the-same-time,-the-comment-in-line-264-suggests-that-those-slashing-percentages-are-allowed-to-be-zero.", "labels": ["OpenZeppelin"]}, {"title": "If this is true and there\u2019s a dispute that has been created, any call to acceptDispute will internally call the _slashIndexer and the call will ultimately fail and revert here because of the zero values of the slashing percentages.", "body": "If this is true and there\u2019s a dispute that has been created, any call to acceptDispute will internally call the _slashIndexer and the call will ultimately fail and revert here because of the zero values of the slashing percentages.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#if-this-is-true-and-there\u2019s-a-dispute-that-has-been-created,-any-call-to-acceptdispute-will-internally-call-the-_slashindexer-and-the-call-will-ultimately-fail-and-revert-here-because-of-the-zero-values-of-the-slashing-percentages.", "labels": ["OpenZeppelin"]}, {"title": "This is not a security issue as in this case, to finalize the dispute, the drawDispute function should be called instead. However, unexpected failures may confuse the users.", "body": "This is not a security issue as in this case, to finalize the dispute, the drawDispute function should be called instead. However, unexpected failures may confuse the users.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#this-is-not-a-security-issue-as-in-this-case,-to-finalize-the-dispute,-the-drawdispute-function-should-be-called-instead.-however,-unexpected-failures-may-confuse-the-users.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding a check in the acceptDispute function that will revert early and loudly whenever a dispute is trying to be accepted with zero slashing percentages. Moreover, make sure to set these parameters to positive values if disputes are intended to be accepted.", "body": "Consider adding a check in the acceptDispute function that will revert early and loudly whenever a dispute is trying to be accepted with zero slashing percentages. Moreover, make sure to set these parameters to positive values if disputes are intended to be accepted.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#consider-adding-a-check-in-the-acceptdispute-function-that-will-revert-early-and-loudly-whenever-a-dispute-is-trying-to-be-accepted-with-zero-slashing-percentages.-moreover,-make-sure-to-set-these-parameters-to-positive-values-if-disputes-are-intended-to-be-accepted.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 3b38f9e6d82b7cf7169cad111d9c9cf4cdea3326 where documentation was included to clarify that acceptDispute will fail under certain conditions and that best course of action is to resolve using drawDispute or rejectDispute.", "body": "Update: Fixed in commit 3b38f9e6d82b7cf7169cad111d9c9cf4cdea3326 where documentation was included to clarify that acceptDispute will fail under certain conditions and that best course of action is to resolve using drawDispute or rejectDispute.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#update:-fixed-in-commit-3b38f9e6d82b7cf7169cad111d9c9cf4cdea3326-where-documentation-was-included-to-clarify-that-acceptdispute-will-fail-under-certain-conditions-and-that-best-course-of-action-is-to-resolve-using-drawdispute-or-rejectdispute.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Default value used", "body": "[N01] Default value used", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#[n01]-default-value-used", "labels": ["OpenZeppelin"]}, {"title": "The IDisputeManager interface is using the zero value DisputeType.IndexingDispute as meaningful value for the enum.", "body": "The IDisputeManager interface is using the zero value DisputeType.IndexingDispute as meaningful value for the enum.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#the-idisputemanager-interface-is-using-the-zero-value-disputetype.indexingdispute-as-meaningful-value-for-the-enum.", "labels": ["OpenZeppelin"]}, {"title": "Zero values should never be used to represent meaningful states or values for contract variables, as this can lead to confusion.", "body": "Zero values should never be used to represent meaningful states or values for contract variables, as this can lead to confusion.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#zero-values-should-never-be-used-to-represent-meaningful-states-or-values-for-contract-variables,-as-this-can-lead-to-confusion.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding an initial Null state to the enum to explicitly set non-zero values to proper DisputeTypes.", "body": "Consider adding an initial Null state to the enum to explicitly set non-zero values to proper DisputeTypes.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#consider-adding-an-initial-null-state-to-the-enum-to-explicitly-set-non-zero-values-to-proper-disputetypes.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 59157c8705c7cda991b6609ede463c6e542d2201.", "body": "Update: Fixed in commit 59157c8705c7cda991b6609ede463c6e542d2201.", "html_url": "https://blog.openzeppelin.com/thegraph-slashing-upgrade-audit#update:-fixed-in-commit-59157c8705c7cda991b6609ede463c6e542d2201.", "labels": ["OpenZeppelin"]}, {"title": "None.", "body": "Medium Severity    Low Severity  [L01] Lack of input validation  The collect function of the Staking contract does not validate whether the _tokens parameter is non-zero.  When the _tokens parameter is zero, the collect function can run without error, and emit its AllocationCollected event. This provides no useful feedback in the form of a revert message if the parameter was malformed by the client. Furthermore, the emission of the trivial AllocationCollected event may confuse off-chain services.  In the case that allowing collect to be called on zero _tokens was a design choice, consider properly documenting this in the code and other public-facing documentation. Otherwise, consider adding proper checks that the _tokens parameter is non-zero.  Update: Fixed in commit bd06a61e1055a5e0585e8ea64e618a8d6ce65d7c where the collect function now includes documentation describing that zero values of _tokens are allowed.  [L02] Unclean code  In the lockTokens function of the Stakes contract the weightedAverage function is called, but it is not clear what function parameters each of its four inputs denote. This is because as the inputs are passed in, their names are not suggestive of, or similar to, the parameters belonging to the function signature of the weightedAverage function.  This hinders readability and understanding of the code by auditors or other stakeholders.  Consider either documenting as comments in the code the correspondence of each input to parameter or defining and using intermediate variables with suggestive names as inputs.  Update: Fixed in PR465 at commit bead8f1e9f248764eec8f4ae5f627c86da33c78d.  Notes & Additional Information  [N01] Misleading naming  The diff function of the MathUtils library is performing a difference of the two numbers or returning zero if the result is negative.  Consider changing the name of the function to diffOrZero or some other name that can be more explicit on the purpose of the function.  Update: Fixed in commit 3ef27446c7eef64590e133358119d2cbbb0cad65.  [N02] Erroneous docstrings  The private _setDelegationParameters function of the Staking contract is copy/pasting the docstrings from the above setDelegationParameters function.  Consider giving this private function appropriate docstrings or avoid duplicating them to improve code readability and clarity.  Update: Fixed in commit c8255c05f2dca0a4c7f1574c730255a8c0d39d8c.  [N03] Inconsistent style  The _sendRewards function of the Staking contract makes an ERC20 Graph Token transfer and checks its success with a require statement. Within this same pull request, the _pushTokens helper function was introduced, making the same transfer and checking its success. This helper function is used in all the Staking contracts functions, making a Graph Token transfer, except for the _sendRewards function.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style is recommended. For consistency, consider using the _pushTokens function for the token transfer within the _sendRewards function.  Update: Fixed in commit e11d04183d98f06276cd3fd38c4ad90c4cfd9b65.  Conclusions  2 Low severity issues and other notes have been reported with recommended changes to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#none.", "labels": ["OpenZeppelin"]}, {"title": "[L01] Lack of input validation", "body": "[L01] Lack of input validation", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#[l01]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "The collect function of the Staking contract does not validate whether the _tokens parameter is non-zero.", "body": "The collect function of the Staking contract does not validate whether the _tokens parameter is non-zero.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#the-collect-function-of-the-staking-contract-does-not-validate-whether-the-_tokens-parameter-is-non-zero.", "labels": ["OpenZeppelin"]}, {"title": "When the _tokens parameter is zero, the collect function can run without error, and emit its AllocationCollected event. This provides no useful feedback in the form of a revert message if the parameter was malformed by the client. Furthermore, the emission of the trivial AllocationCollected event may confuse off-chain services.", "body": "When the _tokens parameter is zero, the collect function can run without error, and emit its AllocationCollected event. This provides no useful feedback in the form of a revert message if the parameter was malformed by the client. Furthermore, the emission of the trivial AllocationCollected event may confuse off-chain services.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#when-the-_tokens-parameter-is-zero,-the-collect-function-can-run-without-error,-and-emit-its-allocationcollected-event.-this-provides-no-useful-feedback-in-the-form-of-a-revert-message-if-the-parameter-was-malformed-by-the-client.-furthermore,-the-emission-of-the-trivial-allocationcollected-event-may-confuse-off-chain-services.", "labels": ["OpenZeppelin"]}, {"title": "In the case that allowing collect to be called on zero _tokens was a design choice, consider properly documenting this in the code and other public-facing documentation. Otherwise, consider adding proper checks that the _tokens parameter is non-zero.", "body": "In the case that allowing collect to be called on zero _tokens was a design choice, consider properly documenting this in the code and other public-facing documentation. Otherwise, consider adding proper checks that the _tokens parameter is non-zero.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#in-the-case-that-allowing-collect-to-be-called-on-zero-_tokens-was-a-design-choice,-consider-properly-documenting-this-in-the-code-and-other-public-facing-documentation.-otherwise,-consider-adding-proper-checks-that-the-_tokens-parameter-is-non-zero.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit bd06a61e1055a5e0585e8ea64e618a8d6ce65d7c where the collect function now includes documentation describing that zero values of _tokens are allowed.", "body": "Update: Fixed in commit bd06a61e1055a5e0585e8ea64e618a8d6ce65d7c where the collect function now includes documentation describing that zero values of _tokens are allowed.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#update:-fixed-in-commit-bd06a61e1055a5e0585e8ea64e618a8d6ce65d7c-where-the-collect-function-now-includes-documentation-describing-that-zero-values-of-_tokens-are-allowed.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Unclean code", "body": "[L02] Unclean code", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#[l02]-unclean-code", "labels": ["OpenZeppelin"]}, {"title": "In the lockTokens function of the Stakes contract the weightedAverage function is called, but it is not clear what function parameters each of its four inputs denote. This is because as the inputs are passed in, their names are not suggestive of, or similar to, the parameters belonging to the function signature of the weightedAverage function.", "body": "In the lockTokens function of the Stakes contract the weightedAverage function is called, but it is not clear what function parameters each of its four inputs denote. This is because as the inputs are passed in, their names are not suggestive of, or similar to, the parameters belonging to the function signature of the weightedAverage function.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#in-the-locktokens-function-of-the-stakes-contract-the-weightedaverage-function-is-called,-but-it-is-not-clear-what-function-parameters-each-of-its-four-inputs-denote.-this-is-because-as-the-inputs-are-passed-in,-their-names-are-not-suggestive-of,-or-similar-to,-the-parameters-belonging-to-the-function-signature-of-the-weightedaverage-function.", "labels": ["OpenZeppelin"]}, {"title": "This hinders readability and understanding of the code by auditors or other stakeholders.", "body": "This hinders readability and understanding of the code by auditors or other stakeholders.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#this-hinders-readability-and-understanding-of-the-code-by-auditors-or-other-stakeholders.", "labels": ["OpenZeppelin"]}, {"title": "Consider either documenting as comments in the code the correspondence of each input to parameter or defining and using intermediate variables with suggestive names as inputs.", "body": "Consider either documenting as comments in the code the correspondence of each input to parameter or defining and using intermediate variables with suggestive names as inputs.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#consider-either-documenting-as-comments-in-the-code-the-correspondence-of-each-input-to-parameter-or-defining-and-using-intermediate-variables-with-suggestive-names-as-inputs.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR465 at commit bead8f1e9f248764eec8f4ae5f627c86da33c78d.", "body": "Update: Fixed in PR465 at commit bead8f1e9f248764eec8f4ae5f627c86da33c78d.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#update:-fixed-in-pr465-at-commit-bead8f1e9f248764eec8f4ae5f627c86da33c78d.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Misleading naming", "body": "[N01] Misleading naming", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#[n01]-misleading-naming", "labels": ["OpenZeppelin"]}, {"title": "The diff function of the MathUtils library is performing a difference of the two numbers or returning zero if the result is negative.", "body": "The diff function of the MathUtils library is performing a difference of the two numbers or returning zero if the result is negative.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#the-diff-function-of-the-mathutils-library-is-performing-a-difference-of-the-two-numbers-or-returning-zero-if-the-result-is-negative.", "labels": ["OpenZeppelin"]}, {"title": "Consider changing the name of the function to diffOrZero or some other name that can be more explicit on the purpose of the function.", "body": "Consider changing the name of the function to diffOrZero or some other name that can be more explicit on the purpose of the function.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#consider-changing-the-name-of-the-function-to-difforzero-or-some-other-name-that-can-be-more-explicit-on-the-purpose-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 3ef27446c7eef64590e133358119d2cbbb0cad65.", "body": "Update: Fixed in commit 3ef27446c7eef64590e133358119d2cbbb0cad65.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#update:-fixed-in-commit-3ef27446c7eef64590e133358119d2cbbb0cad65.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Erroneous docstrings", "body": "[N02] Erroneous docstrings", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#[n02]-erroneous-docstrings", "labels": ["OpenZeppelin"]}, {"title": "The private _setDelegationParameters function of the Staking contract is copy/pasting the docstrings from the above setDelegationParameters function.", "body": "The private _setDelegationParameters function of the Staking contract is copy/pasting the docstrings from the above setDelegationParameters function.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#the-private-_setdelegationparameters-function-of-the-staking-contract-is-copy/pasting-the-docstrings-from-the-above-setdelegationparameters-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider giving this private function appropriate docstrings or avoid duplicating them to improve code readability and clarity.", "body": "Consider giving this private function appropriate docstrings or avoid duplicating them to improve code readability and clarity.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#consider-giving-this-private-function-appropriate-docstrings-or-avoid-duplicating-them-to-improve-code-readability-and-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit c8255c05f2dca0a4c7f1574c730255a8c0d39d8c.", "body": "Update: Fixed in commit c8255c05f2dca0a4c7f1574c730255a8c0d39d8c.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#update:-fixed-in-commit-c8255c05f2dca0a4c7f1574c730255a8c0d39d8c.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Inconsistent style", "body": "[N03] Inconsistent style", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#[n03]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "The _sendRewards function of the Staking contract makes an ERC20 Graph Token transfer and checks its success with a require statement. Within this same pull request, the _pushTokens helper function was introduced, making the same transfer and checking its success. This helper function is used in all the Staking contract\u2019s functions, making a Graph Token transfer, except for the _sendRewards function.", "body": "The _sendRewards function of the Staking contract makes an ERC20 Graph Token transfer and checks its success with a require statement. Within this same pull request, the _pushTokens helper function was introduced, making the same transfer and checking its success. This helper function is used in all the Staking contract\u2019s functions, making a Graph Token transfer, except for the _sendRewards function.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#the-_sendrewards-function-of-the-staking-contract-makes-an-erc20-graph-token-transfer-and-checks-its-success-with-a-require-statement.-within-this-same-pull-request,-the-_pushtokens-helper-function-was-introduced,-making-the-same-transfer-and-checking-its-success.-this-helper-function-is-used-in-all-the-staking-contract\u2019s-functions,-making-a-graph-token-transfer,-except-for-the-_sendrewards-function.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style is recommended. For consistency, consider using the _pushTokens function for the token transfer within the _sendRewards function.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style is recommended. For consistency, consider using the _pushTokens function for the token transfer within the _sendRewards function.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-is-recommended.-for-consistency,-consider-using-the-_pushtokens-function-for-the-token-transfer-within-the-_sendrewards-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit e11d04183d98f06276cd3fd38c4ad90c4cfd9b65.", "body": "Update: Fixed in commit e11d04183d98f06276cd3fd38c4ad90c4cfd9b65.", "html_url": "https://blog.openzeppelin.com/thegraph-staking-bugfix-audit-1#update:-fixed-in-commit-e11d04183d98f06276cd3fd38c4ad90c4cfd9b65.", "labels": ["OpenZeppelin"]}, {"title": "None.", "body": "Medium Severity  [M01] Old contract versions can be mistakenly used  The syncAllContracts function is in charge of updating the cached addresses with new values whenever needed. However, if this function is not called as soon as a new contract is deployed, users may happen to use the protocol with an old cached version of the contracts. The consequences of this could be various and of different severities since many contracts in the protocol extends from the Managed contract.  Additionally, theres no easy way for users to know exactly when the last sync of the cache was performed, even if tech-savvy users can retrieve that information from transaction timestamps.  Consider documenting how the syncAllContracts function will be called and when, especially when addresses change, and ensure users have access to this information. Moreover, consider saving the timestamp of the last performed cache update so that users can easily retrieve the information directly from the contract and compare it with the deploy time of a new contract whose address must be synced.  Update: Fixed in commit 824bb25f17b70cf27c76fe72265f2fdb294a121f where documentation was updated and a new event ContractSynced is called when an address changes.  [M02] _resolveContract return value can cause failure  _resolveContract function of the  unset.  The return value of _resolveContract is expected to be a contract satisfying one of many interfaces so that other functions can call its methods. But, when the returned value is the zero-address, these attempts to call its methods will fail because the zero-address does not have a fallback function.  Following the fail early and loudly principle, consider including specific and informative error-handling structures to avoid unexpected failures.  Update: Acknowledged but not fixed. The Graph did not include that check because it is a frequently used function, with low probability to be zero and they were concerned about the gas cost of doing that check.  Low Severity  [L01] Duplicated getters  The Managed contract has been refactored to add getter functions that retrieve the addresses of the five contracts through the call to the _resolveContract internal function.  Contracts are set in the _syncContract function to the addressCache mapping that uses the keccak256 representation of the contract names as key values.  At the same time, the addressCache mapping is defined as public, and it exposes an automatically generated getter function that can be used to retrieve the same addresses by the direct use of the keccak256 name representation.  To be more gas efficient, consider either defining the addressCache mapping as private or removing the explicit getters to avoid duplicate getter functions.  Update: Fixed in commit 01dea49469c3c7bee0c1989ff80baa267c14fb0f where the addressCache mapping is defined to be private.  Notes & Additional Information  [N01] Event lacks detail  The SetController event of the Managed contract is emitted whenever the controller is set by _setController function and has the new controller as its only parameter.  It may benefit off-chain services to receive both the old value and the new value of this updated variable.  Consider including both the old and new values of the controller as parameters to the SetController event.  Update: Acknowledged. In the words of The Graph team:  The reason for not adding the old value is to maintain consistency and avoid changing the signature that is currently being used by third party services and the network subgraph.  [N02] Lack of indexed parameters in events  None of the parameters in the events defined in the Managed contract are indexed. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  Update: Akcnowledged. In the words of The Graph team:  The ParameterUpdated events are not currently carrying values, just a variable name that then a subgraph can read from the contract. For that reason we dont see a huge gain to change the interface at this moment.  [N03] Inconsistent style  The onlyController modifier of the Managed contract deviates from the style of the other modifiers of this contract in that it does not wrap an internal function call.  Considering how much value a consistent coding style adds to the projects readability, we recommend enforcing a standard coding style.  Consider refactoring the onlyController modifier to wrap internal function calls to have style consistent with the other modifiers of this contract.  Update: Fixed in commit b1d4fa52b47964c16942845b5d82b5d5eae37237.  [N04] Missing functionality  The syncAllContracts function is externally callable, and it updates five featured contracts in just one single execution.  To be more gas efficient, if just one or a few of the five contracts change, consider implementing a function to sync just one contract at a time.  Update: Acknowledged. In the words of The Graph team:  We preferred to avoid adding extra bytecode to all the contracts that will inherit Managed, and just use the syncAllContracts(). Even if could take more gas it will seldomly be used.  [N05] Unnecessary import  In the Managed.sol file, consider removing the import statement for IManaged.sol, as it is never used in the Managed contract.  Update: Fixed in commit 11826bc0a608aa294b7c25dbea7fa2442a56db4b.  Conclusions  2 Medium and other lower severity issues were reported with recommended changes to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#none.", "labels": ["OpenZeppelin"]}, {"title": "[M01] Old contract versions can be mistakenly used", "body": "[M01] Old contract versions can be mistakenly used", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[m01]-old-contract-versions-can-be-mistakenly-used", "labels": ["OpenZeppelin"]}, {"title": "The syncAllContracts function is in charge of updating the cached addresses with new values whenever needed. However, if this function is not called as soon as a new contract is deployed, users may happen to use the protocol with an old cached version of the contracts. The consequences of this could be various and of different severities since many contracts in the protocol extends from the Managed contract.", "body": "The syncAllContracts function is in charge of updating the cached addresses with new values whenever needed. However, if this function is not called as soon as a new contract is deployed, users may happen to use the protocol with an old cached version of the contracts. The consequences of this could be various and of different severities since many contracts in the protocol extends from the Managed contract.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-syncallcontracts-function-is-in-charge-of-updating-the-cached-addresses-with-new-values-whenever-needed.-however,-if-this-function-is-not-called-as-soon-as-a-new-contract-is-deployed,-users-may-happen-to-use-the-protocol-with-an-old-cached-version-of-the-contracts.-the-consequences-of-this-could-be-various-and-of-different-severities-since-many-contracts-in-the-protocol-extends-from-the-managed-contract.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, there\u2019s no easy way for users to know exactly when the last sync of the cache was performed, even if tech-savvy users can retrieve that information from transaction timestamps.", "body": "Additionally, there\u2019s no easy way for users to know exactly when the last sync of the cache was performed, even if tech-savvy users can retrieve that information from transaction timestamps.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#additionally,-there\u2019s-no-easy-way-for-users-to-know-exactly-when-the-last-sync-of-the-cache-was-performed,-even-if-tech-savvy-users-can-retrieve-that-information-from-transaction-timestamps.", "labels": ["OpenZeppelin"]}, {"title": "Consider documenting how the syncAllContracts function will be called and when, especially when addresses change, and ensure users have access to this information. Moreover, consider saving the timestamp of the last performed cache update so that users can easily retrieve the information directly from the contract and compare it with the deploy time of a new contract whose address must be synced.", "body": "Consider documenting how the syncAllContracts function will be called and when, especially when addresses change, and ensure users have access to this information. Moreover, consider saving the timestamp of the last performed cache update so that users can easily retrieve the information directly from the contract and compare it with the deploy time of a new contract whose address must be synced.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#consider-documenting-how-the-syncallcontracts-function-will-be-called-and-when,-especially-when-addresses-change,-and-ensure-users-have-access-to-this-information.-moreover,-consider-saving-the-timestamp-of-the-last-performed-cache-update-so-that-users-can-easily-retrieve-the-information-directly-from-the-contract-and-compare-it-with-the-deploy-time-of-a-new-contract-whose-address-must-be-synced.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 824bb25f17b70cf27c76fe72265f2fdb294a121f where documentation was updated and a new event ContractSynced is called when an address changes.", "body": "Update: Fixed in commit 824bb25f17b70cf27c76fe72265f2fdb294a121f where documentation was updated and a new event ContractSynced is called when an address changes.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-fixed-in-commit-824bb25f17b70cf27c76fe72265f2fdb294a121f-where-documentation-was-updated-and-a-new-event-contractsynced-is-called-when-an-address-changes.", "labels": ["OpenZeppelin"]}, {"title": "[M02] _resolveContract return value can cause failure", "body": "[M02] _resolveContract return value can cause failure", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[m02]-_resolvecontract-return-value-can-cause-failure", "labels": ["OpenZeppelin"]}, {"title": "_resolveContract function of the", "body": "_resolveContract function of the", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#_resolvecontract-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "unset.", "body": "unset.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#unset.", "labels": ["OpenZeppelin"]}, {"title": "The return value of _resolveContract is expected to be a contract satisfying one of many interfaces so that other functions can call its methods. But, when the returned value is the zero-address, these attempts to call its methods will fail because the zero-address does not have a fallback function.", "body": "The return value of _resolveContract is expected to be a contract satisfying one of many interfaces so that other functions can call its methods. But, when the returned value is the zero-address, these attempts to call its methods will fail because the zero-address does not have a fallback function.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-return-value-of-_resolvecontract-is-expected-to-be-a-contract-satisfying-one-of-many-interfaces-so-that-other-functions-can-call-its-methods.-but,-when-the-returned-value-is-the-zero-address,-these-attempts-to-call-its-methods-will-fail-because-the-zero-address-does-not-have-a-fallback-function.", "labels": ["OpenZeppelin"]}, {"title": "Following the \u201cfail early and loudly\u201d principle, consider including specific and informative error-handling structures to avoid unexpected failures.", "body": "Following the \u201cfail early and loudly\u201d principle, consider including specific and informative error-handling structures to avoid unexpected failures.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#following-the-\u201cfail-early-and-loudly\u201d-principle,-consider-including-specific-and-informative-error-handling-structures-to-avoid-unexpected-failures.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged but not fixed. The Graph did not include that check because it is a \u201cfrequently used function, with low probability to be zero\u201d and they were \u201cconcerned about the gas cost of doing that check\u201d.", "body": "Update: Acknowledged but not fixed. The Graph did not include that check because it is a \u201cfrequently used function, with low probability to be zero\u201d and they were \u201cconcerned about the gas cost of doing that check\u201d.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-acknowledged-but-not-fixed.-the-graph-did-not-include-that-check-because-it-is-a-\u201cfrequently-used-function,-with-low-probability-to-be-zero\u201d-and-they-were-\u201cconcerned-about-the-gas-cost-of-doing-that-check\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[L01] Duplicated getters", "body": "[L01] Duplicated getters", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[l01]-duplicated-getters", "labels": ["OpenZeppelin"]}, {"title": "The Managed contract has been refactored to add getter functions that retrieve the addresses of the five contracts through the call to the _resolveContract internal function.", "body": "The Managed contract has been refactored to add getter functions that retrieve the addresses of the five contracts through the call to the _resolveContract internal function.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-managed-contract-has-been-refactored-to-add-getter-functions-that-retrieve-the-addresses-of-the-five-contracts-through-the-call-to-the-_resolvecontract-internal-function.", "labels": ["OpenZeppelin"]}, {"title": "Contracts are set in the _syncContract function to the addressCache mapping that uses the keccak256 representation of the contract names as key values.", "body": "Contracts are set in the _syncContract function to the addressCache mapping that uses the keccak256 representation of the contract names as key values.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#contracts-are-set-in-the-_synccontract-function-to-the-addresscache-mapping-that-uses-the-keccak256-representation-of-the-contract-names-as-key-values.", "labels": ["OpenZeppelin"]}, {"title": "At the same time, the addressCache mapping is defined as public, and it exposes an automatically generated getter function that can be used to retrieve the same addresses by the direct use of the keccak256 name representation.", "body": "At the same time, the addressCache mapping is defined as public, and it exposes an automatically generated getter function that can be used to retrieve the same addresses by the direct use of the keccak256 name representation.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#at-the-same-time,-the-addresscache-mapping-is-defined-as-public,-and-it-exposes-an-automatically-generated-getter-function-that-can-be-used-to-retrieve-the-same-addresses-by-the-direct-use-of-the-keccak256-name-representation.", "labels": ["OpenZeppelin"]}, {"title": "To be more gas efficient, consider either defining the addressCache mapping as private or removing the explicit getters to avoid duplicate getter functions.", "body": "To be more gas efficient, consider either defining the addressCache mapping as private or removing the explicit getters to avoid duplicate getter functions.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#to-be-more-gas-efficient,-consider-either-defining-the-addresscache-mapping-as-private-or-removing-the-explicit-getters-to-avoid-duplicate-getter-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 01dea49469c3c7bee0c1989ff80baa267c14fb0f where the addressCache mapping is defined to be private.", "body": "Update: Fixed in commit 01dea49469c3c7bee0c1989ff80baa267c14fb0f where the addressCache mapping is defined to be private.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-fixed-in-commit-01dea49469c3c7bee0c1989ff80baa267c14fb0f-where-the-addresscache-mapping-is-defined-to-be-private.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Event lacks detail", "body": "[N01] Event lacks detail", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[n01]-event-lacks-detail", "labels": ["OpenZeppelin"]}, {"title": "The SetController event of the Managed contract is emitted whenever the controller is set by _setController function and has the new controller as its only parameter.", "body": "The SetController event of the Managed contract is emitted whenever the controller is set by _setController function and has the new controller as its only parameter.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-setcontroller-event-of-the-managed-contract-is-emitted-whenever-the-controller-is-set-by-_setcontroller-function-and-has-the-new-controller-as-its-only-parameter.", "labels": ["OpenZeppelin"]}, {"title": "It may benefit off-chain services to receive both the old value and the new value of this updated variable.", "body": "It may benefit off-chain services to receive both the old value and the new value of this updated variable.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#it-may-benefit-off-chain-services-to-receive-both-the-old-value-and-the-new-value-of-this-updated-variable.", "labels": ["OpenZeppelin"]}, {"title": "Consider including both the old and new values of the controller as parameters to the SetController event.", "body": "Consider including both the old and new values of the controller as parameters to the SetController event.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#consider-including-both-the-old-and-new-values-of-the-controller-as-parameters-to-the-setcontroller-event.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. In the words of The Graph team:", "body": "We preferred to avoid adding extra bytecode to all the contracts that will inherit Managed, and just use the syncAllContracts(). Even if could take more gas it will seldomly be used.  [N05] Unnecessary import  In the Managed.sol file, consider removing the import statement for IManaged.sol, as it is never used in the Managed contract.  Update: Fixed in commit 11826bc0a608aa294b7c25dbea7fa2442a56db4b.  Conclusions  2 Medium and other lower severity issues were reported with recommended changes to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-acknowledged.-in-the-words-of-the-graph-team:", "labels": ["OpenZeppelin"]}, {"title": "The reason for not adding the old value is to maintain consistency and avoid changing the signature that is currently being used by third party services and the network subgraph.", "body": "The reason for not adding the old value is to maintain consistency and avoid changing the signature that is currently being used by third party services and the network subgraph.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-reason-for-not-adding-the-old-value-is-to-maintain-consistency-and-avoid-changing-the-signature-that-is-currently-being-used-by-third-party-services-and-the-network-subgraph.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Lack of indexed parameters in events", "body": "[N02] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[n02]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "None of the parameters in the events defined in the Managed contract are indexed. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "None of the parameters in the events defined in the Managed contract are indexed. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#none-of-the-parameters-in-the-events-defined-in-the-managed-contract-are-indexed.-consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Akcnowledged. In the words of The Graph team:", "body": "Update: Akcnowledged. In the words of The Graph team:", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-akcnowledged.-in-the-words-of-the-graph-team:", "labels": ["OpenZeppelin"]}, {"title": "The ParameterUpdated events are not currently carrying values, just a variable name that then a subgraph can read from the contract. For that reason we don\u2019t see a huge gain to change the interface at this moment.", "body": "The ParameterUpdated events are not currently carrying values, just a variable name that then a subgraph can read from the contract. For that reason we don\u2019t see a huge gain to change the interface at this moment.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-parameterupdated-events-are-not-currently-carrying-values,-just-a-variable-name-that-then-a-subgraph-can-read-from-the-contract.-for-that-reason-we-don\u2019t-see-a-huge-gain-to-change-the-interface-at-this-moment.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Inconsistent style", "body": "[N03] Inconsistent style", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[n03]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "The onlyController modifier of the Managed contract deviates from the style of the other modifiers of this contract in that it does not wrap an internal function call.", "body": "The onlyController modifier of the Managed contract deviates from the style of the other modifiers of this contract in that it does not wrap an internal function call.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-onlycontroller-modifier-of-the-managed-contract-deviates-from-the-style-of-the-other-modifiers-of-this-contract-in-that-it-does-not-wrap-an-internal-function-call.", "labels": ["OpenZeppelin"]}, {"title": "Considering how much value a consistent coding style adds to the project\u2019s readability, we recommend enforcing a standard coding style.", "body": "Considering how much value a consistent coding style adds to the project\u2019s readability, we recommend enforcing a standard coding style.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#considering-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-we-recommend-enforcing-a-standard-coding-style.", "labels": ["OpenZeppelin"]}, {"title": "Consider refactoring the onlyController modifier to wrap internal function calls to have style consistent with the other modifiers of this contract.", "body": "Consider refactoring the onlyController modifier to wrap internal function calls to have style consistent with the other modifiers of this contract.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#consider-refactoring-the-onlycontroller-modifier-to-wrap-internal-function-calls-to-have-style-consistent-with-the-other-modifiers-of-this-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit b1d4fa52b47964c16942845b5d82b5d5eae37237.", "body": "Update: Fixed in commit b1d4fa52b47964c16942845b5d82b5d5eae37237.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-fixed-in-commit-b1d4fa52b47964c16942845b5d82b5d5eae37237.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Missing functionality", "body": "[N04] Missing functionality", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[n04]-missing-functionality", "labels": ["OpenZeppelin"]}, {"title": "The syncAllContracts function is externally callable, and it updates five featured contracts in just one single execution.", "body": "The syncAllContracts function is externally callable, and it updates five featured contracts in just one single execution.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#the-syncallcontracts-function-is-externally-callable,-and-it-updates-five-featured-contracts-in-just-one-single-execution.", "labels": ["OpenZeppelin"]}, {"title": "To be more gas efficient, if just one or a few of the five contracts change, consider implementing a function to sync just one contract at a time.", "body": "To be more gas efficient, if just one or a few of the five contracts change, consider implementing a function to sync just one contract at a time.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#to-be-more-gas-efficient,-if-just-one-or-a-few-of-the-five-contracts-change,-consider-implementing-a-function-to-sync-just-one-contract-at-a-time.", "labels": ["OpenZeppelin"]}, {"title": "We preferred to avoid adding extra bytecode to all the contracts that will inherit Managed, and just use the syncAllContracts(). Even if could take more gas it will seldomly be used.", "body": "We preferred to avoid adding extra bytecode to all the contracts that will inherit Managed, and just use the syncAllContracts(). Even if could take more gas it will seldomly be used.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#we-preferred-to-avoid-adding-extra-bytecode-to-all-the-contracts-that-will-inherit-managed,-and-just-use-the-syncallcontracts().-even-if-could-take-more-gas-it-will-seldomly-be-used.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessary import", "body": "[N05] Unnecessary import", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#[n05]-unnecessary-import", "labels": ["OpenZeppelin"]}, {"title": "In the Managed.sol file, consider removing the import statement for IManaged.sol, as it is never used in the Managed contract.", "body": "In the Managed.sol file, consider removing the import statement for IManaged.sol, as it is never used in the Managed contract.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#in-the-managed.sol-file,-consider-removing-the-import-statement-for-imanaged.sol,-as-it-is-never-used-in-the-managed-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 11826bc0a608aa294b7c25dbea7fa2442a56db4b.", "body": "Update: Fixed in commit 11826bc0a608aa294b7c25dbea7fa2442a56db4b.", "html_url": "https://blog.openzeppelin.com/thegraph-addresses-cache-audit#update:-fixed-in-commit-11826bc0a608aa294b7c25dbea7fa2442a56db4b.", "labels": ["OpenZeppelin"]}, {"title": "None.", "body": "Medium Severity  [M01] Lack of event emission after sensitive action  The _initialize function of the Governed contract does not emit the NewOwnership event after setting the value of the governor to be the _initGovernor.  Consider emitting events after sensitive changes occur to facilitate tracking and notify off-chain clients following the contracts activity.  Update: Fixed in PR462 at commit 1714b78d1243a824f36106539b34f8a79ebf14f3.  [M02] Proposals update can assume prior states  The updateProposal function of the GraphGovernance contract is designed to update either the votes or the resolution of a proposal.  The function is not checking whether the new parameters for the proposal, passed as input values, are different from those stored in the proposals mapping, or even if they have been used previously.  Specifically, the _votes parameter can be reused multiple times. Even if _votes is an IPFS hash of a collection of signatures for each vote for the _proposalId, this doesnt amount to a replay vulnerability. However, the fact that the updateProposal function call is revisiting prior data may lead to confusion.  Even worse, a proposals resolution can be changed from Accepted to Rejected and vice versa as many times as this function is called.  Whether this is a design choice or an unexpected outcome, consider either properly documenting this design choice or avoiding having a non-permanent or repetitive resolution on a specific proposal.  Moreover, consider adding some checks to verify that the values passed as input parameters are different from the stored or previously referenced data.  Update: Fixed in PR463 at commit 8a4fb6e5aeaf777879258ef0b4bdacde23ae30d7 where documentation describing the consequences of this design choice were added.  Low Severity  [L01] Lack of input validation  The initialize function of the GraphGovernance contract is not validating the input parameter passed in.  Consider adding proper checks to determine if the zero address is passed as an input parameter to avoid mistakenly setting the governor to a null address.  Update: Fixed in PR463 at commit f01518d1b669aeed89d3ceaa112b315cbdfb8f85.  [L02] Lack of docstrings  The IGraphGovernance interface, as well as the ProposalCreated and ProposalUpdated events, are lacking documentation in the form of docstrings or comments.  In the GraphGovernance contract, there is no documentation specifying which encoding or representation the parameters taking on IPFS hash values realize.  Consider thoroughly documenting all events and files in the codebase. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Fixed in PR463 at commit e3cd5e35896b6ea6bbc794b874f98c462cf8cc21.  Notes & Additional Information  [N01] Lack of indexed parameters in events  The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are lacking indexed parameters.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  Update: Fixed in PR463 at commit d7b25e5158f31b46e16dae043e1eafc7e715b989.  [N02] Useless event parameter  The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are emitting the address of the msg.sender as the first parameter.  The functions emitting those events are only callable by the governor due to the onlyGovernor modifier. For this reason, there is no way that the msg.sender can be different at some point.  Since it can be known beforehand who the msg.sender is when emitting such events, consider removing this parameter from the event definitions and emissions.  Update: Fixed in PR363 at commit b1439ac9ca806234d3a4721d7594af8cf753c358.  Conclusions  2 Medium and other lower severity issues were found with changes recommended to improve the codebase.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#none.", "labels": ["OpenZeppelin"]}, {"title": "[M01] Lack of event emission after sensitive action", "body": "[M01] Lack of event emission after sensitive action", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[m01]-lack-of-event-emission-after-sensitive-action", "labels": ["OpenZeppelin"]}, {"title": "The _initialize function of the Governed contract does not emit the NewOwnership event after setting the value of the governor to be the _initGovernor.", "body": "The _initialize function of the Governed contract does not emit the NewOwnership event after setting the value of the governor to be the _initGovernor.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-_initialize-function-of-the-governed-contract-does-not-emit-the-newownership-event-after-setting-the-value-of-the-governor-to-be-the-_initgovernor.", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting events after sensitive changes occur to facilitate tracking and notify off-chain clients following the contracts\u2019 activity.", "body": "Consider emitting events after sensitive changes occur to facilitate tracking and notify off-chain clients following the contracts\u2019 activity.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#consider-emitting-events-after-sensitive-changes-occur-to-facilitate-tracking-and-notify-off-chain-clients-following-the-contracts\u2019-activity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR462 at commit 1714b78d1243a824f36106539b34f8a79ebf14f3.", "body": "Update: Fixed in PR462 at commit 1714b78d1243a824f36106539b34f8a79ebf14f3.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr462-at-commit-1714b78d1243a824f36106539b34f8a79ebf14f3.", "labels": ["OpenZeppelin"]}, {"title": "[M02] Proposal\u2019s update can assume prior states", "body": "[M02] Proposal\u2019s update can assume prior states", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[m02]-proposal\u2019s-update-can-assume-prior-states", "labels": ["OpenZeppelin"]}, {"title": "The updateProposal function of the GraphGovernance contract is designed to update either the votes or the resolution of a proposal.", "body": "The updateProposal function of the GraphGovernance contract is designed to update either the votes or the resolution of a proposal.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-updateproposal-function-of-the-graphgovernance-contract-is-designed-to-update-either-the-votes-or-the-resolution-of-a-proposal.", "labels": ["OpenZeppelin"]}, {"title": "The function is not checking whether the new parameters for the proposal, passed as input values, are different from those stored in the proposals mapping, or even if they have been used previously.", "body": "The function is not checking whether the new parameters for the proposal, passed as input values, are different from those stored in the proposals mapping, or even if they have been used previously.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-function-is-not-checking-whether-the-new-parameters-for-the-proposal,-passed-as-input-values,-are-different-from-those-stored-in-the-proposals-mapping,-or-even-if-they-have-been-used-previously.", "labels": ["OpenZeppelin"]}, {"title": "Specifically, the _votes parameter can be reused multiple times. Even if _votes is an IPFS hash of a collection of signatures for each vote for the _proposalId, this doesn\u2019t amount to a replay vulnerability. However, the fact that the updateProposal function call is revisiting prior data may lead to confusion.", "body": "Specifically, the _votes parameter can be reused multiple times. Even if _votes is an IPFS hash of a collection of signatures for each vote for the _proposalId, this doesn\u2019t amount to a replay vulnerability. However, the fact that the updateProposal function call is revisiting prior data may lead to confusion.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#specifically,-the-_votes-parameter-can-be-reused-multiple-times.-even-if-_votes-is-an-ipfs-hash-of-a-collection-of-signatures-for-each-vote-for-the-_proposalid,-this-doesn\u2019t-amount-to-a-replay-vulnerability.-however,-the-fact-that-the-updateproposal-function-call-is-revisiting-prior-data-may-lead-to-confusion.", "labels": ["OpenZeppelin"]}, {"title": "Even worse, a proposal\u2019s resolution can be changed from Accepted to Rejected and vice versa as many times as this function is called.", "body": "Even worse, a proposal\u2019s resolution can be changed from Accepted to Rejected and vice versa as many times as this function is called.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#even-worse,-a-proposal\u2019s-resolution-can-be-changed-from-accepted-to-rejected-and-vice-versa-as-many-times-as-this-function-is-called.", "labels": ["OpenZeppelin"]}, {"title": "Whether this is a design choice or an unexpected outcome, consider either properly documenting this design choice or avoiding having a non-permanent or repetitive resolution on a specific proposal.", "body": "Whether this is a design choice or an unexpected outcome, consider either properly documenting this design choice or avoiding having a non-permanent or repetitive resolution on a specific proposal.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#whether-this-is-a-design-choice-or-an-unexpected-outcome,-consider-either-properly-documenting-this-design-choice-or-avoiding-having-a-non-permanent-or-repetitive-resolution-on-a-specific-proposal.", "labels": ["OpenZeppelin"]}, {"title": "Moreover, consider adding some checks to verify that the values passed as input parameters are different from the stored or previously referenced data.", "body": "Moreover, consider adding some checks to verify that the values passed as input parameters are different from the stored or previously referenced data.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#moreover,-consider-adding-some-checks-to-verify-that-the-values-passed-as-input-parameters-are-different-from-the-stored-or-previously-referenced-data.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR463 at commit 8a4fb6e5aeaf777879258ef0b4bdacde23ae30d7 where documentation describing the consequences of this design choice were added.", "body": "Update: Fixed in PR463 at commit 8a4fb6e5aeaf777879258ef0b4bdacde23ae30d7 where documentation describing the consequences of this design choice were added.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr463-at-commit-8a4fb6e5aeaf777879258ef0b4bdacde23ae30d7-where-documentation-describing-the-consequences-of-this-design-choice-were-added.", "labels": ["OpenZeppelin"]}, {"title": "[L01] Lack of input validation", "body": "[L01] Lack of input validation", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[l01]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "The initialize function of the GraphGovernance contract is not validating the input parameter passed in.", "body": "The initialize function of the GraphGovernance contract is not validating the input parameter passed in.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-initialize-function-of-the-graphgovernance-contract-is-not-validating-the-input-parameter-passed-in.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding proper checks to determine if the zero address is passed as an input parameter to avoid mistakenly setting the governor to a null address.", "body": "Consider adding proper checks to determine if the zero address is passed as an input parameter to avoid mistakenly setting the governor to a null address.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#consider-adding-proper-checks-to-determine-if-the-zero-address-is-passed-as-an-input-parameter-to-avoid-mistakenly-setting-the-governor-to-a-null-address.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR463 at commit f01518d1b669aeed89d3ceaa112b315cbdfb8f85.", "body": "Update: Fixed in PR463 at commit f01518d1b669aeed89d3ceaa112b315cbdfb8f85.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr463-at-commit-f01518d1b669aeed89d3ceaa112b315cbdfb8f85.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Lack of docstrings", "body": "[L02] Lack of docstrings", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[l02]-lack-of-docstrings", "labels": ["OpenZeppelin"]}, {"title": "The IGraphGovernance interface, as well as the ProposalCreated and ProposalUpdated events, are lacking documentation in the form of docstrings or comments.", "body": "The IGraphGovernance interface, as well as the ProposalCreated and ProposalUpdated events, are lacking documentation in the form of docstrings or comments.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-igraphgovernance-interface,-as-well-as-the-proposalcreated-and-proposalupdated-events,-are-lacking-documentation-in-the-form-of-docstrings-or-comments.", "labels": ["OpenZeppelin"]}, {"title": "In the GraphGovernance contract, there is no documentation specifying which encoding or representation the parameters taking on IPFS hash values realize.", "body": "In the GraphGovernance contract, there is no documentation specifying which encoding or representation the parameters taking on IPFS hash values realize.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#in-the-graphgovernance-contract,-there-is-no-documentation-specifying-which-encoding-or-representation-the-parameters-taking-on-ipfs-hash-values-realize.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all events and files in the codebase. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all events and files in the codebase. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#consider-thoroughly-documenting-all-events-and-files-in-the-codebase.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR463 at commit e3cd5e35896b6ea6bbc794b874f98c462cf8cc21.", "body": "Update: Fixed in PR463 at commit e3cd5e35896b6ea6bbc794b874f98c462cf8cc21.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr463-at-commit-e3cd5e35896b6ea6bbc794b874f98c462cf8cc21.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Lack of indexed parameters in events", "body": "[N01] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[n01]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are lacking indexed parameters.", "body": "The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are lacking indexed parameters.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-proposalcreated-and-proposalupdated-events-of-the-graphgovernance-contract-are-lacking-indexed-parameters.", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR463 at commit d7b25e5158f31b46e16dae043e1eafc7e715b989.", "body": "Update: Fixed in PR463 at commit d7b25e5158f31b46e16dae043e1eafc7e715b989.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr463-at-commit-d7b25e5158f31b46e16dae043e1eafc7e715b989.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Useless event parameter", "body": "[N02] Useless event parameter", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#[n02]-useless-event-parameter", "labels": ["OpenZeppelin"]}, {"title": "The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are emitting the address of the msg.sender as the first parameter.", "body": "The ProposalCreated and ProposalUpdated events of the GraphGovernance contract are emitting the address of the msg.sender as the first parameter.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-proposalcreated-and-proposalupdated-events-of-the-graphgovernance-contract-are-emitting-the-address-of-the-msg.sender-as-the-first-parameter.", "labels": ["OpenZeppelin"]}, {"title": "The functions emitting those events are only callable by the governor due to the onlyGovernor modifier. For this reason, there is no way that the msg.sender can be different at some point.", "body": "The functions emitting those events are only callable by the governor due to the onlyGovernor modifier. For this reason, there is no way that the msg.sender can be different at some point.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#the-functions-emitting-those-events-are-only-callable-by-the-governor-due-to-the-onlygovernor-modifier.-for-this-reason,-there-is-no-way-that-the-msg.sender-can-be-different-at-some-point.", "labels": ["OpenZeppelin"]}, {"title": "Since it can be known beforehand who the msg.sender is when emitting such events, consider removing this parameter from the event definitions and emissions.", "body": "Since it can be known beforehand who the msg.sender is when emitting such events, consider removing this parameter from the event definitions and emissions.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#since-it-can-be-known-beforehand-who-the-msg.sender-is-when-emitting-such-events,-consider-removing-this-parameter-from-the-event-definitions-and-emissions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR363 at commit b1439ac9ca806234d3a4721d7594af8cf753c358.", "body": "Update: Fixed in PR363 at commit b1439ac9ca806234d3a4721d7594af8cf753c358.", "html_url": "https://blog.openzeppelin.com/thegraph-governance-upgrade-audit#update:-fixed-in-pr363-at-commit-b1439ac9ca806234d3a4721d7594af8cf753c358.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Not following the Checks-Effects-Interactions pattern", "body": "[N01] Not following the Checks-Effects-Interactions pattern", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n01]-not-following-the-checks-effects-interactions-pattern", "labels": ["OpenZeppelin"]}, {"title": "The Dollar contract extends the functionality of the ERC20Detailed and Permittable.", "body": "The Dollar contract extends the functionality of the ERC20Detailed and Permittable.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-dollar-contract-extends-the-functionality-of-the-erc20detailed-and-permittable.", "labels": ["OpenZeppelin"]}, {"title": "The transferFrom function check if the sender is allowed by the holder to send the tokens but this check is done after the transfer has been made.", "body": "The transferFrom function check if the sender is allowed by the holder to send the tokens but this check is done after the transfer has been made.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-transferfrom-function-check-if-the-sender-is-allowed-by-the-holder-to-send-the-tokens-but-this-check-is-done-after-the-transfer-has-been-made.", "labels": ["OpenZeppelin"]}, {"title": "Solidity recommends the usage of the Checks-Effects-Interactions Pattern to avoid potential security issues, such as reentrancy.", "body": "Solidity recommends the usage of the Checks-Effects-Interactions Pattern to avoid potential security issues, such as reentrancy.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#solidity-recommends-the-usage-of-the-checks-effects-interactions-pattern-to-avoid-potential-security-issues,-such-as-reentrancy.", "labels": ["OpenZeppelin"]}, {"title": "Although in this scenario it does not represent a possible security issue, consider always following the \u201cCheck-Effects-Interactions\u201d pattern, thus checking the parameters before modifying the contract\u2019s state.", "body": "Although in this scenario it does not represent a possible security issue, consider always following the \u201cCheck-Effects-Interactions\u201d pattern, thus checking the parameters before modifying the contract\u2019s state.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#although-in-this-scenario-it-does-not-represent-a-possible-security-issue,-consider-always-following-the-\u201ccheck-effects-interactions\u201d-pattern,-thus-checking-the-parameters-before-modifying-the-contract\u2019s-state.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The EmptySetSquad team statement for this issue:", "body": "Wont currently fix  Solidity coverage tool currently incompatible with our setup.  [M04] Orders registration can be frontrun  The governance can call the ReserveSwapper contract to register a market order for a token pair. Once the order is registered, users can start calling the swap function and exchange one token for the other.  If the governance tries to update an already existing order, an order with a limited amount of tokens, that call can be frontrun by a malicious actor, which can call the swap function for the same token pair, zeroing the order amount in the accounting balance.  If this happens, after the new governance order has been mined, any further call to the swap function can unexpectedly fail in transferring the tokens, since the actual balances of the contract are not taken into account when registering the orders amount.  Consider checking if the contract has enough balance of the respective tokens before setting any non-limited order amount.    Wont fix  generally speaking, this module is meant to be holdover until we can create a more robust DAO treasury management system as part of a larger effort. Included note in governance on how to properly account for these limitations.  [M05] Same transaction on different proposal could revert  The GovernorAlpha contract implements the functionality to propose, vote, and execute proposals, among other actions.  Each proposal can have multiple transactions to process when it is being executed. When a proposal succeeds, these transactions are queued in the Timelock contract by passing all the transactions information and the time in which the transaction will be able allowed for execution.  However, because different proposals could have one same transaction with the same parameters among many different transactions, if two proposals are queued under the same block, then the first time in which the transaction could be executed will be the same, meaning that the hash used to identify that transaction will be taken. Therefore, during the queue process of the second proposal, the requirement that checks if it was already queued will revert.  Consider adding a proposal nonce as part of the hashed data to identify identical transactions as different ones on different proposals.    Wont fix  safe to assume two proposals will never need to be committed in the same block, and we dont want to modify widely-used forked code unnecessarily.  [M06] Underlying tokens could get stuck  The Incentivizer contract allows users to receive reward tokens when staking underlying assets into the contract.  However, because the contract requests underlying assets to be transferred into the contract in order to proceed, and due to human nature, users may transfer directly those underlying tokens with a simple ERC20 transfer transaction instead of calling the stake function.  Although the contract has a function that can be used to move any token into the reserve, the rescue function, this function works with any token except the underlying asset. Therefore, any underlying asset sent through a regular transfer transaction will get stuck in the contract without any possibility of taking it back.  Because underlying assets may be sent directly into the contract on a daily basis , consider implementing the possibility to withdraw those stuck assets from the contract.  Update: Fixed on pull request 14.  [M07] Deprecated TokenVesting draft contract is used  The Vester contract is using the TokenVesting contract provided in a previous deprecated draft version provided by OpenZeppelin.  Using deprecated contracts which are in draft status and not properly audited can be dangerous and increase the attack surface.  Consider properly documenting this and correctly inform users of its use.  Update: Acknowledged.  [M08] Unnecessary ABIEncoderV2  The ProxyRoot and Registry contracts are using the experimental ABIEncoderV2 pragma directive but there is no explicit use of it in the contract.  Furthermore, the usage of the experimental ABIEncoderV2 is discouraged in older Solidity versions since there have been important fixes for this encoder since then. The risk can be mitigated by being extra thorough on the testing process of the project at all levels. However, even with great tests there is always a chance to miss important issues that will affect the project.  Consider removing the directive from the contract files, and consider also more conservative options, or upgrading the Solidity version used to a newer version where the ABIEncoderV2 is stable, or rewriting the project to use the current stable encoder.  Update: Fixed on pull request 13. The ProxyRoot contract has been removed along with the usage of the ABIEncoderV2 pragma in the Registry contract.  [M09] Untested custom SafeMath library in use  Several contracts implement arithmetical operation functions based on OpenZeppelins SafeMath library, customized to support safe mathematical operations for uint256, such as the GovernorAlpha contract, uint96, such as the Stake contract. Yet, none of the functions are tested, which may hinder users and developers trust in this custom library. Moreover, any change in the library is not going to be detected by the current test suite, rendering all business logic depending on it vulnerable to potential security issues introduced by these future modifications.  Consider including thorough and extensive unit tests for those functions.    Wont fix  widely-used forked code already tested externally.  [M10] Updating storage variables could soft-brick the protocol  setRegistry function which is used to update the address of the  ReserveAccessors contract contract or the  StabilizerAccessors contract.  In Line 78 of the same function, the require statements force either:  To have not set the registry address yet.  That the new Registry which is going to be set, has the same timelock address of the old Registry contract.  The Registry contract is owned by the Timelock contract, that executes transaction to set addresses on the Registry contract on behalf of the governance.  All the setter functions from the Registry contract are lacking from input validation, so it is possible, by mistakenly executing a bad proposal, to set the Timelock contracts address in the Registry contract to an erroneous address (either an EOA or another contract).  If this happens, the setRegistry function of the Implementation contract will revert at any call trying to update the Registry contracts address, freezing entirely the functionality.  Consider validating that the timelock address is a valid contract address whenever it is set in the Registry contract. This can be done using the OpenZeppelin Address.isContract function or eventually, consider also implementing the EIP1820 for this use case.  Update: Fixed on pull request 12.  [M11] Possible compromised storage due to hierarchy composition  The design chosen for the upgradeability of certain contracts, such as the Reserve and the Stabilizer contracts, consists of composing those contracts by means of smaller ones and use an upgradeable proxy pattern with the resulting contract.  For this reason, the storage variables of both modules are stored respectively in the ReserveState and the StabilizerState contracts.  The intention is to have a unique contract for all the state variables of each module and have less overhead when upgrading through proxy patterns. This can be a good design decision whenever the composition of the contracts is strictly followed in order.  However, there are several cases where some contracts extend and import the same contracts multiple times and in different orders. Some examples are:  The StabilizerImpl contract extends the Implementation contract, however it is already been inherited by the StabilizerAdmin contract through the StabilizerComptroller contract.  The StabilizerState.sol file has duplicated imports. Moreover the Implementation contract already imports the IImplementation interface.  The ReserveImpl contract imports are already imported in ReserveIssuer and ReserveSwapper contracts. Moreover, the Implementation import is not used.  All imports of the ReserveSwapper, except for the ReserveComptroller import, are already imported in the ReserveComptroller.  The Dollar contract imports the ERC20Detailed contract but this is already imported by the Permittable contract.  Changing the order of the composition can result in different contracts layouts if imports are mixed in different orders. However this is unlikely to happens since the storage is centralized in one unique contract.  Consider reviewing all orders imports and duplications to ensure a clear composition order and reduce the possibility of compromising storage when upgrading the Reserve or the Stabilizer implementations.  Update: Fixed on pull request 11.  [M12] Wrong arithmetic operation when normalizing prices  The Oracle contract implements the logic to retrieve the updated price of a listed asset.  When a price is updated, the _normalize function is called to adjust the difference between the decimals of the pair of assets involved. The value of 6 for USDC  is compared against the one for the queried token and the price value is multiplied by the difference between each other.  However, when the other token has less than 6 decimals, the price is also multiplied by the difference of decimals instead of dividing by it.  Although currently the other token used will be ESD with 18 decimals, which means that it will not encounter this issue, consider dividing instead of multiplying the difference of decimals when the token has less than 6 decimals.  Update: Fixed on pull request 10.  Low severity  [L01] Lack of guardian-role transfer  The guardian address from the GovernorAlpha contract has a special role inside the system, which is allowed to either cancel a proposal or proceed with the admin-change process, among others.  However, if the address associated with the guardian gets compromised, there is no way to transfer those special roles to another address.  Consider creating a function to transfer the guardian role to another address or consider documenting this limitation.    Wont fix  dont want to modify widely-used forked code unnecessarily.  [L02] ESD price defaults to one  In the StabilizerComptroller contract, whenever the oracle becomes unhealthy, the protocol sets immediately the ema to 1.  Whether this choice is intended to protect or stabilize the price of the ESD to a fixed price, it is not clear and straightforward why that would be the best mitigation to an unhealthy oracle.  Consider properly justifying this choice or the assumptions that are taken in place whenever the oracle becomes unhealthy.    Expected behavior since a stablecoins neutral price is $1.00.  [L03] ERC20 compliant assets may not be used  In the Oracle contract, the _normalize function is used to normalize the difference in decimals between USDC and a certain token. Although it is meant to be used against ESD, the Oracle contract generality allows other assets to be queried there.  Nevertheless, because the ERC20 decimals getter is optional, using any asset without the getter in the protocol will fail at retrieving the number of decimals used for their internal accounting, and with it the transaction will revert.  Consider implementing the functionality to allow the usage of ERC20 compliant assets that do not have a decimals getter or taking this into account when whitelisting assets.    Updated docs with a guide on acceptable ERC20 properties for governance.  [L04] Implementation functions sparsed into different contracts  The Implementation contract declares and implements the logic to get the respective logics implementation and the admins address.  However, there are some function declarations that lack its definition, such as setting the registrys address or the owner of the contract.  These two functions are declared in the StabilizerState and in the ReserveState contracts, and both have the same functionality.  Whether this is meant to be consistent to keep all state variables in the respective contracts or not, having the implementation of a function in different contracts without a proper reason produces a more complex code and lower its readability.  To improve the codes readability and factorization, consider defining both functions in the Implementation contract.  Update: Fixed in pull request 20. The IImplementation interface has been removed, while the Implementation contract has been refactored to host definition and implementation of the getters and setters of the owner, registry and notEntered parameters. The Implementation contract does that by an unstructured pattern of choosing specific slots to store and set the variables. Since the ReserveAdmin and the StabilizerAdmin contracts are already extending from the Implementation, the StabilizerAccessors and ReserveAccessors contracts (that extends from those) have been refactored too.  [L05] Hardcoded parameters in Governance  GovernorAlpha contract, the  quorumVotes,  proposalThreshold,  proposalMaxOperations,  votingDelay, and  votingPeriod functions are returning hardcoded values for the corresponding parameters.  Having hardcoded parameters forces developers to deploy a new contract if one of those parameters needs to be changed.  An example would be the votingPeriod, initially set to 17280 blocks (3 days, assuming 15 seconds for each block). The assumption will be false whenever the community integrates EIPs that can change seconds per block directly.  For this reason, consider adding proper setter functions to those parameters. These functions could be called by the guardian of the GovernorAlpha contract or by the Timelock contract through a proposal.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-acknowledged.-the-emptysetsquad-team-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "Won\u2019t fix \u2013 preserve for code clarity.", "body": "Won\u2019t fix \u2013 preserve for code clarity.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#won\u2019t-fix-\u2013-preserve-for-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Gas optimization", "body": "[N02] Gas optimization", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n02]-gas-optimization", "labels": ["OpenZeppelin"]}, {"title": "There are some examples in the code base where gas consumption can be optimized by returning or failing earlier.", "body": "There are some examples in the code base where gas consumption can be optimized by returning or failing earlier.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#there-are-some-examples-in-the-code-base-where-gas-consumption-can-be-optimized-by-returning-or-failing-earlier.", "labels": ["OpenZeppelin"]}, {"title": "The requirement performed on Line 287 of ReserveComptroller.sol can be done after line 281 using the newBorrowed variable.", "body": "The requirement performed on Line 287 of ReserveComptroller.sol can be done after line 281 using the newBorrowed variable.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-requirement-performed-on-line-287-of-reservecomptroller.sol-can-be-done-after-line-281-using-the-newborrowed-variable.", "labels": ["OpenZeppelin"]}, {"title": "The order of lines 94-95 of StabilizerToken.sol can be inverted to fail earlier.", "body": "The order of lines 94-95 of StabilizerToken.sol can be inverted to fail earlier.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-order-of-lines-94-95-of-stabilizertoken.sol-can-be-inverted-to-fail-earlier.", "labels": ["OpenZeppelin"]}, {"title": "Consider reviewing the code base for occurrences like these and refactor the code to be more gas efficient.", "body": "Consider reviewing the code base for occurrences like these and refactor the code to be more gas efficient.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#consider-reviewing-the-code-base-for-occurrences-like-these-and-refactor-the-code-to-be-more-gas-efficient.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed on pull request 7. Only the operation order in the StabilizerToken contract was changed.", "body": "Update: Partially fixed on pull request 7. Only the operation order in the StabilizerToken contract was changed.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-partially-fixed-on-pull-request-7.-only-the-operation-order-in-the-stabilizertoken-contract-was-changed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Modifier could replace repeated requirements", "body": "[N03] Modifier could replace repeated requirements", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n03]-modifier-could-replace-repeated-requirements", "labels": ["OpenZeppelin"]}, {"title": "GovernorAlpha contract there are certain functions that can only be called by the", "body": "GovernorAlpha contract there are certain functions that can only be called by the", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#governoralpha-contract-there-are-certain-functions-that-can-only-be-called-by-the", "labels": ["OpenZeppelin"]}, {"title": "guardian address. These are to", "body": "guardian address. These are to", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#guardian-address.-these-are-to", "labels": ["OpenZeppelin"]}, {"title": "cancel a proposal,", "body": "cancel a proposal,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#cancel-a-proposal,", "labels": ["OpenZeppelin"]}, {"title": "accept an admin,", "body": "accept an admin,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#accept-an-admin,", "labels": ["OpenZeppelin"]}, {"title": "abdicate the guardian role,", "body": "abdicate the guardian role,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#abdicate-the-guardian-role,", "labels": ["OpenZeppelin"]}, {"title": "set the pending admin, and", "body": "set the pending admin, and", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#set-the-pending-admin,-and", "labels": ["OpenZeppelin"]}, {"title": "execute the pending admin process.", "body": "execute the pending admin process.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#execute-the-pending-admin-process.", "labels": ["OpenZeppelin"]}, {"title": "On all of these functions, the requirement is copied instead of using a modifier that restricts the call of the functions to only the guardian. This not only cost more at the time of the deployment but also renders the readability of the code.", "body": "On all of these functions, the requirement is copied instead of using a modifier that restricts the call of the functions to only the guardian. This not only cost more at the time of the deployment but also renders the readability of the code.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#on-all-of-these-functions,-the-requirement-is-copied-instead-of-using-a-modifier-that-restricts-the-call-of-the-functions-to-only-the-guardian.-this-not-only-cost-more-at-the-time-of-the-deployment-but-also-renders-the-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Consider replacing all the guardian only-access requirements to a modifier that accomplishes the same functionality.", "body": "Consider replacing all the guardian only-access requirements to a modifier that accomplishes the same functionality.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#consider-replacing-all-the-guardian-only-access-requirements-to-a-modifier-that-accomplishes-the-same-functionality.", "labels": ["OpenZeppelin"]}, {"title": "Won\u2019t fix \u2013 don\u2019t want to modify widely-used forked code unnecessarily.", "body": "[L06] High value ERC20 operations may revert  The ESDS token is the token used to vote proposals in the governance and it stores its total supply under an uint256 variable. However, the accounts balances are stored in uint96 variables.  Furthermore, the Vester contract is in charge of gradually distributing ERC20 tokens, such as the ESDS token, during the lifespan of the contract. Although the contract has been implemented using uint256 variables, the same outcome as mentioned would happen when balances come close to the maximum number of an uint96.  If external projects adopt the protocol, the expected behavior of a complaint ERC20 may result in unexpected transaction reverts.  Consider either using uint256 variables for the balances or documenting the reason to use uint96 variables.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L07] Implicit casting  The lack of explicit casting between different variable types, hinders codes readability, making it more error-prone and hard to maintain.  301,  303, and  310 implicit castings from  108 and  126 implicit castings of  179 of the same contract, the returned value should be a  Consider explicitly casting all integer values to their expected type when sending them as parameters of functions and events. It is advisable to review the entire codebase and apply this recommendation to all segments of code where the issue is found.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L08] Lack of event emission after sensitive actions  The __acceptAdmin and the __abdicate functions of the GovernorAlpha contract do not emit relevant events after executing their sensitive actions.  Consider emitting events after sensitive changes take place, to facilitate tracking and notify off-chain clients following the contracts activity.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L09] Lack of input validation  There are several places in the code base where input parameters are passed in function calls without any kind of validation of their values. Examples are:  The amount variable of the stake and withdraw functions from the Incentivizer contract is not validated to be non zero.  The propose function from the GovernorAlpha contract is not checking whether the description is empty or not.  The approve function from the Stake contract is not validating the spender input parameter.  Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions or useless use of gas.  Consider adding proper checks on the values passed in function calls.  Update: Partially fixed on pull request 9. The GovernorAlpha and Stake contracts have not been changed. The EmptySetSquad team statement for this issue:  Leaves GovernorAlpha and Stake as-is to not modify forked code unnecessarily.  [L10] Missing tests  No tests were found for the governance system implemented in the contracts. This is considered a major shortcoming in the project, as there is no way to determine if the current implementation matches the systems expected behavior.  Consider adding tests for diverse cases and edge scenarios.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix  widely-used forked code already tested externally.  [L11] View function creates a pointer to storage  The GovernorAlpha contract implements the functionality to propose, vote, and execute proposals.  To know what a proposal will execute, an user can call the getActions function which will retrieve all the information of the transactions.  Although this function is public view and it is not meant to change the data in storage, the pointer created points to storage instead of memory.  Whether this is a design choise or not, consider changing it to memory to reduce the attack surface in the contract.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L12] Order of arithmetic operations reduces the outcomes precision  In the Oracle contract the price update is done by first dividing the difference between the current accumulated price and the stored one by the elapsed time, and then dividing again by 2**112, using the ratio method from the Decimal library, to get the output in price units.  However, the precision of the outcome could be increased by altering the order of the operations by multiplying the time elapsed and the 2**112 factor to then take the ratio of it, which internally multiplies first the numerator with the BASE constant.  Consider changing the order of the arithmetic operations to improve the outcomes precision.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix  effect on oracle is negligible, so wed prefer to leave as is to increase readability by separating the numeric computation from the base conversion.  [L13] Centralized registry is not adopted in the whole code base  Having the Registry contract allows the protocol to have a unique source of information of the key components of the system.  Coupled together with the fact that the Registry contract is triggered by the governance, this should ensure a robust system to have system contracts depending on a registry where addresses can be updated anytime through a proposal.  However, not all contracts are using the Registry contract and its specific state variables. Some examples are:  The stake and timelock variables from the GovernorAlpha contract.  The reserve variable from the Incentivizer contract.  Consider using the Registry contract in all the contracts that need to read system contract addresses to improve consistency and to have a homogeneous functionality in the system.  Update: Partially fixed on pull request 8. The GovernorAlpha contract does not inherit the functionalities of a centralized registry from the RegistryAccessor contract.  [L14] Re-implementing ECDSA signature recovery  The castVoteBySig function from the GovernorAlpha contract includes an implementation of the ECDSA signature recovery function. This function is already part of the OpenZeppelin contracts, which has been audited and is constantly reviewed by the community.  Consider importing and using the recover function from OpenZeppelins ECDSA library not only to benefit from bug fixes to be applied in future releases, but also to reduce the codes attack surface.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L15] New Oracle instance has to be deployed after a new StabilizerImpl deployment  The Oracle contract has the functionality to adapt and retrieve the prices for the ESD token. It is owned by the StabilizerComptroller contract.  setup function which would  set as one the conversion between ESD and USDC but also it will call the  setup function from the  stored in the variables.  However, in case a new StabilizerComptroller is deployed, the setup of it will not be able to succeed by using the same Oracle contract, because a requirement that checks if the pair has been already setup for ESD will revert, preventing to set as one the moving average for that token.  Consider either allowing to set the initial value of the moving average in the StabilizerComptroller when deploying a new version of it without deploying a new Oracle contract, or documenting the reason to setup both contracts under the same call.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix  this behavior is ok.  [L16] Uncommon ERC20 are not managed  The ReserveSwapper contract allows the Governance to list limit orders of ERC20 tokens.  There is no limitation on the type of ERC20 tokens that can be listed and swapped, but parallelly, tokens like the ERC20 Tether USDT can have implicit fees that are accounted when transferring. However, this internal fees are not being handled by the ReserveSwapper contract.  Therefore, the governance should be aware that the protocol currently does not fully support tokens that charge fees during transfers, and whitelisting such tokens can result in unexpected behavior, such as insolvency. If the protocol is expected to be compatible with these type of tokens, consider modifying the internal accounting mechanism to use the actual amount of assets deposited. One plausible approach would be to query the contracts token balance before and after the execution of the token transfers to obtain the real amount of tokens deposited. For reference, consider how Compounds protocol handles this scenario in their CErc20 contract.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Updated docs with a guide on acceptable ERC20 properties for governance.  [L17] Unhandled return value  The execute function from the GovernorAlpha contract is internally calling the executeTransaction function from the Timelock contract.  The executeTransaction function returns the data returned by the contract call in the returnData parameter, but this parameter is not read nor stored anywhere in the GovernorAlpha contract.  Whether the returnData is needed or not, consider reading or storing it. Alternatively, consider modifying the executeTransaction function to not return any parameter at all if it is not needed or documenting the reason to not use its returned value.  Similarly, the delegate function from the Stake contract is declared as not returning any value, but it is actually using the return keyword in its implementation.  Consider removing the return instruction.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [L18] An account can trigger an approval event on behalf of another account  The StabilierToken contract implements the functionalities of the sESD ERC20 token.  One of those is the transferFrom function that allows to transfer tokens on behalf of another user when the allowance is properly set.  However, if a non-allowed user tries to transfer zero number of tokens on behalf of another another account by calling the transferFrom function, the transaction not only will succeed but it will trigger both Transfer and Approval event emission, meaning that the malicious user could disguise this harmless transaction as an approval on a non-owned account.  Consider requiring a non-zero value transfer when using the transferFrom function to prevent users from being deceived and to improve the readability of off-chain services that track event logs.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix  will stick with current behavior to conform to OZs implementation of ERC20.  Notes & Additional Information  [N01] Not following the Checks-Effects-Interactions pattern  The Dollar contract extends the functionality of the ERC20Detailed and Permittable.  The transferFrom function check if the sender is allowed by the holder to send the tokens but this check is done after the transfer has been made.  Solidity recommends the usage of the Checks-Effects-Interactions Pattern to avoid potential security issues, such as reentrancy.  Although in this scenario it does not represent a possible security issue, consider always following the Check-Effects-Interactions pattern, thus checking the parameters before modifying the contracts state.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix  preserve for code clarity.  [N02] Gas optimization  There are some examples in the code base where gas consumption can be optimized by returning or failing earlier.  The requirement performed on Line 287 of ReserveComptroller.sol can be done after line 281 using the newBorrowed variable.  The order of lines 94-95 of StabilizerToken.sol can be inverted to fail earlier.  Consider reviewing the code base for occurrences like these and refactor the code to be more gas efficient.  Update: Partially fixed on pull request 7. Only the operation order in the StabilizerToken contract was changed.  [N03] Modifier could replace repeated requirements  GovernorAlpha contract there are certain functions that can only be called by the  guardian address. These are to  cancel a proposal,  accept an admin,  abdicate the guardian role,  set the pending admin, and  execute the pending admin process.  On all of these functions, the requirement is copied instead of using a modifier that restricts the call of the functions to only the guardian. This not only cost more at the time of the deployment but also renders the readability of the code.  Consider replacing all the guardian only-access requirements to a modifier that accomplishes the same functionality.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [N04] Implicit and default values  In the code base, there are several occurrences of parameters values that imply a certain purpose.  In particular, uint(-1) and uint96(-1) are used in the Stake contract to indicate an infinite approval for token spender, or in the ReserveSwapper to indicate an unlimited order amount.  Similarly, the Pending status of the ProposalState struct from the GovernorAlpha contract is the default value of the enum and it is being used to tag a pending proposal status instead of having a non-existent proposal state.  To improve the codes readability, consider replacing hardcoded values for explicit constants that properly describe their purposes. Consider also not using the default values for specific meanings, as default values are the ones that appear before an object is initialized, which may lead to confusion.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    [N05] Inconsistent coding style  In the code base, there are some inconsistencies in the style used for the code. Some examples are:  In the Incentivizer contract:  The verifyRewardBalance function is private and placed in the // ADMIN section. It should have a starting _ in the name as it is done for other private functions and being placed under a new // PRIVATE section.  The settle and settleAccount functions are internal and placed under the // FLYWHEEL section, but then, internal functions are defined under the // INTERNAL section and all start with a _.  In the ReserveComptroller contract:  In line 183 it is used a variable to store the ESD address but it is not done the same on line 195 where the output from the registry is used directly. Furthermore, the IERC20 and IManagedToken interfaces are used for the same contract. In this case, consider merging and standardizing the two interfaces if they are used exclusively by the same contract.  In the GovernorAlpha contract:  In line 225, the execute function condenses the requirement of checking the status of the proposal in one line, however the cancel function does the same but in 2 lines.  Revert messages of the GovernorAlpha follow a design which is not used by all other contracts.  In order to improve readability, consider following a unique consistent style while coding the contracts.  Update: Partially fixed on pull request 18. The EmptySetSquad team statement for this issue:  ReserveComptroller Leaves as-is, the pattern being: dont utilizes intermediary variables unless the variable would be accessed more than once in the resulting code.GovernorAlpha Leaves as-is to not modify forked code unnecessarily.  [N06] Lack of indexed parameters in events  There are places in the code base where events defined in the contracts do not index any parameter. Some examples are:  The GovernorAlpha contract.  The events from the IImplementation contract.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  Update: Partially fixed on pull request 6. Events on the GovernorAlpha contract are still not indexed.  [N07] Misleading or erroneous docstrings  In the code base, there are docstrings that may confuse the user or that are incorrect. Some examples are:  The IComptroller interface from the ReserveVault contract has a docstring that states ICErc20 where it should be IComptroller.  Line 133 from ReserveState.sol should say Redemption tax.  Line 84 from ReserveComptroller.sol states Rhe where it should be The.  Line 85 from ReserveVault.sol states \u2026rewards the external protocol where it should be \u2026rewards from the external protocol.  Lines 112-115 from the StabilizerComptroller.sol are the docstrings of the setup function but those are copied from the docstrings of the rate function below.  In order to improve readability, consider fixing all incorrect docstrings in the code base.  Update: Fixed on pull requests 5 and 1.  [N08] Several contracts developed per file  StabilizerState.sol file together with the  ReserverVault.sol,  ReserverState.sol,  Migrator.sol,  GovernerAlpha.sol, and  Interfaces.sol files all present multiple contracts or interfaces definitions inside of the same file.  To improve understandability and readability, but also to have a more modular code base, consider having one contract or interface per Solidity file.  Update: Acknowledged. The EmptySetSquad team statement for this issue:  Wont fix directly  significantly cleaned up via pull request 19 and pull request 20.  [N09] Naming issues  In the code base, there are several occurrences of unclear or confusing names. For example:  The GovernerAlpha.sol file defines a contract called GovernorAlpha.  The getPartial functions name of the Decimal library doesnt reflect correctly the functionality of the function.  The name of the _paid mapping of the Incentivizer contract doesnt suit with the purpose, it is used to track the latest reward per unit instead of the amount of paid rewards as suggested by its docstring.  To improve consistency and readability of the code base, consider changing variable, function, and file names to better reflect their intentions.  Update: Partially fixed on pull request 4. The getPartial function still has a name that does not reflect its functionality.  [N10] Declare uint as uint256  In the code base, there are several places where uint is used instead of uint256. Some examples are:  In the GovernorAlpha contract.  In the ICErc20 interface.  To favor explicitness, consider changing all instances of uint to uint256.  Update: Acknowledged. The EmptySetSquad team statement for this issue:    Conclusions  No critical and 2 high vulnerabilities were found among other issues with lower severities. Recommendations and comments have been provided to improve code quality and readability and some security measures have been recommended to improve the overall health of the system.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#won\u2019t-fix-\u2013-don\u2019t-want-to-modify-widely-used-forked-code-unnecessarily.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Implicit and default values", "body": "[N04] Implicit and default values", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n04]-implicit-and-default-values", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are several occurrences of parameter\u2019s values that imply a certain purpose.", "body": "In the code base, there are several occurrences of parameter\u2019s values that imply a certain purpose.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-code-base,-there-are-several-occurrences-of-parameter\u2019s-values-that-imply-a-certain-purpose.", "labels": ["OpenZeppelin"]}, {"title": "In particular, uint(-1) and uint96(-1) are used in the Stake contract to indicate an infinite approval for token spender, or in the ReserveSwapper to indicate an unlimited order amount.", "body": "In particular, uint(-1) and uint96(-1) are used in the Stake contract to indicate an infinite approval for token spender, or in the ReserveSwapper to indicate an unlimited order amount.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-particular,-uint(-1)-and-uint96(-1)-are-used-in-the-stake-contract-to-indicate-an-infinite-approval-for-token-spender,-or-in-the-reserveswapper-to-indicate-an-unlimited-order-amount.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, the Pending status of the ProposalState struct from the GovernorAlpha contract is the default value of the enum and it is being used to tag a pending proposal status instead of having a non-existent proposal state.", "body": "Similarly, the Pending status of the ProposalState struct from the GovernorAlpha contract is the default value of the enum and it is being used to tag a pending proposal status instead of having a non-existent proposal state.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#similarly,-the-pending-status-of-the-proposalstate-struct-from-the-governoralpha-contract-is-the-default-value-of-the-enum-and-it-is-being-used-to-tag-a-pending-proposal-status-instead-of-having-a-non-existent-proposal-state.", "labels": ["OpenZeppelin"]}, {"title": "To improve the code\u2019s readability, consider replacing hardcoded values for explicit constants that properly describe their purposes. Consider also not using the default values for specific meanings, as default values are the ones that appear before an object is initialized, which may lead to confusion.", "body": "To improve the code\u2019s readability, consider replacing hardcoded values for explicit constants that properly describe their purposes. Consider also not using the default values for specific meanings, as default values are the ones that appear before an object is initialized, which may lead to confusion.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#to-improve-the-code\u2019s-readability,-consider-replacing-hardcoded-values-for-explicit-constants-that-properly-describe-their-purposes.-consider-also-not-using-the-default-values-for-specific-meanings,-as-default-values-are-the-ones-that-appear-before-an-object-is-initialized,-which-may-lead-to-confusion.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistent coding style", "body": "[N05] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n05]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are some inconsistencies in the style used for the code. Some examples are:", "body": "In the code base, there are some inconsistencies in the style used for the code. Some examples are:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-code-base,-there-are-some-inconsistencies-in-the-style-used-for-the-code.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "In the Incentivizer contract:", "body": "In the Incentivizer contract:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-incentivizer-contract:", "labels": ["OpenZeppelin"]}, {"title": "The verifyRewardBalance function is private and placed in the // ADMIN section. It should have a starting _ in the name as it is done for other private functions and being placed under a new \u201c// PRIVATE\u201d section.", "body": "The verifyRewardBalance function is private and placed in the // ADMIN section. It should have a starting _ in the name as it is done for other private functions and being placed under a new \u201c// PRIVATE\u201d section.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-verifyrewardbalance-function-is-private-and-placed-in-the-//-admin-section.-it-should-have-a-starting-_-in-the-name-as-it-is-done-for-other-private-functions-and-being-placed-under-a-new-\u201c//-private\u201d-section.", "labels": ["OpenZeppelin"]}, {"title": "The settle and settleAccount functions are internal and placed under the // FLYWHEEL section, but then, internal functions are defined under the // INTERNAL section and all start with a _.", "body": "The settle and settleAccount functions are internal and placed under the // FLYWHEEL section, but then, internal functions are defined under the // INTERNAL section and all start with a _.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-settle-and-settleaccount-functions-are-internal-and-placed-under-the-//-flywheel-section,-but-then,-internal-functions-are-defined-under-the-//-internal-section-and-all-start-with-a-_.", "labels": ["OpenZeppelin"]}, {"title": "In the ReserveComptroller contract:", "body": "In the ReserveComptroller contract:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-reservecomptroller-contract:", "labels": ["OpenZeppelin"]}, {"title": "In line 183 it is used a variable to store the ESD address but it is not done the same on line 195 where the output from the registry is used directly. Furthermore, the IERC20 and IManagedToken interfaces are used for the same contract. In this case, consider merging and standardizing the two interfaces if they are used exclusively by the same contract.", "body": "In line 183 it is used a variable to store the ESD address but it is not done the same on line 195 where the output from the registry is used directly. Furthermore, the IERC20 and IManagedToken interfaces are used for the same contract. In this case, consider merging and standardizing the two interfaces if they are used exclusively by the same contract.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-line-183-it-is-used-a-variable-to-store-the-esd-address-but-it-is-not-done-the-same-on-line-195-where-the-output-from-the-registry-is-used-directly.-furthermore,-the-ierc20-and-imanagedtoken-interfaces-are-used-for-the-same-contract.-in-this-case,-consider-merging-and-standardizing-the-two-interfaces-if-they-are-used-exclusively-by-the-same-contract.", "labels": ["OpenZeppelin"]}, {"title": "In the GovernorAlpha contract:", "body": "In the GovernorAlpha contract:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-governoralpha-contract:", "labels": ["OpenZeppelin"]}, {"title": "In line 225, the execute function condenses the requirement of checking the status of the proposal in one line, however the cancel function does the same but in 2 lines.", "body": "In line 225, the execute function condenses the requirement of checking the status of the proposal in one line, however the cancel function does the same but in 2 lines.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-line-225,-the-execute-function-condenses-the-requirement-of-checking-the-status-of-the-proposal-in-one-line,-however-the-cancel-function-does-the-same-but-in-2-lines.", "labels": ["OpenZeppelin"]}]