[{"title": "Arbitrary and redundant stage state\u00a0variable", "body": "Arbitrary and redundant stage state\u00a0variable", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#arbitrary-and-redundant-stage-state\u00a0variable", "labels": ["OpenZeppelin"]}, {"title": "startSale,", "body": "startSale,", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#startsale,", "labels": ["OpenZeppelin"]}, {"title": "stopSale and", "body": "stopSale and", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#stopsale-and", "labels": ["OpenZeppelin"]}, {"title": "setFailedState allow the owner to set the", "body": "setFailedState allow the owner to set the", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#setfailedstate-allow-the-owner-to-set-the", "labels": ["OpenZeppelin"]}, {"title": "stage state variable. However, there are no restrictions on when they can be called, and consequently the value of the", "body": "stage state variable. However, there are no restrictions on when they can be called, and consequently the value of the", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#stage-state-variable.-however,-there-are-no-restrictions-on-when-they-can-be-called,-and-consequently-the-value-of-the", "labels": ["OpenZeppelin"]}, {"title": "The variable actually serves no purpose other than giving the owner some control over when its functions can be called. This control is limited, however, because there are already other restrictions in place. For example, refund can only be called after the sale period and if the minimum cap isn\u2019t reached. This makes us think the stage variable is redundant.", "body": "The variable actually serves no purpose other than giving the owner some control over when its functions can be called. This control is limited, however, because there are already other restrictions in place. For example, refund can only be called after the sale period and if the minimum cap isn\u2019t reached. This makes us think the stage variable is redundant.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#the-variable-actually-serves-no-purpose-other-than-giving-the-owner-some-control-over-when-its-functions-can-be-called.-this-control-is-limited,-however,-because-there-are-already-other-restrictions-in-place.-for-example,-refund-can-only-be-called-after-the-sale-period-and-if-the-minimum-cap-isn\u2019t-reached.-this-makes-us-think-the-stage-variable-is-redundant.", "labels": ["OpenZeppelin"]}, {"title": "We would recommend to remove it along with the setter functions, to further trust minimization and remove the possible inconsistent states. Alternatively, add checks to stage setter functions, and only rely on those for other function preconditions.", "body": "We would recommend to remove it along with the setter functions, to further trust minimization and remove the possible inconsistent states. Alternatively, add checks to stage setter functions, and only rely on those for other function preconditions.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#we-would-recommend-to-remove-it-along-with-the-setter-functions,-to-further-trust-minimization-and-remove-the-possible-inconsistent-states.-alternatively,-add-checks-to-stage-setter-functions,-and-only-rely-on-those-for-other-function-preconditions.", "labels": ["OpenZeppelin"]}, {"title": "Update: The variable was removed in the latest version.", "body": "Update: The variable was removed in the latest version.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-the-variable-was-removed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Using block numbers to specify start and\u00a0end", "body": "Using block numbers to specify start and\u00a0end", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#using-block-numbers-to-specify-start-and\u00a0end", "labels": ["OpenZeppelin"]}, {"title": "The sale uses block numbers to specify when it starts and when it ends. The current recommendation is to use timestamps instead. The risk of miner manipulation of timestamps is very low for this use case, and due to the Difficulty Bomb it is now very difficult to correctly estimate future block times. Consider switching to timestamps.", "body": "The sale uses block numbers to specify when it starts and when it ends. The current recommendation is to use timestamps instead. The risk of miner manipulation of timestamps is very low for this use case, and due to the Difficulty Bomb it is now very difficult to correctly estimate future block times. Consider switching to timestamps.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#the-sale-uses-block-numbers-to-specify-when-it-starts-and-when-it-ends.-the-current-recommendation-is-to-use-timestamps-instead.-the-risk-of-miner-manipulation-of-timestamps-is-very-low-for-this-use-case,-and-due-to-the-difficulty-bomb-it-is-now-very-difficult-to-correctly-estimate-future-block-times.-consider-switching-to-timestamps.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team has decided to keep using block numbers.", "body": "Update: The team has decided to keep using block numbers.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-the-team-has-decided-to-keep-using-block-numbers.", "labels": ["OpenZeppelin"]}, {"title": "Constructor parameter sanity\u00a0checks", "body": "Constructor parameter sanity\u00a0checks", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#constructor-parameter-sanity\u00a0checks", "labels": ["OpenZeppelin"]}, {"title": "Consider performing sanity checks to validate GMToken\u2019s constructor parameters. Check that _startBlock &lt; _endBlock.", "body": "Consider performing sanity checks to validate GMToken\u2019s constructor parameters. Check that _startBlock &lt; _endBlock.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#consider-performing-sanity-checks-to-validate-gmtoken\u2019s-constructor-parameters.-check-that-_startblock-&lt;-_endblock.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in the latest version.", "body": "ERC20 compliance  declared as a  500 * (10**6) * 10**decimals. Consider defining a constant  Etherscan to learn of the new token holders. A similar  next to  ClaimGMT in    Duplicate decimals value  GMToken and  GMTSafe contracts. This redundancy is error-prone, as the two variables could get out of sync if they are changed at any moment. Consider leaving only the  token grain amount to be transferred, instead of the token unit amount (e.g.    Notes & Additional Information  There are a couple of TODO notes in the contracts, with things to change before deployment. This is prone to forgetting, and we recommend to add constructor parameters for these pending values to avoid this kind of mistake.  Some of the checks in SafeMath are redundant and can be removed: bothchecks in div, and the second check (c &gt;= b in add.  Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.  transfer checks that destination is not 0x0 or the token itself, but transferFrom doesnt. Consider adding the same checks there.  In unlock in GMTSafe an ad-hoc revert was implemented, but the EVMs revert functionality could be used.  In GMTSafe, the constructor parameter and gmtAddress state variable could be directly declared of type GMToken. If the constructor is declared as GMTSafe(GMToken _gmt) the ABI will remain GMTSafe(address).  refund has a boolean return value that is unused. Consider removing it.  Update: Most suggestions were implemented in the latest version.  Conclusion  One critical severity issue was found and explained, along with a recommendation on how to fix it. Some changes were proposed to enhance standards compliance, follow best practices and reduce potential attack surface.  If youre interested in discussing smart contract security, join our slack channel, follow us on Medium, or apply to work with us! Were also available for smart contract security development and auditing work.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Global Messaging Token contracts. We have not reviewed the related Mercury Protocol or Dust projects. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Reuse open source contracts", "body": "Reuse open source contracts", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#reuse-open-source-contracts", "labels": ["OpenZeppelin"]}, {"title": "StandardToken,", "body": "Crowdsale,  RefundableCrowdsale and  SafeMath contracts. Reimplementing functionality instead of reusing public and already audited code can bring  regression problems and difficult to find bugs. Consider installing and using the code available in  OpenZeppelin.  Update: The team has pointed out that the token is in fact taken from ConsenSys.  Unsafe math  There are many unchecked arithmetic operations in GMToken and StandardToken. Its always better to be safe and perform checked operations. Consider using the SafeMath library, or performing pre-condition checks on any math operation.  Update: Fixed in the latest version.  ERC20 compliance  declared as a  500 * (10**6) * 10**decimals. Consider defining a constant  Etherscan to learn of the new token holders. A similar  next to  ClaimGMT in  Update: Fixed in the latest version.  Duplicate decimals value  GMToken and  GMTSafe contracts. This redundancy is error-prone, as the two variables could get out of sync if they are changed at any moment. Consider leaving only the  token grain amount to be transferred, instead of the token unit amount (e.g.  Update: Fixed in the latest version.  Notes & Additional Information  There are a couple of TODO notes in the contracts, with things to change before deployment. This is prone to forgetting, and we recommend to add constructor parameters for these pending values to avoid this kind of mistake.  Some of the checks in SafeMath are redundant and can be removed: bothchecks in div, and the second check (c &gt;= b in add.  Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.  transfer checks that destination is not 0x0 or the token itself, but transferFrom doesnt. Consider adding the same checks there.  In unlock in GMTSafe an ad-hoc revert was implemented, but the EVMs revert functionality could be used.  In GMTSafe, the constructor parameter and gmtAddress state variable could be directly declared of type GMToken. If the constructor is declared as GMTSafe(GMToken _gmt) the ABI will remain GMTSafe(address).  refund has a boolean return value that is unused. Consider removing it.  Update: Most suggestions were implemented in the latest version.  Conclusion  One critical severity issue was found and explained, along with a recommendation on how to fix it. Some changes were proposed to enhance standards compliance, follow best practices and reduce potential attack surface.  If youre interested in discussing smart contract security, join our slack channel, follow us on Medium, or apply to work with us! Were also available for smart contract security development and auditing work.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Global Messaging Token contracts. We have not reviewed the related Mercury Protocol or Dust projects. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#standardtoken,", "labels": ["OpenZeppelin"]}, {"title": "GMToken and", "body": "StandardToken. Its always better to be safe and perform checked operations. Consider using the SafeMath library, or performing pre-condition checks on any math operation.  Update: Fixed in the latest version.  ERC20 compliance  declared as a  500 * (10**6) * 10**decimals. Consider defining a constant  Etherscan to learn of the new token holders. A similar  next to  ClaimGMT in  Update: Fixed in the latest version.  Duplicate decimals value    GMTSafe contracts. This redundancy is error-prone, as the two variables could get out of sync if they are changed at any moment. Consider leaving only the  token grain amount to be transferred, instead of the token unit amount (e.g.  Update: Fixed in the latest version.  Notes & Additional Information  There are a couple of TODO notes in the contracts, with things to change before deployment. This is prone to forgetting, and we recommend to add constructor parameters for these pending values to avoid this kind of mistake.  Some of the checks in SafeMath are redundant and can be removed: bothchecks in div, and the second check (c &gt;= b in add.  Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.  transfer checks that destination is not 0x0 or the token itself, but transferFrom doesnt. Consider adding the same checks there.  In unlock in GMTSafe an ad-hoc revert was implemented, but the EVMs revert functionality could be used.  In GMTSafe, the constructor parameter and gmtAddress state variable could be directly declared of type GMToken. If the constructor is declared as GMTSafe(GMToken _gmt) the ABI will remain GMTSafe(address).  refund has a boolean return value that is unused. Consider removing it.  Update: Most suggestions were implemented in the latest version.  Conclusion  One critical severity issue was found and explained, along with a recommendation on how to fix it. Some changes were proposed to enhance standards compliance, follow best practices and reduce potential attack surface.  If youre interested in discussing smart contract security, join our slack channel, follow us on Medium, or apply to work with us! Were also available for smart contract security development and auditing work.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Global Messaging Token contracts. We have not reviewed the related Mercury Protocol or Dust projects. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#gmtoken-and", "labels": ["OpenZeppelin"]}, {"title": "SafeMath are very similar to code found in", "body": "SafeMath are very similar to code found in", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#safemath-are-very-similar-to-code-found-in", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s", "body": "OpenZeppelin\u2019s", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#openzeppelin\u2019s", "labels": ["OpenZeppelin"]}, {"title": "Crowdsale,", "body": "Crowdsale,", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#crowdsale,", "labels": ["OpenZeppelin"]}, {"title": "RefundableCrowdsale and", "body": "RefundableCrowdsale and", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#refundablecrowdsale-and", "labels": ["OpenZeppelin"]}, {"title": "SafeMath contracts. Reimplementing functionality instead of reusing public and already audited code can bring", "body": "SafeMath contracts. Reimplementing functionality instead of reusing public and already audited code can bring", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#safemath-contracts.-reimplementing-functionality-instead-of-reusing-public-and-already-audited-code-can-bring", "labels": ["OpenZeppelin"]}, {"title": "regression problems and difficult to find bugs. Consider installing and using the code available in", "body": "regression problems and difficult to find bugs. Consider installing and using the code available in", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#regression-problems-and-difficult-to-find-bugs.-consider-installing-and-using-the-code-available-in", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin.", "body": "OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team has pointed out that the token is in fact taken from ConsenSys.", "body": "Update: The team has pointed out that the token is in fact taken from ConsenSys.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-the-team-has-pointed-out-that-the-token-is-in-fact-taken-from-consensys.", "labels": ["OpenZeppelin"]}, {"title": "Unsafe math", "body": "Unsafe math", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#unsafe-math", "labels": ["OpenZeppelin"]}, {"title": "There are many unchecked arithmetic operations in GMToken and StandardToken. It\u2019s always better to be safe and perform checked operations. Consider using the SafeMath library, or performing pre-condition checks on any math operation.", "body": "There are many unchecked arithmetic operations in GMToken and StandardToken. It\u2019s always better to be safe and perform checked operations. Consider using the SafeMath library, or performing pre-condition checks on any math operation.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#there-are-many-unchecked-arithmetic-operations-in-gmtoken-and-standardtoken.-it\u2019s-always-better-to-be-safe-and-perform-checked-operations.-consider-using-the-safemath-library,-or-performing-pre-condition-checks-on-any-math-operation.", "labels": ["OpenZeppelin"]}, {"title": "ERC20 compliance", "body": "ERC20 compliance", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#erc20-compliance", "labels": ["OpenZeppelin"]}, {"title": "declared as a", "body": "declared as a", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#declared-as-a", "labels": ["OpenZeppelin"]}, {"title": "500 * (10**6) * 10**decimals. Consider defining a constant", "body": "500 * (10**6) * 10**decimals. Consider defining a constant", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#500-*-(10**6)-*-10**decimals.-consider-defining-a-constant", "labels": ["OpenZeppelin"]}, {"title": "Etherscan to learn of the new token holders. A similar", "body": "Etherscan to learn of the new token holders. A similar", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#etherscan-to-learn-of-the-new-token-holders.-a-similar", "labels": ["OpenZeppelin"]}, {"title": "next to", "body": "next to", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#next-to", "labels": ["OpenZeppelin"]}, {"title": "ClaimGMT in", "body": "ClaimGMT in", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#claimgmt-in", "labels": ["OpenZeppelin"]}, {"title": "Duplicate decimals\u00a0value", "body": "Duplicate decimals\u00a0value", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#duplicate-decimals\u00a0value", "labels": ["OpenZeppelin"]}, {"title": "GMTSafe contracts. This redundancy is error-prone, as the two variables could get out of sync if they are changed at any moment. Consider leaving only the", "body": "GMTSafe contracts. This redundancy is error-prone, as the two variables could get out of sync if they are changed at any moment. Consider leaving only the", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#gmtsafe-contracts.-this-redundancy-is-error-prone,-as-the-two-variables-could-get-out-of-sync-if-they-are-changed-at-any-moment.-consider-leaving-only-the", "labels": ["OpenZeppelin"]}, {"title": "token grain amount to be transferred, instead of the token unit amount (e.g.", "body": "token grain amount to be transferred, instead of the token unit amount (e.g.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#token-grain-amount-to-be-transferred,-instead-of-the-token-unit-amount-(e.g.", "labels": ["OpenZeppelin"]}, {"title": "There are a couple of TODO notes in the contracts, with things to change before deployment. This is prone to forgetting, and we recommend to add constructor parameters for these pending values to avoid this kind of mistake.", "body": "There are a couple of TODO notes in the contracts, with things to change before deployment. This is prone to forgetting, and we recommend to add constructor parameters for these pending values to avoid this kind of mistake.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#there-are-a-couple-of-todo-notes-in-the-contracts,-with-things-to-change-before-deployment.-this-is-prone-to-forgetting,-and-we-recommend-to-add-constructor-parameters-for-these-pending-values-to-avoid-this-kind-of-mistake.", "labels": ["OpenZeppelin"]}, {"title": "Some of the checks in SafeMath are redundant and can be removed: bothchecks in div, and the second check (c &gt;= b in add.", "body": "Some of the checks in SafeMath are redundant and can be removed: bothchecks in div, and the second check (c &gt;= b in add.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#some-of-the-checks-in-safemath-are-redundant-and-can-be-removed:-bothchecks-in-div,-and-the-second-check-(c-&gt;=-b-in-add.", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "body": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#keep-in-mind-that-there-is-a-possible-attack-vector-on-the-approve/transferfrom-functionality-of-erc20-tokens,-described-here.-consider-implementing-one-of-the-proposed-mitigations,-or-using-the-erc20-implementation-from-openzeppelin-which-already-has-one-in-place.", "labels": ["OpenZeppelin"]}, {"title": "transfer checks that destination is not 0x0 or the token itself, but transferFrom doesn\u2019t. Consider adding the same checks there.", "body": "transfer checks that destination is not 0x0 or the token itself, but transferFrom doesn\u2019t. Consider adding the same checks there.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#transfer-checks-that-destination-is-not-0x0-or-the-token-itself,-but-transferfrom-doesn\u2019t.-consider-adding-the-same-checks-there.", "labels": ["OpenZeppelin"]}, {"title": "In unlock in GMTSafe an ad-hoc \u201crevert\u201d was implemented, but the EVM\u2019s revert functionality could be used.", "body": "In unlock in GMTSafe an ad-hoc \u201crevert\u201d was implemented, but the EVM\u2019s revert functionality could be used.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#in-unlock-in-gmtsafe-an-ad-hoc-\u201crevert\u201d-was-implemented,-but-the-evm\u2019s-revert-functionality-could-be-used.", "labels": ["OpenZeppelin"]}, {"title": "In GMTSafe, the constructor parameter and gmtAddress state variable could be directly declared of type GMToken. If the constructor is declared as GMTSafe(GMToken _gmt) the ABI will remain GMTSafe(address).", "body": "In GMTSafe, the constructor parameter and gmtAddress state variable could be directly declared of type GMToken. If the constructor is declared as GMTSafe(GMToken _gmt) the ABI will remain GMTSafe(address).", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#in-gmtsafe,-the-constructor-parameter-and-gmtaddress-state-variable-could-be-directly-declared-of-type-gmtoken.-if-the-constructor-is-declared-as-gmtsafe(gmtoken-_gmt)-the-abi-will-remain-gmtsafe(address).", "labels": ["OpenZeppelin"]}, {"title": "refund has a boolean return value that is unused. Consider removing it.", "body": "refund has a boolean return value that is unused. Consider removing it.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#refund-has-a-boolean-return-value-that-is-unused.-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Most suggestions were implemented in the latest version.", "body": "Update: Most suggestions were implemented in the latest version.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-most-suggestions-were-implemented-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "No Transfer for initial supply\u00a0creation", "body": "No Transfer for initial supply\u00a0creation", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#no-transfer-for-initial-supply\u00a0creation", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting an event Transfer(0x0, msg.sender, INITIAL_SUPPLY) in the constructor. This is consistent with the recommended behavior for token creation, and will improve the user experience. For example, the created token amount will be immediately displayed in the Etherscan token interface.", "body": "Consider emitting an event Transfer(0x0, msg.sender, INITIAL_SUPPLY) in the constructor. This is consistent with the recommended behavior for token creation, and will improve the user experience. For example, the created token amount will be immediately displayed in the Etherscan token interface.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#consider-emitting-an-event-transfer(0x0,-msg.sender,-initial_supply)-in-the-constructor.-this-is-consistent-with-the-recommended-behavior-for-token-creation,-and-will-improve-the-user-experience.-for-example,-the-created-token-amount-will-be-immediately-displayed-in-the-etherscan-token-interface.", "labels": ["OpenZeppelin"]}, {"title": "Update: Event added in 84412e9.", "body": "Update: Event added in 84412e9.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#update:-event-added-in-84412e9.", "labels": ["OpenZeppelin"]}, {"title": "ERC20 compliance", "body": "ERC20 compliance", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#erc20-compliance", "labels": ["OpenZeppelin"]}, {"title": "Although a minor problem, the decimals state variable should be defined with type uint8 to be compliant with ERC20.", "body": "Although a minor problem, the decimals state variable should be defined with type uint8 to be compliant with ERC20.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#although-a-minor-problem,-the-decimals-state-variable-should-be-defined-with-type-uint8-to-be-compliant-with-erc20.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the version of OpenZeppelin used for Enigma (1.2.0) included a restriction to the usage of approve that has been deemed non-compliant and was removed in the next version. Consider upgrading to OpenZeppelin 1.3.0.", "body": "Additionally, the version of OpenZeppelin used for Enigma (1.2.0) included a restriction to the usage of approve that has been deemed non-compliant and was removed in the next version. Consider upgrading to OpenZeppelin 1.3.0.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#additionally,-the-version-of-openzeppelin-used-for-enigma-(1.2.0)-included-a-restriction-to-the-usage-of-approve-that-has-been-deemed-non-compliant-and-was-removed-in-the-next-version.-consider-upgrading-to-openzeppelin-1.3.0.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in a09d58c.", "body": "Update: Fixed in a09d58c.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#update:-fixed-in-a09d58c.", "labels": ["OpenZeppelin"]}, {"title": "Additionally to the mentioned 1.3.0 changes, the modifications done in the Enigma token to transfer, transferFrom, and approve have all been included in this latest version. If OpenZeppelin were upgraded, these functions could safely be removed and fall back to OpenZeppelin\u2019s implementation.Update: Updated to 1.3.0 in ac20729.", "body": "Additionally to the mentioned 1.3.0 changes, the modifications done in the Enigma token to transfer, transferFrom, and approve have all been included in this latest version. If OpenZeppelin were upgraded, these functions could safely be removed and fall back to OpenZeppelin\u2019s implementation.Update: Updated to 1.3.0 in ac20729.", "html_url": "https://blog.openzeppelin.com/enigma-token-audit-91111e0b7f8a#additionally-to-the-mentioned-1.3.0-changes,-the-modifications-done-in-the-enigma-token-to-transfer,-transferfrom,-and-approve-have-all-been-included-in-this-latest-version.-if-openzeppelin-were-upgraded,-these-functions-could-safely-be-removed-and-fall-back-to-openzeppelin\u2019s-implementation.update:-updated-to-1.3.0-in-ac20729.", "labels": ["OpenZeppelin"]}, {"title": "Leftover presale supply can be left unrecoverable", "body": "Leftover presale supply can be left unrecoverable", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#leftover-presale-supply-can-be-left-unrecoverable", "labels": ["OpenZeppelin"]}, {"title": "When FuelToken is deployed, the total supply of 1 billion is divided into allocations destined for various purposes, including presale and crowdfund. The intention is for all of the supply to be eventually sold. Out of the presale and crowdfund allocations, tokens which aren\u2019t sold during the corresponding stage are meant to be eventually transferred to the platform address, which would later sell them via the Etherparty platform.", "body": "When FuelToken is deployed, the total supply of 1 billion is divided into allocations destined for various purposes, including presale and crowdfund. The intention is for all of the supply to be eventually sold. Out of the presale and crowdfund allocations, tokens which aren\u2019t sold during the corresponding stage are meant to be eventually transferred to the platform address, which would later sell them via the Etherparty platform.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#when-fueltoken-is-deployed,-the-total-supply-of-1-billion-is-divided-into-allocations-destined-for-various-purposes,-including-presale-and-crowdfund.-the-intention-is-for-all-of-the-supply-to-be-eventually-sold.-out-of-the-presale-and-crowdfund-allocations,-tokens-which-aren\u2019t-sold-during-the-corresponding-stage-are-meant-to-be-eventually-transferred-to-the-platform-address,-which-would-later-sell-them-via-the-etherparty-platform.", "labels": ["OpenZeppelin"]}, {"title": "When the presale is finalized (via finalizePresale), its remaining allocation is transferred to the crowdfund. When the crowdfund is finalized (via finalizeCrowdfund), its remaining allocation is finally transferred to the platform. There is an implied ordering between these two calls which is not enforced in the smart contract code. As a consequence, the crowdfund could be mistakenly finalized before the presale, and any remaining tokens allocated for the presale would then be unrecoverable (for they would be transferred to the crowdfund address with no way to get them out anymore).", "body": "When the presale is finalized (via finalizePresale), its remaining allocation is transferred to the crowdfund. When the crowdfund is finalized (via finalizeCrowdfund), its remaining allocation is finally transferred to the platform. There is an implied ordering between these two calls which is not enforced in the smart contract code. As a consequence, the crowdfund could be mistakenly finalized before the presale, and any remaining tokens allocated for the presale would then be unrecoverable (for they would be transferred to the crowdfund address with no way to get them out anymore).", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#when-the-presale-is-finalized-(via-finalizepresale),-its-remaining-allocation-is-transferred-to-the-crowdfund.-when-the-crowdfund-is-finalized-(via-finalizecrowdfund),-its-remaining-allocation-is-finally-transferred-to-the-platform.-there-is-an-implied-ordering-between-these-two-calls-which-is-not-enforced-in-the-smart-contract-code.-as-a-consequence,-the-crowdfund-could-be-mistakenly-finalized-before-the-presale,-and-any-remaining-tokens-allocated-for-the-presale-would-then-be-unrecoverable-(for-they-would-be-transferred-to-the-crowdfund-address-with-no-way-to-get-them-out-anymore).", "labels": ["OpenZeppelin"]}, {"title": "To prevent this, add the precondition require(presaleFinalized) to the finalizeCrowdfund function.", "body": "To prevent this, add the precondition require(presaleFinalized) to the finalizeCrowdfund function.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#to-prevent-this,-add-the-precondition-require(presalefinalized)-to-the-finalizecrowdfund-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 7a30774.", "body": "Medium Severity  Unclear semantics for Transfer  The ERC20 token standard specifies the Transfer event to log transfers. The specification is informal, and there is not an exact characterization of when the event should be emitted. However, since this event is relied on by applications, it is in the interest of the project to try to respect the semantics that applications expect. This will pay off in a better user experience, and probably lower operational costs.  releaseVanbexTeamTokens), a  transfer from the token contract itself is logged. This is conflicting with the expected semantics of the event, because the token contract didnt have those tokens as part of its balance to begin with. In  transferFromCrowdfund, the event is emitted  with the crowdfund as the source, but there was never a  Consider emitting this event with the zero address as the from field, which is the accepted way to log creation of tokens.  Update: Fixed in 759557a and a363180.  Possible erroneous Transfer event in transferFrom  In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same wont happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.  Update: Fixed in 4a5ba4a.  Unchecked return value  The function finalizeCrowdfund is defined to return a boolean value indicating success. However, this return value is ignored when the function is called. Since the return value is currently always true, consider removing it altogether. Otherwise, always check the return value.  Update: The return value was removed in f85fc45.  Duplicate data  The token contract FuelToken has a state variable crowdfundEndsAt which is hardcoded to be the same value as the FuelCrowdfunds endsAt state variable. This duplication of the value is error-prone, as it could easily get out of sync. Consider getting the value directly from the crowdfund, as crowdfund.endsAt().  Semantics of totalAllocatedTokens  It is unclear what the totalAllocatedTokens state variable of FuelToken means. At the moment the crowdfund is finalized, this variable will get out of sync with the amount of tokens actually distributed, because the platform will have all of the remaining supply to sell. Consider removing the variable altogether, or calling allocateTokens when the final remaining tokens are transferred to the platform in finalizeCrowdfund.  Update: The variable was removed in 86abce6.  High coupling between token and crowdfund contracts  The token contract does a lot more than handle balances, transfers, and allowance. It has special code for crowdfund-originated transfers, for the Vanbex team vesting, and for the presale. It has variables and events to track crowdfund and presale state. As a result of all this, the code is very hard to follow and to ensure it is bug-free. At this stage, it would be a high risk to redesign the contracts, so we will not recommend that. However, the team should keep in mind to follow software engineering principles such as separation of concerns, single responsibility, low coupling, etcetera, for any new contracts they write.  Low Severity  Rejecting non-zero transfers is not ERC20 compliant  transfers of 0 values MUST be treated as normal transfers. In  rejected. Consider removing the modifier  Update: Fixed in 2b9e0b3.  Notes & Additional Information  Consider using OpenZeppelins StandardToken implementation to build on top of.  Make sure the owner of FuelCrowdfund is set to a secure address, preferably a multi-signature wallet. This address has the ability of changing the wallet address where the funds are sent.  The price of a token usually means how much ETH is necessary to buy one unit of it. In the contract it is used to mean the amount that can be bought with 1 ETH. This concept is usually referred to as rate. (Update: Renamed to rate in 505439c.)  This documentation comment in NonZero is incomplete.  The fallback function in FuelCrowdfund has the nonZeroValue modifier added. This can be circumvented by a user by calling buyTokens directly. Consider placing the modifier in buyTokens instead. (The transaction would fail nonetheless because transferFromCrowdfund wont accept an amount of zero tokens.) (Update: Fixed in 9f1d6d6.)  The function closeCrowdfund of FuelCrowdfund doesnt itself require that it be called after the crowdfund period ends. It calls finalizeCrowdfund in FuelToken, however, which does fail and revert the whole transaction in that case. This is a strange assignment of responsibilities. It should be the crowdfund contract itself which rejects the transaction before the end of the period. (Update: Fixed in c4c6667.)  The state variable amountOfPublicTokensToAllocate of FuelToken is merely the sum of presaleSupply and icoSupply, which is a constant value. It is not used for anything. Consider removing it as well. (Update: removed in _4215e8c.)  It is undocumented and unclear what the tokens field of the CrowdfundFinalized and PresaleFinalized events should mean. In the implementation the value used is the amount left over from the crowdfund and presale allocations respectively. Consider choosing a better name, such as remainingTokens, and documenting its meaning. (Update: Fixed in df2bf81.)  The empty fallback function is not needed because Solidity will by default reject value transfers. (Update: Fixed in d56da95.)  Constant values can be declared as constant state variables and initialized in the declaration itself (as opposed to in the constructor). Consider doing this for vanbexTeamSupply, platformSupply, presaleSupply, etcetera.  Consider writing token amounts parameterized by the decimals state variable. For this, it can be helpful to define a variable uint256 constant FUEL_UNIT = 10 ** uint256(decimals). Afterwards, you can write, for example, vanbexTeamSupply = 50e6 * FUEL_UNIT. This is clearer and more maintainable.  The variable etherpartyAddress is not used anywhere. (Update: Removed in a8dfd0d.)  Conclusion  One critical severity and two high severity issues were found and explained, along with recommendations on how to fix them. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Fuel Token contract. We have not reviewed the related Etherparty project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-fixed-in-7a30774.", "labels": ["OpenZeppelin"]}, {"title": "Error-prone code duplication", "body": "Error-prone code duplication", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#error-prone-code-duplication", "labels": ["OpenZeppelin"]}, {"title": "There is an extremely high level of code duplication in the contracts. Although it is not causing a problem in the current version of the code, it is highly likely that small revisions will create bugs.", "body": "There is an extremely high level of code duplication in the contracts. Although it is not causing a problem in the current version of the code, it is highly likely that small revisions will create bugs.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#there-is-an-extremely-high-level-of-code-duplication-in-the-contracts.-although-it-is-not-causing-a-problem-in-the-current-version-of-the-code,-it-is-highly-likely-that-small-revisions-will-create-bugs.", "labels": ["OpenZeppelin"]}, {"title": "For example, there are six different implementations of transfer (for example in transferFromCrowdfund and releaseVanbexTeamTokens), and there are other places where balances are modified with confusing semantics. In the case of transfers, consider using the contract\u2019s transfer function directly.", "body": "For example, there are six different implementations of transfer (for example in transferFromCrowdfund and releaseVanbexTeamTokens), and there are other places where balances are modified with confusing semantics. In the case of transfers, consider using the contract\u2019s transfer function directly.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#for-example,-there-are-six-different-implementations-of-transfer-(for-example-in-transferfromcrowdfund-and-releasevanbexteamtokens),-and-there-are-other-places-where-balances-are-modified-with-confusing-semantics.-in-the-case-of-transfers,-consider-using-the-contract\u2019s-transfer-function-directly.", "labels": ["OpenZeppelin"]}, {"title": "A different case of code duplication is the FuelToken interface used by the FuelCrowdfund contract. It could easily get out of sync with the actual FuelToken contract. Consider importing the FuelToken.sol file instead, and directly using the actual contract.", "body": "A different case of code duplication is the FuelToken interface used by the FuelCrowdfund contract. It could easily get out of sync with the actual FuelToken contract. Consider importing the FuelToken.sol file instead, and directly using the actual contract.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#a-different-case-of-code-duplication-is-the-fueltoken-interface-used-by-the-fuelcrowdfund-contract.-it-could-easily-get-out-of-sync-with-the-actual-fueltoken-contract.-consider-importing-the-fueltoken.sol-file-instead,-and-directly-using-the-actual-contract.", "labels": ["OpenZeppelin"]}, {"title": "In general, be on the lookout for code duplication and consider refactoring the current code by creating internal helper functions with clearer semantics.", "body": "In general, be on the lookout for code duplication and consider refactoring the current code by creating internal helper functions with clearer semantics.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#in-general,-be-on-the-lookout-for-code-duplication-and-consider-refactoring-the-current-code-by-creating-internal-helper-functions-with-clearer-semantics.", "labels": ["OpenZeppelin"]}, {"title": "Update: Regarding transfers, the team replied: \u201cThe transferFromCrowdfund and releaseVanbexTeamTokens methods have requirements not available in the transfer method. The crowdfund must be able to transfer before the tokens are able to transferred by the public, and the vanbex team tokens are not being decremented from a balance. We prefer this solution to cluttering up the transfer method itself.\u201d The FuelToken interface issue was fixed in 91f8920.", "body": "Update: Regarding transfers, the team replied: \u201cThe transferFromCrowdfund and releaseVanbexTeamTokens methods have requirements not available in the transfer method. The crowdfund must be able to transfer before the tokens are able to transferred by the public, and the vanbex team tokens are not being decremented from a balance. We prefer this solution to cluttering up the transfer method itself.\u201d The FuelToken interface issue was fixed in 91f8920.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-regarding-transfers,-the-team-replied:-\u201cthe-transferfromcrowdfund-and-releasevanbexteamtokens-methods-have-requirements-not-available-in-the-transfer-method.-the-crowdfund-must-be-able-to-transfer-before-the-tokens-are-able-to-transferred-by-the-public,-and-the-vanbex-team-tokens-are-not-being-decremented-from-a-balance.-we-prefer-this-solution-to-cluttering-up-the-transfer-method-itself.\u201d-the-fueltoken-interface-issue-was-fixed-in-91f8920.", "labels": ["OpenZeppelin"]}, {"title": "Presale balance may not be deliverable after crowdfund starts", "body": "Presale balance may not be deliverable after crowdfund starts", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#presale-balance-may-not-be-deliverable-after-crowdfund-starts", "labels": ["OpenZeppelin"]}, {"title": "The function deliverPresaleFuelBalance requires that the receiver have a balance of zero. There is a comment which states that all individual contributions will be aggregated, so that for each contributor the function will only be called once.", "body": "The function deliverPresaleFuelBalance requires that the receiver have a balance of zero. There is a comment which states that all individual contributions will be aggregated, so that for each contributor the function will only be called once.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-function-deliverpresalefuelbalance-requires-that-the-receiver-have-a-balance-of-zero.-there-is-a-comment-which-states-that-all-individual-contributions-will-be-aggregated,-so-that-for-each-contributor-the-function-will-only-be-called-once.", "labels": ["OpenZeppelin"]}, {"title": "However, in the same way as the critical issue we reported, it is implied that the presale balance will be distributed before the crowdfund even begins. It could be the case that a user buys tokens both in the presale and in the crowdfund, and if the presale balance is not delivered before the latter, the presale delivery would fail. Furthermore, since presale deliveries will be made in batches, it would likely be very difficult to debug the cause of one batch failing.", "body": "However, in the same way as the critical issue we reported, it is implied that the presale balance will be distributed before the crowdfund even begins. It could be the case that a user buys tokens both in the presale and in the crowdfund, and if the presale balance is not delivered before the latter, the presale delivery would fail. Furthermore, since presale deliveries will be made in batches, it would likely be very difficult to debug the cause of one batch failing.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#however,-in-the-same-way-as-the-critical-issue-we-reported,-it-is-implied-that-the-presale-balance-will-be-distributed-before-the-crowdfund-even-begins.-it-could-be-the-case-that-a-user-buys-tokens-both-in-the-presale-and-in-the-crowdfund,-and-if-the-presale-balance-is-not-delivered-before-the-latter,-the-presale-delivery-would-fail.-furthermore,-since-presale-deliveries-will-be-made-in-batches,-it-would-likely-be-very-difficult-to-debug-the-cause-of-one-batch-failing.", "labels": ["OpenZeppelin"]}, {"title": "Consider enforcing that all presale deliveries happen before the crowdfund starts, or lifting the requirement that an account should have no balance before transferring presale tokens to it.", "body": "Consider enforcing that all presale deliveries happen before the crowdfund starts, or lifting the requirement that an account should have no balance before transferring presale tokens to it.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#consider-enforcing-that-all-presale-deliveries-happen-before-the-crowdfund-starts,-or-lifting-the-requirement-that-an-account-should-have-no-balance-before-transferring-presale-tokens-to-it.", "labels": ["OpenZeppelin"]}, {"title": "Unclear semantics for\u00a0Transfer", "body": "Unclear semantics for\u00a0Transfer", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#unclear-semantics-for\u00a0transfer", "labels": ["OpenZeppelin"]}, {"title": "The ERC20 token standard specifies the Transfer event to log transfers. The specification is informal, and there is not an exact characterization of when the event should be emitted. However, since this event is relied on by applications, it is in the interest of the project to try to respect the semantics that applications expect. This will pay off in a better user experience, and probably lower operational costs.", "body": "The ERC20 token standard specifies the Transfer event to log transfers. The specification is informal, and there is not an exact characterization of when the event should be emitted. However, since this event is relied on by applications, it is in the interest of the project to try to respect the semantics that applications expect. This will pay off in a better user experience, and probably lower operational costs.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-erc20-token-standard-specifies-the-transfer-event-to-log-transfers.-the-specification-is-informal,-and-there-is-not-an-exact-characterization-of-when-the-event-should-be-emitted.-however,-since-this-event-is-relied-on-by-applications,-it-is-in-the-interest-of-the-project-to-try-to-respect-the-semantics-that-applications-expect.-this-will-pay-off-in-a-better-user-experience,-and-probably-lower-operational-costs.", "labels": ["OpenZeppelin"]}, {"title": "releaseVanbexTeamTokens), a", "body": "transfer from the token contract itself is logged. This is conflicting with the expected semantics of the event, because the token contract didnt have those tokens as part of its balance to begin with. In  transferFromCrowdfund, the event is emitted  with the crowdfund as the source, but there was never a  Consider emitting this event with the zero address as the from field, which is the accepted way to log creation of tokens.  Update: Fixed in 759557a and a363180.  Possible erroneous Transfer event in transferFrom  In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same wont happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.  Update: Fixed in 4a5ba4a.  Unchecked return value  The function finalizeCrowdfund is defined to return a boolean value indicating success. However, this return value is ignored when the function is called. Since the return value is currently always true, consider removing it altogether. Otherwise, always check the return value.  Update: The return value was removed in f85fc45.  Duplicate data  The token contract FuelToken has a state variable crowdfundEndsAt which is hardcoded to be the same value as the FuelCrowdfunds endsAt state variable. This duplication of the value is error-prone, as it could easily get out of sync. Consider getting the value directly from the crowdfund, as crowdfund.endsAt().  Semantics of totalAllocatedTokens  It is unclear what the totalAllocatedTokens state variable of FuelToken means. At the moment the crowdfund is finalized, this variable will get out of sync with the amount of tokens actually distributed, because the platform will have all of the remaining supply to sell. Consider removing the variable altogether, or calling allocateTokens when the final remaining tokens are transferred to the platform in finalizeCrowdfund.  Update: The variable was removed in 86abce6.  High coupling between token and crowdfund contracts  The token contract does a lot more than handle balances, transfers, and allowance. It has special code for crowdfund-originated transfers, for the Vanbex team vesting, and for the presale. It has variables and events to track crowdfund and presale state. As a result of all this, the code is very hard to follow and to ensure it is bug-free. At this stage, it would be a high risk to redesign the contracts, so we will not recommend that. However, the team should keep in mind to follow software engineering principles such as separation of concerns, single responsibility, low coupling, etcetera, for any new contracts they write.  Low Severity  Rejecting non-zero transfers is not ERC20 compliant  transfers of 0 values MUST be treated as normal transfers. In  rejected. Consider removing the modifier  Update: Fixed in 2b9e0b3.  Notes & Additional Information  Consider using OpenZeppelins StandardToken implementation to build on top of.  Make sure the owner of FuelCrowdfund is set to a secure address, preferably a multi-signature wallet. This address has the ability of changing the wallet address where the funds are sent.  The price of a token usually means how much ETH is necessary to buy one unit of it. In the contract it is used to mean the amount that can be bought with 1 ETH. This concept is usually referred to as rate. (Update: Renamed to rate in 505439c.)  This documentation comment in NonZero is incomplete.  The fallback function in FuelCrowdfund has the nonZeroValue modifier added. This can be circumvented by a user by calling buyTokens directly. Consider placing the modifier in buyTokens instead. (The transaction would fail nonetheless because transferFromCrowdfund wont accept an amount of zero tokens.) (Update: Fixed in 9f1d6d6.)  The function closeCrowdfund of FuelCrowdfund doesnt itself require that it be called after the crowdfund period ends. It calls finalizeCrowdfund in FuelToken, however, which does fail and revert the whole transaction in that case. This is a strange assignment of responsibilities. It should be the crowdfund contract itself which rejects the transaction before the end of the period. (Update: Fixed in c4c6667.)  The state variable amountOfPublicTokensToAllocate of FuelToken is merely the sum of presaleSupply and icoSupply, which is a constant value. It is not used for anything. Consider removing it as well. (Update: removed in _4215e8c.)  It is undocumented and unclear what the tokens field of the CrowdfundFinalized and PresaleFinalized events should mean. In the implementation the value used is the amount left over from the crowdfund and presale allocations respectively. Consider choosing a better name, such as remainingTokens, and documenting its meaning. (Update: Fixed in df2bf81.)  The empty fallback function is not needed because Solidity will by default reject value transfers. (Update: Fixed in d56da95.)  Constant values can be declared as constant state variables and initialized in the declaration itself (as opposed to in the constructor). Consider doing this for vanbexTeamSupply, platformSupply, presaleSupply, etcetera.  Consider writing token amounts parameterized by the decimals state variable. For this, it can be helpful to define a variable uint256 constant FUEL_UNIT = 10 ** uint256(decimals). Afterwards, you can write, for example, vanbexTeamSupply = 50e6 * FUEL_UNIT. This is clearer and more maintainable.  The variable etherpartyAddress is not used anywhere. (Update: Removed in a8dfd0d.)  Conclusion  One critical severity and two high severity issues were found and explained, along with recommendations on how to fix them. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Fuel Token contract. We have not reviewed the related Etherparty project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#releasevanbexteamtokens),-a", "labels": ["OpenZeppelin"]}, {"title": "transfer from the token contract itself is logged. This is conflicting with the expected semantics of the event, because the token contract didn\u2019t have those tokens as part of its balance to begin with. In", "body": "transfer from the token contract itself is logged. This is conflicting with the expected semantics of the event, because the token contract didn\u2019t have those tokens as part of its balance to begin with. In", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#transfer-from-the-token-contract-itself-is-logged.-this-is-conflicting-with-the-expected-semantics-of-the-event,-because-the-token-contract-didn\u2019t-have-those-tokens-as-part-of-its-balance-to-begin-with.-in", "labels": ["OpenZeppelin"]}, {"title": "transferFromCrowdfund, the event is emitted", "body": "transferFromCrowdfund, the event is emitted", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#transferfromcrowdfund,-the-event-is-emitted", "labels": ["OpenZeppelin"]}, {"title": "with the crowdfund as the source, but there was never a", "body": "with the crowdfund as the source, but there was never a", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#with-the-crowdfund-as-the-source,-but-there-was-never-a", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting this event with the zero address as the from field, which is the accepted way to log creation of tokens.", "body": "Consider emitting this event with the zero address as the from field, which is the accepted way to log creation of tokens.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#consider-emitting-this-event-with-the-zero-address-as-the-from-field,-which-is-the-accepted-way-to-log-creation-of-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 759557a and a363180.", "body": "Update: Fixed in 759557a and a363180.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-fixed-in-759557a-and-a363180.", "labels": ["OpenZeppelin"]}, {"title": "Possible erroneous Transfer event in transferFrom", "body": "Possible erroneous Transfer event in transferFrom", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#possible-erroneous-transfer-event-in-transferfrom", "labels": ["OpenZeppelin"]}, {"title": "In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same won\u2019t happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.", "body": "In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same won\u2019t happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#in-transferfrom-it-is-not-checked-that-the-source-account-has-enough-balance.-this-is-not-severe-because,-in-general,-the-safe-subtraction-will-revert-the-transaction-if-more-than-the-available-balance-wants-to-be-transferred.-however,-in-the-special-case-that-someone-calls-transferfrom-with-the-source-and-destination-as-the-same-account,-the-same-won\u2019t-happen-because-the-balance-is-first-incremented,-and-only-then-decremented.-the-resulting-balance-will-remain-the-same,-but-it-would-be-possible-for-anyone-to-emit-a-transfer-event-with-themselves-as-destination-and-an-arbitrary-amount.-this-might-be-misinterpreted-for-a-real-transfer-by-an-application-or-individual.-consider-swapping-the-lines-so-that-the-balance-is-first-decremented-and-then-incremented,-in-order-for-such-a-transaction-to-fail.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 4a5ba4a.", "body": "Update: Fixed in 4a5ba4a.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-fixed-in-4a5ba4a.", "labels": ["OpenZeppelin"]}, {"title": "Unchecked return\u00a0value", "body": "Unchecked return\u00a0value", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#unchecked-return\u00a0value", "labels": ["OpenZeppelin"]}, {"title": "The function finalizeCrowdfund is defined to return a boolean value indicating success. However, this return value is ignored when the function is called. Since the return value is currently always true, consider removing it altogether. Otherwise, always check the return value.", "body": "The function finalizeCrowdfund is defined to return a boolean value indicating success. However, this return value is ignored when the function is called. Since the return value is currently always true, consider removing it altogether. Otherwise, always check the return value.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-function-finalizecrowdfund-is-defined-to-return-a-boolean-value-indicating-success.-however,-this-return-value-is-ignored-when-the-function-is-called.-since-the-return-value-is-currently-always-true,-consider-removing-it-altogether.-otherwise,-always-check-the-return-value.", "labels": ["OpenZeppelin"]}, {"title": "Update: The return value was removed in f85fc45.", "body": "Update: The return value was removed in f85fc45.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-the-return-value-was-removed-in-f85fc45.", "labels": ["OpenZeppelin"]}, {"title": "Duplicate data", "body": "Duplicate data", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#duplicate-data", "labels": ["OpenZeppelin"]}, {"title": "The token contract FuelToken has a state variable crowdfundEndsAt which is hardcoded to be the same value as the FuelCrowdfund\u2019s endsAt state variable. This duplication of the value is error-prone, as it could easily get out of sync. Consider getting the value directly from the crowdfund, as crowdfund.endsAt().", "body": "The token contract FuelToken has a state variable crowdfundEndsAt which is hardcoded to be the same value as the FuelCrowdfund\u2019s endsAt state variable. This duplication of the value is error-prone, as it could easily get out of sync. Consider getting the value directly from the crowdfund, as crowdfund.endsAt().", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-token-contract-fueltoken-has-a-state-variable-crowdfundendsat-which-is-hardcoded-to-be-the-same-value-as-the-fuelcrowdfund\u2019s-endsat-state-variable.-this-duplication-of-the-value-is-error-prone,-as-it-could-easily-get-out-of-sync.-consider-getting-the-value-directly-from-the-crowdfund,-as-crowdfund.endsat().", "labels": ["OpenZeppelin"]}, {"title": "Semantics of totalAllocatedTokens", "body": "Semantics of totalAllocatedTokens", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#semantics-of-totalallocatedtokens", "labels": ["OpenZeppelin"]}, {"title": "It is unclear what the totalAllocatedTokens state variable of FuelToken means. At the moment the crowdfund is finalized, this variable will get out of sync with the amount of tokens actually distributed, because the platform will have all of the remaining supply to sell. Consider removing the variable altogether, or calling allocateTokens when the final remaining tokens are transferred to the platform in finalizeCrowdfund.", "body": "It is unclear what the totalAllocatedTokens state variable of FuelToken means. At the moment the crowdfund is finalized, this variable will get out of sync with the amount of tokens actually distributed, because the platform will have all of the remaining supply to sell. Consider removing the variable altogether, or calling allocateTokens when the final remaining tokens are transferred to the platform in finalizeCrowdfund.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#it-is-unclear-what-the-totalallocatedtokens-state-variable-of-fueltoken-means.-at-the-moment-the-crowdfund-is-finalized,-this-variable-will-get-out-of-sync-with-the-amount-of-tokens-actually-distributed,-because-the-platform-will-have-all-of-the-remaining-supply-to-sell.-consider-removing-the-variable-altogether,-or-calling-allocatetokens-when-the-final-remaining-tokens-are-transferred-to-the-platform-in-finalizecrowdfund.", "labels": ["OpenZeppelin"]}, {"title": "Update: The variable was removed in 86abce6.", "body": "Update: The variable was removed in 86abce6.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-the-variable-was-removed-in-86abce6.", "labels": ["OpenZeppelin"]}, {"title": "High coupling between token and crowdfund contracts", "body": "High coupling between token and crowdfund contracts", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#high-coupling-between-token-and-crowdfund-contracts", "labels": ["OpenZeppelin"]}, {"title": "The token contract does a lot more than handle balances, transfers, and allowance. It has special code for crowdfund-originated \u201ctransfers\u201d, for the Vanbex team vesting, and for the presale. It has variables and events to track crowdfund and presale state. As a result of all this, the code is very hard to follow and to ensure it is bug-free. At this stage, it would be a high risk to redesign the contracts, so we will not recommend that. However, the team should keep in mind to follow software engineering principles such as separation of concerns, single responsibility, low coupling, etcetera, for any new contracts they write.", "body": "The token contract does a lot more than handle balances, transfers, and allowance. It has special code for crowdfund-originated \u201ctransfers\u201d, for the Vanbex team vesting, and for the presale. It has variables and events to track crowdfund and presale state. As a result of all this, the code is very hard to follow and to ensure it is bug-free. At this stage, it would be a high risk to redesign the contracts, so we will not recommend that. However, the team should keep in mind to follow software engineering principles such as separation of concerns, single responsibility, low coupling, etcetera, for any new contracts they write.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-token-contract-does-a-lot-more-than-handle-balances,-transfers,-and-allowance.-it-has-special-code-for-crowdfund-originated-\u201ctransfers\u201d,-for-the-vanbex-team-vesting,-and-for-the-presale.-it-has-variables-and-events-to-track-crowdfund-and-presale-state.-as-a-result-of-all-this,-the-code-is-very-hard-to-follow-and-to-ensure-it-is-bug-free.-at-this-stage,-it-would-be-a-high-risk-to-redesign-the-contracts,-so-we-will-not-recommend-that.-however,-the-team-should-keep-in-mind-to-follow-software-engineering-principles-such-as-separation-of-concerns,-single-responsibility,-low-coupling,-etcetera,-for-any-new-contracts-they-write.", "labels": ["OpenZeppelin"]}, {"title": "Rejecting non-zero transfers is not ERC20 compliant", "body": "Rejecting non-zero transfers is not ERC20 compliant", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#rejecting-non-zero-transfers-is-not-erc20-compliant", "labels": ["OpenZeppelin"]}, {"title": "\u201ctransfers of 0 values MUST be treated as normal transfers\u201d. In", "body": "\u201ctransfers of 0 values MUST be treated as normal transfers\u201d. In", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#\u201ctransfers-of-0-values-must-be-treated-as-normal-transfers\u201d.-in", "labels": ["OpenZeppelin"]}, {"title": "rejected. Consider removing the modifier", "body": "rejected. Consider removing the modifier", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#rejected.-consider-removing-the-modifier", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 2b9e0b3.", "body": "Update: Fixed in 2b9e0b3.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#update:-fixed-in-2b9e0b3.", "labels": ["OpenZeppelin"]}, {"title": "Consider using OpenZeppelin\u2019s StandardToken implementation to build on top of.", "body": "Consider using OpenZeppelin\u2019s StandardToken implementation to build on top of.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#consider-using-openzeppelin\u2019s-standardtoken-implementation-to-build-on-top-of.", "labels": ["OpenZeppelin"]}, {"title": "Make sure the owner of FuelCrowdfund is set to a secure address, preferably a multi-signature wallet. This address has the ability of changing the wallet address where the funds are sent.", "body": "Make sure the owner of FuelCrowdfund is set to a secure address, preferably a multi-signature wallet. This address has the ability of changing the wallet address where the funds are sent.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#make-sure-the-owner-of-fuelcrowdfund-is-set-to-a-secure-address,-preferably-a-multi-signature-wallet.-this-address-has-the-ability-of-changing-the-wallet-address-where-the-funds-are-sent.", "labels": ["OpenZeppelin"]}, {"title": "The \u201cprice\u201d of a token usually means how much ETH is necessary to buy one unit of it. In the contract it is used to mean the amount that can be bought with 1 ETH. This concept is usually referred to as \u201crate\u201d. (Update: Renamed to \u201crate\u201d in 505439c.)", "body": "The \u201cprice\u201d of a token usually means how much ETH is necessary to buy one unit of it. In the contract it is used to mean the amount that can be bought with 1 ETH. This concept is usually referred to as \u201crate\u201d. (Update: Renamed to \u201crate\u201d in 505439c.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-\u201cprice\u201d-of-a-token-usually-means-how-much-eth-is-necessary-to-buy-one-unit-of-it.-in-the-contract-it-is-used-to-mean-the-amount-that-can-be-bought-with-1-eth.-this-concept-is-usually-referred-to-as-\u201crate\u201d.-(update:-renamed-to-\u201crate\u201d-in-505439c.)", "labels": ["OpenZeppelin"]}, {"title": "This documentation comment in NonZero is incomplete.", "body": "This documentation comment in NonZero is incomplete.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#this-documentation-comment-in-nonzero-is-incomplete.", "labels": ["OpenZeppelin"]}, {"title": "The fallback function in FuelCrowdfund has the nonZeroValue modifier added. This can be circumvented by a user by calling buyTokens directly. Consider placing the modifier in buyTokens instead. (The transaction would fail nonetheless because transferFromCrowdfund won\u2019t accept an amount of zero tokens.) (Update: Fixed in 9f1d6d6.)", "body": "The fallback function in FuelCrowdfund has the nonZeroValue modifier added. This can be circumvented by a user by calling buyTokens directly. Consider placing the modifier in buyTokens instead. (The transaction would fail nonetheless because transferFromCrowdfund won\u2019t accept an amount of zero tokens.) (Update: Fixed in 9f1d6d6.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-fallback-function-in-fuelcrowdfund-has-the-nonzerovalue-modifier-added.-this-can-be-circumvented-by-a-user-by-calling-buytokens-directly.-consider-placing-the-modifier-in-buytokens-instead.-(the-transaction-would-fail-nonetheless-because-transferfromcrowdfund-won\u2019t-accept-an-amount-of-zero-tokens.)-(update:-fixed-in-9f1d6d6.)", "labels": ["OpenZeppelin"]}, {"title": "The function closeCrowdfund of FuelCrowdfund doesn\u2019t itself require that it be called after the crowdfund period ends. It calls finalizeCrowdfund in FuelToken, however, which does fail and revert the whole transaction in that case. This is a strange assignment of responsibilities. It should be the crowdfund contract itself which rejects the transaction before the end of the period. (Update: Fixed in c4c6667.)", "body": "The function closeCrowdfund of FuelCrowdfund doesn\u2019t itself require that it be called after the crowdfund period ends. It calls finalizeCrowdfund in FuelToken, however, which does fail and revert the whole transaction in that case. This is a strange assignment of responsibilities. It should be the crowdfund contract itself which rejects the transaction before the end of the period. (Update: Fixed in c4c6667.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-function-closecrowdfund-of-fuelcrowdfund-doesn\u2019t-itself-require-that-it-be-called-after-the-crowdfund-period-ends.-it-calls-finalizecrowdfund-in-fueltoken,-however,-which-does-fail-and-revert-the-whole-transaction-in-that-case.-this-is-a-strange-assignment-of-responsibilities.-it-should-be-the-crowdfund-contract-itself-which-rejects-the-transaction-before-the-end-of-the-period.-(update:-fixed-in-c4c6667.)", "labels": ["OpenZeppelin"]}, {"title": "The state variable amountOfPublicTokensToAllocate of FuelToken is merely the sum of presaleSupply and icoSupply, which is a constant value. It is not used for anything. Consider removing it as well. (Update: removed in _4215e8c.)", "body": "The state variable amountOfPublicTokensToAllocate of FuelToken is merely the sum of presaleSupply and icoSupply, which is a constant value. It is not used for anything. Consider removing it as well. (Update: removed in _4215e8c.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-state-variable-amountofpublictokenstoallocate-of-fueltoken-is-merely-the-sum-of-presalesupply-and-icosupply,-which-is-a-constant-value.-it-is-not-used-for-anything.-consider-removing-it-as-well.-(update:-removed-in-_4215e8c.)", "labels": ["OpenZeppelin"]}, {"title": "It is undocumented and unclear what the tokens field of the CrowdfundFinalized and PresaleFinalized events should mean. In the implementation the value used is the amount left over from the crowdfund and presale allocations respectively. Consider choosing a better name, such as remainingTokens, and documenting its meaning. (Update: Fixed in df2bf81.)", "body": "It is undocumented and unclear what the tokens field of the CrowdfundFinalized and PresaleFinalized events should mean. In the implementation the value used is the amount left over from the crowdfund and presale allocations respectively. Consider choosing a better name, such as remainingTokens, and documenting its meaning. (Update: Fixed in df2bf81.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#it-is-undocumented-and-unclear-what-the-tokens-field-of-the-crowdfundfinalized-and-presalefinalized-events-should-mean.-in-the-implementation-the-value-used-is-the-amount-left-over-from-the-crowdfund-and-presale-allocations-respectively.-consider-choosing-a-better-name,-such-as-remainingtokens,-and-documenting-its-meaning.-(update:-fixed-in-df2bf81.)", "labels": ["OpenZeppelin"]}, {"title": "The empty fallback function is not needed because Solidity will by default reject value transfers. (Update: Fixed in d56da95.)", "body": "The empty fallback function is not needed because Solidity will by default reject value transfers. (Update: Fixed in d56da95.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-empty-fallback-function-is-not-needed-because-solidity-will-by-default-reject-value-transfers.-(update:-fixed-in-d56da95.)", "labels": ["OpenZeppelin"]}, {"title": "Constant values can be declared as constant state variables and initialized in the declaration itself (as opposed to in the constructor). Consider doing this for vanbexTeamSupply, platformSupply, presaleSupply, etcetera.", "body": "Constant values can be declared as constant state variables and initialized in the declaration itself (as opposed to in the constructor). Consider doing this for vanbexTeamSupply, platformSupply, presaleSupply, etcetera.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#constant-values-can-be-declared-as-constant-state-variables-and-initialized-in-the-declaration-itself-(as-opposed-to-in-the-constructor).-consider-doing-this-for-vanbexteamsupply,-platformsupply,-presalesupply,-etcetera.", "labels": ["OpenZeppelin"]}, {"title": "Consider writing token amounts parameterized by the decimals state variable. For this, it can be helpful to define a variable uint256 constant FUEL_UNIT = 10 ** uint256(decimals). Afterwards, you can write, for example, vanbexTeamSupply = 50e6 * FUEL_UNIT. This is clearer and more maintainable.", "body": "Consider writing token amounts parameterized by the decimals state variable. For this, it can be helpful to define a variable uint256 constant FUEL_UNIT = 10 ** uint256(decimals). Afterwards, you can write, for example, vanbexTeamSupply = 50e6 * FUEL_UNIT. This is clearer and more maintainable.", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#consider-writing-token-amounts-parameterized-by-the-decimals-state-variable.-for-this,-it-can-be-helpful-to-define-a-variable-uint256-constant-fuel_unit-=-10-**-uint256(decimals).-afterwards,-you-can-write,-for-example,-vanbexteamsupply-=-50e6-*-fuel_unit.-this-is-clearer-and-more-maintainable.", "labels": ["OpenZeppelin"]}, {"title": "The variable etherpartyAddress is not used anywhere. (Update: Removed in a8dfd0d.)", "body": "The variable etherpartyAddress is not used anywhere. (Update: Removed in a8dfd0d.)", "html_url": "https://blog.openzeppelin.com/fuel-token-audit-30cc02f257f5#the-variable-etherpartyaddress-is-not-used-anywhere.-(update:-removed-in-a8dfd0d.)", "labels": ["OpenZeppelin"]}, {"title": "Misuse of FinalizableCrowdsale", "body": "Misuse of FinalizableCrowdsale", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#misuse-of-finalizablecrowdsale", "labels": ["OpenZeppelin"]}, {"title": "(This was written for a previous version that was audited, and it was later fixed.)", "body": "(This was written for a previous version that was audited, and it was later fixed.)", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#(this-was-written-for-a-previous-version-that-was-audited,-and-it-was-later-fixed.)", "labels": ["OpenZeppelin"]}, {"title": "comments, to use", "body": "comments, to use", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#comments,-to-use", "labels": ["OpenZeppelin"]}, {"title": "redefined. Although this isn\u2019t causing any problems in the current state of the code, the misuse of the library hinders maintainability and may cause severe problems in future revisions. Remove this function and move the extra minting to a", "body": "redefined. Although this isn\u2019t causing any problems in the current state of the code, the misuse of the library hinders maintainability and may cause severe problems in future revisions. Remove this function and move the extra minting to a", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#redefined.-although-this-isn\u2019t-causing-any-problems-in-the-current-state-of-the-code,-the-misuse-of-the-library-hinders-maintainability-and-may-cause-severe-problems-in-future-revisions.-remove-this-function-and-move-the-extra-minting-to-a", "labels": ["OpenZeppelin"]}, {"title": "Notes", "body": "Notes", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#notes", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that it is the transaction sender who will be checked against the whitelist, and not the beneficiary of a purchase. This means that a whitelisted address may buy tokens for a non-whitelisted address. Make sure this is the desired feature.", "body": "Keep in mind that it is the transaction sender who will be checked against the whitelist, and not the beneficiary of a purchase. This means that a whitelisted address may buy tokens for a non-whitelisted address. Make sure this is the desired feature.", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#keep-in-mind-that-it-is-the-transaction-sender-who-will-be-checked-against-the-whitelist,-and-not-the-beneficiary-of-a-purchase.-this-means-that-a-whitelisted-address-may-buy-tokens-for-a-non-whitelisted-address.-make-sure-this-is-the-desired-feature.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding events to log when an address is added or removed from the whitelist.", "body": "Consider adding events to log when an address is added or removed from the whitelist.", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#consider-adding-events-to-log-when-an-address-is-added-or-removed-from-the-whitelist.", "labels": ["OpenZeppelin"]}, {"title": "(This was written for a previous version that was audited.) What is named \u201cminimum cap\u201d (minCap) is not really a cap, because the word means an upper bound. In OpenZeppelin we use the term \u201cgoal\u201d to refer to this concept.", "body": "(This was written for a previous version that was audited.) What is named \u201cminimum cap\u201d (minCap) is not really a cap, because the word means an upper bound. In OpenZeppelin we use the term \u201cgoal\u201d to refer to this concept.", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#(this-was-written-for-a-previous-version-that-was-audited.)-what-is-named-\u201cminimum-cap\u201d-(mincap)-is-not-really-a-cap,-because-the-word-means-an-upper-bound.-in-openzeppelin-we-use-the-term-\u201cgoal\u201d-to-refer-to-this-concept.", "labels": ["OpenZeppelin"]}, {"title": "RenderToken is an instance of MintableToken, which has a public variable mintingFinished initially set to false. Since this is a public variable that will be shown in interfaces (such as Etherscan\u2019s) it might cause some confusion if it remains false after the crowdsale ends. Consider calling token.finishMinting() at finalization, to set the variable to true and avoid this potential confusion.", "body": "RenderToken is an instance of MintableToken, which has a public variable mintingFinished initially set to false. Since this is a public variable that will be shown in interfaces (such as Etherscan\u2019s) it might cause some confusion if it remains false after the crowdsale ends. Consider calling token.finishMinting() at finalization, to set the variable to true and avoid this potential confusion.", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#rendertoken-is-an-instance-of-mintabletoken,-which-has-a-public-variable-mintingfinished-initially-set-to-false.-since-this-is-a-public-variable-that-will-be-shown-in-interfaces-(such-as-etherscan\u2019s)-it-might-cause-some-confusion-if-it-remains-false-after-the-crowdsale-ends.-consider-calling-token.finishminting()-at-finalization,-to-set-the-variable-to-true-and-avoid-this-potential-confusion.", "labels": ["OpenZeppelin"]}, {"title": "The final token allocation will be: 25% of supply will have been on sale in the crowdsale, 65% is assigned to the foundation, and 10% will be held by the founders. Tokens not sold in the crowdsale will be sent to the foundation.", "body": "The final token allocation will be: 25% of supply will have been on sale in the crowdsale, 65% is assigned to the foundation, and 10% will be held by the founders. Tokens not sold in the crowdsale will be sent to the foundation.", "html_url": "https://blog.openzeppelin.com/render-token-audit-2a078ba6d759#the-final-token-allocation-will-be:-25%-of-supply-will-have-been-on-sale-in-the-crowdsale,-65%-is-assigned-to-the-foundation,-and-10%-will-be-held-by-the-founders.-tokens-not-sold-in-the-crowdsale-will-be-sent-to-the-foundation.", "labels": ["OpenZeppelin"]}, {"title": "Revoking a vesting grant takes vested tokens\u00a0away", "body": "Revoking a vesting grant takes vested tokens\u00a0away", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#revoking-a-vesting-grant-takes-vested-tokens\u00a0away", "labels": ["OpenZeppelin"]}, {"title": "The revoke function in VestingTrustee allows the owner to revoke an address\u2019s vesting grant, in the case that it is revocable. This consists of erasing the grant and transferring the remaining tokens to the owner. The function considers \u201cremaining tokens\u201d to be all those that haven\u2019t been unlocked and transferred yet. However, it is likely that remaining tokens should be considered to be only those which have not yet vested, regardless of whether they\u2019ve been transferred or not. Consider changing revoke to first transfer vested tokens to the grantee, and only the remaining as a refund to the owner.", "body": "The revoke function in VestingTrustee allows the owner to revoke an address\u2019s vesting grant, in the case that it is revocable. This consists of erasing the grant and transferring the remaining tokens to the owner. The function considers \u201cremaining tokens\u201d to be all those that haven\u2019t been unlocked and transferred yet. However, it is likely that remaining tokens should be considered to be only those which have not yet vested, regardless of whether they\u2019ve been transferred or not. Consider changing revoke to first transfer vested tokens to the grantee, and only the remaining as a refund to the owner.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-revoke-function-in-vestingtrustee-allows-the-owner-to-revoke-an-address\u2019s-vesting-grant,-in-the-case-that-it-is-revocable.-this-consists-of-erasing-the-grant-and-transferring-the-remaining-tokens-to-the-owner.-the-function-considers-\u201cremaining-tokens\u201d-to-be-all-those-that-haven\u2019t-been-unlocked-and-transferred-yet.-however,-it-is-likely-that-remaining-tokens-should-be-considered-to-be-only-those-which-have-not-yet-vested,-regardless-of-whether-they\u2019ve-been-transferred-or-not.-consider-changing-revoke-to-first-transfer-vested-tokens-to-the-grantee,-and-only-the-remaining-as-a-refund-to-the-owner.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team assured us that, although they have not implemented our suggested change, the risk is mitigated by the fact that all vesting grants will be made irrevocable as soon as possible after the sale and that revocation will be only possible by getting access to the multisig owner of the contract. There is no risk for an irrevocable grant, so there would be no problem for investors after made irrevocable.", "body": "Update: The team assured us that, although they have not implemented our suggested change, the risk is mitigated by the fact that all vesting grants will be made irrevocable as soon as possible after the sale and that revocation will be only possible by getting access to the multisig owner of the contract. There is no risk for an irrevocable grant, so there would be no problem for investors after made irrevocable.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-team-assured-us-that,-although-they-have-not-implemented-our-suggested-change,-the-risk-is-mitigated-by-the-fact-that-all-vesting-grants-will-be-made-irrevocable-as-soon-as-possible-after-the-sale-and-that-revocation-will-be-only-possible-by-getting-access-to-the-multisig-owner-of-the-contract.-there-is-no-risk-for-an-irrevocable-grant,-so-there-would-be-no-problem-for-investors-after-made-irrevocable.", "labels": ["OpenZeppelin"]}, {"title": "Unexpected value for MAX_TOKENS_SOLD", "body": "Unexpected value for MAX_TOKENS_SOLD", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#unexpected-value-for-max_tokens_sold", "labels": ["OpenZeppelin"]}, {"title": "The state variable MAX_TOKENS_SOLD in KinTokenSale represents the maximum number of tokens to be sold during the crowdsale, which is defined to be 1 trillion according to the whitepaper (chapter 6, Kin token issuance). However, the value in the contract is 512192121951 (slightly above half a trillion). Update this constant to reflect the value indicated in the whitepaper.", "body": "The state variable MAX_TOKENS_SOLD in KinTokenSale represents the maximum number of tokens to be sold during the crowdsale, which is defined to be 1 trillion according to the whitepaper (chapter 6, Kin token issuance). However, the value in the contract is 512192121951 (slightly above half a trillion). Update this constant to reflect the value indicated in the whitepaper.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-state-variable-max_tokens_sold-in-kintokensale-represents-the-maximum-number-of-tokens-to-be-sold-during-the-crowdsale,-which-is-defined-to-be-1-trillion-according-to-the-whitepaper-(chapter-6,-kin-token-issuance).-however,-the-value-in-the-contract-is-512192121951-(slightly-above-half-a-trillion).-update-this-constant-to-reflect-the-value-indicated-in-the-whitepaper.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team pointed out that this number represents the amount that will be offered during the sale, while the remaining half of the 1 trillion offered to the public has been sold in a presale._", "body": "Update: The team pointed out that this number represents the amount that will be offered during the sale, while the remaining half of the 1 trillion offered to the public has been sold in a presale._", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-team-pointed-out-that-this-number-represents-the-amount-that-will-be-offered-during-the-sale,-while-the-remaining-half-of-the-1-trillion-offered-to-the-public-has-been-sold-in-a-presale._", "labels": ["OpenZeppelin"]}, {"title": "Token ownership can be transferred while\u00a0minting", "body": "Token ownership can be transferred while\u00a0minting", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#token-ownership-can-be-transferred-while\u00a0minting", "labels": ["OpenZeppelin"]}, {"title": "The KinTokenSale contract allows the owner to transfer the token ownership to a different address at any moment, using the function requestKinTokenOwnershipTransfer. Since the token is in a minting state during the sale (i.e. new tokens can be created by the owner), this harms the trustlessness of the contract, as it would allow the owner to mint themselves an arbitrary number of tokens, against what was established in paper.", "body": "The KinTokenSale contract allows the owner to transfer the token ownership to a different address at any moment, using the function requestKinTokenOwnershipTransfer. Since the token is in a minting state during the sale (i.e. new tokens can be created by the owner), this harms the trustlessness of the contract, as it would allow the owner to mint themselves an arbitrary number of tokens, against what was established in paper.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-kintokensale-contract-allows-the-owner-to-transfer-the-token-ownership-to-a-different-address-at-any-moment,-using-the-function-requestkintokenownershiptransfer.-since-the-token-is-in-a-minting-state-during-the-sale-(i.e.-new-tokens-can-be-created-by-the-owner),-this-harms-the-trustlessness-of-the-contract,-as-it-would-allow-the-owner-to-mint-themselves-an-arbitrary-number-of-tokens,-against-what-was-established-in-paper.", "labels": ["OpenZeppelin"]}, {"title": "A comment next to the function correctly states that transferring token ownership would prevent the token sale to continue operating. If such a thing happened, the function acceptKinTokenOwnership would allow the sale to become the token owner again, and continue operating. However, in the meantime, an owner could end the minting phase of the token manually, violating the explicit requirement that grants be distributed before minting is ended, and that this be done after the sale period.", "body": "A comment next to the function correctly states that transferring token ownership would prevent the token sale to continue operating. If such a thing happened, the function acceptKinTokenOwnership would allow the sale to become the token owner again, and continue operating. However, in the meantime, an owner could end the minting phase of the token manually, violating the explicit requirement that grants be distributed before minting is ended, and that this be done after the sale period.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#a-comment-next-to-the-function-correctly-states-that-transferring-token-ownership-would-prevent-the-token-sale-to-continue-operating.-if-such-a-thing-happened,-the-function-acceptkintokenownership-would-allow-the-sale-to-become-the-token-owner-again,-and-continue-operating.-however,-in-the-meantime,-an-owner-could-end-the-minting-phase-of-the-token-manually,-violating-the-explicit-requirement-that-grants-be-distributed-before-minting-is-ended,-and-that-this-be-done-after-the-sale-period.", "labels": ["OpenZeppelin"]}, {"title": "We recommend to remove the functions requestKinTokenOwnershipTransfer and acceptKinTokenOwnership, as they are not needed and compromise the correctness and security of the sale.", "body": "We recommend to remove the functions requestKinTokenOwnershipTransfer and acceptKinTokenOwnership, as they are not needed and compromise the correctness and security of the sale.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#we-recommend-to-remove-the-functions-requestkintokenownershiptransfer-and-acceptkintokenownership,-as-they-are-not-needed-and-compromise-the-correctness-and-security-of-the-sale.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team replied that the owner will be a multisig wallet, which mitigates the risk. Due to time constraints, the functions will be kept as the only method to pause the sale in an emergency.", "body": "Update: The team replied that the owner will be a multisig wallet, which mitigates the risk. Due to time constraints, the functions will be kept as the only method to pause the sale in an emergency.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-team-replied-that-the-owner-will-be-a-multisig-wallet,-which-mitigates-the-risk.-due-to-time-constraints,-the-functions-will-be-kept-as-the-only-method-to-pause-the-sale-in-an-emergency.", "labels": ["OpenZeppelin"]}, {"title": "All vesting grants are revocable", "body": "All vesting grants are revocable", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#all-vesting-grants-are-revocable", "labels": ["OpenZeppelin"]}, {"title": "It should be noted that all vesting grants are revocable (indicated by the last parameter, true), including the large grant given to Kik. If a grant is revoked, all of its vesting tokens are immediately transferred to the owner of VestingTrustee. Make sure that this is in fact desired.", "body": "It should be noted that all vesting grants are revocable (indicated by the last parameter, true), including the large grant given to Kik. If a grant is revoked, all of its vesting tokens are immediately transferred to the owner of VestingTrustee. Make sure that this is in fact desired.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#it-should-be-noted-that-all-vesting-grants-are-revocable-(indicated-by-the-last-parameter,-true),-including-the-large-grant-given-to-kik.-if-a-grant-is-revoked,-all-of-its-vesting-tokens-are-immediately-transferred-to-the-owner-of-vestingtrustee.-make-sure-that-this-is-in-fact-desired.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team has clarified that this is a temporary measure so that possible errors can be fixed afterwards, and that all grants will be manually made irrevocable as soon as possible.", "body": "Update: The team has clarified that this is a temporary measure so that possible errors can be fixed afterwards, and that all grants will be manually made irrevocable as soon as possible.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-team-has-clarified-that-this-is-a-temporary-measure-so-that-possible-errors-can-be-fixed-afterwards,-and-that-all-grants-will-be-manually-made-irrevocable-as-soon-as-possible.", "labels": ["OpenZeppelin"]}, {"title": "Participation caps can be altered mid-crowdsale", "body": "Participation caps can be altered mid-crowdsale", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#participation-caps-can-be-altered-mid-crowdsale", "labels": ["OpenZeppelin"]}, {"title": "The functions setTier1Participants, setTier2Participants, and setHardParticipationCap allow the owner of the token sale contract to modify the cap for any participant at any point in time, even after the crowdsale has started. To improve the public trust on the sale mechanics, it is recommended that once the sale starts, all caps are frozen and cannot be modified. Consider adding an onlyBeforeSale modifier to these functions.", "body": "The functions setTier1Participants, setTier2Participants, and setHardParticipationCap allow the owner of the token sale contract to modify the cap for any participant at any point in time, even after the crowdsale has started. To improve the public trust on the sale mechanics, it is recommended that once the sale starts, all caps are frozen and cannot be modified. Consider adding an onlyBeforeSale modifier to these functions.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-functions-settier1participants,-settier2participants,-and-sethardparticipationcap-allow-the-owner-of-the-token-sale-contract-to-modify-the-cap-for-any-participant-at-any-point-in-time,-even-after-the-crowdsale-has-started.-to-improve-the-public-trust-on-the-sale-mechanics,-it-is-recommended-that-once-the-sale-starts,-all-caps-are-frozen-and-cannot-be-modified.-consider-adding-an-onlybeforesale-modifier-to-these-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: The team explained that this is intentional so that potential errors in the KYC process can be corrected by changing a participant\u2019s tier at any moment.", "body": "Update: The team explained that this is intentional so that potential errors in the KYC process can be corrected by changing a participant\u2019s tier at any moment.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-team-explained-that-this-is-intentional-so-that-potential-errors-in-the-kyc-process-can-be-corrected-by-changing-a-participant\u2019s-tier-at-any-moment.", "labels": ["OpenZeppelin"]}, {"title": "Possible to transfer more balance than necessary to VestingTrustee", "body": "Possible to transfer more balance than necessary to VestingTrustee", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#possible-to-transfer-more-balance-than-necessary-to-vestingtrustee", "labels": ["OpenZeppelin"]}, {"title": "It should be noted that it is possible to transfer more token balance than necessary to VestingTrustee. In that case, the only way to recover the surplus is to create a new grant that allows to immediately unlock its full amount. Although this is not a problem in the context of the trustee managed by the token sale contract, it could be inconvenient if VestingTrustee were to be used by itself.", "body": "It should be noted that it is possible to transfer more token balance than necessary to VestingTrustee. In that case, the only way to recover the surplus is to create a new grant that allows to immediately unlock its full amount. Although this is not a problem in the context of the trustee managed by the token sale contract, it could be inconvenient if VestingTrustee were to be used by itself.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#it-should-be-noted-that-it-is-possible-to-transfer-more-token-balance-than-necessary-to-vestingtrustee.-in-that-case,-the-only-way-to-recover-the-surplus-is-to-create-a-new-grant-that-allows-to-immediately-unlock-its-full-amount.-although-this-is-not-a-problem-in-the-context-of-the-trustee-managed-by-the-token-sale-contract,-it-could-be-inconvenient-if-vestingtrustee-were-to-be-used-by-itself.", "labels": ["OpenZeppelin"]}, {"title": "Pending state variables should be replaced by constructor parameters", "body": "Pending state variables should be replaced by constructor parameters", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#pending-state-variables-should-be-replaced-by-constructor-parameters", "labels": ["OpenZeppelin"]}, {"title": "The state variables WEI_PER_USD, KIN_FOUNDATION_ADDRESS, and KIK_ADDRESS are meant to be replaced before deployment by the updated values (they are marked \u201cTODO\u201d). This is error prone, as one could forget to update them. Consider adding these variables as constructor parameters to enforce that they be set at construction.", "body": "The state variables WEI_PER_USD, KIN_FOUNDATION_ADDRESS, and KIK_ADDRESS are meant to be replaced before deployment by the updated values (they are marked \u201cTODO\u201d). This is error prone, as one could forget to update them. Consider adding these variables as constructor parameters to enforce that they be set at construction.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-state-variables-wei_per_usd,-kin_foundation_address,-and-kik_address-are-meant-to-be-replaced-before-deployment-by-the-updated-values-(they-are-marked-\u201ctodo\u201d).-this-is-error-prone,-as-one-could-forget-to-update-them.-consider-adding-these-variables-as-constructor-parameters-to-enforce-that-they-be-set-at-construction.", "labels": ["OpenZeppelin"]}, {"title": "Update: The suggestion was accepted and it will be implemented soon.", "body": "Update: The suggestion was accepted and it will be implemented soon.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-the-suggestion-was-accepted-and-it-will-be-implemented-soon.", "labels": ["OpenZeppelin"]}, {"title": "Magic constants", "body": "Magic constants", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#magic-constants", "labels": ["OpenZeppelin"]}, {"title": "Consider rewriting the operations involving the magic constant 100000000000 (0.1 trillion) in initTokenGrants of KinTokenSale. Instead of calculating 60% of 10 trillions as 60 * 100000000000, make use of the constant MAX_TOKENS (10 trillions) in the operation, in order to improve clarity and maintainability. The same applies to the calculation of 30% in the same function .", "body": "Consider rewriting the operations involving the magic constant 100000000000 (0.1 trillion) in initTokenGrants of KinTokenSale. Instead of calculating 60% of 10 trillions as 60 * 100000000000, make use of the constant MAX_TOKENS (10 trillions) in the operation, in order to improve clarity and maintainability. The same applies to the calculation of 30% in the same function .", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#consider-rewriting-the-operations-involving-the-magic-constant-100000000000-(0.1-trillion)-in-inittokengrants-of-kintokensale.-instead-of-calculating-60%-of-10-trillions-as-60-*-100000000000,-make-use-of-the-constant-max_tokens-(10-trillions)-in-the-operation,-in-order-to-improve-clarity-and-maintainability.-the-same-applies-to-the-calculation-of-30%-in-the-same-function-.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit._", "body": "Notes & Additional Information  Congratulations on writing such a thorough test suite! There are 620 tests in total, with most of them covering the integration of all contracts into the token sale contract.  The documentation of grant in VestingTrustee does not state that its user should first do a transfer of tokens to the contract. Consider making this explicit in the documentation. (Update: Fixed here.)  There is one use of var in the codebase, which infers the variable type from the right hand of the assignment. We recommend avoiding this feature because in some cases it might infer a smaller integer type than the developer might think. It is best to be explicit regarding types; in this case consider replacing it for uint256. (Update: Fixed here.)  The name of the constant TOKEN_DECIMALS is misleading. While the decimals constant in the KinToken contract is set to the number of decimal positions (18), the constant TOKEN_DECIMALS is set to 10**18, i.e. one unit of the token. Consider either renaming the constant, or changing its value to 18 and updating its usage across the contract. (Update: Fixed here.)  The comment in line 47 of KinTokenSale, regarding state variables startTime and endTime, mentions blocks but it should say timestamps. (Update: Fixed here.)  The documentation of unlockVestedTokens indicates it has a return value, but it doesnt. Remove the comment to avoid potential confusion. (Update: Fixed here.)  Consider defining a helper function saleEnded to avoid the duplication in onlyDuringSale and onlyAfterSale. (Update: Fixed here.)  The variable tokensVested refers to tokens that have not yet vested. Consider renaming the variable to tokensVesting. (Update: Fixed here.)  endMinting fails silently when minting has already ended. Consider reverting the transaction instead.  There is a typo in Ownable, where it says perviously it should say previously. (Update: Fixed here.)  Consider using require(isMinting) in onlyDuringMinting, instead of revert, and the same in onlyAfterMinting, for more concise code. (Update: Fixed here.)  Conclusion  One critical and three high severity issues were found and explained, along with recommendations on how to fix them. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Kin Token contract. We have not reviewed the related Kin project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#update:-fixed-in-this-commit._", "labels": ["OpenZeppelin"]}, {"title": "Unbounded loops", "body": "Unbounded loops", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#unbounded-loops", "labels": ["OpenZeppelin"]}, {"title": "addTokenGrant and", "body": "addTokenGrant and", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#addtokengrant-and", "labels": ["OpenZeppelin"]}, {"title": "deleteTokenGrant in", "body": "deleteTokenGrant in", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#deletetokengrant-in", "labels": ["OpenZeppelin"]}, {"title": "Gas Limit and Loops in the Solidity documentation.)", "body": "Gas Limit and Loops in the Solidity documentation.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#gas-limit-and-loops-in-the-solidity-documentation.)", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the loop in addTokenGrant is not needed, since there will never be a grantee address for which the previous check succeeds.", "body": "Additionally, the loop in addTokenGrant is not needed, since there will never be a grantee address for which the previous check succeeds.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#additionally,-the-loop-in-addtokengrant-is-not-needed,-since-there-will-never-be-a-grantee-address-for-which-the-previous-check-succeeds.", "labels": ["OpenZeppelin"]}, {"title": "Congratulations on writing such a thorough test suite! There are 620 tests in total, with most of them covering the integration of all contracts into the token sale contract.", "body": "Congratulations on writing such a thorough test suite! There are 620 tests in total, with most of them covering the integration of all contracts into the token sale contract.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#congratulations-on-writing-such-a-thorough-test-suite!-there-are-620-tests-in-total,-with-most-of-them-covering-the-integration-of-all-contracts-into-the-token-sale-contract.", "labels": ["OpenZeppelin"]}, {"title": "The documentation of grant in VestingTrustee does not state that its user should first do a transfer of tokens to the contract. Consider making this explicit in the documentation. (Update: Fixed here.)", "body": "The documentation of grant in VestingTrustee does not state that its user should first do a transfer of tokens to the contract. Consider making this explicit in the documentation. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-documentation-of-grant-in-vestingtrustee-does-not-state-that-its-user-should-first-do-a-transfer-of-tokens-to-the-contract.-consider-making-this-explicit-in-the-documentation.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "There is one use of var in the codebase, which infers the variable type from the right hand of the assignment. We recommend avoiding this feature because in some cases it might infer a smaller integer type than the developer might think. It is best to be explicit regarding types; in this case consider replacing it for uint256. (Update: Fixed here.)", "body": "There is one use of var in the codebase, which infers the variable type from the right hand of the assignment. We recommend avoiding this feature because in some cases it might infer a smaller integer type than the developer might think. It is best to be explicit regarding types; in this case consider replacing it for uint256. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#there-is-one-use-of-var-in-the-codebase,-which-infers-the-variable-type-from-the-right-hand-of-the-assignment.-we-recommend-avoiding-this-feature-because-in-some-cases-it-might-infer-a-smaller-integer-type-than-the-developer-might-think.-it-is-best-to-be-explicit-regarding-types;-in-this-case-consider-replacing-it-for-uint256.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "The name of the constant TOKEN_DECIMALS is misleading. While the decimals constant in the KinToken contract is set to the number of decimal positions (18), the constant TOKEN_DECIMALS is set to 10**18, i.e. one unit of the token. Consider either renaming the constant, or changing its value to 18 and updating its usage across the contract. (Update: Fixed here.)", "body": "The name of the constant TOKEN_DECIMALS is misleading. While the decimals constant in the KinToken contract is set to the number of decimal positions (18), the constant TOKEN_DECIMALS is set to 10**18, i.e. one unit of the token. Consider either renaming the constant, or changing its value to 18 and updating its usage across the contract. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-name-of-the-constant-token_decimals-is-misleading.-while-the-decimals-constant-in-the-kintoken-contract-is-set-to-the-number-of-decimal-positions-(18),-the-constant-token_decimals-is-set-to-10**18,-i.e.-one-unit-of-the-token.-consider-either-renaming-the-constant,-or-changing-its-value-to-18-and-updating-its-usage-across-the-contract.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "The comment in line 47 of KinTokenSale, regarding state variables startTime and endTime, mentions \u201cblocks\u201d but it should say \u201ctimestamps.\u201d (Update: Fixed here.)", "body": "The comment in line 47 of KinTokenSale, regarding state variables startTime and endTime, mentions \u201cblocks\u201d but it should say \u201ctimestamps.\u201d (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-comment-in-line-47-of-kintokensale,-regarding-state-variables-starttime-and-endtime,-mentions-\u201cblocks\u201d-but-it-should-say-\u201ctimestamps.\u201d-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "The documentation of unlockVestedTokens indicates it has a return value, but it doesn\u2019t. Remove the comment to avoid potential confusion. (Update: Fixed here.)", "body": "The documentation of unlockVestedTokens indicates it has a return value, but it doesn\u2019t. Remove the comment to avoid potential confusion. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-documentation-of-unlockvestedtokens-indicates-it-has-a-return-value,-but-it-doesn\u2019t.-remove-the-comment-to-avoid-potential-confusion.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "Consider defining a helper function saleEnded to avoid the duplication in onlyDuringSale and onlyAfterSale. (Update: Fixed here.)", "body": "Consider defining a helper function saleEnded to avoid the duplication in onlyDuringSale and onlyAfterSale. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#consider-defining-a-helper-function-saleended-to-avoid-the-duplication-in-onlyduringsale-and-onlyaftersale.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "The variable tokensVested refers to tokens that have not yet vested. Consider renaming the variable to tokensVesting. (Update: Fixed here.)", "body": "The variable tokensVested refers to tokens that have not yet vested. Consider renaming the variable to tokensVesting. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#the-variable-tokensvested-refers-to-tokens-that-have-not-yet-vested.-consider-renaming-the-variable-to-tokensvesting.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "endMinting fails silently when minting has already ended. Consider reverting the transaction instead.", "body": "endMinting fails silently when minting has already ended. Consider reverting the transaction instead.", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#endminting-fails-silently-when-minting-has-already-ended.-consider-reverting-the-transaction-instead.", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in Ownable, where it says perviously it should say previously. (Update: Fixed here.)", "body": "There is a typo in Ownable, where it says perviously it should say previously. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#there-is-a-typo-in-ownable,-where-it-says-perviously-it-should-say-previously.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "Consider using require(isMinting) in onlyDuringMinting, instead of revert, and the same in onlyAfterMinting, for more concise code. (Update: Fixed here.)", "body": "Consider using require(isMinting) in onlyDuringMinting, instead of revert, and the same in onlyAfterMinting, for more concise code. (Update: Fixed here.)", "html_url": "https://blog.openzeppelin.com/kin-token-audit-121788c06fe#consider-using-require(isminting)-in-onlyduringminting,-instead-of-revert,-and-the-same-in-onlyafterminting,-for-more-concise-code.-(update:-fixed-here.)", "labels": ["OpenZeppelin"]}, {"title": "No critical issues were found.", "body": "No critical issues were found.", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#no-critical-issues-were-found.", "labels": ["OpenZeppelin"]}, {"title": "According to the ERC20 standard the decimals variable (defined in line 31) should be of type uint8.Update: This was fixed in the latest version.", "body": "According to the ERC20 standard the decimals variable (defined in line 31) should be of type uint8.Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#according-to-the-erc20-standard-the-decimals-variable-(defined-in-line-31)-should-be-of-type-uint8.update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Notes and Additional Information", "body": "Notes and Additional Information", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#notes-and-additional-information", "labels": ["OpenZeppelin"]}, {"title": "Good job defining INITIAL_SUPPLY in terms of decimals.", "body": "Good job defining INITIAL_SUPPLY in terms of decimals.", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#good-job-defining-initial_supply-in-terms-of-decimals.", "labels": ["OpenZeppelin"]}, {"title": "Giving a name to the smallest transferable unit of a token, in your case grain, is a great idea. It eliminates a common ambiguity when talking about token amounts. More projects should do this.", "body": "Giving a name to the smallest transferable unit of a token, in your case grain, is a great idea. It eliminates a common ambiguity when talking about token amounts. More projects should do this.", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#giving-a-name-to-the-smallest-transferable-unit-of-a-token,-in-your-case-grain,-is-a-great-idea.-it-eliminates-a-common-ambiguity-when-talking-about-token-amounts.-more-projects-should-do-this.", "labels": ["OpenZeppelin"]}, {"title": "If you are going to distribute the tokens manually via transfer, keep in mind that token holders will be able to make transfers themselves during the distribution. If you wish to audit the distribution afterwards to ensure it was done correctly, look for the Transfer events instead of balances.", "body": "If you are going to distribute the tokens manually via transfer, keep in mind that token holders will be able to make transfers themselves during the distribution. If you wish to audit the distribution afterwards to ensure it was done correctly, look for the Transfer events instead of balances.", "html_url": "https://blog.openzeppelin.com/tierion-network-token-audit-163850fd1787#if-you-are-going-to-distribute-the-tokens-manually-via-transfer,-keep-in-mind-that-token-holders-will-be-able-to-make-transfers-themselves-during-the-distribution.-if-you-wish-to-audit-the-distribution-afterwards-to-ensure-it-was-done-correctly,-look-for-the-transfer-events-instead-of-balances.", "labels": ["OpenZeppelin"]}, {"title": "Very low quality tool and language", "body": "Very low quality tool and language", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#very-low-quality-tool-and-language", "labels": ["OpenZeppelin"]}, {"title": "Development stalled", "body": "Development stalled", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#development-stalled", "labels": ["OpenZeppelin"]}, {"title": "No tests", "body": "No tests", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#no-tests", "labels": ["OpenZeppelin"]}, {"title": "Language is untyped", "body": "Language is untyped", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#language-is-untyped", "labels": ["OpenZeppelin"]}, {"title": "Invalid syntax is accepted by the parser and compiler", "body": "Invalid syntax is accepted by the parser and compiler", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#invalid-syntax-is-accepted-by-the-parser-and-compiler", "labels": ["OpenZeppelin"]}, {"title": "Compiler does not fail on non-initialized variables", "body": "Compiler does not fail on non-initialized variables", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#compiler-does-not-fail-on-non-initialized-variables", "labels": ["OpenZeppelin"]}, {"title": "Can overwrite local memory location when accessing array out of bounds", "body": "Can overwrite local memory location when accessing array out of bounds", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#can-overwrite-local-memory-location-when-accessing-array-out-of-bounds", "labels": ["OpenZeppelin"]}, {"title": "Can overwrite storage location when accessing array out of bounds", "body": "Can overwrite storage location when accessing array out of bounds", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#can-overwrite-storage-location-when-accessing-array-out-of-bounds", "labels": ["OpenZeppelin"]}, {"title": "Not widely used", "body": "Not widely used", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#not-widely-used", "labels": ["OpenZeppelin"]}, {"title": "No internal functions", "body": "No internal functions", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#no-internal-functions", "labels": ["OpenZeppelin"]}, {"title": "Difference between short and long strings", "body": "Difference between short and long strings", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#difference-between-short-and-long-strings", "labels": ["OpenZeppelin"]}, {"title": "Python reserved keywords remain unimplemented and are interpreted as uninitialized variables", "body": "Python reserved keywords remain unimplemented and are interpreted as uninitialized variables", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#python-reserved-keywords-remain-unimplemented-and-are-interpreted-as-uninitialized-variables", "labels": ["OpenZeppelin"]}, {"title": "Special any functions are chained, while shared are overwritten", "body": "Special any functions are chained, while shared are overwritten", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#special-any-functions-are-chained,-while-shared-are-overwritten", "labels": ["OpenZeppelin"]}, {"title": "Unexpected ABI generated from syntax error in method signature", "body": "Unexpected ABI generated from syntax error in method signature", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#unexpected-abi-generated-from-syntax-error-in-method-signature", "labels": ["OpenZeppelin"]}, {"title": "Inline return statements are ignored", "body": "Inline return statements are ignored", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#inline-return-statements-are-ignored", "labels": ["OpenZeppelin"]}, {"title": "Return is not a reserved keyword", "body": "Return is not a reserved keyword", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#return-is-not-a-reserved-keyword", "labels": ["OpenZeppelin"]}, {"title": "Medium sized strings are parsed as variables", "body": "Medium sized strings are parsed as variables", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#medium-sized-strings-are-parsed-as-variables", "labels": ["OpenZeppelin"]}, {"title": "Can overwrite local memory location when using setch with out of bounds index", "body": "Can overwrite local memory location when using setch with out of bounds index", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#can-overwrite-local-memory-location-when-using-setch-with-out-of-bounds-index", "labels": ["OpenZeppelin"]}, {"title": "Medium severity", "body": "Medium severity", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#medium-severity", "labels": ["OpenZeppelin"]}, {"title": "Lack of documentation", "body": "Lack of documentation", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#lack-of-documentation", "labels": ["OpenZeppelin"]}, {"title": "Consider using Viper", "body": "Consider using Viper", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#consider-using-viper", "labels": ["OpenZeppelin"]}, {"title": "Broken and confusing examples", "body": "Broken and confusing examples", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#broken-and-confusing-examples", "labels": ["OpenZeppelin"]}, {"title": "Serpent\u2019s sha3 function is not the standard SHA-3", "body": "Serpent\u2019s sha3 function is not the standard SHA-3", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#serpent\u2019s-sha3-function-is-not-the-standard-sha-3", "labels": ["OpenZeppelin"]}, {"title": "Integer operations are signed", "body": "Integer operations are signed", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#integer-operations-are-signed", "labels": ["OpenZeppelin"]}, {"title": "+ operator on short strings does not concatenate", "body": "+ operator on short strings does not concatenate", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#+-operator-on-short-strings-does-not-concatenate", "labels": ["OpenZeppelin"]}, {"title": "Bad send API design", "body": "Bad send API design", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#bad-send-api-design", "labels": ["OpenZeppelin"]}, {"title": "Variable names can begin with digits", "body": "Variable names can begin with digits", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#variable-names-can-begin-with-digits", "labels": ["OpenZeppelin"]}, {"title": "Python boolean constants are unimplemented", "body": "Python boolean constants are unimplemented", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#python-boolean-constants-are-unimplemented", "labels": ["OpenZeppelin"]}, {"title": "Serpent\u2019s send behavior is different to Solidity\u2019s send", "body": "Serpent\u2019s send behavior is different to Solidity\u2019s send", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#serpent\u2019s-send-behavior-is-different-to-solidity\u2019s-send", "labels": ["OpenZeppelin"]}, {"title": "Constructor cannot accept parameters", "body": "Constructor cannot accept parameters", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#constructor-cannot-accept-parameters", "labels": ["OpenZeppelin"]}, {"title": "No way to declare minimum compiler version", "body": "No way to declare minimum compiler version", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#no-way-to-declare-minimum-compiler-version", "labels": ["OpenZeppelin"]}, {"title": "No error reporting on non-existent commands", "body": "No error reporting on non-existent commands", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#no-error-reporting-on-non-existent-commands", "labels": ["OpenZeppelin"]}, {"title": "Non-standard ABI names generated from CLI", "body": "Non-standard ABI names generated from CLI", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#non-standard-abi-names-generated-from-cli", "labels": ["OpenZeppelin"]}, {"title": "Parser internal tokens clash with user-defined ones", "body": "Parser internal tokens clash with user-defined ones", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#parser-internal-tokens-clash-with-user-defined-ones", "labels": ["OpenZeppelin"]}, {"title": "Can overwrite non initialized variables", "body": "Can overwrite non initialized variables", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#can-overwrite-non-initialized-variables", "labels": ["OpenZeppelin"]}, {"title": "Can declare arrays of negative size", "body": "Can declare arrays of negative size", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#can-declare-arrays-of-negative-size", "labels": ["OpenZeppelin"]}, {"title": "Array sizes can overflow", "body": "Array sizes can overflow", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#array-sizes-can-overflow", "labels": ["OpenZeppelin"]}, {"title": "Compiler gives no warning when accessing uninitialized arrays", "body": "Compiler gives no warning when accessing uninitialized arrays", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#compiler-gives-no-warning-when-accessing-uninitialized-arrays", "labels": ["OpenZeppelin"]}, {"title": "Low severity", "body": "Low severity", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#low-severity", "labels": ["OpenZeppelin"]}, {"title": "No releases or git tags", "body": "No releases or git tags", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#no-releases-or-git-tags", "labels": ["OpenZeppelin"]}, {"title": "Several documentation errors", "body": "Several documentation errors", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#several-documentation-errors", "labels": ["OpenZeppelin"]}, {"title": "Use of magic constants", "body": "Use of magic constants", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#use-of-magic-constants", "labels": ["OpenZeppelin"]}, {"title": "Code mixes tabs and spaces", "body": "Code mixes tabs and spaces", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#code-mixes-tabs-and-spaces", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent casing", "body": "Inconsistent casing", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#inconsistent-casing", "labels": ["OpenZeppelin"]}, {"title": "Bad CLI parameter parsing", "body": "Bad CLI parameter parsing", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#bad-cli-parameter-parsing", "labels": ["OpenZeppelin"]}, {"title": "Bad CLI error handling", "body": "Bad CLI error handling", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#bad-cli-error-handling", "labels": ["OpenZeppelin"]}, {"title": "Makefile does not specify dependencies correctly", "body": "Makefile does not specify dependencies correctly", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#makefile-does-not-specify-dependencies-correctly", "labels": ["OpenZeppelin"]}, {"title": "Length function does not check argument types", "body": "Length function does not check argument types", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#length-function-does-not-check-argument-types", "labels": ["OpenZeppelin"]}, {"title": "Local variables defined in shared or any functions leak into user functions", "body": "Local variables defined in shared or any functions leak into user functions", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#local-variables-defined-in-shared-or-any-functions-leak-into-user-functions", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent usage of outitems vs outsz", "body": "Inconsistent usage of outitems vs outsz", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#inconsistent-usage-of-outitems-vs-outsz", "labels": ["OpenZeppelin"]}, {"title": "Array arguments should be a pointer to first element", "body": "Array arguments should be a pointer to first element", "html_url": "https://blog.openzeppelin.com/serpent-compiler-audit-3095d1257929#array-arguments-should-be-a-pointer-to-first-element", "labels": ["OpenZeppelin"]}]