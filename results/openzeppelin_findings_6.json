[{"title": "Revert messages of the GovernorAlpha follow a design which is not used by all other contracts.", "body": "Revert messages of the GovernorAlpha follow a design which is not used by all other contracts.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#revert-messages-of-the-governoralpha-follow-a-design-which-is-not-used-by-all-other-contracts.", "labels": ["OpenZeppelin"]}, {"title": "In order to improve readability, consider following a unique consistent style while coding the contracts.", "body": "In order to improve readability, consider following a unique consistent style while coding the contracts.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-order-to-improve-readability,-consider-following-a-unique-consistent-style-while-coding-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed on pull request 18. The EmptySetSquad team statement for this issue:", "body": "Update: Partially fixed on pull request 18. The EmptySetSquad team statement for this issue:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-partially-fixed-on-pull-request-18.-the-emptysetsquad-team-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "ReserveComptroller Leaves as-is, the pattern being: don\u2019t utilizes intermediary variables unless the variable would be accessed more than once in the resulting code.GovernorAlpha Leaves as-is to not modify forked code unnecessarily.", "body": "ReserveComptroller Leaves as-is, the pattern being: don\u2019t utilizes intermediary variables unless the variable would be accessed more than once in the resulting code.GovernorAlpha Leaves as-is to not modify forked code unnecessarily.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#reservecomptroller-leaves-as-is,-the-pattern-being:-don\u2019t-utilizes-intermediary-variables-unless-the-variable-would-be-accessed-more-than-once-in-the-resulting-code.governoralpha-leaves-as-is-to-not-modify-forked-code-unnecessarily.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Lack of indexed parameters in events", "body": "[N06] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n06]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "There are places in the code base where events defined in the contracts do not index any parameter. Some examples are:", "body": "There are places in the code base where events defined in the contracts do not index any parameter. Some examples are:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#there-are-places-in-the-code-base-where-events-defined-in-the-contracts-do-not-index-any-parameter.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The GovernorAlpha contract.", "body": "The GovernorAlpha contract.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-governoralpha-contract.", "labels": ["OpenZeppelin"]}, {"title": "The events from the IImplementation contract.", "body": "The events from the IImplementation contract.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-events-from-the-iimplementation-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed on pull request 6. Events on the GovernorAlpha contract are still not indexed.", "body": "Update: Partially fixed on pull request 6. Events on the GovernorAlpha contract are still not indexed.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-partially-fixed-on-pull-request-6.-events-on-the-governoralpha-contract-are-still-not-indexed.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Misleading or erroneous docstrings", "body": "[N07] Misleading or erroneous docstrings", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n07]-misleading-or-erroneous-docstrings", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are docstrings that may confuse the user or that are incorrect. Some examples are:", "body": "In the code base, there are docstrings that may confuse the user or that are incorrect. Some examples are:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-code-base,-there-are-docstrings-that-may-confuse-the-user-or-that-are-incorrect.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The IComptroller interface from the ReserveVault contract has a docstring that states ICErc20 where it should be IComptroller.", "body": "The IComptroller interface from the ReserveVault contract has a docstring that states ICErc20 where it should be IComptroller.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-icomptroller-interface-from-the-reservevault-contract-has-a-docstring-that-states-icerc20-where-it-should-be-icomptroller.", "labels": ["OpenZeppelin"]}, {"title": "Line 133 from ReserveState.sol should say \u201cRedemption tax\u201d.", "body": "Line 133 from ReserveState.sol should say \u201cRedemption tax\u201d.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#line-133-from-reservestate.sol-should-say-\u201credemption-tax\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 84 from ReserveComptroller.sol states \u201cRhe\u201d where it should be \u201cThe\u201d.", "body": "Line 84 from ReserveComptroller.sol states \u201cRhe\u201d where it should be \u201cThe\u201d.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#line-84-from-reservecomptroller.sol-states-\u201crhe\u201d-where-it-should-be-\u201cthe\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 85 from ReserveVault.sol states \u201c\u2026rewards the external protocol\u201d where it should be \u201c\u2026rewards from the external protocol\u201d.", "body": "Line 85 from ReserveVault.sol states \u201c\u2026rewards the external protocol\u201d where it should be \u201c\u2026rewards from the external protocol\u201d.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#line-85-from-reservevault.sol-states-\u201c\u2026rewards-the-external-protocol\u201d-where-it-should-be-\u201c\u2026rewards-from-the-external-protocol\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Lines 112-115 from the StabilizerComptroller.sol are the docstrings of the setup function but those are copied from the docstrings of the rate function below.", "body": "Lines 112-115 from the StabilizerComptroller.sol are the docstrings of the setup function but those are copied from the docstrings of the rate function below.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#lines-112-115-from-the-stabilizercomptroller.sol-are-the-docstrings-of-the-setup-function-but-those-are-copied-from-the-docstrings-of-the-rate-function-below.", "labels": ["OpenZeppelin"]}, {"title": "In order to improve readability, consider fixing all incorrect docstrings in the code base.", "body": "In order to improve readability, consider fixing all incorrect docstrings in the code base.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-order-to-improve-readability,-consider-fixing-all-incorrect-docstrings-in-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed on pull requests 5 and 1.", "body": "Update: Fixed on pull requests 5 and 1.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-fixed-on-pull-requests-5-and-1.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Several contracts developed per file", "body": "[N08] Several contracts developed per file", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n08]-several-contracts-developed-per-file", "labels": ["OpenZeppelin"]}, {"title": "StabilizerState.sol file together with the", "body": "StabilizerState.sol file together with the", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#stabilizerstate.sol-file-together-with-the", "labels": ["OpenZeppelin"]}, {"title": "ReserverVault.sol,", "body": "ReserverVault.sol,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#reservervault.sol,", "labels": ["OpenZeppelin"]}, {"title": "ReserverState.sol,", "body": "ReserverState.sol,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#reserverstate.sol,", "labels": ["OpenZeppelin"]}, {"title": "Migrator.sol,", "body": "Migrator.sol,", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#migrator.sol,", "labels": ["OpenZeppelin"]}, {"title": "GovernerAlpha.sol, and", "body": "GovernerAlpha.sol, and", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#governeralpha.sol,-and", "labels": ["OpenZeppelin"]}, {"title": "Interfaces.sol files all present multiple contracts or interfaces definitions inside of the same file.", "body": "Interfaces.sol files all present multiple contracts or interfaces definitions inside of the same file.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#interfaces.sol-files-all-present-multiple-contracts-or-interfaces-definitions-inside-of-the-same-file.", "labels": ["OpenZeppelin"]}, {"title": "To improve understandability and readability, but also to have a more modular code base, consider having one contract or interface per Solidity file.", "body": "To improve understandability and readability, but also to have a more modular code base, consider having one contract or interface per Solidity file.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#to-improve-understandability-and-readability,-but-also-to-have-a-more-modular-code-base,-consider-having-one-contract-or-interface-per-solidity-file.", "labels": ["OpenZeppelin"]}, {"title": "Won\u2019t fix directly \u2013 significantly cleaned up via pull request 19 and pull request 20.", "body": "Won\u2019t fix directly \u2013 significantly cleaned up via pull request 19 and pull request 20.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#won\u2019t-fix-directly-\u2013-significantly-cleaned-up-via-pull-request-19-and-pull-request-20.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Naming issues", "body": "[N09] Naming issues", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n09]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are several occurrences of unclear or confusing names. For example:", "body": "In the code base, there are several occurrences of unclear or confusing names. For example:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-code-base,-there-are-several-occurrences-of-unclear-or-confusing-names.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The GovernerAlpha.sol file defines a contract called GovernorAlpha.", "body": "The GovernerAlpha.sol file defines a contract called GovernorAlpha.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-governeralpha.sol-file-defines-a-contract-called-governoralpha.", "labels": ["OpenZeppelin"]}, {"title": "The getPartial function\u2019s name of the Decimal library doesn\u2019t reflect correctly the functionality of the function.", "body": "The getPartial function\u2019s name of the Decimal library doesn\u2019t reflect correctly the functionality of the function.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-getpartial-function\u2019s-name-of-the-decimal-library-doesn\u2019t-reflect-correctly-the-functionality-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "The name of the _paid mapping of the Incentivizer contract doesn\u2019t suit with the purpose, it is used to track the latest reward per unit instead of the amount of paid rewards as suggested by its docstring.", "body": "The name of the _paid mapping of the Incentivizer contract doesn\u2019t suit with the purpose, it is used to track the latest reward per unit instead of the amount of paid rewards as suggested by its docstring.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#the-name-of-the-_paid-mapping-of-the-incentivizer-contract-doesn\u2019t-suit-with-the-purpose,-it-is-used-to-track-the-latest-reward-per-unit-instead-of-the-amount-of-paid-rewards-as-suggested-by-its-docstring.", "labels": ["OpenZeppelin"]}, {"title": "To improve consistency and readability of the code base, consider changing variable, function, and file names to better reflect their intentions.", "body": "To improve consistency and readability of the code base, consider changing variable, function, and file names to better reflect their intentions.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#to-improve-consistency-and-readability-of-the-code-base,-consider-changing-variable,-function,-and-file-names-to-better-reflect-their-intentions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed on pull request 4. The getPartial function still has a name that does not reflect its functionality.", "body": "Update: Partially fixed on pull request 4. The getPartial function still has a name that does not reflect its functionality.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#update:-partially-fixed-on-pull-request-4.-the-getpartial-function-still-has-a-name-that-does-not-reflect-its-functionality.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Declare uint as uint256", "body": "[N10] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#[n10]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are several places where uint is used instead of uint256. Some examples are:", "body": "In the code base, there are several places where uint is used instead of uint256. Some examples are:", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-code-base,-there-are-several-places-where-uint-is-used-instead-of-uint256.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "In the GovernorAlpha contract.", "body": "In the GovernorAlpha contract.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-governoralpha-contract.", "labels": ["OpenZeppelin"]}, {"title": "In the ICErc20 interface.", "body": "In the ICErc20 interface.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#in-the-icerc20-interface.", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider changing all instances of uint to uint256.", "body": "To favor explicitness, consider changing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/empty-set-v2-audit#to-favor-explicitness,-consider-changing-all-instances-of-uint-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "None.JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaW50cm9kdWN0aW9uJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2hpZ2glMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "body": "None.JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaW50cm9kdWN0aW9uJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2hpZ2glMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "html_url": "https://blog.openzeppelin.com/holdefi-audit#none.jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizaw50cm9kdwn0aw9ujtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrsuzqyuymfbyzxzpb3vzjtndjtjgysuzrsuzqyuyrmj1dhrvbiuzrsuwqsuwqsuzq2j1dhrvbiuymg9uy2xpy2slm0qlmjjjdxn0b21zy3jvbgwlmjglmjklmjilm0ulm0nhjtiwahjlziuzrcuymiuym2hpz2glmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfbmv4dcuymcuzrsuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0mlmkzkaxylm0u=", "labels": ["OpenZeppelin"]}, {"title": "[H01] Owner can bypass time checks in markets and collateral assets", "body": "[H01] Owner can bypass time checks in markets and collateral assets", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[h01]-owner-can-bypass-time-checks-in-markets-and-collateral-assets", "labels": ["OpenZeppelin"]}, {"title": "HoldefiSettings contract is in charge of managing some of the most important actions that the admin of the system can perform, such as", "body": "HoldefiSettings contract is in charge of managing some of the most important actions that the admin of the system can perform, such as", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefisettings-contract-is-in-charge-of-managing-some-of-the-most-important-actions-that-the-admin-of-the-system-can-perform,-such-as", "labels": ["OpenZeppelin"]}, {"title": "add and remove markets,", "body": "add and remove markets,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#add-and-remove-markets,", "labels": ["OpenZeppelin"]}, {"title": "add and remove collateral assets,", "body": "add and remove collateral assets,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#add-and-remove-collateral-assets,", "labels": ["OpenZeppelin"]}, {"title": "set a borrow rate and", "body": "set a borrow rate and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#set-a-borrow-rate-and", "labels": ["OpenZeppelin"]}, {"title": "set a suppliers share rate for a given market, and finally", "body": "set a suppliers share rate for a given market, and finally", "html_url": "https://blog.openzeppelin.com/holdefi-audit#set-a-suppliers-share-rate-for-a-given-market,-and-finally", "labels": ["OpenZeppelin"]}, {"title": "set the value to loan rate,", "body": "set the value to loan rate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#set-the-value-to-loan-rate,", "labels": ["OpenZeppelin"]}, {"title": "set the penalty rate and", "body": "set the penalty rate and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#set-the-penalty-rate-and", "labels": ["OpenZeppelin"]}, {"title": "set a bonus rate for a particular collateral asset.", "body": "set a bonus rate for a particular collateral asset.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#set-a-bonus-rate-for-a-particular-collateral-asset.", "labels": ["OpenZeppelin"]}, {"title": "Because these actions are critical in the financial behavior of the project, this contract inherits functionalities from the Ownable contract, and all these mentioned functions are guarded by the onlyOwner modifier so the owner is the only one that can modify the system\u2019s attributes, and add or remove assets from the project.", "body": "Because these actions are critical in the financial behavior of the project, this contract inherits functionalities from the Ownable contract, and all these mentioned functions are guarded by the onlyOwner modifier so the owner is the only one that can modify the system\u2019s attributes, and add or remove assets from the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#because-these-actions-are-critical-in-the-financial-behavior-of-the-project,-this-contract-inherits-functionalities-from-the-ownable-contract,-and-all-these-mentioned-functions-are-guarded-by-the-onlyowner-modifier-so-the-owner-is-the-only-one-that-can-modify-the-system\u2019s-attributes,-and-add-or-remove-assets-from-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Also, because quick changes in the parameters may harm users while using the system, there is a time-off period in which the owner cannot increase its values for a particular market or collateral.", "body": "Also, because quick changes in the parameters may harm users while using the system, there is a time-off period in which the owner cannot increase its values for a particular market or collateral.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#also,-because-quick-changes-in-the-parameters-may-harm-users-while-using-the-system,-there-is-a-time-off-period-in-which-the-owner-cannot-increase-its-values-for-a-particular-market-or-collateral.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, there is a feasible scenario where the owner can easily bypass this process by removing and re-adding an already existent market or collateral. For instance, given a specific market, the owner can call the removeMarket function, which will only set the respective isActive flag for that market as false, and then call the addMarket function for that same market but with some new parameters that the owner may use for their own benefit.", "body": "Nevertheless, there is a feasible scenario where the owner can easily bypass this process by removing and re-adding an already existent market or collateral. For instance, given a specific market, the owner can call the removeMarket function, which will only set the respective isActive flag for that market as false, and then call the addMarket function for that same market but with some new parameters that the owner may use for their own benefit.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-there-is-a-feasible-scenario-where-the-owner-can-easily-bypass-this-process-by-removing-and-re-adding-an-already-existent-market-or-collateral.-for-instance,-given-a-specific-market,-the-owner-can-call-the-removemarket-function,-which-will-only-set-the-respective-isactive-flag-for-that-market-as-false,-and-then-call-the-addmarket-function-for-that-same-market-but-with-some-new-parameters-that-the-owner-may-use-for-their-own-benefit.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, if these two calls are done in order using a high gas price and the first one with an even higher value, and then these frontrun a user\u2019s transaction performed to the Holdefi contract, the owner could potentially benefit from these modifications even in the short term.", "body": "Additionally, if these two calls are done in order using a high gas price and the first one with an even higher value, and then these frontrun a user\u2019s transaction performed to the Holdefi contract, the owner could potentially benefit from these modifications even in the short term.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#additionally,-if-these-two-calls-are-done-in-order-using-a-high-gas-price-and-the-first-one-with-an-even-higher-value,-and-then-these-frontrun-a-user\u2019s-transaction-performed-to-the-holdefi-contract,-the-owner-could-potentially-benefit-from-these-modifications-even-in-the-short-term.", "labels": ["OpenZeppelin"]}, {"title": "This same procedure also applies similarly to the analogous addCollateral and removeCollateral functions that modify the parameters of the whitelisted collaterals.", "body": "This same procedure also applies similarly to the analogous addCollateral and removeCollateral functions that modify the parameters of the whitelisted collaterals.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-same-procedure-also-applies-similarly-to-the-analogous-addcollateral-and-removecollateral-functions-that-modify-the-parameters-of-the-whitelisted-collaterals.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding a time check to apply the same logic of the time-off period to a previously removed market or collateral so the owner cannot bypass the time restrictions while changing the parameters.", "body": "Consider adding a time check to apply the same logic of the time-off period to a previously removed market or collateral so the owner cannot bypass the time restrictions while changing the parameters.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-adding-a-time-check-to-apply-the-same-logic-of-the-time-off-period-to-a-previously-removed-market-or-collateral-so-the-owner-cannot-bypass-the-time-restrictions-while-changing-the-parameters.", "labels": ["OpenZeppelin"]}, {"title": "[H02] Markets are not being properly removed from the markets list", "body": "[H02] Markets are not being properly removed from the markets list", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[h02]-markets-are-not-being-properly-removed-from-the-markets-list", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract there are two data structures to track markets: marketsList which is an array of addresses, and marketAssets, which is a mapping that describes the properties of each market. Additionally, there are two functions to manipulate these markets: the addMarket function which adds new markets, and the removeMarket function which removes an already existent market.", "body": "In the HoldefiSettings contract there are two data structures to track markets: marketsList which is an array of addresses, and marketAssets, which is a mapping that describes the properties of each market. Additionally, there are two functions to manipulate these markets: the addMarket function which adds new markets, and the removeMarket function which removes an already existent market.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract-there-are-two-data-structures-to-track-markets:-marketslist-which-is-an-array-of-addresses,-and-marketassets,-which-is-a-mapping-that-describes-the-properties-of-each-market.-additionally,-there-are-two-functions-to-manipulate-these-markets:-the-addmarket-function-which-adds-new-markets,-and-the-removemarket-function-which-removes-an-already-existent-market.", "labels": ["OpenZeppelin"]}, {"title": "The problem resides in that the removeMarket function does not remove a market from both mentioned data structures, as it only sets a given market as not active in the Market struct, but does not remove it from the marketsList array. This means that, when the getMarketsList function is called, it will list already removed markets, showing them as valid and active markets.", "body": "The problem resides in that the removeMarket function does not remove a market from both mentioned data structures, as it only sets a given market as not active in the Market struct, but does not remove it from the marketsList array. This means that, when the getMarketsList function is called, it will list already removed markets, showing them as valid and active markets.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-problem-resides-in-that-the-removemarket-function-does-not-remove-a-market-from-both-mentioned-data-structures,-as-it-only-sets-a-given-market-as-not-active-in-the-market-struct,-but-does-not-remove-it-from-the-marketslist-array.-this-means-that,-when-the-getmarketslist-function-is-called,-it-will-list-already-removed-markets,-showing-them-as-valid-and-active-markets.", "labels": ["OpenZeppelin"]}, {"title": "This could lead into an undesired manipulation of collaterals of a borrower in a specific market, that could generate market debts for inactive collaterals in that market, and could trigger other operations such as updating the promotion reserve and therefore update a market\u2019s supply index for a specific collateral in an inactive market. Also, this behavior of having a removed market that is still active could be confusing for the end-users.", "body": "This could lead into an undesired manipulation of collaterals of a borrower in a specific market, that could generate market debts for inactive collaterals in that market, and could trigger other operations such as updating the promotion reserve and therefore update a market\u2019s supply index for a specific collateral in an inactive market. Also, this behavior of having a removed market that is still active could be confusing for the end-users.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-could-lead-into-an-undesired-manipulation-of-collaterals-of-a-borrower-in-a-specific-market,-that-could-generate-market-debts-for-inactive-collaterals-in-that-market,-and-could-trigger-other-operations-such-as-updating-the-promotion-reserve-and-therefore-update-a-market\u2019s-supply-index-for-a-specific-collateral-in-an-inactive-market.-also,-this-behavior-of-having-a-removed-market-that-is-still-active-could-be-confusing-for-the-end-users.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming the removeMarket function to deactivateMarket, to make its behavior clear. On all the functions that query marketsList consider checking if the market is inactive. If the function supports or requires to take into account inactive markets, consider clearly documenting this.", "body": "Consider renaming the removeMarket function to deactivateMarket, to make its behavior clear. On all the functions that query marketsList consider checking if the market is inactive. If the function supports or requires to take into account inactive markets, consider clearly documenting this.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-renaming-the-removemarket-function-to-deactivatemarket,-to-make-its-behavior-clear.-on-all-the-functions-that-query-marketslist-consider-checking-if-the-market-is-inactive.-if-the-function-supports-or-requires-to-take-into-account-inactive-markets,-consider-clearly-documenting-this.", "labels": ["OpenZeppelin"]}, {"title": "Alternatively, consider using different state variables to differentiate from active and inactive markets, instead of leaving them in a state that is not clearly defined.", "body": "Alternatively, consider using different state variables to differentiate from active and inactive markets, instead of leaving them in a state that is not clearly defined.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#alternatively,-consider-using-different-state-variables-to-differentiate-from-active-and-inactive-markets,-instead-of-leaving-them-in-a-state-that-is-not-clearly-defined.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. Holdefi\u2019s statement for this issue:", "body": "Update: Not fixed. Holdefi\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#update:-not-fixed.-holdefi\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We calculate the borrow-value of each account in \u201cgetAccountTotalBorrowValue\u201d function. This function is using \u201cmarketsList\u201d for calculating the borrow-value. If we remove a market from \u201cmarketList\u201d, the borrow-value of that token for the users that borrowed it, will not be calculated.We did not remove the market from \u201cmarketList\u201d with awareness.Actually removing market or collateral in Holdefi stops users from depositing new tokens to contract but withdrawing and other functionalities are not changed because we don\u2019t want our users losing their tokens.Also updating the supply index and promotion reserve doesn\u2019t have any bad effect on the platform and these functions are not \u201csensitive operations\u201c. They just update index or reserve till current time.You suggested that we should check whether a market is active or not in the \u201cclearDebts\u201d. But if we do that, the platform will have problems and we will not consider the users that borrowed that market before.", "body": "We calculate the borrow-value of each account in \u201cgetAccountTotalBorrowValue\u201d function. This function is using \u201cmarketsList\u201d for calculating the borrow-value. If we remove a market from \u201cmarketList\u201d, the borrow-value of that token for the users that borrowed it, will not be calculated.We did not remove the market from \u201cmarketList\u201d with awareness.Actually removing market or collateral in Holdefi stops users from depositing new tokens to contract but withdrawing and other functionalities are not changed because we don\u2019t want our users losing their tokens.Also updating the supply index and promotion reserve doesn\u2019t have any bad effect on the platform and these functions are not \u201csensitive operations\u201c. They just update index or reserve till current time.You suggested that we should check whether a market is active or not in the \u201cclearDebts\u201d. But if we do that, the platform will have problems and we will not consider the users that borrowed that market before.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-calculate-the-borrow-value-of-each-account-in-\u201cgetaccounttotalborrowvalue\u201d-function.-this-function-is-using-\u201cmarketslist\u201d-for-calculating-the-borrow-value.-if-we-remove-a-market-from-\u201cmarketlist\u201d,-the-borrow-value-of-that-token-for-the-users-that-borrowed-it,-will-not-be-calculated.we-did-not-remove-the-market-from-\u201cmarketlist\u201d-with-awareness.actually-removing-market-or-collateral-in-holdefi-stops-users-from-depositing-new-tokens-to-contract-but-withdrawing-and-other-functionalities-are-not-changed-because-we-don\u2019t-want-our-users-losing-their-tokens.also-updating-the-supply-index-and-promotion-reserve-doesn\u2019t-have-any-bad-effect-on-the-platform-and-these-functions-are-not-\u201csensitive-operations\u201c.-they-just-update-index-or-reserve-till-current-time.you-suggested-that-we-should-check-whether-a-market-is-active-or-not-in-the-\u201ccleardebts\u201d.-but-if-we-do-that,-the-platform-will-have-problems-and-we-will-not-consider-the-users-that-borrowed-that-market-before.", "labels": ["OpenZeppelin"]}, {"title": "We have updated our suggestions to make them clearer.", "body": "We have updated our suggestions to make them clearer.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-have-updated-our-suggestions-to-make-them-clearer.", "labels": ["OpenZeppelin"]}, {"title": "[H03] Users can add non-existent ERC20 tokens into the promotion reserve", "body": "[H03] Users can add non-existent ERC20 tokens into the promotion reserve", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[h03]-users-can-add-non-existent-erc20-tokens-into-the-promotion-reserve", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi contract implements most of the functionalities of the Holdefi\u2019s protocol, such as the supply of assets into the system, add collateral, and to borrow other assets based on the collateral power that the account has, among others.", "body": "The Holdefi contract implements most of the functionalities of the Holdefi\u2019s protocol, such as the supply of assets into the system, add collateral, and to borrow other assets based on the collateral power that the account has, among others.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-contract-implements-most-of-the-functionalities-of-the-holdefi\u2019s-protocol,-such-as-the-supply-of-assets-into-the-system,-add-collateral,-and-to-borrow-other-assets-based-on-the-collateral-power-that-the-account-has,-among-others.", "labels": ["OpenZeppelin"]}, {"title": "In particular, the depositPromotionReserve function, allows any account to deposit ERC20 token assets into the promotion reserve for a particular market.", "body": "In particular, the depositPromotionReserve function, allows any account to deposit ERC20 token assets into the promotion reserve for a particular market.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-particular,-the-depositpromotionreserve-function,-allows-any-account-to-deposit-erc20-token-assets-into-the-promotion-reserve-for-a-particular-market.", "labels": ["OpenZeppelin"]}, {"title": "The problem is that the depositPromotionReserve function does not check whether the market that the caller is trying to interact with is actually whitelisted by checking the isActive flag which enables the possibility to pass any address (except the zero address) as a possible market.", "body": "The problem is that the depositPromotionReserve function does not check whether the market that the caller is trying to interact with is actually whitelisted by checking the isActive flag which enables the possibility to pass any address (except the zero address) as a possible market.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-problem-is-that-the-depositpromotionreserve-function-does-not-check-whether-the-market-that-the-caller-is-trying-to-interact-with-is-actually-whitelisted-by-checking-the-isactive-flag-which-enables-the-possibility-to-pass-any-address-(except-the-zero-address)-as-a-possible-market.", "labels": ["OpenZeppelin"]}, {"title": "Here, an attacker could create a new contract that implements a simple transferFrom function that always returns true, so the requirement that checks the output of the real transferFrom function can be bypassed. By doing this, the attacker would be calling the depositPromotionReserveInternal function with a fake market address and number of tokens.", "body": "Here, an attacker could create a new contract that implements a simple transferFrom function that always returns true, so the requirement that checks the output of the real transferFrom function can be bypassed. By doing this, the attacker would be calling the depositPromotionReserveInternal function with a fake market address and number of tokens.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#here,-an-attacker-could-create-a-new-contract-that-implements-a-simple-transferfrom-function-that-always-returns-true,-so-the-requirement-that-checks-the-output-of-the-real-transferfrom-function-can-be-bypassed.-by-doing-this,-the-attacker-would-be-calling-the-depositpromotionreserveinternal-function-with-a-fake-market-address-and-number-of-tokens.", "labels": ["OpenZeppelin"]}, {"title": "This last function will later call several other functions from the same and other contracts, such as the getCurrentPromotion function and the getInterests function from the HoldefiSettings contract, but because the code also abuses the default zero values in several parts, all checks will be bypassed, including the protections that the usage of the SafeMath library provides, ending up in writing in storage not only a fake deposited value of the particular ERC20 token market but also it will update the timestamp from when the inexistent assets were deposited, emulating the behavior of a real ERC20 token.", "body": "This last function will later call several other functions from the same and other contracts, such as the getCurrentPromotion function and the getInterests function from the HoldefiSettings contract, but because the code also abuses the default zero values in several parts, all checks will be bypassed, including the protections that the usage of the SafeMath library provides, ending up in writing in storage not only a fake deposited value of the particular ERC20 token market but also it will update the timestamp from when the inexistent assets were deposited, emulating the behavior of a real ERC20 token.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-last-function-will-later-call-several-other-functions-from-the-same-and-other-contracts,-such-as-the-getcurrentpromotion-function-and-the-getinterests-function-from-the-holdefisettings-contract,-but-because-the-code-also-abuses-the-default-zero-values-in-several-parts,-all-checks-will-be-bypassed,-including-the-protections-that-the-usage-of-the-safemath-library-provides,-ending-up-in-writing-in-storage-not-only-a-fake-deposited-value-of-the-particular-erc20-token-market-but-also-it-will-update-the-timestamp-from-when-the-inexistent-assets-were-deposited,-emulating-the-behavior-of-a-real-erc20-token.", "labels": ["OpenZeppelin"]}, {"title": "Consider restricting the call to the whitelisted markets by using the already implemented isActive flag, and restricting who is able to deposit ERC20 assets into the promotion reserve.", "body": "Consider restricting the call to the whitelisted markets by using the already implemented isActive flag, and restricting who is able to deposit ERC20 assets into the promotion reserve.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-restricting-the-call-to-the-whitelisted-markets-by-using-the-already-implemented-isactive-flag,-and-restricting-who-is-able-to-deposit-erc20-assets-into-the-promotion-reserve.", "labels": ["OpenZeppelin"]}, {"title": "You have 2 suggestions for this issue: 1-implementing isActive flag 2-restricting who is able to deposit ERC20 assets first suggestion is good and we will implement it. But restricting users to deposit into promotion reserve will not change anything. Users can deposit their assets into promotion reserve and it\u2019s good for us. Also updating indexes is not bad for the protocol.", "body": "You have 2 suggestions for this issue: 1-implementing isActive flag 2-restricting who is able to deposit ERC20 assets first suggestion is good and we will implement it. But restricting users to deposit into promotion reserve will not change anything. Users can deposit their assets into promotion reserve and it\u2019s good for us. Also updating indexes is not bad for the protocol.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#you-have-2-suggestions-for-this-issue:-1-implementing-isactive-flag-2-restricting-who-is-able-to-deposit-erc20-assets-first-suggestion-is-good-and-we-will-implement-it.-but-restricting-users-to-deposit-into-promotion-reserve-will-not-change-anything.-users-can-deposit-their-assets-into-promotion-reserve-and-it\u2019s-good-for-us.-also-updating-indexes-is-not-bad-for-the-protocol.", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzY3JpdGljYWwlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzY3JpdGljYWwlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizy3jpdgljywwlmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfjtndjtiwuhjldmlvdxmlm0mlmkzhjtnfjtndjtjgynv0dg9ujtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizbwvkaxvtjtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrw5lehqlmjalm0ulm0mlmkzhjtnfjtndjtjgynv0dg9ujtnfjtbbjtbbjtndjtjgzgl2jtnf", "labels": ["OpenZeppelin"]}, {"title": "[M01] Owner can overrule pauser actions", "body": "[M01] Owner can overrule pauser actions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m01]-owner-can-overrule-pauser-actions", "labels": ["OpenZeppelin"]}, {"title": "The HoldefiPauser contract implements the functionality to pause specific functions at will in case a problem appears in the platform. The only accounts that can perform such task are the owner and the pauser accounts.", "body": "The HoldefiPauser contract implements the functionality to pause specific functions at will in case a problem appears in the platform. The only accounts that can perform such task are the owner and the pauser accounts.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefipauser-contract-implements-the-functionality-to-pause-specific-functions-at-will-in-case-a-problem-appears-in-the-platform.-the-only-accounts-that-can-perform-such-task-are-the-owner-and-the-pauser-accounts.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, the time-off period that the pause event has to achieve is modifiable only by the owner by calling the setPauseDuration function and if the owner decides to suppress the duration by setting it as zero, the isPause function will always return true, no matter what the pauser account does.", "body": "Nevertheless, the time-off period that the pause event has to achieve is modifiable only by the owner by calling the setPauseDuration function and if the owner decides to suppress the duration by setting it as zero, the isPause function will always return true, no matter what the pauser account does.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-the-time-off-period-that-the-pause-event-has-to-achieve-is-modifiable-only-by-the-owner-by-calling-the-setpauseduration-function-and-if-the-owner-decides-to-suppress-the-duration-by-setting-it-as-zero,-the-ispause-function-will-always-return-true,-no-matter-what-the-pauser-account-does.", "labels": ["OpenZeppelin"]}, {"title": "Consider setting a minimum duration for the time-off period to prevent that the pauser account loses its powers.", "body": "Consider setting a minimum duration for the time-off period to prevent that the pauser account loses its powers.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-setting-a-minimum-duration-for-the-time-off-period-to-prevent-that-the-pauser-account-loses-its-powers.", "labels": ["OpenZeppelin"]}, {"title": "[M02] List of markets can endlessly grow", "body": "[M02] List of markets can endlessly grow", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m02]-list-of-markets-can-endlessly-grow", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract, the addMarket function is used to introduce new markets to the system by adding them into the marketsAssets mapping and in the marketsList array.", "body": "In the HoldefiSettings contract, the addMarket function is used to introduce new markets to the system by adding them into the marketsAssets mapping and in the marketsList array.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract,-the-addmarket-function-is-used-to-introduce-new-markets-to-the-system-by-adding-them-into-the-marketsassets-mapping-and-in-the-marketslist-array.", "labels": ["OpenZeppelin"]}, {"title": "Given that the owner of the contract can add markets without any limit, and given that the removeMarket function does not remove markets properly, as it was pointed out in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, the marketsList array can grow endlessly. Then, when the array is iterated through, it would cause an out of gas error, as the loop would be too large to be handled in a single transaction. This would happen in the following scenarios:", "body": "Given that the owner of the contract can add markets without any limit, and given that the removeMarket function does not remove markets properly, as it was pointed out in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, the marketsList array can grow endlessly. Then, when the array is iterated through, it would cause an out of gas error, as the loop would be too large to be handled in a single transaction. This would happen in the following scenarios:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#given-that-the-owner-of-the-contract-can-add-markets-without-any-limit,-and-given-that-the-removemarket-function-does-not-remove-markets-properly,-as-it-was-pointed-out-in-the-issue-\u201c[h02]-markets-are-not-being-properly-removed-from-the-markets-list\u201d,-the-marketslist-array-can-grow-endlessly.-then,-when-the-array-is-iterated-through,-it-would-cause-an-out-of-gas-error,-as-the-loop-would-be-too-large-to-be-handled-in-a-single-transaction.-this-would-happen-in-the-following-scenarios:", "labels": ["OpenZeppelin"]}, {"title": "When adding a new market, as the marketsList array is iterated  to check whether a market already exists, preventing the market to be added", "body": "When adding a new market, as the marketsList array is iterated  to check whether a market already exists, preventing the market to be added", "html_url": "https://blog.openzeppelin.com/holdefi-audit#when-adding-a-new-market,-as-the-marketslist-array-is-iterated--to-check-whether-a-market-already-exists,-preventing-the-market-to-be-added", "labels": ["OpenZeppelin"]}, {"title": "When clearing debts in the Holdefi contract, preventing a borrower\u2019s collateral to be liquidated.", "body": "When clearing debts in the Holdefi contract, preventing a borrower\u2019s collateral to be liquidated.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#when-clearing-debts-in-the-holdefi-contract,-preventing-a-borrower\u2019s-collateral-to-be-liquidated.", "labels": ["OpenZeppelin"]}, {"title": "Consider limiting the size of the marketsList array to prevent out of gas errors. In addition to this, when removing a market using the removeMarket function, consider not only deactivating it in the marketsAssets struct, but also removing it from the marketsList array.", "body": "Consider limiting the size of the marketsList array to prevent out of gas errors. In addition to this, when removing a market using the removeMarket function, consider not only deactivating it in the marketsAssets struct, but also removing it from the marketsList array.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-limiting-the-size-of-the-marketslist-array-to-prevent-out-of-gas-errors.-in-addition-to-this,-when-removing-a-market-using-the-removemarket-function,-consider-not-only-deactivating-it-in-the-marketsassets-struct,-but-also-removing-it-from-the-marketslist-array.", "labels": ["OpenZeppelin"]}, {"title": "We explained it in H02. Your suggestion to remove the market from marketsList not only can\u2019t solve the issue but also will damage the platform.", "body": "We explained it in H02. Your suggestion to remove the market from marketsList not only can\u2019t solve the issue but also will damage the platform.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-explained-it-in-h02.-your-suggestion-to-remove-the-market-from-marketslist-not-only-can\u2019t-solve-the-issue-but-also-will-damage-the-platform.", "labels": ["OpenZeppelin"]}, {"title": "[M03] Anyone can set the Holdefi contract\u2019s address in the CollateralsWallet contract", "body": "[M03] Anyone can set the Holdefi contract\u2019s address in the CollateralsWallet contract", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m03]-anyone-can-set-the-holdefi-contract\u2019s-address-in-the-collateralswallet-contract", "labels": ["OpenZeppelin"]}, {"title": "CollateralsWallet contract is in charge of letting the", "body": "CollateralsWallet contract is in charge of letting the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#collateralswallet-contract-is-in-charge-of-letting-the", "labels": ["OpenZeppelin"]}, {"title": "Holdefi contract to withdraw a collateral asset if needed through the", "body": "Holdefi contract to withdraw a collateral asset if needed through the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefi-contract-to-withdraw-a-collateral-asset-if-needed-through-the", "labels": ["OpenZeppelin"]}, {"title": "withdraw function. For this, the", "body": "withdraw function. For this, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdraw-function.-for-this,-the", "labels": ["OpenZeppelin"]}, {"title": "holdefiContract storage variable must be set first through the", "body": "holdefiContract storage variable must be set first through the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdeficontract-storage-variable-must-be-set-first-through-the", "labels": ["OpenZeppelin"]}, {"title": "setHoldefiContract function, which is independent from the", "body": "setHoldefiContract function, which is independent from the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setholdeficontract-function,-which-is-independent-from-the", "labels": ["OpenZeppelin"]}, {"title": "The problem resides in the fact that the setHoldefiContract function does not have any restriction and can be called by any address and, thus, the holdefiContract storage value can be set by any external actor right after the contract creation, and will be able to call the withdraw function afterwards and steal the tokens held by the CollateralsWallet contract in any ERC20 contract, if there are any in the first place.", "body": "The problem resides in the fact that the setHoldefiContract function does not have any restriction and can be called by any address and, thus, the holdefiContract storage value can be set by any external actor right after the contract creation, and will be able to call the withdraw function afterwards and steal the tokens held by the CollateralsWallet contract in any ERC20 contract, if there are any in the first place.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-problem-resides-in-the-fact-that-the-setholdeficontract-function-does-not-have-any-restriction-and-can-be-called-by-any-address-and,-thus,-the-holdeficontract-storage-value-can-be-set-by-any-external-actor-right-after-the-contract-creation,-and-will-be-able-to-call-the-withdraw-function-afterwards-and-steal-the-tokens-held-by-the-collateralswallet-contract-in-any-erc20-contract,-if-there-are-any-in-the-first-place.", "labels": ["OpenZeppelin"]}, {"title": "Consider setting the holdefiContract storage variable on the contract creation instead of setting it in a separate function, or consider using the Ownable contract for setting an owner of the CollateralsWallet contract so the setHoldefiContract can only be called by a trusted actor.", "body": "Consider setting the holdefiContract storage variable on the contract creation instead of setting it in a separate function, or consider using the Ownable contract for setting an owner of the CollateralsWallet contract so the setHoldefiContract can only be called by a trusted actor.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-setting-the-holdeficontract-storage-variable-on-the-contract-creation-instead-of-setting-it-in-a-separate-function,-or-consider-using-the-ownable-contract-for-setting-an-owner-of-the-collateralswallet-contract-so-the-setholdeficontract-can-only-be-called-by-a-trusted-actor.", "labels": ["OpenZeppelin"]}, {"title": "[M04] Insufficient incentives to liquidator", "body": "[M04] Insufficient incentives to liquidator", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m04]-insufficient-incentives-to-liquidator", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi contract implements the liquidation process for those accounts that may have an under-collateralized balance or that may have been inactive for a whole year without interacting with the project.", "body": "The Holdefi contract implements the liquidation process for those accounts that may have an under-collateralized balance or that may have been inactive for a whole year without interacting with the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-contract-implements-the-liquidation-process-for-those-accounts-that-may-have-an-under-collateralized-balance-or-that-may-have-been-inactive-for-a-whole-year-without-interacting-with-the-project.", "labels": ["OpenZeppelin"]}, {"title": "The liquidation process is a very important part of every DeFi project because it allows to extinguish the problem of having the whole system under-collateralized under critical conditions of the market, and it needs a design that incentivizes its speed of execution.", "body": "The liquidation process is a very important part of every DeFi project because it allows to extinguish the problem of having the whole system under-collateralized under critical conditions of the market, and it needs a design that incentivizes its speed of execution.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidation-process-is-a-very-important-part-of-every-defi-project-because-it-allows-to-extinguish-the-problem-of-having-the-whole-system-under-collateralized-under-critical-conditions-of-the-market,-and-it-needs-a-design-that-incentivizes-its-speed-of-execution.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, the only incentive that a liquidator has when calling the liquidateBorrowerCollateral function is to update its last time of activity. Not only that, but also it only updates the latest activity time for the collateral type involved in the liquidation process and not all the activity times of all collaterals. Liquidators that do not have the collateral involved in the contract, or any collateral at all, will not have any benefit for calling the liquidation process.", "body": "Nevertheless, the only incentive that a liquidator has when calling the liquidateBorrowerCollateral function is to update its last time of activity. Not only that, but also it only updates the latest activity time for the collateral type involved in the liquidation process and not all the activity times of all collaterals. Liquidators that do not have the collateral involved in the contract, or any collateral at all, will not have any benefit for calling the liquidation process.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-the-only-incentive-that-a-liquidator-has-when-calling-the-liquidateborrowercollateral-function-is-to-update-its-last-time-of-activity.-not-only-that,-but-also-it-only-updates-the-latest-activity-time-for-the-collateral-type-involved-in-the-liquidation-process-and-not-all-the-activity-times-of-all-collaterals.-liquidators-that-do-not-have-the-collateral-involved-in-the-contract,-or-any-collateral-at-all,-will-not-have-any-benefit-for-calling-the-liquidation-process.", "labels": ["OpenZeppelin"]}, {"title": "the liquidateBorrowerCollateral function will be high due to the", "body": "the liquidateBorrowerCollateral function will be high due to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidateborrowercollateral-function-will-be-high-due-to-the", "labels": ["OpenZeppelin"]}, {"title": "the clearDebts function, as it was pointed out in the issue", "body": "the clearDebts function, as it was pointed out in the issue", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-cleardebts-function,-as-it-was-pointed-out-in-the-issue", "labels": ["OpenZeppelin"]}, {"title": "the buyLiquidatedCollateral function, by increasing the gas price, just after the transaction to the", "body": "the buyLiquidatedCollateral function, by increasing the gas price, just after the transaction to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-buyliquidatedcollateral-function,-by-increasing-the-gas-price,-just-after-the-transaction-to-the", "labels": ["OpenZeppelin"]}, {"title": "Consider improving the incentive design to give the liquidators higher incentives to execute the liquidation process, or merging the functionalities from the liquidateBorrowerCollateral and the buyLiquidatedCollateral functions under one.", "body": "Consider improving the incentive design to give the liquidators higher incentives to execute the liquidation process, or merging the functionalities from the liquidateBorrowerCollateral and the buyLiquidatedCollateral functions under one.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-improving-the-incentive-design-to-give-the-liquidators-higher-incentives-to-execute-the-liquidation-process,-or-merging-the-functionalities-from-the-liquidateborrowercollateral-and-the-buyliquidatedcollateral-functions-under-one.", "labels": ["OpenZeppelin"]}, {"title": "A 5% discount for buying collateral assets can incentivize the liquidator to liquidate collaterals and then buy it.", "body": "A 5% discount for buying collateral assets can incentivize the liquidator to liquidate collaterals and then buy it.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#a-5%-discount-for-buying-collateral-assets-can-incentivize-the-liquidator-to-liquidate-collaterals-and-then-buy-it.", "labels": ["OpenZeppelin"]}, {"title": "We have updated our suggestion to make it clearer.", "body": "We have updated our suggestion to make it clearer.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-have-updated-our-suggestion-to-make-it-clearer.", "labels": ["OpenZeppelin"]}, {"title": "[M05] Asset price can be reset by owner", "body": "[M05] Asset price can be reset by owner", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m05]-asset-price-can-be-reset-by-owner", "labels": ["OpenZeppelin"]}, {"title": "addStableCoin function of the", "body": "addStableCoin function of the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#addstablecoin-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "priceDecimal, that will later be used for performing sensible operations such as", "body": "priceDecimal, that will later be used for performing sensible operations such as", "html_url": "https://blog.openzeppelin.com/holdefi-audit#pricedecimal,-that-will-later-be-used-for-performing-sensible-operations-such-as", "labels": ["OpenZeppelin"]}, {"title": "withdrawing collaterals,", "body": "withdrawing collaterals,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawing-collaterals,", "labels": ["OpenZeppelin"]}, {"title": "borrowing market assets, and", "body": "borrowing market assets, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#borrowing-market-assets,-and", "labels": ["OpenZeppelin"]}, {"title": "liquidating a borrower\u2019s collateral on the", "body": "liquidating a borrower\u2019s collateral on the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#liquidating-a-borrower\u2019s-collateral-on-the", "labels": ["OpenZeppelin"]}, {"title": "The problem resides in that the addStableCoin function does not check whether an asset has already been added to the system or not, leading to scenarios where the owner of the contract could reset its value by calling this function multiple times, overwriting the current price of a given asset with the initial priceDecimal value.", "body": "The problem resides in that the addStableCoin function does not check whether an asset has already been added to the system or not, leading to scenarios where the owner of the contract could reset its value by calling this function multiple times, overwriting the current price of a given asset with the initial priceDecimal value.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-problem-resides-in-that-the-addstablecoin-function-does-not-check-whether-an-asset-has-already-been-added-to-the-system-or-not,-leading-to-scenarios-where-the-owner-of-the-contract-could-reset-its-value-by-calling-this-function-multiple-times,-overwriting-the-current-price-of-a-given-asset-with-the-initial-pricedecimal-value.", "labels": ["OpenZeppelin"]}, {"title": "Consider checking whether a given asset price has already been added to the system by checking its existence in the assetPrices mapping before calling the setPrice function inside the addStableCoin function.", "body": "Consider checking whether a given asset price has already been added to the system by checking its existence in the assetPrices mapping before calling the setPrice function inside the addStableCoin function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-checking-whether-a-given-asset-price-has-already-been-added-to-the-system-by-checking-its-existence-in-the-assetprices-mapping-before-calling-the-setprice-function-inside-the-addstablecoin-function.", "labels": ["OpenZeppelin"]}, {"title": "[M06] Markets can become insolvent", "body": "[M06] Markets can become insolvent", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m06]-markets-can-become-insolvent", "labels": ["OpenZeppelin"]}, {"title": "When the value of all collateral is worth less than the value of all borrowed assets, we say a market is insolvent. The Holdefi codebase can do many things to reduce the risk of market insolvency, including: prudent selection of collateral-ratios, incentivizing third-party collateral liquidation, careful selection of which tokens are listed on the platform, etc. However, the risk of insolvency cannot be entirely eliminated, and there are numerous ways a market can become insolvent, for instance:", "body": "When the value of all collateral is worth less than the value of all borrowed assets, we say a market is insolvent. The Holdefi codebase can do many things to reduce the risk of market insolvency, including: prudent selection of collateral-ratios, incentivizing third-party collateral liquidation, careful selection of which tokens are listed on the platform, etc. However, the risk of insolvency cannot be entirely eliminated, and there are numerous ways a market can become insolvent, for instance:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#when-the-value-of-all-collateral-is-worth-less-than-the-value-of-all-borrowed-assets,-we-say-a-market-is-insolvent.-the-holdefi-codebase-can-do-many-things-to-reduce-the-risk-of-market-insolvency,-including:-prudent-selection-of-collateral-ratios,-incentivizing-third-party-collateral-liquidation,-careful-selection-of-which-tokens-are-listed-on-the-platform,-etc.-however,-the-risk-of-insolvency-cannot-be-entirely-eliminated,-and-there-are-numerous-ways-a-market-can-become-insolvent,-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "The price of the underlying (or borrowed) asset makes a big, quick move during a time of high network congestion \u2014 resulting in the market becoming insolvent before enough liquidation transactions can be mined. A similar situation was experienced at the beginning 2020 in the Ethereum network, and specially in Maker\u2019s pricing oracles.", "body": "The price of the underlying (or borrowed) asset makes a big, quick move during a time of high network congestion \u2014 resulting in the market becoming insolvent before enough liquidation transactions can be mined. A similar situation was experienced at the beginning 2020 in the Ethereum network, and specially in Maker\u2019s pricing oracles.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-price-of-the-underlying-(or-borrowed)-asset-makes-a-big,-quick-move-during-a-time-of-high-network-congestion-\u2014-resulting-in-the-market-becoming-insolvent-before-enough-liquidation-transactions-can-be-mined.-a-similar-situation-was-experienced-at-the-beginning-2020-in-the-ethereum-network,-and-specially-in-maker\u2019s-pricing-oracles.", "labels": ["OpenZeppelin"]}, {"title": "The liquidation incentives are not as strong they should be, allowing the accumulation of under-collateralized borrows.", "body": "The liquidation incentives are not as strong they should be, allowing the accumulation of under-collateralized borrows.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidation-incentives-are-not-as-strong-they-should-be,-allowing-the-accumulation-of-under-collateralized-borrows.", "labels": ["OpenZeppelin"]}, {"title": "The price oracle temporarily goes offline during a time of high market volatility. This could result in the oracle not updating the asset prices until after the market has become insolvent. In this case, there will never have been an opportunity for liquidation to occur.", "body": "The price oracle temporarily goes offline during a time of high market volatility. This could result in the oracle not updating the asset prices until after the market has become insolvent. In this case, there will never have been an opportunity for liquidation to occur.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-price-oracle-temporarily-goes-offline-during-a-time-of-high-market-volatility.-this-could-result-in-the-oracle-not-updating-the-asset-prices-until-after-the-market-has-become-insolvent.-in-this-case,-there-will-never-have-been-an-opportunity-for-liquidation-to-occur.", "labels": ["OpenZeppelin"]}, {"title": "The admin or oracle steals enough collateral that the market becomes insolvent.", "body": "The admin or oracle steals enough collateral that the market becomes insolvent.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-admin-or-oracle-steals-enough-collateral-that-the-market-becomes-insolvent.", "labels": ["OpenZeppelin"]}, {"title": "Administrators list an ERC20 token with a later-discovered bug that allows minting tokens arbitrarily. This potentially corrupt tokens can be used as collateral to borrow funds that were never intended to be used as a repayment.", "body": "Administrators list an ERC20 token with a later-discovered bug that allows minting tokens arbitrarily. This potentially corrupt tokens can be used as collateral to borrow funds that were never intended to be used as a repayment.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#administrators-list-an-erc20-token-with-a-later-discovered-bug-that-allows-minting-tokens-arbitrarily.-this-potentially-corrupt-tokens-can-be-used-as-collateral-to-borrow-funds-that-were-never-intended-to-be-used-as-a-repayment.", "labels": ["OpenZeppelin"]}, {"title": "In any case, the effects of an insolvent market could be disastrous. It may result in a \u201crun on the bank\u201d situation, with the last suppliers out losing their money.", "body": "In any case, the effects of an insolvent market could be disastrous. It may result in a \u201crun on the bank\u201d situation, with the last suppliers out losing their money.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-any-case,-the-effects-of-an-insolvent-market-could-be-disastrous.-it-may-result-in-a-\u201crun-on-the-bank\u201d-situation,-with-the-last-suppliers-out-losing-their-money.", "labels": ["OpenZeppelin"]}, {"title": "This risk is not unique to the Holdefi project. All collateralized loans (even non-blockchain loans) have a risk of insolvency. However, it is important to know that this risk does exist, and that it can be difficult to recover from even a small dip into insolvency.", "body": "This risk is not unique to the Holdefi project. All collateralized loans (even non-blockchain loans) have a risk of insolvency. However, it is important to know that this risk does exist, and that it can be difficult to recover from even a small dip into insolvency.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-risk-is-not-unique-to-the-holdefi-project.-all-collateralized-loans-(even-non-blockchain-loans)-have-a-risk-of-insolvency.-however,-it-is-important-to-know-that-this-risk-does-exist,-and-that-it-can-be-difficult-to-recover-from-even-a-small-dip-into-insolvency.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding more targeted tests for these scenarios to better understand the behavior of the protocol, and designing relevant mechanics to make sure the platform operates properly. Also consider communicating the potential risks to the users if needed.", "body": "Consider adding more targeted tests for these scenarios to better understand the behavior of the protocol, and designing relevant mechanics to make sure the platform operates properly. Also consider communicating the potential risks to the users if needed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-adding-more-targeted-tests-for-these-scenarios-to-better-understand-the-behavior-of-the-protocol,-and-designing-relevant-mechanics-to-make-sure-the-platform-operates-properly.-also-consider-communicating-the-potential-risks-to-the-users-if-needed.", "labels": ["OpenZeppelin"]}, {"title": "[M07] Old owner can frontrun the ownerChanger", "body": "[M07] Old owner can frontrun the ownerChanger", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m07]-old-owner-can-frontrun-the-ownerchanger", "labels": ["OpenZeppelin"]}, {"title": "The Ownable contract is a modified version of the OpenZepplin Ownable contract where a third actor is included: the ownerChanger.", "body": "The Ownable contract is a modified version of the OpenZepplin Ownable contract where a third actor is included: the ownerChanger.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownable-contract-is-a-modified-version-of-the-openzepplin-ownable-contract-where-a-third-actor-is-included:-the-ownerchanger.", "labels": ["OpenZeppelin"]}, {"title": "The ownerChanger is can accept an ownership transfer from the old owner to the pendingOwner.", "body": "The ownerChanger is can accept an ownership transfer from the old owner to the pendingOwner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownerchanger-is-can-accept-an-ownership-transfer-from-the-old-owner-to-the-pendingowner.", "labels": ["OpenZeppelin"]}, {"title": "First, to perform a successful ownership transfer, the old owner needs to call the transferOwnership function passing the address of the new desired owner, and then the ownerChanger needs to accept it by calling the acceptTransferOwnership function.", "body": "First, to perform a successful ownership transfer, the old owner needs to call the transferOwnership function passing the address of the new desired owner, and then the ownerChanger needs to accept it by calling the acceptTransferOwnership function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#first,-to-perform-a-successful-ownership-transfer,-the-old-owner-needs-to-call-the-transferownership-function-passing-the-address-of-the-new-desired-owner,-and-then-the-ownerchanger-needs-to-accept-it-by-calling-the-accepttransferownership-function.", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function with the address of the new owner B, address that the", "body": "the transferOwnership function with the address of the new owner B, address that the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function-with-the-address-of-the-new-owner-b,-address-that-the", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function, the old owner A calls", "body": "the acceptTransferOwnership function, the old owner A calls", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function,-the-old-owner-a-calls", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function again with a higher gasPrice and passing another address C as the parameter. In that case, this last transaction would be mined first and just after that", "body": "the transferOwnership function again with a higher gasPrice and passing another address C as the parameter. In that case, this last transaction would be mined first and just after that", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function-again-with-a-higher-gasprice-and-passing-another-address-c-as-the-parameter.-in-that-case,-this-last-transaction-would-be-mined-first-and-just-after-that", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function would confirm the ownership transfer to the undesired address C.", "body": "the acceptTransferOwnership function would confirm the ownership transfer to the undesired address C.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function-would-confirm-the-ownership-transfer-to-the-undesired-address-c.", "labels": ["OpenZeppelin"]}, {"title": "Although it is very unlikely that the old owner would perform such attack, consider changing the acceptTransferOwnership function to ask the ownerChanger the address of the new owner so it can be compared to the pendingOwner submitted by the old owner.", "body": "Although it is very unlikely that the old owner would perform such attack, consider changing the acceptTransferOwnership function to ask the ownerChanger the address of the new owner so it can be compared to the pendingOwner submitted by the old owner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-it-is-very-unlikely-that-the-old-owner-would-perform-such-attack,-consider-changing-the-accepttransferownership-function-to-ask-the-ownerchanger-the-address-of-the-new-owner-so-it-can-be-compared-to-the-pendingowner-submitted-by-the-old-owner.", "labels": ["OpenZeppelin"]}, {"title": "[M08] Excessive indirection", "body": "[M08] Excessive indirection", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m08]-excessive-indirection", "labels": ["OpenZeppelin"]}, {"title": "Due to the massive factorization of certain behaviors under the same function as addressed in the issue \u201c[L08] Overcomplicated return values\u201d, the level of indirection present severely degrades the readability of the code.", "body": "Due to the massive factorization of certain behaviors under the same function as addressed in the issue \u201c[L08] Overcomplicated return values\u201d, the level of indirection present severely degrades the readability of the code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#due-to-the-massive-factorization-of-certain-behaviors-under-the-same-function-as-addressed-in-the-issue-\u201c[l08]-overcomplicated-return-values\u201d,-the-level-of-indirection-present-severely-degrades-the-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "the liquidateBorrowerCollateral function of the", "body": "the liquidateBorrowerCollateral function of the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidateborrowercollateral-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "the clearDebts function, which then would call", "body": "the clearDebts function, which then would call", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-cleardebts-function,-which-then-would-call", "labels": ["OpenZeppelin"]}, {"title": "the updateSupplyIndex function, which would call afterwards", "body": "the updateSupplyIndex function, which would call afterwards", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-updatesupplyindex-function,-which-would-call-afterwards", "labels": ["OpenZeppelin"]}, {"title": "the getCurrentInterestIndex function, and finally jump to the", "body": "the getCurrentInterestIndex function, and finally jump to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcurrentinterestindex-function,-and-finally-jump-to-the", "labels": ["OpenZeppelin"]}, {"title": "the getInterests function.", "body": "the getInterests function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getinterests-function.", "labels": ["OpenZeppelin"]}, {"title": "Right after the updateSupplyIndex call ends, the updatePromotionReserve would be called, which would call the getCurrentPromotion function, and would end up jumping again to the HoldefiSettings contract to call the getInterests function.", "body": "Right after the updateSupplyIndex call ends, the updatePromotionReserve would be called, which would call the getCurrentPromotion function, and would end up jumping again to the HoldefiSettings contract to call the getInterests function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#right-after-the-updatesupplyindex-call-ends,-the-updatepromotionreserve-would-be-called,-which-would-call-the-getcurrentpromotion-function,-and-would-end-up-jumping-again-to-the-holdefisettings-contract-to-call-the-getinterests-function.", "labels": ["OpenZeppelin"]}, {"title": "Note that the example of excessive indirection mentioned above is not the only one triggered by the liquidateBorrowerCollateral function, but just one of many.", "body": "Note that the example of excessive indirection mentioned above is not the only one triggered by the liquidateBorrowerCollateral function, but just one of many.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#note-that-the-example-of-excessive-indirection-mentioned-above-is-not-the-only-one-triggered-by-the-liquidateborrowercollateral-function,-but-just-one-of-many.", "labels": ["OpenZeppelin"]}, {"title": "While this does not pose a security risk per se, it introduces a lot of complexity to important sections of the code, is error prone and difficult to maintain in the long term.", "body": "While this does not pose a security risk per se, it introduces a lot of complexity to important sections of the code, is error prone and difficult to maintain in the long term.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#while-this-does-not-pose-a-security-risk-per-se,-it-introduces-a-lot-of-complexity-to-important-sections-of-the-code,-is-error-prone-and-difficult-to-maintain-in-the-long-term.", "labels": ["OpenZeppelin"]}, {"title": "Consider reducing excessive indirections throughout the code base by simplifying each function, so that they can fulfill one single and clear purpose, and also avoid over-factorizing behaviors in order to improve the readability and maintenance of the project. If there is a reason or limitation that forces this complexity, consider documenting it in the code.", "body": "Consider reducing excessive indirections throughout the code base by simplifying each function, so that they can fulfill one single and clear purpose, and also avoid over-factorizing behaviors in order to improve the readability and maintenance of the project. If there is a reason or limitation that forces this complexity, consider documenting it in the code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-reducing-excessive-indirections-throughout-the-code-base-by-simplifying-each-function,-so-that-they-can-fulfill-one-single-and-clear-purpose,-and-also-avoid-over-factorizing-behaviors-in-order-to-improve-the-readability-and-maintenance-of-the-project.-if-there-is-a-reason-or-limitation-that-forces-this-complexity,-consider-documenting-it-in-the-code.", "labels": ["OpenZeppelin"]}, {"title": "As you mentioned, this does not pose a security risk per se. And it\u2019s not a medium severity issue. It\u2019s just a suggestion.Also, we can use the limited number of values in each function. If we want to simplify functions, we are faced with this error: Stack too deep, try removing local variables.", "body": "As you mentioned, this does not pose a security risk per se. And it\u2019s not a medium severity issue. It\u2019s just a suggestion.Also, we can use the limited number of values in each function. If we want to simplify functions, we are faced with this error: Stack too deep, try removing local variables.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-you-mentioned,-this-does-not-pose-a-security-risk-per-se.-and-it\u2019s-not-a-medium-severity-issue.-it\u2019s-just-a-suggestion.also,-we-can-use-the-limited-number-of-values-in-each-function.-if-we-want-to-simplify-functions,-we-are-faced-with-this-error:-stack-too-deep,-try-removing-local-variables.", "labels": ["OpenZeppelin"]}, {"title": "[M09] Not using OpenZeppelin contracts", "body": "[M09] Not using OpenZeppelin contracts", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m09]-not-using-openzeppelin-contracts", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.", "body": "OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#openzeppelin-maintains-a-library-of-standard,-audited,-community-reviewed,-and-battle-tested-smart-contracts.instead-of-always-importing-these-contracts,-the-holdefi-project-reimplements-them-in-some-cases,-while-in-other-cases-it-just-copies-them.", "labels": ["OpenZeppelin"]}, {"title": "This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.", "body": "This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-increases-the-amount-of-code-that-the-holdefi-team-will-have-to-maintain-and-misses-all-the-improvements-and-bug-fixes-that-the-openzeppelin-team-is-constantly-implementing-with-the-help-of-the-community.", "labels": ["OpenZeppelin"]}, {"title": "In particular, the following contracts and libraries are being reimplemented or copied:", "body": "In particular, the following contracts and libraries are being reimplemented or copied:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-particular,-the-following-contracts-and-libraries-are-being-reimplemented-or-copied:", "labels": ["OpenZeppelin"]}, {"title": "the Ownable contract can be replaced with the OpenZeppelin\u2019s Ownable contract", "body": "the Ownable contract can be replaced with the OpenZeppelin\u2019s Ownable contract", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownable-contract-can-be-replaced-with-the-openzeppelin\u2019s-ownable-contract", "labels": ["OpenZeppelin"]}, {"title": "the SafeMath library can be replaced with the OpenZeppelin\u2019s SafeMath library", "body": "the SafeMath library can be replaced with the OpenZeppelin\u2019s SafeMath library", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-safemath-library-can-be-replaced-with-the-openzeppelin\u2019s-safemath-library", "labels": ["OpenZeppelin"]}, {"title": "The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelin\u2019s IERC20.sol interface", "body": "The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelin\u2019s IERC20.sol interface", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-erc20-interface-defined-in-line-3-of-collateralswallet.sol-and-line-25-of-holdefi.sol-can-be-replaced-with-the-openzeppelin\u2019s-ierc20.sol-interface", "labels": ["OpenZeppelin"]}, {"title": "Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.", "body": "Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-importing-the-openzeppelin-contracts-instead-of-reimplementing-or-copying-them.-these-contracts-can-be-extended-to-add-the-extra-functionalities-required-by-holdefi.consider-always-using-the-full-erc-interfaces-so-that-obviously-non-compliant-implementations-can-be-easily-excluded.consider-updating-the-library-to-its-latest-stable-version-for-solidity-0.5.16.", "labels": ["OpenZeppelin"]}, {"title": "If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and can\u2019t remove them. For ERC20 interface, we don\u2019t need all functions so web just use a reduced version of IERC20.sol interface.", "body": "If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and can\u2019t remove them. For ERC20 interface, we don\u2019t need all functions so web just use a reduced version of IERC20.sol interface.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#if-we-use-exactly-openzeppelin-contracts,-we-will-miss-some-added-features-like-ownerchanger.-but-we-need-them-and-can\u2019t-remove-them.-for-erc20-interface,-we-don\u2019t-need-all-functions-so-web-just-use-a-reduced-version-of-ierc20.sol-interface.", "labels": ["OpenZeppelin"]}, {"title": "[M10] Lack of events emission after sensitive actions", "body": "[M10] Lack of events emission after sensitive actions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m10]-lack-of-events-emission-after-sensitive-actions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:", "body": "Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi-project-codebase,-there-are-several-cases-where-sensitive-actions-are-performed-but-there-are-no-events-being-emitted,-or-the-existent-emitted-events-miss-important-parameters.our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "In the CollateralsWallet contract:\u2013 The withdraw function should emit a CollateralAssetWithdrawn event\u2013 The fallback function should emit a TransferReceived event", "body": "In the CollateralsWallet contract:\u2013 The withdraw function should emit a CollateralAssetWithdrawn event\u2013 The fallback function should emit a TransferReceived event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-collateralswallet-contract:\u2013-the-withdraw-function-should-emit-a-collateralassetwithdrawn-event\u2013-the-fallback-function-should-emit-a-transferreceived-event", "labels": ["OpenZeppelin"]}, {"title": "updatePromotionReserve function should emit a", "body": "updatePromotionReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#updatepromotionreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "withdrawLiquidationReserve function should emit a", "body": "withdrawLiquidationReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawliquidationreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "withdrawPromotionReserve function should emit a", "body": "withdrawPromotionReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawpromotionreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "UpdateBorrowIndex event should print the", "body": "UpdateBorrowIndex event should print the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#updateborrowindex-event-should-print-the", "labels": ["OpenZeppelin"]}, {"title": "pause function should emit a", "body": "pause function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#pause-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "unpause function should emit a", "body": "unpause function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#unpause-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "setPauser function should emit a", "body": "setPauser function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpauser-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "setPauseDuration function should emit a", "body": "setPauseDuration function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpauseduration-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "In the Ownable contract, the constructor should emit an OwnershipTransferred event", "body": "In the Ownable contract, the constructor should emit an OwnershipTransferred event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-ownable-contract,-the-constructor-should-emit-an-ownershiptransferred-event", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event", "body": "In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefiprices-contract,-the-addstablecoin-function-should-emit-a-stablecoinadded-event", "labels": ["OpenZeppelin"]}, {"title": "As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.", "body": "As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-a-general-rule,-consider-emitting-events-appropriately-when-performing-sensitive-changes-to-storage-variables,-and-consider-emitting-the-most-important-variables-involved-in-those-changes.", "labels": ["OpenZeppelin"]}, {"title": "[M11] Missing docstrings", "body": "[M11] Missing docstrings", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m11]-missing-docstrings", "labels": ["OpenZeppelin"]}, {"title": "All the contracts and functions in the Holdefi\u2019s codebase lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness.", "body": "All the contracts and functions in the Holdefi\u2019s codebase lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#all-the-contracts-and-functions-in-the-holdefi\u2019s-codebase-lack-documentation.-this-hinders-reviewers\u2019-understanding-of-the-code\u2019s-intention,-which-is-fundamental-to-correctly-assess-not-only-security,-but-also-correctness.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.", "body": "Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#additionally,-docstrings-improve-readability-and-ease-maintenance.-they-should-explicitly-explain-the-purpose-or-intention-of-the-functions,-the-scenarios-under-which-they-can-fail,-the-roles-allowed-to-call-them,-the-values-returned,-and-the-events-emitted.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-thoroughly-documenting-all-functions-(and-their-parameters)-that-are-part-of-the-contracts\u2019-public-api.-functions-implementing-sensitive-functionality,-even-if-those-are-not-public,-should-be-clearly-documented-as-well.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "This is not a bug. This is just a suggestion", "body": "This is not a bug. This is just a suggestion", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-is-not-a-bug.-this-is-just-a-suggestion", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizaglnacuymiuymgnsyxnzjtnejtiyy3vzdg9tlwxpbmslmjilm0ulm0mlmjbqcmv2aw91cyuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0nidxr0b24lmjbvbmnsawnrjtnejtiyy3vzdg9tc2nyb2xsjti4jti5jtiyjtnfjtndysuymghyzwylm0qlmjilmjnsb3clmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfbmv4dcuymcuzrsuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0mlmkzkaxylm0u=", "labels": ["OpenZeppelin"]}, {"title": "[L01] Transfer method is used to send ETH", "body": "[L01] Transfer method is used to send ETH", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l01]-transfer-method-is-used-to-send-eth", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the caller\u2019s address with the holdefiContract address is compared.", "body": "The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the caller\u2019s address with the holdefiContract address is compared.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-platform-uses-the-collateralswallet-contract-to-store-the-collateral-assets-of-the-project.-there,-the-contract-implements-functionalities-such-as-withdrawing-the-collaterals-or-accepting-eth-through-the-payable-fallback-function.-to-restrict-who-can-call-these-functions,-the-caller\u2019s-address-with-the-holdeficontract-address-is-compared.", "labels": ["OpenZeppelin"]}, {"title": "Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.", "body": "Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#meanwhile,-the-holdefi-contract-allows-users-to-deposit-assets-as-collaterals-to-then-increase-their-collateral-balance-which-allows-them-to-borrow-other-assets-of-the-platform.", "labels": ["OpenZeppelin"]}, {"title": "In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores the balance in an internal mapping.", "body": "In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores the balance in an internal mapping.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-particular,-if-someone-deposits-eth,-the-user-has-to-call-the-collateralize-payable-function-while-sending-the-amount-of-eth-they-want-to-add-in-the-same-transaction.-once-the-holdefi-contract-checks-if-the-eth-market-is-active,-it-transfers-the-eth-to-the-collateralswallet-contract-and-stores-the-balance-in-an-internal-mapping.", "labels": ["OpenZeppelin"]}, {"title": "The method used to transfer the ETH to the CollateralsWallet contract is a low level call, which is the current correct way to transfer ETH between addresses due to the fact that the transfer method relies on the fact that gas costs are always constant, but since the Istanbul hard fork, these gas prices cannot be considered constants and contracts that use them may break in the future.", "body": "The method used to transfer the ETH to the CollateralsWallet contract is a low level call, which is the current correct way to transfer ETH between addresses due to the fact that the transfer method relies on the fact that gas costs are always constant, but since the Istanbul hard fork, these gas prices cannot be considered constants and contracts that use them may break in the future.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-method-used-to-transfer-the-eth-to-the-collateralswallet-contract-is-a-low-level-call,-which-is-the-current-correct-way-to-transfer-eth-between-addresses-due-to-the-fact-that-the-transfer-method-relies-on-the-fact-that-gas-costs-are-always-constant,-but-since-the-istanbul-hard-fork,-these-gas-prices-cannot-be-considered-constants-and-contracts-that-use-them-may-break-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "L214,", "body": "L214,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l214,", "labels": ["OpenZeppelin"]}, {"title": "L325,", "body": "L325,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l325,", "labels": ["OpenZeppelin"]}, {"title": "L397, and", "body": "L397, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l397,-and", "labels": ["OpenZeppelin"]}, {"title": "L778 from the", "body": "L778 from the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l778-from-the", "labels": ["OpenZeppelin"]}, {"title": "Consider using the low level call to send ETH as it was implemented in L254-L255 or, even better, replacing all the current implementations to send ETH with the OpenZeppelin\u2019s sendValue method.", "body": "Consider using the low level call to send ETH as it was implemented in L254-L255 or, even better, replacing all the current implementations to send ETH with the OpenZeppelin\u2019s sendValue method.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-using-the-low-level-call-to-send-eth-as-it-was-implemented-in-l254-l255-or,-even-better,-replacing-all-the-current-implementations-to-send-eth-with-the-openzeppelin\u2019s-sendvalue-method.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Collaterals and markets can be updated after being deactivated", "body": "[L02] Collaterals and markets can be updated after being deactivated", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l02]-collaterals-and-markets-can-be-updated-after-being-deactivated", "labels": ["OpenZeppelin"]}, {"title": "HoldefiSettings contract defines a mapping of", "body": "HoldefiSettings contract defines a mapping of", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefisettings-contract-defines-a-mapping-of", "labels": ["OpenZeppelin"]}, {"title": "collateralAssets to store", "body": "collateralAssets to store", "html_url": "https://blog.openzeppelin.com/holdefi-audit#collateralassets-to-store", "labels": ["OpenZeppelin"]}, {"title": "information about collaterals, and a mapping of", "body": "information about collaterals, and a mapping of", "html_url": "https://blog.openzeppelin.com/holdefi-audit#information-about-collaterals,-and-a-mapping-of", "labels": ["OpenZeppelin"]}, {"title": "marketAssets to store information about markets. Even though in both data structures there is an", "body": "marketAssets to store information about markets. Even though in both data structures there is an", "html_url": "https://blog.openzeppelin.com/holdefi-audit#marketassets-to-store-information-about-markets.-even-though-in-both-data-structures-there-is-an", "labels": ["OpenZeppelin"]}, {"title": "setValueToLoanRate,", "body": "setValueToLoanRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setvaluetoloanrate,", "labels": ["OpenZeppelin"]}, {"title": "setPenaltyRate,", "body": "setPenaltyRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpenaltyrate,", "labels": ["OpenZeppelin"]}, {"title": "setBonusRate,", "body": "setBonusRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setbonusrate,", "labels": ["OpenZeppelin"]}, {"title": "removeMarket,", "body": "removeMarket,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#removemarket,", "labels": ["OpenZeppelin"]}, {"title": "setSuppliersShareRate, and the", "body": "setSuppliersShareRate, and the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setsupplierssharerate,-and-the", "labels": ["OpenZeppelin"]}, {"title": "setBorrowRate functions, leading to scenarios where deactivated collaterals and markets can be updated, and undesired event emissions will be triggered.", "body": "setBorrowRate functions, leading to scenarios where deactivated collaterals and markets can be updated, and undesired event emissions will be triggered.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setborrowrate-functions,-leading-to-scenarios-where-deactivated-collaterals-and-markets-can-be-updated,-and-undesired-event-emissions-will-be-triggered.", "labels": ["OpenZeppelin"]}, {"title": "As addressed in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, consider renaming the functions to reflect the current functionality of the code, and adding a third state for those markets that are still operational but are not active, while checking the state of a given collateral or market at the beginning of the functions mentioned above.", "body": "As addressed in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, consider renaming the functions to reflect the current functionality of the code, and adding a third state for those markets that are still operational but are not active, while checking the state of a given collateral or market at the beginning of the functions mentioned above.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-addressed-in-the-issue-\u201c[h02]-markets-are-not-being-properly-removed-from-the-markets-list\u201d,-consider-renaming-the-functions-to-reflect-the-current-functionality-of-the-code,-and-adding-a-third-state-for-those-markets-that-are-still-operational-but-are-not-active,-while-checking-the-state-of-a-given-collateral-or-market-at-the-beginning-of-the-functions-mentioned-above.", "labels": ["OpenZeppelin"]}, {"title": "Removing a market o collateral in the Holdefi means that nobody can supply or borrow or add collateral. But old users can withdraw supply or repay borrow. So we can set new rates (VTL rate, bonus rate, \u2026) for them.", "body": "Removing a market o collateral in the Holdefi means that nobody can supply or borrow or add collateral. But old users can withdraw supply or repay borrow. So we can set new rates (VTL rate, bonus rate, \u2026) for them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#removing-a-market-o-collateral-in-the-holdefi-means-that-nobody-can-supply-or-borrow-or-add-collateral.-but-old-users-can-withdraw-supply-or-repay-borrow.-so-we-can-set-new-rates-(vtl-rate,-bonus-rate,-\u2026)-for-them.", "labels": ["OpenZeppelin"]}, {"title": "[L03] Borrowers are allowed to operatate after the maximum period has passed", "body": "[L03] Borrowers are allowed to operatate after the maximum period has passed", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l03]-borrowers-are-allowed-to-operatate-after-the-maximum-period-has-passed", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi contract establishes a maximum period of time in which a borrower can be sure that his assets will not be liquidated. This period is defined as the number of seconds in a regular year.", "body": "The Holdefi contract establishes a maximum period of time in which a borrower can be sure that his assets will not be liquidated. This period is defined as the number of seconds in a regular year.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-contract-establishes-a-maximum-period-of-time-in-which-a-borrower-can-be-sure-that-his-assets-will-not-be-liquidated.-this-period-is-defined-as-the-number-of-seconds-in-a-regular-year.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, this restriction is not being applied on all the functions, and it is only used as a limit in the liquidateBorrowerCollateral. This could lead into a hypothetical scenario where a borrower could continue with his borrowing for a period greater than that year in the case where there are no liquidators performing their liquidation duty.", "body": "Nevertheless, this restriction is not being applied on all the functions, and it is only used as a limit in the liquidateBorrowerCollateral. This could lead into a hypothetical scenario where a borrower could continue with his borrowing for a period greater than that year in the case where there are no liquidators performing their liquidation duty.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-this-restriction-is-not-being-applied-on-all-the-functions,-and-it-is-only-used-as-a-limit-in-the-liquidateborrowercollateral.-this-could-lead-into-a-hypothetical-scenario-where-a-borrower-could-continue-with-his-borrowing-for-a-period-greater-than-that-year-in-the-case-where-there-are-no-liquidators-performing-their-liquidation-duty.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, a borrower in such condition who has an account which has been a whole year without activity could frontrun a liquidator when the transaction that calls the liquidateBorrowerCollateral function enters into the mempool, maximizing the period of time for his position beyond the established limit.", "body": "Additionally, a borrower in such condition who has an account which has been a whole year without activity could frontrun a liquidator when the transaction that calls the liquidateBorrowerCollateral function enters into the mempool, maximizing the period of time for his position beyond the established limit.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#additionally,-a-borrower-in-such-condition-who-has-an-account-which-has-been-a-whole-year-without-activity-could-frontrun-a-liquidator-when-the-transaction-that-calls-the-liquidateborrowercollateral-function-enters-into-the-mempool,-maximizing-the-period-of-time-for-his-position-beyond-the-established-limit.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding requirements in all functions related to the financial aspect of the contract to restrict the borrower\u2019s actions after the maximum period of time has been achieved instead of relying on the liquidators\u2019 actions only.", "body": "Consider adding requirements in all functions related to the financial aspect of the contract to restrict the borrower\u2019s actions after the maximum period of time has been achieved instead of relying on the liquidators\u2019 actions only.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-adding-requirements-in-all-functions-related-to-the-financial-aspect-of-the-contract-to-restrict-the-borrower\u2019s-actions-after-the-maximum-period-of-time-has-been-achieved-instead-of-relying-on-the-liquidators\u2019-actions-only.", "labels": ["OpenZeppelin"]}, {"title": "Alternatively, if there is a good reason for this design consider documenting it in the docstrings of the affected functions.", "body": "Alternatively, if there is a good reason for this design consider documenting it in the docstrings of the affected functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#alternatively,-if-there-is-a-good-reason-for-this-design-consider-documenting-it-in-the-docstrings-of-the-affected-functions.", "labels": ["OpenZeppelin"]}, {"title": "In this case, there is no problem that borrowers are allowed to operatate just after the maximum period has passed. His/her account will be liquidated in the first transaction after this period. The reason that we added this time is that if the borrower dies or loses his/her wallet or any other reason that can not get his/her debt back into the platform, suppliers be sure that their tokens will be back. There is no problem if borrower is alive and can perform any action with Holdefi contract after one year.", "body": "In this case, there is no problem that borrowers are allowed to operatate just after the maximum period has passed. His/her account will be liquidated in the first transaction after this period. The reason that we added this time is that if the borrower dies or loses his/her wallet or any other reason that can not get his/her debt back into the platform, suppliers be sure that their tokens will be back. There is no problem if borrower is alive and can perform any action with Holdefi contract after one year.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-this-case,-there-is-no-problem-that-borrowers-are-allowed-to-operatate-just-after-the-maximum-period-has-passed.-his/her-account-will-be-liquidated-in-the-first-transaction-after-this-period.-the-reason-that-we-added-this-time-is-that-if-the-borrower-dies-or-loses-his/her-wallet-or-any-other-reason-that-can-not-get-his/her-debt-back-into-the-platform,-suppliers-be-sure-that-their-tokens-will-be-back.-there-is-no-problem-if-borrower-is-alive-and-can-perform-any-action-with-holdefi-contract-after-one-year.", "labels": ["OpenZeppelin"]}, {"title": "[L04] OwnerChanger cannot renounce its role", "body": "[L04] OwnerChanger cannot renounce its role", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l04]-ownerchanger-cannot-renounce-its-role", "labels": ["OpenZeppelin"]}, {"title": "The role management scheme implemented in the Ownable contract does not include a way for the ownerChanger to renounce the role they have been granted. This might become problematic in a scenario where the account wishes to renounce the role after the trusted device holding the private keys has been compromised.", "body": "The role management scheme implemented in the Ownable contract does not include a way for the ownerChanger to renounce the role they have been granted. This might become problematic in a scenario where the account wishes to renounce the role after the trusted device holding the private keys has been compromised.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-role-management-scheme-implemented-in-the-ownable-contract-does-not-include-a-way-for-the-ownerchanger-to-renounce-the-role-they-have-been-granted.-this-might-become-problematic-in-a-scenario-where-the-account-wishes-to-renounce-the-role-after-the-trusted-device-holding-the-private-keys-has-been-compromised.", "labels": ["OpenZeppelin"]}, {"title": "the current owner may want to transfer its ownership with", "body": "the current owner may want to transfer its ownership with", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-current-owner-may-want-to-transfer-its-ownership-with", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function, the", "body": "the transferOwnership function, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function,-the", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function, and as the", "body": "the acceptTransferOwnership function, and as the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function,-and-as-the", "labels": ["OpenZeppelin"]}, {"title": "Consider using multisig accounts for both roles to prevent that one of them becomes compromised, and adding the option to renounce the ownerChanger role if needed.", "body": "Consider using multisig accounts for both roles to prevent that one of them becomes compromised, and adding the option to renounce the ownerChanger role if needed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-using-multisig-accounts-for-both-roles-to-prevent-that-one-of-them-becomes-compromised,-and-adding-the-option-to-renounce-the-ownerchanger-role-if-needed.", "labels": ["OpenZeppelin"]}, {"title": "[L05] Pauser accounts can reset the pause period indefinitely", "body": "[L05] Pauser accounts can reset the pause period indefinitely", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l05]-pauser-accounts-can-reset-the-pause-period-indefinitely", "labels": ["OpenZeppelin"]}, {"title": "The HoldefiPauser contract implements a pausable functionality for certain cases. Each one of them are assigned to a specific index. Then, the timestamp of when a pause action has been triggered for a specific case is tracked in the paused array by using its index.", "body": "The HoldefiPauser contract implements a pausable functionality for certain cases. Each one of them are assigned to a specific index. Then, the timestamp of when a pause action has been triggered for a specific case is tracked in the paused array by using its index.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefipauser-contract-implements-a-pausable-functionality-for-certain-cases.-each-one-of-them-are-assigned-to-a-specific-index.-then,-the-timestamp-of-when-a-pause-action-has-been-triggered-for-a-specific-case-is-tracked-in-the-paused-array-by-using-its-index.", "labels": ["OpenZeppelin"]}, {"title": "This feature provides child contracts with a system overhaul in cases that an unexpected event occurs and part of the code needs to be stopped. This feature can only be called by the owner or the pauser, but on the other hand, the unpause function can only be called by the owner.", "body": "This feature provides child contracts with a system overhaul in cases that an unexpected event occurs and part of the code needs to be stopped. This feature can only be called by the owner or the pauser, but on the other hand, the unpause function can only be called by the owner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-feature-provides-child-contracts-with-a-system-overhaul-in-cases-that-an-unexpected-event-occurs-and-part-of-the-code-needs-to-be-stopped.-this-feature-can-only-be-called-by-the-owner-or-the-pauser,-but-on-the-other-hand,-the-unpause-function-can-only-be-called-by-the-owner.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, if a particular functionality has been paused, in which a pauseDuration should be waited to have the paused functionality back, the pauser can re-call the pause function and reset the timer for that functionality, being possible to extend indefinitely the paused period. If this duality of having a bounded period that can be extended is the intended, the same could be implemented with a better design using a flag variable instead of a timestamp variable.", "body": "Nevertheless, if a particular functionality has been paused, in which a pauseDuration should be waited to have the paused functionality back, the pauser can re-call the pause function and reset the timer for that functionality, being possible to extend indefinitely the paused period. If this duality of having a bounded period that can be extended is the intended, the same could be implemented with a better design using a flag variable instead of a timestamp variable.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-if-a-particular-functionality-has-been-paused,-in-which-a-pauseduration-should-be-waited-to-have-the-paused-functionality-back,-the-pauser-can-re-call-the-pause-function-and-reset-the-timer-for-that-functionality,-being-possible-to-extend-indefinitely-the-paused-period.-if-this-duality-of-having-a-bounded-period-that-can-be-extended-is-the-intended,-the-same-could-be-implemented-with-a-better-design-using-a-flag-variable-instead-of-a-timestamp-variable.", "labels": ["OpenZeppelin"]}, {"title": "Consider modifying the functionality to prevent multiple resets of the pause period by the pausers accounts, or documenting this if it is the expected behavior.", "body": "Consider modifying the functionality to prevent multiple resets of the pause period by the pausers accounts, or documenting this if it is the expected behavior.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-modifying-the-functionality-to-prevent-multiple-resets-of-the-pause-period-by-the-pausers-accounts,-or-documenting-this-if-it-is-the-expected-behavior.", "labels": ["OpenZeppelin"]}, {"title": "[L06] Parameter\u2019s time-off periods are uneven", "body": "[L06] Parameter\u2019s time-off periods are uneven", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l06]-parameter\u2019s-time-off-periods-are-uneven", "labels": ["OpenZeppelin"]}, {"title": "HoldefiSettings contract uses", "body": "HoldefiSettings contract uses", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefisettings-contract-uses", "labels": ["OpenZeppelin"]}, {"title": "a 10-day time-off period to prevent the owner to perform actions such as an increase in", "body": "a 10-day time-off period to prevent the owner to perform actions such as an increase in", "html_url": "https://blog.openzeppelin.com/holdefi-audit#a-10-day-time-off-period-to-prevent-the-owner-to-perform-actions-such-as-an-increase-in", "labels": ["OpenZeppelin"]}, {"title": "the borrowRate,", "body": "the borrowRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-borrowrate,", "labels": ["OpenZeppelin"]}, {"title": "the suppliersShareRate,", "body": "the suppliersShareRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-supplierssharerate,", "labels": ["OpenZeppelin"]}, {"title": "the valueToLoanRate, and", "body": "the valueToLoanRate, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-valuetoloanrate,-and", "labels": ["OpenZeppelin"]}, {"title": "the penaltyRate.", "body": "the penaltyRate.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-penaltyrate.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, if the owner accidentally changes one of these values and sets up a lower value by mistake, a 10-day time-off period will have to be awaited before the parameters can be corrected, possibly affecting the finances of the platform in a drastic manner.", "body": "Nevertheless, if the owner accidentally changes one of these values and sets up a lower value by mistake, a 10-day time-off period will have to be awaited before the parameters can be corrected, possibly affecting the finances of the platform in a drastic manner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-if-the-owner-accidentally-changes-one-of-these-values-and-sets-up-a-lower-value-by-mistake,-a-10-day-time-off-period-will-have-to-be-awaited-before-the-parameters-can-be-corrected,-possibly-affecting-the-finances-of-the-platform-in-a-drastic-manner.", "labels": ["OpenZeppelin"]}, {"title": "In addition to this, the awaiting period cannot be changed even by the owner. This means that once the platform is launched, if this period is too high, it will not allow the platform to compensate the dynamics of the market quickly enough.", "body": "In addition to this, the awaiting period cannot be changed even by the owner. This means that once the platform is launched, if this period is too high, it will not allow the platform to compensate the dynamics of the market quickly enough.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-addition-to-this,-the-awaiting-period-cannot-be-changed-even-by-the-owner.-this-means-that-once-the-platform-is-launched,-if-this-period-is-too-high,-it-will-not-allow-the-platform-to-compensate-the-dynamics-of-the-market-quickly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Consider simulating and documenting the selection of these unchangeable values, and taking extra caution before updating these parameters.", "body": "Consider simulating and documenting the selection of these unchangeable values, and taking extra caution before updating these parameters.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-simulating-and-documenting-the-selection-of-these-unchangeable-values,-and-taking-extra-caution-before-updating-these-parameters.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s not a bug. It\u2019s just a suggestion and a warning. We have to be careful about setting these parameters. But these parameters must exist for users to trust us and prove to them that we can\u2019t manipulate the platform.", "body": "It\u2019s not a bug. It\u2019s just a suggestion and a warning. We have to be careful about setting these parameters. But these parameters must exist for users to trust us and prove to them that we can\u2019t manipulate the platform.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it\u2019s-not-a-bug.-it\u2019s-just-a-suggestion-and-a-warning.-we-have-to-be-careful-about-setting-these-parameters.-but-these-parameters-must-exist-for-users-to-trust-us-and-prove-to-them-that-we-can\u2019t-manipulate-the-platform.", "labels": ["OpenZeppelin"]}, {"title": "[L07] Unneeded public visibility in some functions", "body": "[L07] Unneeded public visibility in some functions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l07]-unneeded-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi codebase, there are situations in which functions have a public visibility although those are not called by any other function from the same contract. Some of them are:", "body": "In the Holdefi codebase, there are situations in which functions have a public visibility although those are not called by any other function from the same contract. Some of them are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-codebase,-there-are-situations-in-which-functions-have-a-public-visibility-although-those-are-not-called-by-any-other-function-from-the-same-contract.-some-of-them-are:", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPrices contract, the addStableCoin function", "body": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions  In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter  To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.  [L08] Overcomplicated return values  Throughout the projects codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:  The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.  The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.  Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.  Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.  [L09] Lack of indexed parameters in events  Throughout the Holdefis codebase, none of the parameters in the events defined in the contracts are indexed.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  [L10] Lack of input validation  Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:  The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.  The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.  The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.  Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.  [L11] Semantic overload  Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:  In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.  Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.  In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the arrays getter.  This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.  Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.  Update: Not fixed. Holdefis statement for this issue:  You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didnt explain that what is the issue.  We have updated our suggestion to make it clearer.  [L12] Default variable declaration values are used during calculations  In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the functions body, as addressed in the issue [N06] Named return variables, but also there are places where the local variable is not assigned with an initial value.  Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.  In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the functions return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.  Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.  Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.  [L13] Use of magic constants  There are several occurrences of magic constants in Holdefis codebase. Some examples are:  Line 617, the  Line 655, the  161,  174,  234,  248,  261,  298,  298,  298,  359,  382,  429,  464, and  481 when calling the  Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.  In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.  Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the codes maintenance.  [L14] Tests not passing successfully  The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.  Although the test suite was left outside of the audits scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.  Update: Not fixed. Holdefis statement on this issue:  These fails are because of very little time difference, and its not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.  [L15] README file is empty  The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.  Consider following Standard Readme to define the structure and contents for the README file.  Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.  Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.  Update: Not fixed. Holdefis statement for this issue:  Its not a bug as well. We will add information in the readme file of course.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Notes & Additional Information  [N01] Variables declared as uint instead of uint256  To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.  [N02] Repeated access control in the code  The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contracts address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.  Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.  Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.  [N03] Not following the Checks-Effects-Interactions pattern  Throughout the projects codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.  Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.  Update: Not fixed. Holdefis statement for this issue:  We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.  In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.  [N04] Inconsistent coding style  Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  [N05] Floating Solidity compiler versions  It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.  Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.  Consider fixing all the dependencies to the same stable Solidity version.  [N06] Named return variables  There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.  Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.  [N07] Timestamp may not be reliable  The Holdefis codebase uses the block.timestamp as part of the calculations and time checks.  Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.  Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.  Update: Not fixed. Holdefis statement for this issue:  As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesnt change anything and miner cant make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence  We have updated our suggestion to make it clearer.  [N08] Unnecessary imports  In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.  [N09] Unused events  Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.  [N10] Misleading comments  Line 160: Should say Deposit ERC20 assets as supply  Line 184: The  Line 592: The  Line 607: The  On CollateralsWallet.sol: Line 19: The withrdaw function not only handles tokens, but also ETH  Consider updating the comments to more accurately describe the purpose and effect of the codebase.  [N11] Misleading function and variable names  To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:  isPause to  newOwnerChanger to  functionsNum to  newPaused to  newUnpaused to  secondsPerTenDays to  getMarket to  newOwnerChanger to  Market to  Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefiprices-contract,-the-addstablecoin-function", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions", "body": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefipauser-contract,-the-batchpause-and-the-batchunpause-functions", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter", "body": "In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract,-the-getmarket-function.-this-function-returns-true-if-a-certain-market-is-whitelisted,-but-this-information-can-be-known-by-using-the-marketassets-getter", "labels": ["OpenZeppelin"]}, {"title": "To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.", "body": "To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-readability-and-to-reduce-the-attack-surface,-consider-reducing-the-visibility-of-these-functions-and-any-similar-case-to-external,-and-consider-reducing-the-visibility-of-the-marketassets-variable-if-the-getmarket-function-is-not-removed-from-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[L08] Overcomplicated return values", "body": "Throughout the projects codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:  The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.  The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.  Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.  Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.  [L09] Lack of indexed parameters in events  Throughout the Holdefis codebase, none of the parameters in the events defined in the contracts are indexed.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  [L10] Lack of input validation  Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:  The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.  The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.  The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.  Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.  [L11] Semantic overload  Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:  In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.  Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.  In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the arrays getter.  This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.  Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.  Update: Not fixed. Holdefis statement for this issue:  You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didnt explain that what is the issue.  We have updated our suggestion to make it clearer.  [L12] Default variable declaration values are used during calculations  In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the functions body, as addressed in the issue [N06] Named return variables, but also there are places where the local variable is not assigned with an initial value.  Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.  In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the functions return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.  Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.  Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.  [L13] Use of magic constants  There are several occurrences of magic constants in Holdefis codebase. Some examples are:  Line 617, the  Line 655, the  161,  174,  234,  248,  261,  298,  298,  298,  359,  382,  429,  464, and  481 when calling the  Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.  In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.  Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the codes maintenance.  [L14] Tests not passing successfully  The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.  Although the test suite was left outside of the audits scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.  Update: Not fixed. Holdefis statement on this issue:  These fails are because of very little time difference, and its not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.  [L15] README file is empty  The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.  Consider following Standard Readme to define the structure and contents for the README file.  Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.  Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.  Update: Not fixed. Holdefis statement for this issue:  Its not a bug as well. We will add information in the readme file of course.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Notes & Additional Information  [N01] Variables declared as uint instead of uint256  To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.  [N02] Repeated access control in the code  The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contracts address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.  Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.  Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.  [N03] Not following the Checks-Effects-Interactions pattern  Throughout the projects codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.  Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.  Update: Not fixed. Holdefis statement for this issue:  We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.  In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.  [N04] Inconsistent coding style  Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  [N05] Floating Solidity compiler versions  It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.  Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.  Consider fixing all the dependencies to the same stable Solidity version.  [N06] Named return variables  There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.  Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.  [N07] Timestamp may not be reliable  The Holdefis codebase uses the block.timestamp as part of the calculations and time checks.  Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.  Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.  Update: Not fixed. Holdefis statement for this issue:  As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesnt change anything and miner cant make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence  We have updated our suggestion to make it clearer.  [N08] Unnecessary imports  In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.  [N09] Unused events  Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.  [N10] Misleading comments  Line 160: Should say Deposit ERC20 assets as supply  Line 184: The  Line 592: The  Line 607: The  On CollateralsWallet.sol: Line 19: The withrdaw function not only handles tokens, but also ETH  Consider updating the comments to more accurately describe the purpose and effect of the codebase.  [N11] Misleading function and variable names  To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:  isPause to  newOwnerChanger to  functionsNum to  newPaused to  newUnpaused to  secondsPerTenDays to  getMarket to  newOwnerChanger to  Market to  Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l08]-overcomplicated-return-values", "labels": ["OpenZeppelin"]}, {"title": "Throughout the project\u2019s codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:", "body": "Throughout the project\u2019s codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-project\u2019s-codebase,-functions-that-return-several-variables-are-implemented,-but-when-calling-these-functions,-only-a-few-or-just-one-return-parameter-is-used.some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.", "body": "The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcollateral-function-in-the-holdefisettings-contract-returns-the-isactive,-valuetoloanrate,-penaltyrate,-and-bonusrate-attributes,-but-when-this-function-is-called-in-the-holdefi-contract,-only-one-of-these-variables-is-accessed,-such-as-in-the-collateralize,-withdrawcollateral,-and-borrow-functions.", "labels": ["OpenZeppelin"]}, {"title": "The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.", "body": "The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcurrentinterestindex-function-in-holdefi-contract-returns-the-supplyindex,-supplyrate,-borrowindex,-borrowrate,-and-currenttime-attributes,-but-only-a-few-of-these-variables-are-being-accessed,-such-as-in-the-updatesupplyindex-and-updateborrowindex-functions.", "labels": ["OpenZeppelin"]}, {"title": "Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.", "body": "Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-this-does-not-pose-a-security-risk,-it-is-very-difficult-to-understand-which-variables-are-being-accessed-when-calling-a-function-without-checking-its-signature.-additionally,-returning-big-data-structures-will-increase-the-gas-costs,-leading-to-higher-prices-when-executing-transactions.", "labels": ["OpenZeppelin"]}, {"title": "Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.", "body": "Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-identifying-all-the-functions-that-follow-this-pattern-and-modularize-them-into-smaller-ones-that-return-at-most-one-variable-each.", "labels": ["OpenZeppelin"]}, {"title": "[L09] Lack of indexed parameters in events", "body": "[L09] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l09]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi\u2019s codebase, none of the parameters in the events defined in the contracts are indexed.", "body": "Throughout the Holdefi\u2019s codebase, none of the parameters in the events defined in the contracts are indexed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi\u2019s-codebase,-none-of-the-parameters-in-the-events-defined-in-the-contracts-are-indexed.", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "[L10] Lack of input validation", "body": "[L10] Lack of input validation", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l10]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:", "body": "Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-codebase,-there-are-certain-functions-and-calculations-that-do-not-perform-validation-checks-to-ensure-the-validity-of-the-inputs.-some-of-them-are-the-following-ones:", "labels": ["OpenZeppelin"]}, {"title": "The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.", "body": "The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-withdraw-function-in-the-collateralswallet-contract-does-not-check-that-the-recipient-is-not-the-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.", "body": "The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-setprice-function-in-the-holdefiprices-contract-does-not-check-whether-the-newprice-is-the-same-as-the-old-price,-triggering-an-event-without-any-new-relevant-information.", "labels": ["OpenZeppelin"]}, {"title": "The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.", "body": "The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-setpauseduration-function-in-the-holdefipauser-contract-does-not-check-the-newpauseduration-parameter,-which-could-be-zero-or-a-very-long-period-of-time,-possibly-locking-important-functions-of-the-holdefi-system.", "labels": ["OpenZeppelin"]}, {"title": "Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.", "body": "Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-this-issue-does-not-pose-a-security-risk,-the-lack-of-validation-on-user-controlled-parameters-may-result-in-erroneous-transactions-considering-that-some-clients-or-owners-may-default-to-sending-null-parameters-if-none-are-specified.-consider-always-adding-validation-checks-to-ensure-that-the-parameters-are-always-in-the-expected-range-of-values.", "labels": ["OpenZeppelin"]}, {"title": "[L11] Semantic overload", "body": "[L11] Semantic overload", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l11]-semantic-overload", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:", "body": "Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-codebase,-there-are-cases-in-which-a-single-variable-has-two-purposes,-and,-based-on-which-its-value-is,-the-code-can-perform-differently.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.", "body": "In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract,-the-properties-of-a-market-or-collateral-are-stored-inside-structs.-these-structs-have-a-flag-called-isactive-which-is-raised-when-a-market-or-collateral-is-added-to-the-whitelist,-and-flagged-down-when-the-same-asset-is-removed-from-the-whitelist.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.", "body": "Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-because-the-parameters-of-the-assets-are-not-erased-after-the-removemarket-function-is-called,-the-isactive-variable-is-used-to-check-not-only-if-the-market-exists-but-also-if-the-market-is-active.-the-same-analogous-problem-occurs-with-the-collateral-and-its-respective-functions.", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the array\u2019s getter.", "body": "In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the array\u2019s getter.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefipauser-contract,-an-array-to-keep-track-of-the-timestamps-of-the-moment-in-which-the-pause-function-for-each-functionality-was-triggered-is-used,-but-also-this-array-is-used-as-a-flag-to-know-when-the-functionality-is-unpaused-by-checking-the-array\u2019s-getter.", "labels": ["OpenZeppelin"]}, {"title": "This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.", "body": "This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-is-known-as-semantic-overload.-if-the-multiple-meanings-of-the-variables-and-states-are-not-totally-clear-when-making-changes-to-the-code,-it-can-introduce-severe-vulnerabilities.-we-strongly-discourage-its-usage-if-possible.", "labels": ["OpenZeppelin"]}, {"title": "Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.", "body": "Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-explicitly-setting-independent-flags-to-represent-the-state-of-the-markets-and-collaterals-instead-of-using-the-same-variable-for-different-purposes.", "labels": ["OpenZeppelin"]}, {"title": "You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didn\u2019t explain that what is the issue.", "body": "You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didn\u2019t explain that what is the issue.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#you-said-that-this-is-semantic-overload-and-it-may-cause-issues-when-it-is-not-used-properly,-but-you-didn\u2019t-explain-that-what-is-the-issue.", "labels": ["OpenZeppelin"]}, {"title": "[L12] Default variable declaration values are used during calculations", "body": "[L12] Default variable declaration values are used during calculations", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l12]-default-variable-declaration-values-are-used-during-calculations", "labels": ["OpenZeppelin"]}, {"title": "In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the function\u2019s body, as addressed in the issue \u201c[N06] Named return variables\u201d, but also there are places where the local variable is not assigned with an initial value.", "body": "In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the function\u2019s body, as addressed in the issue \u201c[N06] Named return variables\u201d, but also there are places where the local variable is not assigned with an initial value.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-codebase-of-the-project,-there-are-several-places-in-which-the-returned-variable-is-declared-in-the-function-definition-without-the-explicit-return-instruction-within-the-function\u2019s-body,-as-addressed-in-the-issue-\u201c[n06]-named-return-variables\u201d,-but-also-there-are-places-where-the-local-variable-is-not-assigned-with-an-initial-value.", "labels": ["OpenZeppelin"]}, {"title": "Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.", "body": "Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#usually,-this-does-not-bring-problems-because-the-default-value-of-a-variable-would-be-overwritten-by-another-one-during-the-code-execution,-but-in-other-cases,-depending-on-how-this-variable-is-used,-an-issue-may-appear.", "labels": ["OpenZeppelin"]}, {"title": "In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the function\u2019s return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.", "body": "In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the function\u2019s return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-getaccounttotalborrowvalue-function-from-the-holdefi-contract,-totalborrowvaluescaled-is-declared-to-represent-the-function\u2019s-return-value.-this-variable-is-then-used-in-a-for-loop-to-accumulate-the-value-of-all-borrows-from-a-particular-account,-but-during-the-first-iteration,-the-default-value-of-this-variable-is-used-for-the-calculation.", "labels": ["OpenZeppelin"]}, {"title": "Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.", "body": "Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#similar-cases-can-also-be-found-in-the-totaldebt,-assetprice,-and-assetvaluescaled-variables-from-the-getaccounttotalborrowvalue-function,-and-in-many-other-functions.", "labels": ["OpenZeppelin"]}, {"title": "Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.", "body": "Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-it-does-not-represent-a-problem-in-the-current-scenario,-consider-always-declaring-variables-with-an-initial-value-to-reduce-the-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "[L13] Use of magic constants", "body": "[L13] Use of magic constants", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l13]-use-of-magic-constants", "labels": ["OpenZeppelin"]}, {"title": "There are several occurrences of magic constants in Holdefi\u2019s codebase. Some examples are:", "body": "There are several occurrences of magic constants in Holdefi\u2019s codebase. Some examples are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#there-are-several-occurrences-of-magic-constants-in-holdefi\u2019s-codebase.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "Line 617, the", "body": "Line 617, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-617,-the", "labels": ["OpenZeppelin"]}, {"title": "Line 655, the", "body": "Line 655, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-655,-the", "labels": ["OpenZeppelin"]}, {"title": "161,", "body": "161,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#161,", "labels": ["OpenZeppelin"]}, {"title": "174,", "body": "174,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#174,", "labels": ["OpenZeppelin"]}, {"title": "234,", "body": "234,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#234,", "labels": ["OpenZeppelin"]}, {"title": "248,", "body": "248,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#248,", "labels": ["OpenZeppelin"]}, {"title": "261,", "body": "261,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#261,", "labels": ["OpenZeppelin"]}, {"title": "298,", "body": "359,  382,  429,  464, and  481 when calling the  Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.  In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.  Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the codes maintenance.  [L14] Tests not passing successfully  The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.  Although the test suite was left outside of the audits scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.  Update: Not fixed. Holdefis statement on this issue:  These fails are because of very little time difference, and its not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.  [L15] README file is empty  The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.  Consider following Standard Readme to define the structure and contents for the README file.  Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.  Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.  Update: Not fixed. Holdefis statement for this issue:  Its not a bug as well. We will add information in the readme file of course.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Notes & Additional Information  [N01] Variables declared as uint instead of uint256  To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.  [N02] Repeated access control in the code  The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contracts address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.  Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.  Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.  [N03] Not following the Checks-Effects-Interactions pattern  Throughout the projects codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.  Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.  Update: Not fixed. Holdefis statement for this issue:  We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.  In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.  [N04] Inconsistent coding style  Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  [N05] Floating Solidity compiler versions  It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.  Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.  Consider fixing all the dependencies to the same stable Solidity version.  [N06] Named return variables  There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.  Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.  [N07] Timestamp may not be reliable  The Holdefis codebase uses the block.timestamp as part of the calculations and time checks.  Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.  Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.  Update: Not fixed. Holdefis statement for this issue:  As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesnt change anything and miner cant make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence  We have updated our suggestion to make it clearer.  [N08] Unnecessary imports  In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.  [N09] Unused events  Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.  [N10] Misleading comments  Line 160: Should say Deposit ERC20 assets as supply  Line 184: The  Line 592: The  Line 607: The  On CollateralsWallet.sol: Line 19: The withrdaw function not only handles tokens, but also ETH  Consider updating the comments to more accurately describe the purpose and effect of the codebase.  [N11] Misleading function and variable names  To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:  isPause to  newOwnerChanger to  functionsNum to  newPaused to  newUnpaused to  secondsPerTenDays to  getMarket to  newOwnerChanger to  Market to  Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#298,", "labels": ["OpenZeppelin"]}, {"title": "359,", "body": "359,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#359,", "labels": ["OpenZeppelin"]}, {"title": "382,", "body": "382,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#382,", "labels": ["OpenZeppelin"]}, {"title": "429,", "body": "429,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#429,", "labels": ["OpenZeppelin"]}, {"title": "464, and", "body": "464, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#464,-and", "labels": ["OpenZeppelin"]}, {"title": "481 when calling the", "body": "481 when calling the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#481-when-calling-the", "labels": ["OpenZeppelin"]}, {"title": "Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.", "body": "Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-the-meaning-of-some-of-this-constants-are-mentioned-as-comments-in-the-holdefipauser-contract,-there-is-no-reference-of-them-in-the-contract-where-the-whenotpaused-modifier-is-being-used,-which-makes-the-code-harder-to-understand-and-maintain.", "labels": ["OpenZeppelin"]}, {"title": "In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.", "body": "In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-addition-to-this,-the-references-in-the-comments-mentioned-above-are-not-consistent-with-the-list-of-function-codes-for-pausing-operations-in-the-specification,-where-the-operation-3-is-being-skipped-in-the-whitepaper.", "labels": ["OpenZeppelin"]}, {"title": "Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the code\u2019s maintenance.", "body": "Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the code\u2019s maintenance.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-defining-a-constant-variable-for-every-magic-constant-(including-booleans)-in-the-contract-where-they-are-used,-giving-it-a-clear-and-self-explanatory-name.-for-complex-values,-consider-adding-an-inline-comment-explaining-how-they-were-calculated-or-why-they-were-chosen.-all-of-this-will-allow-a-better-readability,-easing-the-code\u2019s-maintenance.", "labels": ["OpenZeppelin"]}, {"title": "[L14] Tests not passing successfully", "body": "[L14] Tests not passing successfully", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l14]-tests-not-passing-successfully", "labels": ["OpenZeppelin"]}, {"title": "The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.", "body": "The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-testing-suite-finishes-with-three-failing-tests,-two-on-the-adminfunctiontests.js-file-and-one-on-the-ownabletests.js-file.", "labels": ["OpenZeppelin"]}, {"title": "Although the test suite was left outside of the audit\u2019s scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.", "body": "Although the test suite was left outside of the audit\u2019s scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-the-test-suite-was-left-outside-of-the-audit\u2019s-scope,-please-consider-thoroughly-reviewing-the-test-suite-to-make-sure-all-tests-run-successfully.-furthermore,-it-is-advisable-to-only-merge-code-that-neither-breaks-the-existing-tests-nor-decreases-coverage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. Holdefi\u2019s statement on this issue:", "body": "Update: Not fixed. Holdefi\u2019s statement on this issue:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#update:-not-fixed.-holdefi\u2019s-statement-on-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "These fails are because of very little time difference, and it\u2019s not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.", "body": "These fails are because of very little time difference, and it\u2019s not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#these-fails-are-because-of-very-little-time-difference,-and-it\u2019s-not-a-bug.-this-will-be-pass-if-you-rerun-it.-some-of-our-calculations-are-based-on-timestamp-and-because-of-problem-with-exactly-syncing-with-blockchain-(local,-testnet-or-mainnet),-sometimes-some-tests-will-fail-because-of-minor-differences.", "labels": ["OpenZeppelin"]}, {"title": "[L15] README file is empty", "body": "[L15] README file is empty", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l15]-readme-file-is-empty", "labels": ["OpenZeppelin"]}, {"title": "The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.", "body": "The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-readme.md-of-the-holdefi-project-has-no-information-about-what-is-the-purpose-of-the-project-nor-how-to-use-it.-readme-files-on-the-root-of-git-repositories-are-the-first-documents-that-most-developers-often-read,-so-those-should-be-complete,-clear,-concise,-and-accurate.", "labels": ["OpenZeppelin"]}, {"title": "Consider following Standard Readme to define the structure and contents for the README file.", "body": "Consider following Standard Readme to define the structure and contents for the README file.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-following-standard-readme-to-define-the-structure-and-contents-for-the-readme-file.", "labels": ["OpenZeppelin"]}, {"title": "Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "body": "Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#also,-consider-including-an-explanation-of-the-core-concepts-of-the-repository,-the-usage-workflows,-the-public-apis,-instructions-to-test-and-deploy-it,-and-how-the-code-relates-to-other-key-components-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "body": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#furthermore,-it-is-highly-advisable-to-include-instructions-for-the-responsible-disclosure-of-any-security-vulnerabilities-found-in-the-project.consider-adding-a-method-for-secure-and-encrypted-communication-with-the-team,-like-an-email-address-with-its-gpg-key.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s not a bug as well. We will add information in the readme file of course.", "body": "It\u2019s not a bug as well. We will add information in the readme file of course.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it\u2019s-not-a-bug-as-well.-we-will-add-information-in-the-readme-file-of-course.", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizbwvkaxvtjtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrsuzqyuymfbyzxzpb3vzjtndjtjgysuzrsuzqyuyrmj1dhrvbiuzrsuwqsuwqsuzq2j1dhrvbiuymg9uy2xpy2slm0qlmjjjdxn0b21zy3jvbgwlmjglmjklmjilm0ulm0nhjtiwahjlziuzrcuymiuym25vdgvzjtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrw5lehqlmjalm0ulm0mlmkzhjtnfjtndjtjgynv0dg9ujtnfjtbbjtbbjtndjtjgzgl2jtnf", "labels": ["OpenZeppelin"]}, {"title": "[N01] Variables declared as uint instead of uint256", "body": "[N01] Variables declared as uint instead of uint256", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n01]-variables-declared-as-uint-instead-of-uint256", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.", "body": "To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-explicitness,-consider-changing-all-instances-of-uint-into-uint256-in-the-entire-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Repeated access control in the code", "body": "[N02] Repeated access control in the code", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n02]-repeated-access-control-in-the-code", "labels": ["OpenZeppelin"]}, {"title": "The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contract\u2019s address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.", "body": "The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contract\u2019s address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-collateralswallet-contract-is-used-to-store-the-collateral-assets-of-the-project-and-it-implements-a-function-to-set-the-holdefi-contract\u2019s-address,-a-function-to-withdraw-the-collateral,-and-a-payable-fallback-function-that-allows-deposits-of-eth-into-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.", "body": "Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#except-from-the-first-mentioned-function-which-can-only-be-called-once,-both-the-withdraw-and-the-fallback-functions-check-whether-the-caller-is-the-holdefi-contract-or-not.-this-functionality-could-be-factorized-into-a-onlyholdefi-modifier-as-it-is-done-in-the-ownable-contract-instead-of-implementing-the-require-statement-in-each-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.", "body": "Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-creating-a-onlyholdefi-modifier-and-replacing-the-require-statements-in-both-functions-with-the-modifier.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Not following the Checks-Effects-Interactions pattern", "body": "[N03] Not following the Checks-Effects-Interactions pattern", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n03]-not-following-the-checks-effects-interactions-pattern", "labels": ["OpenZeppelin"]}, {"title": "Throughout the project\u2019s codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.", "body": "Throughout the project\u2019s codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-project\u2019s-codebase,-there-are-situations-in-which-the-code-is-not-following-the-check-effect-interaction-pattern-that-helps-to-protect-against-reentrancy-issues,-such-as-in-the-setborrowrate-function-or-in-the-setsupplierssharerate-function-from-the-holdefisettings-contract.", "labels": ["OpenZeppelin"]}, {"title": "Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.", "body": "Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-in-the-codebase-these-particular-cases-do-not-pose-a-security-risk,-consider-changing-the-order-of-operations-to-first-write-the-state-variables-and-then-perform-the-external-calls-to-other-contracts-for-readability-and-consistency-purposes,-and-to-be-safe-against-reentrancy-attacks-even-if-the-called-functions-change.", "labels": ["OpenZeppelin"]}, {"title": "We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.", "body": "We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-know-that.-we-followed-checks-effects-interactions-pattern-in-the-whole-code.-but-in-this-case,-indexes-should-be-updated-with-previous-values,-not-new-values.", "labels": ["OpenZeppelin"]}, {"title": "In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.", "body": "In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-these-cases,-we-still-suggest-to-follow-the-defensive-checks-effects-interactions-when-calling-other-contracts.-consider-saving-the-old-values-into-local-variables,-and-pass-those-when-calling-the-external-contracts.-in-the-meanwhile,-consider-explaining-in-the-code-the-reason-of-not-follow-the-checks-effects-interactions-pattern.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Inconsistent coding style", "body": "[N04] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n04]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#deviations-from-the-solidity-style-guide-were-identified-throughout-the-entire-codebase.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Floating Solidity compiler versions", "body": "[N05] Floating Solidity compiler versions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n05]-floating-solidity-compiler-versions", "labels": ["OpenZeppelin"]}, {"title": "It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.", "body": "It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it-is-a-good-practice-to-prevent-that-undiscovered-vulnerabilities-in-newer-compilers-are-not-added-to-the-project-at-the-time-of-compiling-the-source-code.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.", "body": "Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-the-holdefi-project-is-using-a-floating-pragma-version-that-could-include-these-new-vulnerabilities-when-the-project-is-compiled.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing all the dependencies to the same stable Solidity version.", "body": "Consider fixing all the dependencies to the same stable Solidity version.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-fixing-all-the-dependencies-to-the-same-stable-solidity-version.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Named return variables", "body": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.  Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.  [N07] Timestamp may not be reliable  The Holdefis codebase uses the block.timestamp as part of the calculations and time checks.  Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.  Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.  Update: Not fixed. Holdefis statement for this issue:  As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesnt change anything and miner cant make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence  We have updated our suggestion to make it clearer.  [N08] Unnecessary imports  In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.  [N09] Unused events  Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.  [N10] Misleading comments  Line 160: Should say Deposit ERC20 assets as supply  Line 184: The  Line 592: The  Line 607: The  On CollateralsWallet.sol: Line 19: The withrdaw function not only handles tokens, but also ETH  Consider updating the comments to more accurately describe the purpose and effect of the codebase.  [N11] Misleading function and variable names  To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:  isPause to  newOwnerChanger to  functionsNum to  newPaused to  newUnpaused to  secondsPerTenDays to  getMarket to  newOwnerChanger to  Market to  Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n06]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.", "body": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-codebase.-some-examples-can-be-found-in-the-getaccountcollateral-function-from-the-holdefi-contract-or-in-the-getcollateral-function-of-the-holdefisettings-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.", "body": "Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables-in-the-body-of-the-function,-and-adding-the-necessary-explicit-return-statements-where-appropriate.-this-should-favor-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Timestamp may not be reliable", "body": "[N07] Timestamp may not be reliable", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n07]-timestamp-may-not-be-reliable", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi\u2019s codebase uses the block.timestamp as part of the calculations and time checks.", "body": "The Holdefi\u2019s codebase uses the block.timestamp as part of the calculations and time checks.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi\u2019s-codebase-uses-the-block.timestamp-as-part-of-the-calculations-and-time-checks.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.", "body": "Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-timestamps-can-be-slightly-altered-by-miners-to-favor-them-in-contracts-that-have-logics-that-depend-strongly-on-them.", "labels": ["OpenZeppelin"]}, {"title": "Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.", "body": "Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-taking-into-account-this-issue-and-warning-the-users-that-such-scenario-could-happen.-if-the-alteration-of-timestamps-cannot-affect-the-protocol-in-any-way,-consider-documenting-the-reasoning-and-writing-tests-enforcing-that-these-guarantees-will-be-preserved-even-if-the-code-changes-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesn\u2019t change anything and miner can\u2019t make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "body": "As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesn\u2019t change anything and miner can\u2019t make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-you-can-see-in-the-below-link,-if-the-scale-of-your-time-dependent-event-can-vary-by-15-seconds-and-maintain-integrity,-it-is-safe-to-use-a-block.timestamp.-using-block.timestamp-for-generating-random-numbers-is-not-good-in-the-lottery-or-this-kind-of-context.-but-in-our-platform-10-15-seconds-in-1-year-doesn\u2019t-change-anything-and-miner-can\u2019t-make-a-profit.-https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unnecessary imports", "body": "[N08] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n08]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.", "body": "In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-contract,-consider-removing-the-import-statement-for-the-ownable-contract-as-it-is-never-used.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unused events", "body": "[N09] Unused events", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n09]-unused-events", "labels": ["OpenZeppelin"]}, {"title": "Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.", "body": "Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-124-of-holdefi.sol-declares-a-repayborrow-event.-as-it-is-never-emitted,-consider-removing-the-declaration-or-emitting-the-event-in-the-appropriate-place.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Misleading comments", "body": "[N10] Misleading comments", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n10]-misleading-comments", "labels": ["OpenZeppelin"]}, {"title": "Line 160: Should say \u2018Deposit ERC20 assets as supply\u2019", "body": "Line 160: Should say \u2018Deposit ERC20 assets as supply\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-160:-should-say-\u2018deposit-erc20-assets-as-supply\u2019", "labels": ["OpenZeppelin"]}, {"title": "Line 184: The", "body": "Line 184: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-184:-the", "labels": ["OpenZeppelin"]}, {"title": "Line 592: The", "body": "Line 592: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-592:-the", "labels": ["OpenZeppelin"]}, {"title": "Line 607: The", "body": "Line 607: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-607:-the", "labels": ["OpenZeppelin"]}, {"title": "On CollateralsWallet.sol:\u2013 Line 19: The withrdaw function not only handles tokens, but also ETH", "body": "On CollateralsWallet.sol:\u2013 Line 19: The withrdaw function not only handles tokens, but also ETH", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-collateralswallet.sol:\u2013-line-19:-the-withrdaw-function-not-only-handles-tokens,-but-also-eth", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the comments to more accurately describe the purpose and effect of the codebase.", "body": "Consider updating the comments to more accurately describe the purpose and effect of the codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-updating-the-comments-to-more-accurately-describe-the-purpose-and-effect-of-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Misleading function and variable names", "body": "[N11] Misleading function and variable names", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n11]-misleading-function-and-variable-names", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:", "body": "To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-explicitness-and-readability,-some-functions-and-variables-from-the-whole-repository-may-benefit-from-a-better-naming.our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "isPause to", "body": "isPause to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#ispause-to", "labels": ["OpenZeppelin"]}, {"title": "newOwnerChanger to", "body": "newOwnerChanger to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newownerchanger-to", "labels": ["OpenZeppelin"]}, {"title": "functionsNum to", "body": "functionsNum to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#functionsnum-to", "labels": ["OpenZeppelin"]}, {"title": "newPaused to", "body": "newPaused to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newpaused-to", "labels": ["OpenZeppelin"]}, {"title": "newUnpaused to", "body": "newUnpaused to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newunpaused-to", "labels": ["OpenZeppelin"]}, {"title": "secondsPerTenDays to", "body": "secondsPerTenDays to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#secondspertendays-to", "labels": ["OpenZeppelin"]}, {"title": "getMarket to", "body": "getMarket to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#getmarket-to", "labels": ["OpenZeppelin"]}, {"title": "Market to", "body": "Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#market-to", "labels": ["OpenZeppelin"]}, {"title": "Market struct defined in the", "body": "Market struct defined in the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#market-struct-defined-in-the", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi contract:\u2013 All ocurrencies of totalBalance to totalBorrowedBalance", "body": "In the Holdefi contract:\u2013 All ocurrencies of totalBalance to totalBorrowedBalance", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-contract:\u2013-all-ocurrencies-of-totalbalance-to-totalborrowedbalance", "labels": ["OpenZeppelin"]}, {"title": "[N12] TODOs in code", "body": "[N12] TODOs in code", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n12]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "On line 11 and line 38 of HoldefiPrices.sol, there are \u201cTODO\u201d comments that should be removed and instead tracked in the project\u2019s issues backlog.", "body": "On line 11 and line 38 of HoldefiPrices.sol, there are \u201cTODO\u201d comments that should be removed and instead tracked in the project\u2019s issues backlog.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-11-and-line-38-of-holdefiprices.sol,-there-are-\u201ctodo\u201d-comments-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-issues-backlog.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Typos in comments", "body": "[N13] Typos in comments", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n13]-typos-in-comments", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi\u2019s codebase, there are a few typos in the code and in comments. We list them here.", "body": "Throughout the Holdefi\u2019s codebase, there are a few typos in the code and in comments. We list them here.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi\u2019s-codebase,-there-are-a-few-typos-in-the-code-and-in-comments.-we-list-them-here.", "labels": ["OpenZeppelin"]}, {"title": "On line 8 of CollateralsWallet.sol, \u2018collateralls\u2019 should be \u2018collaterals\u2019", "body": "On line 8 of CollateralsWallet.sol, \u2018collateralls\u2019 should be \u2018collaterals\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-8-of-collateralswallet.sol,-\u2018collateralls\u2019-should-be-\u2018collaterals\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 33 and on line 39 of HoldefiPauser.sol, \u2018functions\u2019 should be \u2018function\u2019", "body": "On line 33 and on line 39 of HoldefiPauser.sol, \u2018functions\u2019 should be \u2018function\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-33-and-on-line-39-of-holdefipauser.sol,-\u2018functions\u2019-should-be-\u2018function\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 27 of Ownable.sol, \u2018can not\u2019 should be \u2018cannot\u2019", "body": "On line 27 of Ownable.sol, \u2018can not\u2019 should be \u2018cannot\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-27-of-ownable.sol,-\u2018can-not\u2019-should-be-\u2018cannot\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 16 of HoldefiSettings.sol, \u2018All these settings is callable by only owner\u2019 should say \u2018All these settings are callable only by the owner\u2019", "body": "On line 16 of HoldefiSettings.sol, \u2018All these settings is callable by only owner\u2019 should say \u2018All these settings are callable only by the owner\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-16-of-holdefisettings.sol,-\u2018all-these-settings-is-callable-by-only-owner\u2019-should-say-\u2018all-these-settings-are-callable-only-by-the-owner\u2019", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizbg93jtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrsuzqyuymfbyzxzpb3vzjtndjtjgysuzrsuzqyuyrmj1dhrvbiuzrsuwqsuwqsuzq2j1dhrvbiuymg9uy2xpy2slm0qlmjjjdxn0b21zy3jvbgwlmjglmjklmjilm0ulm0nhjtiwahjlziuzrcuymiuym2nvbmnsdxnpb24lmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfbmv4dcuymcuzrsuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0mlmkzkaxylm0u=", "labels": ["OpenZeppelin"]}, {"title": "Commented out code", "body": "Commented out code", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#commented-out-code", "labels": ["OpenZeppelin"]}, {"title": "Lines 87 and 128 of the build.ts script include commented out lines of code without giving developers enough context on why those lines have been discarded, thus providing them with little to no value at all.", "body": "Lines 87 and 128 of the build.ts script include commented out lines of code without giving developers enough context on why those lines have been discarded, thus providing them with little to no value at all.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#lines-87-and-128-of-the-build.ts-script-include-commented-out-lines-of-code-without-giving-developers-enough-context-on-why-those-lines-have-been-discarded,-thus-providing-them-with-little-to-no-value-at-all.", "labels": ["OpenZeppelin"]}, {"title": "As the purpose of these lines is unclear and may confuse future developers and external contributors, consider removing them from the codebase. If they are to provide alternate implementation options, consider extracting them to a separate document where a deeper and more thorough explanation could be included.", "body": "As the purpose of these lines is unclear and may confuse future developers and external contributors, consider removing them from the codebase. If they are to provide alternate implementation options, consider extracting them to a separate document where a deeper and more thorough explanation could be included.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#as-the-purpose-of-these-lines-is-unclear-and-may-confuse-future-developers-and-external-contributors,-consider-removing-them-from-the-codebase.-if-they-are-to-provide-alternate-implementation-options,-consider-extracting-them-to-a-separate-document-where-a-deeper-and-more-thorough-explanation-could-be-included.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 125e3a6.", "body": "Update: This has been fixed in commit 125e3a6.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-125e3a6.", "labels": ["OpenZeppelin"]}, {"title": "guardian not set on initialization", "body": "guardian not set on initialization", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#guardian-not-set-on-initialization", "labels": ["OpenZeppelin"]}, {"title": "guardian address to the", "body": "guardian address to the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#guardian-address-to-the", "labels": ["OpenZeppelin"]}, {"title": "recoverWallet function. This", "body": "recoverWallet function. This", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#recoverwallet-function.-this", "labels": ["OpenZeppelin"]}, {"title": "setGuardian function which has modifier", "body": "setGuardian function which has modifier", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#setguardian-function-which-has-modifier", "labels": ["OpenZeppelin"]}, {"title": "deploy function of the", "body": "deploy function of the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#deploy-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "To make the recoverability of the MetaTransactionWallet more robust, consider setting the guardian address in the initialize function.", "body": "To make the recoverability of the MetaTransactionWallet more robust, consider setting the guardian address in the initialize function.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#to-make-the-recoverability-of-the-metatransactionwallet-more-robust,-consider-setting-the-guardian-address-in-the-initialize-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been acknowledged and retained. In the words of the Celo team, \u201cit is intentional that the guardian recovery flow is optional.\u201d", "body": "Update: This has been acknowledged and retained. In the words of the Celo team, \u201cit is intentional that the guardian recovery flow is optional.\u201d", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-acknowledged-and-retained.-in-the-words-of-the-celo-team,-\u201cit-is-intentional-that-the-guardian-recovery-flow-is-optional.\u201d", "labels": ["OpenZeppelin"]}, {"title": "Naming issue hinders code understanding and readability", "body": "Naming issue hinders code understanding and readability", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#naming-issue-hinders-code-understanding-and-readability", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, a script may benefit from better naming. Consider implementing the following:", "body": "To favor explicitness and readability, a script may benefit from better naming. Consider implementing the following:", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#to-favor-explicitness-and-readability,-a-script-may-benefit-from-better-naming.-consider-implementing-the-following:", "labels": ["OpenZeppelin"]}, {"title": "Changing BUILD_DIR_1 to OLD_BRANCH_BUILD_DIR.", "body": "Changing BUILD_DIR_1 to OLD_BRANCH_BUILD_DIR.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#changing-build_dir_1-to-old_branch_build_dir.", "labels": ["OpenZeppelin"]}, {"title": "Changing BUILD_DIR_2 to NEW_BRANCH_BUILD_DIR.", "body": "Changing BUILD_DIR_2 to NEW_BRANCH_BUILD_DIR.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#changing-build_dir_2-to-new_branch_build_dir.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 947a176.", "body": "Update: This has been fixed in commit 947a176.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-947a176.", "labels": ["OpenZeppelin"]}, {"title": "Typographical error", "body": "Typographical error", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#typographical-error", "labels": ["OpenZeppelin"]}, {"title": "In line 5 of report.ts, there is an unneeded comma in the import statement.", "body": "In line 5 of report.ts, there is an unneeded comma in the import statement.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#in-line-5-of-report.ts,-there-is-an-unneeded-comma-in-the-import-statement.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 7132ca1.", "body": "Update: This has been fixed in commit 7132ca1.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-7132ca1.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Assignment in require statement", "body": "[N01] Assignment in require statement", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n01]-assignment-in-require-statement", "labels": ["OpenZeppelin"]}, {"title": "In the YieldOracle contract, there is a require statement that makes an assignment. This deviates from the standard usage and intention of require statements and can easily lead to confusion. To avoid unnecessary confusion, consider moving the assignment to its own line before the require statement and then using the require statement solely for condition checking.", "body": "In the YieldOracle contract, there is a require statement that makes an assignment. This deviates from the standard usage and intention of require statements and can easily lead to confusion. To avoid unnecessary confusion, consider moving the assignment to its own line before the require statement and then using the require statement solely for condition checking.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-the-yieldoracle-contract,-there-is-a-require-statement-that-makes-an-assignment.-this-deviates-from-the-standard-usage-and-intention-of-require-statements-and-can-easily-lead-to-confusion.-to-avoid-unnecessary-confusion,-consider-moving-the-assignment-to-its-own-line-before-the-require-statement-and-then-using-the-require-statement-solely-for-condition-checking.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, but not fixed. The BarnBridge team has stated that their YieldOracle contract is inspired by Uniswap\u2019s ExampleOracleSimple contract and that they wish for their code to remain as \u201cclose to the source\u201d as possible in this case.", "body": "[N04] Misleading contract naming  IProvider,  IController, and  IComptroller are all named following the convention for naming interfaces, despite all being contracts.  To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.  Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N05] Unnecessarily convoluted inheritance  IProvider inherits  IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as  CompoundProvider, much more convoluted than necessary. Since the abstract contract  As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.  Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N06] Gas inefficiencies  Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.  In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.  In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.  In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The deadline provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.  In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.  In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.  In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.  In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides its own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.  In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.  Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.  Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:  There are 4 unnecessary external calls in the function itself. The nested call to _beforeProviderOp performs at least 7 unnecessary external calls. The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls. The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.  Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.  Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.  [N07] Incomplete interface contracts  There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:  IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.  ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: The BarnBridge team did not address this issue.  [N08] Inconsistent use of named return variables  There is an inconsistent use of named return variables across the entire codebase. For instance:  Some functions return named variables.  Some return explicit values.  Some declare a named return variable but override it with an explicit return statement.  Some have explicit return statements that do not return anything.  Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.  Update: The BarnBridge team did not address this issue.  [N09] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.  a to amount.  f to percentage.  cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.  cumulativeSecondlyYield to cumulativeYieldPerSecond.  yieldCumulative to cumulativeYieldPerSecond.  b_ to seniorBond.  d to abondDuration.  ts to scaledTimestamp.  tmp to temp.  _unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.  setPaused to setPausedState.  cTokenBalance to userCTokenBalance.  juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: The BarnBridge team did not address this issue.  [N10] Comments not following NatSpec  The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts public API.  Update: The BarnBridge team did not address this issue.  [N11] Unnecessary public visibility in some functions  Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:  In CompoundController, the getUniswapPath function  In IController, the setHarvestReward function  In both JuniorBond and SeniorBond, the mint and burn functions  In SmartYield, the unaccountBonds function  To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.  Update: The BarnBridge team did not address this issue.  [N12] TODOs in code  There are TODO comments in the code base that should be tracked in the projects issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described TODO comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.  Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.  Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N13] Typos  The codebase contains the following typos:  curent should be current.  totalUndwerlying should be totalUnderlying.  withdrawl should be withdrawal.  dirrect should be direct.  moar should be more.  substract should be subtract.  colected should be collected.  cummulates should be cumulates.  IProviderPool should be IProvider.  matureing should be maturing.  withdrawls should be withdrawals.  begginging should be beginning.  should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.  last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.  Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N14] Uninformative revert messages in require statements  There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.  Line 42 of BondModelV1.sol  Line 366 of CompoundProvider.sol  Line 329 of SmartYield.sol  Line 495 of SmartYield.sol  Line 46 of YieldOracle.sol  Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.  Update: The BarnBridge team did not address this issue.  [N15] Unnecessary empty constructor  On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.  Consider removing empty constructors to improve overall code readability.  Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N16] Unused functions  The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.  Consider removing all unused functions to improve the overall maintainabilty and readability of the code.  Update: The BarnBridge team did not address this issue.  [N17] Unnecessary imports  The below list outlines contract imports that are unused and are therefore unnecessary.  SmartYield.sol imports console.sol  SmartYield.sol imports IERC20.sol  SmartYield.sol imports Governed.sol  SmartYield.sol imports IYieldOraclelizable.sol  Consider removing unused import statements to simplify the codebase and increase overall readability.  Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-acknowledged,-but-not-fixed.-the-barnbridge-team-has-stated-that-their-yieldoracle-contract-is-inspired-by-uniswap\u2019s-exampleoraclesimple-contract-and-that-they-wish-for-their-code-to-remain-as-\u201cclose-to-the-source\u201d-as-possible-in-this-case.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Commented code", "body": "[N02] Commented code", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n02]-commented-code", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase there are lines of code that have been commented out with //. This can lead to confusion and is detrimental to overall code readability. We have provided a non-exhaustive list of examples below:", "body": "Throughout the codebase there are lines of code that have been commented out with //. This can lead to confusion and is detrimental to overall code readability. We have provided a non-exhaustive list of examples below:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase-there-are-lines-of-code-that-have-been-commented-out-with-//.-this-can-lead-to-confusion-and-is-detrimental-to-overall-code-readability.-we-have-provided-a-non-exhaustive-list-of-examples-below:", "labels": ["OpenZeppelin"]}, {"title": "Line 538 of SmartYield.sol", "body": "Line 538 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-538-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Lines 601 and 603 of SmartYield.sol", "body": "Lines 601 and 603 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#lines-601-and-603-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Consider removing commented out lines of code that are no longer needed.", "body": "Consider removing commented out lines of code that are no longer needed.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-commented-out-lines-of-code-that-are-no-longer-needed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Note: The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Note: The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-note:-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Convoluted conditionals", "body": "[N03] Convoluted conditionals", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n03]-convoluted-conditionals", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains some convoluted conditionals that could benefit from simplification. Two examples of this are:", "body": "The codebase contains some convoluted conditionals that could benefit from simplification. Two examples of this are:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-codebase-contains-some-convoluted-conditionals-that-could-benefit-from-simplification.-two-examples-of-this-are:", "labels": ["OpenZeppelin"]}, {"title": "if (!(timeElapsed <= windowSize)) could be simplified to if (timeElapsed > windowSize)", "body": "if (!(timeElapsed <= windowSize)) could be simplified to if (timeElapsed > windowSize)", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#if-(!(timeelapsed-<=-windowsize))-could-be-simplified-to-if-(timeelapsed->-windowsize)", "labels": ["OpenZeppelin"]}, {"title": "if (!(timeElapsed >= windowSize - periodSize * 2)) could be simplified to if (timeElapsed < windowSize - periodSize * 2)", "body": "if (!(timeElapsed >= windowSize - periodSize * 2)) could be simplified to if (timeElapsed < windowSize - periodSize * 2)", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#if-(!(timeelapsed->=-windowsize---periodsize-*-2))-could-be-simplified-to-if-(timeelapsed-<-windowsize---periodsize-*-2)", "labels": ["OpenZeppelin"]}, {"title": "Consider writing conditionals in their simplest form to reduce potential confusion and increase overall code readability.", "body": "Consider writing conditionals in their simplest form to reduce potential confusion and increase overall code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-writing-conditionals-in-their-simplest-form-to-reduce-potential-confusion-and-increase-overall-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Misleading contract naming", "body": "[N04] Misleading contract naming", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n04]-misleading-contract-naming", "labels": ["OpenZeppelin"]}, {"title": "IProvider,", "body": "IProvider,", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iprovider,", "labels": ["OpenZeppelin"]}, {"title": "IController, and", "body": "consider making IComptroller an interface as its name implies.  Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N05] Unnecessarily convoluted inheritance  IProvider inherits  IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as  CompoundProvider, much more convoluted than necessary. Since the abstract contract  As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.  Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N06] Gas inefficiencies  Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.  In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.  In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.  In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The deadline provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.  In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.  In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.  In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.  In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides its own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.  In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.  Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.  Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:  There are 4 unnecessary external calls in the function itself. The nested call to _beforeProviderOp performs at least 7 unnecessary external calls. The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls. The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.  Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.  Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.  [N07] Incomplete interface contracts  There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:  IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.  ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: The BarnBridge team did not address this issue.  [N08] Inconsistent use of named return variables  There is an inconsistent use of named return variables across the entire codebase. For instance:  Some functions return named variables.  Some return explicit values.  Some declare a named return variable but override it with an explicit return statement.  Some have explicit return statements that do not return anything.  Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.  Update: The BarnBridge team did not address this issue.  [N09] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.  a to amount.  f to percentage.  cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.  cumulativeSecondlyYield to cumulativeYieldPerSecond.  yieldCumulative to cumulativeYieldPerSecond.  b_ to seniorBond.  d to abondDuration.  ts to scaledTimestamp.  tmp to temp.  _unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.  setPaused to setPausedState.  cTokenBalance to userCTokenBalance.  juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: The BarnBridge team did not address this issue.  [N10] Comments not following NatSpec  The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts public API.  Update: The BarnBridge team did not address this issue.  [N11] Unnecessary public visibility in some functions  Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:  In CompoundController, the getUniswapPath function  In IController, the setHarvestReward function  In both JuniorBond and SeniorBond, the mint and burn functions  In SmartYield, the unaccountBonds function  To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.  Update: The BarnBridge team did not address this issue.  [N12] TODOs in code  There are TODO comments in the code base that should be tracked in the projects issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described TODO comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.  Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.  Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N13] Typos  The codebase contains the following typos:  curent should be current.  totalUndwerlying should be totalUnderlying.  withdrawl should be withdrawal.  dirrect should be direct.  moar should be more.  substract should be subtract.  colected should be collected.  cummulates should be cumulates.  IProviderPool should be IProvider.  matureing should be maturing.  withdrawls should be withdrawals.  begginging should be beginning.  should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.  last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.  Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N14] Uninformative revert messages in require statements  There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.  Line 42 of BondModelV1.sol  Line 366 of CompoundProvider.sol  Line 329 of SmartYield.sol  Line 495 of SmartYield.sol  Line 46 of YieldOracle.sol  Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.  Update: The BarnBridge team did not address this issue.  [N15] Unnecessary empty constructor  On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.  Consider removing empty constructors to improve overall code readability.  Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N16] Unused functions  The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.  Consider removing all unused functions to improve the overall maintainabilty and readability of the code.  Update: The BarnBridge team did not address this issue.  [N17] Unnecessary imports  The below list outlines contract imports that are unused and are therefore unnecessary.  SmartYield.sol imports console.sol  SmartYield.sol imports IERC20.sol  SmartYield.sol imports Governed.sol  SmartYield.sol imports IYieldOraclelizable.sol  Consider removing unused import statements to simplify the codebase and increase overall readability.  Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#icontroller,-and", "labels": ["OpenZeppelin"]}, {"title": "IComptroller are all named following the convention for naming interfaces, despite all being contracts.", "body": "IComptroller are all named following the convention for naming interfaces, despite all being contracts.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#icomptroller-are-all-named-following-the-convention-for-naming-interfaces,-despite-all-being-contracts.", "labels": ["OpenZeppelin"]}, {"title": "To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.", "body": "To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-increase-code-readability-for-future-contributors,-auditors,-and-the-community,-consider-renaming-iprovider-and-icontroller,-and-consider-making-icomptroller-an-interface-as-its-name-implies.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-557395fd0fcf6bc089e10f312b3478b68e08a5ed.-icomptroller-and-iprovider-were-changed-to-interfaces-as-their-names-imply,-however-icontroller-is-still-a-contract.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessarily convoluted inheritance", "body": "[N05] Unnecessarily convoluted inheritance", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n05]-unnecessarily-convoluted-inheritance", "labels": ["OpenZeppelin"]}, {"title": "IProvider inherits", "body": "IProvider inherits", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iprovider-inherits", "labels": ["OpenZeppelin"]}, {"title": "IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as", "body": "IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iyieldoraclelizable,-it-makes-the-inheritance-graph-of-anything-that-inherits-the-former,-such-as", "labels": ["OpenZeppelin"]}, {"title": "CompoundProvider, much more convoluted than necessary. Since the abstract contract", "body": "CompoundProvider, much more convoluted than necessary. Since the abstract contract", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#compoundprovider,-much-more-convoluted-than-necessary.-since-the-abstract-contract", "labels": ["OpenZeppelin"]}, {"title": "As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.", "body": "As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#as-a-general-rule,-consider-keeping-inheritance-as-straightforward-as-possible-to-increase-overall-code-readability-and-maintainability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-557395fd0fcf6bc089e10f312b3478b68e08a5ed.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Gas inefficiencies", "body": "[N06] Gas inefficiencies", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n06]-gas-inefficiencies", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.", "body": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-several-opportunities-to-improve-gas-efficiency.-below-is-a-lengthy,-albeit-non-exhaustive,-list-of-such-opportunities.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.", "body": "In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-_takeunderlying-function-has-two-require-statements.-the-first-require-is-unnecessary-however,-as-the-second-require-will-revert-in-all-cases-the-first-would-have.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.", "body": "In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-harvest-function-makes-repeated-calls-to-ictokenerc20(ctoken).balanceof(address(this)).-the-value-could-often-be-cached.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The \u201cdeadline\u201d provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.", "body": "In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The \u201cdeadline\u201d provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-harvest-function-makes-an-external-call-to-iuniswapv2router.swapexacttokensfortokens-to-swap-reward-tokens-for-underlying-tokens.-the-\u201cdeadline\u201d-provided-for-the-swap-is-this.currenttime()-+-1800.-however,-the-addition-of-1800-is-unnecessary-since-the-swap-will-necessarily-resolve-in-the-current-block.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.", "body": "In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-transferfees-function-converts-an-amount-of-ctokens-into-utokens,-adds-the-latter-onto-underlyingfees,-and-then-converts-that-total-amount-back-into-ctokens.-converting-underlyingfees-to-ctokens-and-then-adding-the-two-ctoken-values-could-reduce-complexity.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.", "body": "In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-_accountyieldinternal-and-currentcumulatives-functions-both-cast-a-current-blocktime-to-a-uint32,-but-only-after-performing-an-unnecessary-mod-2^32.", "labels": ["OpenZeppelin"]}, {"title": "In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.", "body": "In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-mathutils,-the-compound-and-compound2-functions-will-use-a-lot-of-gas-even-when-rateperperiod-is-0.-there-could-be-a-short-circuit-to-return-principal-in-those-cases.", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides it\u2019s own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.", "body": "In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides it\u2019s own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-bondgain-function-makes-an-external-call-to-bondmodel.gain.-as-part-of-the-call,-smartyield-provides-it\u2019s-own-address-as-the-pool-argument-so-that-bondmodel-can-make-calls-back-to-get-additional-information-about-the-pool.-it-would-be-more-efficient-to-pass-along-all-the-pool-information-that-bondmodel-requires-as-part-of-the-first-call-to-gain.", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.", "body": "In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-function-_beforeproviderop-has-a-for-loop-where-this.currenttime()-is-called-every-iteration.-it-could-be-cached.", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.", "body": "Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-several-instances-of-external-calls-made-to-currenttime-functions-that-only-return-the-current-block.timestamp.-using-block.timestamp-directly-would-reduce-gas-costs.", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:", "body": "Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-numerous-instances-of-contracts-calling-local-functions-via-the-this-keyword,-which-makes-those-calls-external.-instead,-by-removing-the-this.-prefix,-these-functions-can-be-called-internally,.-this-changes-the-evm-opcode-invocation-from-call-to-jump-and-in-doing-so-decreases-gas-costs.-there-are-times-the-number-of-external-calls-invoked-along-a-call-chain-are-non-trivial.-for-instance,-a-call-to-buybond-makes-no-less-than-29-unnecessary-external-calls:", "labels": ["OpenZeppelin"]}, {"title": "There are 4 unnecessary external calls in the function itself.", "body": "There are 4 unnecessary external calls in the function itself.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-4-unnecessary-external-calls-in-the-function-itself.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to _beforeProviderOp performs at least 7 unnecessary external calls.", "body": "The nested call to _beforeProviderOp performs at least 7 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-_beforeproviderop-performs-at-least-7-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls.", "body": "The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-underlyingloanable-results-in-at-least-an-additional-7-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.", "body": "The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-_mintbond-calls-_accountbond-which-then-makes-11-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.", "body": "Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#unless-msg.sender-needs-to-be-changed-to-the-calling-contract,-making-external-calls-via-this-inflates-gas-costs-without-benefit-and-should-generally-be-avoided.", "labels": ["OpenZeppelin"]}, {"title": "Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.", "body": "Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-optimizing-for-gas-usage-wherever-possible-to-improve-overall-user-experience-and-generally-reduce-code-complexity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-compoundprovider-contract-has-been-too-extensively-modified-since-our-original-audit-to-properly-facilitate-the-review-of-relevant-fixes.-the-sixth,-seventh,-eighth,-and-ninth-bullets-were-fixed.-the-tenth-bullet-point-was-partially-fixed,-with-only-one-unnecessary-external-call-via-the-this-keyword-remaining.-the-referenced-commit-includes-various-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Incomplete interface contracts", "body": "[N07] Incomplete interface contracts", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n07]-incomplete-interface-contracts", "labels": ["OpenZeppelin"]}, {"title": "There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:", "body": "There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-instances-in-the-codebase-of-interfaces-omitting-some-of-the-public-or-external-functions-that-their-corresponding-implementation-contracts-define.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.", "body": "IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iyieldoracle-contains-only-two-function-definitions,-but-yieldoracle-contains-an-additional-function-observationindexof.", "labels": ["OpenZeppelin"]}, {"title": "ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.", "body": "ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ismartyield-does-not-list-any-of-the-public-variable-getters-from-smartyield.-the-external-function-setup-is-also-missing-from-the-interface.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "body": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#incomplete-interfaces-may-introduce-confusion-for-users,-developers,-and-auditors-alike.-to-improve-overall-code-legibility-and-minimize-confusion,-consider-modifying-the-interface-contracts-to-reflect-all-of-the-public-and-external-functions-from-their-respective-implementation-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: The BarnBridge team did not address this issue.", "body": "Update: The BarnBridge team did not address this issue.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-the-barnbridge-team-did-not-address-this-issue.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Inconsistent use of named return variables", "body": "[N08] Inconsistent use of named return variables", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n08]-inconsistent-use-of-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire codebase. For instance:", "body": "There is an inconsistent use of named return variables across the entire codebase. For instance:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-codebase.-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "Some functions return named variables.", "body": "Some functions return named variables.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-functions-return-named-variables.", "labels": ["OpenZeppelin"]}, {"title": "Some return explicit values.", "body": "Some return explicit values.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-return-explicit-values.", "labels": ["OpenZeppelin"]}, {"title": "Some declare a named return variable but override it with an explicit return statement.", "body": "Some declare a named return variable but override it with an explicit return statement.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-declare-a-named-return-variable-but-override-it-with-an-explicit-return-statement.", "labels": ["OpenZeppelin"]}, {"title": "Some have explicit return statements that do not return anything.", "body": "Some have explicit return statements that do not return anything.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-have-explicit-return-statements-that-do-not-return-anything.", "labels": ["OpenZeppelin"]}, {"title": "Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "body": "Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-adopting-a-consistent-approach-to-return-values-by-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-the-explicitness-and-readability-of-the-code,-and-it-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Naming issues hinder understanding and clarity of the codebase", "body": "[N09] Naming issues hinder understanding and clarity of the codebase", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n09]-naming-issues-hinder-understanding-and-clarity-of-the-codebase", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are-to-rename:", "labels": ["OpenZeppelin"]}, {"title": "fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.", "body": "fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#fractionof-to-calculatepercentage.-the-name-fractionof-implies-calculating-a-as-a-fraction-of-f.", "labels": ["OpenZeppelin"]}, {"title": "a to amount.", "body": "a to amount.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#a-to-amount.", "labels": ["OpenZeppelin"]}, {"title": "f to percentage.", "body": "f to percentage.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#f-to-percentage.", "labels": ["OpenZeppelin"]}, {"title": "cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.", "body": "cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cumulativesecondlyyieldlast-to-latestcumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "cumulativeSecondlyYield to cumulativeYieldPerSecond.", "body": "cumulativeSecondlyYield to cumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cumulativesecondlyyield-to-cumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "yieldCumulative to cumulativeYieldPerSecond.", "body": "yieldCumulative to cumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#yieldcumulative-to-cumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "b_ to seniorBond.", "body": "b_ to seniorBond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#b_-to-seniorbond.", "labels": ["OpenZeppelin"]}, {"title": "d to abondDuration.", "body": "d to abondDuration.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#d-to-abondduration.", "labels": ["OpenZeppelin"]}, {"title": "ts to scaledTimestamp.", "body": "ts to scaledTimestamp.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ts-to-scaledtimestamp.", "labels": ["OpenZeppelin"]}, {"title": "tmp to temp.", "body": "tmp to temp.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#tmp-to-temp.", "labels": ["OpenZeppelin"]}, {"title": "_unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.", "body": "_unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#_unaccountbond,-_accountbond,-_mintbond,-unaccountbonds,-redeembond,-and-buybond,-to-all-state-seniorbond-instead-of-just-bond.", "labels": ["OpenZeppelin"]}, {"title": "setPaused to setPausedState.", "body": "setPaused to setPausedState.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#setpaused-to-setpausedstate.", "labels": ["OpenZeppelin"]}, {"title": "cTokenBalance to userCTokenBalance.", "body": "cTokenBalance to userCTokenBalance.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ctokenbalance-to-userctokenbalance.", "labels": ["OpenZeppelin"]}, {"title": "juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.", "body": "juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#juniorbondsmaturitiesprev-to-nextjuniorbondtoliquidate.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming these parts of the contracts to increase overall code clarity.", "body": "Consider renaming these parts of the contracts to increase overall code clarity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-renaming-these-parts-of-the-contracts-to-increase-overall-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Comments not following NatSpec", "body": "[N10] Comments not following NatSpec", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n10]-comments-not-following-natspec", "labels": ["OpenZeppelin"]}, {"title": "The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts\u2019 public API.", "body": "The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts\u2019 public API.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-docstrings-of-the-contracts-are-not-following-the-ethereum-natural-specification-format-(natspec).-consider-following-this-specification-on-everything-that-is-part-of-the-contracts\u2019-public-api.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Unnecessary public visibility in some functions", "body": "[N11] Unnecessary public visibility in some functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n11]-unnecessary-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:", "body": "Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-functions-that-are-defined-as-public-but-are-never-used-locally.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "In CompoundController, the getUniswapPath function", "body": "In CompoundController, the getUniswapPath function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundcontroller,-the-getuniswappath-function", "labels": ["OpenZeppelin"]}, {"title": "In IController, the setHarvestReward function", "body": "In IController, the setHarvestReward function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-icontroller,-the-setharvestreward-function", "labels": ["OpenZeppelin"]}, {"title": "In both JuniorBond and SeniorBond, the mint and burn functions", "body": "In both JuniorBond and SeniorBond, the mint and burn functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-both-juniorbond-and-seniorbond,-the-mint-and-burn-functions", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the unaccountBonds function", "body": "In SmartYield, the unaccountBonds function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-unaccountbonds-function", "labels": ["OpenZeppelin"]}, {"title": "To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.", "body": "To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-favor-readability-and-reduce-gas-costs,-consider-reducing-the-visibility-of-public-functions-that-are-not-used-internally-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N12] TODOs in code", "body": "[N12] TODOs in code", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n12]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.", "body": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-tracked-in-the-project\u2019s-issues-backlog.-for-instance,-on-line-615-of-smartyield.sol,-on-line-171-of-compoundprovider.sol,-and-elsewhere.-during-development,-having-well-described-\u201ctodo\u201d-comments-will-make-the-process-of-tracking-and-solving-them-easier.-without-that-information,-these-comments-might-age,-and-important-information-for-the-security-of-the-system-might-be-forgotten-by-the-time-it-is-released-to-production.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.", "body": "Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-all-instances-of-todo-comments-and-instead-tracking-them-in-the-issues-backlog.-alternatively,-consider-linking-each-inline-todo-to-the-corresponding-issues-backlog-entry.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "[N16] Unused functions  The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.  Consider removing all unused functions to improve the overall maintainabilty and readability of the code.  Update: The BarnBridge team did not address this issue.  [N17] Unnecessary imports  The below list outlines contract imports that are unused and are therefore unnecessary.  SmartYield.sol imports console.sol  SmartYield.sol imports IERC20.sol  SmartYield.sol imports Governed.sol  SmartYield.sol imports IYieldOraclelizable.sol  Consider removing unused import statements to simplify the codebase and increase overall readability.  Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Typos", "body": "[N13] Typos", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n13]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "curent should be current.", "body": "curent should be current.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#curent-should-be-current.", "labels": ["OpenZeppelin"]}, {"title": "totalUndwerlying should be totalUnderlying.", "body": "totalUndwerlying should be totalUnderlying.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#totalundwerlying-should-be-totalunderlying.", "labels": ["OpenZeppelin"]}, {"title": "withdrawl should be withdrawal.", "body": "withdrawl should be withdrawal.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#withdrawl-should-be-withdrawal.", "labels": ["OpenZeppelin"]}, {"title": "dirrect should be direct.", "body": "dirrect should be direct.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#dirrect-should-be-direct.", "labels": ["OpenZeppelin"]}, {"title": "moar should be more.", "body": "moar should be more.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#moar-should-be-more.", "labels": ["OpenZeppelin"]}, {"title": "substract should be subtract.", "body": "substract should be subtract.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#substract-should-be-subtract.", "labels": ["OpenZeppelin"]}, {"title": "colected should be collected.", "body": "colected should be collected.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#colected-should-be-collected.", "labels": ["OpenZeppelin"]}, {"title": "cummulates should be cumulates.", "body": "cummulates should be cumulates.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cummulates-should-be-cumulates.", "labels": ["OpenZeppelin"]}, {"title": "IProviderPool should be IProvider.", "body": "IProviderPool should be IProvider.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iproviderpool-should-be-iprovider.", "labels": ["OpenZeppelin"]}, {"title": "matureing should be maturing.", "body": "matureing should be maturing.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#matureing-should-be-maturing.", "labels": ["OpenZeppelin"]}, {"title": "withdrawls should be withdrawals.", "body": "withdrawls should be withdrawals.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#withdrawls-should-be-withdrawals.", "labels": ["OpenZeppelin"]}, {"title": "begginging should be beginning.", "body": "begginging should be beginning.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#begginging-should-be-beginning.", "labels": ["OpenZeppelin"]}, {"title": "should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.", "body": "should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#should-start-with-rewardctoken-and-with-utoken-should-be-should-start-with-rewardctoken-and-end-with-utoken.", "labels": ["OpenZeppelin"]}, {"title": "last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.", "body": "last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#last-index-of-juniorbondsmaturities-that-was-liquidated-should-be-next-index-of-juniorbondsmaturities-to-be-liquidated.", "labels": ["OpenZeppelin"]}, {"title": "Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.", "body": "Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#additionally-the-protocol-specification-(out-of-scope-of-the-audit)-contains-many-typos.-consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-many-of-the-above-typos-still-exist-in-the-codebase.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Uninformative revert messages in require statements", "body": "[N14] Uninformative revert messages in require statements", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n14]-uninformative-revert-messages-in-require-statements", "labels": ["OpenZeppelin"]}, {"title": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.", "body": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-several-instances-in-the-codebase-where-require-statements-have-ambiguous-or-imprecise-error-messages.-below-is-a-non-exhaustive-list-of-identified-instances.", "labels": ["OpenZeppelin"]}, {"title": "Line 42 of BondModelV1.sol", "body": "Line 42 of BondModelV1.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-42-of-bondmodelv1.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 366 of CompoundProvider.sol", "body": "Line 366 of CompoundProvider.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-366-of-compoundprovider.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 329 of SmartYield.sol", "body": "Line 329 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-329-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 495 of SmartYield.sol", "body": "Line 495 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-495-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 46 of YieldOracle.sol", "body": "Line 46 of YieldOracle.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-46-of-yieldoracle.sol", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "body": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-so-they-should-provide-enough-information-so-that-appropriate-corrections-can-be-made-to-interact-with-the-system.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-instances-mentioned-above,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unnecessary empty constructor", "body": "[N15] Unnecessary empty constructor", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n15]-unnecessary-empty-constructor", "labels": ["OpenZeppelin"]}, {"title": "On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.", "body": "On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#on-line-35-of-icontroller.sol-there-is-an-unnecessary-empty-constructor.-in-the-absence-of-the-empty-constructor,-the-governed-constructor-will-still-be-invoked-because-of-inheritance.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing empty constructors to improve overall code readability.", "body": "Consider removing empty constructors to improve overall code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-empty-constructors-to-improve-overall-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Unused functions", "body": "[N16] Unused functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n16]-unused-functions", "labels": ["OpenZeppelin"]}, {"title": "The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.", "body": "The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-sqrt-and-compound-functions-of-the-mathutils-library-are-defined,-but-they-are-not-used-in-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all unused functions to improve the overall maintainabilty and readability of the code.", "body": "Consider removing all unused functions to improve the overall maintainabilty and readability of the code.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-all-unused-functions-to-improve-the-overall-maintainabilty-and-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Unnecessary imports", "body": "[N17] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n17]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "The below list outlines contract imports that are unused and are therefore unnecessary.", "body": "The below list outlines contract imports that are unused and are therefore unnecessary.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-below-list-outlines-contract-imports-that-are-unused-and-are-therefore-unnecessary.", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports console.sol", "body": "SmartYield.sol imports console.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-console.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports IERC20.sol", "body": "SmartYield.sol imports IERC20.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-ierc20.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports Governed.sol", "body": "SmartYield.sol imports Governed.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-governed.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports IYieldOraclelizable.sol", "body": "SmartYield.sol imports IYieldOraclelizable.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-iyieldoraclelizable.sol", "labels": ["OpenZeppelin"]}, {"title": "Consider removing unused import statements to simplify the codebase and increase overall readability.", "body": "Consider removing unused import statements to simplify the codebase and increase overall readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-unused-import-statements-to-simplify-the-codebase-and-increase-overall-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-as-of-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-ierc20-import-still-remains.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Inconsistent style", "body": "[N01] Inconsistent style", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n01]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "Within the Governor Bravo contracts, there are a few instances of inconsistency in coding style. We have identified the following:", "body": "Within the Governor Bravo contracts, there are a few instances of inconsistency in coding style. We have identified the following:", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#within-the-governor-bravo-contracts,-there-are-a-few-instances-of-inconsistency-in-coding-style.-we-have-identified-the-following:", "labels": ["OpenZeppelin"]}, {"title": "Some external or public functions begin with underscores, such as _initiate, while others do not, such as castVote. Additionally, some internal functions begin with underscores, such as _queueOrRevert, while some do not, such as getChainId. Often, leading underscores are used for internal functions only, to increase the code\u2019s readability. Consider changing function names so that there is a consistent naming style within the Governor Bravo contracts.", "body": "Some external or public functions begin with underscores, such as _initiate, while others do not, such as castVote. Additionally, some internal functions begin with underscores, such as _queueOrRevert, while some do not, such as getChainId. Often, leading underscores are used for internal functions only, to increase the code\u2019s readability. Consider changing function names so that there is a consistent naming style within the Governor Bravo contracts.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#some-external-or-public-functions-begin-with-underscores,-such-as-_initiate,-while-others-do-not,-such-as-castvote.-additionally,-some-internal-functions-begin-with-underscores,-such-as-_queueorrevert,-while-some-do-not,-such-as-getchainid.-often,-leading-underscores-are-used-for-internal-functions-only,-to-increase-the-code\u2019s-readability.-consider-changing-function-names-so-that-there-is-a-consistent-naming-style-within-the-governor-bravo-contracts.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability, lines 105 and 106 of the GovernorBravoDelegate contract should be converted into the equivalent used in line 95 or 79.", "body": "To improve readability, lines 105 and 106 of the GovernorBravoDelegate contract should be converted into the equivalent used in line 95 or 79.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#to-improve-readability,-lines-105-and-106-of-the-governorbravodelegate-contract-should-be-converted-into-the-equivalent-used-in-line-95-or-79.", "labels": ["OpenZeppelin"]}, {"title": "The constant name and the constant MIN_PROPOSAL_THRESHOLD are declared differently than the pure functions quorumVotes and proposalMaxOperations, but they all behave as constants within the code. Consider documenting the discrepancy in declaration style, or changing the declarations of all four to be consistent.", "body": "The constant name and the constant MIN_PROPOSAL_THRESHOLD are declared differently than the pure functions quorumVotes and proposalMaxOperations, but they all behave as constants within the code. Consider documenting the discrepancy in declaration style, or changing the declarations of all four to be consistent.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-constant-name-and-the-constant-min_proposal_threshold-are-declared-differently-than-the-pure-functions-quorumvotes-and-proposalmaxoperations,-but-they-all-behave-as-constants-within-the-code.-consider-documenting-the-discrepancy-in-declaration-style,-or-changing-the-declarations-of-all-four-to-be-consistent.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #7.", "body": "Update: Fixed in pull request #7.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-fixed-in-pull-request-#7.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Misleading revert messages", "body": "[N02] Misleading revert messages", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n02]-misleading-revert-messages", "labels": ["OpenZeppelin"]}, {"title": "The error message returned on line 90 of GovernorBravoDelegate implies that queueing has failed because there is already a proposal with the chosen eta. However, it is possible to queue multiple proposals with the same eta. This require will fail only when the exact same action has already been queued.", "body": "The error message returned on line 90 of GovernorBravoDelegate implies that queueing has failed because there is already a proposal with the chosen eta. However, it is possible to queue multiple proposals with the same eta. This require will fail only when the exact same action has already been queued.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-error-message-returned-on-line-90-of-governorbravodelegate-implies-that-queueing-has-failed-because-there-is-already-a-proposal-with-the-chosen-eta.-however,-it-is-possible-to-queue-multiple-proposals-with-the-same-eta.-this-require-will-fail-only-when-the-exact-same-action-has-already-been-queued.", "labels": ["OpenZeppelin"]}]