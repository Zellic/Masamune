[{"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/94", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/93", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/91", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/90", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "It is possible to create fake ERC1155 NameWrapper token for subdomain, which is not owned by NameWrapper", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/84", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-07-ens-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-ens/blob/ff6e59b9415d0ead7daf31c2ed06e86d9061ae22/contracts/wrapper/NameWrapper.sol#L820-L821 https://github.com/code-423n4/2022-07-ens/blob/ff6e59b9415d0ead7daf31c2ed06e86d9061ae22/contracts/wrapper/NameWrapper.sol#L524 https://github.com/code-423n4/2022-07-ens/blob/ff6e59b9415d0ead7daf31c2ed06e86d9061ae22/contracts/wrapper/NameWrapper.sol#L572   # Vulnerability details  ## Impact  Due to re-entrancy possibility in `NameWrapper._transferAndBurnFuses` (called from `setSubnodeOwner` and `setSubnodeRecord`), it is possible to do some stuff in `onERC1155Received` right after transfer but before new owner and new fuses are set. This makes it possible, for example, to unwrap the subdomain, but owner and fuses will still be set even for unwrapped domain, creating fake `ERC1155` `NameWrapper` token for domain, which is not owned by `NameWrapper`.  Fake token creation scenario:  1. `Account1` registers and wraps `test.eth` domain 2. `Account1` calls `NameWrapper.setSubnodeOwner` for `sub.test.eth` subdomain with `Account1` as owner (to make NameWrapper owner of subdomain) 3. `Contract1` smart contract is created, which calls unwrap in its `onERC1155Received` function, and a function to send `sub.test.eth` ERC1155 NameWrapper token back to `Account1` 4. `Account1` calls `NameWrapper.setSubnodeOwner` for `sub.test.eth` with `Contract1` as new owner, which unwraps domain back to `Account1` but due to re-entrancy, NameWrapper sets fuses and ownership to `Contract1` 5. `Account1` calls function to send ERC1155 token from `Contract1` back to self.  After this sequence of events, `sub.test.eth` subdomain is owned by `Account1` both in `ENS` registry and in `NameWrapper` (with fuses and expiry correctly set to the future date). Lots (but not all) of functions in `NameWrapper` will fail to execute for this subdomain, because they expect `NameWrapper` to have ownership of the domain in `ENS`, but some functions will still work, making it possible to make the impression of good domain.  At this point, ownership in `NameWrapper` is \"detached\" from ownership in `ENS` and `Account1` can do all kinds of malcious stuff with its ERC1155 token. For example:  1. Sell subdomain to the other user, transfering `ERC1155` to that user and burning `PARENT_CANNOT_CONTROL` to create impression that he can't control the domain. After receiving the payment, `Account1` can wrap the domain again, which burns existing ownership record and replaces with the new one with clear fuses and `Account1` ownership, effectively stealing domain back from unsuspecting user, who thought that `ERC1155` gives him the right to the domain (and didn't expect that parent can clear fuses when `PARENT_CANNOT_CONTROL` is set).  2. Transfer subdomain to some other smart contract, which implements `onERC1155Received`, then take it back, fooling smart contract into believing that it has received the domain.   ## Proof of Concept  Copy these to test/wrapper and run: yarn test test/wrapper/NameWrapperReentrancy.js  https://gist.github.com/panprog/3cd94e3fbb0c52410a4c6609e55b863e   ## Recommended Mitigation Steps  Consider adding `nonReentrant` modifiers with `ReentrancyGuard` implementation from `openzeppelin`. Alternatively just fix this individual re-entrancy issue. There are multiple ways to fix it depending on expected behaviour, for example saving `ERC1155` data and requiring it to match the data after transfer (restricting `onERC1155Received` to not change any data for the token received):      function _transferAndBurnFuses(         bytes32 node,         address newOwner,         uint32 fuses,         uint64 expiry     ) internal {         (address owner, uint32 saveFuses, uint64 saveExpiry) = getData(uint256(node));         _transfer(owner, newOwner, uint256(node), 1, \"\");         uint32 curFuses;         uint64 curExpiry;         (owner, curFuses, curExpiry) = getData(uint256(node));         require(owner == newOwner && saveFuses == curFuses && saveExpiry == curExpiry);         _setFuses(node, newOwner, fuses, expiry);     }   "}, {"title": "Anyone can call `ETHRegistrarController.register` for already existing commitments and set a reverse record to the caller instead of the owner of a record", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/81", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-ens-findings", "body": "Anyone can call `ETHRegistrarController.register` for already existing commitments and set a reverse record to the caller instead of the owner of a record"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/77", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/76", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Renew of 2nd level domain is not done properly", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/63", "labels": ["bug", "2 (Med Risk)"], "target": "2022-07-ens-findings", "body": "Renew of 2nd level domain is not done properly"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/57", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/56", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/53", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/52", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "wrapETH2LD permissioning is over-extended", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/51", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2022-07-ens-findings", "body": "wrapETH2LD permissioning is over-extended"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/48", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/47", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/45", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/44", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/37", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "No check for zero address in setOwner function ", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/34", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-07-ens-findings", "body": "No check for zero address in setOwner function "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/33", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/21", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/19", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/17", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/12", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/11", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-ens-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/2", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-ens-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-07-ens-findings/issues/1", "labels": [], "target": "2022-07-ens-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/177", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/176", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/173", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/168", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/167", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "inkAtEnd (collateral) rounding error (divide before multiply)", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/166", "labels": ["QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "inkAtEnd (collateral) rounding error (divide before multiply)"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/165", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/162", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/156", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/152", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/149", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/148", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/147", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/144", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/143", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/137", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/131", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/125", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Incorrect amount of Collateral moves for Auction", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/123", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-yield/blob/main/contracts/Witch.sol#L232   # Vulnerability details  ## Impact It was observed that the debt and collateral which moves for Auction is calculated incorrectly. In case where line.proportion is set to small value, chances are art will become lower than min debt. This causes whole collateral to go for auction, which was not expected  ___  ## Proof of Concept 1. Assume line.proportion is set to 10% which is a [valid value](https://github.com/code-423n4/2022-07-yield/blob/main/contracts/Witch.sol#L108)  2. Auction is started on Vault associated with collateral & base representing line from Step 1  3. Now debt and collateral to be sold are calculated in [_calcAuction](https://github.com/code-423n4/2022-07-yield/blob/main/contracts/Witch.sol#L223)  ``` uint128 art = uint256(balances.art).wmul(line.proportion).u128();         if (art < debt.min * (10**debt.dec)) art = balances.art;         uint128 ink = (art == balances.art)             ? balances.ink             : uint256(balances.ink).wmul(line.proportion).u128(); ```  4. Now lets say **debt (art)** on this vault was **amount 10**, **collateral (ink)** was **amount 9**, debt.min * (10**debt.dec) was **amount 2**  5. Below calculation occurs  ``` uint128 art = uint256(balances.art).wmul(line.proportion).u128(); // which makes art = 10*10% =1         if (art < debt.min * (10**debt.dec)) art = balances.art;   // since 1<2 so art=10         uint128 ink = (art == balances.art)                                 // Since art is 10 so ink=9             ? balances.ink             : uint256(balances.ink).wmul(line.proportion).u128(); ```  6. So full collateral and full debt are placed for Auction even though only 10% was meant for Auction. Even if it was lower than min debt, auction amount should have only increased upto the point where minimum debt limit is reached  ___  ## Recommended Mitigation Steps Revise the calculation like below  ``` uint128 art = uint256(balances.art).wmul(line.proportion).u128(); uint128 ink=0;         if (art < debt.min * (10**debt.dec))  { art = debt.min * (10**debt.dec); (balances.ink<art) ? (ink=balances.ink) : (ink=art) } else { ink=uint256(balances.ink).wmul(line.proportion).u128(); } ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/120", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/119", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/117", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": " Someone can create non-liquidatable auction if the collateral asset fails on transferring to address(0)", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/116", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-yield/blob/main/contracts/Witch.sol#L176 https://github.com/code-423n4/2022-07-yield/blob/6ab092b8c10e4dabb470918ae15c6451c861655f/contracts/Witch.sol#L399   # Vulnerability details  ## Impact might lead to systematic debt. Cause errors for liquidators to run normally.  ## Proof of Concept In the function `auction`, there is on input validation around whether the `to` is `address(0)` or not. and if the `auctioneerReward` is set to an value > 0 (as default),  each liquidate call will call `Join` module to pay out to `auctioneer` with the following line:  ```jsx if (auctioneerCut > 0) {     ilkJoin.exit(auction_.auctioneer, auctioneerCut.u128()); } ```  This line will revert if `auctioneer` is set to `address(0)` on some tokens (revert on transferring to address(0) is a [default behaviour of the OpenZeppelin template](https://www.notion.so/Yield-Witch-555e6981c26b41008d03a504077b4770)). So if someone start an `auction` with `to = address(0)`, this auction becomes un-liquidatable.  A malicious user can run a bot to monitor his own vault, and if the got underwater and they don\u2019t have enough collateral to top up, they can immediately start an auction on their own vault and set actioneer to `0` to avoid actually being liquidated, which breaks the design of the system.   ## Recommended Mitigation Steps  Add check while starting an auction:  ```jsx function auction(bytes12 vaultId, address to)     external     returns (DataTypes.Auction memory auction_) {     require (to != address(0), \"invalid auctioneer\");   ... }   ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/113", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/111", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/107", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/105", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/104", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/102", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/101", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/100", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/99", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/98", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/97", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/95", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/94", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/93", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/92", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Liquidators can bid in auction even if vault became overcollateralized", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/91", "labels": ["QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "Liquidators can bid in auction even if vault became overcollateralized"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/89", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/86", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Good debt position get liquidated and result in user fund loss", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/80", "labels": ["QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "Good debt position get liquidated and result in user fund loss"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/79", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/77", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/76", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/75", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/71", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/68", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/65", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/64", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/61", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/59", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/56", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Witch._payInk() wouldn't work properly when Witch.auctioneerReward = 1e18", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/54", "labels": ["QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "Witch._payInk() wouldn't work properly when Witch.auctioneerReward = 1e18"}, {"title": "Make vault that can't be auctioned", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/52", "labels": ["QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "Make vault that can't be auctioned"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/51", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/50", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/49", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/48", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/47", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/45", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/42", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/41", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "payBase and payFYToken can unfairly liquidate vaults that are above collateralization threshold", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/40", "labels": ["QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "payBase and payFYToken can unfairly liquidate vaults that are above collateralization threshold"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/38", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/37", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/34", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/33", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/32", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/31", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/29", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "_calcPayout can lose precision of collateral amount calculation", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/28", "labels": ["QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-yield-findings", "body": "_calcPayout can lose precision of collateral amount calculation"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/27", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/26", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/18", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-yield-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/14", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/9", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/2", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-yield-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-07-yield-findings/issues/1", "labels": [], "target": "2022-07-yield-findings", "body": "Agreements & Disclosures"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/234", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/233", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/232", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/231", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Use of `transfer` might render several functions unusable", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/230", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Use of `transfer` might render several functions unusable"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/226", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/225", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/224", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/223", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/222", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/221", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/218", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/217", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/214", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/213", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/211", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/209", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/208", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/205", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/204", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/202", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/200", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/199", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/198", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/197", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Logical and architectural issue puts funds at risk", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-07-axelar-findings", "body": "Logical and architectural issue puts funds at risk"}, {"title": "Sending ether using transfer() ", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/192", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "Sending ether using transfer() "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/191", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/190", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Use `call()` instead of `transfer()` while dealing with `eth`", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/189", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "Use `call()` instead of `transfer()` while dealing with `eth`"}, {"title": "commandID in execute() cannot prevent replicated trades", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/188", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-07-axelar-findings", "body": "commandID in execute() cannot prevent replicated trades"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/187", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/185", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/184", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/183", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/182", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/181", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "`call()` should be used instead of `transfer()` on an address payable", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/180", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "`call()` should be used instead of `transfer()` on an address payable"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/179", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/177", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "XC20Wrapper may lost received token forever if LocalAsset(xc20).mint is reverted indefinitely", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/176", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "XC20Wrapper may lost received token forever if LocalAsset(xc20).mint is reverted indefinitely"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/174", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/173", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/172", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/171", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/169", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "XC20Wrapper: Unsupported fee-on-transfer tokens", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/160", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "XC20Wrapper: Unsupported fee-on-transfer tokens"}, {"title": "Previous {Operators/Weights/Threshold} Are Still Able To Sign Off New Commands After Operatorship Is Transferred", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/156", "labels": ["bug", "2 (Med Risk)"], "target": "2022-07-axelar-findings", "body": "Previous {Operators/Weights/Threshold} Are Still Able To Sign Off New Commands After Operatorship Is Transferred"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/154", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/153", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/150", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/149", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/148", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/146", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Add cancel and refund option for Transaction Recovery", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/139", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Add cancel and refund option for Transaction Recovery"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/138", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/131", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/129", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Use call instead of transfer", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "Use call instead of transfer"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/121", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/116", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/113", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "use call () istead of transfer () when sending eth ", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/107", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "use call () istead of transfer () when sending eth "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/106", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/104", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Without transactions complexity of user-written cross-chain contracts must increase significantly", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Without transactions complexity of user-written cross-chain contracts must increase significantly"}, {"title": "CALL() SHOULD BE USED INSTEAD OF TRANSFER() ON AN ADDRESS PAYABLE", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L128 https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L144 https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L158   # Vulnerability details   # Vulnerability details   ## Impact The use of the deprecated transfer() function for an address will inevitably make the transaction fail when:  The claimer smart contract does not implement a payable function. The claimer smart contract does implement a payable fallback which uses more than 2300 gas unit. The claimer smart contract implements a payable fallback function that needs less than 2300 gas units but is called through proxy, raising the call\u2019s gas usage above 2300. Additionally, using higher than 2300 gas might be mandatory for some multisig wallets. Whenever the user either fails to implement the payable fallback function or cumulative gas cost of the function sequence invoked on a native token transfer exceeds 2300 gas consumption limit the native tokens sent end up undelivered and the corresponding user funds return functionality will fail each time. The impact would mean that any contracts receiving funds would potentially be unable to retrieve funds from the swap.  ## Recommended Mitigation Steps use call() to send eth , re-entrancy has been accounted for in all functions that reference Solidity's transfer() . This has been done by using a re-entrancy guard, therefore, we can rely on msg.sender.call.value(amount)` or using the OpenZeppelin Address.sendValue library   Relevant links: https://github.com/code-423n4/2021-04-meebits-findings/issues/2 https://twitter.com/hacxyk/status/1520715516490379264?s=21&t=fnhDkcC3KpE_kJE8eLiE2A https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/94", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/93", "labels": ["bug", "duplicate", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/92", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/83", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Use call() instead of transfer() on an address payable", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/81", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "Use call() instead of transfer() on an address payable"}, {"title": "Use Call Instead of Transfer for Address Payable", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/75", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "Use Call Instead of Transfer for Address Payable"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/73", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/72", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/70", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/69", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/67", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "CALL() SHOULD BE USED INSTEAD OF TRANSFER() ON AN ADRESSE PAYABLE", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/66", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "CALL() SHOULD BE USED INSTEAD OF TRANSFER() ON AN ADRESSE PAYABLE"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/64", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "USE CALL() INSTEAD OF TRANSFER() WHEN TRANSFERRING ETH IN xc20wrapper", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/60", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "USE CALL() INSTEAD OF TRANSFER() WHEN TRANSFERRING ETH IN xc20wrapper"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/59", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/57", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/52", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/51", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/49", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/48", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/47", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/46", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/45", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/28", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/27", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "removeWrapping can be called when there are still wrapped tokens", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/23", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-axelar/blob/a1205d2ba78e0db583d136f8563e8097860a110f/xc20/contracts/XC20Wrapper.sol#L66   # Vulnerability details  ## Impact An owner can call `removeWrapping`, even if there are still circulating wrapped tokens. This will cause the unwrapping of those tokens to fail, as `unwrapped[wrappedToken]` will be `addres(0)`.  ## Recommended Mitigation Steps Track how many wrapped tokens are in circulation, only allow the removal of a wrapped tokens when there are 0 to ensure for users that they will always be able to unwrap."}, {"title": "Deprecated transfer in various places used", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/21", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "Deprecated transfer in various places used"}, {"title": "System will not work anymore after EIP-4758", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/20", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "System will not work anymore after EIP-4758"}, {"title": "Change of operators possible from old operators", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/19", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L268 https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L311   # Vulnerability details  ## Impact According to the specifications, only the current operators should be able to transfer operatorship. However, there is one way to circumvent this. Because currentOperators is not updated in the loop, when multiple `transferOperatorship` commands are submitted in the same `execute` call, all will succeed. After the first one, the operators that signed these commands are no longer the current operators, but the call will still succeed.  This also means that one set of operators could submit so many `transferOperatorship` commands in one `execute` call that `OLD_KEY_RETENTION` is reached for all other ones, meaning they would control complete set of currently valid operators.  ## Recommended Mitigation Steps Set `currentOperators` to `false` when the operators were changed."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/18", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/17", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/16", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "We should use address(xxx).call{value:xxxx} instead of payable(msg.sender).transfer(", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-07-axelar-findings", "body": "We should use address(xxx).call{value:xxxx} instead of payable(msg.sender).transfer("}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/12", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "CALL() SHOULD BE USED INSTEAD OF TRANSFER() ON AN ADDRESS PAYABLE", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/4", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-07-axelar-findings", "body": "CALL() SHOULD BE USED INSTEAD OF TRANSFER() ON AN ADDRESS PAYABLE"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-07-axelar-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/2", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-07-axelar-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-07-axelar-findings/issues/1", "labels": [], "target": "2022-07-axelar-findings", "body": "Agreements & Disclosures"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/174", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/171", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/167", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/165", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/164", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "If a MIMOProxy owner destroys their proxy, they cannot deploy another from the same address", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/162", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyRegistry.sol#L45-L59   # Vulnerability details  When deploying a new `MIMOProxy`, the `MIMOProxyRegistry` first checks whether a proxy exists with the same owner for the given address. If an existing proxy is found, the deployment reverts:  [`MIMOProxyRegistry#deployFor`](https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyRegistry.sol#L45-L59)  ```solidity   function deployFor(address owner) public override returns (IMIMOProxy proxy) {     IMIMOProxy currentProxy = _currentProxies[owner];      // Do not deploy if the proxy already exists and the owner is the same.     if (address(currentProxy) != address(0) && currentProxy.owner() == owner) {       revert CustomErrors.PROXY_ALREADY_EXISTS(owner);     }      // Deploy the proxy via the factory.     proxy = factory.deployFor(owner);      // Set or override the current proxy for the owner.     _currentProxies[owner] = IMIMOProxy(proxy);   } } ```  However, if a `MIMOProxy` owner intentionally or accidentally destroys their proxy by `delegatecall`ing a target that calls `selfdestruct`, the address of their destroyed proxy will remain in the `_currentProxies` mapping, but the static call to `currentProxy.owner()` on L49 will revert. The caller will be blocked from deploying a new proxy from the same address that created their original `MIMOProxy.  **Impact:** If a user accidentally destroys their MIMOProxy, they must use a new EOA address to deploy another.  ### Recommendation  Check whether the proxy has been destroyed as part of the \"proxy already exists\" conditions. If the proxy address has a codesize of zero, it has been destroyed:  ```solidity     // Do not deploy if the proxy already exists and the owner is the same.     if (address(currentProxy) != address(0) && currentProxy.code.length > 0 && currentProxy.owner() == owner) {       revert CustomErrors.PROXY_ALREADY_EXISTS(owner);     }  ```  ### Test cases  We'll use this `ProxyAttacks` helper contract to manipulate proxy storage. Note that it has the same storage layout as `MIMOProxy`.  ```solidity contract ProxyAttacks {     address public owner;    uint256 public minGasReserve;    mapping(address => mapping(address => mapping(bytes4 => bool))) internal _permissions;     // Selector 0x9cb8a26a    function selfDestruct() external {      selfdestruct(payable(address(0)));    } } ```  Then deploy the `ProxyAttacks` helper in a test environment and use `MIMOProxy` to `delegatecall` into it:  ```typescript import chai, { expect } from 'chai'; import { solidity } from 'ethereum-waffle'; import { deployments, ethers } from 'hardhat';  import { MIMOProxy, MIMOProxyFactory, MIMOProxyRegistry, ProxyAttacks } from '../../typechain';  chai.use(solidity);  const setup = deployments.createFixture(async () => {   const { deploy } = deployments;   const [owner, attacker] = await ethers.getSigners();    await deploy(\"MIMOProxy\", {     from: owner.address,     args: [],   });   const mimoProxyBase: MIMOProxy = await ethers.getContract(\"MIMOProxy\");    await deploy(\"MIMOProxyFactory\", {     from: owner.address,     args: [mimoProxyBase.address],   });   const mimoProxyFactory: MIMOProxyFactory = await ethers.getContract(\"MIMOProxyFactory\");    await deploy(\"MIMOProxyRegistry\", {     from: owner.address,     args: [mimoProxyFactory.address],   });   const mimoProxyRegistry: MIMOProxyRegistry = await ethers.getContract(\"MIMOProxyRegistry\");    await deploy(\"ProxyAttacks\", {     from: owner.address,     args: [],   });   const proxyAttacks: ProxyAttacks = await ethers.getContract(\"ProxyAttacks\");    return {     owner,     attacker,     mimoProxyBase,     mimoProxyFactory,     mimoProxyRegistry,     proxyAttacks,   }; });  describe(\"Proxy attack tests\", () => {   it(\"Proxy instance self destruct + recreation\", async () => {     const { owner, mimoProxyRegistry, proxyAttacks } = await setup();     await mimoProxyRegistry.deploy();     const currentProxy = await mimoProxyRegistry.getCurrentProxy(owner.address);     const proxy = await ethers.getContractAt(\"MIMOProxy\", currentProxy);      // Delegatecall to selfDestruct on ProxyAttacks contract     await proxy.execute(proxyAttacks.address, \"0x9cb8a26a\");      // Owner's existing proxy is destroyed     expect(proxy.owner()).to.be.revertedWith(\"call revert exception\");      // Cannot deploy another proxy for this address through the registry     await expect(mimoProxyRegistry.deploy()).to.be.revertedWith(\"function returned an unexpected amount of data\");   }); }); ```"}, {"title": "Malicious targets can manipulate MIMOProxy permissions", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/161", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-mimo-findings", "body": "Malicious targets can manipulate MIMOProxy permissions"}, {"title": "Incorrect implementation of access control in MIMOProxy:execute", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/159", "labels": ["bug", "question", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/main/contracts/proxy/MIMOProxy.sol#L54 https://github.com/code-423n4/2022-08-mimo/blob/main/contracts/proxy/MIMOProxy.sol#L104   # Vulnerability details  ## Description  There is a function `execute` in `MIMOProxy` smart contract. The function performs a delegate call to the user-specified address with the specified data. As an access control, the function checks that either it was called by the owner or the owner has previously approved that the sender can call a specified target with specified calldata. See https://github.com/code-423n4/2022-08-mimo/blob/main/contracts/proxy/MIMOProxy.sol#L104.   The check itself:   ```     if (owner != msg.sender) {       bytes4 selector;       assembly {         selector := calldataload(data.offset)       }       if (!_permissions[msg.sender][target][selector]) {         revert CustomErrors.EXECUTION_NOT_AUTHORIZED(owner, msg.sender, target, selector);       }     } ```  The problem is how the `selector` is calculated. Specifically, `calldataload(data.offset)` - reads first 4 bytes of `data`.  Imagine `data.length == 0`, does it mean that `calldataload(data.offset)` will return `bytes4(0)`? No.  Let's see how calldata are accepted by functions in Solidity. The solidity function checks that the calldata length is less than needed, but does NOT check that there is no redundant data in calldata. That means, the function `execute(address target, bytes calldata data)` will definitely accept data that have `target` and `data`, but also in calldata can be other user-provided bytes. As a result,  `calldataload(data.offset)` can read trash, but not the `data` bytes.  And in the case of `execute` function, an attacker can affect the execution by providing `trash` data at the end of the function. Namely, if the attacker has permission to call the function with some `signature`, the attacker can call proxy contract bypass check for signature and make delegate call directly with zero calldata.  Please see proof-of-concept (PoC), `getAttackerCalldata` returns a calldata with which it is possible to bypass check permission for signature. Function `execute` from PoC simulate check for permission to call `signatureWithPermision`, and enforce that `data.length == 0`. With calldata from `getAttackerCalldata` it works.  ## Impact  Any account that have permission to call at least one function (signature) to the contract can call fallback function without without permission to do so.  ## Proof of Concept  ``` // SPDX-License-Identifier: MIT OR Apache-2.0  pragma solidity ^0.8.0;  interface IMIMOProxy {   event Execute(address indexed target, bytes data, bytes response);    event TransferOwnership(address indexed oldOwner, address indexed newOwner);    function initialize() external;    function getPermission(     address envoy,     address target,     bytes4 selector   ) external view returns (bool);    function owner() external view returns (address);    function minGasReserve() external view returns (uint256);    function execute(address target, bytes calldata data) external payable returns (bytes memory response);    function setPermission(     address envoy,     address target,     bytes4 selector,     bool permission   ) external;    function transferOwnership(address newOwner) external;    function multicall(address[] calldata targets, bytes[] calldata data) external returns (bytes[] memory); }  contract PoC {     bytes4 public signatureWithPermision = bytes4(0xffffffff);      // Call this function with calldata that can be prepared in `getAttackerCalldata`     function execute(address target, bytes calldata data) external {         bytes4 selector;         assembly {             selector := calldataload(data.offset)         }          require(selector == signatureWithPermision);          require(data.length == 0);     }      // Function that prepare attacker calldata     function getAttackerCalldata() public view returns(bytes memory)  {         bytes memory usualCalldata = abi.encodeWithSelector(IMIMOProxy.execute.selector, msg.sender, new bytes(0));         return abi.encodePacked(usualCalldata, bytes32(signatureWithPermision));     } } ```  ## Recommended Mitigation Steps  Add `require(data.length >= 4);`"}, {"title": "Malicious manipulation of gas reserve can deny access to MIMOProxy", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/158", "labels": ["bug", "duplicate", "2 (Med Risk)"], "target": "2022-08-mimo-findings", "body": "Malicious manipulation of gas reserve can deny access to MIMOProxy"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/156", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "[H3] Persisted msg.value in a loop of delegate calls can be used to drain ETH from your proxy", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/153", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "[H3] Persisted msg.value in a loop of delegate calls can be used to drain ETH from your proxy"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/151", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "User may be front-run when trying to deploy `MIMOProxy`", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/148", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "User may be front-run when trying to deploy `MIMOProxy`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/147", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/143", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/142", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/140", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/139", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/138", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/137", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/136", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "`vaultOwner` Can Front-Run `rebalance()` With `setAutomation()` To Lower Incentives ", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/134", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/main/contracts/actions/automated/MIMOAutoAction.sol#L32 https://github.com/code-423n4/2022-08-mimo/blob/main/contracts/actions/automated/MIMOAutoRebalance.sol#L54   # Vulnerability details  ## Impact A `vaultOwner` who is \"not confident enough in ourselves to stay up-to-date with market conditions to know when we should move to less volatile collateral to avoid liquidations.\" They can open their vault to other users who pay attention to the markets and would call `rebalance` to recieve the insentivized fees. The `vaultOwner` who doesn't want to pay the baiting high fees instead front-runs the `autoRebalance()` with `setAutomation()` to lower incentives.  ## Proof of Concept 1. A Mallory a `vaultOwner` isn't confident in staying up-to-date with market conditions. She has her vault setup to be automated and has high fee incentives.  2. Alice a user who is confident in staying up-to-date with market conditions see's a profitable opportunity and calls `rebalance()`. 3. Mallory is confident in her programing and watching mempools for when `rebalance()` is called. See's that Alice just called `rebalance()` and calls `setAutomation()` to lower the incentives.  4. Alice's call to `rebalance()` then goes through getting lower incentives and Mallory then calls `setAutomation()` to set the incentives back to normal.  ## Tools Used Manual Review  ## Recommended Mitigation Steps Add a time-lock to `setAutomation` so that the `vaultOwner` can't front-run users."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/133", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/132", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/131", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/130", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/129", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/128", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/127", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/126", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "ProxyFactory can circumvent ProxyRegistry", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/123", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyFactory.sol#L45   # Vulnerability details  ## Impact The `deployFor()` function in `MIMOProxyFactory.sol` can be called directly instead of being called within `MIMOProxyRegistry.sol`. This results in the ability to create many MIMOProxies that are not registered within the registry. The proxies deployed directly through the factory will lack the ability to call certain actions such as leveraging and emptying the vault, but will be able to call all functions in `MIMOVaultAction.sol`.  This inconsistency doesn't feel natural and would be remedied by adding an `onlyRegistry` modifier to the `ProxyFactory.deployFor()` function.  ## Proof of Concept `MIMOProxyFactory.deployFor()` lacking any access control: ```   function deployFor(address owner) public override returns (IMIMOProxy proxy) {     proxy = IMIMOProxy(mimoProxyBase.clone());     proxy.initialize();       // Transfer the ownership from this factory contract to the specified owner.     proxy.transferOwnership(owner);       // Mark the proxy as deployed.     _proxies[address(proxy)] = true;       // Log the proxy via en event.     emit DeployProxy(msg.sender, owner, address(proxy));   } } ```  Example of reduced functionality: `MIMOEmptyVault.executeOperation()` checks proxy existence in the proxy registry therefore can't be called. ```   function executeOperation(     address[] calldata assets,     uint256[] calldata amounts,     uint256[] calldata premiums,     address initiator,     bytes calldata params   ) external override returns (bool) {     (address owner, uint256 vaultId, SwapData memory swapData) = abi.decode(params, (address, uint256, SwapData));     IMIMOProxy mimoProxy = IMIMOProxy(proxyRegistry.getCurrentProxy(owner)); ```  ## Tools Used Manual review.  ## Recommended Mitigation Steps Adding access control to ensure that the factory deployFor function is called from the proxy registry would mitigate this issue."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/122", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/119", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/115", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/114", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/113", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/109", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/107", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/99", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/98", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/96", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/91", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/88", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/87", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/86", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/83", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Registry.sol works bad - it fails to delivere expected functionality", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/78", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyFactory.sol#L40-L58 https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyRegistry.sol#L39-L59   # Vulnerability details  ## Impact The description of Registry.sol is following: /// Deploys new proxies via the factory and keeps a registry of owners to proxies. Owners can only /// have one proxy at a time. But it is not. There are multiple problems: 1) Proxy owner can change and will not be registered 2) There many ways for an owner to have many proxies: - a few other proxy owners transfeOwnership() to one address - Registry tracks last deployments and does not guarantee ownership - Factory.sol allows calling deployFor() to anyone, without any checks and registrations  ## Proof of Concept https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyFactory.sol#L40-L58 https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/proxy/MIMOProxyRegistry.sol#L39-L59  ## Tools Used Hardhat  ## Recommended Mitigation Steps Delete Proxy.transfetOwnership() Disallow anyone to call deploy() and deployFor() in Factory()"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/76", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/74", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/73", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/70", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Automation / management can be set for not yet existing vault", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/68", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/9adf46f2efc61898247c719f2f948b41d5d62bbe/contracts/actions/automated/MIMOAutoAction.sol#L33 https://github.com/code-423n4/2022-08-mimo/blob/9adf46f2efc61898247c719f2f948b41d5d62bbe/contracts/actions/managed/MIMOManagedAction.sol#L35   # Vulnerability details  ## Impact & Proof Of Concept `vaultOwner` returns zero for a non-existing `vaultId`. Similarly, `proxyRegistry.getCurrentProxy(msg.sender)` returns zero when `msg.sender` has not deployed a proxy yet. Those two facts can be combined to set automation for a vault ID that does not exist yet. When this is done by a user without a proxy, it will succeed, as both `vaultOwner` and `mimoProxy` are `address(0)`, i.e. we have `vaultOwner == mimoProxy`.  The consequences of this are quite severe. As soon as the vault is created, it will be an automated vault (with potentially very high fees). An attacker can exploit this by setting very high fees before the creation of the vault and then performing actions for the automated vault, which leads to a loss of funds for the user.  The same attack is possible for `setManagement`.  ## Recommended Mitigation Steps Do not allow setting automation parameters for non-existing vaults, i.e. check that `vaultOwner != address(0)`."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/64", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/63", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/61", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/59", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/57", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/52", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/50", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/49", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "The length of address[] calldata targets and  bytes calldata data not checked to see if they are equal in Muticall MIMOProxy", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/47", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "The length of address[] calldata targets and  bytes calldata data not checked to see if they are equal in Muticall MIMOProxy"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/44", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/41", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/40", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Vault rebalancing can be exploited if two vaults rebalance into the same vault", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/39", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "Vault rebalancing can be exploited if two vaults rebalance into the same vault"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/38", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "MIMOManagedRebalance.sol#rebalance calculates managerFee incorrectly", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/34", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/actions/managed/MIMOManagedRebalance.sol#L50-L80   # Vulnerability details  ## Impact Inconsistent manager fees could lead to lack of incentivization to rebalance and unexpected liquidation.  ## Proof of Concept      uint256 managerFee = managedVault.fixedFee + flData.amount.wadMul(managedVault.varFee);      IERC20(a.stablex()).safeTransfer(managedVault.manager, managerFee);  The variable portion of the fee is calculated using the amount of the flashloan but pays out in PAR. This is problematic because the value of the flashloan asset is constantly fluctuating in value against PAR. This results in an unpredictable fee for both the user and the manager. If the asset drops in price then the user will pay more than they intended. If the asset increases in price then the fee may not be enough to incentivize the manager to call them. The purpose of the managed rebalance is limit user interaction. If the manager isn't incentivized to call the vault then the user may be unexpectedly liquidated, resulting in loss of user funds.    ## Tools Used  ## Recommended Mitigation Steps  varFee should be calculated against the PAR of the rebalance like it is in MIMOAutoRebalance.sol:      IPriceFeed priceFeed = a.priceFeed();     address fromCollateral = vaultsData.vaultCollateralType(rbData.vaultId);      uint256 rebalanceValue = priceFeed.convertFrom(fromCollateral, flData.amount);     uint256 managerFee = managedVault.fixedFee + rebalanceValue.wadMul(managedVault.varFee);"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/33", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/30", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/29", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/28", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/21", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "MIMOEmptyVault.sol executeOperation() does not transfer the Vault leftover assets to the owner, it is locked in the MIMOEmptyVault", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/18", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-mimo-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-mimo/blob/eb1a5016b69f72bc1e4fd3600a65e908bd228f13/contracts/actions/MIMOEmptyVault.sol#L96-L100   # Vulnerability details  ## Impact MIMOEmptyVault.sol executeAction() is supposed to pay off the debt and return the leftover assets to the owner of the Vault But In fact the emptyVault contract, after executing the executionOperation(), only pays back the flash loan, and does not transfer the leftover assets to the owner, and locked in the emptyVault contract  ## Proof of Concept ```   function executeOperation(     address[] calldata assets,     uint256[] calldata amounts,     uint256[] calldata premiums,     address initiator,     bytes calldata params   ) external override returns (bool) {      ....     ....      require(flashloanRepayAmount <= vaultCollateral.balanceOf(address(this)), Errors.CANNOT_REPAY_FLASHLOAN);      vaultCollateral.safeIncreaseAllowance(address(lendingPool), flashloanRepayAmount);      //****Paid off the flash loan but did not transfer the remaining balance back to mimoProxy or owner ***//      return true;   }  ```  Add logs to test case   test/02_integration/MIMOEmtpyVault.test.ts  ```   it(\"should be able to empty vault with 1inch\", async () => {   ...   ...   ...   ++++ console.log(\"before emptyVault balance:--->\", (await wmatic.balanceOf(emptyVault.address)) + \"\");     const tx = await mimoProxy.execute(emptyVault.address, MIMOProxyData);     const receipt = await tx.wait(1);   ++++ console.log(\"after emptyVault balance: --->\", (await wmatic.balanceOf(emptyVault.address)) + \"\");    ```  print: ``` before emptyVault balance:---> 0 after emptyVault balance: ---> 44383268870065355782  ```  ## Tools Used  ## Recommended Mitigation Steps  ```   function executeOperation(     address[] calldata assets,     uint256[] calldata amounts,     uint256[] calldata premiums,     address initiator,     bytes calldata params   ) external override returns (bool) {      ....     ....      require(flashloanRepayAmount <= vaultCollateral.balanceOf(address(this)), Errors.CANNOT_REPAY_FLASHLOAN);      vaultCollateral.safeIncreaseAllowance(address(lendingPool), flashloanRepayAmount);      //****transfer the remaining balance back to mimoProxy or owner ***//     ++++ vaultCollateral.safeTransfer(address(mimoProxy), vaultCollateral.balanceOf(address(this)) - flashloanRepayAmount);      return true;   }  ``` "}, {"title": " Lack of a contract existence check in MIMOProxy leadsto incorrect", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/15", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": " Lack of a contract existence check in MIMOProxy leadsto incorrect"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/11", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/10", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "MIMOProxy accepts mismatched `targets` and `data` arrays resulting in unexpected behaviour", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/8", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "MIMOProxy accepts mismatched `targets` and `data` arrays resulting in unexpected behaviour"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-mimo-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/2", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2022-08-mimo-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-mimo-findings/issues/1", "labels": [], "target": "2022-08-mimo-findings", "body": "Agreements & Disclosures"}, {"title": "Owner of project NFT has no purpose", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/413", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor disputed", "valid"], "target": "2022-08-rigor-findings", "body": "Owner of project NFT has no purpose"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/411", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/410", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/409", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/407", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/406", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/405", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/404", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/403", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/402", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/401", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Missing upper limit definition in replaceLenderFee() of HomeFi.sol", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/400", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Community.sol#L392-L394 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/HomeFi.sol#L184-L197   # Vulnerability details  # Missing upper limit definition in `replaceLenderFee()` of `HomeFi.sol`  ## Impact The admin of the `HomeFi` contract can set `lenderFee` to greater than 100%, forcing calls to `lendToProject()` to all projects created in the future to revert.  ## Proof of Concept Using the function `replaceLenderFee()`, admins of the `HomeFi` contract can set `lenderFee` to any arbitrary `uint256` value: ```solidity  185:        function replaceLenderFee(uint256 _newLenderFee)  186:            external  187:            override  188:            onlyAdmin  189:        {  190:            // Revert if no change in lender fee  191:            require(lenderFee != _newLenderFee, \"HomeFi::!Change\");  192:      193:            // Reset variables  194:            lenderFee = _newLenderFee;  195:      196:            emit LenderFeeReplaced(_newLenderFee);  197:        } ```  New projects that are created will then get its `lenderFee` from the `HomeFi` contract. When communities wish to lend to these projects, it calls `lendToProject()`, which has the following calculation: ```solidity  392:        // Calculate lenderFee  393:        uint256 _lenderFee = (_lendingAmount * _projectInstance.lenderFee()) /  394:            (_projectInstance.lenderFee() + 1000); ``` If `lenderFee` a large value, such as `type(uint256).max`, the calculation shown above to overflow. This prevents any community from lending to any new projects.   ## Recommended Mitigation Steps Consider adding a reasonable fee rate bounds checks in the `replaceLenderFee()` function. This would prevent potential griefing and increase the trust of users in the contract."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/399", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/398", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/396", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/392", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/391", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/390", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/389", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/388", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/387", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/386", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/385", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/383", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/382", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "New subcontractor can be set for a SCConfirmed task without current subcontractor consent", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/378", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L295-L316   # Vulnerability details  Malicious builder/contractor can change the subcontractor for any task even if all the terms was agreed upon and work was started/finished, but the task wasn't set to completed yet, i.e. it's `SCConfirmed`, `getAlerts(_taskID)[2] == true`. This condition is not checked by inviteSC().  For example, a contractor can create a subcontractor of her own and front run valid setComplete() call with a sequence of `inviteSC(task, own_subcontractor) -> setComplete()` with a signatory from the `own_subcontractor`, stealing the task budget from the subcontractor who did the job. Contractor will not breach any duties with the community as the task will be done, while raiseDispute() will not work for a real subcontractor as the task record will be already changed.  Setting the severity to be high as this creates an attack vector to fully steal task budget from the subcontractor as at the moment of any valid setComplete() call the task budget belongs to subcontractor as the job completion is already verified by all the parties.  ## Proof of Concept  inviteSC() requires either builder or contractor to call for the change and verify nothing else:  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L295-L316  ```solidity     /// @inheritdoc IProject     function inviteSC(uint256[] calldata _taskList, address[] calldata _scList)         external         override     {         // Revert if sender is neither builder nor contractor.         require(             _msgSender() == builder || _msgSender() == contractor,             \"Project::!Builder||!GC\"         );          // Revert if taskList array length not equal to scList array length.         uint256 _length = _taskList.length;         require(_length == _scList.length, \"Project::Lengths !match\");          // Invite subcontractor for each task.         for (uint256 i = 0; i < _length; i++) {             _inviteSC(_taskList[i], _scList[i], false);         }          emit MultipleSCInvited(_taskList, _scList);     } ```  _inviteSC() only checks non-zero address and calls inviteSubcontractor():  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L747-L762  ```solidity     function _inviteSC(         uint256 _taskID,         address _sc,         bool _emitEvent     ) internal {         // Revert if sc to invite is address 0         require(_sc != address(0), \"Project::0 address\");          // Internal call to tasks invite contractor         tasks[_taskID].inviteSubcontractor(_sc);          // If `_emitEvent` is true (called via changeOrder) then emit event         if (_emitEvent) {             emit SingleSCInvited(_taskID, _sc);         }     } ```  inviteSubcontractor() just sets the new value:  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/libraries/Tasks.sol#L106-L111  ```solidity     function inviteSubcontractor(Task storage _self, address _sc)         internal         onlyInactive(_self)     {         _self.subcontractor = _sc;     } ```  Task is paid only on completion by setComplete():  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L349-L356  ```solidity         // Mark task as complete. Only works when task is active.         tasks[_taskID].setComplete();          // Transfer funds to subcontractor.         currency.safeTransfer(             tasks[_taskID].subcontractor,             tasks[_taskID].cost         ); ```  This way the absence of `getAlerts(_taskID)[2]` check and checkSignatureTask() call in inviteSC() provides a way for builder or contractor to steal task budget from a subcontractor.   ## Recommended Mitigation Steps  Consider calling checkSignatureTask() when `getAlerts(_taskID)[2]` is true, schematically:  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L310-L313  ```solidity         // Invite subcontractor for each task.         for (uint256 i = 0; i < _length; i++) { +           if (getAlerts(_taskList[i])[2]) +               checkSignatureTask(_data_with_scList[i], _signature, _taskList[i]);                     _inviteSC(_taskList[i], _scList[i], false);         } ```  This approach is already implemented in changeOrder() where `_newSC` is a part of hash that has to be signed by all the parties:  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L386-L403  ```solidity     function changeOrder(bytes calldata _data, bytes calldata _signature)         external         override         nonReentrant     {         // Decode params from _data         (             uint256 _taskID,             address _newSC,             uint256 _newCost,             address _project         ) = abi.decode(_data, (uint256, address, uint256, address));          // If the sender is disputes contract, then do not check for signatures.         if (_msgSender() != disputes) {             // Check for required signatures.             checkSignatureTask(_data, _signature, _taskID);         } ```  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L477-L481  ```solidity             // If new subcontractor is not zero address.             if (_newSC != address(0)) {                 // Invite the new subcontractor for the task.                 _inviteSC(_taskID, _newSC, true);             } ```  checkSignatureTask() checks all the signatures:  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L855-L861  ```solidity             // When builder has not delegated rights to contractor             else {                 // Check for B, SC and GC signatures                 checkSignatureValidity(builder, _hash, _signature, 0);                 checkSignatureValidity(contractor, _hash, _signature, 1);                 checkSignatureValidity(_sc, _hash, _signature, 2);             } ```  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/377", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/375", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/370", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/367", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/366", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/361", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/359", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/358", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/357", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/354", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/353", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/352", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/351", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/350", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/349", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "It should not submit a project with no total budget. Requires at least one task with cost > 0", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/348", "labels": ["bug", "documentation", "2 (Med Risk)", "sponsor acknowledged", "sponsor disputed", "valid"], "target": "2022-08-rigor-findings", "body": "It should not submit a project with no total budget. Requires at least one task with cost > 0"}, {"title": "updateProjectHash does not check project address", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/347", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L162   # Vulnerability details  In Project.sol, function `updateProjectHash` L162, `_data` (which is signed by builder and/or contractor) does not contain a reference to the project address. In all other external functions of Project.sol, `_data` contains the address of the project, used in this check:  ```require(_projectAddress == address(this), \"Project::!projectAddress\");```. The lack of this verification makes it possible to reuse the same `_data`, and the same `_signature` on another project, in the case the latter has the same builder and/or contractor, and the same `_nonce`. In pratice, if the same group of people starts a new project, when `_nonce` reaches the correct value, anyone can change the hash of a task (if we suppose that that `updateTaskHash()` was used in the previous project)."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/345", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/344", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/343", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/342", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/341", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "`Project.raiseDispute()` doesn't use approvedHashes - meaning users who use contracts can't raise disputes", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/340", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L493-L536   # Vulnerability details   ## Impact In case users are using a contract (like a multisig wallet) to interact with a project, they can't raise a dispute.  The sponsors have added the `approveHash()` function to support users who wish to use contracts as builder/GC/SC. However, the `Project.raiseDispute()` function doesn't check them, meaning if any of those users wish to raise a dispute they can't do it.  ## Proof of Concept I've modified [the following test](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/test/utils/disputeTests.ts#L179-L215), trying to use an approved hash. The test failed.  ```typescript   it('Builder can raise addTasks() dispute', async () => {       let expected = 2;       const actionValues = [         [exampleHash],         [100000000000],         expected,         projectAddress,       ];       // build and raise dispute transaction       const [encodedData, signature] = await makeDispute(         projectAddress,         0,         1,         actionValues,         signers[0],         '0x4222',       );       const encodedMsgHash = ethers.utils.keccak256(encodedData);       await project.connect(signers[0]).approveHash(encodedMsgHash);       let tx = await project         .connect(signers[1])         .raiseDispute(encodedData, \"0x\");       // expect event       await expect(tx)         .to.emit(disputesContract, 'DisputeRaised')         .withArgs(1, '0x4222');       // expect dispute raise to store info       const _dispute = await disputesContract.disputes(1);       const decodedAction = abiCoder.decode(types.taskAdd, _dispute.actionData);       expect(_dispute.status).to.be.equal(1);       expect(_dispute.taskID).to.be.equal(0);       expect(decodedAction[0][0]).to.be.equal(exampleHash);       expect(decodedAction[1][0]).to.be.equal(100000000000);       expect(decodedAction[2]).to.be.equal(expected);       expect(decodedAction[3]).to.be.equal(projectAddress);       // expect unchanged number of tasks       let taskCount = await project.taskCount();       expect(taskCount).to.be.equal(expected);     });  ```  ## Recommended Mitigation Steps Make `raiseDispute()` to check for approvedHashes too"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/338", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/337", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Possible DOS in `lendToProject()` and `toggleLendingNeeded()` function because unbounded loop can run out of gas", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/336", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L710   # Vulnerability details  ## Impact  In `Project` contract, the `lendToProject()` function might not be available to be called if there are a lot of Task in `tasks[]` list of project. It means that the project cannot be funded by either builder or community owner.  This can happen because `lendToProject()` used `projectCost()` function. And the loop in `projectCost()` did not have a mechanism to stop, it\u2019s only based on the length `taskCount`, and may take all the gas limit. If the gas limit is reached, this transaction will fail or revert.  Same issue with `toggleLendingNeeded()` function which also call `projectCost()` function.  ## Proof of Concept  Function `projectCost()` did not have a mechanism to stop, only based on the `taskCount`. ```solidity function projectCost() public view override returns (uint256 _cost) {     // Local instance of taskCount. To save gas.     uint256 _length = taskCount;      // Iterate over all tasks to sum their cost     for (uint256 _taskID = 1; _taskID <= _length; _taskID++) {         _cost += tasks[_taskID].cost;     } } ```  There is no limit for builder when [add task](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L248-L257).  And function `lendToProject()` used `projectCost()` to [check the new total lent value](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L199-L202) ```solidity require(     projectCost() >= uint256(_newTotalLent),     \"Project::value>required\" ); ```  ## Tools Used  Manual Review  ## Recommended Mitigation Steps  Consider keep value of `projectCost()` in a storage variable and update it when a task is added or updated accordingly.  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/335", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/333", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/332", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/330", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/328", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Anyone can create disputes if `contractor` is not set", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/327", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L498-L502 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/libraries/SignatureDecoder.sol#L25   # Vulnerability details  ## Impact  Disputes enable an actor to arbitrate & potentially enforce requested state changes. However, the current implementation does not properly implement authorization, thus anyone is able to create disputes and spam the system with invalid disputes.  ## Proof of Concept  Calling the `Project.raiseDispute` function with an invalid `_signature`, for instance providing a `_signature` with a length of 66 will return `address(0)` as the recovered signer address.  [Project.raiseDispute](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L498-L502)  ```solidity function raiseDispute(bytes calldata _data, bytes calldata _signature)     external     override {     // Recover the signer from the signature     address signer = SignatureDecoder.recoverKey(         keccak256(_data),         _signature,         0     );      ...   } ```  [SignatureDecoder.sol#L25](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/libraries/SignatureDecoder.sol#L25)  ```solidity function recoverKey(   bytes32 messageHash,   bytes memory messageSignatures,   uint256 pos ) internal pure returns (address) {   if (messageSignatures.length % 65 != 0) {       return (address(0));   }    ... } ```  If `_task` is set to `0` and the project does not have a `contractor`, the `require` checks will pass and `IDisputes(disputes).raiseDispute(_data, _signature);` is called. The same applies if a specific `_task` is given and if the task has a `subcontractor`. Then the check will also pass.  [Project.raiseDispute](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Disputes.sol#L84-L122)  ```solidity function raiseDispute(bytes calldata _data, bytes calldata _signature)     external     override {     // Recover the signer from the signature     address signer = SignatureDecoder.recoverKey(         keccak256(_data),         _signature,         0     );      // Decode params from _data     (address _project, uint256 _task, , , ) = abi.decode(         _data,         (address, uint256, uint8, bytes, bytes)     );      // Revert if decoded project address does not match this contract. Indicating incorrect _data.     require(_project == address(this), \"Project::!projectAddress\");      if (_task == 0) {         // Revet if sender is not builder or contractor         require(             signer == builder || signer == contractor, // @audit-info if `contractor = address(0)` and the recovered signer is also the zero-address, this check will pass             \"Project::!(GC||Builder)\"         );     } else {         // Revet if sender is not builder, contractor or task's subcontractor         require(             signer == builder ||                 signer == contractor || // @audit-info if `contractor = address(0)` and the recovered signer is also the zero-address, this check will pass                 signer == tasks[_task].subcontractor,             \"Project::!(GC||Builder||SC)\"         );          if (signer == tasks[_task].subcontractor) {             // If sender is task's subcontractor, revert if invitation is not accepted.             require(getAlerts(_task)[2], \"Project::!SCConfirmed\");         }     }      // Make a call to Disputes contract raiseDisputes.     IDisputes(disputes).raiseDispute(_data, _signature); // @audit-info Dispute will be created. Anyone can spam the system with fake disputes } ```  ## Tools Used  Manual review  ## Recommended mitigation steps  Consider checking the recovered `signer` address in `Project.raiseDispute` to not equal the zero-address:  ```solidity function raiseDispute(bytes calldata _data, bytes calldata _signature)     external     override {     // Recover the signer from the signature     address signer = SignatureDecoder.recoverKey(         keccak256(_data),         _signature,         0     );      require(signer != address(0), \"Zero-address\"); // @audit-info Revert if signer is zero-address      ...   } ``` "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/326", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "No way to part ways with project contractor", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/325", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged", "sponsor disputed", "valid"], "target": "2022-08-rigor-findings", "body": "No way to part ways with project contractor"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/323", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/322", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Malicious delegated contractor can block funding tasks or mark tasks as complete", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/320", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Malicious delegated contractor can block funding tasks or mark tasks as complete"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/319", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/318", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/316", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/315", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/314", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/312", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/310", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/309", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/308", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/306", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/305", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/304", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/303", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/300", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Add members to the not yet created community", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/298", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Community.sol#L187 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Community.sol#L179 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Community.sol#L878 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/libraries/SignatureDecoder.sol#L39   # Vulnerability details  ## Impact There is a `addMember` function in the `Community`.  The function accepts `_data` that should be signed by the `_community.owner` and `_newMemberAddr`.   ```         // Compute hash from bytes         bytes32 _hash = keccak256(_data);          // Decode params from _data         (             uint256 _communityID,             address _newMemberAddr,             bytes memory _messageHash         ) = abi.decode(_data, (uint256, address, bytes));          CommunityStruct storage _community = _communities[_communityID];          // check signatures         checkSignatureValidity(_community.owner, _hash, _signature, 0); // must be community owner         checkSignatureValidity(_newMemberAddr, _hash, _signature, 1); // must be new member ```  The code above shows exactly what the contract logic looks like.   1) `_communityID` is taken from the data provided by user, so it can arbitrarily. Specifically,  community with selected `_communityID` can be not yet created. For instance, it can be equal to the `communityCount + 1`, thus the next created community will have this `_communityID`.   2) `_communities[_communityID]` will store null values for all fields, for a selected `_communityID`. That means, `_community.owner == address(0)`  3) `checkSignatureValidity` with a parameters `address(0), _hash, _signature, 0` will not revert a call if an attacker provide incorrect `_signature`.  let's see the implementation of `checkSignatureValidity`:  ```         // Decode signer         address _recoveredSignature = SignatureDecoder.recoverKey(             _hash,             _signature,             _signatureIndex         );          // Revert if decoded signer does not match expected address         // Or if hash is not approved by the expected address.         require(             _recoveredSignature == _address || approvedHashes[_address][_hash],             \"Community::invalid signature\"         );          // Delete from approvedHash. So that signature cannot be reused.         delete approvedHashes[_address][_hash]; ```  No restrictions on `_recoveredSignature` or `_address`. Moreover, if `SignatureDecoder.recoverKey` can return zero value, then there will be no revert.   ```        if (messageSignatures.length % 65 != 0) {             return (address(0));         }          uint8 v;         bytes32 r;         bytes32 s;         (v, r, s) = signatureSplit(messageSignatures, pos);          // If the version is correct return the signer address         if (v != 27 && v != 28) {             return (address(0));         } else {             // solium-disable-next-line arg-overflow             return ecrecover(toEthSignedMessageHash(messageHash), v, r, s);         } ```  As we can see bellow, `recoverKey` function can return zero value, if an `ecrecover` return zero value or if `v != 27 || v != 28`. Both cases are completely dependent on the input parameters to the function, namely from `signature` that is provided by attacker.  4) `checkSignatureValidity(_newMemberAddr, _hash, _signature, 1)` will not revert the call if an attacker provide correct signature in the function. It is obviously possible.  All in all, an attacker can add as many members as they want, BEFORE the `community` will be created.   ## Tools Used  ## Recommended Mitigation Steps   1) `checkSignatureValidity`/`recoverKey` should revert the call if an `address == 0`. 2) `addMember` should have a `require(_communityId <= communityCount)`  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/293", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/292", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/290", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/289", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/288", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/287", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/285", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/284", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/282", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Task Functionality completely sidestepped via `autoWithdraw`", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/281", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Task Functionality completely sidestepped via `autoWithdraw`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/279", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/277", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/275", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/273", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/272", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/271", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/269", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/268", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/267", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/265", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Attacker can drain all the projects within minutes, if admin account has been exposed", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/264", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFi.sol#L156-L169 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/HomeFi.sol#L199-L208   # Vulnerability details   ## Impact In case where the admin wallet has been hacked, the attacker can drain all funds out of the project within minutes. All the attacker needs is the admin to sign a single meta/normal tx. Even though the likelihood of the admin wallet being hacked might be low, given that the impact is critical - I think this makes it at least a medium bug.   Examples of cases where the attacker can gain access to admin wallet: * The computer which the admins are using has been hacked     * Even if a hardware wallet is used, the attacker can still replace the data sent to the wallet the next time the admin has to sign a tx (whether it's a meta or normal tx) * The website/software where the meta tx data is generated has been hacked and attacker modifies the data for tx * A malicious website tricks the admin into signing a meta tx to replace the admin or forwarder     Since the forwarder has the power to do everything in the system , once an attacker manages to replace it with a malicious forwarder, he can do whatever he wants withing minutes: * The forwarder can replace the admin * The forwarder can drain all funds from all projects by changing the subcontractor and marking tasks as complete, or adding new tasks / changing task cost as needed.  Even when signatures are required, you can bypass it by using the `approveHash` function.  ## Proof of Concept Here's a PoC for taking over and running the `Project.setComplete()` function (I haven't included a whole process of changing SC etc. since that would be too time consuming, but there shouldn't be a difference between functions, all can be impersonated once you control the forwarder).  The PoC was added to [projectTests.ts#L1109](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/test/utils/projectTests.ts#L1109), and is based on the 'should be able to complete a task' test.  ```typescript     it('PoC forwarder overtake', async () => {     const attacker = signers[10];       // deploy the malicious forwarder     const maliciousForwarder = await deploy<MaliciousForwarder>('MaliciousForwarder');     const adminAddress = await homeFiContract.admin();     const adminSigner = getSignerByAddress(signers, adminAddress);     // attacker takes over     await homeFiContract.connect(adminSigner).setTrustedForwarder(maliciousForwarder.address);            // attacker can now replace the admin, so that admin can't set the forwarder back     let { data } = await homeFiContract.populateTransaction.replaceAdmin(       attacker.address     );     let from = adminAddress;     let to = homeFiContract.address;     if (!data) {       throw Error('No data');     }     let tx = await executeMetaTX(from, to, data);      // assert that admin has been replaced by attacker     expect(await homeFiContract.admin()).to.be.eq(attacker.address);      // attacker can now execute setComplete() using the approveHash() method      const taskID = 1;     const _taskCost = 2 * taskCost;     const taskSC = signers[3];     let completeData = {       types: ['uint256', 'address'],       values: [taskID, project.address],     };     const [encodedData, hash] = await encodeDataAndHash(completeData);     await mockDAIContract.mock.transfer       .withArgs(taskSC.address, _taskCost)       .returns(true);     await mockDAIContract.mock.transfer       .withArgs(await homeFiContract.treasury(), _taskCost / 1e3)       .returns(true);      ({data} = await project.populateTransaction.approveHash(hash));     let contractor = await project.contractor();     let {subcontractor} = await project.getTask(taskID);     let builder = await project.builder();      await executeMetaTX(contractor, project.address, data as string);     await executeMetaTX(subcontractor, project.address, data as string);     await executeMetaTX(builder, project.address, data as string);           tx = await project.setComplete(encodedData, \"0x\");     await tx.wait();      await expect(tx).to.emit(project, 'TaskComplete').withArgs(taskID);      const { state } = await project.getTask(taskID);     expect(state).to.equal(3);     const getAlerts = await project.getAlerts(taskID);     expect(getAlerts[0]).to.equal(true);     expect(getAlerts[1]).to.equal(true);     expect(getAlerts[2]).to.equal(true);     expect(await project.lastAllocatedChangeOrderTask()).to.equal(0);     expect(await project.changeOrderedTask()).to.deep.equal([]);      async function executeMetaTX(from: string, to: string, data: string ) {       const gasLimit = await ethers.provider.estimateGas({         to,         from,         data,       });       const message = {         from,         to,         value: 0,         gas: gasLimit.toNumber(),         nonce: 0,         data,       };        // @ts-ignore       let tx = await maliciousForwarder.execute(message, \"0x\");       return tx;     }   });   // ----------------------------------------------------- // // Added to ethersHelpers.ts file: export function encodeDataAndHash(   data: any): string[] {   const encodedData = encodeData(data);   const encodedMsgHash = ethers.utils.keccak256(encodedData);   return [encodedData, encodedMsgHash]; } ```  ## Recommended Mitigation Steps  * Limit `approveHash` to contracts only - I understood from the sponsor that it is used for contracts to sign hashes. So limiting it to contracts only can help prevent stealing funds (from projects that are held by EOA) in case that the forwarder has been compromised (this is effective also in case there's some bug in the forwarder contract).     * Alternately, you can also make it use `msg.sender` instead of `_msgSender()`, this will also have a similar effect (it will allow also EOA to use the function, but not via forwarder).          * The advantage is that not only it wouldn't cost more than now, it'll even save gas.          * Another advantage is that it will also protect projects held by contracts from being impersonated by a malicious forwarder  * Make the process of replacing the forwarder or the admin a 2 step process with a delay between the steps (except for disabling the forwarder, in case the forwarder was hacked). This will give the admin the option to take steps to stop the attack, or at least give the users time to withdraw their money.   ```solidity     /// @inheritdoc IHomeFi     function replaceAdmin(address _newAdmin)         external         override         onlyAdmin         nonZero(_newAdmin)         noChange(admin, _newAdmin)     {         // Replace admin         pendingAdmin = _newAdmin;          adminReplacementTime = block.timestamp + 1 days;         emit AdminReplaceProposed(_newAdmin);     }          /// @inheritdoc IHomeFi     function executeReplaceAdmin()         external         override         onlyAdmin      {         require(adminReplacementTime > 0 && block.timestamp > adminReplacementTime, \"HomeFi::adminReplacmantTime\");         // Replace admin         admin = pendingAdmin;          emit AdminReplaced(_newAdmin);     }     /// @inheritdoc IHomeFi     function setTrustedForwarder(address _newForwarder)         external         override         onlyAdmin         noChange(trustedForwarder, _newForwarder)     {         // allow disabling the forwarder immediately in case it has been hacked         if(_newForwarder == address(0)){             trustedForwarder = _newForwarder;         }         forwarderSetTime = block.timestamp + 3 days;         pendingTrustedForwarder = _newForwarder;     }      function executeSetTrustedForwarder(address _newForwarder)         external         override         onlyAdmin     {         require(forwarderSetTime > 0 &&  block.timestamp > forwarderSetTime, \"HomeFi::forwarderSetTime\");         trustedForwarder = pendingTrustedForwarder;     }  ```  * Consider removing the meta tx for `HomeFi` `onlyAdmin` modifier (i.e. usg `msg.sender` instead of `_msgSender()`), given that it's not going to be used that often it may be worth giving up the comfort for hardening security "}, {"title": "In Project.setComplete(), the signature can be reused when the first call is reverted for some reason.", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/263", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L330   # Vulnerability details  ## Impact `setComplete()` function might be called successfully using the past signature when it shouldn't work.  As a result, a task might be completed when a builder doesn't want it.   ## Proof of Concept [approveHash() function](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L108) can set only true so there is no method to cancel already approved hash without [passing validation here](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L891).  So the below scenario would be possible.  - A builder, GC, and SC started a task and SC finished the task. - They are approved to complete the task and signed the signature. - But right before to call [setComplete()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L330) using the signature, the SC felt the cost is too low and raised a dispute to change the order using [raiseDispute()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L493). - As I suggested with another medium issue, the task can't be completed when there is an ongoing dispute from [this document - \"If there is no ongoing dispute about that project, task status is updated and payment is made.\"](https://github.com/code-423n4/2022-08-rigor#tasks-completion-and-payment). So `setComplete()` might revert. - Even if it doesn't check active disputes as now, `setComplete()` might revert when the funds haven't been allocated and a builder signed by fault. - After that, the HomeFi admin accepted the dispute, and the cost of the task was increased as SC wanted. - Then the builder would hope to get more results (or scores) from this task as the cost is increased rather than completed right away. - But SC can call `setComplete()` using the previous signature and complete the task without additional work. - A builder might know about that before and try to update task hash but it will revert because SC doesn't agree to [updateTaskHash()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L283). - In this case, it's logical to cancel the approved hash [here](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L108) but there is no such option.   I don't know if there would be similar problems with other functions that use signature and I think it would reduce the risk a little if we add an option to cancel the approved hash.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps Recommend modifying [approveHash()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L108) like below.  ``` function approveHash(bytes32 _hash, bool _bool) external override { //++++++++++++++++++++     address _sender = _msgSender();     // Allowing anyone to sign, as its hard to add restrictions here.     // Store _hash as signed for sender.     approvedHashes[_sender][_hash] = _bool; //+++++++++++++++++++      emit ApproveHash(_hash, _sender, _bool); //++++++++++++++++++++++ } ```  I am not so sure that a similar scenario would be possible in the [Community contract](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Community.sol#L501) also and recommend to change both functions together."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/262", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/260", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/259", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/258", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/256", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/254", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Project.checkPrecision() is passing 0 cost.", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L903 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L253 https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L417   # Vulnerability details  ## Impact The task of zero cost is useless and there would be no subcontractors to accept such task as no payment after finish.  So if such task is added by mistake, it would require more time and effort to finish because builder must complete it by himself to recover tokens.   ## Proof of Concept It will work properly when _amount = 0.  ``` function checkPrecision(uint256 _amount) internal pure {      // Divide and multiply amount with 1000 should be equal to amount.     // This ensures the amount is not too precise.     require(         ((_amount / 1000) * 1000) == _amount,         \"Project::Precision>=1000\"     ); } ```  ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps Recommend changing like below.   ``` function checkPrecision(uint256 _amount) internal pure {      require(_amount > 0, \"zero amount\");      // Divide and multiply amount with 1000 should be equal to amount.     // This ensures the amount is not too precise.     require(         ((_amount / 1000) * 1000) == _amount,         \"Project::Precision>=1000\"     ); } ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/250", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Builders must pay more interest when the system is paused.", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/248", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Builders must pay more interest when the system is paused."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/236", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Project.addTasks() wouldn't work properly when it's called from disputes contract.", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/233", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L238   # Vulnerability details  ## Impact `addTasks()` function checks [this require()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L238) to make sure `_taskCount` is correct.  But it might revert when this function is called after a dispute because it takes a certain time to resolve disputes and other tasks might be added meanwhile.   ## Proof of Concept The below scenario would be possible.  - A project contains 10 active tasks(taskCount = 10) and a builder and contractor are going to add one more task. - There were some disagreements between a builder and contractor so they raised a dispute with _taskCount = 10 using [raiseDispute()](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L493). - Normally it would take a certain time(like 1 day or more) to resolve the dispute as it must be done by HomeFi owner. - Meanwhile, if the builder and contractor need to add another task, they should set `_taskCount = 10` and `taskCount` will be 11 after addition [here](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L260). - After that, the HomeFi admin agreed to add a task with `_taskCount = 10`, but it will revert [here](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L238).  So currently, the project builder and contractor shouldn't add new tasks to make their previous dispute valid.  I think it's reasonable to modify that they can add other tasks even though there is an active dispute.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps I think we can modify not to compare [taskCount](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L238) when it's called from disputes contract.  So we can modify [this part](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L238) like below.   ``` if (_msgSender() != disputes) {     require(_taskCount == taskCount, \"Project::!taskCount\"); } else {     _taskCount = taskCount; } ```"}, {"title": "Project.changeOrder() would work unexpectedly for non SCConfirmed tasks.", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/232", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "valid"], "target": "2022-08-rigor-findings", "body": "Project.changeOrder() would work unexpectedly for non SCConfirmed tasks."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/228", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/222", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/218", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/215", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/213", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/212", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/211", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/210", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/204", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/203", "labels": ["bug", "G (Gas Optimization)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/197", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/196", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/194", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/193", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/192", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/191", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/190", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/189", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/188", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/187", "labels": ["bug", "G (Gas Optimization)", "valid"], "target": "2022-08-rigor-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/186", "labels": ["bug", "QA (Quality Assurance)", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}, {"title": "Builder can halve the interest paid to a community owner due to arithmetic rounding", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/180", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Community.sol#L685-L686   # Vulnerability details  ## Impact Due to arithmetic rounding in `returnToLender()`, a builder can halve the APR paid to a community owner by paying every 1.9999 days. This allows a builder to drastically decrease the amount of interest paid to a community owner, which in turn allows them to advertise very high APR rates to secure funding, most of which they will not pay.  This issue occurs in the calculation of `noOfDays` in `returnToLender()` which calculates the number of days since interest has last been calculated. If a builder repays a very small amount of tokens every 1.9999 days, then the `noOfDays` will be rounded down to `1 days` however `lastTimestamp` is updated to the current timestamp anyway, so the builder essentially accumulates only 1 day of interest after 2 days.  I believe this is high severity because a community owner can have a drastic decrease in interest gained from a loan which counts as lost rewards. Additionally, this problem does not require a malicious builder because if a builder pays at a wrong time, the loaner receives less interest anyway.  ## Proof of Concept 1. A community owner provides a loan of 500_000 tokens to a builder with an APR of 10% (ignoring treasury fees) 2. Therefore, the community owner will expect an interest of 136.9 tokens per day (273.9 per 2 days) 3. A builder repays 0.000001 tokens at `lastTimestamp + 2*86400 - 1` 4. `noOfDays` rounds down to 1 thereby accumulating `500_000 * 100 * 1 / 365000 = 136` tokens for 2 days 5. Therefore, the community owner only receives 5% APR with negligible expenses for the builder ## Tools Used VS Code ## Recommended Mitigation Steps There are two possible mitigations: 1. Add a scalar to `noOfDays` so that any rounding which occurs is negligible i.e. ```solidity         uint256 _noOfDays = (block.timestamp -             _communityProject.lastTimestamp) * SCALAR / 86400; // 24*60*60           /// Interest formula = (principal * APR * days) / (365 * 1000)         // prettier-ignore         uint256 _unclaimedInterest =                  _lentAmount *                 _communities[_communityID].projectDetails[_project].apr *                 _noOfDays /                 365000 /                 SCALAR; ``` 2. Remove the `noOfDays` calculation and calculate interest in one equation which reduces arithmetic rounding ```solidity uint256 _unclaimedInterest =                  _lentAmount *                 _communities[_communityID].projectDetails[_project].apr *                 (block.timestamp -             _communityProject.lastTimestamp) /                 365000 /                 86400; ``` "}, {"title": "Signature Checks could be passed when SignatureDecoder.recoverKey() returns 0", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/179", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "valid"], "target": "2022-08-rigor-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Project.sol#L887 https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Project.sol#L108-L115   # Vulnerability details  ## Impact It is possible to pass Signature Validity check with an SignatureDecoder.recoverKey() returns 0 whenever the builder and /or contractor have an existing approved hash for a data.  With occurrence of above, any user can call changeOrder or setComplete functions successfully after  user approves data hashes.   ## Tools Used Manual review  ## Recommended Mitigation Steps There should be a require check for `_recoveredSignature != 0` in checkSignatureValidity()"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-rigor-findings/issues/177", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method", "valid"], "target": "2022-08-rigor-findings", "body": "QA Report"}]