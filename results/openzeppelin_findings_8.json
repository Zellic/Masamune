[{"title": "[N10] Unclear variable role", "body": "[N10] Unclear variable role", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n10]-unclear-variable-role", "labels": ["OpenZeppelin"]}, {"title": "23 and", "body": "23 and", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#23-and", "labels": ["OpenZeppelin"]}, {"title": "371, the", "body": "371, the", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#371,-the", "labels": ["OpenZeppelin"]}, {"title": "is called auctionIncomeRecipient.", "body": "is called auctionIncomeRecipient.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#is-called-auctionincomerecipient.", "labels": ["OpenZeppelin"]}, {"title": "The CollateralAuctionHouse contracts are actually using the passed address as the one receiving system coins obtained by collateral auctions and for this, the initialBidder variables in the LiquidationEngine contract should be renamed to better reflect that they are the recipient of system coins and not the first bidders.", "body": "The CollateralAuctionHouse contracts are actually using the passed address as the one receiving system coins obtained by collateral auctions and for this, the initialBidder variables in the LiquidationEngine contract should be renamed to better reflect that they are the recipient of system coins and not the first bidders.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#the-collateralauctionhouse-contracts-are-actually-using-the-passed-address-as-the-one-receiving-system-coins-obtained-by-collateral-auctions-and-for-this,-the-initialbidder-variables-in-the-liquidationengine-contract-should-be-renamed-to-better-reflect-that-they-are-the-recipient-of-system-coins-and-not-the-first-bidders.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, and will not fix. Reflexer Lab\u2019s statement for this issue:", "body": "Update: Acknowledged, and will not fix. Reflexer Lab\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-acknowledged,-and-will-not-fix.-reflexer-lab\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "Same as M05, Maker made the interface general in the sense that we could have a future implementation where someone triggers an auction and also places the first bid.", "body": "Same as M05, Maker made the interface general in the sense that we could have a future implementation where someone triggers an auction and also places the first bid.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#same-as-m05,-maker-made-the-interface-general-in-the-sense-that-we-could-have-a-future-implementation-where-someone-triggers-an-auction-and-also-places-the-first-bid.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Unnecessary event emission", "body": "[N11] Unnecessary event emission", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n11]-unnecessary-event-emission", "labels": ["OpenZeppelin"]}, {"title": "The popDebtFromQueue function of the AccountingEngine contract is emitting a useless event whenever someone tries to call it with a debtBlockTimestamp that has not been saved before.", "body": "The popDebtFromQueue function of the AccountingEngine contract is emitting a useless event whenever someone tries to call it with a debtBlockTimestamp that has not been saved before.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#the-popdebtfromqueue-function-of-the-accountingengine-contract-is-emitting-a-useless-event-whenever-someone-tries-to-call-it-with-a-debtblocktimestamp-that-has-not-been-saved-before.", "labels": ["OpenZeppelin"]}, {"title": "Consider checking if debtQueue[debtBlockTimestamp] is greater than 0 before anything else to save gas and avoid emitting unnecessary events.", "body": "Consider checking if debtQueue[debtBlockTimestamp] is greater than 0 before anything else to save gas and avoid emitting unnecessary events.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#consider-checking-if-debtqueue[debtblocktimestamp]-is-greater-than-0-before-anything-else-to-save-gas-and-avoid-emitting-unnecessary-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #89.", "body": "Update: Fixed in pull request #89.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-fixed-in-pull-request-#89.", "labels": ["OpenZeppelin"]}, {"title": "[N12] rmultiply() is not used in LiquidationEngine contract", "body": "[N12] rmultiply() is not used in LiquidationEngine contract", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n12]-rmultiply()-is-not-used-in-liquidationengine-contract", "labels": ["OpenZeppelin"]}, {"title": "In the LiquidationEngine contract, the internal function rmultiply() is unused in the audited codebase.", "body": "In the LiquidationEngine contract, the internal function rmultiply() is unused in the audited codebase.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#in-the-liquidationengine-contract,-the-internal-function-rmultiply()-is-unused-in-the-audited-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing it to simplify the code and improve readability.", "body": "Consider removing it to simplify the code and improve readability.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#consider-removing-it-to-simplify-the-code-and-improve-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #90.", "body": "Update: Fixed in pull request #90.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-fixed-in-pull-request-#90.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Unused variables", "body": "[N13] Unused variables", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n13]-unused-variables", "labels": ["OpenZeppelin"]}, {"title": "In the FixedDiscountCollateralAuctionHouse contract, inside the getApproximateCollateralBought and getCollateralBought functions, the totalRaised local variable is declared but not used anywhere else.", "body": "In the FixedDiscountCollateralAuctionHouse contract, inside the getApproximateCollateralBought and getCollateralBought functions, the totalRaised local variable is declared but not used anywhere else.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#in-the-fixeddiscountcollateralauctionhouse-contract,-inside-the-getapproximatecollateralbought-and-getcollateralbought-functions,-the-totalraised-local-variable-is-declared-but-not-used-anywhere-else.", "labels": ["OpenZeppelin"]}, {"title": "EnglishCollateralAuctionHouse,", "body": "EnglishCollateralAuctionHouse,", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#englishcollateralauctionhouse,", "labels": ["OpenZeppelin"]}, {"title": "FixedDiscountCollateralAuctionHouse,", "body": "DebtAuctionHouse,  PreSettlementSurplusAuctionHouse and  PostSettlementSurplusAuctionHouse, the constants  Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.  Consider removing the totalRaised variable and any unused constant from the code base.  Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs statement for this issue:  We want to leave these in because theyre used by other contracts and also by keepers to differentiate between auction types  Conclusions  No critical and one high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#fixeddiscountcollateralauctionhouse,", "labels": ["OpenZeppelin"]}, {"title": "DebtAuctionHouse,", "body": "DebtAuctionHouse,", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#debtauctionhouse,", "labels": ["OpenZeppelin"]}, {"title": "PreSettlementSurplusAuctionHouse and", "body": "PreSettlementSurplusAuctionHouse and", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#presettlementsurplusauctionhouse-and", "labels": ["OpenZeppelin"]}, {"title": "PostSettlementSurplusAuctionHouse, the constants", "body": "PostSettlementSurplusAuctionHouse, the constants", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#postsettlementsurplusauctionhouse,-the-constants", "labels": ["OpenZeppelin"]}, {"title": "Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.", "body": "Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#lastly,-the-rad-constant-in-the-fixeddiscountcollateralauctionhouse-is-declared-but-never-used.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the totalRaised variable and any unused constant from the code base.", "body": "Consider removing the totalRaised variable and any unused constant from the code base.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#consider-removing-the-totalraised-variable-and-any-unused-constant-from-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs\u2019 statement for this issue:", "body": "Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs\u2019 statement for this issue:", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-partially-fixed-in-pull-request-#91.-instances-of-auction_house_type-and-auction_type-have-been-intentionally-left-in-the-codebase.-reflexer-labs\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We want to leave these in because they\u2019re used by other contracts and also by keepers to differentiate between auction types", "body": "We want to leave these in because they\u2019re used by other contracts and also by keepers to differentiate between auction types", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#we-want-to-leave-these-in-because-they\u2019re-used-by-other-contracts-and-also-by-keepers-to-differentiate-between-auction-types", "labels": ["OpenZeppelin"]}, {"title": "[N01] Missing docstrings and references", "body": "[N01] Missing docstrings and references", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#[n01]-missing-docstrings-and-references", "labels": ["OpenZeppelin"]}, {"title": "The contracts and functions in the reviewed code base lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.", "body": "The contracts and functions in the reviewed code base lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-contracts-and-functions-in-the-reviewed-code-base-lack-documentation.-this-hinders-reviewers\u2019-understanding-of-the-code\u2019s-intention,-which-is-fundamental-to-correctly-assess-not-only-security,-but-also-correctness.-additionally,-docstrings-improve-readability-and-ease-maintenance.-they-should-explicitly-explain-the-purpose-or-intention-of-the-functions,-the-scenarios-under-which-they-can-fail,-the-roles-allowed-to-call-them,-the-values-returned-and-the-events-emitted.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#consider-thoroughly-documenting-all-functions-(and-their-parameters)-that-are-part-of-the-contracts\u2019-public-api.-functions-implementing-sensitive-functionality,-even-if-not-public,-should-be-clearly-documented-as-well.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "Furthermore, the code comments should reference any relevant standards. In particular:", "body": "Furthermore, the code comments should reference any relevant standards. In particular:", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#furthermore,-the-code-comments-should-reference-any-relevant-standards.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "The RevertReasonParser contract handles the case where the data was encoded as a call to a function with the signature Panic(uint256), which matches the encoding of a critical error.", "body": "The RevertReasonParser contract handles the case where the data was encoded as a call to a function with the signature Panic(uint256), which matches the encoding of a critical error.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-revertreasonparser-contract-handles-the-case-where-the-data-was-encoded-as-a-call-to-a-function-with-the-signature-panic(uint256),-which-matches-the-encoding-of-a-critical-error.", "labels": ["OpenZeppelin"]}, {"title": "The OneInchExchange contract allows tokens to be transferred using the mechanism defined in EIP2612.", "body": "The OneInchExchange contract allows tokens to be transferred using the mechanism defined in EIP2612.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-oneinchexchange-contract-allows-tokens-to-be-transferred-using-the-mechanism-defined-in-eip2612.", "labels": ["OpenZeppelin"]}, {"title": "These should be explicitly noted.", "body": "These should be explicitly noted.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#these-should-be-explicitly-noted.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Mixing roles", "body": "[N02] Mixing roles", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#[n02]-mixing-roles", "labels": ["OpenZeppelin"]}, {"title": "The OneInchExchange contract has a mechanism for the owner to withdraw funds held by the contract to their own account. However, the role of the owner and the funds recipient are conceptually distinct and implicitly combining them can introduce additional complexity if the owner role is transferred to a governance mechanism. Consider allowing the owner to specify a recipient address when withdrawing funds from the contract.", "body": "The OneInchExchange contract has a mechanism for the owner to withdraw funds held by the contract to their own account. However, the role of the owner and the funds recipient are conceptually distinct and implicitly combining them can introduce additional complexity if the owner role is transferred to a governance mechanism. Consider allowing the owner to specify a recipient address when withdrawing funds from the contract.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-oneinchexchange-contract-has-a-mechanism-for-the-owner-to-withdraw-funds-held-by-the-contract-to-their-own-account.-however,-the-role-of-the-owner-and-the-funds-recipient-are-conceptually-distinct-and-implicitly-combining-them-can-introduce-additional-complexity-if-the-owner-role-is-transferred-to-a-governance-mechanism.-consider-allowing-the-owner-to-specify-a-recipient-address-when-withdrawing-funds-from-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Safety check is manipulable", "body": "[N03] Safety check is manipulable", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#[n03]-safety-check-is-manipulable", "labels": ["OpenZeppelin"]}, {"title": "The swap function of the OneInchExchange contract allows users to perform a sequence of arbitrary calls and respond to potential failures in order to execute a complicated token swap across multiple decentralized exchanges. However, there are many ways that this function can be abused to subvert its intended effect. Some examples include:", "body": "The swap function of the OneInchExchange contract allows users to perform a sequence of arbitrary calls and respond to potential failures in order to execute a complicated token swap across multiple decentralized exchanges. However, there are many ways that this function can be abused to subvert its intended effect. Some examples include:", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-swap-function-of-the-oneinchexchange-contract-allows-users-to-perform-a-sequence-of-arbitrary-calls-and-respond-to-potential-failures-in-order-to-execute-a-complicated-token-swap-across-multiple-decentralized-exchanges.-however,-there-are-many-ways-that-this-function-can-be-abused-to-subvert-its-intended-effect.-some-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "the caller can set the _SHOULD_CLAIM flag to false and perform swaps without transferring in the expected amount of tokens.", "body": "the caller can set the _SHOULD_CLAIM flag to false and perform swaps without transferring in the expected amount of tokens.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-caller-can-set-the-_should_claim-flag-to-false-and-perform-swaps-without-transferring-in-the-expected-amount-of-tokens.", "labels": ["OpenZeppelin"]}, {"title": "the caller could use the arbitrary calls to transfer tokens in or out of the destination address, manipulating the calculation of the returned tokens.", "body": "the caller could use the arbitrary calls to transfer tokens in or out of the destination address, manipulating the calculation of the returned tokens.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-caller-could-use-the-arbitrary-calls-to-transfer-tokens-in-or-out-of-the-destination-address,-manipulating-the-calculation-of-the-returned-tokens.", "labels": ["OpenZeppelin"]}, {"title": "the caller could use the arbitrary calls to reenter the swap function so the balance change calculations will be performed on multiple swaps.", "body": "the caller could use the arbitrary calls to reenter the swap function so the balance change calculations will be performed on multiple swaps.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#the-caller-could-use-the-arbitrary-calls-to-reenter-the-swap-function-so-the-balance-change-calculations-will-be-performed-on-multiple-swaps.", "labels": ["OpenZeppelin"]}, {"title": "This should not pose a safety risk because the function is intended to provide consistency checks for the caller, so these manipulations only undermine that goal. All security considerations around the token swaps themselves should be handled by the external exchanges. However, this does imply that the emitted event may not accurately reflect the executed operation. If this is undesirable, consider validating the consistency of the parameters and the external calls.", "body": "This should not pose a safety risk because the function is intended to provide consistency checks for the caller, so these manipulations only undermine that goal. All security considerations around the token swaps themselves should be handled by the external exchanges. However, this does imply that the emitted event may not accurately reflect the executed operation. If this is undesirable, consider validating the consistency of the parameters and the external calls.", "html_url": "https://blog.openzeppelin.com/1inch-exchange-audit#this-should-not-pose-a-safety-risk-because-the-function-is-intended-to-provide-consistency-checks-for-the-caller,-so-these-manipulations-only-undermine-that-goal.-all-security-considerations-around-the-token-swaps-themselves-should-be-handled-by-the-external-exchanges.-however,-this-does-imply-that-the-emitted-event-may-not-accurately-reflect-the-executed-operation.-if-this-is-undesirable,-consider-validating-the-consistency-of-the-parameters-and-the-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "[N01][Partially Fixed] Functions default to a particular case", "body": "[N01][Partially Fixed] Functions default to a particular case", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n01][partially-fixed]-functions-default-to-a-particular-case", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there have been cases where functions default any other case into a particular defined outcome. Some of these are:", "body": "Throughout the codebase, there have been cases where functions default any other case into a particular defined outcome. Some of these are:", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#throughout-the-codebase,-there-have-been-cases-where-functions-default-any-other-case-into-a-particular-defined-outcome.-some-of-these-are:", "labels": ["OpenZeppelin"]}, {"title": "In the _getMonth function from the Otoken contract, any _month greater or equal than 12 will return the short and long string for December.", "body": "In the _getMonth function from the Otoken contract, any _month greater or equal than 12 will return the short and long string for December.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-the-_getmonth-function-from-the-otoken-contract,-any-_month-greater-or-equal-than-12-will-return-the-short-and-long-string-for-december.", "labels": ["OpenZeppelin"]}, {"title": "In the _runActions function from the Controller contract, the function to execute is based on the action passed in the arguments. However, the case for a Call action is left as the default case instead of defining a particular case as it was done with the rest of the actions.", "body": "In the _runActions function from the Controller contract, the function to execute is based on the action passed in the arguments. However, the case for a Call action is left as the default case instead of defining a particular case as it was done with the rest of the actions.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-the-_runactions-function-from-the-controller-contract,-the-function-to-execute-is-based-on-the-action-passed-in-the-arguments.-however,-the-case-for-a-call-action-is-left-as-the-default-case-instead-of-defining-a-particular-case-as-it-was-done-with-the-rest-of-the-actions.", "labels": ["OpenZeppelin"]}, {"title": "Although these cases do not represent a security risk, consider defining one outcome to each one of the cases and use the default case for those situations that do not match with any other particular case to reduce the attack surface and improve the readability of the code.", "body": "Although these cases do not represent a security risk, consider defining one outcome to each one of the cases and use the default case for those situations that do not match with any other particular case to reduce the attack surface and improve the readability of the code.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#although-these-cases-do-not-represent-a-security-risk,-consider-defining-one-outcome-to-each-one-of-the-cases-and-use-the-default-case-for-those-situations-that-do-not-match-with-any-other-particular-case-to-reduce-the-attack-surface-and-improve-the-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially Fixed in PR#298 where the _runActions function is fixed but the _getMonth function remains the same.", "body": "Update: Partially Fixed in PR#298 where the _runActions function is fixed but the _getMonth function remains the same.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#update:-partially-fixed-in-pr#298-where-the-_runactions-function-is-fixed-but-the-_getmonth-function-remains-the-same.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Disputer may not be able to dispute", "body": "[N02] Disputer may not be able to dispute", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n02]-disputer-may-not-be-able-to-dispute", "labels": ["OpenZeppelin"]}, {"title": "The Oracle contract allows a disputer to dispute the price after the respective asset\u2019s pricer has submitted a price.", "body": "The Oracle contract allows a disputer to dispute the price after the respective asset\u2019s pricer has submitted a price.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-oracle-contract-allows-a-disputer-to-dispute-the-price-after-the-respective-asset\u2019s-pricer-has-submitted-a-price.", "labels": ["OpenZeppelin"]}, {"title": "This can be done by calling the disputeExpiryPrice function and defining the new price, as long as the disputer submits their price before the disputing windows is over.", "body": "This can be done by calling the disputeExpiryPrice function and defining the new price, as long as the disputer submits their price before the disputing windows is over.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#this-can-be-done-by-calling-the-disputeexpiryprice-function-and-defining-the-new-price,-as-long-as-the-disputer-submits-their-price-before-the-disputing-windows-is-over.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, the admin can set this period to zero, by calling the setDisputePeriod function, which would prevent the disputer from disputing a price.", "body": "Nevertheless, the admin can set this period to zero, by calling the setDisputePeriod function, which would prevent the disputer from disputing a price.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#nevertheless,-the-admin-can-set-this-period-to-zero,-by-calling-the-setdisputeperiod-function,-which-would-prevent-the-disputer-from-disputing-a-price.", "labels": ["OpenZeppelin"]}, {"title": "However, because the disputer is also defined by the admin, this should not be a risk unless the admin is compromised.", "body": "However, because the disputer is also defined by the admin, this should not be a risk unless the admin is compromised.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#however,-because-the-disputer-is-also-defined-by-the-admin,-this-should-not-be-a-risk-unless-the-admin-is-compromised.", "labels": ["OpenZeppelin"]}, {"title": "Consider either restricting the dispute period to a value greater than zero or documenting the reason of having a zero-size window to dispute a price.", "body": "Consider either restricting the dispute period to a value greater than zero or documenting the reason of having a zero-size window to dispute a price.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#consider-either-restricting-the-dispute-period-to-a-value-greater-than-zero-or-documenting-the-reason-of-having-a-zero-size-window-to-dispute-a-price.", "labels": ["OpenZeppelin"]}, {"title": "[N03][Fixed] Refactoring opportunities", "body": "[N03][Fixed] Refactoring opportunities", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n03][fixed]-refactoring-opportunities", "labels": ["OpenZeppelin"]}, {"title": "There are a number of functions in the codebase that can benefit from a code refactor. In particular:", "body": "There are a number of functions in the codebase that can benefit from a code refactor. In particular:", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#there-are-a-number-of-functions-in-the-codebase-that-can-benefit-from-a-code-refactor.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "In line 204 from AddressBook.sol, the params variable is only used when the proxyAddress is zero. It could be moved inside of the if statement.", "body": "In line 204 from AddressBook.sol, the params variable is only used when the proxyAddress is zero. It could be moved inside of the if statement.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-204-from-addressbook.sol,-the-params-variable-is-only-used-when-the-proxyaddress-is-zero.-it-could-be-moved-inside-of-the-if-statement.", "labels": ["OpenZeppelin"]}, {"title": "In line 175 from OtokenFactory.sol, the address of the oToken implementation is retrieved from the AddressBook contract to then be used in the _computeAddress function. However, that address was already retrieved in line 164 of the same function.", "body": "In line 175 from OtokenFactory.sol, the address of the oToken implementation is retrieved from the AddressBook contract to then be used in the _computeAddress function. However, that address was already retrieved in line 164 of the same function.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-175-from-otokenfactory.sol,-the-address-of-the-otoken-implementation-is-retrieved-from-the-addressbook-contract-to-then-be-used-in-the-_computeaddress-function.-however,-that-address-was-already-retrieved-in-line-164-of-the-same-function.", "labels": ["OpenZeppelin"]}, {"title": "In lines 145 and 146 from MarginCalculator.sol, the _getMarginRequired function checks if the vault has long or short oTokens. However, the getExcessCollateral function which calls the _getMarginRequired function, also checks the same thing on lines 79 and 80.", "body": "In lines 145 and 146 from MarginCalculator.sol, the _getMarginRequired function checks if the vault has long or short oTokens. However, the getExcessCollateral function which calls the _getMarginRequired function, also checks the same thing on lines 79 and 80.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-lines-145-and-146-from-margincalculator.sol,-the-_getmarginrequired-function-checks-if-the-vault-has-long-or-short-otokens.-however,-the-getexcesscollateral-function-which-calls-the-_getmarginrequired-function,-also-checks-the-same-thing-on-lines-79-and-80.", "labels": ["OpenZeppelin"]}, {"title": "In lines 239 and 240 from Controller.sol, the initialize function calls the __Context_init_unchained and __Ownable_init_unchained functions from the OwnableUpgradeSafe contract can be replaced by the __Ownable_init function from the same contract.", "body": "In lines 239 and 240 from Controller.sol, the initialize function calls the __Context_init_unchained and __Ownable_init_unchained functions from the OwnableUpgradeSafe contract can be replaced by the __Ownable_init function from the same contract.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-lines-239-and-240-from-controller.sol,-the-initialize-function-calls-the-__context_init_unchained-and-__ownable_init_unchained-functions-from-the-ownableupgradesafe-contract-can-be-replaced-by-the-__ownable_init-function-from-the-same-contract.", "labels": ["OpenZeppelin"]}, {"title": "We offer these as suggestions for the Opyn team to consider. If refactors are applied, they must be accompanied with thorough unit testing to ensure that the behavior is not negatively affected.", "body": "We offer these as suggestions for the Opyn team to consider. If refactors are applied, they must be accompanied with thorough unit testing to ensure that the behavior is not negatively affected.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#we-offer-these-as-suggestions-for-the-opyn-team-to-consider.-if-refactors-are-applied,-they-must-be-accompanied-with-thorough-unit-testing-to-ensure-that-the-behavior-is-not-negatively-affected.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#299.", "body": "Update: Fixed in PR#299.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#update:-fixed-in-pr#299.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Inconsistent coding style", "body": "[N04] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n04]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "The codebase is not always following a consistent coding style. Some examples are:", "body": "The codebase is not always following a consistent coding style. Some examples are:", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-codebase-is-not-always-following-a-consistent-coding-style.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The usage of an implicit returned value, such as on line 61 from OtokenSpawner.sol, while other functions from the same contract do explicitly return the value, such as on line 35.", "body": "The usage of an implicit returned value, such as on line 61 from OtokenSpawner.sol, while other functions from the same contract do explicitly return the value, such as on line 35.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-usage-of-an-implicit-returned-value,-such-as-on-line-61-from-otokenspawner.sol,-while-other-functions-from-the-same-contract-do-explicitly-return-the-value,-such-as-on-line-35.", "labels": ["OpenZeppelin"]}, {"title": "The usage of named return variables, such as on line 205 from Otoken.sol, but unnamed returns in other functions of the same contract, such as on line 191.", "body": "The usage of named return variables, such as on line 205 from Otoken.sol, but unnamed returns in other functions of the same contract, such as on line 191.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-usage-of-named-return-variables,-such-as-on-line-205-from-otoken.sol,-but-unnamed-returns-in-other-functions-of-the-same-contract,-such-as-on-line-191.", "labels": ["OpenZeppelin"]}, {"title": "Different method to interact with a variable, such as the vaults mapping on lines 636 and 646 from Controller.sol.", "body": "Different method to interact with a variable, such as the vaults mapping on lines 636 and 646 from Controller.sol.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#different-method-to-interact-with-a-variable,-such-as-the-vaults-mapping-on-lines-636-and-646-from-controller.sol.", "labels": ["OpenZeppelin"]}, {"title": "Consider always following the same style to improve the project\u2019s readability. As a reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Consider always following the same style to improve the project\u2019s readability. As a reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#consider-always-following-the-same-style-to-improve-the-project\u2019s-readability.-as-a-reference,-consider-always-following-the-style-proposed-in-solidity\u2019s-style-guide.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "[N05][Fixed] Repeated value in event", "body": "[N05][Fixed] Repeated value in event", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n05][fixed]-repeated-value-in-event", "labels": ["OpenZeppelin"]}, {"title": "The PricerUpdated event from the Oracle contract is triggered when the admin sets or changes the pricer for a particular asset using the setAssetPricer function.", "body": "The PricerUpdated event from the Oracle contract is triggered when the admin sets or changes the pricer for a particular asset using the setAssetPricer function.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-pricerupdated-event-from-the-oracle-contract-is-triggered-when-the-admin-sets-or-changes-the-pricer-for-a-particular-asset-using-the-setassetpricer-function.", "labels": ["OpenZeppelin"]}, {"title": "The event is defined to log both the asset\u2019s address and the new pricer address. However, during the setAssetPricer function execution, the event is logging the asset\u2019s address twice instead of the new pricer.", "body": "The event is defined to log both the asset\u2019s address and the new pricer address. However, during the setAssetPricer function execution, the event is logging the asset\u2019s address twice instead of the new pricer.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-event-is-defined-to-log-both-the-asset\u2019s-address-and-the-new-pricer-address.-however,-during-the-setassetpricer-function-execution,-the-event-is-logging-the-asset\u2019s-address-twice-instead-of-the-new-pricer.", "labels": ["OpenZeppelin"]}, {"title": "Consider logging both the asset and the new pricer in the event.", "body": "Consider logging both the asset and the new pricer in the event.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#consider-logging-both-the-asset-and-the-new-pricer-in-the-event.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#283.", "body": "Update: Fixed in PR#283.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#update:-fixed-in-pr#283.", "labels": ["OpenZeppelin"]}, {"title": "[N06][Fixed] Typographical errors and misleading comments", "body": "[N06][Fixed] Typographical errors and misleading comments", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n06][fixed]-typographical-errors-and-misleading-comments", "labels": ["OpenZeppelin"]}, {"title": "Several docstrings, inline comments, and variable names throughout the codebase were found to be erroneous and/or incomplete and should be fixed. In particular:", "body": "Several docstrings, inline comments, and variable names throughout the codebase were found to be erroneous and/or incomplete and should be fixed. In particular:", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#several-docstrings,-inline-comments,-and-variable-names-throughout-the-codebase-were-found-to-be-erroneous-and/or-incomplete-and-should-be-fixed.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "In line 49 from Oracle.sol, expirtyTimestamp should say expiryTimestamp.", "body": "In line 49 from Oracle.sol, expirtyTimestamp should say expiryTimestamp.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-49-from-oracle.sol,-expirtytimestamp-should-say-expirytimestamp.", "labels": ["OpenZeppelin"]}, {"title": "In line 66 from Oracle.sol, 17368900000 should say 17568900000.", "body": "In line 66 from Oracle.sol, 17368900000 should say 17568900000.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-66-from-oracle.sol,-17368900000-should-say-17568900000.", "labels": ["OpenZeppelin"]}, {"title": "In line 210 from Oracle.sol, the inline documentation states \u201conly the owner can dispute a price during the dispute period, by setting a new one\u201d but actually the disputer is the only one allowed.", "body": "In line 210 from Oracle.sol, the inline documentation states \u201conly the owner can dispute a price during the dispute period, by setting a new one\u201d but actually the disputer is the only one allowed.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-210-from-oracle.sol,-the-inline-documentation-states-\u201conly-the-owner-can-dispute-a-price-during-the-dispute-period,-by-setting-a-new-one\u201d-but-actually-the-disputer-is-the-only-one-allowed.", "labels": ["OpenZeppelin"]}, {"title": "In line 231 from Oracle.sol, the inline documentation states \u201csubmits the expiry price to the oracle, can only be set from the pricer\u201d but the disputer is also allowed to call that function.", "body": "In line 231 from Oracle.sol, the inline documentation states \u201csubmits the expiry price to the oracle, can only be set from the pricer\u201d but the disputer is also allowed to call that function.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-231-from-oracle.sol,-the-inline-documentation-states-\u201csubmits-the-expiry-price-to-the-oracle,-can-only-be-set-from-the-pricer\u201d-but-the-disputer-is-also-allowed-to-call-that-function.", "labels": ["OpenZeppelin"]}, {"title": "In lines 90 and 91 from MarginCalculator.sol, colllateralDecimals should say collateralDecimals.", "body": "In lines 90 and 91 from MarginCalculator.sol, colllateralDecimals should say collateralDecimals.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-lines-90-and-91-from-margincalculator.sol,-colllateraldecimals-should-say-collateraldecimals.", "labels": ["OpenZeppelin"]}, {"title": "In line 141 from MarginVault.sol, the revert message states \u201cMarginVault: long otoken address mismatch\u201d but it also could be made by an out-of-bound-index related issue.", "body": "In line 141 from MarginVault.sol, the revert message states \u201cMarginVault: long otoken address mismatch\u201d but it also could be made by an out-of-bound-index related issue.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-141-from-marginvault.sol,-the-revert-message-states-\u201cmarginvault:-long-otoken-address-mismatch\u201d-but-it-also-could-be-made-by-an-out-of-bound-index-related-issue.", "labels": ["OpenZeppelin"]}, {"title": "In line 215 from Whitelist.sol, whitelisteCallee should be named whitelistCallee.", "body": "In line 215 from Whitelist.sol, whitelisteCallee should be named whitelistCallee.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-215-from-whitelist.sol,-whitelistecallee-should-be-named-whitelistcallee.", "labels": ["OpenZeppelin"]}, {"title": "In line 197 from AddressBook.sol, the inline documentation states that the function is internal but actually the function has public visibility.", "body": "In line 197 from AddressBook.sol, the inline documentation states that the function is internal but actually the function has public visibility.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-197-from-addressbook.sol,-the-inline-documentation-states-that-the-function-is-internal-but-actually-the-function-has-public-visibility.", "labels": ["OpenZeppelin"]}, {"title": "In line 47 of PayableProxyController.sol in PR279, \u201cto wrap WETH and the beginning\u201d should be \u201cto wrap WETH at the beginning\u201d", "body": "In line 47 of PayableProxyController.sol in PR279, \u201cto wrap WETH and the beginning\u201d should be \u201cto wrap WETH at the beginning\u201d", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#in-line-47-of-payableproxycontroller.sol-in-pr279,-\u201cto-wrap-weth-and-the-beginning\u201d-should-be-\u201cto-wrap-weth-at-the-beginning\u201d", "labels": ["OpenZeppelin"]}, {"title": "Clear docstrings are fundamental to outline the intentions of the code. Mismatches between them and the implementation can lead to serious misconceptions about how the system is expected to behave. Therefore, consider fixing these errors to avoid confusions in developers, users, auditors alike.", "body": "Clear docstrings are fundamental to outline the intentions of the code. Mismatches between them and the implementation can lead to serious misconceptions about how the system is expected to behave. Therefore, consider fixing these errors to avoid confusions in developers, users, auditors alike.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#clear-docstrings-are-fundamental-to-outline-the-intentions-of-the-code.-mismatches-between-them-and-the-implementation-can-lead-to-serious-misconceptions-about-how-the-system-is-expected-to-behave.-therefore,-consider-fixing-these-errors-to-avoid-confusions-in-developers,-users,-auditors-alike.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#302.", "body": "Update: Fixed in PR#302.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#update:-fixed-in-pr#302.", "labels": ["OpenZeppelin"]}, {"title": "[N07][Fixed] Potential fake payableProxyController.sol", "body": "[N07][Fixed] Potential fake payableProxyController.sol", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#[n07][fixed]-potential-fake-payableproxycontroller.sol", "labels": ["OpenZeppelin"]}, {"title": "The payable Proxy Controller works in between the caller and the controller contract to handle ETH payment, wrapping and unwrapping. There isn\u2019t any built-in mechanism in the smart contract to verify this proxy address is the official one which means a hacker could deploy their own proxy with fraudulent weth address to steal all user deposit if they can somehow convince users to use it or make it look like the official proxy.", "body": "The payable Proxy Controller works in between the caller and the controller contract to handle ETH payment, wrapping and unwrapping. There isn\u2019t any built-in mechanism in the smart contract to verify this proxy address is the official one which means a hacker could deploy their own proxy with fraudulent weth address to steal all user deposit if they can somehow convince users to use it or make it look like the official proxy.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#the-payable-proxy-controller-works-in-between-the-caller-and-the-controller-contract-to-handle-eth-payment,-wrapping-and-unwrapping.-there-isn\u2019t-any-built-in-mechanism-in-the-smart-contract-to-verify-this-proxy-address-is-the-official-one-which-means-a-hacker-could-deploy-their-own-proxy-with-fraudulent-weth-address-to-steal-all-user-deposit-if-they-can-somehow-convince-users-to-use-it-or-make-it-look-like-the-official-proxy.", "labels": ["OpenZeppelin"]}, {"title": "This might not be an issue depending on how security is handled from the front end, which is out of scope for this audit. We just want to gently remind the team to ensure safe communication with users to eliminate this attack vector.", "body": "This might not be an issue depending on how security is handled from the front end, which is out of scope for this audit. We just want to gently remind the team to ensure safe communication with users to eliminate this attack vector.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#this-might-not-be-an-issue-depending-on-how-security-is-handled-from-the-front-end,-which-is-out-of-scope-for-this-audit.-we-just-want-to-gently-remind-the-team-to-ensure-safe-communication-with-users-to-eliminate-this-attack-vector.", "labels": ["OpenZeppelin"]}, {"title": "Update: Update: The Opyn team has confirmed they have a few mechanisms in place to eliminate this attack including a close sourced front end, a document listing official smart contract addresses.", "body": "Update: Update: The Opyn team has confirmed they have a few mechanisms in place to eliminate this attack including a close sourced front end, a document listing official smart contract addresses.", "html_url": "https://blog.openzeppelin.com/opyn-gamma-protocol-audit#update:-update:-the-opyn-team-has-confirmed-they-have-a-few-mechanisms-in-place-to-eliminate-this-attack-including-a-close-sourced-front-end,-a-document-listing-official-smart-contract-addresses.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Commented out code", "body": "[N01] Commented out code", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n01]-commented-out-code", "labels": ["OpenZeppelin"]}, {"title": "In RSITrendingStrategy contract, lines 49-59 contain what appears to be old code which has been commented out.", "body": "In RSITrendingStrategy contract, lines 49-59 contain what appears to be old code which has been commented out.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#in-rsitrendingstrategy-contract,-lines-49-59-contain-what-appears-to-be-old-code-which-has-been-commented-out.", "labels": ["OpenZeppelin"]}, {"title": "Other instances where commented code is present in the codebase are:", "body": "Other instances where commented code is present in the codebase are:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#other-instances-where-commented-code-is-present-in-the-codebase-are:", "labels": ["OpenZeppelin"]}, {"title": "Lines 101-104 of the Getter contract", "body": "Lines 101-104 of the Getter contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#lines-101-104-of-the-getter-contract", "labels": ["OpenZeppelin"]}, {"title": "Lines 32-33 of the BaseFund contract", "body": "Lines 32-33 of the BaseFund contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#lines-32-33-of-the-basefund-contract", "labels": ["OpenZeppelin"]}, {"title": "If the code is no longer needed, and the comments do not pertain to the currently implemented code, the commented-out code should be removed to minimize confusion for future developers and auditors. Consider removing the commented-out code.", "body": "If the code is no longer needed, and the comments do not pertain to the currently implemented code, the commented-out code should be removed to minimize confusion for future developers and auditors. Consider removing the commented-out code.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#if-the-code-is-no-longer-needed,-and-the-comments-do-not-pertain-to-the-currently-implemented-code,-the-commented-out-code-should-be-removed-to-minimize-confusion-for-future-developers-and-auditors.-consider-removing-the-commented-out-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #24.", "body": "Update: Fixed in PR #24.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#24.", "labels": ["OpenZeppelin"]}, {"title": "[N02] _entranceFee calculation unnecessarily complex", "body": "[N02] _entranceFee calculation unnecessarily complex", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n02]-_entrancefee-calculation-unnecessarily-complex", "labels": ["OpenZeppelin"]}, {"title": "Within the _entranceFee function, a portion of the input value purchasedAssetValue is returned, which represents the entrance fee given that value.", "body": "Within the _entranceFee function, a portion of the input value purchasedAssetValue is returned, which represents the entrance fee given that value.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#within-the-_entrancefee-function,-a-portion-of-the-input-value-purchasedassetvalue-is-returned,-which-represents-the-entrance-fee-given-that-value.", "labels": ["OpenZeppelin"]}, {"title": "calculating the entrance fee, the calculation is not what one may expect. Instead of the calculation being", "body": "calculating the entrance fee, the calculation is not what one may expect. Instead of the calculation being", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#calculating-the-entrance-fee,-the-calculation-is-not-what-one-may-expect.-instead-of-the-calculation-being", "labels": ["OpenZeppelin"]}, {"title": "purchasedAssetValue * _entranceFeeRate / (1 + _entranceFeeRate). This means that when", "body": "purchasedAssetValue * _entranceFeeRate / (1 + _entranceFeeRate). This means that when", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#purchasedassetvalue-*-_entrancefeerate-/-(1-+-_entrancefeerate).-this-means-that-when", "labels": ["OpenZeppelin"]}, {"title": "_streamingFee is calculated using", "body": "_streamingFee is calculated using", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#_streamingfee-is-calculated-using", "labels": ["OpenZeppelin"]}, {"title": "_streamingFeeRate as a percentage per year, such that over 1 year, if", "body": "_streamingFeeRate as a percentage per year, such that over 1 year, if", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#_streamingfeerate-as-a-percentage-per-year,-such-that-over-1-year,-if", "labels": ["OpenZeppelin"]}, {"title": "netAssetValue. Similarly,", "body": "netAssetValue. Similarly,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#netassetvalue.-similarly,", "labels": ["OpenZeppelin"]}, {"title": "calculated as _performanceFeeRate percentage of the difference between netAssetValue and _maxNetAssetValue.", "body": "calculated as _performanceFeeRate percentage of the difference between netAssetValue and _maxNetAssetValue.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#calculated-as-_performancefeerate-percentage-of-the-difference-between-netassetvalue-and-_maxnetassetvalue.", "labels": ["OpenZeppelin"]}, {"title": "To reduce developer confusion and make the code more consistent, consider changing the calculation such that _entranceFee() returns purchasedAssetValue.wmul(_entranceFeeRate). Since _entranceFeeRate can be set arbitrarily, its value can be adjusted to achieve the same result as the original calculation, but this change will make the calculation more understandable for users and developers.", "body": "To reduce developer confusion and make the code more consistent, consider changing the calculation such that _entranceFee() returns purchasedAssetValue.wmul(_entranceFeeRate). Since _entranceFeeRate can be set arbitrarily, its value can be adjusted to achieve the same result as the original calculation, but this change will make the calculation more understandable for users and developers.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#to-reduce-developer-confusion-and-make-the-code-more-consistent,-consider-changing-the-calculation-such-that-_entrancefee()-returns-purchasedassetvalue.wmul(_entrancefeerate).-since-_entrancefeerate-can-be-set-arbitrarily,-its-value-can-be-adjusted-to-achieve-the-same-result-as-the-original-calculation,-but-this-change-will-make-the-calculation-more-understandable-for-users-and-developers.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The Monte Carlo team has decided to keep the formula as it is, however, they have updated the docstrings above the _entranceFee function and have changed variable names in PR #25 for the purpose of clarity.", "body": "Update: Acknowledged. The Monte Carlo team has decided to keep the formula as it is, however, they have updated the docstrings above the _entranceFee function and have changed variable names in PR #25 for the purpose of clarity.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-acknowledged.-the-monte-carlo-team-has-decided-to-keep-the-formula-as-it-is,-however,-they-have-updated-the-docstrings-above-the-_entrancefee-function-and-have-changed-variable-names-in-pr-#25-for-the-purpose-of-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Implicit casting", "body": "[N03] Implicit casting", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n03]-implicit-casting", "labels": ["OpenZeppelin"]}, {"title": "Within Collateral.sol, the uint8 decimals is implicitly cast to uint256, as the sub function expects two uint256 values.", "body": "Within Collateral.sol, the uint8 decimals is implicitly cast to uint256, as the sub function expects two uint256 values.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#within-collateral.sol,-the-uint8-decimals-is-implicitly-cast-to-uint256,-as-the-sub-function-expects-two-uint256-values.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly casting the value decimals to uint256.", "body": "To favor readability, consider explicitly casting the value decimals to uint256.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#to-favor-readability,-consider-explicitly-casting-the-value-decimals-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #26.", "body": "Update: Fixed in PR #26.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#26.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Redundant require statements", "body": "[N04] Redundant require statements", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n04]-redundant-require-statements", "labels": ["OpenZeppelin"]}, {"title": "LibMathEx contract, on", "body": "LibMathEx contract, on", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#libmathex-contract,-on", "labels": ["OpenZeppelin"]}, {"title": "line 23 and", "body": "line 23 and", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-23-and", "labels": ["OpenZeppelin"]}, {"title": "line 36 there are", "body": "line 36 there are", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-36-there-are", "labels": ["OpenZeppelin"]}, {"title": "line 24 and", "body": "line 24 and", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-24-and", "labels": ["OpenZeppelin"]}, {"title": "line 37,", "body": "line 37,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-37,", "labels": ["OpenZeppelin"]}, {"title": "SafeMath\u2019s div function and", "body": "SafeMath\u2019s div function and", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#safemath\u2019s-div-function-and", "labels": ["OpenZeppelin"]}, {"title": "SignedSafeMath\u2019s div function both contain checks that the second parameter is not", "body": "SignedSafeMath\u2019s div function both contain checks that the second parameter is not", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#signedsafemath\u2019s-div-function-both-contain-checks-that-the-second-parameter-is-not", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the identified requires to simplify the code.", "body": "Consider removing the identified requires to simplify the code.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-the-identified-requires-to-simplify-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #40.", "body": "Update: Fixed in PR #40.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#40.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Naming issues", "body": "[N05] Naming issues", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n05]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "Several places in the code could benefit from clearer naming. Here are our suggestions:", "body": "Several places in the code could benefit from clearer naming. Here are our suggestions:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#several-places-in-the-code-could-benefit-from-clearer-naming.-here-are-our-suggestions:", "labels": ["OpenZeppelin"]}, {"title": "_maxNetAssetValuePerShare should be renamed to _historicMaxNetAssetValuePerShare. _maxNetAssetValue and _updateMaxNetAssetValuePerShare should be renamed similarly.", "body": "_maxNetAssetValuePerShare should be renamed to _historicMaxNetAssetValuePerShare. _maxNetAssetValue and _updateMaxNetAssetValuePerShare should be renamed similarly.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#_maxnetassetvaluepershare-should-be-renamed-to-_historicmaxnetassetvaluepershare.-_maxnetassetvalue-and-_updatemaxnetassetvaluepershare-should-be-renamed-similarly.", "labels": ["OpenZeppelin"]}, {"title": "_totalFeeClaimed should be renamed to _totalFeeClaimable, since it decreases when fees are withdrawn.", "body": "_totalFeeClaimed should be renamed to _totalFeeClaimable, since it decreases when fees are withdrawn.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#_totalfeeclaimed-should-be-renamed-to-_totalfeeclaimable,-since-it-decreases-when-fees-are-withdrawn.", "labels": ["OpenZeppelin"]}, {"title": "Consider making the identified changes. This will improve code quality and make it easier for developers and auditors to understand the code\u2019s intention in the future.", "body": "Consider making the identified changes. This will improve code quality and make it easier for developers and auditors to understand the code\u2019s intention in the future.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-making-the-identified-changes.-this-will-improve-code-quality-and-make-it-easier-for-developers-and-auditors-to-understand-the-code\u2019s-intention-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #27. _maxNetAssetValue was not renamed.", "body": "Update: Fixed in PR #27. _maxNetAssetValue was not renamed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#27.-_maxnetassetvalue-was-not-renamed.", "labels": ["OpenZeppelin"]}, {"title": "[N06] require checks modify state", "body": "[N06] require checks modify state", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n06]-require-checks-modify-state", "labels": ["OpenZeppelin"]}, {"title": "line 90 of the", "body": "line 90 of the", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-90-of-the", "labels": ["OpenZeppelin"]}, {"title": "line 102 of the", "body": "line 102 of the", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#line-102-of-the", "labels": ["OpenZeppelin"]}, {"title": "To make the code cleaner and easier to understand, consider moving these calls out of the require checks, and instead assigning the return value to some variable, then using this variable in the require check.", "body": "To make the code cleaner and easier to understand, consider moving these calls out of the require checks, and instead assigning the return value to some variable, then using this variable in the require check.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#to-make-the-code-cleaner-and-easier-to-understand,-consider-moving-these-calls-out-of-the-require-checks,-and-instead-assigning-the-return-value-to-some-variable,-then-using-this-variable-in-the-require-check.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #28.", "body": "Update: Fixed in PR #28.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#28.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unnecessary operation in _managementFee", "body": "[N07] Unnecessary operation in _managementFee", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n07]-unnecessary-operation-in-_managementfee", "labels": ["OpenZeppelin"]}, {"title": "Within the function _managementFee in the Core contract, the second assignment to assetValue is not needed, as assetValue is not used afterwards in the function and is locally scoped.", "body": "Within the function _managementFee in the Core contract, the second assignment to assetValue is not needed, as assetValue is not used afterwards in the function and is locally scoped.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#within-the-function-_managementfee-in-the-core-contract,-the-second-assignment-to-assetvalue-is-not-needed,-as-assetvalue-is-not-used-afterwards-in-the-function-and-is-locally-scoped.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the specified operation. This will make the code cleaner and easier to understand.", "body": "Consider removing the specified operation. This will make the code cleaner and easier to understand.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-the-specified-operation.-this-will-make-the-code-cleaner-and-easier-to-understand.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #30.", "body": "Update: Fixed in PR #30.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#30.", "labels": ["OpenZeppelin"]}, {"title": "[N08] IAggregator interface name is not consistent", "body": "[N08] IAggregator interface name is not consistent", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n08]-iaggregator-interface-name-is-not-consistent", "labels": ["OpenZeppelin"]}, {"title": "Within IAggregator.sol, the name of the interface, AggregatorInterface, does not match the name of the contract file, IAggregator.", "body": "Within IAggregator.sol, the name of the interface, AggregatorInterface, does not match the name of the contract file, IAggregator.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#within-iaggregator.sol,-the-name-of-the-interface,-aggregatorinterface,-does-not-match-the-name-of-the-contract-file,-iaggregator.", "labels": ["OpenZeppelin"]}, {"title": "In order to improve readability and to be consistent with the naming of other interfaces in the codebase, consider changing the name of AggregatorInterface interface to IAggregator.", "body": "In order to improve readability and to be consistent with the naming of other interfaces in the codebase, consider changing the name of AggregatorInterface interface to IAggregator.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#in-order-to-improve-readability-and-to-be-consistent-with-the-naming-of-other-interfaces-in-the-codebase,-consider-changing-the-name-of-aggregatorinterface-interface-to-iaggregator.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #29.", "body": "Update: Fixed in PR #29.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#29.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Inconsistent capitalization in enums", "body": "[N09] Inconsistent capitalization in enums", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n09]-inconsistent-capitalization-in-enums", "labels": ["OpenZeppelin"]}, {"title": "The enum FundState declared in the State contract has identifiers for its values which are not capitalized. Other enums in the project have identifiers in all capital letters.", "body": "The enum FundState declared in the State contract has identifiers for its values which are not capitalized. Other enums in the project have identifiers in all capital letters.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#the-enum-fundstate-declared-in-the-state-contract-has-identifiers-for-its-values-which-are-not-capitalized.-other-enums-in-the-project-have-identifiers-in-all-capital-letters.", "labels": ["OpenZeppelin"]}, {"title": "Consider capitalizing the identifiers in the FundState enum to increase consistency within the codebase.", "body": "Consider capitalizing the identifiers in the FundState enum to increase consistency within the codebase.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-capitalizing-the-identifiers-in-the-fundstate-enum-to-increase-consistency-within-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #31.", "body": "Update: Fixed in PR #31.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#31.", "labels": ["OpenZeppelin"]}, {"title": "[N10] LibTypes is unused as a library", "body": "[N10] LibTypes is unused as a library", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n10]-libtypes-is-unused-as-a-library", "labels": ["OpenZeppelin"]}, {"title": "LibTypes is imported as a library and is used to access LibTypes.Side in the AutoTradingFund contract. However, instead of being used as a library, it is called directly on line 143. To use it as a library, it should be called as a function of targetSide, which would instead read as targetSide.opposite().", "body": "LibTypes is imported as a library and is used to access LibTypes.Side in the AutoTradingFund contract. However, instead of being used as a library, it is called directly on line 143. To use it as a library, it should be called as a function of targetSide, which would instead read as targetSide.opposite().", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#libtypes-is-imported-as-a-library-and-is-used-to-access-libtypes.side-in-the-autotradingfund-contract.-however,-instead-of-being-used-as-a-library,-it-is-called-directly-on-line-143.-to-use-it-as-a-library,-it-should-be-called-as-a-function-of-targetside,-which-would-instead-read-as-targetside.opposite().", "labels": ["OpenZeppelin"]}, {"title": "Since this is the only place where any function from LibTypes is called, consider changing line 143 as described to use LibTypes as a library, or consider removing line 32 to make the code simpler and easier to understand.", "body": "Since this is the only place where any function from LibTypes is called, consider changing line 143 as described to use LibTypes as a library, or consider removing line 32 to make the code simpler and easier to understand.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#since-this-is-the-only-place-where-any-function-from-libtypes-is-called,-consider-changing-line-143-as-described-to-use-libtypes-as-a-library,-or-consider-removing-line-32-to-make-the-code-simpler-and-easier-to-understand.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #32.", "body": "Update: Fixed in PR #32.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#32.", "labels": ["OpenZeppelin"]}, {"title": "[N11] _toInternalAmount() is unused", "body": "[N11] _toInternalAmount() is unused", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n11]-_tointernalamount()-is-unused", "labels": ["OpenZeppelin"]}, {"title": "The internal function _toInternalAmount() is unused in the audited codebase.", "body": "The internal function _toInternalAmount() is unused in the audited codebase.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#the-internal-function-_tointernalamount()-is-unused-in-the-audited-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing it to simplify the code and reduce confusion. Alternatively, if it was intended to make this function public, consider making that change. Or, if it was intended to be called within SettleableFund.settle(), consider making the change described in [C01] Miscalculation of payout in settle.", "body": "Consider removing it to simplify the code and reduce confusion. Alternatively, if it was intended to make this function public, consider making that change. Or, if it was intended to be called within SettleableFund.settle(), consider making the change described in [C01] Miscalculation of payout in settle.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-it-to-simplify-the-code-and-reduce-confusion.-alternatively,-if-it-was-intended-to-make-this-function-public,-consider-making-that-change.-or,-if-it-was-intended-to-be-called-within-settleablefund.settle(),-consider-making-the-change-described-in-[c01]-miscalculation-of-payout-in-settle.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #3. The _toInternalAmount() function is now used as described in C01.", "body": "Update: Fixed in PR #3. The _toInternalAmount() function is now used as described in C01.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#3.-the-_tointernalamount()-function-is-now-used-as-described-in-c01.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Unused events", "body": "[N12] Unused events", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n12]-unused-events", "labels": ["OpenZeppelin"]}, {"title": "There are events in the codebase that are never emitted. For instance:", "body": "There are events in the codebase that are never emitted. For instance:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#there-are-events-in-the-codebase-that-are-never-emitted.-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "IncreaseWithdrawableCollateral and DecreaseWithdrawableCollateral events in the ERC20CappedRedeemable contract", "body": "IncreaseWithdrawableCollateral and DecreaseWithdrawableCollateral events in the ERC20CappedRedeemable contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#increasewithdrawablecollateral-and-decreasewithdrawablecollateral-events-in-the-erc20cappedredeemable-contract", "labels": ["OpenZeppelin"]}, {"title": "SetFeeRates event in the Fee contract", "body": "SetFeeRates event in the Fee contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#setfeerates-event-in-the-fee-contract", "labels": ["OpenZeppelin"]}, {"title": "SetPeriod and SetNumPeriod events in the RSIReader contract", "body": "SetPeriod and SetNumPeriod events in the RSIReader contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#setperiod-and-setnumperiod-events-in-the-rsireader-contract", "labels": ["OpenZeppelin"]}, {"title": "Consider either removing the declaration or emitting the event appropriately.", "body": "Consider either removing the declaration or emitting the event appropriately.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-either-removing-the-declaration-or-emitting-the-event-appropriately.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #33.", "body": "Update: Fixed in PR #33.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#33.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Unused variable", "body": "[N13] Unused variable", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n13]-unused-variable", "labels": ["OpenZeppelin"]}, {"title": "Within RSIReader contract, in the _calculateRSI function, variable lastNonZeroPrice is declared and set many times, but it is not used anywhere within the function. Notably it is declared locally, so it cannot be used outside the scope of this function.", "body": "Within RSIReader contract, in the _calculateRSI function, variable lastNonZeroPrice is declared and set many times, but it is not used anywhere within the function. Notably it is declared locally, so it cannot be used outside the scope of this function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#within-rsireader-contract,-in-the-_calculatersi-function,-variable-lastnonzeroprice-is-declared-and-set-many-times,-but-it-is-not-used-anywhere-within-the-function.-notably-it-is-declared-locally,-so-it-cannot-be-used-outside-the-scope-of-this-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the unused variable to make the code cleaner and easier to understand.", "body": "Consider removing the unused variable to make the code cleaner and easier to understand.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-the-unused-variable-to-make-the-code-cleaner-and-easier-to-understand.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #34.", "body": "Update: Fixed in PR #34.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#34.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Unused constant", "body": "[N14] Unused constant", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n14]-unused-constant", "labels": ["OpenZeppelin"]}, {"title": "The constant SHARE_TOKEN_DECIMALS declared in the LibConstant library is not used within the codebase.", "body": "The constant SHARE_TOKEN_DECIMALS declared in the LibConstant library is not used within the codebase.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#the-constant-share_token_decimals-declared-in-the-libconstant-library-is-not-used-within-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing it to make the code cleaner.", "body": "Consider removing it to make the code cleaner.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-it-to-make-the-code-cleaner.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #35.", "body": "Update: Fixed in PR #35.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#35.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unused import statements", "body": "[N15] Unused import statements", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n15]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the following unused imports:", "body": "Consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "EnumerableMap and Arrays in LibEnumerableMap.sol", "body": "EnumerableMap and Arrays in LibEnumerableMap.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#enumerablemap-and-arrays-in-libenumerablemap.sol", "labels": ["OpenZeppelin"]}, {"title": "Math and LibConstant in RSIReader.sol", "body": "Math and LibConstant in RSIReader.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#math-and-libconstant-in-rsireader.sol", "labels": ["OpenZeppelin"]}, {"title": "Context in State.sol", "body": "Context in State.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#context-in-state.sol", "labels": ["OpenZeppelin"]}, {"title": "LibConstant in BaseFund.sol", "body": "LibConstant in BaseFund.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#libconstant-in-basefund.sol", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #36.", "body": "Update: Fixed in PR #36.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#36.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Typos", "body": "[N16] Typos", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n16]-typos", "labels": ["OpenZeppelin"]}, {"title": "The code contains the following typos:", "body": "The code contains the following typos:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#the-code-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "On line 37 of Auction.sol, \u201cmakes\u201d should be \u201cgives\u201d.", "body": "On line 37 of Auction.sol, \u201cmakes\u201d should be \u201cgives\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-37-of-auction.sol,-\u201cmakes\u201d-should-be-\u201cgives\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 148 of BaseFund.sol, \u201cwiil\u201d should be \u201cwill\u201d.", "body": "On line 148 of BaseFund.sol, \u201cwiil\u201d should be \u201cwill\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-148-of-basefund.sol,-\u201cwiil\u201d-should-be-\u201cwill\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 150 of BaseFund.sol, \u201cshares token\u201d should be \u201cshare tokens\u201d.", "body": "On line 150 of BaseFund.sol, \u201cshares token\u201d should be \u201cshare tokens\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-150-of-basefund.sol,-\u201cshares-token\u201d-should-be-\u201cshare-tokens\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 259 of BaseFund.sol, \u201cTrding\u201d should be \u201cTrading\u201d.", "body": "On line 259 of BaseFund.sol, \u201cTrding\u201d should be \u201cTrading\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-259-of-basefund.sol,-\u201ctrding\u201d-should-be-\u201ctrading\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 273 of BaseFund.sol, \u201cexcceeded\u201d should be \u201cexceeded\u201d.", "body": "On line 273 of BaseFund.sol, \u201cexcceeded\u201d should be \u201cexceeded\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-273-of-basefund.sol,-\u201cexcceeded\u201d-should-be-\u201cexceeded\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 13 of Collateral.sol, \u201cunderlaying\u201d should be \u201cunderlying\u201d.", "body": "On line 13 of Collateral.sol, \u201cunderlaying\u201d should be \u201cunderlying\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-13-of-collateral.sol,-\u201cunderlaying\u201d-should-be-\u201cunderlying\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 54 of ERC20CappedRedeemable.sol, \u201cshare will still belongs\u201d should be \u201cshare will still belong\u201d.", "body": "On line 54 of ERC20CappedRedeemable.sol, \u201cshare will still belongs\u201d should be \u201cshare will still belong\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-54-of-erc20cappedredeemable.sol,-\u201cshare-will-still-belongs\u201d-should-be-\u201cshare-will-still-belong\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 80 of ERC20CappedRedeemable.sol, \u201cSlipage\u201d should be \u201cSlippage\u201d.", "body": "On line 80 of ERC20CappedRedeemable.sol, \u201cSlipage\u201d should be \u201cSlippage\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-80-of-erc20cappedredeemable.sol,-\u201cslipage\u201d-should-be-\u201cslippage\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 153 of ERC20CappedRedeemable.sol, \u201c&&\u201d should be \u201c&\u201d or \u201cand\u201d.", "body": "On line 153 of ERC20CappedRedeemable.sol, \u201c&&\u201d should be \u201c&\u201d or \u201cand\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-153-of-erc20cappedredeemable.sol,-\u201c&&\u201d-should-be-\u201c&\u201d-or-\u201cand\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 163 of ERC20CappedRedeemable.sol, \u201creceipient\u201d should be \u201crecipient\u201d.", "body": "On line 163 of ERC20CappedRedeemable.sol, \u201creceipient\u201d should be \u201crecipient\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-163-of-erc20cappedredeemable.sol,-\u201creceipient\u201d-should-be-\u201crecipient\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 165 of ERC20CappedRedeemable.sol, \u201ca account continously purchase && transfer shares to another account.\u201d should be \u201can account continuously purchases and transfers shares to another account\u201d.", "body": "On line 165 of ERC20CappedRedeemable.sol, \u201ca account continously purchase && transfer shares to another account.\u201d should be \u201can account continuously purchases and transfers shares to another account\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-165-of-erc20cappedredeemable.sol,-\u201ca-account-continously-purchase-&&-transfer-shares-to-another-account.\u201d-should-be-\u201can-account-continuously-purchases-and-transfers-shares-to-another-account\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 166 of ERC20CappedRedeemable.sol, \u201cunexpeced\u201d should be \u201cunexpected\u201d.", "body": "On line 166 of ERC20CappedRedeemable.sol, \u201cunexpeced\u201d should be \u201cunexpected\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-166-of-erc20cappedredeemable.sol,-\u201cunexpeced\u201d-should-be-\u201cunexpected\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 33 of Fee.sol, line 42 of Fee.sol and line 51 of Fee.sol \u201crete\u201d should be \u201crate\u201d.", "body": "On line 33 of Fee.sol, line 42 of Fee.sol and line 51 of Fee.sol \u201crete\u201d should be \u201crate\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-33-of-fee.sol,-line-42-of-fee.sol-and-line-51-of-fee.sol-\u201crete\u201d-should-be-\u201crate\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 37 of Fee.sol, line 46 of Fee.sol, and line 55 of Fee.sol, \u201ctoo large rate\u201d should be \u201crate too large\u201d.", "body": "On line 37 of Fee.sol, line 46 of Fee.sol, and line 55 of Fee.sol, \u201ctoo large rate\u201d should be \u201crate too large\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-37-of-fee.sol,-line-46-of-fee.sol,-and-line-55-of-fee.sol,-\u201ctoo-large-rate\u201d-should-be-\u201crate-too-large\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 80 of Fee.sol, \u201c365 day\u201d should be \u201c365 days\u201d.", "body": "On line 80 of Fee.sol, \u201c365 day\u201d should be \u201c365 days\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-80-of-fee.sol,-\u201c365-day\u201d-should-be-\u201c365-days\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 50 of PeriodicPriceBucket.sol, \u201cperiod\u201d should be \u201cperiods\u201d.", "body": "On line 50 of PeriodicPriceBucket.sol, \u201cperiod\u201d should be \u201cperiods\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-50-of-periodicpricebucket.sol,-\u201cperiod\u201d-should-be-\u201cperiods\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 52 of PeriodicPriceBucket.sol, \u201cremove\u201d should be \u201cremoval\u201d.", "body": "On line 52 of PeriodicPriceBucket.sol, \u201cremove\u201d should be \u201cremoval\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-52-of-periodicpricebucket.sol,-\u201cremove\u201d-should-be-\u201cremoval\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 53 of PeriodicPriceBucket.sol, \u201cperiod\u201d should be \u201cperiods\u201d.", "body": "On line 53 of PeriodicPriceBucket.sol, \u201cperiod\u201d should be \u201cperiods\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-53-of-periodicpricebucket.sol,-\u201cperiod\u201d-should-be-\u201cperiods\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 69 of PeriodicPriceBucket.sol, \u201ca period is exist\u201d should be \u201cif a period exists\u201d.", "body": "On line 69 of PeriodicPriceBucket.sol, \u201ca period is exist\u201d should be \u201cif a period exists\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-69-of-periodicpricebucket.sol,-\u201ca-period-is-exist\u201d-should-be-\u201cif-a-period-exists\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 70 of PeriodicPriceBucket.sol, \u201cis already existed\u201d should be \u201calready exists\u201d.", "body": "On line 70 of PeriodicPriceBucket.sol, \u201cis already existed\u201d should be \u201calready exists\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-70-of-periodicpricebucket.sol,-\u201cis-already-existed\u201d-should-be-\u201calready-exists\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 89 of PeriodicPriceBucket.sol, \u201creaches limit\u201d should be \u201chas already reached the limit\u201d.", "body": "On line 89 of PeriodicPriceBucket.sol, \u201creaches limit\u201d should be \u201chas already reached the limit\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-89-of-periodicpricebucket.sol,-\u201creaches-limit\u201d-should-be-\u201chas-already-reached-the-limit\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 102 of PeriodicPriceBucket.sol, \u201cis not\u201d should be \u201cdoes not\u201d.", "body": "On line 102 of PeriodicPriceBucket.sol, \u201cis not\u201d should be \u201cdoes not\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-102-of-periodicpricebucket.sol,-\u201cis-not\u201d-should-be-\u201cdoes-not\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 134 of PeriodicPriceBucket.sol, \u201coverrided\u201d should be \u201coverwritten\u201d.", "body": "On line 134 of PeriodicPriceBucket.sol, \u201coverrided\u201d should be \u201coverwritten\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-134-of-periodicpricebucket.sol,-\u201coverrided\u201d-should-be-\u201coverwritten\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 161 of PeriodicPriceBucket.sol, \u201cis not\u201d should be \u201cdoes not\u201d.", "body": "On line 161 of PeriodicPriceBucket.sol, \u201cis not\u201d should be \u201cdoes not\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-161-of-periodicpricebucket.sol,-\u201cis-not\u201d-should-be-\u201cdoes-not\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 23 of RSITrendingStrategy.sol, \u201cimplements\u201d should be \u201cimplementations\u201d.", "body": "On line 23 of RSITrendingStrategy.sol, \u201cimplements\u201d should be \u201cimplementations\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-23-of-rsitrendingstrategy.sol,-\u201cimplements\u201d-should-be-\u201cimplementations\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 33 of RSITrendingStrategy.sol, \u201coralce, acctually\u201d should be \u201coracle, actually\u201d.", "body": "On line 33 of RSITrendingStrategy.sol, \u201coralce, acctually\u201d should be \u201coracle, actually\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-33-of-rsitrendingstrategy.sol,-\u201coralce,-acctually\u201d-should-be-\u201coracle,-actually\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 36 of RSITrendingStrategy.sol, \u201cmonotune\u201d should be \u201cmonotonically\u201d.", "body": "On line 36 of RSITrendingStrategy.sol, \u201cmonotune\u201d should be \u201cmonotonically\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-36-of-rsitrendingstrategy.sol,-\u201cmonotune\u201d-should-be-\u201cmonotonically\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 37 of RSITrendingStrategy.sol and line 81 of RSITrendingStrategy.sol, \u201couput\u201d should be \u201coutput\u201d.", "body": "On line 37 of RSITrendingStrategy.sol and line 81 of RSITrendingStrategy.sol, \u201couput\u201d should be \u201coutput\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-37-of-rsitrendingstrategy.sol-and-line-81-of-rsitrendingstrategy.sol,-\u201couput\u201d-should-be-\u201coutput\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 79 of SettleableFund.sol, \u201cdrawdonw\u201d should be \u201cdrawdown\u201d.", "body": "On line 79 of SettleableFund.sol, \u201cdrawdonw\u201d should be \u201cdrawdown\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-79-of-settleablefund.sol,-\u201cdrawdonw\u201d-should-be-\u201cdrawdown\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 104 of SettleableFund.sol, \u201cleveraga\u201d should be \u201cleverage\u201d.", "body": "On line 104 of SettleableFund.sol, \u201cleveraga\u201d should be \u201cleverage\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-104-of-settleablefund.sol,-\u201cleveraga\u201d-should-be-\u201cleverage\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 48 of State.sol, \u201cshutdown state\u201d should be \u201cEmergency state\u201d.", "body": "On line 48 of State.sol, \u201cshutdown state\u201d should be \u201cEmergency state\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-48-of-state.sol,-\u201cshutdown-state\u201d-should-be-\u201cemergency-state\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #37.", "body": "Update: Fixed in PR #37.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#37.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Misleading error message", "body": "[N17] Misleading error message", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#[n17]-misleading-error-message", "labels": ["OpenZeppelin"]}, {"title": "On line 160 of PeriodicPriceBucket contract, the error message implies beginTimestamp must be less than endTimestamp, when the check allows them to also be equal. The error message should be updated to say \u201cbegin must be earlier than or equal to end\u201d.", "body": "On line 160 of PeriodicPriceBucket contract, the error message implies beginTimestamp must be less than endTimestamp, when the check allows them to also be equal. The error message should be updated to say \u201cbegin must be earlier than or equal to end\u201d.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#on-line-160-of-periodicpricebucket-contract,-the-error-message-implies-begintimestamp-must-be-less-than-endtimestamp,-when-the-check-allows-them-to-also-be-equal.-the-error-message-should-be-updated-to-say-\u201cbegin-must-be-earlier-than-or-equal-to-end\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the identified error message to better reflect the code\u2019s behavior.", "body": "Consider updating the identified error message to better reflect the code\u2019s behavior.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#consider-updating-the-identified-error-message-to-better-reflect-the-code\u2019s-behavior.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #38.", "body": "Update: Fixed in PR #38.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-fund-protocol-audit#update:-fixed-in-pr-#38.", "labels": ["OpenZeppelin"]}, {"title": "[N01] uint as uint256", "body": "[N01] uint as uint256", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n01]-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #49.", "body": "Update: Fixed in pull request #49.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#49.", "labels": ["OpenZeppelin"]}, {"title": "There are several cases in the code base where the uint keyword is used implicitly assuming the uint256 type.Some examples can be line 81 of the Fund contract, and line 44 of the Org contract.", "body": "There are several cases in the code base where the uint keyword is used implicitly assuming the uint256 type.Some examples can be line 81 of the Fund contract, and line 44 of the Org contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#there-are-several-cases-in-the-code-base-where-the-uint-keyword-is-used-implicitly-assuming-the-uint256-type.some-examples-can-be-line-81-of-the-fund-contract,-and-line-44-of-the-org-contract.", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, all instances of uint should be declared as uint256.", "body": "To favor explicitness, all instances of uint should be declared as uint256.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#to-favor-explicitness,-all-instances-of-uint-should-be-declared-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Unused state variables", "body": "[N02] Unused state variables", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n02]-unused-state-variables", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #46.", "body": "Update: Fixed in pull request #46.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#46.", "labels": ["OpenZeppelin"]}, {"title": "In the Fund contract, the state variables contributors and totalContributors are never used and should therefore be removed.", "body": "In the Fund contract, the state variables contributors and totalContributors are never used and should therefore be removed.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-fund-contract,-the-state-variables-contributors-and-totalcontributors-are-never-used-and-should-therefore-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Unused contracts", "body": "[N03] Unused contracts", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n03]-unused-contracts", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #50.", "body": "Update: Fixed in pull request #50.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#50.", "labels": ["OpenZeppelin"]}, {"title": "There are files which are not used at all in the code base:", "body": "There are files which are not used at all in the code base:", "html_url": "https://blog.openzeppelin.com/endaoment-audit#there-are-files-which-are-not-used-at-all-in-the-code-base:", "labels": ["OpenZeppelin"]}, {"title": "The library/SafeMath.sol file is not imported anywhere. Instead, the Fund contract, which is the only one performing mathematical operations, uses the SafeMath library that automatically comes from the OpenZeppelin ERC20 import in the Org contract.", "body": "The library/SafeMath.sol file is not imported anywhere. Instead, the Fund contract, which is the only one performing mathematical operations, uses the SafeMath library that automatically comes from the OpenZeppelin ERC20 import in the Org contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-library/safemath.sol-file-is-not-imported-anywhere.-instead,-the-fund-contract,-which-is-the-only-one-performing-mathematical-operations,-uses-the-safemath-library-that-automatically-comes-from-the-openzeppelin-erc20-import-in-the-org-contract.", "labels": ["OpenZeppelin"]}, {"title": "The same happens with the IERC20 interface. As before, the ERC20 import in the Org contract is used to call ERC20 token transfers.", "body": "The same happens with the IERC20 interface. As before, the ERC20 import in the Org contract is used to call ERC20 token transfers.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-same-happens-with-the-ierc20-interface.-as-before,-the-erc20-import-in-the-org-contract-is-used-to-call-erc20-token-transfers.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability, security and clarity of the code, consider replacing the ERC20 import with the IERC20 interface and removing the SafeMath file, importing it, where needed, directly from the OpenZeppelin contracts.", "body": "To improve readability, security and clarity of the code, consider replacing the ERC20 import with the IERC20 interface and removing the SafeMath file, importing it, where needed, directly from the OpenZeppelin contracts.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#to-improve-readability,-security-and-clarity-of-the-code,-consider-replacing-the-erc20-import-with-the-ierc20-interface-and-removing-the-safemath-file,-importing-it,-where-needed,-directly-from-the-openzeppelin-contracts.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Style recommendations not applied", "body": "[N04] Style recommendations not applied", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n04]-style-recommendations-not-applied", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #51. Solhint is now used as linter tool.", "body": "Update: Fixed in pull request #51. Solhint is now used as linter tool.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#51.-solhint-is-now-used-as-linter-tool.", "labels": ["OpenZeppelin"]}, {"title": "The style used in the entire code base is following the Solidity style recommendations, however there are still some parts in the code that have some deviations. In particular:", "body": "The style used in the entire code base is following the Solidity style recommendations, however there are still some parts in the code that have some deviations. In particular:", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-style-used-in-the-entire-code-base-is-following-the-solidity-style-recommendations,-however-there-are-still-some-parts-in-the-code-that-have-some-deviations.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "Events are not named using the CapWord style. Examples are in cashOutComplete event of the Org contract or in the fundCreated event of the FundFactory contract.", "body": "Events are not named using the CapWord style. Examples are in cashOutComplete event of the Org contract or in the fundCreated event of the FundFactory contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#events-are-not-named-using-the-capword-style.-examples-are-in-cashoutcomplete-event-of-the-org-contract-or-in-the-fundcreated-event-of-the-fundfactory-contract.", "labels": ["OpenZeppelin"]}, {"title": "There are extraspaces in function definitions between the name and the list of input parameters, but also inside functions implementation or trailing whitespaces at the end of the lines.", "body": "There are extraspaces in function definitions between the name and the list of input parameters, but also inside functions implementation or trailing whitespaces at the end of the lines.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#there-are-extraspaces-in-function-definitions-between-the-name-and-the-list-of-input-parameters,-but-also-inside-functions-implementation-or-trailing-whitespaces-at-the-end-of-the-lines.", "labels": ["OpenZeppelin"]}, {"title": "Sometimes, indentation is not correct nor made out of four spaces, like the entire EndaomentAdmin contract, that uses two spaces for the indentation while the majority of the code base is using four.", "body": "Sometimes, indentation is not correct nor made out of four spaces, like the entire EndaomentAdmin contract, that uses two spaces for the indentation while the majority of the code base is using four.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#sometimes,-indentation-is-not-correct-nor-made-out-of-four-spaces,-like-the-entire-endaomentadmin-contract,-that-uses-two-spaces-for-the-indentation-while-the-majority-of-the-code-base-is-using-four.", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent patterns are used to return function parameters, some of them are named and some are not.", "body": "Inconsistent patterns are used to return function parameters, some of them are named and some are not.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#inconsistent-patterns-are-used-to-return-function-parameters,-some-of-them-are-named-and-some-are-not.", "labels": ["OpenZeppelin"]}, {"title": "The Org input parameter of the getAllowedOrg function of the OrgFactory contract should be in mixedCase format.", "body": "The Org input parameter of the getAllowedOrg function of the OrgFactory contract should be in mixedCase format.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-org-input-parameter-of-the-getallowedorg-function-of-the-orgfactory-contract-should-be-in-mixedcase-format.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are inconsistent in style since sometimes they are introduced by the contract name and sometimes they are not.", "body": "Error messages are inconsistent in style since sometimes they are introduced by the contract name and sometimes they are not.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#error-messages-are-inconsistent-in-style-since-sometimes-they-are-introduced-by-the-contract-name-and-sometimes-they-are-not.", "labels": ["OpenZeppelin"]}, {"title": "An extra space should be added in several functions where the list of input parameters is not separated by the body\u2019s brackets of the function.", "body": "An extra space should be added in several functions where the list of input parameters is not separated by the body\u2019s brackets of the function.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#an-extra-space-should-be-added-in-several-functions-where-the-list-of-input-parameters-is-not-separated-by-the-body\u2019s-brackets-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Some variables have not explicit and unclear names. Like the x and the t of the Fund contract, the ein of the OrgFactory contract or the bal of the Org contract.", "body": "Some variables have not explicit and unclear names. Like the x and the t of the Fund contract, the ein of the OrgFactory contract or the bal of the Org contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#some-variables-have-not-explicit-and-unclear-names.-like-the-x-and-the-t-of-the-fund-contract,-the-ein-of-the-orgfactory-contract-or-the-bal-of-the-org-contract.", "labels": ["OpenZeppelin"]}, {"title": "Some variables have names that can be improved to give more context and consistency:", "body": "Some variables have names that can be improved to give more context and consistency:", "html_url": "https://blog.openzeppelin.com/endaoment-audit#some-variables-have-names-that-can-be-improved-to-give-more-context-and-consistency:", "labels": ["OpenZeppelin"]}, {"title": "newOwner input parameter of the transferOwnership function of the TwoStepOwnable contract could be changed to newPotentialOwner.", "body": "newOwner input parameter of the transferOwnership function of the TwoStepOwnable contract could be changed to newPotentialOwner.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#newowner-input-parameter-of-the-transferownership-function-of-the-twostepownable-contract-could-be-changed-to-newpotentialowner.", "labels": ["OpenZeppelin"]}, {"title": "_newPotentialOwner in line 85 of the TwoStepOwnable contract could better reflect that that\u2019s the oldPotentialOwner or the cancelledPotentialOwner.", "body": "_newPotentialOwner in line 85 of the TwoStepOwnable contract could better reflect that that\u2019s the oldPotentialOwner or the cancelledPotentialOwner.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#_newpotentialowner-in-line-85-of-the-twostepownable-contract-could-better-reflect-that-that\u2019s-the-oldpotentialowner-or-the-cancelledpotentialowner.", "labels": ["OpenZeppelin"]}, {"title": "The creator input parameter of the Fund constructor can be renamed _admin to be consistent with the variable that is assigned to.", "body": "The creator input parameter of the Fund constructor can be renamed _admin to be consistent with the variable that is assigned to.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-creator-input-parameter-of-the-fund-constructor-can-be-renamed-_admin-to-be-consistent-with-the-variable-that-is-assigned-to.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Incorrect functions visibility", "body": "[N05] Incorrect functions visibility", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n05]-incorrect-functions-visibility", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #62.", "body": "Update: Fixed in pull request #62.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#62.", "labels": ["OpenZeppelin"]}, {"title": "Whenever a function is not being called internally in the code, it can be easily declared as external, saving also gas. While the entire code base have explicit visibilities for every function, some of them can be changed to be external.Examples are the getters in the OrgFactory contract or each one of the public functions of the EndaomentAdmin contract.", "body": "Whenever a function is not being called internally in the code, it can be easily declared as external, saving also gas. While the entire code base have explicit visibilities for every function, some of them can be changed to be external.Examples are the getters in the OrgFactory contract or each one of the public functions of the EndaomentAdmin contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#whenever-a-function-is-not-being-called-internally-in-the-code,-it-can-be-easily-declared-as-external,-saving-also-gas.-while-the-entire-code-base-have-explicit-visibilities-for-every-function,-some-of-them-can-be-changed-to-be-external.examples-are-the-getters-in-the-orgfactory-contract-or-each-one-of-the-public-functions-of-the-endaomentadmin-contract.", "labels": ["OpenZeppelin"]}, {"title": "To improve clarity following Solidity recommendations and to better reflect the scope of each function, consider reviewing the visibilities applied.", "body": "To improve clarity following Solidity recommendations and to better reflect the scope of each function, consider reviewing the visibilities applied.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#to-improve-clarity-following-solidity-recommendations-and-to-better-reflect-the-scope-of-each-function,-consider-reviewing-the-visibilities-applied.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Unnecessary import", "body": "[N06] Unnecessary import", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n06]-unnecessary-import", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #45.", "body": "Update: Fixed in pull request #45.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#45.", "labels": ["OpenZeppelin"]}, {"title": "In the FundFactory contract, consider removing the import statement for OrgFactory, as this contract is never used in the contract\u2019s code.", "body": "In the FundFactory contract, consider removing the import statement for OrgFactory, as this contract is never used in the contract\u2019s code.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-fundfactory-contract,-consider-removing-the-import-statement-for-orgfactory,-as-this-contract-is-never-used-in-the-contract\u2019s-code.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Fund contract can\u2019t receive ethers", "body": "[N07] Fund contract can\u2019t receive ethers", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n07]-fund-contract-can\u2019t-receive-ethers", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #61.", "body": "Update: Fixed in pull request #61.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#61.", "labels": ["OpenZeppelin"]}, {"title": "The Fund contract is in charge of recollecting the funds to later support organizations with the recollected tokens. The getSummary function is returning the ETH balance of the contract but the contract has no payable functions to receive them.", "body": "The Fund contract is in charge of recollecting the funds to later support organizations with the recollected tokens. The getSummary function is returning the ETH balance of the contract but the contract has no payable functions to receive them.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#the-fund-contract-is-in-charge-of-recollecting-the-funds-to-later-support-organizations-with-the-recollected-tokens.-the-getsummary-function-is-returning-the-eth-balance-of-the-contract-but-the-contract-has-no-payable-functions-to-receive-them.", "labels": ["OpenZeppelin"]}, {"title": "Consider whether removing any reference to ETH if the contract is not intended to use it as a valid currency, or implementing the missing functionality to correctly receive and move them out from the contract.", "body": "Consider whether removing any reference to ETH if the contract is not intended to use it as a valid currency, or implementing the missing functionality to correctly receive and move them out from the contract.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#consider-whether-removing-any-reference-to-eth-if-the-contract-is-not-intended-to-use-it-as-a-valid-currency,-or-implementing-the-missing-functionality-to-correctly-receive-and-move-them-out-from-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Typos in the code", "body": "[N08] Typos in the code", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n08]-typos-in-the-code", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #42.", "body": "Update: Fixed in pull request #42.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#42.", "labels": ["OpenZeppelin"]}, {"title": "There are some typos to fix in the code base. In particular:", "body": "There are some typos to fix in the code base. In particular:", "html_url": "https://blog.openzeppelin.com/endaoment-audit#there-are-some-typos-to-fix-in-the-code-base.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "Line 76 of the Org contract is repeated.", "body": "Line 76 of the Org contract is repeated.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#line-76-of-the-org-contract-is-repeated.", "labels": ["OpenZeppelin"]}, {"title": "In line 59 of the OrgFactory contract, \u201cis provided\u201d should be \u201cif provided\u201d.", "body": "In line 59 of the OrgFactory contract, \u201cis provided\u201d should be \u201cif provided\u201d.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-line-59-of-the-orgfactory-contract,-\u201cis-provided\u201d-should-be-\u201cif-provided\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In line 16 of the Org contract, \u201cdirect received\u201d should be \u201cdirectly receive\u201d.", "body": "In line 16 of the Org contract, \u201cdirect received\u201d should be \u201cdirectly receive\u201d.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-line-16-of-the-org-contract,-\u201cdirect-received\u201d-should-be-\u201cdirectly-receive\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In the docstring and in the input parameter of the cashOutOrg function of the Org contract the desiredWithdrawlAddress and withdrawl words should be changed to desiredWithdrawalAddress and withdrawal.", "body": "In the docstring and in the input parameter of the cashOutOrg function of the Org contract the desiredWithdrawlAddress and withdrawl words should be changed to desiredWithdrawalAddress and withdrawal.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-docstring-and-in-the-input-parameter-of-the-cashoutorg-function-of-the-org-contract-the-desiredwithdrawladdress-and-withdrawl-words-should-be-changed-to-desiredwithdrawaladdress-and-withdrawal.", "labels": ["OpenZeppelin"]}, {"title": "In the Fund contract the word reccomendation should be changed for recommendation in several lines.", "body": "In the Fund contract the word reccomendation should be changed for recommendation in several lines.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-fund-contract-the-word-reccomendation-should-be-changed-for-recommendation-in-several-lines.", "labels": ["OpenZeppelin"]}, {"title": "In the Administratable contract in line 8 Provides a of modifiers should be Provides two modifiers.", "body": "In the Administratable contract in line 8 Provides a of modifiers should be Provides two modifiers.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-administratable-contract-in-line-8-provides-a-of-modifiers-should-be-provides-two-modifiers.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unclear function purpose", "body": "[N09] Unclear function purpose", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n09]-unclear-function-purpose", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #48.", "body": "Update: Fixed in pull request #48.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#48.", "labels": ["OpenZeppelin"]}, {"title": "approveClaim function of the", "body": "setOrgWallet function is public but called internally only by the  If is an explicit design decision, consider commenting on the docstrings why approveClaim is approving a claim or why setOrgWallet sets that variable and whats its purpose.  [N10] Default value as sensible information  Update: Fixed in pull request #44.  In the list of all possible users roles in the IEndaomentAdmin interface, the ADMIN role is the 0 value of the enum structure which is the default value of the integer type. Relying the ADMIN role on such value can be risky and should be avoided since many clients can default to that value if none is provided.  Consider moving the ADMIN role to the end of the list and to assign to the 0 value an EMPTY role.  Conclusions  2 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Update: All the reported issues have been addressed and fixed by the Endaoment team.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/endaoment-audit#approveclaim-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "setOrgWallet function is public but called internally only by the", "body": "setOrgWallet function is public but called internally only by the", "html_url": "https://blog.openzeppelin.com/endaoment-audit#setorgwallet-function-is-public-but-called-internally-only-by-the", "labels": ["OpenZeppelin"]}, {"title": "If is an explicit design decision, consider commenting on the docstrings why approveClaim is approving a claim or why setOrgWallet sets that variable and what\u2019s its purpose.", "body": "If is an explicit design decision, consider commenting on the docstrings why approveClaim is approving a claim or why setOrgWallet sets that variable and what\u2019s its purpose.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#if-is-an-explicit-design-decision,-consider-commenting-on-the-docstrings-why-approveclaim-is-approving-a-claim-or-why-setorgwallet-sets-that-variable-and-what\u2019s-its-purpose.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Default value as sensible information", "body": "[N10] Default value as sensible information", "html_url": "https://blog.openzeppelin.com/endaoment-audit#[n10]-default-value-as-sensible-information", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #44.", "body": "Update: Fixed in pull request #44.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#update:-fixed-in-pull-request-#44.", "labels": ["OpenZeppelin"]}, {"title": "In the list of all possible user\u2019s roles in the IEndaomentAdmin interface, the ADMIN role is the 0 value of the enum structure which is the default value of the integer type. Relying the ADMIN role on such value can be risky and should be avoided since many clients can default to that value if none is provided.", "body": "In the list of all possible user\u2019s roles in the IEndaomentAdmin interface, the ADMIN role is the 0 value of the enum structure which is the default value of the integer type. Relying the ADMIN role on such value can be risky and should be avoided since many clients can default to that value if none is provided.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#in-the-list-of-all-possible-user\u2019s-roles-in-the-iendaomentadmin-interface,-the-admin-role-is-the-0-value-of-the-enum-structure-which-is-the-default-value-of-the-integer-type.-relying-the-admin-role-on-such-value-can-be-risky-and-should-be-avoided-since-many-clients-can-default-to-that-value-if-none-is-provided.", "labels": ["OpenZeppelin"]}, {"title": "Consider moving the ADMIN role to the end of the list and to assign to the 0 value an EMPTY role.", "body": "Consider moving the ADMIN role to the end of the list and to assign to the 0 value an EMPTY role.", "html_url": "https://blog.openzeppelin.com/endaoment-audit#consider-moving-the-admin-role-to-the-end-of-the-list-and-to-assign-to-the-0-value-an-empty-role.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Misleading Comments", "body": "[N01] Misleading Comments", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n01]-misleading-comments", "labels": ["OpenZeppelin"]}, {"title": "The streaming fee validation error message says the fee must be less than the maximum, but it could be equal to the maximum.", "body": "The streaming fee validation error message says the fee must be less than the maximum, but it could be equal to the maximum.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-streaming-fee-validation-error-message-says-the-fee-must-be-less-than-the-maximum,-but-it-could-be-equal-to-the-maximum.", "labels": ["OpenZeppelin"]}, {"title": "The comment on the contains function of AddressArrayUtils library suggests that its return value depends on the first occurrence of the value and the indexing scheme. In fact, it just returns a boolean.", "body": "The comment on the contains function of AddressArrayUtils library suggests that its return value depends on the first occurrence of the value and the indexing scheme. In fact, it just returns a boolean.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-comment-on-the-contains-function-of-addressarrayutils-library-suggests-that-its-return-value-depends-on-the-first-occurrence-of-the-value-and-the-indexing-scheme.-in-fact,-it-just-returns-a-boolean.", "labels": ["OpenZeppelin"]}, {"title": "The ModuleBase constructor comment claims it maps asset pairs to their oracles but that does not apply to this function.", "body": "The ModuleBase constructor comment claims it maps asset pairs to their oracles but that does not apply to this function.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-modulebase-constructor-comment-claims-it-maps-asset-pairs-to-their-oracles-but-that-does-not-apply-to-this-function.", "labels": ["OpenZeppelin"]}, {"title": "The comment on the getDefaultPositionalUnit function of the Position contract is an incomplete thought.", "body": "The comment on the getDefaultPositionalUnit function of the Position contract is an incomplete thought.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-comment-on-the-getdefaultpositionalunit-function-of-the-position-contract-is-an-incomplete-thought.", "labels": ["OpenZeppelin"]}, {"title": "The comment describing the StreamingFeeModule inflation formula has the brackets in the wrong position. The left hand side of the equation should be \u201cfeeQuantity / (feeQuantity + totalSupply)\u201d", "body": "The comment describing the StreamingFeeModule inflation formula has the brackets in the wrong position. The left hand side of the equation should be \u201cfeeQuantity / (feeQuantity + totalSupply)\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-comment-describing-the-streamingfeemodule-inflation-formula-has-the-brackets-in-the-wrong-position.-the-left-hand-side-of-the-equation-should-be-\u201cfeequantity-/-(feequantity-+-totalsupply)\u201d", "labels": ["OpenZeppelin"]}, {"title": "The inflation calculation incorrectly reports the scale factor as 10e18 instead of 1e18.", "body": "The inflation calculation incorrectly reports the scale factor as 10e18 instead of 1e18.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-inflation-calculation-incorrectly-reports-the-scale-factor-as-10e18-instead-of-1e18.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the comments accordingly.", "body": "Consider updating the comments accordingly.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#consider-updating-the-comments-accordingly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#118. The streaming fee validation error message has been corrected.", "body": "Update: Partially fixed in PR#118. The streaming fee validation error message has been corrected.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-partially-fixed-in-pr#118.-the-streaming-fee-validation-error-message-has-been-corrected.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inconsistent naming of internal functions", "body": "[N02] Inconsistent naming of internal functions", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n02]-inconsistent-naming-of-internal-functions", "labels": ["OpenZeppelin"]}, {"title": "Different naming conventions have been used to represent the internal functions in the code base.", "body": "Different naming conventions have been used to represent the internal functions in the code base.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#different-naming-conventions-have-been-used-to-represent-the-internal-functions-in-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "In most cases, the internal functions start with an underscore, for example the _defaultPositionVirtualUnit function in the SetToken contract and the _getDirectOrInversePrice function in the PriceOracle contract.", "body": "In most cases, the internal functions start with an underscore, for example the _defaultPositionVirtualUnit function in the SetToken contract and the _getDirectOrInversePrice function in the PriceOracle contract.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-most-cases,-the-internal-functions-start-with-an-underscore,-for-example-the-_defaultpositionvirtualunit-function-in-the-settoken-contract-and-the-_getdirectorinverseprice-function-in-the-priceoracle-contract.", "labels": ["OpenZeppelin"]}, {"title": "However, there are some instances where the internal functions do not start with an underscore, for example the nameHash function in the IntegrationRegistry contract and the isSetPendingInitialization function in the ModuleBase contract.", "body": "However, there are some instances where the internal functions do not start with an underscore, for example the nameHash function in the IntegrationRegistry contract and the isSetPendingInitialization function in the ModuleBase contract.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#however,-there-are-some-instances-where-the-internal-functions-do-not-start-with-an-underscore,-for-example-the-namehash-function-in-the-integrationregistry-contract-and-the-issetpendinginitialization-function-in-the-modulebase-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider using a consistent style to improve the readability of the code.", "body": "Consider using a consistent style to improve the readability of the code.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#consider-using-a-consistent-style-to-improve-the-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Inherit interfaces", "body": "[N03] Inherit interfaces", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n03]-inherit-interfaces", "labels": ["OpenZeppelin"]}, {"title": "The code base implements interfaces to allow contracts to interact with each other. However, the contracts do not inherit their own interfaces. For clarity and consistency, consider explicitly inheriting the relevant interface contracts, which will allow the compiler to confirm that they are implemented correctly.", "body": "The code base implements interfaces to allow contracts to interact with each other. However, the contracts do not inherit their own interfaces. For clarity and consistency, consider explicitly inheriting the relevant interface contracts, which will allow the compiler to confirm that they are implemented correctly.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-code-base-implements-interfaces-to-allow-contracts-to-interact-with-each-other.-however,-the-contracts-do-not-inherit-their-own-interfaces.-for-clarity-and-consistency,-consider-explicitly-inheriting-the-relevant-interface-contracts,-which-will-allow-the-compiler-to-confirm-that-they-are-implemented-correctly.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Messy code", "body": "[N04] Messy code", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n04]-messy-code", "labels": ["OpenZeppelin"]}, {"title": "The editDefaultPosition function of the Position contract executes the same update line on all three branches of the if statement. Consider moving it outside the branches.", "body": "The editDefaultPosition function of the Position contract executes the same update line on all three branches of the if statement. Consider moving it outside the branches.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-editdefaultposition-function-of-the-position-contract-executes-the-same-update-line-on-all-three-branches-of-the-if-statement.-consider-moving-it-outside-the-branches.", "labels": ["OpenZeppelin"]}, {"title": "The SetToken components array is initialized by pushing every element of another array. Consider using a direct assignment.", "body": "The SetToken components array is initialized by pushing every element of another array. Consider using a direct assignment.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-settoken-components-array-is-initialized-by-pushing-every-element-of-another-array.-consider-using-a-direct-assignment.", "labels": ["OpenZeppelin"]}, {"title": "The PreciseUnitMath library has multiple examples of a complicated same-sign conditional. This would be clearer if there were brackets around each half of the condition.", "body": "The PreciseUnitMath library has multiple examples of a complicated same-sign conditional. This would be clearer if there were brackets around each half of the condition.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-preciseunitmath-library-has-multiple-examples-of-a-complicated-same-sign-conditional.-this-would-be-clearer-if-there-were-brackets-around-each-half-of-the-condition.", "labels": ["OpenZeppelin"]}, {"title": "The SetToken contract has multiple examples of a redundant non-empty array check before looping through the array. The loop condition already handles the empty array case.", "body": "The SetToken contract has multiple examples of a redundant non-empty array check before looping through the array. The loop condition already handles the empty array case.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-settoken-contract-has-multiple-examples-of-a-redundant-non-empty-array-check-before-looping-through-the-array.-the-loop-condition-already-handles-the-empty-array-case.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#118. The pull request does not address the PreciseUnitMath conditional but it no longer appears in the latest version of the contract.", "body": "Update: Fixed in PR#118. The pull request does not address the PreciseUnitMath conditional but it no longer appears in the latest version of the contract.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-fixed-in-pr#118.-the-pull-request-does-not-address-the-preciseunitmath-conditional-but-it-no-longer-appears-in-the-latest-version-of-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unused import statements", "body": "[N05] Unused import statements", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n05]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the unused import of IERC20 in the BasicIssuanceModule contract.", "body": "Consider removing the unused import of IERC20 in the BasicIssuanceModule contract.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#consider-removing-the-unused-import-of-ierc20-in-the-basicissuancemodule-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#118. The import is now used.", "body": "Update: Fixed in PR#118. The import is now used.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-fixed-in-pr#118.-the-import-is-now-used.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Naming Suggestions", "body": "[N06] Naming Suggestions", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n06]-naming-suggestions", "labels": ["OpenZeppelin"]}, {"title": "The following is a list of functions and variables that could benefit from renaming. Here are our suggestions:", "body": "The following is a list of functions and variables that could benefit from renaming. Here are our suggestions:", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-following-is-a-list-of-functions-and-variables-that-could-benefit-from-renaming.-here-are-our-suggestions:", "labels": ["OpenZeppelin"]}, {"title": "The onlyValidInitialization modifier of the ModuleBase contract should be onlyValidAndPendingSet for consistency with onlyValidAndInitializedSet", "body": "The onlyValidInitialization modifier of the ModuleBase contract should be onlyValidAndPendingSet for consistency with onlyValidAndInitializedSet", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-onlyvalidinitialization-modifier-of-the-modulebase-contract-should-be-onlyvalidandpendingset-for-consistency-with-onlyvalidandinitializedset", "labels": ["OpenZeppelin"]}, {"title": "The _mintTraderAndProtocolFee function of the StreamingFeeModule should be _mintManagerAndProtocolFee", "body": "The _mintTraderAndProtocolFee function of the StreamingFeeModule should be _mintManagerAndProtocolFee", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-_minttraderandprotocolfee-function-of-the-streamingfeemodule-should-be-_mintmanagerandprotocolfee", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#118.", "body": "[L07] Stranded Modules  Before a module is initialized on a SetToken, it transitions through the PENDING state. However, only initialized modules can be removed. This means that the SetToken manager does not have a mechanism to remove obsolete modules in the PENDING state that cannot or will not be initialized. To avoid this edge case, consider introducing a mechanism to remove a pending module.    Notes & Additional Information  [N01] Misleading Comments  The streaming fee validation error message says the fee must be less than the maximum, but it could be equal to the maximum.  The comment on the contains function of AddressArrayUtils library suggests that its return value depends on the first occurrence of the value and the indexing scheme. In fact, it just returns a boolean.  The ModuleBase constructor comment claims it maps asset pairs to their oracles but that does not apply to this function.  The comment on the getDefaultPositionalUnit function of the Position contract is an incomplete thought.  The comment describing the StreamingFeeModule inflation formula has the brackets in the wrong position. The left hand side of the equation should be feeQuantity / (feeQuantity + totalSupply)  The inflation calculation incorrectly reports the scale factor as 10e18 instead of 1e18.  Consider updating the comments accordingly.  Update: Partially fixed in PR#118. The streaming fee validation error message has been corrected.  [N02] Inconsistent naming of internal functions  Different naming conventions have been used to represent the internal functions in the code base.  In most cases, the internal functions start with an underscore, for example the _defaultPositionVirtualUnit function in the SetToken contract and the _getDirectOrInversePrice function in the PriceOracle contract.  However, there are some instances where the internal functions do not start with an underscore, for example the nameHash function in the IntegrationRegistry contract and the isSetPendingInitialization function in the ModuleBase contract.  Consider using a consistent style to improve the readability of the code.  [N03] Inherit interfaces  The code base implements interfaces to allow contracts to interact with each other. However, the contracts do not inherit their own interfaces. For clarity and consistency, consider explicitly inheriting the relevant interface contracts, which will allow the compiler to confirm that they are implemented correctly.  [N04] Messy code  The editDefaultPosition function of the Position contract executes the same update line on all three branches of the if statement. Consider moving it outside the branches.  The SetToken components array is initialized by pushing every element of another array. Consider using a direct assignment.  The PreciseUnitMath library has multiple examples of a complicated same-sign conditional. This would be clearer if there were brackets around each half of the condition.  The SetToken contract has multiple examples of a redundant non-empty array check before looping through the array. The loop condition already handles the empty array case.   The pull request does not address the PreciseUnitMath conditional but it no longer appears in the latest version of the contract.  [N05] Unused import statements  Consider removing the unused import of IERC20 in the BasicIssuanceModule contract.   The import is now used.  [N06] Naming Suggestions  The following is a list of functions and variables that could benefit from renaming. Here are our suggestions:  The onlyValidInitialization modifier of the ModuleBase contract should be onlyValidAndPendingSet for consistency with onlyValidAndInitializedSet  The _mintTraderAndProtocolFee function of the StreamingFeeModule should be _mintManagerAndProtocolFee    [N07] Extended attack surface  The new version of the protocol assigns user funds to the relevant SetToken contract instead of a shared vault. This helps to isolate SetToken contracts from each other.  Following the same principle, consider allowing SetToken contracts to transfer user funds to themselves using their own allowances, rather than through the Controller allowance. This would eliminate the potential for a module to spend user funds that were intended for an unrelated Set.  We should emphasize that we did not identify a mechanism to achieve this using the audited contracts. The recommendation is simply based on the principle of reducing the attack surface.  Update: Fixed in PR#119. The expected change was for each Set to have its own allowance, but instead incoming transfers now use the modules allowance. This still prevents malicious modules from spending funds on behalf of other modules, and it allows greater flexibility when users interact with multiple Sets. Since a given module will be shared across multiple SetToken contracts, it is still possible for a module to spend user funds intended for an unrelated Set, but well-written modules would prevent this.  [N08] Invoke Return Value  The Invoke library contains utility functions to invoke particular functions on a SetToken contract. In all cases, the return value is discarded. For maximum generality, consider forwarding the return value to the caller so they can react to it, if desired.  [N09] Use delete to clear variables  The Controller contract sets a variable to the zero address in order to clear it. Similarly, the SetToken clears the locker by assigning the zero address.  The delete key better conveys the intention and is also more idiomatic. Consider replacing assignments of zero with delete statements.    [N10] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.  [N11] Typographical errors  Consider fixing the following typographical errors:  Throughout the SetToken and PriceOracle contracts, privileged is misspelled as priveleged  In line 29 of ExplicitERC20, transferred is misspelled as transfered  In line 54 of StreamingFeeModule, manager is misspelled as maanager  In line 59 of AddressArrayUtils.sol: occurrence is misspelled as occurence  In line 99 of PreciseUnitMath.sol: there should be a space between the sentences  In line 215 of Controller.sol: and should be an  In line 446 of SetToken.sol: purposes is misspelled as purposses  In line 29 of IntegrationRegistry.sol: connected is misspelled as conected  In line 134 of Position.sol: accidentally is misspelled as accidentically  Update: Partially fixed in PR#118. The ExplicitERC20.sol, StreamingFeeModule and the privelege typographical errors have not been addressed.  Conclusions  No critical nor high severity issues were found. Several recommendations were made to improve the projects overall quality and reduce its attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-fixed-in-pr#118.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Extended attack surface", "body": "[N07] Extended attack surface", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n07]-extended-attack-surface", "labels": ["OpenZeppelin"]}, {"title": "The new version of the protocol assigns user funds to the relevant SetToken contract instead of a shared vault. This helps to isolate SetToken contracts from each other.", "body": "The new version of the protocol assigns user funds to the relevant SetToken contract instead of a shared vault. This helps to isolate SetToken contracts from each other.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-new-version-of-the-protocol-assigns-user-funds-to-the-relevant-settoken-contract-instead-of-a-shared-vault.-this-helps-to-isolate-settoken-contracts-from-each-other.", "labels": ["OpenZeppelin"]}, {"title": "Following the same principle, consider allowing SetToken contracts to transfer user funds to themselves using their own allowances, rather than through the Controller allowance. This would eliminate the potential for a module to spend user funds that were intended for an unrelated Set.", "body": "Following the same principle, consider allowing SetToken contracts to transfer user funds to themselves using their own allowances, rather than through the Controller allowance. This would eliminate the potential for a module to spend user funds that were intended for an unrelated Set.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#following-the-same-principle,-consider-allowing-settoken-contracts-to-transfer-user-funds-to-themselves-using-their-own-allowances,-rather-than-through-the-controller-allowance.-this-would-eliminate-the-potential-for-a-module-to-spend-user-funds-that-were-intended-for-an-unrelated-set.", "labels": ["OpenZeppelin"]}, {"title": "We should emphasize that we did not identify a mechanism to achieve this using the audited contracts. The recommendation is simply based on the principle of reducing the attack surface.", "body": "We should emphasize that we did not identify a mechanism to achieve this using the audited contracts. The recommendation is simply based on the principle of reducing the attack surface.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#we-should-emphasize-that-we-did-not-identify-a-mechanism-to-achieve-this-using-the-audited-contracts.-the-recommendation-is-simply-based-on-the-principle-of-reducing-the-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#119. The expected change was for each Set to have its own allowance, but instead incoming transfers now use the module\u2019s allowance. This still prevents malicious modules from spending funds on behalf of other modules, and it allows greater flexibility when users interact with multiple Sets. Since a given module will be shared across multiple SetToken contracts, it is still possible for a module to spend user funds intended for an unrelated Set, but well-written modules would prevent this.", "body": "Update: Fixed in PR#119. The expected change was for each Set to have its own allowance, but instead incoming transfers now use the module\u2019s allowance. This still prevents malicious modules from spending funds on behalf of other modules, and it allows greater flexibility when users interact with multiple Sets. Since a given module will be shared across multiple SetToken contracts, it is still possible for a module to spend user funds intended for an unrelated Set, but well-written modules would prevent this.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-fixed-in-pr#119.-the-expected-change-was-for-each-set-to-have-its-own-allowance,-but-instead-incoming-transfers-now-use-the-module\u2019s-allowance.-this-still-prevents-malicious-modules-from-spending-funds-on-behalf-of-other-modules,-and-it-allows-greater-flexibility-when-users-interact-with-multiple-sets.-since-a-given-module-will-be-shared-across-multiple-settoken-contracts,-it-is-still-possible-for-a-module-to-spend-user-funds-intended-for-an-unrelated-set,-but-well-written-modules-would-prevent-this.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Invoke Return Value", "body": "[N08] Invoke Return Value", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n08]-invoke-return-value", "labels": ["OpenZeppelin"]}, {"title": "The Invoke library contains utility functions to invoke particular functions on a SetToken contract. In all cases, the return value is discarded. For maximum generality, consider forwarding the return value to the caller so they can react to it, if desired.", "body": "The Invoke library contains utility functions to invoke particular functions on a SetToken contract. In all cases, the return value is discarded. For maximum generality, consider forwarding the return value to the caller so they can react to it, if desired.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-invoke-library-contains-utility-functions-to-invoke-particular-functions-on-a-settoken-contract.-in-all-cases,-the-return-value-is-discarded.-for-maximum-generality,-consider-forwarding-the-return-value-to-the-caller-so-they-can-react-to-it,-if-desired.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Use delete to clear variables", "body": "[N09] Use delete to clear variables", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n09]-use-delete-to-clear-variables", "labels": ["OpenZeppelin"]}, {"title": "The Controller contract sets a variable to the zero address in order to clear it. Similarly, the SetToken clears the locker by assigning the zero address.", "body": "The Controller contract sets a variable to the zero address in order to clear it. Similarly, the SetToken clears the locker by assigning the zero address.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-controller-contract-sets-a-variable-to-the-zero-address-in-order-to-clear-it.-similarly,-the-settoken-clears-the-locker-by-assigning-the-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "The delete key better conveys the intention and is also more idiomatic. Consider replacing assignments of zero with delete statements.", "body": "The delete key better conveys the intention and is also more idiomatic. Consider replacing assignments of zero with delete statements.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#the-delete-key-better-conveys-the-intention-and-is-also-more-idiomatic.-consider-replacing-assignments-of-zero-with-delete-statements.", "labels": ["OpenZeppelin"]}, {"title": "[N10] OpenZeppelin Contract\u2019s dependency is not pinned", "body": "[N10] OpenZeppelin Contract\u2019s dependency is not pinned", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n10]-openzeppelin-contract\u2019s-dependency-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "body": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#to-prevent-unexpected-behaviors-in-case-breaking-changes-are-released-in-future-updates-of-the-openzeppelin-contracts\u2019s-library,-consider-pinning-the-version-of-this-dependency-in-the-package.json-file.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Typographical errors", "body": "[N11] Typographical errors", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#[n11]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing the following typographical errors:", "body": "Consider fixing the following typographical errors:", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#consider-fixing-the-following-typographical-errors:", "labels": ["OpenZeppelin"]}, {"title": "Throughout the SetToken and PriceOracle contracts, \u201cprivileged\u201d is misspelled as \u201cpriveleged\u201d", "body": "Throughout the SetToken and PriceOracle contracts, \u201cprivileged\u201d is misspelled as \u201cpriveleged\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#throughout-the-settoken-and-priceoracle-contracts,-\u201cprivileged\u201d-is-misspelled-as-\u201cpriveleged\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 29 of ExplicitERC20, \u201ctransferred\u201d is misspelled as \u201ctransfered\u201d", "body": "In line 29 of ExplicitERC20, \u201ctransferred\u201d is misspelled as \u201ctransfered\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-29-of-expliciterc20,-\u201ctransferred\u201d-is-misspelled-as-\u201ctransfered\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 54 of StreamingFeeModule, \u201cmanager\u201d is misspelled as \u201cmaanager\u201d", "body": "In line 54 of StreamingFeeModule, \u201cmanager\u201d is misspelled as \u201cmaanager\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-54-of-streamingfeemodule,-\u201cmanager\u201d-is-misspelled-as-\u201cmaanager\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 59 of AddressArrayUtils.sol: \u201coccurrence\u201d is misspelled as \u201coccurence\u201d", "body": "In line 59 of AddressArrayUtils.sol: \u201coccurrence\u201d is misspelled as \u201coccurence\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-59-of-addressarrayutils.sol:-\u201coccurrence\u201d-is-misspelled-as-\u201coccurence\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 99 of PreciseUnitMath.sol: there should be a space between the sentences", "body": "In line 99 of PreciseUnitMath.sol: there should be a space between the sentences", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-99-of-preciseunitmath.sol:-there-should-be-a-space-between-the-sentences", "labels": ["OpenZeppelin"]}, {"title": "In line 215 of Controller.sol: \u201cand\u201d should be \u201can\u201d", "body": "In line 215 of Controller.sol: \u201cand\u201d should be \u201can\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-215-of-controller.sol:-\u201cand\u201d-should-be-\u201can\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 446 of SetToken.sol: \u201cpurposes\u201d is misspelled as \u201cpurposses\u201d", "body": "In line 446 of SetToken.sol: \u201cpurposes\u201d is misspelled as \u201cpurposses\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-446-of-settoken.sol:-\u201cpurposes\u201d-is-misspelled-as-\u201cpurposses\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 29 of IntegrationRegistry.sol: \u201cconnected\u201d is misspelled as \u201cconected\u201d", "body": "In line 29 of IntegrationRegistry.sol: \u201cconnected\u201d is misspelled as \u201cconected\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-29-of-integrationregistry.sol:-\u201cconnected\u201d-is-misspelled-as-\u201cconected\u201d", "labels": ["OpenZeppelin"]}, {"title": "In line 134 of Position.sol: \u201caccidentally\u201d is misspelled as \u201caccidentically\u201d", "body": "In line 134 of Position.sol: \u201caccidentally\u201d is misspelled as \u201caccidentically\u201d", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#in-line-134-of-position.sol:-\u201caccidentally\u201d-is-misspelled-as-\u201caccidentically\u201d", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#118. The ExplicitERC20.sol, StreamingFeeModule and the \u201cprivelege\u201d typographical errors have not been addressed.", "body": "Update: Partially fixed in PR#118. The ExplicitERC20.sol, StreamingFeeModule and the \u201cprivelege\u201d typographical errors have not been addressed.", "html_url": "https://blog.openzeppelin.com/set-protocol-audit#update:-partially-fixed-in-pr#118.-the-expliciterc20.sol,-streamingfeemodule-and-the-\u201cprivelege\u201d-typographical-errors-have-not-been-addressed.", "labels": ["OpenZeppelin"]}, {"title": "[C01] A malicious delegator can permanently lock all stake and rewards for a victim service provider and all of its honest delegators", "body": "[C01] A malicious delegator can permanently lock all stake and rewards for a victim service provider and all of its honest delegators", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[c01]-a-malicious-delegator-can-permanently-lock-all-stake-and-rewards-for-a-victim-service-provider-and-all-of-its-honest-delegators", "labels": ["OpenZeppelin"]}, {"title": "The DelegateManager.requestUndelegateStake function increases the value of the spDelegateInfo[_target].totalLockedUpStake variable. However, if this request is cancelled via the cancelUndelegateStake function, the spDelegateInfo[_target].totalLockedUpStake variable is not decreased.", "body": "The DelegateManager.requestUndelegateStake function increases the value of the spDelegateInfo[_target].totalLockedUpStake variable. However, if this request is cancelled via the cancelUndelegateStake function, the spDelegateInfo[_target].totalLockedUpStake variable is not decreased.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-delegatemanager.requestundelegatestake-function-increases-the-value-of-the-spdelegateinfo[_target].totallockedupstake-variable.-however,-if-this-request-is-cancelled-via-the-cancelundelegatestake-function,-the-spdelegateinfo[_target].totallockedupstake-variable-is-not-decreased.", "labels": ["OpenZeppelin"]}, {"title": "This means that a malicious delegator can delegate to a target service provider, and then call requestUndelegateStake and cancelUndelegateStake repeatedly, causing spDelegateInfo[_target].totalLockedUpStake to grow arbitrarily large.", "body": "This means that a malicious delegator can delegate to a target service provider, and then call requestUndelegateStake and cancelUndelegateStake repeatedly, causing spDelegateInfo[_target].totalLockedUpStake to grow arbitrarily large.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-means-that-a-malicious-delegator-can-delegate-to-a-target-service-provider,-and-then-call-requestundelegatestake-and-cancelundelegatestake-repeatedly,-causing-spdelegateinfo[_target].totallockedupstake-to-grow-arbitrarily-large.", "labels": ["OpenZeppelin"]}, {"title": "If the attacker makes spDelegateInfo[_target].totalLockedUpStake larger than totalBalanceOutsideStaking, then the claimRewards function will always revert on line 364 of DelegateManager.sol when called by the victim service provider. In this way, the malicious delegator can permanently prevent the service provider from ever claiming any of their rewards.", "body": "If the attacker makes spDelegateInfo[_target].totalLockedUpStake larger than totalBalanceOutsideStaking, then the claimRewards function will always revert on line 364 of DelegateManager.sol when called by the victim service provider. In this way, the malicious delegator can permanently prevent the service provider from ever claiming any of their rewards.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-the-attacker-makes-spdelegateinfo[_target].totallockedupstake-larger-than-totalbalanceoutsidestaking,-then-the-claimrewards-function-will-always-revert-on-line-364-of-delegatemanager.sol-when-called-by-the-victim-service-provider.-in-this-way,-the-malicious-delegator-can-permanently-prevent-the-service-provider-from-ever-claiming-any-of-their-rewards.", "labels": ["OpenZeppelin"]}, {"title": "This has additional negative security consequences.", "body": "This has additional negative security consequences.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-has-additional-negative-security-consequences.", "labels": ["OpenZeppelin"]}, {"title": "First, since the victim service provider will not be able to claim their pending rewards, the _claimPending function will always return true after the end of the week in which the attack took place. This means that honest delegators who have delegated to the victim service provider will never be able to undelegate their stake because their calls to the undelegateStake function will revert on line 252.", "body": "First, since the victim service provider will not be able to claim their pending rewards, the _claimPending function will always return true after the end of the week in which the attack took place. This means that honest delegators who have delegated to the victim service provider will never be able to undelegate their stake because their calls to the undelegateStake function will revert on line 252.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#first,-since-the-victim-service-provider-will-not-be-able-to-claim-their-pending-rewards,-the-_claimpending-function-will-always-return-true-after-the-end-of-the-week-in-which-the-attack-took-place.-this-means-that-honest-delegators-who-have-delegated-to-the-victim-service-provider-will-never-be-able-to-undelegate-their-stake-because-their-calls-to-the-undelegatestake-function-will-revert-on-line-252.", "labels": ["OpenZeppelin"]}, {"title": "Second, this also means that the victim service provider cannot successfully call the ServiceProviderFactory.requestDecreaseStake function because it will revert on line 369 of ServiceProviderFactory.sol. So the victim service provider also has their stake permanently locked.", "body": "Second, this also means that the victim service provider cannot successfully call the ServiceProviderFactory.requestDecreaseStake function because it will revert on line 369 of ServiceProviderFactory.sol. So the victim service provider also has their stake permanently locked.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#second,-this-also-means-that-the-victim-service-provider-cannot-successfully-call-the-serviceproviderfactory.requestdecreasestake-function-because-it-will-revert-on-line-369-of-serviceproviderfactory.sol.-so-the-victim-service-provider-also-has-their-stake-permanently-locked.", "labels": ["OpenZeppelin"]}, {"title": "Consider modifying the cancelUndelegateStake function so that it reduces the spDelegateInfo[_target].totalLockedUpStake variable by the pending UndelegateStakeRequest amount.", "body": "Consider modifying the cancelUndelegateStake function so that it reduces the spDelegateInfo[_target].totalLockedUpStake variable by the pending UndelegateStakeRequest amount.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-modifying-the-cancelundelegatestake-function-so-that-it-reduces-the-spdelegateinfo[_target].totallockedupstake-variable-by-the-pending-undelegatestakerequest-amount.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #561.", "body": "Update: Fixed in pull request #561.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#561.", "labels": ["OpenZeppelin"]}, {"title": "[C02] Updating or removing a service type causes critical accounting errors", "body": "[C02] Updating or removing a service type causes critical accounting errors", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[c02]-updating-or-removing-a-service-type-causes-critical-accounting-errors", "labels": ["OpenZeppelin"]}, {"title": "Updating or removing a service type after a service provider has registered an endpoint of that type can result in critical accounting errors. These errors can have serious effects, including preventing service providers from deregistering endpoints and preventing delegators from undelegating their stake.", "body": "Updating or removing a service type after a service provider has registered an endpoint of that type can result in critical accounting errors. These errors can have serious effects, including preventing service providers from deregistering endpoints and preventing delegators from undelegating their stake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#updating-or-removing-a-service-type-after-a-service-provider-has-registered-an-endpoint-of-that-type-can-result-in-critical-accounting-errors.-these-errors-can-have-serious-effects,-including-preventing-service-providers-from-deregistering-endpoints-and-preventing-delegators-from-undelegating-their-stake.", "labels": ["OpenZeppelin"]}, {"title": "ServiceProviderDetails struct in the", "body": "ServiceProviderDetails struct in the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#serviceproviderdetails-struct-in-the", "labels": ["OpenZeppelin"]}, {"title": "minAccountStake and", "body": "minAccountStake and", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#minaccountstake-and", "labels": ["OpenZeppelin"]}, {"title": "maxAccountStake. These bounds are determined by the", "body": "maxAccountStake. These bounds are determined by the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#maxaccountstake.-these-bounds-are-determined-by-the", "labels": ["OpenZeppelin"]}, {"title": "ServiceTypeStakeRequirements struct, which is tracked in the", "body": "ServiceTypeStakeRequirements struct, which is tracked in the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#servicetypestakerequirements-struct,-which-is-tracked-in-the", "labels": ["OpenZeppelin"]}, {"title": "updateServiceType function or the", "body": "updateServiceType function or the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#updateservicetype-function-or-the", "labels": ["OpenZeppelin"]}, {"title": "removeServiceType function \u2014 the", "body": "removeServiceType function \u2014 the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#removeservicetype-function-\u2014-the", "labels": ["OpenZeppelin"]}, {"title": "This can result in critical accounting errors. Here are two examples.", "body": "This can result in critical accounting errors. Here are two examples.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-can-result-in-critical-accounting-errors.-here-are-two-examples.", "labels": ["OpenZeppelin"]}, {"title": "Example 1. Increasing a service type\u2019s minStake or maxStake can result in a service provider being unable to deregister an endpoint:", "body": "Example 1. Increasing a service type\u2019s minStake or maxStake can result in a service provider being unable to deregister an endpoint:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#example-1.-increasing-a-service-type\u2019s-minstake-or-maxstake-can-result-in-a-service-provider-being-unable-to-deregister-an-endpoint:", "labels": ["OpenZeppelin"]}, {"title": "on line 287 or", "body": "on line 287 or", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#on-line-287-or", "labels": ["OpenZeppelin"]}, {"title": "on line 288 due to an underflow in", "body": "on line 288 due to an underflow in", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#on-line-288-due-to-an-underflow-in", "labels": ["OpenZeppelin"]}, {"title": "Example 2. Decreasing a service type\u2019s minStake can result in a delegator being unable to undelegate all of their stake:", "body": "Example 2. Decreasing a service type\u2019s minStake can result in a delegator being unable to undelegate all of their stake:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#example-2.-decreasing-a-service-type\u2019s-minstake-can-result-in-a-delegator-being-unable-to-undelegate-all-of-their-stake:", "labels": ["OpenZeppelin"]}, {"title": "removeServiceType function. Then when the service provider deregisters the endpoint, the", "body": "removeServiceType function. Then when the service provider deregisters the endpoint, the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#removeservicetype-function.-then-when-the-service-provider-deregisters-the-endpoint,-the", "labels": ["OpenZeppelin"]}, {"title": "on line 287. This means that when the delegator tries to undelegate all of their stake, their call to the", "body": "on line 287. This means that when the delegator tries to undelegate all of their stake, their call to the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#on-line-287.-this-means-that-when-the-delegator-tries-to-undelegate-all-of-their-stake,-their-call-to-the", "labels": ["OpenZeppelin"]}, {"title": "on line 311, because the", "body": "on line 311, because the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#on-line-311,-because-the", "labels": ["OpenZeppelin"]}, {"title": "calls the _validateBalanceInternal function,", "body": "calls the _validateBalanceInternal function,", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#calls-the-_validatebalanceinternal-function,", "labels": ["OpenZeppelin"]}, {"title": "which requires that", "body": "which requires that", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#which-requires-that", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the ability for governance to upgrade or remove service types. Instead, consider indicating the version of the service type in the service type\u2019s name (e.g.: \"ServiceType1-v1\") and using a bool to flag whether the service type is still \u201cactive\u201d and can be registered by service providers.", "body": "Consider removing the ability for governance to upgrade or remove service types. Instead, consider indicating the version of the service type in the service type\u2019s name (e.g.: \"ServiceType1-v1\") and using a bool to flag whether the service type is still \u201cactive\u201d and can be registered by service providers.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-removing-the-ability-for-governance-to-upgrade-or-remove-service-types.-instead,-consider-indicating-the-version-of-the-service-type-in-the-service-type\u2019s-name-(e.g.:-\"servicetype1-v1\")-and-using-a-bool-to-flag-whether-the-service-type-is-still-\u201cactive\u201d-and-can-be-registered-by-service-providers.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #555. The ability to update an existing service type was removed.", "body": "Update: Fixed in pull request #555. The ability to update an existing service type was removed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#555.-the-ability-to-update-an-existing-service-type-was-removed.", "labels": ["OpenZeppelin"]}, {"title": "[C03] Proxy admin doesn\u2019t entirely cede upgrade control to governance address", "body": "[C03] Proxy admin doesn\u2019t entirely cede upgrade control to governance address", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[c03]-proxy-admin-doesn\u2019t-entirely-cede-upgrade-control-to-governance-address", "labels": ["OpenZeppelin"]}, {"title": "In the AudiusAdminUpgradeabilityProxy contract, the inline documentation states that the proxy admin cedes upgrades control to the governance address, which is achieved by overloading the upgradeTo function of the parent contracts.However, the contract does not overload the upgradeToAndCall function from the OpenZeppelin\u2019s BaseAdminUpgradeabilityProxy contract, allowing the deployer admin to bypass the governance and control the upgrades.", "body": "In the AudiusAdminUpgradeabilityProxy contract, the inline documentation states that the proxy admin cedes upgrades control to the governance address, which is achieved by overloading the upgradeTo function of the parent contracts.However, the contract does not overload the upgradeToAndCall function from the OpenZeppelin\u2019s BaseAdminUpgradeabilityProxy contract, allowing the deployer admin to bypass the governance and control the upgrades.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-audiusadminupgradeabilityproxy-contract,-the-inline-documentation-states-that-the-proxy-admin-cedes-upgrades-control-to-the-governance-address,-which-is-achieved-by-overloading-the-upgradeto-function-of-the-parent-contracts.however,-the-contract-does-not-overload-the-upgradetoandcall-function-from-the-openzeppelin\u2019s-baseadminupgradeabilityproxy-contract,-allowing-the-deployer-admin-to-bypass-the-governance-and-control-the-upgrades.", "labels": ["OpenZeppelin"]}, {"title": "This is dangerous, as it gives the admin\u2019s private key holder the possibility to upgrade the whole protocol without a proper governance\u2019s consent. Furthermore, if the private key gets leaked after the deployment, it will allow any third party to modify the Audius bytecode on-chain.", "body": "This is dangerous, as it gives the admin\u2019s private key holder the possibility to upgrade the whole protocol without a proper governance\u2019s consent. Furthermore, if the private key gets leaked after the deployment, it will allow any third party to modify the Audius bytecode on-chain.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-is-dangerous,-as-it-gives-the-admin\u2019s-private-key-holder-the-possibility-to-upgrade-the-whole-protocol-without-a-proper-governance\u2019s-consent.-furthermore,-if-the-private-key-gets-leaked-after-the-deployment,-it-will-allow-any-third-party-to-modify-the-audius-bytecode-on-chain.", "labels": ["OpenZeppelin"]}, {"title": "Consider modifying the current implementation to discard the upgrade permissions given to the admin address. Also, consider inheriting from a lower-level abstraction rather than overwriting existing functionality from a higher-level one. Finally, consider validating that the implementation contract does not have a signature clash with the proxy.", "body": "Consider modifying the current implementation to discard the upgrade permissions given to the admin address. Also, consider inheriting from a lower-level abstraction rather than overwriting existing functionality from a higher-level one. Finally, consider validating that the implementation contract does not have a signature clash with the proxy.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-modifying-the-current-implementation-to-discard-the-upgrade-permissions-given-to-the-admin-address.-also,-consider-inheriting-from-a-lower-level-abstraction-rather-than-overwriting-existing-functionality-from-a-higher-level-one.-finally,-consider-validating-that-the-implementation-contract-does-not-have-a-signature-clash-with-the-proxy.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #657.", "body": "Update: Fixed in pull request #657.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#657.", "labels": ["OpenZeppelin"]}, {"title": "[H01] A malicious delegator can prevent all other delegators from delegating", "body": "[H01] A malicious delegator can prevent all other delegators from delegating", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h01]-a-malicious-delegator-can-prevent-all-other-delegators-from-delegating", "labels": ["OpenZeppelin"]}, {"title": "All the delegators for a given service provider are stored in an array. These arrays are iterated over during various operations. In order to prevent these iterations from hitting the block gas limit, a maxDelegators value is set. Once a service provider gains this maximum number of delegators, no new delegators can delegate to that service provider. By default maxDelegators = 175.", "body": "All the delegators for a given service provider are stored in an array. These arrays are iterated over during various operations. In order to prevent these iterations from hitting the block gas limit, a maxDelegators value is set. Once a service provider gains this maximum number of delegators, no new delegators can delegate to that service provider. By default maxDelegators = 175.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#all-the-delegators-for-a-given-service-provider-are-stored-in-an-array.-these-arrays-are-iterated-over-during-various-operations.-in-order-to-prevent-these-iterations-from-hitting-the-block-gas-limit,-a-maxdelegators-value-is-set.-once-a-service-provider-gains-this-maximum-number-of-delegators,-no-new-delegators-can-delegate-to-that-service-provider.-by-default-maxdelegators-=-175.", "labels": ["OpenZeppelin"]}, {"title": "some minDelegationAmount. This", "body": "some minDelegationAmount. This", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#some-mindelegationamount.-this", "labels": ["OpenZeppelin"]}, {"title": "As a result of these two facts, an attacker can fill up all the delegator slots for a given service provider, thereby preventing any honest delegators from delegating to that service provider. They can do this for all service providers on the platform, thereby preventing any delegators from delegating.", "body": "As a result of these two facts, an attacker can fill up all the delegator slots for a given service provider, thereby preventing any honest delegators from delegating to that service provider. They can do this for all service providers on the platform, thereby preventing any delegators from delegating.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#as-a-result-of-these-two-facts,-an-attacker-can-fill-up-all-the-delegator-slots-for-a-given-service-provider,-thereby-preventing-any-honest-delegators-from-delegating-to-that-service-provider.-they-can-do-this-for-all-service-providers-on-the-platform,-thereby-preventing-any-delegators-from-delegating.", "labels": ["OpenZeppelin"]}, {"title": "This attack costs maxDelegators * [minDelegationAmount + 1e-18 * (N - 1)], which is approximately 17,500 AUD (using default values and ignoring dust amounts). To put this in perspective, this attack costs about 1.3% of one week\u2019s worth of AUD rewards.", "body": "This attack costs maxDelegators * [minDelegationAmount + 1e-18 * (N - 1)], which is approximately 17,500 AUD (using default values and ignoring dust amounts). To put this in perspective, this attack costs about 1.3% of one week\u2019s worth of AUD rewards.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-attack-costs-maxdelegators-*-[mindelegationamount-+-1e-18-*-(n---1)],-which-is-approximately-17,500-aud-(using-default-values-and-ignoring-dust-amounts).-to-put-this-in-perspective,-this-attack-costs-about-1.3%-of-one-week\u2019s-worth-of-aud-rewards.", "labels": ["OpenZeppelin"]}, {"title": "Consider having the minDelegationAmount be applied per service provider, rather than over all service providers. This would prevent a service provider\u2019s delegator slots from being filled by \u201cdust delegators\u201d.", "body": "Consider having the minDelegationAmount be applied per service provider, rather than over all service providers. This would prevent a service provider\u2019s delegator slots from being filled by \u201cdust delegators\u201d.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-having-the-mindelegationamount-be-applied-per-service-provider,-rather-than-over-all-service-providers.-this-would-prevent-a-service-provider\u2019s-delegator-slots-from-being-filled-by-\u201cdust-delegators\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #552.", "body": "Update: Fixed in pull request #552.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#552.", "labels": ["OpenZeppelin"]}, {"title": "[H02] Delegators can prevent service providers from deregistering endpoints", "body": "[H02] Delegators can prevent service providers from deregistering endpoints", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h02]-delegators-can-prevent-service-providers-from-deregistering-endpoints", "labels": ["OpenZeppelin"]}, {"title": "Under some conditions, delegators may prevent service providers from deregistering endpoints. This can happen innocently or maliciously.", "body": "Under some conditions, delegators may prevent service providers from deregistering endpoints. This can happen innocently or maliciously.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#under-some-conditions,-delegators-may-prevent-service-providers-from-deregistering-endpoints.-this-can-happen-innocently-or-maliciously.", "labels": ["OpenZeppelin"]}, {"title": "Consider the case where a service provider has registered more than one endpoint and that the service provider has staked the minimum amount of stake. Suppose delegators have delegated to this service provider the maximum amount of stake.", "body": "Consider the case where a service provider has registered more than one endpoint and that the service provider has staked the minimum amount of stake. Suppose delegators have delegated to this service provider the maximum amount of stake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-the-case-where-a-service-provider-has-registered-more-than-one-endpoint-and-that-the-service-provider-has-staked-the-minimum-amount-of-stake.-suppose-delegators-have-delegated-to-this-service-provider-the-maximum-amount-of-stake.", "labels": ["OpenZeppelin"]}, {"title": "When the service provider attempts to deregister one of the endpoints, their call to the deregister function may fail on line 300. This is because the _validateBalanceInternal function requires that _amount <= spDetails[_sp].maxAccountStake, which may not be true if enough stake has been delegated to the service provider.", "body": "When the service provider attempts to deregister one of the endpoints, their call to the deregister function may fail on line 300. This is because the _validateBalanceInternal function requires that _amount <= spDetails[_sp].maxAccountStake, which may not be true if enough stake has been delegated to the service provider.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-the-service-provider-attempts-to-deregister-one-of-the-endpoints,-their-call-to-the-deregister-function-may-fail-on-line-300.-this-is-because-the-_validatebalanceinternal-function-requires-that-_amount-<=-spdetails[_sp].maxaccountstake,-which-may-not-be-true-if-enough-stake-has-been-delegated-to-the-service-provider.", "labels": ["OpenZeppelin"]}, {"title": "Consider adjusting the logic of the deregister function to handle the case where Staking(stakingAddress).totalStakedFor(_sp) > maxAccountStake.", "body": "Consider adjusting the logic of the deregister function to handle the case where Staking(stakingAddress).totalStakedFor(_sp) > maxAccountStake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adjusting-the-logic-of-the-deregister-function-to-handle-the-case-where-staking(stakingaddress).totalstakedfor(_sp)->-maxaccountstake.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #570. The fix may introduce new attack vectors to the codebase. For example, in the removeDelegator function the stake of the delegator is unstaked instantly. This could allow a service provider to bypass a slashing process by using sybil delegators and then removing its delegated stake before the slash takes place. This will reduce the slashing punishment significantly. Consider modifying the removeDelegator function to set a timelock so the slashing mechanism cannot be bypassed in that way. Furthermore, allowing a service provider to call this function at anytime could introduce further incentive problems. To mitigate this, consider adding a requirement on the removeDelegator function so it can only be called if the sum of stakes for a service provider is bigger than spDetails[_sp].maxAccountStake.", "body": "Update: Partially fixed in pull request #570. The fix may introduce new attack vectors to the codebase. For example, in the removeDelegator function the stake of the delegator is unstaked instantly. This could allow a service provider to bypass a slashing process by using sybil delegators and then removing its delegated stake before the slash takes place. This will reduce the slashing punishment significantly. Consider modifying the removeDelegator function to set a timelock so the slashing mechanism cannot be bypassed in that way. Furthermore, allowing a service provider to call this function at anytime could introduce further incentive problems. To mitigate this, consider adding a requirement on the removeDelegator function so it can only be called if the sum of stakes for a service provider is bigger than spDetails[_sp].maxAccountStake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#570.-the-fix-may-introduce-new-attack-vectors-to-the-codebase.-for-example,-in-the-removedelegator-function-the-stake-of-the-delegator-is-unstaked-instantly.-this-could-allow-a-service-provider-to-bypass-a-slashing-process-by-using-sybil-delegators-and-then-removing-its-delegated-stake-before-the-slash-takes-place.-this-will-reduce-the-slashing-punishment-significantly.-consider-modifying-the-removedelegator-function-to-set-a-timelock-so-the-slashing-mechanism-cannot-be-bypassed-in-that-way.-furthermore,-allowing-a-service-provider-to-call-this-function-at-anytime-could-introduce-further-incentive-problems.-to-mitigate-this,-consider-adding-a-requirement-on-the-removedelegator-function-so-it-can-only-be-called-if-the-sum-of-stakes-for-a-service-provider-is-bigger-than-spdetails[_sp].maxaccountstake.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #657. The removeDelegator function now implements a timelock.", "body": "Update: Fixed in pull request #657. The removeDelegator function now implements a timelock.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#657.-the-removedelegator-function-now-implements-a-timelock.", "labels": ["OpenZeppelin"]}, {"title": "[H03] Updating the Governance registry and Guardian addresses emits no events", "body": "[H03] Updating the Governance registry and Guardian addresses emits no events", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h03]-updating-the-governance-registry-and-guardian-addresses-emits-no-events", "labels": ["OpenZeppelin"]}, {"title": "In the Governance contract the registryAddress and the guardianAddress are highly sensitive accounts. The first one holds the contracts that can be proposal targets, and the second one is a superuser account that can execute proposals without voting.", "body": "In the Governance contract the registryAddress and the guardianAddress are highly sensitive accounts. The first one holds the contracts that can be proposal targets, and the second one is a superuser account that can execute proposals without voting.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-governance-contract-the-registryaddress-and-the-guardianaddress-are-highly-sensitive-accounts.-the-first-one-holds-the-contracts-that-can-be-proposal-targets,-and-the-second-one-is-a-superuser-account-that-can-execute-proposals-without-voting.", "labels": ["OpenZeppelin"]}, {"title": "These variables can be updated by calling setRegistryAddress and transferGuardianship, respectively. Note that these two functions update these sensitive addresses without logging any events. Stakers who monitor the Audius system would have to inspect all transactions to notice that one address they trust is replaced with an untrusted one.", "body": "These variables can be updated by calling setRegistryAddress and transferGuardianship, respectively. Note that these two functions update these sensitive addresses without logging any events. Stakers who monitor the Audius system would have to inspect all transactions to notice that one address they trust is replaced with an untrusted one.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#these-variables-can-be-updated-by-calling-setregistryaddress-and-transferguardianship,-respectively.-note-that-these-two-functions-update-these-sensitive-addresses-without-logging-any-events.-stakers-who-monitor-the-audius-system-would-have-to-inspect-all-transactions-to-notice-that-one-address-they-trust-is-replaced-with-an-untrusted-one.", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting events when these addresses are updated. This will be more transparent, and it will make it easier for clients to subscribe to the events when they want to keep track of the status of the system.", "body": "Consider emitting events when these addresses are updated. This will be more transparent, and it will make it easier for clients to subscribe to the events when they want to keep track of the status of the system.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-emitting-events-when-these-addresses-are-updated.-this-will-be-more-transparent,-and-it-will-make-it-easier-for-clients-to-subscribe-to-the-events-when-they-want-to-keep-track-of-the-status-of-the-system.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #563.", "body": "Update: Fixed in pull request #563.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#563.", "labels": ["OpenZeppelin"]}, {"title": "[H04] No incentive for evaluating proposals with outcome other than Yes", "body": "[H04] No incentive for evaluating proposals with outcome other than Yes", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h04]-no-incentive-for-evaluating-proposals-with-outcome-other-than-yes", "labels": ["OpenZeppelin"]}, {"title": "After a voting period has ended, the evaluateProposalOutcome function of the Governance contract can be called to try to execute the target contract for proposals with a Yes quorum and to update the proposal state.", "body": "After a voting period has ended, the evaluateProposalOutcome function of the Governance contract can be called to try to execute the target contract for proposals with a Yes quorum and to update the proposal state.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#after-a-voting-period-has-ended,-the-evaluateproposaloutcome-function-of-the-governance-contract-can-be-called-to-try-to-execute-the-target-contract-for-proposals-with-a-yes-quorum-and-to-update-the-proposal-state.", "labels": ["OpenZeppelin"]}, {"title": "There is an incentive for approved proposals to be executed by their proposers or supporters. However, when a proposal does not reach the quorum (or is rejected), this function spends gas to update the state. It is unclear why a user would pay for this gas to clean up the proposals state. Since anybody can submit a proposal at any time, this could lead to many closed proposals with an outdated InProgress state. This could be confusing to voting interfaces which will have to inspect the proposal to check if they are actually open.", "body": "There is an incentive for approved proposals to be executed by their proposers or supporters. However, when a proposal does not reach the quorum (or is rejected), this function spends gas to update the state. It is unclear why a user would pay for this gas to clean up the proposals state. Since anybody can submit a proposal at any time, this could lead to many closed proposals with an outdated InProgress state. This could be confusing to voting interfaces which will have to inspect the proposal to check if they are actually open.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#there-is-an-incentive-for-approved-proposals-to-be-executed-by-their-proposers-or-supporters.-however,-when-a-proposal-does-not-reach-the-quorum-(or-is-rejected),-this-function-spends-gas-to-update-the-state.-it-is-unclear-why-a-user-would-pay-for-this-gas-to-clean-up-the-proposals-state.-since-anybody-can-submit-a-proposal-at-any-time,-this-could-lead-to-many-closed-proposals-with-an-outdated-inprogress-state.-this-could-be-confusing-to-voting-interfaces-which-will-have-to-inspect-the-proposal-to-check-if-they-are-actually-open.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding an incentive for the caller of the evaluateProposalOutcome function, so there are better guarantees that the state of the proposals will be up-to-date.", "body": "Consider adding an incentive for the caller of the evaluateProposalOutcome function, so there are better guarantees that the state of the proposals will be up-to-date.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adding-an-incentive-for-the-caller-of-the-evaluateproposaloutcome-function,-so-there-are-better-guarantees-that-the-state-of-the-proposals-will-be-up-to-date.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull requests #575 and #609. Now, before submitting a new proposal, the status of all the proposals that can be evaluated have to be up-to-date. Note that this could make it too expensive for somebody to send new proposals if they have to evaluate many old proposals. In this case, again, only the administrators might be incentivized to evaluate all the proposals in order to unblock the system. Also note that setting the maximum number of in-progress proposals emits no event.", "body": "Update: Fixed in pull requests #575 and #609. Now, before submitting a new proposal, the status of all the proposals that can be evaluated have to be up-to-date. Note that this could make it too expensive for somebody to send new proposals if they have to evaluate many old proposals. In this case, again, only the administrators might be incentivized to evaluate all the proposals in order to unblock the system. Also note that setting the maximum number of in-progress proposals emits no event.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-requests-#575-and-#609.-now,-before-submitting-a-new-proposal,-the-status-of-all-the-proposals-that-can-be-evaluated-have-to-be-up-to-date.-note-that-this-could-make-it-too-expensive-for-somebody-to-send-new-proposals-if-they-have-to-evaluate-many-old-proposals.-in-this-case,-again,-only-the-administrators-might-be-incentivized-to-evaluate-all-the-proposals-in-order-to-unblock-the-system.-also-note-that-setting-the-maximum-number-of-in-progress-proposals-emits-no-event.", "labels": ["OpenZeppelin"]}, {"title": "[H05] Rewards calculation is incorrect when the service provider has a pending \u201cdecrease stake\u201d request", "body": "[H05] Rewards calculation is incorrect when the service provider has a pending \u201cdecrease stake\u201d request", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h05]-rewards-calculation-is-incorrect-when-the-service-provider-has-a-pending-\u201cdecrease-stake\u201d-request", "labels": ["OpenZeppelin"]}, {"title": "DecreaseStakeRequest pending, the", "body": "DecreaseStakeRequest pending, the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#decreasestakerequest-pending,-the", "labels": ["OpenZeppelin"]}, {"title": "claimRewards function from the", "body": "claimRewards function from the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#claimrewards-function-from-the", "labels": ["OpenZeppelin"]}, {"title": "totalRewards value incorrectly (setting it too high). In particular, the", "body": "totalRewards value incorrectly (setting it too high). In particular, the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#totalrewards-value-incorrectly-(setting-it-too-high).-in-particular,-the", "labels": ["OpenZeppelin"]}, {"title": "This makes the ServiceProviderFactory and the DelegateManager contracts record incorrect (too high) values for the spDetails[_serviceProvider].deployerStake and delegateInfo[delegator][_serviceProvider], respectively. As a result, the staking contract may become insolvent, owing more tokens than it holds.", "body": "This makes the ServiceProviderFactory and the DelegateManager contracts record incorrect (too high) values for the spDetails[_serviceProvider].deployerStake and delegateInfo[delegator][_serviceProvider], respectively. As a result, the staking contract may become insolvent, owing more tokens than it holds.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-makes-the-serviceproviderfactory-and-the-delegatemanager-contracts-record-incorrect-(too-high)-values-for-the-spdetails[_serviceprovider].deployerstake-and-delegateinfo[delegator][_serviceprovider],-respectively.-as-a-result,-the-staking-contract-may-become-insolvent,-owing-more-tokens-than-it-holds.", "labels": ["OpenZeppelin"]}, {"title": "To see that the DelegateManager.claimRewards() function computes totalRewards incorrectly, first consider this code block. The totalRewards variable is computed using these variables, so we begin here.", "body": "To see that the DelegateManager.claimRewards() function computes totalRewards incorrectly, first consider this code block. The totalRewards variable is computed using these variables, so we begin here.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-see-that-the-delegatemanager.claimrewards()-function-computes-totalrewards-incorrectly,-first-consider-this-code-block.-the-totalrewards-variable-is-computed-using-these-variables,-so-we-begin-here.", "labels": ["OpenZeppelin"]}, {"title": "Looking at the _validateClaimRewards function, one can see that it first processes the claim, which mints into existence any rewards due, and stakes them for the service provider.", "body": "Looking at the _validateClaimRewards function, one can see that it first processes the claim, which mints into existence any rewards due, and stakes them for the service provider.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#looking-at-the-_validateclaimrewards-function,-one-can-see-that-it-first-processes-the-claim,-which-mints-into-existence-any-rewards-due,-and-stakes-them-for-the-service-provider.", "labels": ["OpenZeppelin"]}, {"title": "Then, the _totalBalanceInStaking, _totalBalanceInSPFactory, and _totalBalanceOutsideStaking variables are computed as follows:", "body": "Then, the _totalBalanceInStaking, _totalBalanceInSPFactory, and _totalBalanceOutsideStaking variables are computed as follows:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#then,-the-_totalbalanceinstaking,-_totalbalanceinspfactory,-and-_totalbalanceoutsidestaking-variables-are-computed-as-follows:", "labels": ["OpenZeppelin"]}, {"title": "The _totalBalanceInStaking variable gets set to Staking(stakingAddress).totalStakedFor(_serviceProvider), which, in this context, is equal to:", "body": "The _totalBalanceInStaking variable gets set to Staking(stakingAddress).totalStakedFor(_serviceProvider), which, in this context, is equal to:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-_totalbalanceinstaking-variable-gets-set-to-staking(stakingaddress).totalstakedfor(_serviceprovider),-which,-in-this-context,-is-equal-to:", "labels": ["OpenZeppelin"]}, {"title": "_totalBalanceInStaking = the amount of locked SP stake from before claimRewards was called + the amount of unlocked SP stake from before claimRewards was called + the amount of delegator stake from before claimRewards was called + any rewards just paid out by ClaimsManager.processClaim", "body": "_totalBalanceInStaking = the amount of locked SP stake from before claimRewards was called + the amount of unlocked SP stake from before claimRewards was called + the amount of delegator stake from before claimRewards was called + any rewards just paid out by ClaimsManager.processClaim", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_totalbalanceinstaking-=-the-amount-of-locked-sp-stake-from-before-claimrewards-was-called-+-the-amount-of-unlocked-sp-stake-from-before-claimrewards-was-called-+-the-amount-of-delegator-stake-from-before-claimrewards-was-called-+-any-rewards-just-paid-out-by-claimsmanager.processclaim", "labels": ["OpenZeppelin"]}, {"title": "Next, _totalBalanceInSPFactory is initially set to the total amount of stake (locked + unlocked) that the service provider has staked. Then on line 727 it is updated by subtracting away the amount of the service provider\u2019s locked stake. So _totalBalanceInSPFactory ends up being:", "body": "Next, _totalBalanceInSPFactory is initially set to the total amount of stake (locked + unlocked) that the service provider has staked. Then on line 727 it is updated by subtracting away the amount of the service provider\u2019s locked stake. So _totalBalanceInSPFactory ends up being:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#next,-_totalbalanceinspfactory-is-initially-set-to-the-total-amount-of-stake-(locked-+-unlocked)-that-the-service-provider-has-staked.-then-on-line-727-it-is-updated-by-subtracting-away-the-amount-of-the-service-provider\u2019s-locked-stake.-so-_totalbalanceinspfactory-ends-up-being:", "labels": ["OpenZeppelin"]}, {"title": "_totalBalanceInSPFactory = the amount of unlocked SP stake from before claimRewards was called", "body": "_totalBalanceInSPFactory = the amount of unlocked SP stake from before claimRewards was called", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_totalbalanceinspfactory-=-the-amount-of-unlocked-sp-stake-from-before-claimrewards-was-called", "labels": ["OpenZeppelin"]}, {"title": "Finally, _totalBalanceOutsideStaking gets set to _totalBalanceInSPFactory.add(spDelegateInfo[_serviceProvider].totalDelegatedStake). So we have:", "body": "Finally, _totalBalanceOutsideStaking gets set to _totalBalanceInSPFactory.add(spDelegateInfo[_serviceProvider].totalDelegatedStake). So we have:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#finally,-_totalbalanceoutsidestaking-gets-set-to-_totalbalanceinspfactory.add(spdelegateinfo[_serviceprovider].totaldelegatedstake).-so-we-have:", "labels": ["OpenZeppelin"]}, {"title": "_totalBalanceOutsideStaking = the amount of unlocked SP stake from before claimRewards was called + the amount of delegator stake from before claimRewards was called", "body": "_totalBalanceOutsideStaking = the amount of unlocked SP stake from before claimRewards was called + the amount of delegator stake from before claimRewards was called", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_totalbalanceoutsidestaking-=-the-amount-of-unlocked-sp-stake-from-before-claimrewards-was-called-+-the-amount-of-delegator-stake-from-before-claimrewards-was-called", "labels": ["OpenZeppelin"]}, {"title": "The totalRewards variable is computed as totalBalanceInStaking.sub(totalBalanceOutsideStaking), which, by substituting the above values and simplifying, is equal to:", "body": "The totalRewards variable is computed as totalBalanceInStaking.sub(totalBalanceOutsideStaking), which, by substituting the above values and simplifying, is equal to:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-totalrewards-variable-is-computed-as-totalbalanceinstaking.sub(totalbalanceoutsidestaking),-which,-by-substituting-the-above-values-and-simplifying,-is-equal-to:", "labels": ["OpenZeppelin"]}, {"title": "totalRewards = the amount of locked SP stake from before claimRewards was called + any rewards just paid out by ClaimsManager.processClaim", "body": "totalRewards = the amount of locked SP stake from before claimRewards was called + any rewards just paid out by ClaimsManager.processClaim", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#totalrewards-=-the-amount-of-locked-sp-stake-from-before-claimrewards-was-called-+-any-rewards-just-paid-out-by-claimsmanager.processclaim", "labels": ["OpenZeppelin"]}, {"title": "So if the service provider has any locked stake, then totalRewards will not accurately represent the amount of rewards that were paid out during the call to processClaim.", "body": "So if the service provider has any locked stake, then totalRewards will not accurately represent the amount of rewards that were paid out during the call to processClaim.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#so-if-the-service-provider-has-any-locked-stake,-then-totalrewards-will-not-accurately-represent-the-amount-of-rewards-that-were-paid-out-during-the-call-to-processclaim.", "labels": ["OpenZeppelin"]}, {"title": "Consider adjusting the processClaim function so that it directly returns the amount of rewards that it paid out. Then the totalRewards variable can be set directly equal to the processClaim function\u2019s return value instead of being computed indirectly. This has the additional benefit of reducing gas costs.", "body": "Consider adjusting the processClaim function so that it directly returns the amount of rewards that it paid out. Then the totalRewards variable can be set directly equal to the processClaim function\u2019s return value instead of being computed indirectly. This has the additional benefit of reducing gas costs.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adjusting-the-processclaim-function-so-that-it-directly-returns-the-amount-of-rewards-that-it-paid-out.-then-the-totalrewards-variable-can-be-set-directly-equal-to-the-processclaim-function\u2019s-return-value-instead-of-being-computed-indirectly.-this-has-the-additional-benefit-of-reducing-gas-costs.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #562. The Audius team noticed that, although there are two incorrect balance calculations when a stake decrease is pending, these two errors cancel each other out. The final comparison between what was minted and the internal record is correct. Consequently, we downgraded the severity of this issue to high. Now the processClaim function from the ClaimManager contract returns the minted rewards for the service provider directly. Note that the calculation is still complex and could be refactored for clarity. Audius\u2019 statement for this issue:", "body": "Update: Fixed in pull request #562. The Audius team noticed that, although there are two incorrect balance calculations when a stake decrease is pending, these two errors cancel each other out. The final comparison between what was minted and the internal record is correct. Consequently, we downgraded the severity of this issue to high. Now the processClaim function from the ClaimManager contract returns the minted rewards for the service provider directly. Note that the calculation is still complex and could be refactored for clarity. Audius\u2019 statement for this issue:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#562.-the-audius-team-noticed-that,-although-there-are-two-incorrect-balance-calculations-when-a-stake-decrease-is-pending,-these-two-errors-cancel-each-other-out.-the-final-comparison-between-what-was-minted-and-the-internal-record-is-correct.-consequently,-we-downgraded-the-severity-of-this-issue-to-high.-now-the-processclaim-function-from-the-claimmanager-contract-returns-the-minted-rewards-for-the-service-provider-directly.-note-that-the-calculation-is-still-complex-and-could-be-refactored-for-clarity.-audius\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "Summary: During rewards calculation, a pending decrease stake request results in a value for totalRewards that is incorrect \u2013 by the amount of requested decrease in stake. Further analysis into the issue exposed an even more interesting behavior, confirming that value for totalRewards is incorrect but also showing that the final value set for a claimer in ServiceProviderFactory is not higher than expected. This is because our base value for the new Service Provider stake is also skewed but in the opposite direction during calculation of the new Service Provider stake.", "body": "Summary: During rewards calculation, a pending decrease stake request results in a value for totalRewards that is incorrect \u2013 by the amount of requested decrease in stake. Further analysis into the issue exposed an even more interesting behavior, confirming that value for totalRewards is incorrect but also showing that the final value set for a claimer in ServiceProviderFactory is not higher than expected. This is because our base value for the new Service Provider stake is also skewed but in the opposite direction during calculation of the new Service Provider stake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#summary:-during-rewards-calculation,-a-pending-decrease-stake-request-results-in-a-value-for-totalrewards-that-is-incorrect-\u2013-by-the-amount-of-requested-decrease-in-stake.-further-analysis-into-the-issue-exposed-an-even-more-interesting-behavior,-confirming-that-value-for-totalrewards-is-incorrect-but-also-showing-that-the-final-value-set-for-a-claimer-in-serviceproviderfactory-is-not-higher-than-expected.-this-is-because-our-base-value-for-the-new-service-provider-stake-is-also-skewed-but-in-the-opposite-direction-during-calculation-of-the-new-service-provider-stake.", "labels": ["OpenZeppelin"]}, {"title": "For this reason we would like to consider re-classifying the issue from Critical to High \u2013 rewards are neither minted incorrectly nor distributed incorrectly, but tracked incorrectly during the process of claiming.", "body": "For this reason we would like to consider re-classifying the issue from Critical to High \u2013 rewards are neither minted incorrectly nor distributed incorrectly, but tracked incorrectly during the process of claiming.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-this-reason-we-would-like-to-consider-re-classifying-the-issue-from-critical-to-high-\u2013-rewards-are-neither-minted-incorrectly-nor-distributed-incorrectly,-but-tracked-incorrectly-during-the-process-of-claiming.", "labels": ["OpenZeppelin"]}, {"title": "Interestingly enough, we already have a test case to cover reward distribution when a decrease stake request is pending. However this was passing due to the described condition above.", "body": "Interestingly enough, we already have a test case to cover reward distribution when a decrease stake request is pending. However this was passing due to the described condition above.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#interestingly-enough,-we-already-have-a-test-case-to-cover-reward-distribution-when-a-decrease-stake-request-is-pending.-however-this-was-passing-due-to-the-described-condition-above.", "labels": ["OpenZeppelin"]}, {"title": "[H06] AUD lending market could affect the protocol", "body": "[H06] AUD lending market could affect the protocol", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h06]-aud-lending-market-could-affect-the-protocol", "labels": ["OpenZeppelin"]}, {"title": "In case an AUD token lending market appears, an attacker could use this market to influence the result of a governance\u2019s proposal, which could lead to a take over of the protocol.", "body": "In case an AUD token lending market appears, an attacker could use this market to influence the result of a governance\u2019s proposal, which could lead to a take over of the protocol.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-case-an-aud-token-lending-market-appears,-an-attacker-could-use-this-market-to-influence-the-result-of-a-governance\u2019s-proposal,-which-could-lead-to-a-take-over-of-the-protocol.", "labels": ["OpenZeppelin"]}, {"title": "An attacker would only need to stake tokens for a brief moment without waiting for the votingPeriod to request an unstake. This aggravates the attack, as the attacker would only need to take a loan for the number of blocks established by the decreaseStakeLockupDuration variable.", "body": "An attacker would only need to stake tokens for a brief moment without waiting for the votingPeriod to request an unstake. This aggravates the attack, as the attacker would only need to take a loan for the number of blocks established by the decreaseStakeLockupDuration variable.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#an-attacker-would-only-need-to-stake-tokens-for-a-brief-moment-without-waiting-for-the-votingperiod-to-request-an-unstake.-this-aggravates-the-attack,-as-the-attacker-would-only-need-to-take-a-loan-for-the-number-of-blocks-established-by-the-decreasestakelockupduration-variable.", "labels": ["OpenZeppelin"]}, {"title": "The only prerequisite that an attacker needs for this attack is to have sufficient collateral, which could be trivial if a lending market of AUD tokens exists while AUD price is still low enough.", "body": "The only prerequisite that an attacker needs for this attack is to have sufficient collateral, which could be trivial if a lending market of AUD tokens exists while AUD price is still low enough.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-only-prerequisite-that-an-attacker-needs-for-this-attack-is-to-have-sufficient-collateral,-which-could-be-trivial-if-a-lending-market-of-aud-tokens-exists-while-aud-price-is-still-low-enough.", "labels": ["OpenZeppelin"]}, {"title": "Consider countermeasures for these type of attacks, and have plan for how to react when a lending market for AUD is created.", "body": "Consider countermeasures for these type of attacks, and have plan for how to react when a lending market for AUD is created.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-countermeasures-for-these-type-of-attacks,-and-have-plan-for-how-to-react-when-a-lending-market-for-aud-is-created.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. As described in the updates of \u201c[H08] Endpoint registration can be frontrun\u201d and \u201c[H09] Slash process can be bypassed\u201d, decreaseStakeLockupDuration is already significantly larger than votingPeriod + executionDelay. Audius\u2019s statement about this issue:", "body": "Update: Fixed. As described in the updates of \u201c[H08] Endpoint registration can be frontrun\u201d and \u201c[H09] Slash process can be bypassed\u201d, decreaseStakeLockupDuration is already significantly larger than votingPeriod + executionDelay. Audius\u2019s statement about this issue:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed.-as-described-in-the-updates-of-\u201c[h08]-endpoint-registration-can-be-frontrun\u201d-and-\u201c[h09]-slash-process-can-be-bypassed\u201d,-decreasestakelockupduration-is-already-significantly-larger-than-votingperiod-+-executiondelay.-audius\u2019s-statement-about-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "The above is no longer possible with our enforced relationship between decreaseStakeLockup and votingPeriod + delay. An attacker may still stake tokens immediately prior to a proposal, but the relationship between the two variables means they are still subject to a slash operation. This is because an attacker cannot unstake without waiting at at least one votingPeriod + executionDelay time difference.", "body": "The above is no longer possible with our enforced relationship between decreaseStakeLockup and votingPeriod + delay. An attacker may still stake tokens immediately prior to a proposal, but the relationship between the two variables means they are still subject to a slash operation. This is because an attacker cannot unstake without waiting at at least one votingPeriod + executionDelay time difference.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-above-is-no-longer-possible-with-our-enforced-relationship-between-decreasestakelockup-and-votingperiod-+-delay.-an-attacker-may-still-stake-tokens-immediately-prior-to-a-proposal,-but-the-relationship-between-the-two-variables-means-they-are-still-subject-to-a-slash-operation.-this-is-because-an-attacker-cannot-unstake-without-waiting-at-at-least-one-votingperiod-+-executiondelay-time-difference.", "labels": ["OpenZeppelin"]}, {"title": "[H07] The quorum requirement can be trivially bypassed with sybil accounts", "body": "[H07] The quorum requirement can be trivially bypassed with sybil accounts", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h07]-the-quorum-requirement-can-be-trivially-bypassed-with-sybil-accounts", "labels": ["OpenZeppelin"]}, {"title": "While the final vote on a proposal is determined via a token-weighted vote, the quorum check in the evaluateProposalOutcome function can be trivially bypassed by splitting one\u2019s tokens over multiple accounts and voting with each of the accounts. Each of these sybil votes increases the proposals[_proposalId].numVotes variable. This means anyone can make the quorum check pass.", "body": "While the final vote on a proposal is determined via a token-weighted vote, the quorum check in the evaluateProposalOutcome function can be trivially bypassed by splitting one\u2019s tokens over multiple accounts and voting with each of the accounts. Each of these sybil votes increases the proposals[_proposalId].numVotes variable. This means anyone can make the quorum check pass.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#while-the-final-vote-on-a-proposal-is-determined-via-a-token-weighted-vote,-the-quorum-check-in-the-evaluateproposaloutcome-function-can-be-trivially-bypassed-by-splitting-one\u2019s-tokens-over-multiple-accounts-and-voting-with-each-of-the-accounts.-each-of-these-sybil-votes-increases-the-proposals[_proposalid].numvotes-variable.-this-means-anyone-can-make-the-quorum-check-pass.", "labels": ["OpenZeppelin"]}, {"title": "Consider measuring quorum size by the percentage of existing tokens that have voted, rather than the number of unique accounts that have voted.", "body": "Consider measuring quorum size by the percentage of existing tokens that have voted, rather than the number of unique accounts that have voted.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-measuring-quorum-size-by-the-percentage-of-existing-tokens-that-have-voted,-rather-than-the-number-of-unique-accounts-that-have-voted.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #574. However, note that the setVotingQuorumPercent function is not validating that the value set is between 0 and 100.", "body": "Update: Fixed in pull request #574. However, note that the setVotingQuorumPercent function is not validating that the value set is between 0 and 100.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#574.-however,-note-that-the-setvotingquorumpercent-function-is-not-validating-that-the-value-set-is-between-0-and-100.", "labels": ["OpenZeppelin"]}, {"title": "[H08] Endpoint registration can be frontrun", "body": "[H08] Endpoint registration can be frontrun", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h08]-endpoint-registration-can-be-frontrun", "labels": ["OpenZeppelin"]}, {"title": "An honest service provider\u2019s call to the ServiceProviderFactory.register function can be frontrun by a malicious actor in order to prevent any honest user from being able to register any endpoint.", "body": "An honest service provider\u2019s call to the ServiceProviderFactory.register function can be frontrun by a malicious actor in order to prevent any honest user from being able to register any endpoint.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#an-honest-service-provider\u2019s-call-to-the-serviceproviderfactory.register-function-can-be-frontrun-by-a-malicious-actor-in-order-to-prevent-any-honest-user-from-being-able-to-register-any-endpoint.", "labels": ["OpenZeppelin"]}, {"title": "The attacker can monitor the mempool for any calls to the register function, then frontrun them with their own call to the register function using the same _endpoint parameter.", "body": "The attacker can monitor the mempool for any calls to the register function, then frontrun them with their own call to the register function using the same _endpoint parameter.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-attacker-can-monitor-the-mempool-for-any-calls-to-the-register-function,-then-frontrun-them-with-their-own-call-to-the-register-function-using-the-same-_endpoint-parameter.", "labels": ["OpenZeppelin"]}, {"title": "This registers the endpoint under the attacker\u2019s account so that the honest user\u2019s attempt to register their endpoint will fail on line 163.", "body": "This registers the endpoint under the attacker\u2019s account so that the honest user\u2019s attempt to register their endpoint will fail on line 163.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-registers-the-endpoint-under-the-attacker\u2019s-account-so-that-the-honest-user\u2019s-attempt-to-register-their-endpoint-will-fail-on-line-163.", "labels": ["OpenZeppelin"]}, {"title": "There is a cost to this attack. In particular, the attacker must stake the minStake or else line 199 will revert. This stake may be at risk of being slashed until the attacker has deregistered the endpoint and removed their stake. Since it takes at least ten blocks for an attacker to remove their stake after deregistering an endpoint, there is a window of opportunity for governance to slash the attacker. However, given the nature of the attack, it is not clear that it could be detected and punished within the ten blocks (about 2.5 minutes) lockup duration.", "body": "There is a cost to this attack. In particular, the attacker must stake the minStake or else line 199 will revert. This stake may be at risk of being slashed until the attacker has deregistered the endpoint and removed their stake. Since it takes at least ten blocks for an attacker to remove their stake after deregistering an endpoint, there is a window of opportunity for governance to slash the attacker. However, given the nature of the attack, it is not clear that it could be detected and punished within the ten blocks (about 2.5 minutes) lockup duration.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#there-is-a-cost-to-this-attack.-in-particular,-the-attacker-must-stake-the-minstake-or-else-line-199-will-revert.-this-stake-may-be-at-risk-of-being-slashed-until-the-attacker-has-deregistered-the-endpoint-and-removed-their-stake.-since-it-takes-at-least-ten-blocks-for-an-attacker-to-remove-their-stake-after-deregistering-an-endpoint,-there-is-a-window-of-opportunity-for-governance-to-slash-the-attacker.-however,-given-the-nature-of-the-attack,-it-is-not-clear-that-it-could-be-detected-and-punished-within-the-ten-blocks-(about-2.5-minutes)-lockup-duration.", "labels": ["OpenZeppelin"]}, {"title": "If minStake is small enough and/or the probability of getting detected and slashed is low enough, then this attack would have a low expected cost. Since these are currently unknowns, it is conservative to classify this issue as high severity.", "body": "If minStake is small enough and/or the probability of getting detected and slashed is low enough, then this attack would have a low expected cost. Since these are currently unknowns, it is conservative to classify this issue as high severity.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-minstake-is-small-enough-and/or-the-probability-of-getting-detected-and-slashed-is-low-enough,-then-this-attack-would-have-a-low-expected-cost.-since-these-are-currently-unknowns,-it-is-conservative-to-classify-this-issue-as-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "To prevent a malicious service provider to register another service provider\u2019s endpoint first, consider hashing the endpoint and the service provider\u2019s address (msg.sender) together to create the endpoint\u2019s bytes32 identifier and then use it in a commit/reveal scheme during the registration process.", "body": "To prevent a malicious service provider to register another service provider\u2019s endpoint first, consider hashing the endpoint and the service provider\u2019s address (msg.sender) together to create the endpoint\u2019s bytes32 identifier and then use it in a commit/reveal scheme during the registration process.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-prevent-a-malicious-service-provider-to-register-another-service-provider\u2019s-endpoint-first,-consider-hashing-the-endpoint-and-the-service-provider\u2019s-address-(msg.sender)-together-to-create-the-endpoint\u2019s-bytes32-identifier-and-then-use-it-in-a-commit/reveal-scheme-during-the-registration-process.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request # 573, where the lockup period was changed from 10 blocks to 1 week. While the registration process may still be frontrun, there will be enough time for such behavior to be detected and punished via slashing.", "body": "Update: Fixed in pull request # 573, where the lockup period was changed from 10 blocks to 1 week. While the registration process may still be frontrun, there will be enough time for such behavior to be detected and punished via slashing.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#-573,-where-the-lockup-period-was-changed-from-10-blocks-to-1-week.-while-the-registration-process-may-still-be-frontrun,-there-will-be-enough-time-for-such-behavior-to-be-detected-and-punished-via-slashing.", "labels": ["OpenZeppelin"]}, {"title": "[H09] Slash process can be bypassed", "body": "[H09] Slash process can be bypassed", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h09]-slash-process-can-be-bypassed", "labels": ["OpenZeppelin"]}, {"title": "There are two ways for any address to be slashed. The first one is by a governance\u2019s proposal, and the second one is by a transaction performed by the guardian.", "body": "There are two ways for any address to be slashed. The first one is by a governance\u2019s proposal, and the second one is by a transaction performed by the guardian.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#there-are-two-ways-for-any-address-to-be-slashed.-the-first-one-is-by-a-governance\u2019s-proposal,-and-the-second-one-is-by-a-transaction-performed-by-the-guardian.", "labels": ["OpenZeppelin"]}, {"title": "For governance to decide to slash a service provider, a proposal must be submitted to the contract, stakers must vote on it and achieve a majority, and then it has to be executed. This process takes several blocks to complete.", "body": "For governance to decide to slash a service provider, a proposal must be submitted to the contract, stakers must vote on it and achieve a majority, and then it has to be executed. This process takes several blocks to complete.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-governance-to-decide-to-slash-a-service-provider,-a-proposal-must-be-submitted-to-the-contract,-stakers-must-vote-on-it-and-achieve-a-majority,-and-then-it-has-to-be-executed.-this-process-takes-several-blocks-to-complete.", "labels": ["OpenZeppelin"]}, {"title": "The votingPeriod establishes how long a governance proposal is open for voting.", "body": "The votingPeriod establishes how long a governance proposal is open for voting.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-votingperiod-establishes-how-long-a-governance-proposal-is-open-for-voting.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, the decreaseStakeLockupDuration variable establishes the minimum length of time a service provider must wait before removing their stake.", "body": "Similarly, the decreaseStakeLockupDuration variable establishes the minimum length of time a service provider must wait before removing their stake.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#similarly,-the-decreasestakelockupduration-variable-establishes-the-minimum-length-of-time-a-service-provider-must-wait-before-removing-their-stake.", "labels": ["OpenZeppelin"]}, {"title": "If decreaseStakeLockupDuration is less than or equal to the votingPeriod, it will be possible for a malicious service provider to remove their stake before it can be slashed by the Governance protocol.", "body": "If decreaseStakeLockupDuration is less than or equal to the votingPeriod, it will be possible for a malicious service provider to remove their stake before it can be slashed by the Governance protocol.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-decreasestakelockupduration-is-less-than-or-equal-to-the-votingperiod,-it-will-be-possible-for-a-malicious-service-provider-to-remove-their-stake-before-it-can-be-slashed-by-the-governance-protocol.", "labels": ["OpenZeppelin"]}, {"title": "Since the guardian is expected to be removed once the system is fully operational \u2014 meaning that slashing a malicious service provider using the guardian account will not be possible \u2014 consider setting the decreaseStakeLockupDuration so it is much greater than the votingPeriod. This would ensure that a malicious service provider can always be slashed via governance.", "body": "Since the guardian is expected to be removed once the system is fully operational \u2014 meaning that slashing a malicious service provider using the guardian account will not be possible \u2014 consider setting the decreaseStakeLockupDuration so it is much greater than the votingPeriod. This would ensure that a malicious service provider can always be slashed via governance.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#since-the-guardian-is-expected-to-be-removed-once-the-system-is-fully-operational-\u2014-meaning-that-slashing-a-malicious-service-provider-using-the-guardian-account-will-not-be-possible-\u2014-consider-setting-the-decreasestakelockupduration-so-it-is-much-greater-than-the-votingperiod.-this-would-ensure-that-a-malicious-service-provider-can-always-be-slashed-via-governance.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #657. The _updateDecreaseStakeLockupDuration function enforces that the decreaseStakeLockupDuration value is greater than the voting period plus an execution delay.", "body": "Update: Fixed in pull request #657. The _updateDecreaseStakeLockupDuration function enforces that the decreaseStakeLockupDuration value is greater than the voting period plus an execution delay.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#657.-the-_updatedecreasestakelockupduration-function-enforces-that-the-decreasestakelockupduration-value-is-greater-than-the-voting-period-plus-an-execution-delay.", "labels": ["OpenZeppelin"]}, {"title": "[H10] A service provider can deceive its delegators", "body": "[H10] A service provider can deceive its delegators", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h10]-a-service-provider-can-deceive-its-delegators", "labels": ["OpenZeppelin"]}, {"title": "Service providers can earn AUD tokens by allowing delegators to delegate their stake into its account. The deployerCut value establishes the percentage of the rewards that the service provider collects from the delegators\u2019 rewards after each round.", "body": "Service providers can earn AUD tokens by allowing delegators to delegate their stake into its account. The deployerCut value establishes the percentage of the rewards that the service provider collects from the delegators\u2019 rewards after each round.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#service-providers-can-earn-aud-tokens-by-allowing-delegators-to-delegate-their-stake-into-its-account.-the-deployercut-value-establishes-the-percentage-of-the-rewards-that-the-service-provider-collects-from-the-delegators\u2019-rewards-after-each-round.", "labels": ["OpenZeppelin"]}, {"title": "A service provider can modify the deployerCut variable by calling the updateServiceProviderCut function at any time. It is also possible for them to even set it as 100, which would mean that delegators will not get rewards after the funding round has been completed.", "body": "A service provider can modify the deployerCut variable by calling the updateServiceProviderCut function at any time. It is also possible for them to even set it as 100, which would mean that delegators will not get rewards after the funding round has been completed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#a-service-provider-can-modify-the-deployercut-variable-by-calling-the-updateserviceprovidercut-function-at-any-time.-it-is-also-possible-for-them-to-even-set-it-as-100,-which-would-mean-that-delegators-will-not-get-rewards-after-the-funding-round-has-been-completed.", "labels": ["OpenZeppelin"]}, {"title": "If a service provider makes use of this function just before executing the claimRewards function from the DelegateManager contract, delegators will receive fewer or no rewards from that round, contrary to what they initially expected.", "body": "If a service provider makes use of this function just before executing the claimRewards function from the DelegateManager contract, delegators will receive fewer or no rewards from that round, contrary to what they initially expected.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-a-service-provider-makes-use-of-this-function-just-before-executing-the-claimrewards-function-from-the-delegatemanager-contract,-delegators-will-receive-fewer-or-no-rewards-from-that-round,-contrary-to-what-they-initially-expected.", "labels": ["OpenZeppelin"]}, {"title": "Consider requiring that a change to the deployerCut variable undergoes a timelock for a period of time greater than the fundingRoundBlockDiff value. This would allow delegators to have enough time to move their stake to another service provider.", "body": "Consider requiring that a change to the deployerCut variable undergoes a timelock for a period of time greater than the fundingRoundBlockDiff value. This would allow delegators to have enough time to move their stake to another service provider.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-requiring-that-a-change-to-the-deployercut-variable-undergoes-a-timelock-for-a-period-of-time-greater-than-the-fundingroundblockdiff-value.-this-would-allow-delegators-to-have-enough-time-to-move-their-stake-to-another-service-provider.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #657. Adjusting the deployerCut value now requires waiting for a timelock.", "body": "Update: Fixed in pull request #657. Adjusting the deployerCut value now requires waiting for a timelock.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#657.-adjusting-the-deployercut-value-now-requires-waiting-for-a-timelock.", "labels": ["OpenZeppelin"]}, {"title": "[H11] A service provider can prevent their delegators from undelegating their stake", "body": "[H11] A service provider can prevent their delegators from undelegating their stake", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h11]-a-service-provider-can-prevent-their-delegators-from-undelegating-their-stake", "labels": ["OpenZeppelin"]}, {"title": "A service provider can prevent their delegators from undelegating their stake. This may happen maliciously or unintentionally, as follows.", "body": "A service provider can prevent their delegators from undelegating their stake. This may happen maliciously or unintentionally, as follows.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#a-service-provider-can-prevent-their-delegators-from-undelegating-their-stake.-this-may-happen-maliciously-or-unintentionally,-as-follows.", "labels": ["OpenZeppelin"]}, {"title": "Suppose a service provider has registered one or more endpoints and has staked the minimum amount of required stake. Then suppose one or more delegators have collectively staked an additional X tokens for this service provider, where X <= spDetails[_sp].minAccountStake - minDeployerStake, so that totalStakedFor(_sp) = spDetails[_sp].minAccountStake + X.", "body": "Suppose a service provider has registered one or more endpoints and has staked the minimum amount of required stake. Then suppose one or more delegators have collectively staked an additional X tokens for this service provider, where X <= spDetails[_sp].minAccountStake - minDeployerStake, so that totalStakedFor(_sp) = spDetails[_sp].minAccountStake + X.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#suppose-a-service-provider-has-registered-one-or-more-endpoints-and-has-staked-the-minimum-amount-of-required-stake.-then-suppose-one-or-more-delegators-have-collectively-staked-an-additional-x-tokens-for-this-service-provider,-where-x-<=-spdetails[_sp].minaccountstake---mindeployerstake,-so-that-totalstakedfor(_sp)-=-spdetails[_sp].minaccountstake-+-x.", "labels": ["OpenZeppelin"]}, {"title": "Next, consider what happens if the service provider decreases its stake by X:", "body": "Next, consider what happens if the service provider decreases its stake by X:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#next,-consider-what-happens-if-the-service-provider-decreases-its-stake-by-x:", "labels": ["OpenZeppelin"]}, {"title": "The service provider\u2019s call to the requestDecreaseStake function will succeed, because the call to the _validateBalanceInternal function will not revert (all three require statements will be satisfied).", "body": "The service provider\u2019s call to the requestDecreaseStake function will succeed, because the call to the _validateBalanceInternal function will not revert (all three require statements will be satisfied).", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-service-provider\u2019s-call-to-the-requestdecreasestake-function-will-succeed,-because-the-call-to-the-_validatebalanceinternal-function-will-not-revert-(all-three-require-statements-will-be-satisfied).", "labels": ["OpenZeppelin"]}, {"title": "Their subsequent call to the decreaseStake function will succeed for the same reason.", "body": "Their subsequent call to the decreaseStake function will succeed for the same reason.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#their-subsequent-call-to-the-decreasestake-function-will-succeed-for-the-same-reason.", "labels": ["OpenZeppelin"]}, {"title": "At this point, totalStakedFor(_sp) = spDetails[_sp].minAccountStake. This means that any attempt by a delegator to undelegate a positive number of tokens via the undelegateStake function will revert on line 311, because the first require statement in the _validateBalanceInternal function will not be satisfied.", "body": "At this point, totalStakedFor(_sp) = spDetails[_sp].minAccountStake. This means that any attempt by a delegator to undelegate a positive number of tokens via the undelegateStake function will revert on line 311, because the first require statement in the _validateBalanceInternal function will not be satisfied.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#at-this-point,-totalstakedfor(_sp)-=-spdetails[_sp].minaccountstake.-this-means-that-any-attempt-by-a-delegator-to-undelegate-a-positive-number-of-tokens-via-the-undelegatestake-function-will-revert-on-line-311,-because-the-first-require-statement-in-the-_validatebalanceinternal-function-will-not-be-satisfied.", "labels": ["OpenZeppelin"]}, {"title": "Consider requiring that spDetails[_sp].deployerStake >= spDetails[_sp].minAccountStake when validating balances. This would put the burden of maintaining the minAccountStake on the service provider, thus removing this vulnerability.", "body": "Consider requiring that spDetails[_sp].deployerStake >= spDetails[_sp].minAccountStake when validating balances. This would put the burden of maintaining the minAccountStake on the service provider, thus removing this vulnerability.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-requiring-that-spdetails[_sp].deployerstake->=-spdetails[_sp].minaccountstake-when-validating-balances.-this-would-put-the-burden-of-maintaining-the-minaccountstake-on-the-service-provider,-thus-removing-this-vulnerability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #577. Now the minimum stake for a service provider must come from the service provider itself instead of using the delegators\u2019 stake. Nevertheless, if governance decides to slash a service provider and its staked balance ends up between 0 < SPBalance < spDetails[_sp].minAccountStake, the delegators for that service provider will not be able to undelegate their stake. That way, the malicious service provider could stake only spDetails[_sp].minAccountStake, handle a bigger delegated stake value, and perform a malicious action that will be slashed to prevent delegators from undelegating when the new requirement reverts.", "body": "Update: Partially fixed in pull request #577. Now the minimum stake for a service provider must come from the service provider itself instead of using the delegators\u2019 stake. Nevertheless, if governance decides to slash a service provider and its staked balance ends up between 0 < SPBalance < spDetails[_sp].minAccountStake, the delegators for that service provider will not be able to undelegate their stake. That way, the malicious service provider could stake only spDetails[_sp].minAccountStake, handle a bigger delegated stake value, and perform a malicious action that will be slashed to prevent delegators from undelegating when the new requirement reverts.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#577.-now-the-minimum-stake-for-a-service-provider-must-come-from-the-service-provider-itself-instead-of-using-the-delegators\u2019-stake.-nevertheless,-if-governance-decides-to-slash-a-service-provider-and-its-staked-balance-ends-up-between-0-<-spbalance-<-spdetails[_sp].minaccountstake,-the-delegators-for-that-service-provider-will-not-be-able-to-undelegate-their-stake.-that-way,-the-malicious-service-provider-could-stake-only-spdetails[_sp].minaccountstake,-handle-a-bigger-delegated-stake-value,-and-perform-a-malicious-action-that-will-be-slashed-to-prevent-delegators-from-undelegating-when-the-new-requirement-reverts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #657. The undelegateStake function no longer calls the validateAccountStakeBalance function.", "body": "Update: Fixed in pull request #657. The undelegateStake function no longer calls the validateAccountStakeBalance function.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#657.-the-undelegatestake-function-no-longer-calls-the-validateaccountstakebalance-function.", "labels": ["OpenZeppelin"]}, {"title": "[H12] Unresponsive service provider locks delegator stake", "body": "[H12] Unresponsive service provider locks delegator stake", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[h12]-unresponsive-service-provider-locks-delegator-stake", "labels": ["OpenZeppelin"]}, {"title": "A service provider may become unresponsive (e.g., by losing their keys, dying, etc.). If this happens, the service provider will not call the claimRewards function. After one week the _claimPending function will always return true. So delegators will not be able to undelegate their stake because the undelegateStake function will revert on line 252.", "body": "A service provider may become unresponsive (e.g., by losing their keys, dying, etc.). If this happens, the service provider will not call the claimRewards function. After one week the _claimPending function will always return true. So delegators will not be able to undelegate their stake because the undelegateStake function will revert on line 252.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#a-service-provider-may-become-unresponsive-(e.g.,-by-losing-their-keys,-dying,-etc.).-if-this-happens,-the-service-provider-will-not-call-the-claimrewards-function.-after-one-week-the-_claimpending-function-will-always-return-true.-so-delegators-will-not-be-able-to-undelegate-their-stake-because-the-undelegatestake-function-will-revert-on-line-252.", "labels": ["OpenZeppelin"]}, {"title": "Consider refactoring the claimRewards function to allow anyone can call it \u2014 passing in a service provider address as a parameter. This way, the rewards-claiming process can be moved forward by anyone, not just the service provider. This would protect delegators from an unresponsive service provider.", "body": "Consider refactoring the claimRewards function to allow anyone can call it \u2014 passing in a service provider address as a parameter. This way, the rewards-claiming process can be moved forward by anyone, not just the service provider. This would protect delegators from an unresponsive service provider.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-refactoring-the-claimrewards-function-to-allow-anyone-can-call-it-\u2014-passing-in-a-service-provider-address-as-a-parameter.-this-way,-the-rewards-claiming-process-can-be-moved-forward-by-anyone,-not-just-the-service-provider.-this-would-protect-delegators-from-an-unresponsive-service-provider.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #556.", "body": "Update: Fixed in pull request #556.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#556.", "labels": ["OpenZeppelin"]}, {"title": "[M01] Complicated state updates", "body": "[M01] Complicated state updates", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m01]-complicated-state-updates", "labels": ["OpenZeppelin"]}, {"title": "delegateStake,", "body": "delegateStake,", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#delegatestake,", "labels": ["OpenZeppelin"]}, {"title": "requestUndelegateStake,", "body": "requestUndelegateStake,", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#requestundelegatestake,", "labels": ["OpenZeppelin"]}, {"title": "cancelUndelegateStake,", "body": "cancelUndelegateStake,", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#cancelundelegatestake,", "labels": ["OpenZeppelin"]}, {"title": "undelegateStake, and", "body": "undelegateStake, and", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#undelegatestake,-and", "labels": ["OpenZeppelin"]}, {"title": "slash), multiple operations are executed to increase or decrease the values of the state variables related to the updated stake status. This is error prone, as shown by the critical issue", "body": "slash), multiple operations are executed to increase or decrease the values of the state variables related to the updated stake status. This is error prone, as shown by the critical issue", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#slash),-multiple-operations-are-executed-to-increase-or-decrease-the-values-of-the-state-variables-related-to-the-updated-stake-status.-this-is-error-prone,-as-shown-by-the-critical-issue", "labels": ["OpenZeppelin"]}, {"title": "A similar pattern is implemented to track the number of votes for Governance proposals.", "body": "A similar pattern is implemented to track the number of votes for Governance proposals.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#a-similar-pattern-is-implemented-to-track-the-number-of-votes-for-governance-proposals.", "labels": ["OpenZeppelin"]}, {"title": "Consider encapsulating these operations into separate functions, one for each type of state update. This way it will be clearer to review that the operations are complete, consistent, and complementary. Some duplication can be removed, and these functions can be thoroughly tested in isolation.", "body": "Consider encapsulating these operations into separate functions, one for each type of state update. This way it will be clearer to review that the operations are complete, consistent, and complementary. Some duplication can be removed, and these functions can be thoroughly tested in isolation.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-encapsulating-these-operations-into-separate-functions,-one-for-each-type-of-state-update.-this-way-it-will-be-clearer-to-review-that-the-operations-are-complete,-consistent,-and-complementary.-some-duplication-can-be-removed,-and-these-functions-can-be-thoroughly-tested-in-isolation.", "labels": ["OpenZeppelin"]}, {"title": "Consider formal verification to prove that these critical state variables will always behave as expected and keep the system in a consistent state.", "body": "Consider formal verification to prove that these critical state variables will always behave as expected and keep the system in a consistent state.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-formal-verification-to-prove-that-these-critical-state-variables-will-always-behave-as-expected-and-keep-the-system-in-a-consistent-state.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #539. Most of the logic was encapsulated in new internal functions, such as the _updateDelegatorStake and the _updateServiceProviderLockupAmount functions of the DelegateManager contract, and the _decreaseVoteMagnitudeNo and the _increaseVoteMagnitudeYes functions of the Governance contract.", "body": "Update: Fixed in pull request #539. Most of the logic was encapsulated in new internal functions, such as the _updateDelegatorStake and the _updateServiceProviderLockupAmount functions of the DelegateManager contract, and the _decreaseVoteMagnitudeNo and the _increaseVoteMagnitudeYes functions of the Governance contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#539.-most-of-the-logic-was-encapsulated-in-new-internal-functions,-such-as-the-_updatedelegatorstake-and-the-_updateserviceproviderlockupamount-functions-of-the-delegatemanager-contract,-and-the-_decreasevotemagnitudeno-and-the-_increasevotemagnitudeyes-functions-of-the-governance-contract.", "labels": ["OpenZeppelin"]}, {"title": "[M02] Inconsistently checking initialization", "body": "[M02] Inconsistently checking initialization", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m02]-inconsistently-checking-initialization", "labels": ["OpenZeppelin"]}, {"title": "When a contract is initialized, its isInitialized state variable is set to true. Since interacting with uninitialized contracts would cause problems, the _requireIsInitialized function is available to make this check.", "body": "When a contract is initialized, its isInitialized state variable is set to true. Since interacting with uninitialized contracts would cause problems, the _requireIsInitialized function is available to make this check.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-a-contract-is-initialized,-its-isinitialized-state-variable-is-set-to-true.-since-interacting-with-uninitialized-contracts-would-cause-problems,-the-_requireisinitialized-function-is-available-to-make-this-check.", "labels": ["OpenZeppelin"]}, {"title": "However, this check is not used consistently. For example, it is used in the getVotingQuorum function of the Governance contract, but it is not used in the getRegistryAddress function of the same contract. There is no obvious difference between the functions to explain this difference, and it could be misleading and cause uninitialized contracts to be called.", "body": "However, this check is not used consistently. For example, it is used in the getVotingQuorum function of the Governance contract, but it is not used in the getRegistryAddress function of the same contract. There is no obvious difference between the functions to explain this difference, and it could be misleading and cause uninitialized contracts to be called.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#however,-this-check-is-not-used-consistently.-for-example,-it-is-used-in-the-getvotingquorum-function-of-the-governance-contract,-but-it-is-not-used-in-the-getregistryaddress-function-of-the-same-contract.-there-is-no-obvious-difference-between-the-functions-to-explain-this-difference,-and-it-could-be-misleading-and-cause-uninitialized-contracts-to-be-called.", "labels": ["OpenZeppelin"]}, {"title": "Consider calling _requireIsInitialized consistently in all the functions of the InitializableV2 contracts. If there is a reason to not call it in some functions, consider documenting it. Alternatively, consider removing this check altogether and preparing a good deployment script that will ensure that all contracts are initialized in the same transaction that they are deployed. In this alternative, it would be required to check that contracts resulting from new proposals are also initialized before they are put in production.", "body": "Consider calling _requireIsInitialized consistently in all the functions of the InitializableV2 contracts. If there is a reason to not call it in some functions, consider documenting it. Alternatively, consider removing this check altogether and preparing a good deployment script that will ensure that all contracts are initialized in the same transaction that they are deployed. In this alternative, it would be required to check that contracts resulting from new proposals are also initialized before they are put in production.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-calling-_requireisinitialized-consistently-in-all-the-functions-of-the-initializablev2-contracts.-if-there-is-a-reason-to-not-call-it-in-some-functions,-consider-documenting-it.-alternatively,-consider-removing-this-check-altogether-and-preparing-a-good-deployment-script-that-will-ensure-that-all-contracts-are-initialized-in-the-same-transaction-that-they-are-deployed.-in-this-alternative,-it-would-be-required-to-check-that-contracts-resulting-from-new-proposals-are-also-initialized-before-they-are-put-in-production.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull requests #587 and #594. The _requireIsInitialized check has been added to all the externally accessed functions of contracts that inherit from InitializableV2.", "body": "Update: Fixed in pull requests #587 and #594. The _requireIsInitialized check has been added to all the externally accessed functions of contracts that inherit from InitializableV2.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-requests-#587-and-#594.-the-_requireisinitialized-check-has-been-added-to-all-the-externally-accessed-functions-of-contracts-that-inherit-from-initializablev2.", "labels": ["OpenZeppelin"]}, {"title": "[M03] Lack of event emission after sensitive changes", "body": "[M03] Lack of event emission after sensitive changes", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m03]-lack-of-event-emission-after-sensitive-changes", "labels": ["OpenZeppelin"]}, {"title": "In several parts of the code there are sensitive functions that lack event emissions. This can make it difficult for users to be aware of important changes that take place.", "body": "In several parts of the code there are sensitive functions that lack event emissions. This can make it difficult for users to be aware of important changes that take place.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-several-parts-of-the-code-there-are-sensitive-functions-that-lack-event-emissions.-this-can-make-it-difficult-for-users-to-be-aware-of-important-changes-that-take-place.", "labels": ["OpenZeppelin"]}, {"title": "Here are some examples:", "body": "Here are some examples:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#here-are-some-examples:", "labels": ["OpenZeppelin"]}, {"title": "The processClaim function in the ClaimsManager contract does not emit an event in the case where there are no rewards.", "body": "The processClaim function in the ClaimsManager contract does not emit an event in the case where there are no rewards.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-processclaim-function-in-the-claimsmanager-contract-does-not-emit-an-event-in-the-case-where-there-are-no-rewards.", "labels": ["OpenZeppelin"]}, {"title": "The setGovernanceAddress, setStakingAddress, setServiceProviderFactoryAddress, setDelegateManagerAddress, updateFundingAmount, and updateFundingRoundBlockDiff functions from the ClaimsManager contract do not emit events.", "body": "The setGovernanceAddress, setStakingAddress, setServiceProviderFactoryAddress, setDelegateManagerAddress, updateFundingAmount, and updateFundingRoundBlockDiff functions from the ClaimsManager contract do not emit events.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-setgovernanceaddress,-setstakingaddress,-setserviceproviderfactoryaddress,-setdelegatemanageraddress,-updatefundingamount,-and-updatefundingroundblockdiff-functions-from-the-claimsmanager-contract-do-not-emit-events.", "labels": ["OpenZeppelin"]}, {"title": "The addServiceType and removeServiceType functions from the ServiceTypeManager contract do not emit events.", "body": "The addServiceType and removeServiceType functions from the ServiceTypeManager contract do not emit events.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-addservicetype-and-removeservicetype-functions-from-the-servicetypemanager-contract-do-not-emit-events.", "labels": ["OpenZeppelin"]}, {"title": "The updateDelegateOwnerWallet, updateEndpoint, updateServiceProviderCut, and updateDecreaseStakeLockupDuration functions from the ServiceProviderManager contract do not emit events.", "body": "The updateDelegateOwnerWallet, updateEndpoint, updateServiceProviderCut, and updateDecreaseStakeLockupDuration functions from the ServiceProviderManager contract do not emit events.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-updatedelegateownerwallet,-updateendpoint,-updateserviceprovidercut,-and-updatedecreasestakelockupduration-functions-from-the-serviceprovidermanager-contract-do-not-emit-events.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding events in these cases to make it easier to track important contract changes.", "body": "Consider adding events in these cases to make it easier to track important contract changes.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adding-events-in-these-cases-to-make-it-easier-to-track-important-contract-changes.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #583.", "body": "Update: Fixed in pull request #583.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#583.", "labels": ["OpenZeppelin"]}, {"title": "[M04] Lack of input validation", "body": "[M04] Lack of input validation", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m04]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "The upgradeContract function in the Registry contract does not check if the _newAddress is the zero address. If passed the zero address, the function will perform the same functionality as the removeContract function but emit a ContractUpgraded event.", "body": "The upgradeContract function in the Registry contract does not check if the _newAddress is the zero address. If passed the zero address, the function will perform the same functionality as the removeContract function but emit a ContractUpgraded event.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-upgradecontract-function-in-the-registry-contract-does-not-check-if-the-_newaddress-is-the-zero-address.-if-passed-the-zero-address,-the-function-will-perform-the-same-functionality-as-the-removecontract-function-but-emit-a-contractupgraded-event.", "labels": ["OpenZeppelin"]}, {"title": "The setServiceVersion function in the ServiceTypeManager contract does not check if the inputted _serviceType type exists, allowing callers to add versions to a nonexistent service type.", "body": "The setServiceVersion function in the ServiceTypeManager contract does not check if the inputted _serviceType type exists, allowing callers to add versions to a nonexistent service type.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-setserviceversion-function-in-the-servicetypemanager-contract-does-not-check-if-the-inputted-_servicetype-type-exists,-allowing-callers-to-add-versions-to-a-nonexistent-service-type.", "labels": ["OpenZeppelin"]}, {"title": "updateServiceType function in the", "body": "updateServiceType function in the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#updateservicetype-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "setGovernanceAddress function in the", "body": "setGovernanceAddress function in the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#setgovernanceaddress-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "The addServiceType function in the ServiceTypeManager contract does not enforce that _serviceTypeMax > 0. This means it is possible to add the same service type to the validServiceTypes array multiple times.", "body": "The addServiceType function in the ServiceTypeManager contract does not enforce that _serviceTypeMax > 0. This means it is possible to add the same service type to the validServiceTypes array multiple times.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-addservicetype-function-in-the-servicetypemanager-contract-does-not-enforce-that-_servicetypemax->-0.-this-means-it-is-possible-to-add-the-same-service-type-to-the-validservicetypes-array-multiple-times.", "labels": ["OpenZeppelin"]}, {"title": "The setVotingPeriod function in the Governance contract does not check if the _votingPeriod is zero. If it is, then it would not be possible to vote on any future proposal.", "body": "The setVotingPeriod function in the Governance contract does not check if the _votingPeriod is zero. If it is, then it would not be possible to vote on any future proposal.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-setvotingperiod-function-in-the-governance-contract-does-not-check-if-the-_votingperiod-is-zero.-if-it-is,-then-it-would-not-be-possible-to-vote-on-any-future-proposal.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding input checks to each of these functions to reduce possible errors.", "body": "Consider adding input checks to each of these functions to reduce possible errors.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adding-input-checks-to-each-of-these-functions-to-reduce-possible-errors.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #569. Checks were added for each of the reported occurrences. For the one found in the addServiceType function, the ServiceTypeManager contract does not explicitly enforce that _serviceTypeMax has to be bigger than zero, nevertheless, it needs to be bigger than the _serviceTypeMin variable, which cannot be inferior than zero.", "body": "Update: Fixed in pull request #569. Checks were added for each of the reported occurrences. For the one found in the addServiceType function, the ServiceTypeManager contract does not explicitly enforce that _serviceTypeMax has to be bigger than zero, nevertheless, it needs to be bigger than the _serviceTypeMin variable, which cannot be inferior than zero.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#569.-checks-were-added-for-each-of-the-reported-occurrences.-for-the-one-found-in-the-addservicetype-function,-the-servicetypemanager-contract-does-not-explicitly-enforce-that-_servicetypemax-has-to-be-bigger-than-zero,-nevertheless,-it-needs-to-be-bigger-than-the-_servicetypemin-variable,-which-cannot-be-inferior-than-zero.", "labels": ["OpenZeppelin"]}, {"title": "[M05] Only active stakers can evaluate proposals", "body": "[M05] Only active stakers can evaluate proposals", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m05]-only-active-stakers-can-evaluate-proposals", "labels": ["OpenZeppelin"]}, {"title": "When a vote is complete, an account with active stake at the time the proposal was submitted has to call the evaluateProposalOutcome function of the Governance contract.", "body": "When a vote is complete, an account with active stake at the time the proposal was submitted has to call the evaluateProposalOutcome function of the Governance contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-a-vote-is-complete,-an-account-with-active-stake-at-the-time-the-proposal-was-submitted-has-to-call-the-evaluateproposaloutcome-function-of-the-governance-contract.", "labels": ["OpenZeppelin"]}, {"title": "This function requires nothing specific from a staker, so it is not clear why this caller limitation is implemented. If no staker is interested in evaluating the proposal, then this prevents other potentially interested accounts to do the evaluation.", "body": "This function requires nothing specific from a staker, so it is not clear why this caller limitation is implemented. If no staker is interested in evaluating the proposal, then this prevents other potentially interested accounts to do the evaluation.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-function-requires-nothing-specific-from-a-staker,-so-it-is-not-clear-why-this-caller-limitation-is-implemented.-if-no-staker-is-interested-in-evaluating-the-proposal,-then-this-prevents-other-potentially-interested-accounts-to-do-the-evaluation.", "labels": ["OpenZeppelin"]}, {"title": "Consider allowing any account to evaluate proposals. Alternatively, if there is a reason why this action has to be limited to stakers, consider documenting it.", "body": "Consider allowing any account to evaluate proposals. Alternatively, if there is a reason why this action has to be limited to stakers, consider documenting it.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-allowing-any-account-to-evaluate-proposals.-alternatively,-if-there-is-a-reason-why-this-action-has-to-be-limited-to-stakers,-consider-documenting-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull requests #572 and #585. Now any account can evaluate proposals.", "body": "Update: Fixed in pull requests #572 and #585. Now any account can evaluate proposals.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-requests-#572-and-#585.-now-any-account-can-evaluate-proposals.", "labels": ["OpenZeppelin"]}, {"title": "[M06] Voting period and quorum can be set to zero", "body": "[M06] Voting period and quorum can be set to zero", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m06]-voting-period-and-quorum-can-be-set-to-zero", "labels": ["OpenZeppelin"]}, {"title": "When the Governance contract is initialized, the values of votingPeriod and votingQuorum are checked to make sure that they are greater than 0. However, the corresponding setter functions setVotingPeriod and setVotingQuorum allow these to variables to be reset to 0.", "body": "When the Governance contract is initialized, the values of votingPeriod and votingQuorum are checked to make sure that they are greater than 0. However, the corresponding setter functions setVotingPeriod and setVotingQuorum allow these to variables to be reset to 0.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-the-governance-contract-is-initialized,-the-values-of-votingperiod-and-votingquorum-are-checked-to-make-sure-that-they-are-greater-than-0.-however,-the-corresponding-setter-functions-setvotingperiod-and-setvotingquorum-allow-these-to-variables-to-be-reset-to-0.", "labels": ["OpenZeppelin"]}, {"title": "Setting the votingPeriod to zero would cause spurious proposals that cannot be voted. Setting the quorum to zero is worse because it would allow proposals with 0 votes to be executed.", "body": "Setting the votingPeriod to zero would cause spurious proposals that cannot be voted. Setting the quorum to zero is worse because it would allow proposals with 0 votes to be executed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#setting-the-votingperiod-to-zero-would-cause-spurious-proposals-that-cannot-be-voted.-setting-the-quorum-to-zero-is-worse-because-it-would-allow-proposals-with-0-votes-to-be-executed.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the validation to the setter functions.", "body": "Consider adding the validation to the setter functions.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adding-the-validation-to-the-setter-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #568.", "body": "Update: Fixed in pull request #568.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#568.", "labels": ["OpenZeppelin"]}, {"title": "[M07] Semantic overloading in the No outcome of proposals", "body": "[M07] Semantic overloading in the No outcome of proposals", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m07]-semantic-overloading-in-the-no-outcome-of-proposals", "labels": ["OpenZeppelin"]}, {"title": "When a proposal fails to meet support of the majority of stake, its outcome is set to No. Also, when a proposal is vetoed by the guardian account, its outcome is set to No.", "body": "When a proposal fails to meet support of the majority of stake, its outcome is set to No. Also, when a proposal is vetoed by the guardian account, its outcome is set to No.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-a-proposal-fails-to-meet-support-of-the-majority-of-stake,-its-outcome-is-set-to-no.-also,-when-a-proposal-is-vetoed-by-the-guardian-account,-its-outcome-is-set-to-no.", "labels": ["OpenZeppelin"]}, {"title": "This is a semantic overload, giving the No outcome two different meanings. It could be confusing for callers of these contracts and may open the door to regressions in future updates to the code.", "body": "This is a semantic overload, giving the No outcome two different meanings. It could be confusing for callers of these contracts and may open the door to regressions in future updates to the code.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-is-a-semantic-overload,-giving-the-no-outcome-two-different-meanings.-it-could-be-confusing-for-callers-of-these-contracts-and-may-open-the-door-to-regressions-in-future-updates-to-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding an extra Veto outcome, to clearly differentiate between the two states.", "body": "Consider adding an extra Veto outcome, to clearly differentiate between the two states.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-adding-an-extra-veto-outcome,-to-clearly-differentiate-between-the-two-states.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #579.", "body": "Update: Fixed in pull request #579.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#579.", "labels": ["OpenZeppelin"]}, {"title": "[M08] Service providers and delegators can mistakenly soft-lock their own stake", "body": "[M08] Service providers and delegators can mistakenly soft-lock their own stake", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m08]-service-providers-and-delegators-can-mistakenly-soft-lock-their-own-stake", "labels": ["OpenZeppelin"]}]