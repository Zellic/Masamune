[{"title": "If a service provider calls the requestDecreaseStake function and passes in a _decreaseStakeAmount of 0, the call will succeed and a DecreaseStakeRequest will be queued up.", "body": "If a service provider calls the requestDecreaseStake function and passes in a _decreaseStakeAmount of 0, the call will succeed and a DecreaseStakeRequest will be queued up.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-a-service-provider-calls-the-requestdecreasestake-function-and-passes-in-a-_decreasestakeamount-of-0,-the-call-will-succeed-and-a-decreasestakerequest-will-be-queued-up.", "labels": ["OpenZeppelin"]}, {"title": "If the service provider then attempts to cancel that request using the cancelDecreaseStakeRequest function, the call will revert at line 402 because the _decreaseRequestIsPending function returns false when decreaseStakeRequests[_serviceProvider].decreaseAmount = 0.", "body": "If the service provider then attempts to cancel that request using the cancelDecreaseStakeRequest function, the call will revert at line 402 because the _decreaseRequestIsPending function returns false when decreaseStakeRequests[_serviceProvider].decreaseAmount = 0.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-the-service-provider-then-attempts-to-cancel-that-request-using-the-canceldecreasestakerequest-function,-the-call-will-revert-at-line-402-because-the-_decreaserequestispending-function-returns-false-when-decreasestakerequests[_serviceprovider].decreaseamount-=-0.", "labels": ["OpenZeppelin"]}, {"title": "If the service provider tries to call the decreaseStake function, the call will revert at line 420 for the same reason.", "body": "If the service provider tries to call the decreaseStake function, the call will revert at line 420 for the same reason.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-the-service-provider-tries-to-call-the-decreasestake-function,-the-call-will-revert-at-line-420-for-the-same-reason.", "labels": ["OpenZeppelin"]}, {"title": "To get out of this \u201csoft-lock\u201d situation, the service provider must call the requestDecreaseStake function again, passing in a _decreaseStakeAmount greater than 0, and then cancel that new DecreaseStakeRequest. This is outside the normal UX flow and may not be easy to discover.", "body": "To get out of this \u201csoft-lock\u201d situation, the service provider must call the requestDecreaseStake function again, passing in a _decreaseStakeAmount greater than 0, and then cancel that new DecreaseStakeRequest. This is outside the normal UX flow and may not be easy to discover.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-get-out-of-this-\u201csoft-lock\u201d-situation,-the-service-provider-must-call-the-requestdecreasestake-function-again,-passing-in-a-_decreasestakeamount-greater-than-0,-and-then-cancel-that-new-decreasestakerequest.-this-is-outside-the-normal-ux-flow-and-may-not-be-easy-to-discover.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, if a delegator calls the requestUndelegateStake function and passes in an _amount of 0, the call will succeed and a UndelegateStakeRequest will be queued up.", "body": "Similarly, if a delegator calls the requestUndelegateStake function and passes in an _amount of 0, the call will succeed and a UndelegateStakeRequest will be queued up.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#similarly,-if-a-delegator-calls-the-requestundelegatestake-function-and-passes-in-an-_amount-of-0,-the-call-will-succeed-and-a-undelegatestakerequest-will-be-queued-up.", "labels": ["OpenZeppelin"]}, {"title": "If the delegator then attempts to cancel that request using the cancelUndelegateStake function, the call will revert at line 226 because the _undelegateRequestIsPending function returns false when undelegateRequests[_delegator].amount == 0.", "body": "If the delegator then attempts to cancel that request using the cancelUndelegateStake function, the call will revert at line 226 because the _undelegateRequestIsPending function returns false when undelegateRequests[_delegator].amount == 0.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-the-delegator-then-attempts-to-cancel-that-request-using-the-cancelundelegatestake-function,-the-call-will-revert-at-line-226-because-the-_undelegaterequestispending-function-returns-false-when-undelegaterequests[_delegator].amount-==-0.", "labels": ["OpenZeppelin"]}, {"title": "If the delegator tries to call the undelegateStake function, the call will revert at line 244 for the same reason.", "body": "If the delegator tries to call the undelegateStake function, the call will revert at line 244 for the same reason.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#if-the-delegator-tries-to-call-the-undelegatestake-function,-the-call-will-revert-at-line-244-for-the-same-reason.", "labels": ["OpenZeppelin"]}, {"title": "To get out of this \u201csoft-lock\u201d situation, the delegator must call the requestUndelegateStake function again, passing in an _amount greater than 0, and then cancel that new UndelegateStakeRequest. As before, this is outside the normal UX flow and may not be easy to discover.", "body": "To get out of this \u201csoft-lock\u201d situation, the delegator must call the requestUndelegateStake function again, passing in an _amount greater than 0, and then cancel that new UndelegateStakeRequest. As before, this is outside the normal UX flow and may not be easy to discover.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-get-out-of-this-\u201csoft-lock\u201d-situation,-the-delegator-must-call-the-requestundelegatestake-function-again,-passing-in-an-_amount-greater-than-0,-and-then-cancel-that-new-undelegatestakerequest.-as-before,-this-is-outside-the-normal-ux-flow-and-may-not-be-easy-to-discover.", "labels": ["OpenZeppelin"]}, {"title": "Consider requiring that the requestDecreaseStake only accepts a _decreaseStakeAmount greater than zero, and consider requiring that the requestUndelegateStake function only accepts an _amount greater than 0.", "body": "Consider requiring that the requestDecreaseStake only accepts a _decreaseStakeAmount greater than zero, and consider requiring that the requestUndelegateStake function only accepts an _amount greater than 0.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-requiring-that-the-requestdecreasestake-only-accepts-a-_decreasestakeamount-greater-than-zero,-and-consider-requiring-that-the-requestundelegatestake-function-only-accepts-an-_amount-greater-than-0.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #567.", "body": "Update: Fixed in pull request #567.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#567.", "labels": ["OpenZeppelin"]}, {"title": "[M09] Ties in governance proposals are approved", "body": "[M09] Ties in governance proposals are approved", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m09]-ties-in-governance-proposals-are-approved", "labels": ["OpenZeppelin"]}, {"title": "When the stake in favor a governance proposal is equal to the stake against it, the proposal is considered approved and can be executed. In cases when critical updates to the system are so contentious to the point of reaching a tie, the safest course of action is to prepare a new proposal that can be discussed further and be more easily approved later.", "body": "When the stake in favor a governance proposal is equal to the stake against it, the proposal is considered approved and can be executed. In cases when critical updates to the system are so contentious to the point of reaching a tie, the safest course of action is to prepare a new proposal that can be discussed further and be more easily approved later.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-the-stake-in-favor-a-governance-proposal-is-equal-to-the-stake-against-it,-the-proposal-is-considered-approved-and-can-be-executed.-in-cases-when-critical-updates-to-the-system-are-so-contentious-to-the-point-of-reaching-a-tie,-the-safest-course-of-action-is-to-prepare-a-new-proposal-that-can-be-discussed-further-and-be-more-easily-approved-later.", "labels": ["OpenZeppelin"]}, {"title": "Consider executing proposals only when they have a majority of supporting votes.", "body": "Consider executing proposals only when they have a majority of supporting votes.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-executing-proposals-only-when-they-have-a-majority-of-supporting-votes.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #576.", "body": "Update: Fixed in pull request #576.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#576.", "labels": ["OpenZeppelin"]}, {"title": "[M10] Some state variables are not set during initialize", "body": "[M10] Some state variables are not set during initialize", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[m10]-some-state-variables-are-not-set-during-initialize", "labels": ["OpenZeppelin"]}, {"title": "The Audius contracts can be upgraded using the unstructured storage proxy pattern. This pattern requires the use of an initializer instead of the constructor to set the initial values of the state variables. In some of the contracts, the initializer is not initializing all of the state variables.", "body": "The Audius contracts can be upgraded using the unstructured storage proxy pattern. This pattern requires the use of an initializer instead of the constructor to set the initial values of the state variables. In some of the contracts, the initializer is not initializing all of the state variables.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-audius-contracts-can-be-upgraded-using-the-unstructured-storage-proxy-pattern.-this-pattern-requires-the-use-of-an-initializer-instead-of-the-constructor-to-set-the-initial-values-of-the-state-variables.-in-some-of-the-contracts,-the-initializer-is-not-initializing-all-of-the-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "For example, in the initializer function of the ClaimsManager contract the stakingAddress state variable is not set. It can be set later by calling setStakingAddress. However, this means that it is possible to call the processClaim function and some others without any staking address set, because they only check that the contract has been initialized.", "body": "For example, in the initializer function of the ClaimsManager contract the stakingAddress state variable is not set. It can be set later by calling setStakingAddress. However, this means that it is possible to call the processClaim function and some others without any staking address set, because they only check that the contract has been initialized.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-example,-in-the-initializer-function-of-the-claimsmanager-contract-the-stakingaddress-state-variable-is-not-set.-it-can-be-set-later-by-calling-setstakingaddress.-however,-this-means-that-it-is-possible-to-call-the-processclaim-function-and-some-others-without-any-staking-address-set,-because-they-only-check-that-the-contract-has-been-initialized.", "labels": ["OpenZeppelin"]}, {"title": "The same happens in the initializer function of the Governance contract, which does not set the stakingAddress either.", "body": "The same happens in the initializer function of the Governance contract, which does not set the stakingAddress either.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-same-happens-in-the-initializer-function-of-the-governance-contract,-which-does-not-set-the-stakingaddress-either.", "labels": ["OpenZeppelin"]}, {"title": "Consider setting all the required variables in the initializer. If there is a reason for leaving them uninitialized consider documenting it, and adding checks on the functions that use those variables to ensure that they are not called before initialization.", "body": "Consider setting all the required variables in the initializer. If there is a reason for leaving them uninitialized consider documenting it, and adding checks on the functions that use those variables to ensure that they are not called before initialization.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-setting-all-the-required-variables-in-the-initializer.-if-there-is-a-reason-for-leaving-them-uninitialized-consider-documenting-it,-and-adding-checks-on-the-functions-that-use-those-variables-to-ensure-that-they-are-not-called-before-initialization.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #589.", "body": "Update: Fixed in pull request #589.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#589.", "labels": ["OpenZeppelin"]}, {"title": "[L01] Governance proposal description only stored in log", "body": "[L01] Governance proposal description only stored in log", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l01]-governance-proposal-description-only-stored-in-log", "labels": ["OpenZeppelin"]}, {"title": "When a new governance proposal is submitted, it requires a description. This description is not saved to the contract storage, only to the events log when ProposalSubmitted is emitted.", "body": "When a new governance proposal is submitted, it requires a description. This description is not saved to the contract storage, only to the events log when ProposalSubmitted is emitted.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-a-new-governance-proposal-is-submitted,-it-requires-a-description.-this-description-is-not-saved-to-the-contract-storage,-only-to-the-events-log-when-proposalsubmitted-is-emitted.", "labels": ["OpenZeppelin"]}, {"title": "This makes it hard for a user of the contract to get the description. They would have to gather this information from the logs, which are not accessible to other on-chain contracts.", "body": "This makes it hard for a user of the contract to get the description. They would have to gather this information from the logs, which are not accessible to other on-chain contracts.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-makes-it-hard-for-a-user-of-the-contract-to-get-the-description.-they-would-have-to-gather-this-information-from-the-logs,-which-are-not-accessible-to-other-on-chain-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Consider saving the description in the contract storage, together with the rest of the proposal information.", "body": "Consider saving the description in the contract storage, together with the rest of the proposal information.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-saving-the-description-in-the-contract-storage,-together-with-the-rest-of-the-proposal-information.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #550.", "body": "Update: Fixed in pull request #550.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#550.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Duplicated newProposalId calculation", "body": "[L02] Duplicated newProposalId calculation", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l02]-duplicated-newproposalid-calculation", "labels": ["OpenZeppelin"]}, {"title": "In lines 187 and 213 of Governance.sol, the same addition is executed twice.", "body": "In lines 187 and 213 of Governance.sol, the same addition is executed twice.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-lines-187-and-213-of-governance.sol,-the-same-addition-is-executed-twice.", "labels": ["OpenZeppelin"]}, {"title": "To avoid duplication, consider replacing the second calculation with the value of newProposalId.", "body": "To avoid duplication, consider replacing the second calculation with the value of newProposalId.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-avoid-duplication,-consider-replacing-the-second-calculation-with-the-value-of-newproposalid.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #544.", "body": "Update: Fixed in pull request #544.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#544.", "labels": ["OpenZeppelin"]}, {"title": "[L03] Duplicated staker check", "body": "[L03] Duplicated staker check", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l03]-duplicated-staker-check", "labels": ["OpenZeppelin"]}, {"title": "In lines 236 and 340 of Governance.sol, the same check for active stake at a particular block number is executed.", "body": "In lines 236 and 340 of Governance.sol, the same check for active stake at a particular block number is executed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-lines-236-and-340-of-governance.sol,-the-same-check-for-active-stake-at-a-particular-block-number-is-executed.", "labels": ["OpenZeppelin"]}, {"title": "To avoid duplication, and to improve encapsulation and readability, consider implementing a function wasStakerAt in the Staking contract, and calling this function in the Governance contract instead of reimplementing the check.", "body": "To avoid duplication, and to improve encapsulation and readability, consider implementing a function wasStakerAt in the Staking contract, and calling this function in the Governance contract instead of reimplementing the check.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-avoid-duplication,-and-to-improve-encapsulation-and-readability,-consider-implementing-a-function-wasstakerat-in-the-staking-contract,-and-calling-this-function-in-the-governance-contract-instead-of-reimplementing-the-check.", "labels": ["OpenZeppelin"]}, {"title": "In the same Governance contract, there is another check to see if the account currently has some stake. For readability and consistency with the previous suggestion, consider also adding a function isCurrentStaker the Staking contract.", "body": "In the same Governance contract, there is another check to see if the account currently has some stake. For readability and consistency with the previous suggestion, consider also adding a function isCurrentStaker the Staking contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-same-governance-contract,-there-is-another-check-to-see-if-the-account-currently-has-some-stake.-for-readability-and-consistency-with-the-previous-suggestion,-consider-also-adding-a-function-iscurrentstaker-the-staking-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #580. The isStaker function was introduced to the Staking contract. The check for active stake at a block number was not refactored. Audius\u2019 statement for this issue:", "body": "Update: Partially fixed in pull request #580. The isStaker function was introduced to the Staking contract. The check for active stake at a block number was not refactored. Audius\u2019 statement for this issue:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#580.-the-isstaker-function-was-introduced-to-the-staking-contract.-the-check-for-active-stake-at-a-block-number-was-not-refactored.-audius\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "After evaluation, the suggested function wasStakerAt may offer a slight improvement in readability but sacrifice other benefits. For example, if wasStakerAt is a function returning a bool for a specific block:", "body": "After evaluation, the suggested function wasStakerAt may offer a slight improvement in readability but sacrifice other benefits. For example, if wasStakerAt is a function returning a bool for a specific block:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#after-evaluation,-the-suggested-function-wasstakerat-may-offer-a-slight-improvement-in-readability-but-sacrifice-other-benefits.-for-example,-if-wasstakerat-is-a-function-returning-a-bool-for-a-specific-block:", "labels": ["OpenZeppelin"]}, {"title": "wasStakerAt(spAddress, blockId) returns (bool)", "body": "wasStakerAt(spAddress, blockId) returns (bool)", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#wasstakerat(spaddress,-blockid)-returns-(bool)", "labels": ["OpenZeppelin"]}, {"title": "In order to replace current usage of totalStakedForAt per audit feedback, another call would have to be made to retrieve the stake at a given block \u2013 this is a strictly worse outcome despite marginal improvement in readability.", "body": "In order to replace current usage of totalStakedForAt per audit feedback, another call would have to be made to retrieve the stake at a given block \u2013 this is a strictly worse outcome despite marginal improvement in readability.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-order-to-replace-current-usage-of-totalstakedforat-per-audit-feedback,-another-call-would-have-to-be-made-to-retrieve-the-stake-at-a-given-block-\u2013-this-is-a-strictly-worse-outcome-despite-marginal-improvement-in-readability.", "labels": ["OpenZeppelin"]}, {"title": "Alternatively, if wasStakerAt is a function returning (uint, bool) tuple indicating stakedAmount at a given block:", "body": "Alternatively, if wasStakerAt is a function returning (uint, bool) tuple indicating stakedAmount at a given block:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#alternatively,-if-wasstakerat-is-a-function-returning-(uint,-bool)-tuple-indicating-stakedamount-at-a-given-block:", "labels": ["OpenZeppelin"]}, {"title": "wasStakerAt(spAddress, blockNum) returns (uint, bool)", "body": "wasStakerAt(spAddress, blockNum) returns (uint, bool)", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#wasstakerat(spaddress,-blocknum)-returns-(uint,-bool)", "labels": ["OpenZeppelin"]}, {"title": "The above pattern is returning a boolean that can be trivially generated by evaluating the stake at a given block > 0, which is identical to our current use of totalStakedForAt > 0.", "body": "The above pattern is returning a boolean that can be trivially generated by evaluating the stake at a given block > 0, which is identical to our current use of totalStakedForAt > 0.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-above-pattern-is-returning-a-boolean-that-can-be-trivially-generated-by-evaluating-the-stake-at-a-given-block->-0,-which-is-identical-to-our-current-use-of-totalstakedforat->-0.", "labels": ["OpenZeppelin"]}, {"title": "Finally, there is an option to create a function that returns (uint) the stake at a current block but also does additional validation in the form of require statements:", "body": "Finally, there is an option to create a function that returns (uint) the stake at a current block but also does additional validation in the form of require statements:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#finally,-there-is-an-option-to-create-a-function-that-returns-(uint)-the-stake-at-a-current-block-but-also-does-additional-validation-in-the-form-of-require-statements:", "labels": ["OpenZeppelin"]}, {"title": "wasStakerAt(spAddress, blockNum) returns (uint): require(valueAtBlock > 0) ... return valueAtBlock", "body": "wasStakerAt(spAddress, blockNum) returns (uint): require(valueAtBlock > 0) ... return valueAtBlock", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#wasstakerat(spaddress,-blocknum)-returns-(uint):-require(valueatblock->-0)-...-return-valueatblock", "labels": ["OpenZeppelin"]}, {"title": "However, we felt that this solution actually ends up less readable since the function wasStakerAt implies a returned boolean value but instead reverts on failure.", "body": "However, we felt that this solution actually ends up less readable since the function wasStakerAt implies a returned boolean value but instead reverts on failure.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#however,-we-felt-that-this-solution-actually-ends-up-less-readable-since-the-function-wasstakerat-implies-a-returned-boolean-value-but-instead-reverts-on-failure.", "labels": ["OpenZeppelin"]}, {"title": "For the above reasons, we have decided to forgo implementing the suggested wasStakerAt helper function in favor of our existing > 0 check for value at a specific block.", "body": "For the above reasons, we have decided to forgo implementing the suggested wasStakerAt helper function in favor of our existing > 0 check for value at a specific block.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-the-above-reasons,-we-have-decided-to-forgo-implementing-the-suggested-wasstakerat-helper-function-in-favor-of-our-existing->-0-check-for-value-at-a-specific-block.", "labels": ["OpenZeppelin"]}, {"title": "[L04] Lack of indexed parameters in events", "body": "[L04] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l04]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "Some events are defined with no indexed parameters. For example, ClaimProcessed in the ClaimsManager contract and RegisteredServiceProvider in the ServiceProviderFactory contract.", "body": "Some events are defined with no indexed parameters. For example, ClaimProcessed in the ClaimsManager contract and RegisteredServiceProvider in the ServiceProviderFactory contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#some-events-are-defined-with-no-indexed-parameters.-for-example,-claimprocessed-in-the-claimsmanager-contract-and-registeredserviceprovider-in-the-serviceproviderfactory-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #614. Some important events still lack of indexed parameters.", "body": "Update: Partially fixed in pull request #614. Some important events still lack of indexed parameters.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#614.-some-important-events-still-lack-of-indexed-parameters.", "labels": ["OpenZeppelin"]}, {"title": "[L05] Contracts have artifacts leftover from earlier test versions", "body": "[L05] Contracts have artifacts leftover from earlier test versions", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l05]-contracts-have-artifacts-leftover-from-earlier-test-versions", "labels": ["OpenZeppelin"]}, {"title": "The whitepaper defines the native token\u2019s symbol as \u201cAUDS\u201d and its name as \u201cAudius\u201d. However, the symbol used in the AudiusToken contract is \u201cTAUDS\u201d and its name is \u201cTestAudius\u201d.", "body": "The whitepaper defines the native token\u2019s symbol as \u201cAUDS\u201d and its name as \u201cAudius\u201d. However, the symbol used in the AudiusToken contract is \u201cTAUDS\u201d and its name is \u201cTestAudius\u201d.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-whitepaper-defines-the-native-token\u2019s-symbol-as-\u201cauds\u201d-and-its-name-as-\u201caudius\u201d.-however,-the-symbol-used-in-the-audiustoken-contract-is-\u201ctauds\u201d-and-its-name-is-\u201ctestaudius\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In the ServiceTypeManager contract there are two events called Test and TestAddr that are not used in the code.", "body": "In the ServiceTypeManager contract there are two events called Test and TestAddr that are not used in the code.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-servicetypemanager-contract-there-are-two-events-called-test-and-testaddr-that-are-not-used-in-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Consider changing the name and symbol to the ones defined in the whitepaper, and consider removing the unused test events.", "body": "Consider changing the name and symbol to the ones defined in the whitepaper, and consider removing the unused test events.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-changing-the-name-and-symbol-to-the-ones-defined-in-the-whitepaper,-and-consider-removing-the-unused-test-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. The test events were deleted in pull request #583. Audius\u2019 statement for the token issue:", "body": "Update: Partially fixed. The test events were deleted in pull request #583. Audius\u2019 statement for the token issue:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed.-the-test-events-were-deleted-in-pull-request-#583.-audius\u2019-statement-for-the-token-issue:", "labels": ["OpenZeppelin"]}, {"title": "This was done on purpose so we wouldn\u2019t accidentally deploy test contracts to mainnet with the token symbol AUDS. The plan was to change the name and symbol before the final deploy of the contracts as to not pollute the ERC-20 landscape with the token name and symbol.", "body": "This was done on purpose so we wouldn\u2019t accidentally deploy test contracts to mainnet with the token symbol AUDS. The plan was to change the name and symbol before the final deploy of the contracts as to not pollute the ERC-20 landscape with the token name and symbol.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-was-done-on-purpose-so-we-wouldn\u2019t-accidentally-deploy-test-contracts-to-mainnet-with-the-token-symbol-auds.-the-plan-was-to-change-the-name-and-symbol-before-the-final-deploy-of-the-contracts-as-to-not-pollute-the-erc-20-landscape-with-the-token-name-and-symbol.", "labels": ["OpenZeppelin"]}, {"title": "[L06] Misleading comments, docstrings, and typographical errors", "body": "[L06] Misleading comments, docstrings, and typographical errors", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l06]-misleading-comments,-docstrings,-and-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "Some docstrings and inline comments were found to be erroneous. In particular:", "body": "Some docstrings and inline comments were found to be erroneous. In particular:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#some-docstrings-and-inline-comments-were-found-to-be-erroneous.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "Line 412 of ServiceProviderFactory.sol says \u201cMust have called requestDecreaseStake and waited for the lockup period to expire\u201d, but it is possible that the DecreaseStakeRequest was queued up by the deregister function instead of the requestDecreaseStake function.", "body": "Line 412 of ServiceProviderFactory.sol says \u201cMust have called requestDecreaseStake and waited for the lockup period to expire\u201d, but it is possible that the DecreaseStakeRequest was queued up by the deregister function instead of the requestDecreaseStake function.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#line-412-of-serviceproviderfactory.sol-says-\u201cmust-have-called-requestdecreasestake-and-waited-for-the-lockup-period-to-expire\u201d,-but-it-is-possible-that-the-decreasestakerequest-was-queued-up-by-the-deregister-function-instead-of-the-requestdecreasestake-function.", "labels": ["OpenZeppelin"]}, {"title": "Line 486 of ServiceProviderFactory.sol says that the third parameter is _oldEndpoint but it is actually _newEndpoint.", "body": "Line 486 of ServiceProviderFactory.sol says that the third parameter is _oldEndpoint but it is actually _newEndpoint.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#line-486-of-serviceproviderfactory.sol-says-that-the-third-parameter-is-_oldendpoint-but-it-is-actually-_newendpoint.", "labels": ["OpenZeppelin"]}, {"title": "Line 123 of Staking.sol says historry but it should say history.", "body": "Line 123 of Staking.sol says historry but it should say history.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#line-123-of-staking.sol-says-historry-but-it-should-say-history.", "labels": ["OpenZeppelin"]}, {"title": "Line 231 of Staking.sol has an incorrect @notice tag for the undelegateStakeFor function (it duplicates the one for the delegateStakeFor function).", "body": "Line 231 of Staking.sol has an incorrect @notice tag for the undelegateStakeFor function (it duplicates the one for the delegateStakeFor function).", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#line-231-of-staking.sol-has-an-incorrect-@notice-tag-for-the-undelegatestakefor-function-(it-duplicates-the-one-for-the-delegatestakefor-function).", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing these errors before deploying the contracts.", "body": "Consider fixing these errors before deploying the contracts.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-fixing-these-errors-before-deploying-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull requests #546 and #672.", "body": "Update: Fixed in pull requests #546 and #672.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-requests-#546-and-#672.", "labels": ["OpenZeppelin"]}, {"title": "[L07] Outdated Solidity version in use", "body": "[L07] Outdated Solidity version in use", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l07]-outdated-solidity-version-in-use", "labels": ["OpenZeppelin"]}, {"title": "An outdated Solidity version, 0.5.16, is currently in use. As Solidity is now under a fast release cycle, ensure that the latest version of the compiler is used at the time of deployment (presently 0.5.17 in the 0.5.x branch).", "body": "An outdated Solidity version, 0.5.16, is currently in use. As Solidity is now under a fast release cycle, ensure that the latest version of the compiler is used at the time of deployment (presently 0.5.17 in the 0.5.x branch).", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#an-outdated-solidity-version,-0.5.16,-is-currently-in-use.-as-solidity-is-now-under-a-fast-release-cycle,-ensure-that-the-latest-version-of-the-compiler-is-used-at-the-time-of-deployment-(presently-0.5.17-in-the-0.5.x-branch).", "labels": ["OpenZeppelin"]}, {"title": "Since OpenZeppelin version 3.0.0, the 0.6.x branch of Solidity is supported. Consider updating both OpenZeppelin and Solidity to their latest stable branches.", "body": "Since OpenZeppelin version 3.0.0, the 0.6.x branch of Solidity is supported. Consider updating both OpenZeppelin and Solidity to their latest stable branches.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#since-openzeppelin-version-3.0.0,-the-0.6.x-branch-of-solidity-is-supported.-consider-updating-both-openzeppelin-and-solidity-to-their-latest-stable-branches.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#602. The project is now using the latest Solidity release from the 0.5 branch. Consider updating the pragma statement on all contracts to require this latest version or a newer one.", "body": "Update: Fixed in PR#602. The project is now using the latest Solidity release from the 0.5 branch. Consider updating the pragma statement on all contracts to require this latest version or a newer one.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pr#602.-the-project-is-now-using-the-latest-solidity-release-from-the-0.5-branch.-consider-updating-the-pragma-statement-on-all-contracts-to-require-this-latest-version-or-a-newer-one.", "labels": ["OpenZeppelin"]}, {"title": "[L08] Votes can be overwritten by calling the same function for the first vote", "body": "[L08] Votes can be overwritten by calling the same function for the first vote", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l08]-votes-can-be-overwritten-by-calling-the-same-function-for-the-first-vote", "labels": ["OpenZeppelin"]}, {"title": "In order to vote in a proposal, stakers call the submitProposalVote of the Governance contract. If they want to update their vote, they call the same function.", "body": "In order to vote in a proposal, stakers call the submitProposalVote of the Governance contract. If they want to update their vote, they call the same function.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-order-to-vote-in-a-proposal,-stakers-call-the-submitproposalvote-of-the-governance-contract.-if-they-want-to-update-their-vote,-they-call-the-same-function.", "labels": ["OpenZeppelin"]}, {"title": "This is giving two different responsibilities to the same function, which makes the code for the function more complicated than it should. It could also lead to mistakes by careless callers that might not notice they are updating their vote.", "body": "This is giving two different responsibilities to the same function, which makes the code for the function more complicated than it should. It could also lead to mistakes by careless callers that might not notice they are updating their vote.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-is-giving-two-different-responsibilities-to-the-same-function,-which-makes-the-code-for-the-function-more-complicated-than-it-should.-it-could-also-lead-to-mistakes-by-careless-callers-that-might-not-notice-they-are-updating-their-vote.", "labels": ["OpenZeppelin"]}, {"title": "Consider splitting this function in two, to add a new updateVote function that takes care of updating an existing vote.", "body": "Consider splitting this function in two, to add a new updateVote function that takes care of updating an existing vote.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-splitting-this-function-in-two,-to-add-a-new-updatevote-function-that-takes-care-of-updating-an-existing-vote.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #596.", "body": "Update: Fixed in pull request #596.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#596.", "labels": ["OpenZeppelin"]}, {"title": "README file is missing important information", "body": "README file is missing important information", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#readme-file-is-missing-important-information", "labels": ["OpenZeppelin"]}, {"title": "The README.md files of the Audius roject have little information about what how to use, test, and contribute to the different components of the system. README files on the root of git repositories are the first documents that most developers often read, so they should be complete, clear, concise, and accurate.", "body": "The README.md files of the Audius roject have little information about what how to use, test, and contribute to the different components of the system. README files on the root of git repositories are the first documents that most developers often read, so they should be complete, clear, concise, and accurate.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-readme.md-files-of-the-audius-roject-have-little-information-about-what-how-to-use,-test,-and-contribute-to-the-different-components-of-the-system.-readme-files-on-the-root-of-git-repositories-are-the-first-documents-that-most-developers-often-read,-so-they-should-be-complete,-clear,-concise,-and-accurate.", "labels": ["OpenZeppelin"]}, {"title": "Consider following Standard Readme to define the structure and contents for the README file.Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "body": "Consider following Standard Readme to define the structure and contents for the README file.Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-following-standard-readme-to-define-the-structure-and-contents-for-the-readme-file.also,-consider-including-an-explanation-of-the-core-concepts-of-the-repository,-the-usage-workflows,-the-public-apis,-instructions-to-test-and-deploy-it,-and-how-the-code-relates-to-other-key-components-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "body": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#furthermore,-it-is-highly-advisable-to-include-instructions-for-the-responsible-disclosure-of-any-security-vulnerabilities-found-in-the-project.consider-adding-a-method-for-secure-and-encrypted-communication-with-the-team,-like-an-email-address-with-its-gpg-key.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #601.", "body": "Update: Fixed in pull request #601.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#601.", "labels": ["OpenZeppelin"]}, {"title": "[L10] Proposed target code can change", "body": "[L10] Proposed target code can change", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[l10]-proposed-target-code-can-change", "labels": ["OpenZeppelin"]}, {"title": "When an approved governance proposal is evaluated, the Governance contract checks that the registered address has not changed. However, with the create2 opcode it is possible to modify the code of a contract while keeping the same address, so this check is not enough to verify that the voted proposal is the same as the one that will be executed.", "body": "When an approved governance proposal is evaluated, the Governance contract checks that the registered address has not changed. However, with the create2 opcode it is possible to modify the code of a contract while keeping the same address, so this check is not enough to verify that the voted proposal is the same as the one that will be executed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#when-an-approved-governance-proposal-is-evaluated,-the-governance-contract-checks-that-the-registered-address-has-not-changed.-however,-with-the-create2-opcode-it-is-possible-to-modify-the-code-of-a-contract-while-keeping-the-same-address,-so-this-check-is-not-enough-to-verify-that-the-voted-proposal-is-the-same-as-the-one-that-will-be-executed.", "labels": ["OpenZeppelin"]}, {"title": "This is not a critical issue because the registry is managed by the trusted administrators of the system, and we started this audit with the assumption that they will thoroughly review all the contracts before adding them to the registry. It would be easy to spot a contract that self-destructs and opens the door to a create2 deceiving attack.", "body": "This is not a critical issue because the registry is managed by the trusted administrators of the system, and we started this audit with the assumption that they will thoroughly review all the contracts before adding them to the registry. It would be easy to spot a contract that self-destructs and opens the door to a create2 deceiving attack.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#this-is-not-a-critical-issue-because-the-registry-is-managed-by-the-trusted-administrators-of-the-system,-and-we-started-this-audit-with-the-assumption-that-they-will-thoroughly-review-all-the-contracts-before-adding-them-to-the-registry.-it-would-be-easy-to-spot-a-contract-that-self-destructs-and-opens-the-door-to-a-create2-deceiving-attack.", "labels": ["OpenZeppelin"]}, {"title": "For extra-safety and transparency, consider also registering the code hash of the contracts added to the registry, and verify that it has not changed before executing an approved proposal.", "body": "For extra-safety and transparency, consider also registering the code hash of the contracts added to the registry, and verify that it has not changed before executing an approved proposal.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-extra-safety-and-transparency,-consider-also-registering-the-code-hash-of-the-contracts-added-to-the-registry,-and-verify-that-it-has-not-changed-before-executing-an-approved-proposal.", "labels": ["OpenZeppelin"]}, {"title": "Update:: Fixed in pull request #605.", "body": "Update:: Fixed in pull request #605.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update::-fixed-in-pull-request-#605.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Inconsistent style for error messages", "body": "[N01] Inconsistent style for error messages", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n01]-inconsistent-style-for-error-messages", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code, when a require statement fails an error message is returned. These error messages are not following a consistent style. For example, in line 128 of Governance.sol a simple message is returned. In line 245 of Governance.sol a formatted message is returned, starting with the name of the contract and of the function. In line 23 of InitializableV2.sol a message in all capital letters is returned.", "body": "Throughout the code, when a require statement fails an error message is returned. These error messages are not following a consistent style. For example, in line 128 of Governance.sol a simple message is returned. In line 245 of Governance.sol a formatted message is returned, starting with the name of the contract and of the function. In line 23 of InitializableV2.sol a message in all capital letters is returned.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#throughout-the-code,-when-a-require-statement-fails-an-error-message-is-returned.-these-error-messages-are-not-following-a-consistent-style.-for-example,-in-line-128-of-governance.sol-a-simple-message-is-returned.-in-line-245-of-governance.sol-a-formatted-message-is-returned,-starting-with-the-name-of-the-contract-and-of-the-function.-in-line-23-of-initializablev2.sol-a-message-in-all-capital-letters-is-returned.", "labels": ["OpenZeppelin"]}, {"title": "Consider using a consistent style for all error messages.", "body": "Consider using a consistent style for all error messages.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-using-a-consistent-style-for-all-error-messages.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #597. Most of the messages are now following the style {Name of contract}: message. Nevertheless, a few are still inconsistent like the one in line 44 of AudiusAdminUpgradeabilityProxy.sol or the one in line 352 of Governance.sol.", "body": "Update: Partially fixed in pull request #597. Most of the messages are now following the style {Name of contract}: message. Nevertheless, a few are still inconsistent like the one in line 44 of AudiusAdminUpgradeabilityProxy.sol or the one in line 352 of Governance.sol.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#597.-most-of-the-messages-are-now-following-the-style-{name-of-contract}:-message.-nevertheless,-a-few-are-still-inconsistent-like-the-one-in-line-44-of-audiusadminupgradeabilityproxy.sol-or-the-one-in-line-352-of-governance.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Lack of explicit visibility in public state variables", "body": "[N02] Lack of explicit visibility in public state variables", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n02]-lack-of-explicit-visibility-in-public-state-variables", "labels": ["OpenZeppelin"]}, {"title": "The public state variables are implicitly using the default visibility. For example, in lines 39 to 42 of Staking.sol and in line 12 of AudiusAdminUpgradeabilityProxy.", "body": "The public state variables are implicitly using the default visibility. For example, in lines 39 to 42 of Staking.sol and in line 12 of AudiusAdminUpgradeabilityProxy.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#the-public-state-variables-are-implicitly-using-the-default-visibility.-for-example,-in-lines-39-to-42-of-staking.sol-and-in-line-12-of-audiusadminupgradeabilityproxy.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables-and-constants.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #592. Now state variables and constants have explicit visibility declared. Consider enforcing this with a linter.", "body": "Update: Fixed in pull request #592. Now state variables and constants have explicit visibility declared. Consider enforcing this with a linter.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#592.-now-state-variables-and-constants-have-explicit-visibility-declared.-consider-enforcing-this-with-a-linter.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Named return variables", "body": "[N03] Named return variables", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n03]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire code base. Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "body": "There is an inconsistent use of named return variables across the entire code base. Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-code-base.-consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-explicitness-and-readability-of-the-code,-and-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #600. The name of single return variables was deleted. The Audius team decided to keep the names in functions with multiple return variables. Consider documenting the rationale for this decision in the code style file, and enforcing it with a linter. Audius\u2019 statement for this issue:", "body": "Update: Fixed in pull request #600. The name of single return variables was deleted. The Audius team decided to keep the names in functions with multiple return variables. Consider documenting the rationale for this decision in the code style file, and enforcing it with a linter. Audius\u2019 statement for this issue:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#600.-the-name-of-single-return-variables-was-deleted.-the-audius-team-decided-to-keep-the-names-in-functions-with-multiple-return-variables.-consider-documenting-the-rationale-for-this-decision-in-the-code-style-file,-and-enforcing-it-with-a-linter.-audius\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We chose to continue returning named variables for functions returning tuples so that non-contract clients can easily access the returned values \u2013 for example, in the function \u2018getServiceProviderDetails\u2019 a client can simply access \u2018object.numberOfEndpoints\u2019 instead of having to call \u201cobject[\u20183\u2019]\u201d. While there may be a (very) slight decrease in contract readability, the other benefits that named values provide compelled us to use them.", "body": "We chose to continue returning named variables for functions returning tuples so that non-contract clients can easily access the returned values \u2013 for example, in the function \u2018getServiceProviderDetails\u2019 a client can simply access \u2018object.numberOfEndpoints\u2019 instead of having to call \u201cobject[\u20183\u2019]\u201d. While there may be a (very) slight decrease in contract readability, the other benefits that named values provide compelled us to use them.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#we-chose-to-continue-returning-named-variables-for-functions-returning-tuples-so-that-non-contract-clients-can-easily-access-the-returned-values-\u2013-for-example,-in-the-function-\u2018getserviceproviderdetails\u2019-a-client-can-simply-access-\u2018object.numberofendpoints\u2019-instead-of-having-to-call-\u201cobject[\u20183\u2019]\u201d.-while-there-may-be-a-(very)-slight-decrease-in-contract-readability,-the-other-benefits-that-named-values-provide-compelled-us-to-use-them.", "labels": ["OpenZeppelin"]}, {"title": "For single return values a named return variable is unnecessary as the function name provides sufficient context as to what is being returned. For example, \u2018getGovernanceAddress\u2019 returns an address that represents governance \u2013 a named return variable would offer no additional information and reduce readability. In certain cases we have updated NATSPEC comments with return value description for ensured clarity.", "body": "For single return values a named return variable is unnecessary as the function name provides sufficient context as to what is being returned. For example, \u2018getGovernanceAddress\u2019 returns an address that represents governance \u2013 a named return variable would offer no additional information and reduce readability. In certain cases we have updated NATSPEC comments with return value description for ensured clarity.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#for-single-return-values-a-named-return-variable-is-unnecessary-as-the-function-name-provides-sufficient-context-as-to-what-is-being-returned.-for-example,-\u2018getgovernanceaddress\u2019-returns-an-address-that-represents-governance-\u2013-a-named-return-variable-would-offer-no-additional-information-and-reduce-readability.-in-certain-cases-we-have-updated-natspec-comments-with-return-value-description-for-ensured-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Renaming suggestions", "body": "[N04] Renaming suggestions", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n04]-renaming-suggestions", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the source code may benefit from better naming. Our suggestions are:", "body": "To favor explicitness and readability, several parts of the source code may benefit from better naming. Our suggestions are:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-favor-explicitness-and-readability,-several-parts-of-the-source-code-may-benefit-from-better-naming.-our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "In the Governance contract:", "body": "In the Governance contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-governance-contract:", "labels": ["OpenZeppelin"]}, {"title": "No to Rejected.", "body": "No to Rejected.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#no-to-rejected.", "labels": ["OpenZeppelin"]}, {"title": "Yes to Approved or ExecutedSuccessfully.", "body": "Yes to Approved or ExecutedSuccessfully.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#yes-to-approved-or-executedsuccessfully.", "labels": ["OpenZeppelin"]}, {"title": "TxFailed to ExecutedWithFailure.", "body": "TxFailed to ExecutedWithFailure.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#txfailed-to-executedwithfailure.", "labels": ["OpenZeppelin"]}, {"title": "startBlockNumber to submissionBlockNumber.", "body": "startBlockNumber to submissionBlockNumber.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#startblocknumber-to-submissionblocknumber.", "labels": ["OpenZeppelin"]}, {"title": "signature to functionSignature.", "body": "signature to functionSignature.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#signature-to-functionsignature.", "labels": ["OpenZeppelin"]}, {"title": "submitProposalVote to submitVote.", "body": "submitProposalVote to submitVote.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#submitproposalvote-to-submitvote.", "labels": ["OpenZeppelin"]}, {"title": "In the ClaimsManager contract:", "body": "In the ClaimsManager contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-claimsmanager-contract:", "labels": ["OpenZeppelin"]}, {"title": "fundBlock to fundedBlock.", "body": "fundBlock to fundedBlock.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#fundblock-to-fundedblock.", "labels": ["OpenZeppelin"]}, {"title": "fundingAmount to fundedAmount.", "body": "fundingAmount to fundedAmount.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#fundingamount-to-fundedamount.", "labels": ["OpenZeppelin"]}, {"title": "_address to _stakingAddress.", "body": "_address to _stakingAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_address-to-_stakingaddress.", "labels": ["OpenZeppelin"]}, {"title": "_spFactory to _serviceProviderFactoryAddress.", "body": "_spFactory to _serviceProviderFactoryAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_spfactory-to-_serviceproviderfactoryaddress.", "labels": ["OpenZeppelin"]}, {"title": "_delegateManager to _delegateManagerAddress.", "body": "_delegateManager to _delegateManagerAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_delegatemanager-to-_delegatemanageraddress.", "labels": ["OpenZeppelin"]}, {"title": "In the ServiceProviderFactory contract:", "body": "In the ServiceProviderFactory contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-serviceproviderfactory-contract:", "labels": ["OpenZeppelin"]}, {"title": "UpdateEndpoint to EndpointUpdated.", "body": "UpdateEndpoint to EndpointUpdated.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#updateendpoint-to-endpointupdated.", "labels": ["OpenZeppelin"]}, {"title": "sp to serviceEndpoint.", "body": "sp to serviceEndpoint.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#sp-to-serviceendpoint.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request 595. Some functions or variables\u2019 names that derive from the suggestions are still using the old nomenclature such as in the getLastFundBlock function from the ClaimsManager contract.", "body": "Update: Partially fixed in pull request 595. Some functions or variables\u2019 names that derive from the suggestions are still using the old nomenclature such as in the getLastFundBlock function from the ClaimsManager contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-595.-some-functions-or-variables\u2019-names-that-derive-from-the-suggestions-are-still-using-the-old-nomenclature-such-as-in-the-getlastfundblock-function-from-the-claimsmanager-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 657.", "body": "Update: Fixed in pull request 657.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-657.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Declaring two variables for some addresses", "body": "[N05] Declaring two variables for some addresses", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n05]-declaring-two-variables-for-some-addresses", "labels": ["OpenZeppelin"]}, {"title": "tokenAddress and", "body": "tokenAddress and", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#tokenaddress-and", "labels": ["OpenZeppelin"]}, {"title": "audiusToken of the", "body": "audiusToken of the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#audiustoken-of-the", "labels": ["OpenZeppelin"]}, {"title": "registry and", "body": "registryAddress of the  It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.  Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.  Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses variables have been removed.  [N06] Not declaring uint as uint256  In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol  To favor explicitness and consistency, consider declaring all instances of uint as uint256.  Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.  Update: Fully fixed in pull request #657.  Conclusions  3 critical and 12 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Update: The Audius team fixed all the critical, high, and medium severity issues that we reported.  Additional security recommendations  Note: The following recommendations were made after the Audius team had already addressed the issues from our initial audit.  Audius has a lot of moving parts: A delegated staking system, a rewards program, a registration system, a voting and governance system, and a slashing mechanism. The code to implement all these moving parts is complex, and there are a lot of interactions between the various systems. We have done our best to raise as many valuable security issues as we could find during our time-limited engagement. However, we cannot guarantee that weve found all the bugs or enumerated all the risks in the Audius system.  Given the complexity of this system, and the large number of users that may interact with it, consider applying the following recommendations to further reduce the attack surface, mitigate risk, and get more eyes on the code:  Beta testing: Consider engaging a community of early adopters to put the system under test with conditions as close to mainnet as possible.  Bug bounty: Consider implementing a bug bounty program to get more eyes on the code, and to incentivize hackers to contribute with the system instead of attacking it.  Future reaudit: Given the high number of critical and high severity issues found during this audit, the number of changes that were made as a result, and the complex interactions between the various systems, we suggest the Audius team to analyze the results of the beta testing and bug bounty to decide if the code should be reaudited with a fresh set of eyes.  Security contact info: To make it easier for independent security researchers to contact Audius with any issues they may find, consider adding security contact info to the audius-protocol repo and/or the Audius website.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#registry-and", "labels": ["OpenZeppelin"]}, {"title": "registryAddress of the", "body": "registryAddress of the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#registryaddress-of-the", "labels": ["OpenZeppelin"]}, {"title": "It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.", "body": "It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#it-is-not-clear-why-the-two-variables-are-declared.-with-the-address-it-is-possible-to-get-the-deployed-contract-instance,-and-from-the-deployed-contract-instance-it-is-possible-to-get-the-address,-so-there-seems-to-be-unnecessary-duplication.", "labels": ["OpenZeppelin"]}, {"title": "Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.", "body": "Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-refactoring-the-code-to-use-only-variable-for-the-address-or-for-the-contract-instance,-to-slightly-reduce-the-number-of-lines-of-code-to-maintain-and-the-number-of-variables-to-keep-track-of.-if-there-is-a-reason-to-declare-both,-consider-documenting-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses\u2019 variables have been removed.", "body": "Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses\u2019 variables have been removed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#590.-only-the-instance-variables-are-now-stored,-all-addresses\u2019-variables-have-been-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Not declaring uint as uint256", "body": "[N06] Not declaring uint as uint256", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n06]-not-declaring-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol", "body": "In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-most-parts-of-the-code-variables-are-declared-as-uint-instead-of-uint256.-for-example,-in-lines-52-to-54-of-claimsmanager.sol", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and consistency, consider declaring all instances of uint as uint256.", "body": "To favor explicitness and consistency, consider declaring all instances of uint as uint256.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-favor-explicitness-and-consistency,-consider-declaring-all-instances-of-uint-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.", "body": "Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#593.-there-are-still-cases,-such-as-in-the-claimsmanager-contract,-where-the-variables-are-defined-as-uint-instead-of-explicitly-make-use-of-the-uint256-type.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fully fixed in pull request #657.", "body": "Update: Fully fixed in pull request #657.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fully-fixed-in-pull-request-#657.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Code with testing purposes might be deployed", "body": "[N01] Code with testing purposes might be deployed", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n01]-code-with-testing-purposes-might-be-deployed", "labels": ["OpenZeppelin"]}, {"title": "Even though the code base is still under heavy development and will not be launched to production soon, it should strive to always follow best practices of code cleanliness to avoid future errors.", "body": "Even though the code base is still under heavy development and will not be launched to production soon, it should strive to always follow best practices of code cleanliness to avoid future errors.", "html_url": "https://blog.openzeppelin.com/primitive-audit#even-though-the-code-base-is-still-under-heavy-development-and-will-not-be-launched-to-production-soon,-it-should-strive-to-always-follow-best-practices-of-code-cleanliness-to-avoid-future-errors.", "labels": ["OpenZeppelin"]}, {"title": "In particular, consider removing any lines of code from the contracts that were included for testing purposes. These leftovers from tests in the contracts could lead to the deployment of undesired code. For instance, it seems that the use of weth in the constructor of the Trader contract was solely intended for testing purposes.", "body": "In particular, consider removing any lines of code from the contracts that were included for testing purposes. These leftovers from tests in the contracts could lead to the deployment of undesired code. For instance, it seems that the use of weth in the constructor of the Trader contract was solely intended for testing purposes.", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-particular,-consider-removing-any-lines-of-code-from-the-contracts-that-were-included-for-testing-purposes.-these-leftovers-from-tests-in-the-contracts-could-lead-to-the-deployment-of-undesired-code.-for-instance,-it-seems-that-the-use-of-weth-in-the-constructor-of-the-trader-contract-was-solely-intended-for-testing-purposes.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, for improved readability, consider using smaller names and symbols for the Option and Redeem tokens.", "body": "Additionally, for improved readability, consider using smaller names and symbols for the Option and Redeem tokens.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-for-improved-readability,-consider-using-smaller-names-and-symbols-for-the-option-and-redeem-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed.", "body": "Low severity  [L01] Erroneous data logged in events  The Close event should emit the callers address and the number of options sent in, but it is actually logs the receiver address and the number of underlying tokens sent out.  The Redeem event should emit the callers address, but it actually logs the receiver address.  The Exercise event should emit the callers address, but it actually logs the receiver address.  The Mint event should emit the callers address, but it actually logs the receivers address.  Update: Fixed in PR #25. Event definitions and logged data now match.  [L02] External call does not check if target is contract  The Option contract performs external function calls during its execution to user-controlled addresses. An example can be seen in the exercise function, where the receiver argument is implicitly assumed to be a contract.  While this issue does not pose a security risk, consider always using the Address library from OpenZeppelin Contracts to explicitly validate whether user-controlled targets of external calls are indeed contracts.    [L03] Naming issues hinder code understanding and readability  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Consider renaming the following functions and variables:  parameters to optionParameters.  take to withdrawUnusedFunds.  update to updateCacheBalances.  tokens to getAssetAddresses.  redeem to redeemStrikeTokens.  exercise to exerciseOptions.  mint to mintOptions.  _fund to _updateCacheBalances.  caches to getCacheBalances.  strikeToken to getStrikeTokenAddress.  underlyingToken to getUnderlyingTokenAddress.  base to getBaseValue.  quote to getQuoteValue.  expiry to getExpiryTime.  Update: Fixed in PR #26.  [L04] Incomplete IRedeem and IOption interfaces  Redeem and  Option contracts inherit from OpenZeppelin Contracts  ERC20 contract, the corresponding interfaces  IRedeem and  IOption do not inherit from the  IERC20 interface.  To favor explicitness and avoid unexpected errors when using the IRedeem and IOption interfaces, consider inheriting from the IERC20 interface in the IRedeem and IOption interfaces.  Update: Fixed in PR #27.  [L05] Lack of input validation in Option contracts initialization  The initialize function of the Option contract does not validate the initialization parameters passed. In particular:  The underlyingToken and strikeToken addresses could reference the same token.  The base and quote parameters can be set to zero, which can introduce unexpected division-by-zero errors in other operations.  The expiry time can be set in the past (that is, lower than the current blocks timestamp).  To avoid errors and explicitly restrict the type of options that can be created, consider implementing require clauses where appropriate to validate all user-controlled input.  Update: Fixed in PR #28.  [L06] Missing check in initRedeemToken function  OptionFactory contract can call the  initialize function which in turns calls the  initRedeemToken function in the  Option contract. The owner of the  Registry contract which deploys the factory contract by calling the  deployOption function.  In summary, Option contracts are deployed via the factory, and the factory is owned by the registry, and there does not seem to be a way of setting the redeem token for an option twice. However, future changes to the code base might introduce viable ways of doing it.  Since setting the redeem token is an important functionality of the Primitive protocol, in order to reduce the attack surface, consider adding an explicit check in the initRedeemToken function that verifies that the address of redeemToken is zero before setting it to the passed _redeemToken address.  Update: Fixed in PR #29.  [L07] Missing docstrings  Some of the contracts and functions in Primitives code base lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec), as addressed in the issue [N04] Not following the Ethereum Natural Specification Format.  Update: Partially fixed. While there is no PR covering this particular issue, overall improvements have been made in terms of docstrings. However, there are still exposed functions without docstrings (see the initialize function of Redeem contract as an example).  [L08] Multiple conditions in a single require statement  There is a single require statement with multiple conditions in lines 241 to 243 of Option.sol. Consider isolating each condition in its own require statement, so as to be able to include specific user-friendly error messages for every required condition.  Update: Fixed in PR #30.  [L09] Repetitive getters and public state variables  parameters which is marked as  getParameters which returns the value of  Additionally, there are other getter functions such as tokens, strikeToken, underlyingToken (and more) that return the value of individual variables of the parameters struct or a combination of them.  underlyingCache,  strikeCache,  redeemToken in  caches and  Moreover, other public variables in the code base that do not have explicit associated getters are:  factory in the Option contract.  factory, optionToken and redeemableToken in the Redeem contract.  To favor encapsulation, readability and explicitness, consider removing the repetitive functions, ensuring that there is at most one publicly exposed getter for each contract state variable.    [L10] Unified pausing and unpausing functionality  The Option contract allows the factory account to perform important actions over the contract. Among them, this privileged account can pause and unpause certain operations in the Option contract via the kill function.  Given pausing and unpausing are two different use cases, and they might involve specific business logic particular to each one in future versions of the protocol (such as different timelock mechanisms), consider splitting the pausing and unpausing logic into two different functions. Additionally, the Primitive team might need to consider whether pausing and unpausing should be executed by the same privileged account, or by different accounts that do not share privileges.  Update: Fixed by removing the pausing functionality altogether in PR #20.  [L11] Duplicate variables and unnecessary lines of code  redeem function where  the variable inRedeems is assigned the value of the variable redeemBalance. While  line 271.  Also, in line 281, the variable redeemBalance is assigned a new value which remains unused. Since this line of code is unnecessary, it can be removed.  Similar issues can be found in the close function of the Option contract.  To favor readability and avoid confusions, consider removing all unnecessary assignments, and avoiding using multiple variables for the same purpose.  Update: Fixed in PR #31.  Notes & Additional Information  [N01] Code with testing purposes might be deployed  Even though the code base is still under heavy development and will not be launched to production soon, it should strive to always follow best practices of code cleanliness to avoid future errors.  In particular, consider removing any lines of code from the contracts that were included for testing purposes. These leftovers from tests in the contracts could lead to the deployment of undesired code. For instance, it seems that the use of weth in the constructor of the Trader contract was solely intended for testing purposes.  Additionally, for improved readability, consider using smaller names and symbols for the Option and Redeem tokens.    [N02] Inconsistent coding style  The code base does not always follow a consistent coding style. Some cases identified in the Option contract are:  It inherits the properties from the OpenZeppelins ERC20 contract and with it, the balanceOf function. Nevertheless, the Option contract calls this function in 2 different ways in line 124 and in line 238.  The revert reasons, such as the one in line 222, display in capital letters and underscores a brief error message. However, given the contracts also use contracts from OpenZeppelin Contracts, such as Pausable, the style of revert reasons are not going to be consistent across the code base.  Some functions declare the return variable in the function definition, and then copy a state variables value into the implicit return variables instead of directly returning the value of the state variables. Furthermore, this style is not consistent across all functions, where getters from the same contract return directly the state variable instead of copying into a new one.  Consider fixing this inconsistent styles to improve the projects readability. As reference, consider always following the style proposed in Soliditys Style Guide. Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Partially fixed.  [N03] Named return variables  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.    [N04] Not following the Ethereum Natural Specification Format  Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts public API.    [N05] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.    [N06] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.    [N07] Unnecessary library  The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.  To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.  Update: Fixed in PR #32.  [N08] Unused import statements  In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:  IERC20 in the Redeem contract.  ERC20, IERC20, and SafeERC20 in the Trader contract.  Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.  Update: Fixed in PR #33.  [N09] Unused state variables  Redeem contract declares a variable  redeemableToken which is later assigned in the  initialize function. The  deployOption function in the  calls the deploy function present in the  RedeemFactory contract, which in turn  calls the initialize function present in the  Redeem contract and sets the value of  Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.  In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.    Conclusions  Originally, 3 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. As stated in the Update section, and in each particular issue as well, all severe issues identified have been either acknowledged (by considering them inherent to the systems design) or correctly fixed.  We audited an early version of the Primitive project that is a work-in-progress and not yet ready for production. This first audit round has been Primitives initial step on its way to reach the needed level of maturity for projects intended to handle large sums of financial assets. To further help the project reach a production-ready state, we highly advise additional rounds of security reviews.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-not-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inconsistent coding style", "body": "[N02] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n02]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "The code base does not always follow a consistent coding style. Some cases identified in the Option contract are:", "body": "The code base does not always follow a consistent coding style. Some cases identified in the Option contract are:", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-code-base-does-not-always-follow-a-consistent-coding-style.-some-cases-identified-in-the-option-contract-are:", "labels": ["OpenZeppelin"]}, {"title": "It inherits the properties from the OpenZeppelin\u2019s ERC20 contract and with it, the balanceOf function. Nevertheless, the Option contract calls this function in 2 different ways in line 124 and in line 238.", "body": "It inherits the properties from the OpenZeppelin\u2019s ERC20 contract and with it, the balanceOf function. Nevertheless, the Option contract calls this function in 2 different ways in line 124 and in line 238.", "html_url": "https://blog.openzeppelin.com/primitive-audit#it-inherits-the-properties-from-the-openzeppelin\u2019s-erc20-contract-and-with-it,-the-balanceof-function.-nevertheless,-the-option-contract-calls-this-function-in-2-different-ways-in-line-124-and-in-line-238.", "labels": ["OpenZeppelin"]}, {"title": "The revert reasons, such as the one in line 222, display in capital letters and underscores a brief error message. However, given the contracts also use contracts from OpenZeppelin Contracts, such as Pausable, the style of revert reasons are not going to be consistent across the code base.", "body": "The revert reasons, such as the one in line 222, display in capital letters and underscores a brief error message. However, given the contracts also use contracts from OpenZeppelin Contracts, such as Pausable, the style of revert reasons are not going to be consistent across the code base.", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-revert-reasons,-such-as-the-one-in-line-222,-display-in-capital-letters-and-underscores-a-brief-error-message.-however,-given-the-contracts-also-use-contracts-from-openzeppelin-contracts,-such-as-pausable,-the-style-of-revert-reasons-are-not-going-to-be-consistent-across-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Some functions declare the return variable in the function definition, and then copy a state variable\u2019s value into the implicit return variables instead of directly returning the value of the state variables. Furthermore, this style is not consistent across all functions, where getters from the same contract return directly the state variable instead of copying into a new one.", "body": "Some functions declare the return variable in the function definition, and then copy a state variable\u2019s value into the implicit return variables instead of directly returning the value of the state variables. Furthermore, this style is not consistent across all functions, where getters from the same contract return directly the state variable instead of copying into a new one.", "html_url": "https://blog.openzeppelin.com/primitive-audit#some-functions-declare-the-return-variable-in-the-function-definition,-and-then-copy-a-state-variable\u2019s-value-into-the-implicit-return-variables-instead-of-directly-returning-the-value-of-the-state-variables.-furthermore,-this-style-is-not-consistent-across-all-functions,-where-getters-from-the-same-contract-return-directly-the-state-variable-instead-of-copying-into-a-new-one.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing this inconsistent styles to improve the project\u2019s readability. As reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Consider fixing this inconsistent styles to improve the project\u2019s readability. As reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/primitive-audit#consider-fixing-this-inconsistent-styles-to-improve-the-project\u2019s-readability.-as-reference,-consider-always-following-the-style-proposed-in-solidity\u2019s-style-guide.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed.", "body": "[N03] Named return variables  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.  Update: Not fixed.  [N04] Not following the Ethereum Natural Specification Format  Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts public API.  Update: Not fixed.  [N05] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.  Update: Not fixed.  [N06] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Not fixed.  [N07] Unnecessary library  The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.  To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.  Update: Fixed in PR #32.  [N08] Unused import statements  In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:  IERC20 in the Redeem contract.  ERC20, IERC20, and SafeERC20 in the Trader contract.  Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.  Update: Fixed in PR #33.  [N09] Unused state variables  Redeem contract declares a variable  redeemableToken which is later assigned in the  initialize function. The  deployOption function in the  calls the deploy function present in the  RedeemFactory contract, which in turn  calls the initialize function present in the  Redeem contract and sets the value of  Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.  In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.  Update: Not fixed.  Conclusions  Originally, 3 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. As stated in the Update section, and in each particular issue as well, all severe issues identified have been either acknowledged (by considering them inherent to the systems design) or correctly fixed.  We audited an early version of the Primitive project that is a work-in-progress and not yet ready for production. This first audit round has been Primitives initial step on its way to reach the needed level of maturity for projects intended to handle large sums of financial assets. To further help the project reach a production-ready state, we highly advise additional rounds of security reviews.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-partially-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Named return variables", "body": "[N03] Named return variables", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n03]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "body": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/primitive-audit#consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-explicitness-and-readability-of-the-code,-and-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Not following the Ethereum Natural Specification Format", "body": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts public API.  Update: Not fixed.  [N05] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.  Update: Not fixed.  [N06] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Not fixed.  [N07] Unnecessary library  The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.  To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.  Update: Fixed in PR #32.  [N08] Unused import statements  In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:  IERC20 in the Redeem contract.  ERC20, IERC20, and SafeERC20 in the Trader contract.  Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.  Update: Fixed in PR #33.  [N09] Unused state variables  Redeem contract declares a variable  redeemableToken which is later assigned in the  initialize function. The  deployOption function in the  calls the deploy function present in the  RedeemFactory contract, which in turn  calls the initialize function present in the  Redeem contract and sets the value of  Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.  In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.  Update: Not fixed.  Conclusions  Originally, 3 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. As stated in the Update section, and in each particular issue as well, all severe issues identified have been either acknowledged (by considering them inherent to the systems design) or correctly fixed.  We audited an early version of the Primitive project that is a work-in-progress and not yet ready for production. This first audit round has been Primitives initial step on its way to reach the needed level of maturity for projects intended to handle large sums of financial assets. To further help the project reach a production-ready state, we highly advise additional rounds of security reviews.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n04]-not-following-the-ethereum-natural-specification-format", "labels": ["OpenZeppelin"]}, {"title": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts\u2019 public API.", "body": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts\u2019 public API.", "html_url": "https://blog.openzeppelin.com/primitive-audit#most-of-the-docstrings-in-the-code-base-are-not-fully-following-the-ethereum-natural-specification-format-(natspec).-consider-following-this-specification-on-everything-that-is-part-of-a-contracts\u2019-public-api.", "labels": ["OpenZeppelin"]}, {"title": "[N05] OpenZeppelin Contract\u2019s dependency is not pinned", "body": "[N05] OpenZeppelin Contract\u2019s dependency is not pinned", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n05]-openzeppelin-contract\u2019s-dependency-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "body": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "html_url": "https://blog.openzeppelin.com/primitive-audit#to-prevent-unexpected-behaviors-in-case-breaking-changes-are-released-in-future-updates-of-the-openzeppelin-contracts\u2019s-library,-consider-pinning-the-version-of-this-dependency-in-the-package.json-file.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Solidity compiler version is not pinned", "body": "[N06] Solidity compiler version is not pinned", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n06]-solidity-compiler-version-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "body": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "html_url": "https://blog.openzeppelin.com/primitive-audit#throughout-the-code-base,-consider-pinning-the-version-of-the-solidity-compiler-to-its-latest-stable-version.-this-should-help-prevent-introducing-unexpected-bugs-due-to-incompatible-future-releases.-to-choose-a-specific-version,-developers-should-consider-both-the-compiler\u2019s-features-needed-by-the-project-and-the-list-of-known-bugs-associated-with-each-solidity-compiler-version.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unnecessary library", "body": "[N07] Unnecessary library", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n07]-unnecessary-library", "labels": ["OpenZeppelin"]}, {"title": "The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.", "body": "The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-primitives-library-consists-of-only-a-struct-option-and-has-no-other-functions-or-variables-in-it.-this-struct-is-solely-used-in-the-option-contract.", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.", "body": "To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.", "html_url": "https://blog.openzeppelin.com/primitive-audit#to-favor-simplicity,-consider-moving-the-option-struct-to-the-option-contract-and-removing-the-primitive-library-from-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #32.", "body": "Update: Fixed in PR #32.", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-fixed-in-pr-#32.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused import statements", "body": "[N08] Unused import statements", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n08]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:", "body": "In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-the-code-base,-there-are-places-in-which-contracts-are-imported-but-are-never-used.-consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "IERC20 in the Redeem contract.", "body": "IERC20 in the Redeem contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#ierc20-in-the-redeem-contract.", "labels": ["OpenZeppelin"]}, {"title": "ERC20, IERC20, and SafeERC20 in the Trader contract.", "body": "ERC20, IERC20, and SafeERC20 in the Trader contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#erc20,-ierc20,-and-safeerc20-in-the-trader-contract.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.", "body": "Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-the-traderlib-library-imports-the-ierc20-interface-from-the-erc20.sol-file,-while-it-could-directly-import-the-ierc20-interface-from-the-ierc20.sol-file.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #33.", "body": "Update: Fixed in PR #33.", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-fixed-in-pr-#33.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unused state variables", "body": "[N09] Unused state variables", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n09]-unused-state-variables", "labels": ["OpenZeppelin"]}, {"title": "Redeem contract declares a variable", "body": "Redeem contract declares a variable", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeem-contract-declares-a-variable", "labels": ["OpenZeppelin"]}, {"title": "redeemableToken which is later assigned in the", "body": "redeemableToken which is later assigned in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeemabletoken-which-is-later-assigned-in-the", "labels": ["OpenZeppelin"]}, {"title": "initialize function. The", "body": "initialize function. The", "html_url": "https://blog.openzeppelin.com/primitive-audit#initialize-function.-the", "labels": ["OpenZeppelin"]}, {"title": "deployOption function in the", "body": "deployOption function in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#deployoption-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "calls the deploy function present in the", "body": "calls the deploy function present in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#calls-the-deploy-function-present-in-the", "labels": ["OpenZeppelin"]}, {"title": "RedeemFactory contract, which in turn", "body": "RedeemFactory contract, which in turn", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeemfactory-contract,-which-in-turn", "labels": ["OpenZeppelin"]}, {"title": "calls the initialize function present in the", "body": "calls the initialize function present in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#calls-the-initialize-function-present-in-the", "labels": ["OpenZeppelin"]}, {"title": "Redeem contract and sets the value of", "body": "Redeem contract and sets the value of", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeem-contract-and-sets-the-value-of", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.", "body": "Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-the-trader-contract-declares-a-variable-weth-which-is-initialized-in-the-constructor-but-is-not-used-anywhere-in-the-code.", "labels": ["OpenZeppelin"]}, {"title": "In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.", "body": "In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-order-to-increase-code-readability-and-favor-simplicity,-consider-removing-the-state-variable-redeemabletoken-from-the-redeem-contract-(making-the-subsequent-necessary-code-changes).-similarly,-consider-removing-the-weth-state-variable-from-the-trader-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Superfluous code in _getFormattedStrikePrice", "body": "[N01] Superfluous code in _getFormattedStrikePrice", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n01]-superfluous-code-in-_getformattedstrikeprice", "labels": ["OpenZeppelin"]}, {"title": "line 987 of", "body": "line 987 of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-987-of", "labels": ["OpenZeppelin"]}, {"title": "initialized to 0 and cannot be otherwise changed", "body": "initialized to 0 and cannot be otherwise changed", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#initialized-to-0-and-cannot-be-otherwise-changed", "labels": ["OpenZeppelin"]}, {"title": "until after representativeAt has been changed. Additionally, since this change can only happen", "body": "until after representativeAt has been changed. Additionally, since this change can only happen", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#until-after-representativeat-has-been-changed.-additionally,-since-this-change-can-only-happen", "labels": ["OpenZeppelin"]}, {"title": "when representativeAt == -1, it follows that", "body": "when representativeAt == -1, it follows that", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#when-representativeat-==--1,-it-follows-that", "labels": ["OpenZeppelin"]}, {"title": "condition on line 1014 must always be true, since", "body": "condition on line 1014 must always be true, since", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#condition-on-line-1014-must-always-be-true,-since", "labels": ["OpenZeppelin"]}, {"title": "i is always 0 or greater. So, this", "body": "i is always 0 or greater. So, this", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#i-is-always-0-or-greater.-so,-this", "labels": ["OpenZeppelin"]}, {"title": "1014 and", "body": "1014 and", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#1014-and", "labels": ["OpenZeppelin"]}, {"title": "1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.", "body": "1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#1016-can-be-removed.-consider-making-the-changes-indicated-above.-doing-so-will-make-this-portion-of-the-code-clearer-for-future-developers.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #16.", "body": "Update: Fixed in pull request #16.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#16.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Superfluous check within _validateAndBurn", "body": "[N02] Superfluous check within _validateAndBurn", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n02]-superfluous-check-within-_validateandburn", "labels": ["OpenZeppelin"]}, {"title": "line 738 of", "body": "line 738 of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-738-of", "labels": ["OpenZeppelin"]}, {"title": "sub is called with", "body": "sub is called with", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#sub-is-called-with", "labels": ["OpenZeppelin"]}, {"title": "requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of", "body": "requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#requires-that-tokendata[account].amount-<=-balanceof(account).-while-this-does-not-cover-the-case-of", "labels": ["OpenZeppelin"]}, {"title": "tokenAmount is required to be > 0 and", "body": "tokenAmount is required to be > 0 and", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#tokenamount-is-required-to-be->-0-and", "labels": ["OpenZeppelin"]}, {"title": "the result of sub is required to be >= tokenAmount, there is no way for the case of", "body": "the result of sub is required to be >= tokenAmount, there is no way for the case of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-result-of-sub-is-required-to-be->=-tokenamount,-there-is-no-way-for-the-case-of", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the check on line 738.", "body": "Consider removing the check on line 738.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-removing-the-check-on-line-738.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #18.", "body": "Update: Fixed in pull request #18.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#18.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Check for updates to copied code", "body": "[N03] Check for updates to copied code", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n03]-check-for-updates-to-copied-code", "labels": ["OpenZeppelin"]}, {"title": "Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these \u201cimported\u201d libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.", "body": "Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these \u201cimported\u201d libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#many-contracts,-such-as-strings,-bokkypoobahsdatetimelibrary,-and-uniswapv2library-come-from-other-sources.-while-these-\u201cimported\u201d-libraries-can-be-useful-to-leverage-the-development-efforts-of-other-teams,-a-process-should-exist-to-check-these-contracts-for-updates.", "labels": ["OpenZeppelin"]}, {"title": "Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.", "body": "Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-establishing-a-cadence-for-regularly-checking-these-contracts-for-updates.-by-doing-so,-any-functionality-or-security-improvements-can-be-quickly-integrated-into-the-aco-repository.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. Auctus\u2019 statement for this issue:", "body": "The team is aware and will always check if new token pairs are supported, paying attention to the points mentioned.  [L08] Lack of indexed parameters  SetFactoryAdmin,  SetAcoTokenImplementation,  SetAcoFee and  SetAcoFeeDestination events in the  ACOFactory are indexed. The same is true for the  ProxyAdminUpdated and  SetImplementation events of the  ACOProxy contract.  Indexing parameters in these events allows the timeline of sensitive changes to be more easily tracked. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  Update: Partially fixed. The Auctus team decided to index event parameters in the ACOFactory contract in pull request #11, but not in ACOProxy as shown in pull request #15. Auctus statemement for this issue:  We indexed parameters in the ACOFactory. About the proxy parameters, we dont expect significant amount of data to justify changing our current proxy address.  [L09] An infinite loop may exist  infinite loop on line 665. The continuation condition for this loop is that  Considering the check following the loop (which checks that tokenAmount == 0) and the break condition for the loop which checks the same thing, it appears that the intention was for this loop to be exitable without using the break condition.  Consider changing the definition of i to int instead of uint.  Update: Fixed. They refactored the mentioned loop in different pull requests. Now it iterates over a maximum number of accounts that can be exercised for each call, shown in pull request #9.  [L10] underlyingPrecision can overflow  underlyingPrecision is defined within the  underlyingDecimals is set, there are no checks afterwards to ensure that  uint256 is roughly  Update: Fixed in pull request #10.  Notes & Additional Information  [N01] Superfluous code in _getFormattedStrikePrice  line 987 of  initialized to 0 and cannot be otherwise changed  until after representativeAt has been changed. Additionally, since this change can only happen  when representativeAt == -1, it follows that  condition on line 1014 must always be true, since  i is always 0 or greater. So, this  1014 and  1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.  Update: Fixed in pull request #16.  [N02] Superfluous check within _validateAndBurn  line 738 of  sub is called with  requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of  tokenAmount is required to be > 0 and  the result of sub is required to be >= tokenAmount, there is no way for the case of  Consider removing the check on line 738.  Update: Fixed in pull request #18.  [N03] Check for updates to copied code  Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these imported libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.  Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.    We will establish a process to regularly check updates  [N04] Lack of comments in _getFormattedStrikePrice  In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.  Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.  Update: Fixed in pull request #17.  [N05] Inaccurate docstrings  There are some inaccuracies in the docstrings describing the functions in the codebase.  Line 168 of the ACOToken contract should say first require instead of assert.  Line 610 of the ACOToken contract should say transferred instead of redeemed.  Update: Fixed in pull request #19.  [N06] Inaccurate error message  The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Fixed in pull request #20.  [N07] Typos in code  In the code, the following typos were found:  On line 11 of ACOToken.sol, the comment should say compliant instead of compliance.  On line 156 of ACOToken.sol, the comment should say prevent instead of prevents.  On line 965 of ACOToken.sol, the function should say Characters instead of Caracters. This change should also be made in the function calls on lines 903, 907, and 908.  On line 147 of ACOFlashExercise.sol, the comment should say to be called instead of to called.  Update: Fixed in pull request #21.  [N08] IUniswapV2Router01.sol is unused  The IUniswapV2Router01 interface is not used within the contracts and can be safely removed.  Consider removing the file from the repository. If it is intended to be used, consider implementing it or documenting the reason for keeping it.  Update: Fixed in pull request #23. The file has been renamed to IUniswapV2Router02.sol and it has been modified to add a new interface that now is being used.  [N09] Expiration definition mismatches the actual behaviour  expiryTime passed as input parameter in the  _notExpired internal function. There,  Consider adding the proper comments in the docstrings and in the documentation or providing a better name for such variable in order to clarify its purpose and make easier the task of understanding the code properly.  Update: Fixed in pull request #24. _notExpired now returns false when now == expiryTime.  Conclusion  No critical and one high severity issue was found. Some changes were proposed to improve the usability of the code and the overall user experience.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-acknowledged.-auctus\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We will establish a process to regularly check updates", "body": "We will establish a process to regularly check updates", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#we-will-establish-a-process-to-regularly-check-updates", "labels": ["OpenZeppelin"]}, {"title": "[N04] Lack of comments in _getFormattedStrikePrice", "body": "[N04] Lack of comments in _getFormattedStrikePrice", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n04]-lack-of-comments-in-_getformattedstrikeprice", "labels": ["OpenZeppelin"]}, {"title": "In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.", "body": "In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#in-the-_getformattedstrikeprice-function-of-the-acotoken-contract,-there-is-not-enough-information-in-the-docstrings-about-how-the-function-should-behave-and-what-is-doing.", "labels": ["OpenZeppelin"]}, {"title": "Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.", "body": "Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#given-the-intrinsic-complexity-of-the-function,-consider-giving-a-short-explanation-of-how-the-function-works,-either-through-natspec-comments-or-inline-comments,-so-that-readers-can-have-a-clearer-understanding-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #17.", "body": "Update: Fixed in pull request #17.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#17.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inaccurate docstrings", "body": "[N05] Inaccurate docstrings", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n05]-inaccurate-docstrings", "labels": ["OpenZeppelin"]}, {"title": "There are some inaccuracies in the docstrings describing the functions in the codebase.", "body": "There are some inaccuracies in the docstrings describing the functions in the codebase.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#there-are-some-inaccuracies-in-the-docstrings-describing-the-functions-in-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Line 168 of the ACOToken contract should say \u201cfirst require\u201d instead of \u201cassert\u201c.", "body": "Line 168 of the ACOToken contract should say \u201cfirst require\u201d instead of \u201cassert\u201c.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-168-of-the-acotoken-contract-should-say-\u201cfirst-require\u201d-instead-of-\u201cassert\u201c.", "labels": ["OpenZeppelin"]}, {"title": "Line 610 of the ACOToken contract should say \u201ctransferred\u201d instead of \u201credeemed\u201d.", "body": "Line 610 of the ACOToken contract should say \u201ctransferred\u201d instead of \u201credeemed\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-610-of-the-acotoken-contract-should-say-\u201ctransferred\u201d-instead-of-\u201credeemed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #19.", "body": "Update: Fixed in pull request #19.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#19.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inaccurate error message", "body": "[N06] Inaccurate error message", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n06]-inaccurate-error-message", "labels": ["OpenZeppelin"]}, {"title": "The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.", "body": "The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-error-message-on-line-459-of-acotoken.sol-indicates-that-there-is-no-allowance-for-msg.sender-from-account.-a-more-accurate-error-message-would-be-acotoken::redeemfrom:-allowance-too-low.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issue-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #20.", "body": "Update: Fixed in pull request #20.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#20.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Typos in code", "body": "[N07] Typos in code", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n07]-typos-in-code", "labels": ["OpenZeppelin"]}, {"title": "In the code, the following typos were found:", "body": "In the code, the following typos were found:", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#in-the-code,-the-following-typos-were-found:", "labels": ["OpenZeppelin"]}, {"title": "On line 11 of ACOToken.sol, the comment should say \u201ccompliant\u201d instead of \u201ccompliance\u201d.", "body": "On line 11 of ACOToken.sol, the comment should say \u201ccompliant\u201d instead of \u201ccompliance\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-11-of-acotoken.sol,-the-comment-should-say-\u201ccompliant\u201d-instead-of-\u201ccompliance\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 156 of ACOToken.sol, the comment should say \u201cprevent\u201d instead of \u201cprevents\u201d.", "body": "On line 156 of ACOToken.sol, the comment should say \u201cprevent\u201d instead of \u201cprevents\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-156-of-acotoken.sol,-the-comment-should-say-\u201cprevent\u201d-instead-of-\u201cprevents\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 965 of ACOToken.sol, the function should say \u201cCharacters\u201d instead of \u201cCaracters\u201d. This change should also be made in the function calls on lines 903, 907, and 908.", "body": "On line 965 of ACOToken.sol, the function should say \u201cCharacters\u201d instead of \u201cCaracters\u201d. This change should also be made in the function calls on lines 903, 907, and 908.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-965-of-acotoken.sol,-the-function-should-say-\u201ccharacters\u201d-instead-of-\u201ccaracters\u201d.-this-change-should-also-be-made-in-the-function-calls-on-lines-903,-907,-and-908.", "labels": ["OpenZeppelin"]}, {"title": "On line 147 of ACOFlashExercise.sol, the comment should say \u201cto be called\u201d instead of \u201cto called\u201d.", "body": "On line 147 of ACOFlashExercise.sol, the comment should say \u201cto be called\u201d instead of \u201cto called\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-147-of-acoflashexercise.sol,-the-comment-should-say-\u201cto-be-called\u201d-instead-of-\u201cto-called\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #21.", "body": "Update: Fixed in pull request #21.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#21.", "labels": ["OpenZeppelin"]}, {"title": "[N08] IUniswapV2Router01.sol is unused", "body": "[N08] IUniswapV2Router01.sol is unused", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n08]-iuniswapv2router01.sol-is-unused", "labels": ["OpenZeppelin"]}, {"title": "The IUniswapV2Router01 interface is not used within the contracts and can be safely removed.", "body": "The IUniswapV2Router01 interface is not used within the contracts and can be safely removed.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-iuniswapv2router01-interface-is-not-used-within-the-contracts-and-can-be-safely-removed.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the file from the repository. If it is intended to be used, consider implementing it or documenting the reason for keeping it.", "body": "Consider removing the file from the repository. If it is intended to be used, consider implementing it or documenting the reason for keeping it.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-removing-the-file-from-the-repository.-if-it-is-intended-to-be-used,-consider-implementing-it-or-documenting-the-reason-for-keeping-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #23. The file has been renamed to IUniswapV2Router02.sol and it has been modified to add a new interface that now is being used.", "body": "Update: Fixed in pull request #23. The file has been renamed to IUniswapV2Router02.sol and it has been modified to add a new interface that now is being used.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#23.-the-file-has-been-renamed-to-iuniswapv2router02.sol-and-it-has-been-modified-to-add-a-new-interface-that-now-is-being-used.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Expiration definition mismatches the actual behaviour", "body": "[N09] Expiration definition mismatches the actual behaviour", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n09]-expiration-definition-mismatches-the-actual-behaviour", "labels": ["OpenZeppelin"]}, {"title": "expiryTime passed as input parameter in the", "body": "expiryTime passed as input parameter in the", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#expirytime-passed-as-input-parameter-in-the", "labels": ["OpenZeppelin"]}, {"title": "_notExpired internal function. There,", "body": "_notExpired internal function. There,", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#_notexpired-internal-function.-there,", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the proper comments in the docstrings and in the documentation or providing a better name for such variable in order to clarify its purpose and make easier the task of understanding the code properly.", "body": "Consider adding the proper comments in the docstrings and in the documentation or providing a better name for such variable in order to clarify its purpose and make easier the task of understanding the code properly.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-adding-the-proper-comments-in-the-docstrings-and-in-the-documentation-or-providing-a-better-name-for-such-variable-in-order-to-clarify-its-purpose-and-make-easier-the-task-of-understanding-the-code-properly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #24. _notExpired now returns false when now == expiryTime.", "body": "Update: Fixed in pull request #24. _notExpired now returns false when now == expiryTime.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#24.-_notexpired-now-returns-false-when-now-==-expirytime.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Prone-to-error implementation in UniswapConfig contract", "body": "[N01] Prone-to-error implementation in UniswapConfig contract", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n01]-prone-to-error-implementation-in-uniswapconfig-contract", "labels": ["OpenZeppelin"]}, {"title": "The UniswapConfig contract stores important configuration related to each of the 30 tokens the oracle\u2019s view can handle. Instead of tracking all information for the 30 tokens in standard, more appropriate, data structures such as mappings or arrays, the Compound team has decided to store all data in individual state variables. As a result, the UniswapConfig contract has 242 internal state variables.", "body": "The UniswapConfig contract stores important configuration related to each of the 30 tokens the oracle\u2019s view can handle. Instead of tracking all information for the 30 tokens in standard, more appropriate, data structures such as mappings or arrays, the Compound team has decided to store all data in individual state variables. As a result, the UniswapConfig contract has 242 internal state variables.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-uniswapconfig-contract-stores-important-configuration-related-to-each-of-the-30-tokens-the-oracle\u2019s-view-can-handle.-instead-of-tracking-all-information-for-the-30-tokens-in-standard,-more-appropriate,-data-structures-such-as-mappings-or-arrays,-the-compound-team-has-decided-to-store-all-data-in-individual-state-variables.-as-a-result,-the-uniswapconfig-contract-has-242-internal-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "While the current implementation may be more efficient in terms of gas costs, the team has heavily compromised on readability and ease of maintenance, which we consider fundamental factors for the project\u2019s long-term sustainability. This kind of error-prone implementations is discouraged and should only be applied after thorough testing, so as to ensure gas-savings benefits far outweigh the loss in code quality.", "body": "While the current implementation may be more efficient in terms of gas costs, the team has heavily compromised on readability and ease of maintenance, which we consider fundamental factors for the project\u2019s long-term sustainability. This kind of error-prone implementations is discouraged and should only be applied after thorough testing, so as to ensure gas-savings benefits far outweigh the loss in code quality.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#while-the-current-implementation-may-be-more-efficient-in-terms-of-gas-costs,-the-team-has-heavily-compromised-on-readability-and-ease-of-maintenance,-which-we-consider-fundamental-factors-for-the-project\u2019s-long-term-sustainability.-this-kind-of-error-prone-implementations-is-discouraged-and-should-only-be-applied-after-thorough-testing,-so-as-to-ensure-gas-savings-benefits-far-outweigh-the-loss-in-code-quality.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Implicit upcasting of uint112 variable", "body": "[N02] Implicit upcasting of uint112 variable", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n02]-implicit-upcasting-of-uint112-variable", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and code readability, consider explicitly casting the denominator variable from uint112 to uint224 in line 17 of UniswapLib.sol.", "body": "To favor explicitness and code readability, consider explicitly casting the denominator variable from uint112 to uint224 in line 17 of UniswapLib.sol.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-favor-explicitness-and-code-readability,-consider-explicitly-casting-the-denominator-variable-from-uint112-to-uint224-in-line-17-of-uniswaplib.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Code repetition", "body": "[N03] Code repetition", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n03]-code-repetition", "labels": ["OpenZeppelin"]}, {"title": "The source function of the UniswapAnchoredView contract appears to have been copied from the OpenOracleData contract. Similarly, the mul function appears to have been copied from the AnchoredView contract.", "body": "The source function of the UniswapAnchoredView contract appears to have been copied from the OpenOracleData contract. Similarly, the mul function appears to have been copied from the AnchoredView contract.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-source-function-of-the-uniswapanchoredview-contract-appears-to-have-been-copied-from-the-openoracledata-contract.-similarly,-the-mul-function-appears-to-have-been-copied-from-the-anchoredview-contract.", "labels": ["OpenZeppelin"]}, {"title": "To avoid code repetition, favoring reusability and maintenance, consider factoring out the mentioned functions into libraries to ensure they are only defined in one place, and then import them as needed in the contracts.", "body": "To avoid code repetition, favoring reusability and maintenance, consider factoring out the mentioned functions into libraries to ensure they are only defined in one place, and then import them as needed in the contracts.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-avoid-code-repetition,-favoring-reusability-and-maintenance,-consider-factoring-out-the-mentioned-functions-into-libraries-to-ensure-they-are-only-defined-in-one-place,-and-then-import-them-as-needed-in-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Copied code from Uniswap V2 Periphery repository", "body": "[N04] Copied code from Uniswap V2 Periphery repository", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n04]-copied-code-from-uniswap-v2-periphery-repository", "labels": ["OpenZeppelin"]}, {"title": "Uniswap V2 Periphery repository. To benefit from patches and new features in future releases, consider removing this library from the Open Price Feed\u2019s code base and instead import it once the", "body": "Uniswap V2 Periphery repository. To benefit from patches and new features in future releases, consider removing this library from the Open Price Feed\u2019s code base and instead import it once the", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#uniswap-v2-periphery-repository.-to-benefit-from-patches-and-new-features-in-future-releases,-consider-removing-this-library-from-the-open-price-feed\u2019s-code-base-and-instead-import-it-once-the", "labels": ["OpenZeppelin"]}, {"title": "released.", "body": "released.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#released.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Missing units", "body": "[N05] Missing units", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n05]-missing-units", "labels": ["OpenZeppelin"]}, {"title": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the anchorPeriod state variable is measured. Similarly, docstrings of the getUnderlyingPrice function should state the unit of the returned price.", "body": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the anchorPeriod state variable is measured. Similarly, docstrings of the getUnderlyingPrice function should state the unit of the returned price.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-avoid-errors-in-future-changes-to-the-code-base,-consider-using-an-inline-comment-to-clearly-state-in-which-units-the-anchorperiod-state-variable-is-measured.-similarly,-docstrings-of-the-getunderlyingprice-function-should-state-the-unit-of-the-returned-price.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Redundant boolean check", "body": "[N06] Redundant boolean check", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n06]-redundant-boolean-check", "labels": ["OpenZeppelin"]}, {"title": "Line 160 of UniswapAnchoreView.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "body": "Line 160 of UniswapAnchoreView.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#line-160-of-uniswapanchoreview.sol-explicitly-compares-a-boolean-value-to-true.-this-is-a-redundant-operation-because-the-result-will-be-equivalent-to-the-boolean-value-itself.-consider-removing-the-redundant-comparison.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Constants not declared explicitly", "body": "[N07] Constants not declared explicitly", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n07]-constants-not-declared-explicitly", "labels": ["OpenZeppelin"]}, {"title": "There are several occurrences of literal values with unexplained meaning:", "body": "There are several occurrences of literal values with unexplained meaning:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#there-are-several-occurrences-of-literal-values-with-unexplained-meaning:", "labels": ["OpenZeppelin"]}, {"title": "In UniswapLib.sol: lines 27 and 112.", "body": "In UniswapLib.sol: lines 27 and 112.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-uniswaplib.sol:-lines-27-and-112.", "labels": ["OpenZeppelin"]}, {"title": "In UniswapAnchoredView.sol: lines 77, 78, 79, 125, 174, 197 and 219.", "body": "In UniswapAnchoredView.sol: lines 77, 78, 79, 125, 174, 197 and 219.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-uniswapanchoredview.sol:-lines-77,-78,-79,-125,-174,-197-and-219.", "labels": ["OpenZeppelin"]}, {"title": "Literal values in the code base without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.", "body": "Literal values in the code base without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#literal-values-in-the-code-base-without-an-explained-meaning-make-the-code-harder-to-read,-understand-and-maintain,-thus-hindering-the-experience-of-developers,-auditors-and-external-contributors-alike.", "labels": ["OpenZeppelin"]}, {"title": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following Solidity\u2019s style guide, constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.", "body": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following Solidity\u2019s style guide, constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#developers-should-define-a-constant-variable-for-every-magic-value-used-(including-booleans),-giving-it-a-clear-and-self-explanatory-name.-additionally,-for-complex-values,-inline-comments-explaining-how-they-were-calculated-or-why-they-were-chosen-are-highly-recommended.-following-solidity\u2019s-style-guide,-constants-should-be-named-in-upper_case_with_underscores-format,-and-specific-public-getters-should-be-defined-to-read-each-one-of-them.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Naming", "body": "[N08] Naming", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n08]-naming", "labels": ["OpenZeppelin"]}, {"title": "In the UniswapAnchoredView contract:", "body": "In the UniswapAnchoredView contract:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-the-uniswapanchoredview-contract:", "labels": ["OpenZeppelin"]}, {"title": "The price function should be renamed to getPrice, getPriceInUsd or similar.", "body": "The price function should be renamed to getPrice, getPriceInUsd or similar.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-price-function-should-be-renamed-to-getprice,-getpriceinusd-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The priceInternal function should be renamed to getPriceInternal, getPrinceInternalInUsd or similar.", "body": "The priceInternal function should be renamed to getPriceInternal, getPrinceInternalInUsd or similar.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-priceinternal-function-should-be-renamed-to-getpriceinternal,-getprinceinternalinusd-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The acc field of the Observation struct should be renamed to make it more self-explanatory.", "body": "The acc field of the Observation struct should be renamed to make it more self-explanatory.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-acc-field-of-the-observation-struct-should-be-renamed-to-make-it-more-self-explanatory.", "labels": ["OpenZeppelin"]}, {"title": "The UniswapWindowUpdate event should be renamed to UniswapWindowUpdated.", "body": "The UniswapWindowUpdate event should be renamed to UniswapWindowUpdated.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-uniswapwindowupdate-event-should-be-renamed-to-uniswapwindowupdated.", "labels": ["OpenZeppelin"]}, {"title": "The AnchorPriceUpdate event should be renamed to AnchorPriceUpdated.", "body": "The AnchorPriceUpdate event should be renamed to AnchorPriceUpdated.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-anchorpriceupdate-event-should-be-renamed-to-anchorpriceupdated.", "labels": ["OpenZeppelin"]}, {"title": "The decoded_message variable should be renamed to decodedMessage.", "body": "The decoded_message variable should be renamed to decodedMessage.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-decoded_message-variable-should-be-renamed-to-decodedmessage.", "labels": ["OpenZeppelin"]}, {"title": "In the UniswapConfig contract:", "body": "In the UniswapConfig contract:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-the-uniswapconfig-contract:", "labels": ["OpenZeppelin"]}, {"title": "The i parameter in the getToken and get functions should be renamed to index.", "body": "The i parameter in the getToken and get functions should be renamed to index.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-i-parameter-in-the-gettoken-and-get-functions-should-be-renamed-to-index.", "labels": ["OpenZeppelin"]}, {"title": "The get function should be renamed with a more self-explanatory name.", "body": "The get function should be renamed with a more self-explanatory name.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-get-function-should-be-renamed-with-a-more-self-explanatory-name.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Inconsistent use of uint and uint256 types", "body": "[N09] Inconsistent use of uint and uint256 types", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n09]-inconsistent-use-of-uint-and-uint256-types", "labels": ["OpenZeppelin"]}, {"title": "Throughout the UniswapConfig contract, the uint and uint256 types are used interchangeably to declare 256-bit unsigned integers. To favor consistency, consider following the same convention on all these declarations.", "body": "Throughout the UniswapConfig contract, the uint and uint256 types are used interchangeably to declare 256-bit unsigned integers. To favor consistency, consider following the same convention on all these declarations.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#throughout-the-uniswapconfig-contract,-the-uint-and-uint256-types-are-used-interchangeably-to-declare-256-bit-unsigned-integers.-to-favor-consistency,-consider-following-the-same-convention-on-all-these-declarations.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Typographical errors", "body": "[N10] Typographical errors", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n10]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In line 193 of UniswapAnchoredView.sol, \u201cunsiwap\u201d should say \u201cUniswap\u201d.", "body": "In line 193 of UniswapAnchoredView.sol, \u201cunsiwap\u201d should say \u201cUniswap\u201d.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-line-193-of-uniswapanchoredview.sol,-\u201cunsiwap\u201d-should-say-\u201cuniswap\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Lack of explicit visibility in state variables", "body": "[N11] Lack of explicit visibility in state variables", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n11]-lack-of-explicit-visibility-in-state-variables", "labels": ["OpenZeppelin"]}, {"title": "The constant state variables ethHash and rotateHash of the UniswapAnchoredView contract are implicitly using the default visibility.", "body": "The constant state variables ethHash and rotateHash of the UniswapAnchoredView contract are implicitly using the default visibility.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-constant-state-variables-ethhash-and-rotatehash-of-the-uniswapanchoredview-contract-are-implicitly-using-the-default-visibility.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Unnecessary public visibility in functions", "body": "[N12] Unnecessary public visibility in functions", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n12]-unnecessary-public-visibility-in-functions", "labels": ["OpenZeppelin"]}, {"title": "The price and getUnderlyingPrice functions of the UniswapAnchoredViewContract are defined as public but are not being accessed from within this contract. Consider changing their visibility to external.", "body": "The price and getUnderlyingPrice functions of the UniswapAnchoredViewContract are defined as public but are not being accessed from within this contract. Consider changing their visibility to external.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-price-and-getunderlyingprice-functions-of-the-uniswapanchoredviewcontract-are-defined-as-public-but-are-not-being-accessed-from-within-this-contract.-consider-changing-their-visibility-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N01] WhitelistedRole and ERC20Mintable removed from OpenZeppelin Contracts v3.0.0", "body": "[N01] WhitelistedRole and ERC20Mintable removed from OpenZeppelin Contracts v3.0.0", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n01]-whitelistedrole-and-erc20mintable-removed-from-openzeppelin-contracts-v3.0.0", "labels": ["OpenZeppelin"]}, {"title": "The codebase utilizes WhitelistedRole.sol from OpenZeppelin Contracts. For example, it is imported here in GlobalConfig.sol. This contract was supported up to OpenZeppelin Contracts version 2.5.0, but beginning with version 3.0.0, it has been replaced with AccessControl.sol. Similarly, ERC20Mintable.sol, which is imported into the codebase here, no longer exists in OpenZeppelin Contracts v3.0.0.", "body": "The codebase utilizes WhitelistedRole.sol from OpenZeppelin Contracts. For example, it is imported here in GlobalConfig.sol. This contract was supported up to OpenZeppelin Contracts version 2.5.0, but beginning with version 3.0.0, it has been replaced with AccessControl.sol. Similarly, ERC20Mintable.sol, which is imported into the codebase here, no longer exists in OpenZeppelin Contracts v3.0.0.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-codebase-utilizes-whitelistedrole.sol-from-openzeppelin-contracts.-for-example,-it-is-imported-here-in-globalconfig.sol.-this-contract-was-supported-up-to-openzeppelin-contracts-version-2.5.0,-but-beginning-with-version-3.0.0,-it-has-been-replaced-with-accesscontrol.sol.-similarly,-erc20mintable.sol,-which-is-imported-into-the-codebase-here,-no-longer-exists-in-openzeppelin-contracts-v3.0.0.", "labels": ["OpenZeppelin"]}, {"title": "Although the team maintaining OpenZeppelin Contracts will continue to provide support for security issues, new functionality will no longer be added to the WhitelistedRole nor the ERC20Mintable contracts. AccessControl.sol was designed with consideration for common use cases, security, and complex systems. To keep up with constantly-improving OpenZeppelin Contracts and future Solidity developments, consider updating the codebase to utilize the latest version of OpenZeppelin Contracts.", "body": "Although the team maintaining OpenZeppelin Contracts will continue to provide support for security issues, new functionality will no longer be added to the WhitelistedRole nor the ERC20Mintable contracts. AccessControl.sol was designed with consideration for common use cases, security, and complex systems. To keep up with constantly-improving OpenZeppelin Contracts and future Solidity developments, consider updating the codebase to utilize the latest version of OpenZeppelin Contracts.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#although-the-team-maintaining-openzeppelin-contracts-will-continue-to-provide-support-for-security-issues,-new-functionality-will-no-longer-be-added-to-the-whitelistedrole-nor-the-erc20mintable-contracts.-accesscontrol.sol-was-designed-with-consideration-for-common-use-cases,-security,-and-complex-systems.-to-keep-up-with-constantly-improving-openzeppelin-contracts-and-future-solidity-developments,-consider-updating-the-codebase-to-utilize-the-latest-version-of-openzeppelin-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged by the Monte Carlo team.", "body": "The Order structs data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.  [N04] Unused OrderSignature struct  The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.  Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.  [N05] Unused import statements  Consider removing the following unused imports:  LibOrder in LibTypes.sol  LibMathUnsigned in ChainlinkAdapter.sol  LibMathUnsigned in InversedChainlinkAdapter.sol  LibOrder in AMM.sol  IPriceFeeder and IGlobalConfig in Perpetual.sol  IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.  LibOrder in Perpetual.sol, once the unnecessary association is removed.  LibMathSigned and LibMathUnsigned in PerpetualProxy.sol  ERC20 in ShareToken.sol  ERC20Burnable in ShareToken.sol  The following imports are only used for their transitive imports:  LibOrder in LibTypes.sol  Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.  [N06] Unused constant  In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.  Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.  [N07] Unused return parameters  In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.  Consider removing it from the definition to reflect the actual behavior of the function.  Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.  [N08] Unused OrderStatus enum  Please consider removing the unused enum OrderStatus declared in Exchange.sol  Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.  [N09] Uninformative error messages  Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.  within AMM.sol:  on line 156, consider using the message amount must be divisible by lotSize  on line 183, consider using the message amount must be divisible by tradingLotSize  on line 225, consider using the message amount must be divisible by tradingLotSize  on line 259, consider using the message amount must be divisible by lotSize  on line 287, consider using the message shareBalance too low  on line 622, consider using the message time steps (n) must be positive  within Brokerage.sol:  on line 25, consider using the message invalid newBroker  within Collateral.sol:  on line 123, consider using the message negative balance  within Exchange.sol:  on line 63, consider using the message amounts must be divisible by tradingLotSize  on line 74, consider using the message taker initial margin unsafe  on line 103, consider using the message maker initial margin unsafe  on line 119, consider using the message amount must be divisible by tradingLotSize  on line 206, consider using the message available margin too low for fee  within LibMath.sol:  on line 99, consider using the message cannot convert negative ints  on line 294, consider using the message cannot convert uints greater than _UINT256_MAX  within Perpetual.sol:  on line 53, consider using the message fallback function disabled  on line 69, consider using the message cannot deposit to 0 address  on line 157, consider using the message cannot withdraw from 0 address  on line 168, consider using the message withdrawer available margin negative  on line 194, consider using the message no ether sent  on line 271, consider using the message maxAmount must be divisible by lotSize  on line 283, consider using the message liquidator available margin negative  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.  [N10] Inconsistent use of return variables  There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.  [N11] Liquidation price is not validated  The calculateLiquidateAmount function doesnt confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the fail early and loudly principle, consider explicitly requiring the price to be positive.  Update: Fixed in PR#5.  [N12] Redundant condition in require  On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).  It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.  Consider simplifying the conditional statement to make the code smaller and more readable.  Update: Fixed. The require statement has been updated.  [N13] Misplaced state variable definitions  In the LibMath library there are some state variables declared in between two functions.  To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.  Update: Fixed. The state variables declaration is positioned as per the suggestion.  [N14] Inconsistency between emergency and settling  In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.  Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.  Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.  Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as settlement and the final state is SETTLED.  [N15] Inconsistency in defining 10**18  LibMath library the  LibMathSigned and  LibMathUnsigned. However,  LibOrder, which  makes use of LibMath, declares the variable  ONE as 1e18. Also,  AmmGovernance uses the hardcoded  Other occurrences of this value in the code are:  constant ONE_WAD_U of AMM  constant ONE_WAD_S of AMM  The PerpetualGovernance initial margin rate restriction  constant ONE of InversedChainlinkAdapter  Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.  Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.  [N16] Inconsistency in defining other large constants  Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned  Other occurrences of large decimals in the code are :  chainlinkDecimalsAdapter of InversedChainlinkAdapter  longer_fixed_1 of LibMathSigned  the LibMathSigned natural log restriction  FEE_BASE_RATE of LibOrder  To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.  Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged-by-the-monte-carlo-team.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Lack of explicit visibility", "body": "[N02] Lack of explicit visibility", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n02]-lack-of-explicit-visibility", "labels": ["OpenZeppelin"]}, {"title": "The perpetual state variable in the PerpetualProxy contract implicitly uses the default visibility.Moreover the IPerpetualProxy interface declares a perpetual function that matches the one that is silently implemented in PerpetualProxy as the automatically generated getter.", "body": "The perpetual state variable in the PerpetualProxy contract implicitly uses the default visibility.Moreover the IPerpetualProxy interface declares a perpetual function that matches the one that is silently implemented in PerpetualProxy as the automatically generated getter.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-perpetual-state-variable-in-the-perpetualproxy-contract-implicitly-uses-the-default-visibility.moreover-the-iperpetualproxy-interface-declares-a-perpetual-function-that-matches-the-one-that-is-silently-implemented-in-perpetualproxy-as-the-automatically-generated-getter.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables-and-constants.", "labels": ["OpenZeppelin"]}, {"title": "Update: This is not an issue anymore since the perpetual state variable has been removed along with the IPerpetualProxy contract.", "body": "Update: This is not an issue anymore since the perpetual state variable has been removed along with the IPerpetualProxy contract.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-this-is-not-an-issue-anymore-since-the-perpetual-state-variable-has-been-removed-along-with-the-iperpetualproxy-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Extract Order parameters", "body": "[N03] Extract Order parameters", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n03]-extract-order-parameters", "labels": ["OpenZeppelin"]}, {"title": "The Order struct contains a data field, which is a combination of eleven individual fields. This necessitates custom getter functions to extract the individual components. To favor simplicity and readability, consider using a data type with named variables to address the individual fields.", "body": "The Order struct contains a data field, which is a combination of eleven individual fields. This necessitates custom getter functions to extract the individual components. To favor simplicity and readability, consider using a data type with named variables to address the individual fields.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-order-struct-contains-a-data-field,-which-is-a-combination-of-eleven-individual-fields.-this-necessitates-custom-getter-functions-to-extract-the-individual-components.-to-favor-simplicity-and-readability,-consider-using-a-data-type-with-named-variables-to-address-the-individual-fields.", "labels": ["OpenZeppelin"]}, {"title": "It should be noted that the data type can be densely packed, so the underlying storage layout would not be affected. Furthermore, the object could be cast to the existing Order struct before generating the EIP712 hash, so compliance with the standard wouldn\u2019t require any additional complexity to handle the extra fields.", "body": "It should be noted that the data type can be densely packed, so the underlying storage layout would not be affected. Furthermore, the object could be cast to the existing Order struct before generating the EIP712 hash, so compliance with the standard wouldn\u2019t require any additional complexity to handle the extra fields.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#it-should-be-noted-that-the-data-type-can-be-densely-packed,-so-the-underlying-storage-layout-would-not-be-affected.-furthermore,-the-object-could-be-cast-to-the-existing-order-struct-before-generating-the-eip712-hash,-so-compliance-with-the-standard-wouldn\u2019t-require-any-additional-complexity-to-handle-the-extra-fields.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged by the Monte Carlo team. The Order struct\u2019s data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.", "body": "Update: Acknowledged by the Monte Carlo team. The Order struct\u2019s data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged-by-the-monte-carlo-team.-the-order-struct\u2019s-data-field-remains-unchanged,-it-is-designed-to-make-the-order-data-structure-compatible-with-old-off-chain-infrastructure.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Unused OrderSignature struct", "body": "[N04] Unused OrderSignature struct", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n04]-unused-ordersignature-struct", "labels": ["OpenZeppelin"]}, {"title": "The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.", "body": "The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-libeip712-library-declares-an-unused-ordersignature-struct-that-is-a-duplicate-of-the-one-declared-in-the-libsignature-library.-to-avoid-confusion-and-inconsistencies,-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.", "body": "Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-ordersignature-struct-has-been-removed-from-libeip712-library.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unused import statements", "body": "[N05] Unused import statements", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n05]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the following unused imports:", "body": "Consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in LibTypes.sol", "body": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.  [N06] Unused constant  In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.  Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.  [N07] Unused return parameters  In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.  Consider removing it from the definition to reflect the actual behavior of the function.  Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.  [N08] Unused OrderStatus enum  Please consider removing the unused enum OrderStatus declared in Exchange.sol  Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.  [N09] Uninformative error messages  Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.  within AMM.sol:  on line 156, consider using the message amount must be divisible by lotSize  on line 183, consider using the message amount must be divisible by tradingLotSize  on line 225, consider using the message amount must be divisible by tradingLotSize  on line 259, consider using the message amount must be divisible by lotSize  on line 287, consider using the message shareBalance too low  on line 622, consider using the message time steps (n) must be positive  within Brokerage.sol:  on line 25, consider using the message invalid newBroker  within Collateral.sol:  on line 123, consider using the message negative balance  within Exchange.sol:  on line 63, consider using the message amounts must be divisible by tradingLotSize  on line 74, consider using the message taker initial margin unsafe  on line 103, consider using the message maker initial margin unsafe  on line 119, consider using the message amount must be divisible by tradingLotSize  on line 206, consider using the message available margin too low for fee  within LibMath.sol:  on line 99, consider using the message cannot convert negative ints  on line 294, consider using the message cannot convert uints greater than _UINT256_MAX  within Perpetual.sol:  on line 53, consider using the message fallback function disabled  on line 69, consider using the message cannot deposit to 0 address  on line 157, consider using the message cannot withdraw from 0 address  on line 168, consider using the message withdrawer available margin negative  on line 194, consider using the message no ether sent  on line 271, consider using the message maxAmount must be divisible by lotSize  on line 283, consider using the message liquidator available margin negative  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.  [N10] Inconsistent use of return variables  There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.  [N11] Liquidation price is not validated  The calculateLiquidateAmount function doesnt confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the fail early and loudly principle, consider explicitly requiring the price to be positive.  Update: Fixed in PR#5.  [N12] Redundant condition in require  On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).  It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.  Consider simplifying the conditional statement to make the code smaller and more readable.  Update: Fixed. The require statement has been updated.  [N13] Misplaced state variable definitions  In the LibMath library there are some state variables declared in between two functions.  To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.  Update: Fixed. The state variables declaration is positioned as per the suggestion.  [N14] Inconsistency between emergency and settling  In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.  Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.  Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.  Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as settlement and the final state is SETTLED.  [N15] Inconsistency in defining 10**18  LibMath library the  LibMathSigned and  LibMathUnsigned. However,  LibOrder, which  makes use of LibMath, declares the variable  ONE as 1e18. Also,  AmmGovernance uses the hardcoded  Other occurrences of this value in the code are:  constant ONE_WAD_U of AMM  constant ONE_WAD_S of AMM  The PerpetualGovernance initial margin rate restriction  constant ONE of InversedChainlinkAdapter  Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.  Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.  [N16] Inconsistency in defining other large constants  Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned  Other occurrences of large decimals in the code are :  chainlinkDecimalsAdapter of InversedChainlinkAdapter  longer_fixed_1 of LibMathSigned  the LibMathSigned natural log restriction  FEE_BASE_RATE of LibOrder  To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.  Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-libtypes.sol", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned in ChainlinkAdapter.sol", "body": "LibMathUnsigned in ChainlinkAdapter.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-in-chainlinkadapter.sol", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned in InversedChainlinkAdapter.sol", "body": "LibMathUnsigned in InversedChainlinkAdapter.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-in-inversedchainlinkadapter.sol", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in AMM.sol", "body": "LibOrder in AMM.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-amm.sol", "labels": ["OpenZeppelin"]}, {"title": "IPriceFeeder and IGlobalConfig in Perpetual.sol", "body": "IPriceFeeder and IGlobalConfig in Perpetual.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ipricefeeder-and-iglobalconfig-in-perpetual.sol", "labels": ["OpenZeppelin"]}, {"title": "IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.", "body": "IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ierc20-and-safeerc20-in-perpetual.sol,-once-the-unnecessary-association-is-removed.", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in Perpetual.sol, once the unnecessary association is removed.", "body": "LibOrder in Perpetual.sol, once the unnecessary association is removed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-perpetual.sol,-once-the-unnecessary-association-is-removed.", "labels": ["OpenZeppelin"]}, {"title": "LibMathSigned and LibMathUnsigned in PerpetualProxy.sol", "body": "LibMathSigned and LibMathUnsigned in PerpetualProxy.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathsigned-and-libmathunsigned-in-perpetualproxy.sol", "labels": ["OpenZeppelin"]}, {"title": "ERC20 in ShareToken.sol", "body": "ERC20 in ShareToken.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#erc20-in-sharetoken.sol", "labels": ["OpenZeppelin"]}, {"title": "ERC20Burnable in ShareToken.sol", "body": "ERC20Burnable in ShareToken.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#erc20burnable-in-sharetoken.sol", "labels": ["OpenZeppelin"]}, {"title": "The following imports are only used for their transitive imports:", "body": "The following imports are only used for their transitive imports:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-following-imports-are-only-used-for-their-transitive-imports:", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.", "body": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-all-of-the-unused-imports-mentioned-above-are-removed-except-liborder-which-is-still-imported-in-perpetual.sol-and-is-used-in-this-unnecessary-association.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Unused constant", "body": "[N06] Unused constant", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n06]-unused-constant", "labels": ["OpenZeppelin"]}, {"title": "In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.", "body": "In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-amm.sol-contract,-the-constant-one_wad_u-is-declared-but-never-used.-please-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.", "body": "Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-constant-one_wad_u-has-been-removed-from-the-amm.sol-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unused return parameters", "body": "[N07] Unused return parameters", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n07]-unused-return-parameters", "labels": ["OpenZeppelin"]}, {"title": "In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.", "body": "In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-perpetual-contract,-the-liquidatefrom-function-is-declared-as-returning-two-uint256-unnamed-variables-that-are-never-returned-or-explicitly-set-inside-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing it from the definition to reflect the actual behavior of the function.", "body": "Consider removing it from the definition to reflect the actual behavior of the function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-removing-it-from-the-definition-to-reflect-the-actual-behavior-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.", "body": "Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-function-liquidatefrom-has-been-refactored-to-the-liquidate-function-which-now-returns-two-uint256-variables-liquidationprice-and-liquidationamount.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused OrderStatus enum", "body": "[N08] Unused OrderStatus enum", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n08]-unused-orderstatus-enum", "labels": ["OpenZeppelin"]}, {"title": "Please consider removing the unused enum OrderStatus declared in Exchange.sol", "body": "Please consider removing the unused enum OrderStatus declared in Exchange.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#please-consider-removing-the-unused-enum-orderstatus-declared-in-exchange.sol", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.", "body": "Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-enum-orderstatus-has-been-removed-from-exchange.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Uninformative error messages", "body": "[N09] Uninformative error messages", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n09]-uninformative-error-messages", "labels": ["OpenZeppelin"]}, {"title": "Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.", "body": "Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#several-error-messages-in-require-statements-were-found-to-be-too-generic,-not-accurately-notifying-users-of-the-actual-failing-condition-causing-the-transaction-to-revert.-within-the-following-files,-we-identify-spots-where-error-messages-could-be-changed-for-greater-clarity.", "labels": ["OpenZeppelin"]}, {"title": "within AMM.sol:", "body": "within AMM.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-amm.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 156, consider using the message \u201camount must be divisible by lotSize\u201d", "body": "on line 156, consider using the message \u201camount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-156,-consider-using-the-message-\u201camount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 183, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 183, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-183,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 225, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 225, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-225,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 259, consider using the message \u201camount must be divisible by lotSize\u201d", "body": "on line 259, consider using the message \u201camount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-259,-consider-using-the-message-\u201camount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 287, consider using the message \u201cshareBalance too low\u201d", "body": "on line 287, consider using the message \u201cshareBalance too low\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-287,-consider-using-the-message-\u201csharebalance-too-low\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 622, consider using the message \u201ctime steps (n) must be positive\u201d", "body": "on line 622, consider using the message \u201ctime steps (n) must be positive\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-622,-consider-using-the-message-\u201ctime-steps-(n)-must-be-positive\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Brokerage.sol:", "body": "within Brokerage.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-brokerage.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 25, consider using the message \u201cinvalid newBroker\u201d", "body": "on line 25, consider using the message \u201cinvalid newBroker\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-25,-consider-using-the-message-\u201cinvalid-newbroker\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Collateral.sol:", "body": "within Collateral.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-collateral.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 123, consider using the message \u201cnegative balance\u201d", "body": "on line 123, consider using the message \u201cnegative balance\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-123,-consider-using-the-message-\u201cnegative-balance\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Exchange.sol:", "body": "within Exchange.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-exchange.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 63, consider using the message \u201camounts must be divisible by tradingLotSize\u201d", "body": "on line 63, consider using the message \u201camounts must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-63,-consider-using-the-message-\u201camounts-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 74, consider using the message \u201ctaker initial margin unsafe\u201d", "body": "on line 74, consider using the message \u201ctaker initial margin unsafe\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-74,-consider-using-the-message-\u201ctaker-initial-margin-unsafe\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 103, consider using the message \u201cmaker initial margin unsafe\u201d", "body": "on line 103, consider using the message \u201cmaker initial margin unsafe\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-103,-consider-using-the-message-\u201cmaker-initial-margin-unsafe\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 119, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 119, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-119,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 206, consider using the message \u201cavailable margin too low for fee\u201d", "body": "on line 206, consider using the message \u201cavailable margin too low for fee\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-206,-consider-using-the-message-\u201cavailable-margin-too-low-for-fee\u201d", "labels": ["OpenZeppelin"]}, {"title": "within LibMath.sol:", "body": "within LibMath.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-libmath.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 99, consider using the message \u201ccannot convert negative ints\u201d", "body": "on line 99, consider using the message \u201ccannot convert negative ints\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-99,-consider-using-the-message-\u201ccannot-convert-negative-ints\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 294, consider using the message \u201ccannot convert uints greater than _UINT256_MAX\u201c", "body": "on line 294, consider using the message \u201ccannot convert uints greater than _UINT256_MAX\u201c", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-294,-consider-using-the-message-\u201ccannot-convert-uints-greater-than-_uint256_max\u201c", "labels": ["OpenZeppelin"]}, {"title": "within Perpetual.sol:", "body": "within Perpetual.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-perpetual.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 53, consider using the message \u201cfallback function disabled\u201d", "body": "on line 53, consider using the message \u201cfallback function disabled\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-53,-consider-using-the-message-\u201cfallback-function-disabled\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 69, consider using the message \u201ccannot deposit to 0 address\u201d", "body": "on line 69, consider using the message \u201ccannot deposit to 0 address\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-69,-consider-using-the-message-\u201ccannot-deposit-to-0-address\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 157, consider using the message \u201ccannot withdraw from 0 address\u201d", "body": "on line 157, consider using the message \u201ccannot withdraw from 0 address\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-157,-consider-using-the-message-\u201ccannot-withdraw-from-0-address\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 168, consider using the message \u201cwithdrawer available margin negative\u201d", "body": "on line 168, consider using the message \u201cwithdrawer available margin negative\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-168,-consider-using-the-message-\u201cwithdrawer-available-margin-negative\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 194, consider using the message \u201cno ether sent\u201d", "body": "on line 194, consider using the message \u201cno ether sent\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-194,-consider-using-the-message-\u201cno-ether-sent\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 271, consider using the message \u201cmaxAmount must be divisible by lotSize\u201d", "body": "on line 271, consider using the message \u201cmaxAmount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-271,-consider-using-the-message-\u201cmaxamount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 283, consider using the message \u201cliquidator available margin negative\u201d", "body": "on line 283, consider using the message \u201cliquidator available margin negative\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-283,-consider-using-the-message-\u201cliquidator-available-margin-negative\u201d", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issues-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.", "body": "Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-most-of-the-listed-error-messages-are-more-descriptive-or-no-longer-necessary.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Inconsistent use of return variables", "body": "[N10] Inconsistent use of return variables", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n10]-inconsistent-use-of-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "body": "There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-code-base.-for-example,-here-the-returned-variables-are-named-but-not-assigned-to,-here-they-are-unnamed-and-here-they-are-never-returned.consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables-where-needed,-and-adding-the-necessary-return-statements-where-appropriate.-this-should-improve-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.", "body": "Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-while-the-mentioned-examples-have-been-rectified,-there-are-still-inconsistencies-in-the-codebase.-for-example,-the-wfrac-and-wpowi-functions-in-libmathsigned-still-use-named-return-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Liquidation price is not validated", "body": "[N11] Liquidation price is not validated", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n11]-liquidation-price-is-not-validated", "labels": ["OpenZeppelin"]}, {"title": "The calculateLiquidateAmount function doesn\u2019t confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the \u201cfail early and loudly principle\u201d, consider explicitly requiring the price to be positive.", "body": "The calculateLiquidateAmount function doesn\u2019t confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the \u201cfail early and loudly principle\u201d, consider explicitly requiring the price to be positive.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-calculateliquidateamount-function-doesn\u2019t-confirm-that-liquidationprice-is-not-zero.-in-this-scenario,-the-function-would-revert-when-performing-a-division-by-zero.-following-the-\u201cfail-early-and-loudly-principle\u201d,-consider-explicitly-requiring-the-price-to-be-positive.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#5.", "body": "Update: Fixed in PR#5.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed-in-pr#5.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Redundant condition in require", "body": "[N12] Redundant condition in require", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n12]-redundant-condition-in-require", "labels": ["OpenZeppelin"]}, {"title": "On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).", "body": "On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-30-of-collateral.sol,-a-require-is-done-which-checks-the-conditions:-_collateral-!=-address(0x0)-||-(_collateral-==-address(0x0)-&amp;&amp;-decimals-==-18).", "labels": ["OpenZeppelin"]}, {"title": "It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.", "body": "It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#it-can-be-shown-that-the-conditions-_collateral-!=-address(0x0)-||-decimals-==-18-will-produce-the-exact-same-result.", "labels": ["OpenZeppelin"]}, {"title": "Consider simplifying the conditional statement to make the code smaller and more readable.", "body": "Consider simplifying the conditional statement to make the code smaller and more readable.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-simplifying-the-conditional-statement-to-make-the-code-smaller-and-more-readable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The require statement has been updated.", "body": "Update: Fixed. The require statement has been updated.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-require-statement-has-been-updated.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Misplaced state variable definitions", "body": "[N13] Misplaced state variable definitions", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n13]-misplaced-state-variable-definitions", "labels": ["OpenZeppelin"]}, {"title": "In the LibMath library there are some state variables declared in between two functions.", "body": "In the LibMath library there are some state variables declared in between two functions.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-libmath-library-there-are-some-state-variables-declared-in-between-two-functions.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.", "body": "To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-readability-and-follow-the-solidity-style-guide,-consider-positioning-the-state-variables-before-the-constructor.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The state variables declaration is positioned as per the suggestion.", "body": "Update: Fixed. The state variables declaration is positioned as per the suggestion.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-state-variables-declaration-is-positioned-as-per-the-suggestion.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Inconsistency between \u201cemergency\u201d and \u201csettling\u201d", "body": "[N14] Inconsistency between \u201cemergency\u201d and \u201csettling\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n14]-inconsistency-between-\u201cemergency\u201d-and-\u201csettling\u201d", "labels": ["OpenZeppelin"]}, {"title": "In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.", "body": "In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-contractreader-contract-the-isemergency-parameter-of-the-perpetualstorage-struct-is-true-only-if-the-perpetual-contract-is-in-settling-mode.", "labels": ["OpenZeppelin"]}, {"title": "Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.", "body": "Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#moreover-the-documentation-clearly-states-that-when-settling,-the-system-enters-into-an-emergency-status-where-trades-and-withdrawals-are-disabled-until-the-settlement-ends.", "labels": ["OpenZeppelin"]}, {"title": "Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.", "body": "Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-unifying-the-variable-names-in-the-code-and-documentation-to-improve-the-readability-of-the-code-and-avoid-confusion.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as \u201csettlement\u201d and the final state is SETTLED.", "body": "Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as \u201csettlement\u201d and the final state is SETTLED.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-all-occurrences-of-settling-have-been-renamed-to-emergency-in-the-code-base.-note-that-the-process-is-still-described-as-\u201csettlement\u201d-and-the-final-state-is-settled.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Inconsistency in defining 10**18", "body": "[N15] Inconsistency in defining 10**18", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n15]-inconsistency-in-defining-10**18", "labels": ["OpenZeppelin"]}, {"title": "LibMath library the", "body": "re are some state variables declared in between two functions.  To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.  Update: Fixed. The state variables declaration is positioned as per the suggestion.  [N14] Inconsistency between emergency and settling  In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.  Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.  Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.  Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as settlement and the final state is SETTLED.  [N15] Inconsistency in defining 10**18", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmath-library-the", "labels": ["OpenZeppelin"]}, {"title": "LibMathSigned and", "body": "LibMathUnsigned. However,  LibOrder, which  makes use of LibMath, declares the variable  ONE as 1e18. Also,  AmmGovernance uses the hardcoded  Other occurrences of this value in the code are:  constant ONE_WAD_U of AMM  constant ONE_WAD_S of AMM  The PerpetualGovernance initial margin rate restriction  constant ONE of InversedChainlinkAdapter  Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.  Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.  [N16] Inconsistency in defining other large constants  Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned  Other occurrences of large decimals in the code are :  chainlinkDecimalsAdapter of InversedChainlinkAdapter  longer_fixed_1 of LibMathSigned  the LibMathSigned natural log restriction  FEE_BASE_RATE of LibOrder  To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.  Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used    LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathsigned-and", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned. However,", "body": "LibMathUnsigned. However,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned.-however,", "labels": ["OpenZeppelin"]}, {"title": "LibOrder, which", "body": "LibOrder, which", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder,-which", "labels": ["OpenZeppelin"]}, {"title": "makes use of LibMath, declares the variable", "body": "makes use of LibMath, declares the variable", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#makes-use-of-libmath,-declares-the-variable", "labels": ["OpenZeppelin"]}, {"title": "ONE as 1e18. Also,", "body": "ONE as 1e18. Also,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#one-as-1e18.-also,", "labels": ["OpenZeppelin"]}, {"title": "AmmGovernance uses the hardcoded", "body": "AmmGovernance uses the hardcoded", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ammgovernance-uses-the-hardcoded", "labels": ["OpenZeppelin"]}, {"title": "Other occurrences of this value in the code are:", "body": "Other occurrences of this value in the code are:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#other-occurrences-of-this-value-in-the-code-are:", "labels": ["OpenZeppelin"]}, {"title": "constant ONE_WAD_U of AMM", "body": "constant ONE_WAD_U of AMM", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one_wad_u-of-amm", "labels": ["OpenZeppelin"]}, {"title": "constant ONE_WAD_S of AMM", "body": "constant ONE_WAD_S of AMM", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one_wad_s-of-amm", "labels": ["OpenZeppelin"]}, {"title": "The PerpetualGovernance initial margin rate restriction", "body": "The PerpetualGovernance initial margin rate restriction", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-perpetualgovernance-initial-margin-rate-restriction", "labels": ["OpenZeppelin"]}, {"title": "constant ONE of InversedChainlinkAdapter", "body": "constant ONE of InversedChainlinkAdapter", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one-of-inversedchainlinkadapter", "labels": ["OpenZeppelin"]}, {"title": "Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.", "body": "Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#given-the-role-10**18-has-inside-the-system,-consider-defining-this-variable-only-once-(or-twice,-if-a-signed-and-unsigned-version-are-desired)-and-refactor-any-use-to-use-this-definition.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.", "body": "Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-chainlinkadapter-still-uses-a-new-constant-one-instead-of-the-wad()-function-of-libmathunsigned-library.-ammgovernance-and-perpetualgovernance-still-use-10**18-directly.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Inconsistency in defining \u2018other\u2019 large constants", "body": "[N16] Inconsistency in defining \u2018other\u2019 large constants", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n16]-inconsistency-in-defining-\u2018other\u2019-large-constants", "labels": ["OpenZeppelin"]}, {"title": "Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned", "body": "Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#apart-from-10**18,-there-are-several-large-constants-defined-inconsistently-throughout-the-codebase.for-example,-10**x-syntax-is-used-in-chainlinkdecimalsadapter-of-chainlinkadapter-whereas-raw-decimal-syntax-is-used-in-fixed_1-of-libmathsigned", "labels": ["OpenZeppelin"]}, {"title": "Other occurrences of large decimals in the code are :", "body": "Other occurrences of large decimals in the code are :", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#other-occurrences-of-large-decimals-in-the-code-are-:", "labels": ["OpenZeppelin"]}, {"title": "chainlinkDecimalsAdapter of InversedChainlinkAdapter", "body": "chainlinkDecimalsAdapter of InversedChainlinkAdapter", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#chainlinkdecimalsadapter-of-inversedchainlinkadapter", "labels": ["OpenZeppelin"]}, {"title": "longer_fixed_1 of LibMathSigned", "body": "longer_fixed_1 of LibMathSigned", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#longer_fixed_1-of-libmathsigned", "labels": ["OpenZeppelin"]}, {"title": "the LibMathSigned natural log restriction", "body": ".  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-libmathsigned-natural-log-restriction", "labels": ["OpenZeppelin"]}, {"title": "FEE_BASE_RATE of LibOrder", "body": "FEE_BASE_RATE of LibOrder", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#fee_base_rate-of-liborder", "labels": ["OpenZeppelin"]}, {"title": "To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.", "body": "To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-the-readability-of-the-code,-please-consider-using-10**x-or-1ex-syntax-for-all-the-large-constants-that-can-be-expressed-in-this-form.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.", "body": "Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-all-of-the-examples-mentioned-above-have-been-fixed-except-the-libmathsigned-natural-log-restriction.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Inconsistent style", "body": "[N17] Inconsistent style", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n17]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesn\u2019t.", "body": "The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesn\u2019t.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-code-base-does-not-use-a-consistent-style.-for-example,-in-the-collateral-contract,-the-private-function-_withdraw-has-an-underscore-_-prepended-while-the-private-function-withdrawfromaccount-from-the-perpetual-contract-doesn\u2019t.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed.", "body": "Update: Fixed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Lot size checks are generalizeable", "body": "[N18] Lot size checks are generalizeable", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n18]-lot-size-checks-are-generalizeable", "labels": ["OpenZeppelin"]}, {"title": "line 63 of Exchange.sol, while another exists on", "body": "line 63 of Exchange.sol, while another exists on", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#line-63-of-exchange.sol,-while-another-exists-on", "labels": ["OpenZeppelin"]}, {"title": "line 119. Similar checks involving", "body": "line 119. Similar checks involving", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#line-119.-similar-checks-involving", "labels": ["OpenZeppelin"]}, {"title": "here and", "body": "here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#here-and", "labels": ["OpenZeppelin"]}, {"title": "here.", "body": "[N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#here.", "labels": ["OpenZeppelin"]}, {"title": "Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the \u201cdon\u2019t repeat yourself\u201d development principle, and the surface for error will be reduced since all instances of this code will behave the same way.", "body": "Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the \u201cdon\u2019t repeat yourself\u201d development principle, and the surface for error will be reduced since all instances of this code will behave the same way.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#since-this-code-is-repeated-many-times-throughout-the-codebase,-consider-implementing-it-within-a-function-or-modifier,-and-instead-using-this-whenever-needed.-by-doing-so,-the-code-will-follow-the-\u201cdon\u2019t-repeat-yourself\u201d-development-principle,-and-the-surface-for-error-will-be-reduced-since-all-instances-of-this-code-will-behave-the-same-way.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged.", "body": "Update: Acknowledged.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged.", "labels": ["OpenZeppelin"]}, {"title": "[N19] Repeated code", "body": "[N19] Repeated code", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n19]-repeated-code", "labels": ["OpenZeppelin"]}, {"title": "In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol", "body": "In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-collateral-contract,-the-_withdraw-function-in-lines-81-85-is-doing-the-same-operations-as-in-the-function-withdrawfromprotocol", "labels": ["OpenZeppelin"]}, {"title": "To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.", "body": "To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-readability-and-reduce-code-size,-consider-encapsulating-the-repeated-code-into-a-single-function-that-can-be-called-when-needed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.", "body": "Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-repeated-code-has-been-encapsulated-into-the-pushcollateral-function.", "labels": ["OpenZeppelin"]}, {"title": "[N20] SafeMath and SignedSafeMath should be used", "body": "[N20] SafeMath and SignedSafeMath should be used", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n20]-safemath-and-signedsafemath-should-be-used", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned are used for operations on", "body": "LibMathUnsigned are used for operations on", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-are-used-for-operations-on", "labels": ["OpenZeppelin"]}, {"title": "SignedSafeMath library. Likewise, the functions", "body": "SignedSafeMath library. Likewise, the functions", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#signedsafemath-library.-likewise,-the-functions", "labels": ["OpenZeppelin"]}, {"title": "SafeMath library.", "body": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.", "body": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged.-the-monte-carlo-team-intends-to-address-this-when-upgrading-to-solidity-0.6.x.", "labels": ["OpenZeppelin"]}, {"title": "[N21] Typographical errors", "body": "[N21] Typographical errors", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n21]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In line 419 of AMM.sol: \u201calready\u201d is misspelled", "body": "In line 419 of AMM.sol: \u201calready\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-419-of-amm.sol:-\u201calready\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 37 of LibTypes.sol: \u201ccurrent\u201d is misspelled", "body": "In line 37 of LibTypes.sol: \u201ccurrent\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-37-of-libtypes.sol:-\u201ccurrent\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 42 of LibTypes.sol: \u201capplied\u201d is misspelled", "body": "In line 42 of LibTypes.sol: \u201capplied\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-42-of-libtypes.sol:-\u201capplied\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 79 of Position.sol: \u201cnegative\u201d is misspelled", "body": "In line 79 of Position.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-79-of-position.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 207 of Position.sol: \u201cinvalid\u201d is misspelled", "body": "In line 207 of Position.sol: \u201cinvalid\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-207-of-position.sol:-\u201cinvalid\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 265 of Position.sol: \u201cliquidated\u201d is misspelled", "body": "In line 265 of Position.sol: \u201cliquidated\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-265-of-position.sol:-\u201cliquidated\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 279 of Position.sol: \u201cposition\u201d is misspelled", "body": "In line 279 of Position.sol: \u201cposition\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-279-of-position.sol:-\u201cposition\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 292 of Position.sol: \u201cnegative\u201d is misspelled", "body": "In line 292 of Position.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-292-of-position.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 68 of Collateral.sol: \u201cnegative\u201d is misspelled", "body": "In line 68 of Collateral.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-68-of-collateral.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 7 of GlobalConfig.sol: \u201csubmiting withdrawal apllication\u201d should be \u201csubmitting application\u201d", "body": "In line 7 of GlobalConfig.sol: \u201csubmiting withdrawal apllication\u201d should be \u201csubmitting application\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-7-of-globalconfig.sol:-\u201csubmiting-withdrawal-apllication\u201d-should-be-\u201csubmitting-application\u201d", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.", "body": "Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-some-of-the-examples-mentioned-above-have-been-corrected-or-removed.-however,-there-are-some-typographical-errors-in-marginaccount,-which-can-be-found-here,-here-and-here.", "labels": ["OpenZeppelin"]}, {"title": "[N22] Inherit from interfaces", "body": "[N22] Inherit from interfaces", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n22]-inherit-from-interfaces", "labels": ["OpenZeppelin"]}, {"title": "The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.", "body": "The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-interface-folder-contains-a-number-of-interfaces-for-contracts-within-the-system.-however,-the-contracts-do-not-explicitly-implement-these-interfaces-when-needed.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.", "body": "Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-updating-the-inheritance-declarations-of-the-amm,-globalconfig,-perpetual-and-perpetualproxy-contracts-to-implement-the-relevant-interfaces.", "labels": ["OpenZeppelin"]}, {"title": "[N23] Missing view modifier", "body": "[N23] Missing view modifier", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n23]-missing-view-modifier", "labels": ["OpenZeppelin"]}, {"title": "For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contract\u2019s storage:", "body": "For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contract\u2019s storage:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#for-added-readability-and-better-code-readability,-consider-declaring-the-following-functions-as-view-since-all-of-them-preserve-the-contract\u2019s-storage:", "labels": ["OpenZeppelin"]}, {"title": "In Position contract:", "body": "In Position contract:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-position-contract:", "labels": ["OpenZeppelin"]}, {"title": "availableMarginWithPrice", "body": "marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#availablemarginwithprice", "labels": ["OpenZeppelin"]}, {"title": "marginBalanceWithPrice", "body": "marginBalanceWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#marginbalancewithprice", "labels": ["OpenZeppelin"]}, {"title": "calculatePnl", "body": "calculatePnl", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#calculatepnl", "labels": ["OpenZeppelin"]}, {"title": "pnlWithPrice", "body": "pnlWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#pnlwithprice", "labels": ["OpenZeppelin"]}, {"title": "In Perpetual contract", "body": "In Perpetual contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-perpetual-contract", "labels": ["OpenZeppelin"]}, {"title": "isIMSafeWithPrice", "body": "Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#isimsafewithprice", "labels": ["OpenZeppelin"]}, {"title": "isSafeWithPrice", "body": "isSafeWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#issafewithprice", "labels": ["OpenZeppelin"]}, {"title": "In PerpetualProxy contract:", "body": "In PerpetualProxy contract:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-perpetualproxy-contract:", "labels": ["OpenZeppelin"]}, {"title": "isProxySafeWithPrice", "body": "isProxySafeWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#isproxysafewithprice", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. These calculations may update the funding.", "body": "Update: Not an issue. These calculations may update the funding.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-not-an-issue.-these-calculations-may-update-the-funding.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Unnecessary public visibility in some functions", "body": "[N01] Unnecessary public visibility in some functions", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#[n01]-unnecessary-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "The following functions are defined as public but are never locally used:", "body": "The following functions are defined as public but are never locally used:", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#the-following-functions-are-defined-as-public-but-are-never-locally-used:", "labels": ["OpenZeppelin"]}, {"title": "In Dripper.sol, the drip function", "body": "In Dripper.sol, the drip function", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#in-dripper.sol,-the-drip-function", "labels": ["OpenZeppelin"]}, {"title": "In Comptroller.sol, the claimComp, _dropCompMarket, and getCompMarkets functions", "body": "In Comptroller.sol, the claimComp, _dropCompMarket, and getCompMarkets functions", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#in-comptroller.sol,-the-claimcomp,-_dropcompmarket,-and-getcompmarkets-functions", "labels": ["OpenZeppelin"]}, {"title": "To reduce gas costs, consider changing the visibility of these functions to external.", "body": "To reduce gas costs, consider changing the visibility of these functions to external.", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#to-reduce-gas-costs,-consider-changing-the-visibility-of-these-functions-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Missing upper bound constraint during fee payment", "body": "[N01] Missing upper bound constraint during fee payment", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n01]-missing-upper-bound-constraint-during-fee-payment", "labels": ["OpenZeppelin"]}, {"title": "The payFees function of the FeePayer contract does not compare the profit from corruption value (stored in the _pfc local variable) to the total amount of fees paid before dividing them, as is done in the _payFinalFees function.", "body": "The payFees function of the FeePayer contract does not compare the profit from corruption value (stored in the _pfc local variable) to the total amount of fees paid before dividing them, as is done in the _payFinalFees function.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-payfees-function-of-the-feepayer-contract-does-not-compare-the-profit-from-corruption-value-(stored-in-the-_pfc-local-variable)-to-the-total-amount-of-fees-paid-before-dividing-them,-as-is-done-in-the-_payfinalfees-function.", "labels": ["OpenZeppelin"]}, {"title": "Should _pfc be lower than totalPaid (a local variable representing the total amount of fees being paid), the subsequent calculation of the cumulativeFeeMultiplier value would underflow, reverting the transaction in the SafeMath sub operation.", "body": "Should _pfc be lower than totalPaid (a local variable representing the total amount of fees being paid), the subsequent calculation of the cumulativeFeeMultiplier value would underflow, reverting the transaction in the SafeMath sub operation.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#should-_pfc-be-lower-than-totalpaid-(a-local-variable-representing-the-total-amount-of-fees-being-paid),-the-subsequent-calculation-of-the-cumulativefeemultiplier-value-would-underflow,-reverting-the-transaction-in-the-safemath-sub-operation.", "labels": ["OpenZeppelin"]}, {"title": "Following the \u201cfail early and loudly\u201d principle, consider explicitly restricting the upper bound of the totalPaid local variable.", "body": "Following the \u201cfail early and loudly\u201d principle, consider explicitly restricting the upper bound of the totalPaid local variable.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#following-the-\u201cfail-early-and-loudly\u201d-principle,-consider-explicitly-restricting-the-upper-bound-of-the-totalpaid-local-variable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Addressed in PR#1338. The UMA team decided to refactor the payRegularFees function (originally called payFees) to reduce or waive unaffordable fees rather than revert the transaction. This ensures funds will not be trapped in the contract, but the cumulative fee multiplier will be set to zero and the contract will no longer work as intended. We strongly suggest thoroughly testing this dangerous scenario, in particular ensuring that users can no longer deposit funds into the defunct contract to prevent accidental loss of funds. Additionally, we suggest explicitly checking for this condition, rather than relying on division-by-zero errors to prevent new deposits.", "body": "Update: Addressed in PR#1338. The UMA team decided to refactor the payRegularFees function (originally called payFees) to reduce or waive unaffordable fees rather than revert the transaction. This ensures funds will not be trapped in the contract, but the cumulative fee multiplier will be set to zero and the contract will no longer work as intended. We strongly suggest thoroughly testing this dangerous scenario, in particular ensuring that users can no longer deposit funds into the defunct contract to prevent accidental loss of funds. Additionally, we suggest explicitly checking for this condition, rather than relying on division-by-zero errors to prevent new deposits.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-addressed-in-pr#1338.-the-uma-team-decided-to-refactor-the-payregularfees-function-(originally-called-payfees)-to-reduce-or-waive-unaffordable-fees-rather-than-revert-the-transaction.-this-ensures-funds-will-not-be-trapped-in-the-contract,-but-the-cumulative-fee-multiplier-will-be-set-to-zero-and-the-contract-will-no-longer-work-as-intended.-we-strongly-suggest-thoroughly-testing-this-dangerous-scenario,-in-particular-ensuring-that-users-can-no-longer-deposit-funds-into-the-defunct-contract-to-prevent-accidental-loss-of-funds.-additionally,-we-suggest-explicitly-checking-for-this-condition,-rather-than-relying-on-division-by-zero-errors-to-prevent-new-deposits.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inefficient timestamp validation", "body": "[N02] Inefficient timestamp validation", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n02]-inefficient-timestamp-validation", "labels": ["OpenZeppelin"]}, {"title": "_isValidTimestamp function of the", "body": "_isValidTimestamp function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#_isvalidtimestamp-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1308. It should be noted that timestamps are defined using the uint32 type, but then implicitly casted and stored as uint256.", "body": "Update: Fixed in PR#1308. It should be noted that timestamps are defined using the uint32 type, but then implicitly casted and stored as uint256.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1308.-it-should-be-noted-that-timestamps-are-defined-using-the-uint32-type,-but-then-implicitly-casted-and-stored-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Repeated function calls to read Profit from Corruption value", "body": "[N03] Repeated function calls to read Profit from Corruption value", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n03]-repeated-function-calls-to-read-profit-from-corruption-value", "labels": ["OpenZeppelin"]}, {"title": "_payFinalFees function of the", "body": "_payFinalFees function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#_payfinalfees-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "in line 134, the function is called and its return value stored in a local variable", "body": "in line 134, the function is called and its return value stored in a local variable", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-line-134,-the-function-is-called-and-its-return-value-stored-in-a-local-variable", "labels": ["OpenZeppelin"]}, {"title": "in line 140.", "body": "in line 140.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-line-140.", "labels": ["OpenZeppelin"]}, {"title": "To reduce gas costs during execution, consider reusing the _pfc local variable instead of calling the pfc function again.", "body": "To reduce gas costs during execution, consider reusing the _pfc local variable instead of calling the pfc function again.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-reduce-gas-costs-during-execution,-consider-reusing-the-_pfc-local-variable-instead-of-calling-the-pfc-function-again.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1339.", "body": "Update: Fixed in PR#1339.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1339.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Undocumented prior approval of ERC20 tokens", "body": "[N04] Undocumented prior approval of ERC20 tokens", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n04]-undocumented-prior-approval-of-erc20-tokens", "labels": ["OpenZeppelin"]}, {"title": "There are functions that execute transfers of ERC20 tokens from the caller\u2019s balance using the standard transferFrom function. The caller, in these cases, must first approve the contract that is moving the funds. Neither the existing external documentation nor the functions\u2019 docstrings explicitly state this requirement. In particular:", "body": "There are functions that execute transfers of ERC20 tokens from the caller\u2019s balance using the standard transferFrom function. The caller, in these cases, must first approve the contract that is moving the funds. Neither the existing external documentation nor the functions\u2019 docstrings explicitly state this requirement. In particular:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-functions-that-execute-transfers-of-erc20-tokens-from-the-caller\u2019s-balance-using-the-standard-transferfrom-function.-the-caller,-in-these-cases,-must-first-approve-the-contract-that-is-moving-the-funds.-neither-the-existing-external-documentation-nor-the-functions\u2019-docstrings-explicitly-state-this-requirement.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "The deposit, create, dispute and createLiquidation functions need the msg.sender to first approve the contract to move an amount of collateral.", "body": "The deposit, create, dispute and createLiquidation functions need the msg.sender to first approve the contract to move an amount of collateral.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-deposit,-create,-dispute-and-createliquidation-functions-need-the-msg.sender-to-first-approve-the-contract-to-move-an-amount-of-collateral.", "labels": ["OpenZeppelin"]}, {"title": "The redeem, settleExpired and createLiquidation functions need the msg.sender to first approve the contract to move an amount of synthetic tokens.", "body": "The redeem, settleExpired and createLiquidation functions need the msg.sender to first approve the contract to move an amount of synthetic tokens.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-redeem,-settleexpired-and-createliquidation-functions-need-the-msg.sender-to-first-approve-the-contract-to-move-an-amount-of-synthetic-tokens.", "labels": ["OpenZeppelin"]}, {"title": "So as to clearly document their assumptions, consider expanding the functions\u2019 docstrings stating that the caller must first approve enough tokens for the functions to work as expected.", "body": "So as to clearly document their assumptions, consider expanding the functions\u2019 docstrings stating that the caller must first approve enough tokens for the functions to work as expected.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#so-as-to-clearly-document-their-assumptions,-consider-expanding-the-functions\u2019-docstrings-stating-that-the-caller-must-first-approve-enough-tokens-for-the-functions-to-work-as-expected.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1319.", "body": "Update: Fixed in PR#1319.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1319.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessary public getter for state variable", "body": "[N05] Unnecessary public getter for state variable", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n05]-unnecessary-public-getter-for-state-variable", "labels": ["OpenZeppelin"]}, {"title": "An inline comment in the PricelessPositionManager contract states that the rawTotalPositionCollateral state variable should not be used directly. However, the state variable\u2019s visibility is currently public, and Solidity will therefore create a public getter for it.", "body": "An inline comment in the PricelessPositionManager contract states that the rawTotalPositionCollateral state variable should not be used directly. However, the state variable\u2019s visibility is currently public, and Solidity will therefore create a public getter for it.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#an-inline-comment-in-the-pricelesspositionmanager-contract-states-that-the-rawtotalpositioncollateral-state-variable-should-not-be-used-directly.-however,-the-state-variable\u2019s-visibility-is-currently-public,-and-solidity-will-therefore-create-a-public-getter-for-it.", "labels": ["OpenZeppelin"]}, {"title": "To avoid mismatches between code and documentation, consider restricting access by removing the public keyword from the rawTotalPositionCollateral state variable.", "body": "To avoid mismatches between code and documentation, consider restricting access by removing the public keyword from the rawTotalPositionCollateral state variable.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-avoid-mismatches-between-code-and-documentation,-consider-restricting-access-by-removing-the-public-keyword-from-the-rawtotalpositioncollateral-state-variable.", "labels": ["OpenZeppelin"]}, {"title": "Update: The UMA team decided not to follow our suggestion to ease testing and inspection after deployment.", "body": "Update: The UMA team decided not to follow our suggestion to ease testing and inspection after deployment.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-the-uma-team-decided-not-to-follow-our-suggestion-to-ease-testing-and-inspection-after-deployment.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Lack of indexed parameters in events", "body": "[N06] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n06]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "The CreatedExpiringMultiParty event defined in the ExpiringMultiPartyCreator contract, and the LiquidationWithdrawn event defined in the Liquidatable contract, do not index any of their parameters. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "The CreatedExpiringMultiParty event defined in the ExpiringMultiPartyCreator contract, and the LiquidationWithdrawn event defined in the Liquidatable contract, do not index any of their parameters. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-createdexpiringmultiparty-event-defined-in-the-expiringmultipartycreator-contract,-and-the-liquidationwithdrawn-event-defined-in-the-liquidatable-contract,-do-not-index-any-of-their-parameters.-consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1317.", "body": "Update: Fixed in PR#1317.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1317.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Function missing view modifier", "body": "[N07] Function missing view modifier", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n07]-function-missing-view-modifier", "labels": ["OpenZeppelin"]}, {"title": "For added readability, consider declaring as view the _computeFinalFees function of the FeePayer contract, since it does not modify the contract\u2019s storage.", "body": "For added readability, consider declaring as view the _computeFinalFees function of the FeePayer contract, since it does not modify the contract\u2019s storage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#for-added-readability,-consider-declaring-as-view-the-_computefinalfees-function-of-the-feepayer-contract,-since-it-does-not-modify-the-contract\u2019s-storage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1315.", "body": "Update: Fixed in PR#1315.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1315.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused repeated function", "body": "[N08] Unused repeated function", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n08]-unused-repeated-function", "labels": ["OpenZeppelin"]}, {"title": "In the PricelessPositionManager contract, the function _getStoreAddress is not called nor used in any way.", "body": "In the PricelessPositionManager contract, the function _getStoreAddress is not called nor used in any way.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-the-pricelesspositionmanager-contract,-the-function-_getstoreaddress-is-not-called-nor-used-in-any-way.", "labels": ["OpenZeppelin"]}, {"title": "Moreover, the contract itself inherits from the FeePayer contract which already implements the _getStore function with the same purpose.", "body": "Moreover, the contract itself inherits from the FeePayer contract which already implements the _getStore function with the same purpose.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#moreover,-the-contract-itself-inherits-from-the-feepayer-contract-which-already-implements-the-_getstore-function-with-the-same-purpose.", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider removing the _getStoreAddress function from the PricelessPositionManager contract.", "body": "To favor simplicity, consider removing the _getStoreAddress function from the PricelessPositionManager contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-favor-simplicity,-consider-removing-the-_getstoreaddress-function-from-the-pricelesspositionmanager-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1303.", "body": "Update: Fixed in PR#1303.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1303.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Code repetition", "body": "[N09] Code repetition", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n09]-code-repetition", "labels": ["OpenZeppelin"]}, {"title": "There are some examples of repeated code blocks performing conceptually atomic operations.", "body": "There are some examples of repeated code blocks performing conceptually atomic operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-some-examples-of-repeated-code-blocks-performing-conceptually-atomic-operations.", "labels": ["OpenZeppelin"]}, {"title": "In FeePayer.sol:", "body": "Line 30: there is an extra space before Finder.  Line 82: more is misspelled.  Line 195: cumulativeFeeMultiplier is misspelled.  Line 210: cumulativeFeeMultiplier is misspelled.  In Liquidatable.sol:  Line 95: multiplier is misspelled.  Line 98: multiplier is misspelled.  Line 126: DisputeSucceeded should be disputeSucceeded.  Line 147: there is an unmatched backtick symbol.  Line 185: tokens is misspelled.  Line 288: whose is misspelled.  Line 370: the word is is missing.  Line 371: from times should be times from.  In PricelessPositionManager.sol:  Line 39: is should be as.  Line 66: a should be an.  Line 196: requestWithdrawal is misspelled.  Line 298: the should be removed.  Line 322: mint the caller should be mint to the caller.  Line 377: Burns should be burns.  In SyntheticToken.sol:  Line 8: there is an extra space before who.  In TokenFactory.sol:  Line 12: it should say return it to the caller.  Line 13: adding new roles should be assigning the roles.  Line 16: tokens should be tokens.  Update: Fixed in PR#1298.  [N15] Unnecessary imports  In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.  Update: Fixed in PR#1299 and PR#1236.  Conclusion  Originally, no critical and 2 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-feepayer.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 114 to 115 and 140 to 141 are both reducing the cumulativeFeeMultiplier by a given amount.", "body": "Lines 114 to 115 and 140 to 141 are both reducing the cumulativeFeeMultiplier by a given amount.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-114-to-115-and-140-to-141-are-both-reducing-the-cumulativefeemultiplier-by-a-given-amount.", "labels": ["OpenZeppelin"]}, {"title": "In PricelessPositionManager.sol:", "body": "Line 39: is should be as.  Line 66: a should be an.  Line 196: requestWithdrawal is misspelled.  Line 298: the should be removed.  Line 322: mint the caller should be mint to the caller.  Line 377: Burns should be burns.  In SyntheticToken.sol:  Line 8: there is an extra space before who.  In TokenFactory.sol:  Line 12: it should say return it to the caller.  Line 13: adding new roles should be assigning the roles.  Line 16: tokens should be tokens.  Update: Fixed in PR#1298.  [N15] Unnecessary imports  In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.  Update: Fixed in PR#1299 and PR#1236.  Conclusion  Originally, no critical and 2 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-pricelesspositionmanager.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 278 to 279 and 292 to 293 are both resetting the withdrawal request.", "body": "Lines 278 to 279 and 292 to 293 are both resetting the withdrawal request.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-278-to-279-and-292-to-293-are-both-resetting-the-withdrawal-request.", "labels": ["OpenZeppelin"]}, {"title": "Lines 184 to 185 and 316+319 are ensuring individual and global consistency when increasing collateral balances.", "body": "Lines 184 to 185 and 316+319 are ensuring individual and global consistency when increasing collateral balances.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-184-to-185-and-316+319-are-ensuring-individual-and-global-consistency-when-increasing-collateral-balances.", "labels": ["OpenZeppelin"]}, {"title": "Lines 210+215, 269 to 270, 356+362 and 534+542 are ensuring individual and global consistency when decreasing collateral balances.", "body": "Lines 210+215, 269 to 270, 356+362 and 534+542 are ensuring individual and global consistency when decreasing collateral balances.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-210+215,-269-to-270,-356+362-and-534+542-are-ensuring-individual-and-global-consistency-when-decreasing-collateral-balances.", "labels": ["OpenZeppelin"]}, {"title": "To favor reusability, consider refactoring these repeated operations into private functions.", "body": "To favor reusability, consider refactoring these repeated operations into private functions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-favor-reusability,-consider-refactoring-these-repeated-operations-into-private-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1300.", "body": "Update: Fixed in PR#1300.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1300.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Inconsistent NatSpec usage", "body": "[N10] Inconsistent NatSpec usage", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n10]-inconsistent-natspec-usage", "labels": ["OpenZeppelin"]}, {"title": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently.", "body": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-code-base-uses-the-ethereum-natural-specification-(natspec)-format-inconsistently.", "labels": ["OpenZeppelin"]}, {"title": "For example, in the FeePayer contract, the function _getCollateral is using single line comments format, other functions like _getStore have no comments at all, while others such as _payFinalFees are following the NatSpec format correctly.", "body": "For example, in the FeePayer contract, the function _getCollateral is using single line comments format, other functions like _getStore have no comments at all, while others such as _payFinalFees are following the NatSpec format correctly.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#for-example,-in-the-feepayer-contract,-the-function-_getcollateral-is-using-single-line-comments-format,-other-functions-like-_getstore-have-no-comments-at-all,-while-others-such-as-_payfinalfees-are-following-the-natspec-format-correctly.", "labels": ["OpenZeppelin"]}, {"title": "So as to favor consistency, readability and improve the quality of the project\u2019s documentation, consider always following the Ethereum Natural Specification format.", "body": "So as to favor consistency, readability and improve the quality of the project\u2019s documentation, consider always following the Ethereum Natural Specification format.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#so-as-to-favor-consistency,-readability-and-improve-the-quality-of-the-project\u2019s-documentation,-consider-always-following-the-ethereum-natural-specification-format.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1345. The UMA team adopted a style guide where the NatSpec format is reserved exclusively for public and external functions. Single line comments are optionally used for the remaining functions.", "body": "Update: Fixed in PR#1345. The UMA team adopted a style guide where the NatSpec format is reserved exclusively for public and external functions. Single line comments are optionally used for the remaining functions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1345.-the-uma-team-adopted-a-style-guide-where-the-natspec-format-is-reserved-exclusively-for-public-and-external-functions.-single-line-comments-are-optionally-used-for-the-remaining-functions.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Missing docstrings in sensitive functions", "body": "[N11] Missing docstrings in sensitive functions", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n11]-missing-docstrings-in-sensitive-functions", "labels": ["OpenZeppelin"]}, {"title": "Some internal and private functions implementing sensitive functionality are not commented. See for example _reduceSponsorPosition and _deleteSponsorPosition functions in the PricelessPositionManager contract. The lack of documentation might hinder reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance.", "body": "Some internal and private functions implementing sensitive functionality are not commented. See for example _reduceSponsorPosition and _deleteSponsorPosition functions in the PricelessPositionManager contract. The lack of documentation might hinder reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#some-internal-and-private-functions-implementing-sensitive-functionality-are-not-commented.-see-for-example-_reducesponsorposition-and-_deletesponsorposition-functions-in-the-pricelesspositionmanager-contract.-the-lack-of-documentation-might-hinder-reviewers\u2019-understanding-of-the-code\u2019s-intention,-which-is-fundamental-to-assess-not-only-security,-but-also-correctness.-additionally,-docstrings-improve-readability-and-ease-maintenance.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all non-trivial functions, even if they are not part of the contracts\u2019 public API. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all non-trivial functions, even if they are not part of the contracts\u2019 public API. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#consider-thoroughly-documenting-all-non-trivial-functions,-even-if-they-are-not-part-of-the-contracts\u2019-public-api.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1343.", "body": "Update: Fixed in PR#1343.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1343.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Naming issues", "body": "[N12] Naming issues", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n12]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "The following functions and variables may benefit from better naming:", "body": "The following functions and variables may benefit from better naming:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-following-functions-and-variables-may-benefit-from-better-naming:", "labels": ["OpenZeppelin"]}, {"title": "The _getCollateral and _convertCollateral functions in FeePayer should be renamed to indicate fee-adjustment operations.", "body": "The _getCollateral and _convertCollateral functions in FeePayer should be renamed to indicate fee-adjustment operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-_getcollateral-and-_convertcollateral-functions-in-feepayer-should-be-renamed-to-indicate-fee-adjustment-operations.", "labels": ["OpenZeppelin"]}, {"title": "The payFees function of the FeePayer contract should be renamed to payRegularFees, payOngoingFees, payRegularAndPenaltyFees or similar.", "body": "The payFees function of the FeePayer contract should be renamed to payRegularFees, payOngoingFees, payRegularAndPenaltyFees or similar.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-payfees-function-of-the-feepayer-contract-should-be-renamed-to-payregularfees,-payongoingfees,-payregularandpenaltyfees-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The priceIdentifer variable in PricelessPositionManager should be priceIdentifier.", "body": "The priceIdentifer variable in PricelessPositionManager should be priceIdentifier.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-priceidentifer-variable-in-pricelesspositionmanager-should-be-priceidentifier.", "labels": ["OpenZeppelin"]}, {"title": "The EndedSponsor event in PricelessPositionManager should be EndedSponsorship or EndedSponsorPosition.", "body": "The EndedSponsor event in PricelessPositionManager should be EndedSponsorship or EndedSponsorPosition.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-endedsponsor-event-in-pricelesspositionmanager-should-be-endedsponsorship-or-endedsponsorposition.", "labels": ["OpenZeppelin"]}, {"title": "The create function of PricelessPositionManager should be renamed to indicate the possibility of augmenting an existing position.", "body": "The create function of PricelessPositionManager should be renamed to indicate the possibility of augmenting an existing position.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-create-function-of-pricelesspositionmanager-should-be-renamed-to-indicate-the-possibility-of-augmenting-an-existing-position.", "labels": ["OpenZeppelin"]}, {"title": "The transfer function of PricelessPositionManager should be transferPositionOwnership or similar. The Transfer event should be renamed accordingly.", "body": "The transfer function of PricelessPositionManager should be transferPositionOwnership or similar. The Transfer event should be renamed accordingly.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-transfer-function-of-pricelesspositionmanager-should-be-transferpositionownership-or-similar.-the-transfer-event-should-be-renamed-accordingly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1341. The create function has not been renamed but its docstrings have been improved to better reflect the function\u2019s behavior.", "body": "Update: Fixed in PR#1341. The create function has not been renamed but its docstrings have been improved to better reflect the function\u2019s behavior.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1341.-the-create-function-has-not-been-renamed-but-its-docstrings-have-been-improved-to-better-reflect-the-function\u2019s-behavior.", "labels": ["OpenZeppelin"]}, {"title": "[N13] TODOs in code", "body": "[N13] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n13]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for examples:", "body": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for examples:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-backlog-of-issues.-see-for-examples:", "labels": ["OpenZeppelin"]}, {"title": "Lines 253 and 478 of PricelessPositionManager.sol.", "body": "Lines 253 and 478 of PricelessPositionManager.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-253-and-478-of-pricelesspositionmanager.sol.", "labels": ["OpenZeppelin"]}, {"title": "Line 206 of Liquidatable.sol.", "body": "Line 206 of Liquidatable.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-206-of-liquidatable.sol.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1327.", "body": "Update: Fixed in PR#1327.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1327.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Typographical errors", "body": "[N14] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n14]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In ExpiringMultiPartyCreator.sol:", "body": "In ExpiringMultiPartyCreator.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-expiringmultipartycreator.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 148: \u201cconstrainments\u201d should be \u201cconstraints\u201d.", "body": "Line 148: \u201cconstrainments\u201d should be \u201cconstraints\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-148:-\u201cconstrainments\u201d-should-be-\u201cconstraints\u201d.", "labels": ["OpenZeppelin"]}]