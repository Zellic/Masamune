[{"title": "no validation on max cap", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/74", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "no validation on max cap"}, {"title": "fees calculations are not accurate", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/73", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "fees calculations are not accurate"}, {"title": "Setting allowance to uint256(-1) is bad practice", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/63", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Setting allowance to uint256(-1) is bad practice"}, {"title": "Two Steps Verification before Transferring Ownership", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/55", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Two Steps Verification before Transferring Ownership"}, {"title": "wrong comment in line 228 of RebalanceManager.sol", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/50", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "wrong comment in line 228 of RebalanceManager.sol"}, {"title": "block.timestamp or deadline", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/47", "labels": ["bug", "2 (Med Risk)"], "target": "2021-12-amun-findings", "body": "block.timestamp or deadline"}, {"title": "BasketFacet: no need for safe subtraction", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/44", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-12-amun-findings", "body": "BasketFacet: no need for safe subtraction"}, {"title": "Underflow possible in rebalance() of RebalanceManagerV3 ", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/43", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2021-12-amun-findings", "body": "Underflow possible in rebalance() of RebalanceManagerV3 "}, {"title": "BasketFace#calcOutStandingAnnualizedFee no need for safe subtraction", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/40", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "BasketFace#calcOutStandingAnnualizedFee no need for safe subtraction"}, {"title": "Basketfacet#calcOutStandingAnnualizedFee() uses 365 days instead of 365.25 days", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/39", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Basketfacet#calcOutStandingAnnualizedFee() uses 365 days instead of 365.25 days"}, {"title": "Different formulas to calculate tokenAmount ", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/37", "labels": ["bug", "1 (Low Risk)"], "target": "2021-12-amun-findings", "body": "Different formulas to calculate tokenAmount "}, {"title": "Named return issue", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/31", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Named return issue"}, {"title": "Not verified function inputs of public / external functions", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/29", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Not verified function inputs of public / external functions"}, {"title": "Use safe math for solidity version <8", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/28", "labels": ["bug", "1 (Low Risk)"], "target": "2021-12-amun-findings", "body": "Use safe math for solidity version <8"}, {"title": "Solidity compiler versions mismatch", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/27", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "Solidity compiler versions mismatch"}, {"title": "safeApprove of openZeppelin is deprecated", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/25", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "safeApprove of openZeppelin is deprecated"}, {"title": "uint8 index", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/21", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "uint8 index"}, {"title": "Unnecessary array boundaries check when loading an array element twice", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/19", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-12-amun-findings", "body": "Unnecessary array boundaries check when loading an array element twice"}, {"title": "State variables that could be set immutable", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/18", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-amun-findings", "body": "State variables that could be set immutable"}, {"title": "Unused imports", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/13", "labels": ["bug", "disagree with severity", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "Unused imports"}, {"title": "Two-step change of a critical parameter", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/12", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-12-amun-findings", "body": "Two-step change of a critical parameter"}, {"title": "missing zero check", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/11", "labels": ["bug", "0 (Non-critical)"], "target": "2021-12-amun-findings", "body": "missing zero check"}, {"title": "Two-step change of a critical parameter", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/10", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "Two-step change of a critical parameter"}, {"title": "callNoValue() function does not guard against zero address", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/7", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "callNoValue() function does not guard against zero address"}, {"title": "Use of floating pragmas", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/6", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-12-amun-findings", "body": "Use of floating pragmas"}, {"title": "minimum amount is too high", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/5", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "minimum amount is too high"}, {"title": "getTokenInPool() naming is confusing ", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/3", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "getTokenInPool() naming is confusing "}, {"title": "addToken() require check is not consistent with others similar to it ", "html_url": "https://github.com/code-423n4/2021-12-amun-findings/issues/2", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-amun-findings", "body": "addToken() require check is not consistent with others similar to it "}, {"title": "Validations", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/234", "labels": ["bug", "duplicate", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Validations"}, {"title": "NFTXSimpleFeeDistributor#addReceiver: Failure to check for existing receiver", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/230", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "NFTXSimpleFeeDistributor#addReceiver: Failure to check for existing receiver"}, {"title": "NFTXMarketplaceZap: incorrect parameter name", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/228", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXMarketplaceZap: incorrect parameter name"}, {"title": "NFTXStakingZap: Sanity checks on \u201cto\u201d (dest) address", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/227", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXStakingZap: Sanity checks on \u201cto\u201d (dest) address"}, {"title": "NFTXMarketplaceZap: Add rescue() function", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/226", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXMarketplaceZap: Add rescue() function"}, {"title": "NFTXMarketplaceZap: Restrict native ETH transfers to WETH contract", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/224", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXMarketplaceZap: Restrict native ETH transfers to WETH contract"}, {"title": "NFTXSimpleFeeDistributor: Inconsistency between implementation and comment", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/222", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXSimpleFeeDistributor: Inconsistency between implementation and comment"}, {"title": "PausableUpgradeable: Document lockId code 10 = deposit", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/221", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "PausableUpgradeable: Document lockId code 10 = deposit"}, {"title": "NFTXLPStaking: Implementation Upgrade Storage Layout Caution", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/220", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXLPStaking: Implementation Upgrade Storage Layout Caution"}, {"title": "NFTXInventoryStaking: Index vaultId in events", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/218", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "NFTXInventoryStaking: Index vaultId in events"}, {"title": "NFTXStakingZap: Unused xTokenMinted variable ", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/217", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXStakingZap: Unused xTokenMinted variable "}, {"title": "Cached lpStaking and inventoryStaking in Zap contracts", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/214", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Cached lpStaking and inventoryStaking in Zap contracts"}, {"title": "Pool Manager can frontrun fees to 100% and use it to steal the value from users", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/213", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Pool Manager can frontrun fees to 100% and use it to steal the value from users"}, {"title": "Constants can be made internal / private", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/209", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Constants can be made internal / private"}, {"title": "Use unchecked math and cache values", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/208", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Use unchecked math and cache values"}, {"title": "Explicit initialization with zero not required", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/207", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Explicit initialization with zero not required"}, {"title": "Unused function input argument \"vault\"", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/205", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unused function input argument \"vault\""}, {"title": "TimelockRewardDistributionTokenImpl.sol function withdrawableRewardOf() visibility can be changed from internal to public", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/201", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "TimelockRewardDistributionTokenImpl.sol function withdrawableRewardOf() visibility can be changed from internal to public"}, {"title": "isContract() duplication and Address.sol library usage", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/199", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "isContract() duplication and Address.sol library usage"}, {"title": "Unnecessary checked arithmetic in for-loops", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/198", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Unnecessary checked arithmetic in for-loops"}, {"title": "NFTXVaultFactoryUpgradeable.sol function assignFees() does not have onlyOwner modifier", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/196", "labels": ["bug", "duplicate", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "NFTXVaultFactoryUpgradeable.sol function assignFees() does not have onlyOwner modifier"}, {"title": "`++i` costs less gass compared to `i++`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/195", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "`++i` costs less gass compared to `i++`"}, {"title": "Using 10**X for constants isn't gas efficient", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/193", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Using 10**X for constants isn't gas efficient"}, {"title": "Cache storage variables in the stack can save gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/191", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Cache storage variables in the stack can save gas"}, {"title": "Wrong code style", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/190", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Wrong code style"}, {"title": "Upgrade pragma to at least 0.8.4", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/189", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Upgrade pragma to at least 0.8.4"}, {"title": "Gas Optimization: Use immutable to cache beaconhash", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/187", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Gas Optimization: Use immutable to cache beaconhash"}, {"title": "Unsafe approve in NFTXSimpleFeeDistributor", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/186", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unsafe approve in NFTXSimpleFeeDistributor"}, {"title": "NFTXStakingZap and NFTXMarketplaceZap's transferFromERC721 transfer Cryptokitties to the wrong address", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/185", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXStakingZap and NFTXMarketplaceZap's transferFromERC721 transfer Cryptokitties to the wrong address"}, {"title": "Gas Optimization: Use uint232 for `allocPoint`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/183", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Gas Optimization: Use uint232 for `allocPoint`"}, {"title": "Missing OOB check in `changeReceiverAlloc`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/181", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Missing OOB check in `changeReceiverAlloc`"}, {"title": "Importing unused contract", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/180", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Importing unused contract"}, {"title": "Use of floating pragma", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/179", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Use of floating pragma"}, {"title": "Bypass zap timelock", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/178", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Bypass zap timelock"}, {"title": "NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/177", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system"}, {"title": "`> 0` can be replaced with `!= 0` for gas optimization", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/176", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`> 0` can be replaced with `!= 0` for gas optimization"}, {"title": "Sell event amounts[1]", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/173", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Sell event amounts[1]"}, {"title": "max timelockLength", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/172", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "max timelockLength"}, {"title": "Use cached version of sushiRouter.WETH()", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/171", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Use cached version of sushiRouter.WETH()"}, {"title": "uint64 state variable is less efficient than uint256", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/170", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "uint64 state variable is less efficient than uint256"}, {"title": "Unused state variables", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/169", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Unused state variables"}, {"title": "Cache duplicate external calls", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/167", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Cache duplicate external calls"}, {"title": "Check if amount > 0 before token transfer can save gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/165", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Check if amount > 0 before token transfer can save gas"}, {"title": "Unused function parameters", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/164", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unused function parameters"}, {"title": "Unused local variables", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/163", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unused local variables"}, {"title": "Unused events", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/162", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unused events"}, {"title": "`NFTXMarketplaceZap.sol#buyAnd***()` should return unused weth/eth back to `msg.sender` instead of `to`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/161", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`NFTXMarketplaceZap.sol#buyAnd***()` should return unused weth/eth back to `msg.sender` instead of `to`"}, {"title": "Inline unnecessary function can make the code simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/159", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Inline unnecessary function can make the code simpler and save some gas"}, {"title": "`NFTXMarketplaceZap.sol#buyAndSwap1155WETH()` Implementation can be simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/156", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`NFTXMarketplaceZap.sol#buyAndSwap1155WETH()` Implementation can be simpler and save some gas"}, {"title": "NFTXStakingZap, NFTXMarketplaceZap and NFTXVaultUpgradeable use hard coded Cryptokitties and CryptoPunks addresses", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/155", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "NFTXStakingZap, NFTXMarketplaceZap and NFTXVaultUpgradeable use hard coded Cryptokitties and CryptoPunks addresses"}, {"title": "Outdated comment in `TimelockRewardDistributionTokenImpl.burnFrom`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/150", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Outdated comment in `TimelockRewardDistributionTokenImpl.burnFrom`"}, {"title": "Unbounded iteration in `NFTXVaultUpgradeable.allHoldings` over all holdings", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/147", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Unbounded iteration in `NFTXVaultUpgradeable.allHoldings` over all holdings"}, {"title": "Staking Zap approves wrong LP token", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/143", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Staking Zap approves wrong LP token"}, {"title": "Low-level call return value not checked", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/140", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Low-level call return value not checked"}, {"title": "Zaps should verify paths", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/137", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Zaps should verify paths"}, {"title": "Rewards can be stolen", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/136", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Rewards can be stolen"}, {"title": "Same module can be added several times", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/135", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Same module can be added several times"}, {"title": "Race condition in approve() \u6536\u4ef6\u7bb1", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/134", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Race condition in approve() \u6536\u4ef6\u7bb1"}, {"title": " Use `calldata` instead of `memory` for function parameters", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/132", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": " Use `calldata` instead of `memory` for function parameters"}, {"title": "Use a constant instead of block.timestamp for the deadline", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/131", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Use a constant instead of block.timestamp for the deadline"}, {"title": "After Solidity 0.8.1, The Inline Assembly Contract Check Can Be replaced with the new function", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/130", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "After Solidity 0.8.1, The Inline Assembly Contract Check Can Be replaced with the new function"}, {"title": "Weak nonce usage", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/126", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-12-nftx-findings", "body": "Weak nonce usage"}, {"title": "Internal functions names should start with underscore", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/124", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Internal functions names should start with underscore"}, {"title": "Local variables shadowing", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/123", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Local variables shadowing"}, {"title": "Missing address(0) checks", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/122", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Missing address(0) checks"}, {"title": "Return variable can remain unassigned in _sendForReceiver", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/121", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Return variable can remain unassigned in _sendForReceiver"}, {"title": "Refactor `distribute()` logic", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/120", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Refactor `distribute()` logic"}, {"title": "Store totalSupply() in variable", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/119", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Store totalSupply() in variable"}, {"title": "provideInventory1155 assumes tokenIds.length == amounts.length", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/117", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "provideInventory1155 assumes tokenIds.length == amounts.length"}, {"title": "Incorrect contract referenced in test", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/116", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Incorrect contract referenced in test"}, {"title": "NFTXInventoryStaking._deployXToken create2 deploy result isn't zero checked", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/115", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXInventoryStaking._deployXToken create2 deploy result isn't zero checked"}, {"title": "NFTXVaultUpgradeable.mintTo and swapTo do not check for user supplied arrays length", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/111", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXVaultUpgradeable.mintTo and swapTo do not check for user supplied arrays length"}, {"title": "Move kitties/punk addresses to constants", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/110", "labels": ["bug", "duplicate", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Move kitties/punk addresses to constants"}, {"title": "Misleading comments", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/109", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Misleading comments"}, {"title": "Unfair fee distribution", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/108", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unfair fee distribution"}, {"title": "A vault can be locked from MarketplaceZap and StakingZap", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/107", "labels": ["bug", "3 (High Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "A vault can be locked from MarketplaceZap and StakingZap"}, {"title": "NFTXSimpleFeeDistributor._sendForReceiver doesn't return success if receiver is not a contract", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/105", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "NFTXSimpleFeeDistributor._sendForReceiver doesn't return success if receiver is not a contract"}, {"title": "Remove unnecessary variables can make the code simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/101", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Remove unnecessary variables can make the code simpler and save some gas"}, {"title": "Use immutable variables can save gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/100", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Use immutable variables can save gas"}, {"title": "Using constants instead of local variables can save some gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/97", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Using constants instead of local variables can save some gas"}, {"title": "`transfer()` is not recommended for sending ETH", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/94", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "`transfer()` is not recommended for sending ETH"}, {"title": "`NFTXSimpleFeeDistributor#__SimpleFeeDistributor__init__()` Missing `__ReentrancyGuard_init()`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/90", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "`NFTXSimpleFeeDistributor#__SimpleFeeDistributor__init__()` Missing `__ReentrancyGuard_init()`"}, {"title": "Avoid unnecessary external call can save gas", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/89", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Avoid unnecessary external call can save gas"}, {"title": "Outdated compiler version", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/88", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Outdated compiler version"}, {"title": "Unchecked return value for `ERC20.approve` call", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/87", "labels": ["bug", "duplicate", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unchecked return value for `ERC20.approve` call"}, {"title": "Constants are not explicitly declared", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/82", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Constants are not explicitly declared"}, {"title": "Timelock functionality for `xToken` is applied on all existing balance", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/80", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Timelock functionality for `xToken` is applied on all existing balance"}, {"title": "Rewards Cannot Be Claimed If LP Tokens Are Unstaked", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/73", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Rewards Cannot Be Claimed If LP Tokens Are Unstaked"}, {"title": "Malicious receiver can make distribute function denial of service", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/69", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Malicious receiver can make distribute function denial of service"}, {"title": "The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/67", "labels": ["bug", "3 (High Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees"}, {"title": "`assignDefaultFeatures` Does Nothing", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/65", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "`assignDefaultFeatures` Does Nothing"}, {"title": "`timelockMint` In `TimelockRewardDistributionTokenImpl` Does Not Ensure Mint Is Greater Than Zero", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/64", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`timelockMint` In `TimelockRewardDistributionTokenImpl` Does Not Ensure Mint Is Greater Than Zero"}, {"title": "InventoryStaking `deposit()` and `withdraw()` don't validate passed vaultId", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/61", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "InventoryStaking `deposit()` and `withdraw()` don't validate passed vaultId"}, {"title": "`xToken` Approvals Allow Spenders To Spend More Tokens", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/58", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`xToken` Approvals Allow Spenders To Spend More Tokens"}, {"title": "Dishonest Stakers Can Siphon Rewards From `xToken` Holders Through The `deposit` Function In `NFTXInventoryStaking`", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/57", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Dishonest Stakers Can Siphon Rewards From `xToken` Holders Through The `deposit` Function In `NFTXInventoryStaking`"}, {"title": "Users can create vaults with a malicious _assetAddress ", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/56", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Users can create vaults with a malicious _assetAddress "}, {"title": "`NFTXLPStaking.rewardDistTokenImpl` is never initialized", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/54", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "`NFTXLPStaking.rewardDistTokenImpl` is never initialized"}, {"title": "Unnecessary assignment of 0 to an uninitialized variable", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/53", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2021-12-nftx-findings", "body": "Unnecessary assignment of 0 to an uninitialized variable"}, {"title": "onlyOwnerIfPaused(0) argument should not be hard coded ", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/52", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "onlyOwnerIfPaused(0) argument should not be hard coded "}, {"title": "Marketplace allows functions made for ERC721 vaults to interact with ERC1155 vaults", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/51", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Marketplace allows functions made for ERC721 vaults to interact with ERC1155 vaults"}, {"title": "No access control on assignFees() function in NFTXVaultFactoryUpgradeable contract", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/50", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "No access control on assignFees() function in NFTXVaultFactoryUpgradeable contract"}, {"title": "Unnecessary check for a condition ", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/49", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Unnecessary check for a condition "}, {"title": "isContract() code is duplicated in multiple files ", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/48", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "isContract() code is duplicated in multiple files "}, {"title": "`buyAndSwap1155WETH` Does Not Work As Intended", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/45", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "`buyAndSwap1155WETH` Does Not Work As Intended"}, {"title": "Inconsistency in fee distribution", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/41", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Inconsistency in fee distribution"}, {"title": "transfer return value is ignored", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/40", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "transfer return value is ignored"}, {"title": "Missing non reentrancy modifier", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/37", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2021-12-nftx-findings", "body": "Missing non reentrancy modifier"}, {"title": "Two Steps Verification before Transferring Ownership", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/36", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Two Steps Verification before Transferring Ownership"}, {"title": "Named return issue", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/34", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Named return issue"}, {"title": "Init frontrun", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/33", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Init frontrun"}, {"title": "safeApprove of openZeppelin is deprecated", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/31", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "safeApprove of openZeppelin is deprecated"}, {"title": "Require with not comprehensive message", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/30", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Require with not comprehensive message"}, {"title": "Require with empty message", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/29", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Require with empty message"}, {"title": "Unnecessary array boundaries check when loading an array element twice", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/25", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Unnecessary array boundaries check when loading an array element twice"}, {"title": "Public functions to external", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/23", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Public functions to external"}, {"title": "Storage double reading. Could save SLOAD", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/22", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Storage double reading. Could save SLOAD"}, {"title": "Short the following require messages", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/21", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Short the following require messages"}, {"title": "Use bytes32 instead of string to save gas whenever possible", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/20", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Use bytes32 instead of string to save gas whenever possible"}, {"title": "Unused imports", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/19", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "Unused imports"}, {"title": "DOS on withdrawal", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/13", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "DOS on withdrawal"}, {"title": "Gas savings", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Gas savings"}, {"title": "Gas saving by using mapping instead of computeAddress", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Gas saving by using mapping instead of computeAddress"}, {"title": "Gas saving by storing modulesCopy.length in local variable", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-nftx-findings", "body": "Gas saving by storing modulesCopy.length in local variable"}, {"title": "buyAndSwap1155WETH() function may cause loss of user assets", "html_url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/2", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-nftx-findings", "body": "buyAndSwap1155WETH() function may cause loss of user assets"}, {"title": "Shorter revert messages", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/188", "labels": ["bug", "duplicate", "G (Gas Optimization)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Shorter revert messages"}, {"title": "Avoid repeated calculations", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/187", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Avoid repeated calculations"}, {"title": "_addUSDVPair can also update", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/185", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "_addUSDVPair can also update"}, {"title": "Open TODOs in Codebase", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/183", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Open TODOs in Codebase"}, {"title": "setGasThrottle function should be moved to BasePoolV2", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/181", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "VaderPoolV2", "BasePoolV2"], "target": "2021-12-vader-findings", "body": "setGasThrottle function should be moved to BasePoolV2"}, {"title": "Using single total native reserve variable for synth and non-synth reserves of VaderPoolV2 can lead to losses for synth holders", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/179", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "Using single total native reserve variable for synth and non-synth reserves of VaderPoolV2 can lead to losses for synth holders"}, {"title": "VaderPoolV2 doesn't implement queue system yet", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/178", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "VaderPoolV2 doesn't implement queue system yet"}, {"title": "Redundant Constant Inheritance", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/176", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "LPWrapper"], "target": "2021-12-vader-findings", "body": "Redundant Constant Inheritance"}, {"title": "Changing function visibility from public to external can save gas", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/175", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "Changing function visibility from public to external can save gas"}, {"title": "Incorrect descriptions of BasePoolV2's _onlyRouter and _supportedToken", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/172", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "BasePoolV2"], "target": "2021-12-vader-findings", "body": "Incorrect descriptions of BasePoolV2's _onlyRouter and _supportedToken"}, {"title": "Open Discussion That Hint Potential Security Problem Should be Avoided", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/167", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Open Discussion That Hint Potential Security Problem Should be Avoided"}, {"title": "`USDV.sol` Mint and Burn Amounts Are Incorrect", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/164", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "USDV"], "target": "2021-12-vader-findings", "body": "`USDV.sol` Mint and Burn Amounts Are Incorrect"}, {"title": "Adding pair of the same `foreignAsset` would replace oracle of earlier entry", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/160", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Adding pair of the same `foreignAsset` would replace oracle of earlier entry"}, {"title": "`uint a = b++;` is a confusing syntax and can be gas-optimized", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/157", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "BasePoolV2"], "target": "2021-12-vader-findings", "body": "`uint a = b++;` is a confusing syntax and can be gas-optimized"}, {"title": "Keccak functions in constants waste gas", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/152", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "GovernorAlpha"], "target": "2021-12-vader-findings", "body": "Keccak functions in constants waste gas"}, {"title": "Missing boundary check in USDV.sol", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/151", "labels": ["bug", "G (Gas Optimization)", "USDV"], "target": "2021-12-vader-findings", "body": "Missing boundary check in USDV.sol"}, {"title": "Vader TWAP averages wrong", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/148", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Vader TWAP averages wrong"}, {"title": "`VaderPoolV2` minting synths & fungibles can be frontrun", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/147", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "`VaderPoolV2` minting synths & fungibles can be frontrun"}, {"title": "mintSynth might mint nothing", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/142", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "mintSynth might mint nothing"}, {"title": "Lack of address(0) check", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/140", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Lack of address(0) check"}, {"title": "vader can be initialized twice", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/139", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "vader can be initialized twice"}, {"title": "Lack Of Router Setter Function", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/137", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "BasePoolV2"], "target": "2021-12-vader-findings", "body": "Lack Of Router Setter Function"}, {"title": "loss of precision", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/134", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "loss of precision"}, {"title": "Internal\u00a0functions can be\u00a0private if the contract is not herited", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/133", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Internal\u00a0functions can be\u00a0private if the contract is not herited"}, {"title": "Save Gas With The Unchecked Keyword", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/130", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "Save Gas With The Unchecked Keyword"}, {"title": "Lack of decimal control in StakingRewards", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/129", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "StakingRewards"], "target": "2021-12-vader-findings", "body": "Lack of decimal control in StakingRewards"}, {"title": "Lack of check of inputs in StakingRewards", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/128", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "StakingRewards"], "target": "2021-12-vader-findings", "body": "Lack of check of inputs in StakingRewards"}, {"title": "Explicit initialization with zero not required", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/126", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Explicit initialization with zero not required"}, {"title": "`++i` costs less gass compared to `i++`", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "`++i` costs less gass compared to `i++`"}, {"title": "An array's length should be cached to save gas in for-loops", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "An array's length should be cached to save gas in for-loops"}, {"title": "SafeMath is not needed when using Solidity version 0.8.*", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/120", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "StakingRewards"], "target": "2021-12-vader-findings", "body": "SafeMath is not needed when using Solidity version 0.8.*"}, {"title": "USDV LockCreated event should include the index of a created lock", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/117", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "USDV"], "target": "2021-12-vader-findings", "body": "USDV LockCreated event should include the index of a created lock"}, {"title": "Less than 256 uints are not gas efficient", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Less than 256 uints are not gas efficient"}, {"title": "transferOwnership should be two step process", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/113", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "transferOwnership should be two step process"}, {"title": "`> 0` can be replaced with `!= 0` for gas optimization", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/112", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "`> 0` can be replaced with `!= 0` for gas optimization"}, {"title": "SHOULD CHECK RETURN DATA FROM CHAINLINK AGGREGATORS (Timestamp)", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/111", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "SHOULD CHECK RETURN DATA FROM CHAINLINK AGGREGATORS (Timestamp)"}, {"title": "Out of gas.", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/110", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Out of gas."}, {"title": "`USDV.claim` Does Not Check If Index Is Valid", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/106", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor acknowledged", "USDV"], "target": "2021-12-vader-findings", "body": "`USDV.claim` Does Not Check If Index Is Valid"}, {"title": "`totalLiquidityWeight` Is Updated When Adding New Token Pairs Which Skews Price Data For `getVaderPrice` and `getUSDVPrice`", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/105", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "`totalLiquidityWeight` Is Updated When Adding New Token Pairs Which Skews Price Data For `getVaderPrice` and `getUSDVPrice`"}, {"title": "No Method To Remove Token Pairs", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/104", "labels": ["bug", "duplicate", "1 (Low Risk)", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "No Method To Remove Token Pairs"}, {"title": "`previousPrices` Is Never Updated Upon Syncing Token Price", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/103", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "`previousPrices` Is Never Updated Upon Syncing Token Price"}, {"title": "`_addVaderPair` and `_addUSDVPair` Does Not Check For Duplicate Token Pairs", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/102", "labels": ["bug", "1 (Low Risk)", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "`_addVaderPair` and `_addUSDVPair` Does Not Check For Duplicate Token Pairs"}, {"title": "validateGas does nothing", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/99", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "GasThrottle"], "target": "2021-12-vader-findings", "body": "validateGas does nothing"}, {"title": "denial of service", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/98", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "denial of service"}, {"title": "Users can lock themselves out of being able to convert VETH, becoming stuck with the deprecated asset", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/97", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Users can lock themselves out of being able to convert VETH, becoming stuck with the deprecated asset"}, {"title": "Inclusion of salt and chainId in merkle tree leaves increases gas costs for no reason.", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/96", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "Converter"], "target": "2021-12-vader-findings", "body": "Inclusion of salt and chainId in merkle tree leaves increases gas costs for no reason."}, {"title": "wrong revert message", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/87", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "Converter"], "target": "2021-12-vader-findings", "body": "wrong revert message"}, {"title": "Modifier onlyUSDV() and function _onlyUSDV()", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/77", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "Vader"], "target": "2021-12-vader-findings", "body": "Modifier onlyUSDV() and function _onlyUSDV()"}, {"title": "Unnecessary supportedToken checks on swaps on VaderPoolV2", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/74", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "Unnecessary supportedToken checks on swaps on VaderPoolV2"}, {"title": "Storage of previous prices and total liquidity weights is suboptimal for gas costs", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/73", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Storage of previous prices and total liquidity weights is suboptimal for gas costs"}, {"title": "VaderPoolV2 owner can steal all user assets which are approved VaderPoolV2", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/72", "labels": ["bug", "3 (High Risk)", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "VaderPoolV2 owner can steal all user assets which are approved VaderPoolV2"}, {"title": "Reserve does not properly apply prices of VADER and USDV tokens", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/71", "labels": ["bug", "3 (High Risk)", "VaderReserve"], "target": "2021-12-vader-findings", "body": "Reserve does not properly apply prices of VADER and USDV tokens"}, {"title": "Oracle returns an improperly scaled USDV/VADER price", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/70", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Oracle returns an improperly scaled USDV/VADER price"}, {"title": "Unnecessary checks on VADER token address in oracle.", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/69", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Unnecessary checks on VADER token address in oracle."}, {"title": "VaderMath:calculateSwapReverse require statement change to <= instead of <", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/61", "labels": ["bug", "1 (Low Risk)", "VaderMath"], "target": "2021-12-vader-findings", "body": "VaderMath:calculateSwapReverse require statement change to <= instead of <"}, {"title": "Functions to calculate synth name/symbol should live in factory to reduce bytecode", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/58", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "Synth"], "target": "2021-12-vader-findings", "body": "Functions to calculate synth name/symbol should live in factory to reduce bytecode"}, {"title": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/55", "labels": ["bug", "3 (High Risk)", "VaderPoolV2", "VaderRouterV2"], "target": "2021-12-vader-findings", "body": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve."}, {"title": "No way to remove GasThrottle from VaderPool after deployment", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/52", "labels": ["bug", "2 (Med Risk)", "VaderPool"], "target": "2021-12-vader-findings", "body": "No way to remove GasThrottle from VaderPool after deployment"}, {"title": "Make use of a bitmap for claims to save gas in Converter.sol", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/48", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "Converter"], "target": "2021-12-vader-findings", "body": "Make use of a bitmap for claims to save gas in Converter.sol"}, {"title": "USDV minting limit is not applied if `cycleTimestamp <= block.timestamp`", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/45", "labels": ["bug", "1 (Low Risk)", "USDV"], "target": "2021-12-vader-findings", "body": "USDV minting limit is not applied if `cycleTimestamp <= block.timestamp`"}, {"title": "Council veto protection does not work", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/44", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "GovernorAlpha"], "target": "2021-12-vader-findings", "body": "Council veto protection does not work"}, {"title": "VaderMath:calculateSlipAdjustment() wrong comments", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/43", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderMath"], "target": "2021-12-vader-findings", "body": "VaderMath:calculateSlipAdjustment() wrong comments"}, {"title": "Oracle doesn't calculate USDV/VADER price correctly", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/42", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Oracle doesn't calculate USDV/VADER price correctly"}, {"title": "unsafe cast", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/41", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "LinearVesting"], "target": "2021-12-vader-findings", "body": "unsafe cast"}, {"title": "Oracle can be manipulted to consider only a single pair for pricing", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/40", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "LiquidityBasedTWAP"], "target": "2021-12-vader-findings", "body": "Oracle can be manipulted to consider only a single pair for pricing"}, {"title": "transfer return value of a general ERC20 is ignored", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/39", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-12-vader-findings", "body": "transfer return value of a general ERC20 is ignored"}, {"title": "Never used parameters", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/35", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Never used parameters"}, {"title": "Solidity compiler versions mismatch", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/31", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Solidity compiler versions mismatch"}, {"title": "Upgrade pragma to at least 0.8.4", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/25", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Upgrade pragma to at least 0.8.4"}, {"title": "State variables that could be set immutable", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/19", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "State variables that could be set immutable"}, {"title": "Storage double reading. Could save SLOAD", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/15", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Storage double reading. Could save SLOAD"}, {"title": "Unused state variables", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Unused state variables"}, {"title": "Use bytes32 instead of string to save gas whenever possible", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/12", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Use bytes32 instead of string to save gas whenever possible"}, {"title": "Unused imports", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "Unused imports"}, {"title": "wrong comment", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/9", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "BasePool"], "target": "2021-12-vader-findings", "body": "wrong comment"}, {"title": "Redudant 2nd call to lastTimeRewardApplicable in StakingRewards.sol", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/8", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "StakingRewards"], "target": "2021-12-vader-findings", "body": "Redudant 2nd call to lastTimeRewardApplicable in StakingRewards.sol"}, {"title": "VaderReserve.reimburseImpermanentLoss improperly converts USDV to VADER", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/7", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-12-vader-findings", "body": "VaderReserve.reimburseImpermanentLoss improperly converts USDV to VADER"}, {"title": "Redemption value of synths can be manipulated to drain `VaderPoolV2` of all native assets in the associated pair", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/5", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "Redemption value of synths can be manipulated to drain `VaderPoolV2` of all native assets in the associated pair"}, {"title": "Core AMM logic is written to give the impression it is working on a different asset than it is.", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/4", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "VaderMath"], "target": "2021-12-vader-findings", "body": "Core AMM logic is written to give the impression it is working on a different asset than it is."}, {"title": "VaderPoolV2.mintFungible exposes users to unlimited slippage", "html_url": "https://github.com/code-423n4/2021-12-vader-findings/issues/2", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-12-vader-findings", "body": "VaderPoolV2.mintFungible exposes users to unlimited slippage"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/362", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-01-insure-findings", "body": "Gas Optimizations"}, {"title": "Gas: Avoid expensive calculation by checking if `originalLiquidity() == 0`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/361", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Avoid expensive calculation by checking if `originalLiquidity() == 0`"}, {"title": "Gas: Optimize Conditional Statements in `PoolTemplate.sol:worth()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/355", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Optimize Conditional Statements in `PoolTemplate.sol:worth()`"}, {"title": "Index compensate is 0 when totalLiquidity() is enough to cover the whole amount", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/354", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Index compensate is 0 when totalLiquidity() is enough to cover the whole amount"}, {"title": "Unbounded iteration over all indexes (2)", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/352", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Unbounded iteration over all indexes (2)"}, {"title": "Gas: `incident.payoutDenominator` is used only once. It shouldn't be stored in a variable.", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/350", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: `incident.payoutDenominator` is used only once. It shouldn't be stored in a variable."}, {"title": "Gas: `incident.payoutNumerator` is used only once. It shouldn't be stored in a variable.", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/349", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: `incident.payoutNumerator` is used only once. It shouldn't be stored in a variable."}, {"title": "Insurance Pool Locking Does Not Propagate To All Markets", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/347", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Insurance Pool Locking Does Not Propagate To All Markets"}, {"title": "Gas: `PoolTemplate:initialize()::_conditions` should be a fixed array of size 2", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/345", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Gas: `PoolTemplate:initialize()::_conditions` should be a fixed array of size 2"}, {"title": "Gas: Avoid expensive calculation by checking if `valueAll() == 0`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/344", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Avoid expensive calculation by checking if `valueAll() == 0`"}, {"title": "Gas: Cache `attributions[_target]` in `Vault.sol:underlyingValue()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/343", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Cache `attributions[_target]` in `Vault.sol:underlyingValue()`"}, {"title": "Pause check missing on the several functions (PoolTemplate)", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/339", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Pause check missing on the several functions (PoolTemplate)"}, {"title": "Misleading comments and documentation", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/337", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Misleading comments and documentation"}, {"title": "Ordering importance in a struct", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/334", "labels": ["bug", "help wanted", "0 (Non-critical)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Ordering importance in a struct"}, {"title": "Order of statements", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/332", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Order of statements"}, {"title": "Gas: Cache `_fee[_target]` in `Parameters.sol:getFeeRate()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/320", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Cache `_fee[_target]` in `Parameters.sol:getFeeRate()`"}, {"title": "Gas Optimization: Use unchecked for safe math", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/317", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas Optimization: Use unchecked for safe math"}, {"title": "Add a timelock to `Parameters:setFeeRate`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/315", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Add a timelock to `Parameters:setFeeRate`"}, {"title": "Validate _to is not empty", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/314", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Validate _to is not empty"}, {"title": "getLockup and getWithdrawable can change after withdrawalReq is initiated", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/312", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "getLockup and getWithdrawable can change after withdrawalReq is initiated"}, {"title": "`targetLev` can be set to 0 in `IndexTemplate:setLeverage`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/311", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "`targetLev` can be set to 0 in `IndexTemplate:setLeverage`"}, {"title": "Insurance NFT", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/310", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Insurance NFT"}, {"title": "deposit and _depositFrom are almost similar", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/309", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "deposit and _depositFrom are almost similar"}, {"title": "Repeated math operations", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/308", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Repeated math operations"}, {"title": "repayDebt optimization", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/307", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "repayDebt optimization"}, {"title": "Repeated storage reads", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/306", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Repeated storage reads"}, {"title": "Repeated external calls", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/304", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Repeated external calls"}, {"title": "Eliminate else block", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/303", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Eliminate else block"}, {"title": "Gas: Cache `totalLiquidity()` in `IndexTemplate:leverage()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/301", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Cache `totalLiquidity()` in `IndexTemplate:leverage()`"}, {"title": "Gas: Optimize Conditional Statements in `IndexTemplate.sol:deposit()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/300", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Optimize Conditional Statements in `IndexTemplate.sol:deposit()`"}, {"title": "`Factory:approveTemplate` could make 1 SSTORE instead of 3", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/298", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "`Factory:approveTemplate` could make 1 SSTORE instead of 3"}, {"title": "Spec error on function: `Factory:setCondition` (difference with code comment)", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/297", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Spec error on function: `Factory:setCondition` (difference with code comment)"}, {"title": "Spec error on function: `Factory:approveTemplate`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/296", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Spec error on function: `Factory:approveTemplate`"}, {"title": "`requestWithdraw` without obligation to withdraw allow underwriter to avoid payout", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/295", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "`requestWithdraw` without obligation to withdraw allow underwriter to avoid payout"}, {"title": "Inconsistent divide by 0 checks for `totalSupply()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/287", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Inconsistent divide by 0 checks for `totalSupply()`"}, {"title": "Gas: Optimize Conditional Statements in `CDSTemplate.sol:deposit()`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/285", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Optimize Conditional Statements in `CDSTemplate.sol:deposit()`"}, {"title": "Wrong comment on fund function", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/284", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Wrong comment on fund function"}, {"title": "[WP-H39] `PoolTemplate.sol#resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/283", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-H39] `PoolTemplate.sol#resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools"}, {"title": "[WP-G37] Change `public` constant variables to `private` / `internal` can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/282", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G37] Change `public` constant variables to `private` / `internal` can save gas"}, {"title": "[WP-H36] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/281", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-H36] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool"}, {"title": "[WP-H33] `IndexTemplate.sol` Wrong implementation allows lp of the index pool to resume a locked `PayingOut` pool and escape the responsibility for the compensation", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/278", "labels": ["bug", "3 (High Risk)"], "target": "2022-01-insure-findings", "body": "[WP-H33] `IndexTemplate.sol` Wrong implementation allows lp of the index pool to resume a locked `PayingOut` pool and escape the responsibility for the compensation"}, {"title": "using operator `&&` used more gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/274", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "using operator `&&` used more gas"}, {"title": "[WP-H30] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/272", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "[WP-H30] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts"}, {"title": "[WP-H29] `Vault#setController()` owner of the Vault contracts can drain funds from the Vault", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/271", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "[WP-H29] `Vault#setController()` owner of the Vault contracts can drain funds from the Vault"}, {"title": "[WP-L28] `Vault#_unutilize()` Lack of validation for the amount of funds received", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/270", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-L28] `Vault#_unutilize()` Lack of validation for the amount of funds received"}, {"title": "[WP-H27] `IndexTemplate.sol#compensate()` will most certainly fail", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/269", "labels": ["bug", "3 (High Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-H27] `IndexTemplate.sol#compensate()` will most certainly fail"}, {"title": "[WP-L26] `Vault#setController()` Lack of validation for the amount of migrated funds", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/268", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-L26] `Vault#setController()` Lack of validation for the amount of migrated funds"}, {"title": "[WP-H24] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/266", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "[WP-H24] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances"}, {"title": "[WP-G23] Avoiding unnecessary storage read can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/265", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G23] Avoiding unnecessary storage read can save gas"}, {"title": "[WP-G21] Cache external call results can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/264", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G21] Cache external call results can save gas"}, {"title": "the first depositor to a pool can drain all users", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/263", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "the first depositor to a pool can drain all users"}, {"title": "PoolTemplate.availableBalance calls totalLiquidity twice", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/262", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "PoolTemplate.availableBalance calls totalLiquidity twice"}, {"title": "Keeper, not controller: Vault.setKeeper and utilize descriptions are incorrect", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/259", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Keeper, not controller: Vault.setKeeper and utilize descriptions are incorrect"}, {"title": "Struct layout", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/253", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Struct layout"}, {"title": "backdoor in `withdrawRedundant`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/252", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "backdoor in `withdrawRedundant`"}, {"title": "Initial pool deposit can be stolen", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/250", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Initial pool deposit can be stolen"}, {"title": "Premium payments can be timed", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/249", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Premium payments can be timed"}, {"title": "Lower slack can be higher than upper slack", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/248", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "Lower slack can be higher than upper slack"}, {"title": "Future owner is not cleared", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/247", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Future owner is not cleared"}, {"title": "Can create market without some conditions", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/246", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Can create market without some conditions"}, {"title": "Typo for withdawable in multiple places in Parameters.sol  ", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/244", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Typo for withdawable in multiple places in Parameters.sol  "}, {"title": "Input validation not done in few important functions in Parameters.sol", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/243", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Input validation not done in few important functions in Parameters.sol"}, {"title": "Inconsistency in pragma solidity version definition in InsureDAOERC20.sol", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/242", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Inconsistency in pragma solidity version definition in InsureDAOERC20.sol"}, {"title": "Constructor not used", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/240", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Constructor not used"}, {"title": "[WP-G19] Changing bool to uint256 can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/238", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "[WP-G19] Changing bool to uint256 can save gas"}, {"title": "[WP-G18] Avoiding repeated `marketStatus` checks can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/237", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G18] Avoiding repeated `marketStatus` checks can save gas"}, {"title": "[WP-M17] `Vault.sol` Tokens with fee on transfer are not supported", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/236", "labels": ["bug", "2 (Med Risk)"], "target": "2022-01-insure-findings", "body": "[WP-M17] `Vault.sol` Tokens with fee on transfer are not supported"}, {"title": "[WP-G14] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/233", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G14] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas"}, {"title": "[WP-G12] Cache function call results in the stack can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/231", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G12] Cache function call results in the stack can save gas"}, {"title": "[WP-G11] Check of `_amount > 0` can be done earlier to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/230", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G11] Check of `_amount > 0` can be done earlier to save gas"}, {"title": "Improper Upper Bound Definition on the Fee", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/229", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor acknowledged", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Improper Upper Bound Definition on the Fee"}, {"title": "System Debt Is Not Handled When Insurance Pools Become Insolvent", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/228", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "System Debt Is Not Handled When Insurance Pools Become Insolvent"}, {"title": "Implement check effect interaction to align with best practices", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/227", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Implement check effect interaction to align with best practices"}, {"title": "Allowance checks not correctly implemented", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/226", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Allowance checks not correctly implemented"}, {"title": "Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/224", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts"}, {"title": "[WP-G7] `InsureDAOERC20#transferFrom()` Check of allowance can be done earlier to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/219", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G7] `InsureDAOERC20#transferFrom()` Check of allowance can be done earlier to save gas"}, {"title": "[WP-G6] Remove redundant code can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/218", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G6] Remove redundant code can save gas"}, {"title": "[WP-N5] Missing error messages in require statements", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/217", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-N5] Missing error messages in require statements"}, {"title": "[WP-G4] Remove unnecessary variables can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/216", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G4] Remove unnecessary variables can save gas"}, {"title": "[WP-G3] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/215", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G3] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas"}, {"title": "[WP-G1] `InsureDAOERC20#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/213", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "[WP-G1] `InsureDAOERC20#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max"}, {"title": "[WP-N0] Race condition on ERC20 approval", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/212", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "[WP-N0] Race condition on ERC20 approval"}, {"title": "Avoid unnecessary code execution can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/210", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Avoid unnecessary code execution can save gas"}, {"title": "Factory. createMarket doesn't check if input array length is too big", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/198", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Factory. createMarket doesn't check if input array length is too big"}, {"title": "Vault. withdrawValue will fail on subtraction if there are not enough _attributions", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/197", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Vault. withdrawValue will fail on subtraction if there are not enough _attributions"}, {"title": "Multiple boolean comparrisons", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/194", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Multiple boolean comparrisons"}, {"title": "Typo in PoolTemplate unlock function results in user being able to unlock multiple times", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/192", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Typo in PoolTemplate unlock function results in user being able to unlock multiple times"}, {"title": "PoolTemplate worth function description is incorrect", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/189", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "PoolTemplate worth function description is incorrect"}, {"title": "set  `_mintAmount = _amount;` in the memory can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/188", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "set  `_mintAmount = _amount;` in the memory can save gas"}, {"title": "Remove unnecessary if statements for gas optimization ", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/186", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Remove unnecessary if statements for gas optimization "}, {"title": "Signature replay", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/184", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Signature replay"}, {"title": "anyone can get money from an incident without paying beforehand", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/183", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "anyone can get money from an incident without paying beforehand"}, {"title": "Avoid use of state variables in event emissions to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/182", "labels": ["bug", "duplicate", "G (Gas Optimization)"], "target": "2022-01-insure-findings", "body": "Avoid use of state variables in event emissions to save gas"}, {"title": "Checking non-zero value can avoid an external call to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/181", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Checking non-zero value can avoid an external call to save gas"}, {"title": "Caching variables", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/178", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Caching variables"}, {"title": "Incorrect Natspec can lead to errors", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/176", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Incorrect Natspec can lead to errors"}, {"title": "Edge case in withdrawValue may lead to failed transactions", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/174", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Edge case in withdrawValue may lead to failed transactions"}, {"title": "Grouping Repeated Logic Into a Modifier To Save on Deployment Costs", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/172", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "Grouping Repeated Logic Into a Modifier To Save on Deployment Costs"}, {"title": "Moving Variable Declarations Before Error Checks Can Save Gas on Failure", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/170", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Moving Variable Declarations Before Error Checks Can Save Gas on Failure"}, {"title": "Unnecessary use of _msgSender()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/166", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Unnecessary use of _msgSender()"}, {"title": "The fund function of the CDSTemplate contract does not match the description", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/161", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "The fund function of the CDSTemplate contract does not match the description"}, {"title": "Owner can call `applyCover` multiple times in `PoolTemplate.sol`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/160", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Owner can call `applyCover` multiple times in `PoolTemplate.sol`"}, {"title": "Remove unnecessary address cast in Vault.sol", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/159", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Remove unnecessary address cast in Vault.sol"}, {"title": "Tokens can be burned with no access control", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/158", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Tokens can be burned with no access control"}, {"title": "Incorrect return value comment", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/157", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Incorrect return value comment"}, {"title": "Inaccurate return value from `getCDS()` possible", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/155", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "Inaccurate return value from `getCDS()` possible"}, {"title": "No slippage control in CDSTemplate.sol = frontrun or sandwich", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/153", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "No slippage control in CDSTemplate.sol = frontrun or sandwich"}, {"title": "Use `calldata` instead of `memory` for function parameters", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/145", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Use `calldata` instead of `memory` for function parameters"}, {"title": "Save gas in requestWithdraw()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/142", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Save gas in requestWithdraw()"}, {"title": "totalAllocPoint in IndexTemplate.sol can be cached", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/140", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "totalAllocPoint in IndexTemplate.sol can be cached"}, {"title": "commitTransferOwnership() could save gas 1", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/139", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "commitTransferOwnership() could save gas 1"}, {"title": "acceptTransferOwnership() could save gas by using msg.sender", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/138", "labels": ["bug", "duplicate", "G (Gas Optimization)"], "target": "2022-01-insure-findings", "body": "acceptTransferOwnership() could save gas by using msg.sender"}, {"title": "Avoid expensive storage reads in Parameters.sol", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/137", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Avoid expensive storage reads in Parameters.sol"}, {"title": "In PoolTemplate.sol, deposit() and _depositFrom() can re-use the same code", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/133", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "In PoolTemplate.sol, deposit() and _depositFrom() can re-use the same code"}, {"title": "Emit an event in setKeeper()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/132", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Emit an event in setKeeper()"}, {"title": "No-op in CDSTemplate.sol' withdraw()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/130", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "No-op in CDSTemplate.sol' withdraw()"}, {"title": "resume() can be called by anyone in IndexTemplate.sol", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/129", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "resume() can be called by anyone in IndexTemplate.sol"}, {"title": "Wrong revert string in withdraw functions", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/128", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Wrong revert string in withdraw functions"}, {"title": "repayDebt in Vault.sol could DOS functionality for markets", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/126", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "repayDebt in Vault.sol could DOS functionality for markets"}, {"title": "call emit from storage is more expensive", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/124", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "call emit from storage is more expensive"}, {"title": "save Insurance data directly to storage can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "save Insurance data directly to storage can save gas"}, {"title": "unnecessary double `totalLiquidity()` call in function availableBalance", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/121", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "unnecessary double `totalLiquidity()` call in function availableBalance"}, {"title": "Lack of inputs in Factory", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/120", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Lack of inputs in Factory"}, {"title": "Gas saving caching the value", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/118", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas saving caching the value"}, {"title": "split one require to two require can save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/113", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "split one require to two require can save gas"}, {"title": "avoid using 'else' code can save gas in function pendingPremium", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/111", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "avoid using 'else' code can save gas in function pendingPremium"}, {"title": "Missing validation of address argument could indefinitely lock Registry contract", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/110", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Missing validation of address argument could indefinitely lock Registry contract"}, {"title": "in function _sub, less gas used using unchecked", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/108", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "in function _sub, less gas used using unchecked"}, {"title": "Uncontrolled call to controller, which can be the zero address", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/94", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Uncontrolled call to controller, which can be the zero address"}, {"title": "Gas optimization in Vault.addValueBatch()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/89", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas optimization in Vault.addValueBatch()"}, {"title": "Shorten Error Messages to Save Gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/87", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Shorten Error Messages to Save Gas"}, {"title": "Loss of precision and increased gas cost with double assignment on a calculation  ", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/84", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Loss of precision and increased gas cost with double assignment on a calculation  "}, {"title": "Gas: Use `else if` to save gas and simplify code", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/83", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Use `else if` to save gas and simplify code"}, {"title": "Gas: Short-circuiting in an if-statement", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/82", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Short-circuiting in an if-statement"}, {"title": "Gas: Redundant if-statement with the for-loop condition", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/81", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Redundant if-statement with the for-loop condition"}, {"title": "Gas: Avoid double assignment on variable", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/80", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Avoid double assignment on variable"}, {"title": "`CDSTemplate.sol:compensate` code optimization", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/79", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "`CDSTemplate.sol:compensate` code optimization"}, {"title": "Gas: Contracts inheriting `InsureDAOERC20` don't need to import some dependencies *again*", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/78", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Contracts inheriting `InsureDAOERC20` don't need to import some dependencies *again*"}, {"title": "unnecessary checked postfix arithmetics", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/76", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "unnecessary checked postfix arithmetics"}, {"title": "Gas: Consider making variables that aren't updated outside the constructor as `immutable`", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/72", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Consider making variables that aren't updated outside the constructor as `immutable`"}, {"title": "Gas: Costly operations inside a loop (`IndexTemplate._adjustAlloc()`)", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/69", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Costly operations inside a loop (`IndexTemplate._adjustAlloc()`)"}, {"title": "Gas: Storage variable `IndexTemplate:pendingEnd#62` is never used and should be deleted", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/68", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Storage variable `IndexTemplate:pendingEnd#62` is never used and should be deleted"}, {"title": "Gas: Unnecessary checked arithmetic when no overflow/underflow possible", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/66", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Unnecessary checked arithmetic when no overflow/underflow possible"}, {"title": "too much centralization in the vault, the vault owner can withdraw all the value in the vault", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/65", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-insure-findings", "body": "too much centralization in the vault, the vault owner can withdraw all the value in the vault"}, {"title": "Gas: Use `calldata` instead of `memory` for external functions where the function argument is read-only.", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/64", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Use `calldata` instead of `memory` for external functions where the function argument is read-only."}, {"title": "Gas: Unused Named Returns", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/63", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Unused Named Returns"}, {"title": "Gas: Usage of a non-native 256 bits uint as a counter in for-loops increases gas cost", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/62", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Usage of a non-native 256 bits uint as a counter in for-loops increases gas cost"}, {"title": "Gas optimization in PoolTemplate.withdraw()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/59", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas optimization in PoolTemplate.withdraw()"}, {"title": "Gas optimization in IndexTemplate._adjustAlloc()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/58", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "Gas optimization in IndexTemplate._adjustAlloc()"}, {"title": "Gas optimization in IndexTemplate.requestWithdraw()", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/56", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas optimization in IndexTemplate.requestWithdraw()"}, {"title": "_depositFrom() does not  ensure that _from arg is not the contract itself ", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/51", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "_depositFrom() does not  ensure that _from arg is not the contract itself "}, {"title": "pool can't be initialized", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/48", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "pool can't be initialized"}, {"title": "Update to solc-0.8.10+", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/47", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Update to solc-0.8.10+"}, {"title": "Parameters.sol lacks input validation", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/44", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Parameters.sol lacks input validation"}, {"title": "Gas: An array's length should be cached to save gas in for-loops", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/43", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: An array's length should be cached to save gas in for-loops"}, {"title": "Redundant if statements in market deployment function", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/41", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Redundant if statements in market deployment function"}, {"title": "Gas: No need to initialize variables with default values", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/40", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: No need to initialize variables with default values"}, {"title": "Redundant tracking of markets in factory", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/39", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Redundant tracking of markets in factory"}, {"title": "Gas: SafeMath is not needed when using Solidity version 0.8.*", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/38", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: SafeMath is not needed when using Solidity version 0.8.*"}, {"title": "allocatedCredit and availableBalance are always read together so should be returned together.", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/37", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "allocatedCredit and availableBalance are always read together so should be returned together."}, {"title": "Gas: `> 0` is less efficient than `!= 0` for unsigned integers", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/36", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: `> 0` is less efficient than `!= 0` for unsigned integers"}, {"title": "Unnecessary market status check on redemption", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/32", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Unnecessary market status check on redemption"}, {"title": "Skip balance check in _beforeTokenTransfer if no withdrawalRequest exists", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/31", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Skip balance check in _beforeTokenTransfer if no withdrawalRequest exists"}, {"title": "Gas: Consider making some constants as non-public to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/30", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Gas: Consider making some constants as non-public to save gas"}, {"title": "Withdrawal struct can be packed to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/27", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Withdrawal struct can be packed to save gas"}, {"title": "sqrt can be made unchecked to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/26", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "sqrt can be made unchecked to save gas"}, {"title": "Never used parameters", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/22", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "Never used parameters"}, {"title": "Assert instead require to validate user inputs", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/21", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Assert instead require to validate user inputs"}, {"title": "Two Steps Verification before Transferring Ownership", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/20", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2022-01-insure-findings", "body": "Two Steps Verification before Transferring Ownership"}, {"title": "Named return issue", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/18", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Named return issue"}, {"title": "Require with empty message", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/15", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Require with empty message"}, {"title": "Check if amount is not zero to save gas", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Check if amount is not zero to save gas"}, {"title": "Public functions to external", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Public functions to external"}, {"title": "Storage double reading. Could save SLOAD", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Storage double reading. Could save SLOAD"}, {"title": "Unused state variables", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Unused state variables"}, {"title": "Unused imports", "html_url": "https://github.com/code-423n4/2022-01-insure-findings/issues/1", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-insure-findings", "body": "Unused imports"}, {"title": "Multiple potential reentrancies", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/270", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Multiple potential reentrancies"}, {"title": "Anyone can crash transferTo", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/261", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Anyone can crash transferTo"}, {"title": "Optimize `OpenLevV1.sol#addMarket`", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/250", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Optimize `OpenLevV1.sol#addMarket`"}, {"title": "Timelock.sol modification removes logic checks", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/247", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "Timelock.sol modification removes logic checks"}, {"title": "Gas Optimization: Redundant check", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/236", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas Optimization: Redundant check"}, {"title": "anti-flashloan mechanism may lead to protocol default", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/233", "labels": ["bug", "2 (Med Risk)"], "target": "2022-01-openleverage-findings", "body": "anti-flashloan mechanism may lead to protocol default"}, {"title": "transfer() may break in future ETH upgrade", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/228", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "transfer() may break in future ETH upgrade"}, {"title": "Gas Optimization: No need to use SafeMath everywhere", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/225", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas Optimization: No need to use SafeMath everywhere"}, {"title": "Funds can be lost", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/220", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Funds can be lost"}, {"title": "Last reward is discarded when reward added twice", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/218", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Last reward is discarded when reward added twice"}, {"title": "User reward can get stuck", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/215", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "User reward can get stuck"}, {"title": "Gas savings and corrections", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/212", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas savings and corrections"}, {"title": "Unused library `ReentrancyGuard`", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/209", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Unused library `ReentrancyGuard`"}, {"title": "`UniV2ClassDex.sol#uniClassSell()` Tokens with fee on transfer are not fully supported", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/208", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "`UniV2ClassDex.sol#uniClassSell()` Tokens with fee on transfer are not fully supported"}, {"title": "Misc", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/198", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Misc"}, {"title": "Bad actor may steal deposit return when liquidating a trade", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/195", "labels": ["bug", "1 (Low Risk)"], "target": "2022-01-openleverage-findings", "body": "Bad actor may steal deposit return when liquidating a trade"}, {"title": "The check for `max rate 1000 ole` should be inclusive", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/164", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "The check for `max rate 1000 ole` should be inclusive"}, {"title": "endTime can be before startTime", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/160", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "endTime can be before startTime"}, {"title": "Gas: `// Shh - currently unused`", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/153", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas: `// Shh - currently unused`"}, {"title": "Gas in `LPool.sol:availableForBorrow()`: Avoid expensive calculation with an inclusive inequality", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/148", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas in `LPool.sol:availableForBorrow()`: Avoid expensive calculation with an inclusive inequality"}, {"title": "`ControllerStorage`: related market data should be grouped in a struct", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/146", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "`ControllerStorage`: related market data should be grouped in a struct"}, {"title": "Gas Optimization: Tight variable packing in `LPoolStorage.sol`", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/140", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-01-openleverage-findings", "body": "Gas Optimization: Tight variable packing in `LPoolStorage.sol`"}, {"title": "Gas in `Adminable.sol:acceptAdmin()`: SLOADs minimization", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/137", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas in `Adminable.sol:acceptAdmin()`: SLOADs minimization"}, {"title": "Gas: Tautology on \"variable >= 0\" which is always true as variable is uint", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/132", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Gas: Tautology on \"variable >= 0\" which is always true as variable is uint"}, {"title": "Gas: Shift Right instead of Dividing by 2", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/131", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas: Shift Right instead of Dividing by 2"}, {"title": "Gas: \"constants\" expressions are expressions, not constants. Use \"immutable\" instead.", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas: \"constants\" expressions are expressions, not constants. Use \"immutable\" instead."}, {"title": "use require instead if/else", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/121", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "use require instead if/else"}, {"title": "unnecessary uint declaration", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/117", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "unnecessary uint declaration"}, {"title": "Gas saving optimizing storage", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/116", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas saving optimizing storage"}, {"title": "Gas saving optimizing setImplementation", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Gas saving optimizing setImplementation"}, {"title": "Anyone can claim airdrop amounts on behalf of anyone", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/107", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Anyone can claim airdrop amounts on behalf of anyone"}, {"title": "OpenLevV1.closeTrade with V3 DEX doesn't correctly accounts fee on transfer tokens for repayments", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/104", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "OpenLevV1.closeTrade with V3 DEX doesn't correctly accounts fee on transfer tokens for repayments"}, {"title": "OpenLevV1.closeTrade can save trade.deposited to memory", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/102", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "OpenLevV1.closeTrade can save trade.deposited to memory"}, {"title": "using > instead of >=", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/100", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "using > instead of >="}, {"title": "UniV3Dex uniV3Buy slippage check error message is misleading", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/88", "labels": ["bug", "1 (Low Risk)"], "target": "2022-01-openleverage-findings", "body": "UniV3Dex uniV3Buy slippage check error message is misleading"}, {"title": "Race condition in approve()", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/87", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Race condition in approve()"}, {"title": "uniV2Buy calls buyAmount.toAmountBeforeTax twice, while it's constant", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/86", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "uniV2Buy calls buyAmount.toAmountBeforeTax twice, while it's constant"}, {"title": "transferAllowed does not fail", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/83", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "transferAllowed does not fail"}, {"title": "Gas saving by caching state variables", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/82", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-01-openleverage-findings", "body": "Gas saving by caching state variables"}, {"title": "Eth sent to Timelock will be locked in current implementation", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/80", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Eth sent to Timelock will be locked in current implementation"}, {"title": "Unused parameters in OpenLevV1 and ControllerV1 functions", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/79", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Unused parameters in OpenLevV1 and ControllerV1 functions"}, {"title": "unnecessary msg.sender cache", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/77", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "unnecessary msg.sender cache"}, {"title": "FarmingPools' notifyRewardAmounts and initDistributions do not check the lengths of input arrays", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/76", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "FarmingPools' notifyRewardAmounts and initDistributions do not check the lengths of input arrays"}, {"title": "OpenLevV1Lib's and LPool's doTransferOut functions call native payable.transfer, which can be unusable for smart contract calls", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/75", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "OpenLevV1Lib's and LPool's doTransferOut functions call native payable.transfer, which can be unusable for smart contract calls"}, {"title": "declaring that contract is using `Utils` lib can use more gas", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/73", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "declaring that contract is using `Utils` lib can use more gas"}, {"title": "caching struct data type in memory cost more gas", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/72", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "caching struct data type in memory cost more gas"}, {"title": "pass the `dexInfo[dexName[i]` value without caching `DexInfo struct`", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/71", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "pass the `dexInfo[dexName[i]` value without caching `DexInfo struct`"}, {"title": "unnecessary _unsedFactory call", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/68", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "unnecessary _unsedFactory call"}, {"title": "The initialize function can be called multiple times", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/67", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "The initialize function can be called multiple times"}, {"title": "set pancakeFactory to constant", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/66", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "set pancakeFactory to constant"}, {"title": "No Transfer Ownership Pattern", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/65", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "No Transfer Ownership Pattern"}, {"title": "UniV2Dex and UniV2ClassDex use hard coded factory addresses for Pair and PairFees getters", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/64", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "UniV2Dex and UniV2ClassDex use hard coded factory addresses for Pair and PairFees getters"}, {"title": "Using `require` instead of `&&` can save gas", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/63", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Using `require` instead of `&&` can save gas"}, {"title": "Missing payable", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/61", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Missing payable"}, {"title": "Use of tx.origin in ControllerV1.sol", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/60", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Use of tx.origin in ControllerV1.sol"}, {"title": "no validation checks in ControllerV1.sol initialize function()", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/57", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "no validation checks in ControllerV1.sol initialize function()"}, {"title": "Anyone can call release() in OLETokenLock.sol", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/56", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Anyone can call release() in OLETokenLock.sol"}, {"title": "mint() function doesn't require 0 to be larger than 0", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/55", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "mint() function doesn't require 0 to be larger than 0"}, {"title": "No validation for constructor arguments in OLEToken.sol", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/53", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "No validation for constructor arguments in OLEToken.sol"}, {"title": "Does not validate the input fee parameter", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/50", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Does not validate the input fee parameter"}, {"title": "Not verified input", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/49", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Not verified input"}, {"title": "Two arrays length mismatch", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/46", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "Two arrays length mismatch"}, {"title": "Never used parameters", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/45", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Never used parameters"}, {"title": "In the following public update functions no value is returned", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/44", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "In the following public update functions no value is returned"}, {"title": "Assert instead require to validate user inputs", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/43", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-openleverage-findings", "body": "Assert instead require to validate user inputs"}, {"title": "Named return issue", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/39", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Named return issue"}, {"title": "Require with not comprehensive message", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/31", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "Require with not comprehensive message"}, {"title": "Require with empty message", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/30", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Require with empty message"}, {"title": "Use calldata instead of memory", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Use calldata instead of memory"}, {"title": "Inline one time use functions", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/26", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Inline one time use functions"}, {"title": "Mult instead div in compares", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/23", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Mult instead div in compares"}, {"title": "Unused inheritance", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/22", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-01-openleverage-findings", "body": "Unused inheritance"}, {"title": "Use != 0 instead of > 0", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/21", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Use != 0 instead of > 0"}, {"title": "Unnecessary equals boolean", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/20", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Unnecessary equals boolean"}, {"title": "Check if amount is not zero to save gas", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/19", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Check if amount is not zero to save gas"}, {"title": "Upgrade pragma to at least 0.8.4", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/18", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Upgrade pragma to at least 0.8.4"}, {"title": "Caching array length can save gas", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/15", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-01-openleverage-findings", "body": "Caching array length can save gas"}, {"title": "Prefix increments are cheaper than postfix increments", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Prefix increments are cheaper than postfix increments"}, {"title": "Unnecessary array boundaries check when loading an array element twice", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/12", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Unnecessary array boundaries check when loading an array element twice"}, {"title": "State variables that could be set immutable", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "State variables that could be set immutable"}, {"title": "Short the following require messages", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/6", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Short the following require messages"}, {"title": "Use bytes32 instead of string to save gas whenever possible", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-openleverage-findings", "body": "Use bytes32 instead of string to save gas whenever possible"}, {"title": "Unused imports", "html_url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/2", "labels": ["bug", "0 (Non-critical)"], "target": "2022-01-openleverage-findings", "body": "Unused imports"}, {"title": "Gas: Use `msg.sender` directly instead of caching it in a variable", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/244", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-livepeer-findings", "body": "Gas: Use `msg.sender` directly instead of caching it in a variable"}, {"title": "Gas: use `msg.sender` instead of OpenZeppelin's `_msgSender()` when GSN capabilities aren't used", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/243", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "Gas: use `msg.sender` instead of OpenZeppelin's `_msgSender()` when GSN capabilities aren't used"}, {"title": "Fund loss when insufficient call value to cover fee", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/238", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "Fund loss when insufficient call value to cover fee"}, {"title": "Migrate old balance on setToken", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/234", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "Migrate old balance on setToken"}, {"title": "Use abi.encodePacked for gas optimization", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/225", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-livepeer-findings", "body": "Use abi.encodePacked for gas optimization"}, {"title": "Don't assign default values", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/215", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "Don't assign default values"}, {"title": "Don't use deprecated library functions", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/207", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "Don't use deprecated library functions"}, {"title": "[WP-H5] `L1Migrator.sol#migrateETH()` dose not send `bridgeMinter`'s ETH to L2 causing ETH get frozen in the contract", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/205", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2022-01-livepeer-findings", "body": "[WP-H5] `L1Migrator.sol#migrateETH()` dose not send `bridgeMinter`'s ETH to L2 causing ETH get frozen in the contract"}, {"title": "Unnecessary checked arithmetic in for loops", "html_url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/204", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-01-livepeer-findings", "body": "Unnecessary checked arithmetic in for loops"}]