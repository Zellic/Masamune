[{"title": "[N02] Imprecise gas limits [core]", "body": "[N02] Imprecise gas limits [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n02]-imprecise-gas-limits-[core]", "labels": ["OpenZeppelin"]}, {"title": "combines the various gas parameters into a single variable\u00a0so they can be collectively compared against a hardcoded limit. Although this correctly ensures all values are individually less than the maximum", "body": "combines the various gas parameters into a single variable\u00a0so they can be collectively compared against a hardcoded limit. Although this correctly ensures all values are individually less than the maximum", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#combines-the-various-gas-parameters-into-a-single-variable\u00a0so-they-can-be-collectively-compared-against-a-hardcoded-limit.-although-this-correctly-ensures-all-values-are-individually-less-than-the-maximum", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#86.", "body": "Update: Fixed in pull request\u00a0#86.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#86.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Duplicated naming [core]", "body": "[N03] Duplicated naming [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n03]-duplicated-naming-[core]", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0EntryPoint\u00a0contract, the\u00a0paymasterStake\u00a0variable\u00a0has the same name as\u00a0one of the\u00a0PaymentMode\u00a0options.", "body": "In the\u00a0EntryPoint\u00a0contract, the\u00a0paymasterStake\u00a0variable\u00a0has the same name as\u00a0one of the\u00a0PaymentMode\u00a0options.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0entrypoint\u00a0contract,-the\u00a0paymasterstake\u00a0variable\u00a0has-the-same-name-as\u00a0one-of-the\u00a0paymentmode\u00a0options.", "labels": ["OpenZeppelin"]}, {"title": "Consider using different names to improve code readability and avoid confusion.", "body": "Consider using different names to improve code readability and avoid confusion.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-using-different-names-to-improve-code-readability-and-avoid-confusion.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. Pull request\u00a0#76\u00a0relocates the\u00a0paymasterStake\u00a0variable from the\u00a0EntryPoint\u00a0contract to the\u00a0StakeManager\u00a0contract, but does not rename it.", "body": "Update: Partially fixed. Pull request\u00a0#76\u00a0relocates the\u00a0paymasterStake\u00a0variable from the\u00a0EntryPoint\u00a0contract to the\u00a0StakeManager\u00a0contract, but does not rename it.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-partially-fixed.-pull-request\u00a0#76\u00a0relocates-the\u00a0paymasterstake\u00a0variable-from-the\u00a0entrypoint\u00a0contract-to-the\u00a0stakemanager\u00a0contract,-but-does-not-rename-it.", "labels": ["OpenZeppelin"]}, {"title": "[N04] ECDSA signature length check allows invalid values [sample]", "body": "[N04] ECDSA signature length check allows invalid values [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n04]-ecdsa-signature-length-check-allows-invalid-values-[sample]", "labels": ["OpenZeppelin"]}, {"title": "contains a check\u00a0that the ECDSA signature being verified has a length >= 65 bytes. The", "body": "contains a check\u00a0that the ECDSA signature being verified has a length >= 65 bytes. The", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#contains-a-check\u00a0that-the-ecdsa-signature-being-verified-has-a-length->=-65-bytes.-the", "labels": ["OpenZeppelin"]}, {"title": "tryRecover\u00a0function in the OpenZeppelin", "body": "tryRecover\u00a0function in the OpenZeppelin", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#tryrecover\u00a0function-in-the-openzeppelin", "labels": ["OpenZeppelin"]}, {"title": "Consider modifying the check in\u00a0validatePaymasterUserOp\u00a0to only allow ECDSA signature lengths equal to 65.", "body": "Consider modifying the check in\u00a0validatePaymasterUserOp\u00a0to only allow ECDSA signature lengths equal to 65.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-modifying-the-check-in\u00a0validatepaymasteruserop\u00a0to-only-allow-ecdsa-signature-lengths-equal-to-65.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#66. The signature length must now be equal to 64 or 65 to be considered valid. The\u00a0tryRecover\u00a0function supports both length values. Note that this expands the previous functionality to support the 64-byte encoding, so there are now multiple valid signatures for the same operation.", "body": "Update: Fixed in pull request\u00a0#66. The signature length must now be equal to 64 or 65 to be considered valid. The\u00a0tryRecover\u00a0function supports both length values. Note that this expands the previous functionality to support the 64-byte encoding, so there are now multiple valid signatures for the same operation.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#66.-the-signature-length-must-now-be-equal-to-64-or-65-to-be-considered-valid.-the\u00a0tryrecover\u00a0function-supports-both-length-values.-note-that-this-expands-the-previous-functionality-to-support-the-64-byte-encoding,-so-there-are-now-multiple-valid-signatures-for-the-same-operation.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Fixed Oracle [sample]", "body": "[N05] Fixed Oracle [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n05]-fixed-oracle-[sample]", "labels": ["OpenZeppelin"]}, {"title": "When the owner of the\u00a0DepositPaymaster\u00a0adds a new supported token-oracle pair, it ensures the token\u00a0does not already have an oracle. There is no mechanism to change or remove the oracle. We are simply noting this in case it\u2019s an oversight.", "body": "When the owner of the\u00a0DepositPaymaster\u00a0adds a new supported token-oracle pair, it ensures the token\u00a0does not already have an oracle. There is no mechanism to change or remove the oracle. We are simply noting this in case it\u2019s an oversight.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#when-the-owner-of-the\u00a0depositpaymaster\u00a0adds-a-new-supported-token-oracle-pair,-it-ensures-the-token\u00a0does-not-already-have-an-oracle.-there-is-no-mechanism-to-change-or-remove-the-oracle.-we-are-simply-noting-this-in-case-it\u2019s-an-oversight.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. This was intentional.", "body": "Update: Not an issue. This was intentional.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-not-an-issue.-this-was-intentional.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Incorrectly set argument [core]", "body": "[N06] Incorrectly set argument [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n06]-incorrectly-set-argument-[core]", "labels": ["OpenZeppelin"]}, {"title": "After executing the user operation, the\u00a0internalHandleOp\u00a0function of the\u00a0EntryPoint\u00a0contract\u00a0invokes\u00a0handlePostOp\u00a0with a zero\u00a0opIndex, regardless of the actual position of the operation within the branch. In this particular invocation, the\u00a0opIndex\u00a0parameter is unused, so setting it to zero was chosen as a simplification and gas optimization. Nevertheless, in the interest of code clarity, robustness and to support local reasoning, consider either refactoring the code to avoid the unnecessary parameter, passing in the correct value, or clearly documenting any misleading parameter assignments.", "body": "After executing the user operation, the\u00a0internalHandleOp\u00a0function of the\u00a0EntryPoint\u00a0contract\u00a0invokes\u00a0handlePostOp\u00a0with a zero\u00a0opIndex, regardless of the actual position of the operation within the branch. In this particular invocation, the\u00a0opIndex\u00a0parameter is unused, so setting it to zero was chosen as a simplification and gas optimization. Nevertheless, in the interest of code clarity, robustness and to support local reasoning, consider either refactoring the code to avoid the unnecessary parameter, passing in the correct value, or clearly documenting any misleading parameter assignments.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#after-executing-the-user-operation,-the\u00a0internalhandleop\u00a0function-of-the\u00a0entrypoint\u00a0contract\u00a0invokes\u00a0handlepostop\u00a0with-a-zero\u00a0opindex,-regardless-of-the-actual-position-of-the-operation-within-the-branch.-in-this-particular-invocation,-the\u00a0opindex\u00a0parameter-is-unused,-so-setting-it-to-zero-was-chosen-as-a-simplification-and-gas-optimization.-nevertheless,-in-the-interest-of-code-clarity,-robustness-and-to-support-local-reasoning,-consider-either-refactoring-the-code-to-avoid-the-unnecessary-parameter,-passing-in-the-correct-value,-or-clearly-documenting-any-misleading-parameter-assignments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#78. A comment was added to explain the zero\u00a0opIndex\u00a0value.", "body": "Update: Fixed in pull request\u00a0#78. A comment was added to explain the zero\u00a0opIndex\u00a0value.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#78.-a-comment-was-added-to-explain-the-zero\u00a0opindex\u00a0value.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Inconsistent naming convention [core]", "body": "[N07] Inconsistent naming convention [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n07]-inconsistent-naming-convention-[core]", "labels": ["OpenZeppelin"]}, {"title": "We identified the following examples of inconsistent naming:", "body": "We identified the following examples of inconsistent naming:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#we-identified-the-following-examples-of-inconsistent-naming:", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0EntryPoint.sol:", "body": "line 29 and line 30: simulateOp should be simulateValidation line 178: of should be if line 297: done, by should be done and  In IWallet.sol:  line 10: successfuly. should be successfully.  In StakeManager.sol:  line 12: blocks to should be seconds to wait line 83: time should be duration  In DepositPaymaster.sol:  line 68: on in the same block as withdrawTo() should be in the same block as withdrawTokensTo()  In SimpleWallet.sol:  line 88: (its should be (its  In TokenPaymaster.sol:  line 11: os should be or line 18: method-ids. should be method ids. line 77: paymaster should be entrypoint  In VerifyingPaymaster.sol:  line 57: signing should be to signing  In eip-4337.md:  line 46: for to compensate the bundler for should be to compensate the bundler line 84: worlflow should be workflow line 89: simulateWalletValidation should be simulateValidation line 127: paymaster should be paymaster) line 151: op should be op validation line 165: valiation should be validation and the line should end in a period.  Update: Fixed in pull request #79 and pull request #88.  [N26] Abstract StakeManager contract [core]  The StakeManager contract is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as abstract.  Update: Fixed in pull request #76.  [N27] Declare uint as uint256 [core and sample]  To favor explicitness, consider declaring all instance of uint as uint256.  Update: Fixed in pull request #77.  Conclusions  1 critical and 4 high severity issues were found in the code base in addition to the high severity issue that the Ethereum Foundation noted. Some changes were proposed to follow best practices and reduce the potential attack surface.  Appendix: Architectural Analysis  Overview  Many security features and mitigations to protect nodes and bundlers are executed partially or entirely off-chain; they also involve complex interactions between multiple parties with competing interests. Based on the EIP and our discussions with the Ethereum Foundation, we have captured our understanding of these features to correct any misunderstandings and identify any shortcomings. For clarity, we are referencing the latest design, which includes modifications that were made during or after the audit. This document attempts to describe high level concepts, and then systematically interrogate the details.  Basic Structure  Actors  Wallets  Smart contract wallets are primary accounts. Users construct arbitrary operations and publish them to a new mempool and each operation is associated with a specific smart contract wallet. In practice, each operation is an arbitrary call to the wallet. This allows the wallet to perform an action from its own context. A wallet can be deployed as part of its first operation.  Paymasters  Operations can specify optional paymasters. These are contracts that agree to pay the gas fees associated with the operation. Typically, they would be reimbursed somehow (perhaps with an ERC20 token), but the system does not specify or enforce any particular incentive. They must stake some funds beforehand as an anti-sybil mechanism. They must also prepay for the operations that they will fund.  Bundlers  Bundlers watch the new mempool and aggregate multiple operations into a bundle (i.e. an array of operations). They submit the bundle to miners as an Ethereum transaction. In practice, miners could also be bundlers. They will pay the gas fees associated with the bundle at the transaction gas price. However, users specify their own gas price with each operation and bundlers will be reimbursed at this rate. The difference between the user-specified gas price and the transaction gas price provides the incentive for bundlers to participate.  Miners  Miners treat bundles like normal Ethereum transactions (with a small exception related to transaction ordering, explained below).  Nodes  Nodes are clients that participate in the mempool gossip network without necessarily mining or bundling.  Execution  Bundlers submit their bundle transactions to the global EntryPoint contract. For each operation in the bundle, the EntryPoint validates that the wallet contract accepts it as valid, and that the wallet or paymaster (if specified) is willing and able to pay for it. The paymaster can use this opportunity to validate that the wallet will reimburse them. If any of the validations fail, the whole bundle reverts.  For each (now validated) operation, the EntryPoint creates a new call frame and performs the following steps:  Executes the operation (i.e. invokes the wallet with the operation data) and traps any errors.  Hands control to the paymaster (if it exists) to perform any after-operation functionality, whether or not the operation succeeded. Typically, this would include retrieving reimbursement for the cost of the operation (that the paymaster will pay for).  This call frame wont revert in the first step because err", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0entrypoint.sol:", "labels": ["OpenZeppelin"]}, {"title": "Most internal and private functions are prefixed with an underscore, while\u00a0compensate\u00a0and\u00a0handlePostOp\u00a0are not.", "body": "Most internal and private functions are prefixed with an underscore, while\u00a0compensate\u00a0and\u00a0handlePostOp\u00a0are not.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#most-internal-and-private-functions-are-prefixed-with-an-underscore,-while\u00a0compensate\u00a0and\u00a0handlepostop\u00a0are-not.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0UserOpInfo\u00a0struct has a\u00a0single parameter\u00a0that starts with an underscore.", "body": "The\u00a0UserOpInfo\u00a0struct has a\u00a0single parameter\u00a0that starts with an underscore.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0useropinfo\u00a0struct-has-a\u00a0single-parameter\u00a0that-starts-with-an-underscore.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0_salt\u00a0parameter\u00a0of the\u00a0getSenderAddress\u00a0function starts with an underscore.", "body": "The\u00a0_salt\u00a0parameter\u00a0of the\u00a0getSenderAddress\u00a0function starts with an underscore.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0_salt\u00a0parameter\u00a0of-the\u00a0getsenderaddress\u00a0function-starts-with-an-underscore.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the prefix \u201cinternal\u201d in function names may cause confusion. It seems redundant for functions declared with the\u00a0internal\u00a0keyword, such as the\u00a0deposit manipulation functions\u00a0and misleading for the\u00a0external\u00a0internalHandleOp\u00a0function. We believe the prefix is intended to be descriptive of the actual function behavior, but nevertheless would recommend a different prefix, perhaps \u201clocal\u201d, to avoid overloading Solidity keywords.", "body": "Additionally, the prefix \u201cinternal\u201d in function names may cause confusion. It seems redundant for functions declared with the\u00a0internal\u00a0keyword, such as the\u00a0deposit manipulation functions\u00a0and misleading for the\u00a0external\u00a0internalHandleOp\u00a0function. We believe the prefix is intended to be descriptive of the actual function behavior, but nevertheless would recommend a different prefix, perhaps \u201clocal\u201d, to avoid overloading Solidity keywords.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#additionally,-the-prefix-\u201cinternal\u201d-in-function-names-may-cause-confusion.-it-seems-redundant-for-functions-declared-with-the\u00a0internal\u00a0keyword,-such-as-the\u00a0deposit-manipulation-functions\u00a0and-misleading-for-the\u00a0external\u00a0internalhandleop\u00a0function.-we-believe-the-prefix-is-intended-to-be-descriptive-of-the-actual-function-behavior,-but-nevertheless-would-recommend-a-different-prefix,-perhaps-\u201clocal\u201d,-to-avoid-overloading-solidity-keywords.", "labels": ["OpenZeppelin"]}, {"title": "For clarity and readability, consider using a consistent naming convention.", "body": "For clarity and readability, consider using a consistent naming convention.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#for-clarity-and-readability,-consider-using-a-consistent-naming-convention.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull requests\u00a0#63\u00a0and\u00a0#67. The function and variable naming was made consistent by adding or removing underscores in the requested locations. The\u00a0internalHandleOp\u00a0function usage has been clarified by renaming it to\u00a0innerHandleOp\u00a0and adding an explanatory docstring. The deposit manipulation functions still retain the redundant \u201cinternal\u201d prefix.", "body": "Update: Fixed in pull requests\u00a0#63\u00a0and\u00a0#67. The function and variable naming was made consistent by adding or removing underscores in the requested locations. The\u00a0internalHandleOp\u00a0function usage has been clarified by renaming it to\u00a0innerHandleOp\u00a0and adding an explanatory docstring. The deposit manipulation functions still retain the redundant \u201cinternal\u201d prefix.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-requests\u00a0#63\u00a0and\u00a0#67.-the-function-and-variable-naming-was-made-consistent-by-adding-or-removing-underscores-in-the-requested-locations.-the\u00a0internalhandleop\u00a0function-usage-has-been-clarified-by-renaming-it-to\u00a0innerhandleop\u00a0and-adding-an-explanatory-docstring.-the-deposit-manipulation-functions-still-retain-the-redundant-\u201cinternal\u201d-prefix.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Explicitly identify and name constants [sample]", "body": "[N08] Explicitly identify and name constants [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n08]-explicitly-identify-and-name-constants-[sample]", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TokenPaymaster\u00a0contract, it is recommended to declare the\u00a0COST_OF_POST\u00a0variable as\u00a0constant. This change will eliminate the use of a storage slot for this value.", "body": "In the\u00a0TokenPaymaster\u00a0contract, it is recommended to declare the\u00a0COST_OF_POST\u00a0variable as\u00a0constant. This change will eliminate the use of a storage slot for this value.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0tokenpaymaster\u00a0contract,-it-is-recommended-to-declare-the\u00a0cost_of_post\u00a0variable-as\u00a0constant.-this-change-will-eliminate-the-use-of-a-storage-slot-for-this-value.", "labels": ["OpenZeppelin"]}, {"title": "For clarity, also consider assigning a named constant to the values\u00a016000\u00a0and\u00a035000\u00a0that appear within the\u00a0validatePaymasterUserOp\u00a0functions.", "body": "For clarity, also consider assigning a named constant to the values\u00a016000\u00a0and\u00a035000\u00a0that appear within the\u00a0validatePaymasterUserOp\u00a0functions.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#for-clarity,-also-consider-assigning-a-named-constant-to-the-values\u00a016000\u00a0and\u00a035000\u00a0that-appear-within-the\u00a0validatepaymasteruserop\u00a0functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#68. In the\u00a0TokenPaymaster\u00a0contract the\u00a0constant\u00a0keyword was added to the existing\u00a0COST_OF_POST\u00a0variable and the hard-coded value of 16000 was replaced with\u00a0COST_OF_POST. In the\u00a0DepositPaymaster\u00a0contract a new\u00a0COST_OF_POST\u00a0constant was added and assigned the hard-coded value of 35000. It is also included in the amount charged to the wallet.", "body": "Update: Fixed in pull request\u00a0#68. In the\u00a0TokenPaymaster\u00a0contract the\u00a0constant\u00a0keyword was added to the existing\u00a0COST_OF_POST\u00a0variable and the hard-coded value of 16000 was replaced with\u00a0COST_OF_POST. In the\u00a0DepositPaymaster\u00a0contract a new\u00a0COST_OF_POST\u00a0constant was added and assigned the hard-coded value of 35000. It is also included in the amount charged to the wallet.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#68.-in-the\u00a0tokenpaymaster\u00a0contract-the\u00a0constant\u00a0keyword-was-added-to-the-existing\u00a0cost_of_post\u00a0variable-and-the-hard-coded-value-of-16000-was-replaced-with\u00a0cost_of_post.-in-the\u00a0depositpaymaster\u00a0contract-a-new\u00a0cost_of_post\u00a0constant-was-added-and-assigned-the-hard-coded-value-of-35000.-it-is-also-included-in-the-amount-charged-to-the-wallet.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Failing tests", "body": "[N09] Failing tests", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n09]-failing-tests", "labels": ["OpenZeppelin"]}, {"title": "On a fresh checkout of the project repository and\u00a0npm install\u00a0of the dependencies, the entire test suite fails to run. This has been identified as the result of a mismatch between specific package versions used during development vs. the current versions of those packages.", "body": "On a fresh checkout of the project repository and\u00a0npm install\u00a0of the dependencies, the entire test suite fails to run. This has been identified as the result of a mismatch between specific package versions used during development vs. the current versions of those packages.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#on-a-fresh-checkout-of-the-project-repository-and\u00a0npm-install\u00a0of-the-dependencies,-the-entire-test-suite-fails-to-run.-this-has-been-identified-as-the-result-of-a-mismatch-between-specific-package-versions-used-during-development-vs.-the-current-versions-of-those-packages.", "labels": ["OpenZeppelin"]}, {"title": "On a stable production branch, it is recommended to lock the package versions within the\u00a0package.json\u00a0file to prevent package updates from breaking code that has been previously verified to work correctly.", "body": "On a stable production branch, it is recommended to lock the package versions within the\u00a0package.json\u00a0file to prevent package updates from breaking code that has been previously verified to work correctly.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#on-a-stable-production-branch,-it-is-recommended-to-lock-the-package-versions-within-the\u00a0package.json\u00a0file-to-prevent-package-updates-from-breaking-code-that-has-been-previously-verified-to-work-correctly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. Tests can be run successfully if the\u00a0yarn install\u00a0command is used instead of\u00a0npm install. Providing the exact instructions for building and testing the project in a README file would benefit other developers.", "body": "Update: Not an issue. Tests can be run successfully if the\u00a0yarn install\u00a0command is used instead of\u00a0npm install. Providing the exact instructions for building and testing the project in a README file would benefit other developers.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-not-an-issue.-tests-can-be-run-successfully-if-the\u00a0yarn-install\u00a0command-is-used-instead-of\u00a0npm-install.-providing-the-exact-instructions-for-building-and-testing-the-project-in-a-readme-file-would-benefit-other-developers.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Unindexed event addresses [sample]", "body": "[N10] Unindexed event addresses [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n10]-unindexed-event-addresses-[sample]", "labels": ["OpenZeppelin"]}, {"title": "To support log filtering for the\u00a0EntryPointChanged\u00a0event in the\u00a0SimpleWallet\u00a0contract, consider adding the\u00a0indexed\u00a0keyword to the address parameters in the event.", "body": "To support log filtering for the\u00a0EntryPointChanged\u00a0event in the\u00a0SimpleWallet\u00a0contract, consider adding the\u00a0indexed\u00a0keyword to the address parameters in the event.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#to-support-log-filtering-for-the\u00a0entrypointchanged\u00a0event-in-the\u00a0simplewallet\u00a0contract,-consider-adding-the\u00a0indexed\u00a0keyword-to-the-address-parameters-in-the-event.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#69.", "body": "Update: Fixed in pull request\u00a0#69.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#69.", "labels": ["OpenZeppelin"]}, {"title": "[N11] IWallet doesn\u2019t strongly enforce required functionality [sample]", "body": "[N11] IWallet doesn\u2019t strongly enforce required functionality [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n11]-iwallet-doesn\u2019t-strongly-enforce-required-functionality-[sample]", "labels": ["OpenZeppelin"]}, {"title": "IWallet\u00a0interface\u00a0specifies a single", "body": "IWallet\u00a0interface\u00a0specifies a single", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#iwallet\u00a0interface\u00a0specifies-a-single", "labels": ["OpenZeppelin"]}, {"title": "all the necessary logic\u00a0in its own", "body": "all the necessary logic\u00a0in its own", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#all-the-necessary-logic\u00a0in-its-own", "labels": ["OpenZeppelin"]}, {"title": "To help developers create secure wallet implementations that follow the\u00a0EIP specification, consider removing the\u00a0IWallet\u00a0interface and replacing it with an abstract \u201cBaseWallet\u201d contract that implements all of the mandated checks, but leaves the custom behavior such as\u00a0validateSignature\u00a0up to derived classes. The existing\u00a0SimpleWallet\u00a0contract would then be derived from BaseWallet.", "body": "To help developers create secure wallet implementations that follow the\u00a0EIP specification, consider removing the\u00a0IWallet\u00a0interface and replacing it with an abstract \u201cBaseWallet\u201d contract that implements all of the mandated checks, but leaves the custom behavior such as\u00a0validateSignature\u00a0up to derived classes. The existing\u00a0SimpleWallet\u00a0contract would then be derived from BaseWallet.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#to-help-developers-create-secure-wallet-implementations-that-follow-the\u00a0eip-specification,-consider-removing-the\u00a0iwallet\u00a0interface-and-replacing-it-with-an-abstract-\u201cbasewallet\u201d-contract-that-implements-all-of-the-mandated-checks,-but-leaves-the-custom-behavior-such-as\u00a0validatesignature\u00a0up-to-derived-classes.-the-existing\u00a0simplewallet\u00a0contract-would-then-be-derived-from-basewallet.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#82. A new\u00a0BaseWallet\u00a0contract has been added that requires wallet implementers to adhere to the\u00a0validateUserOp\u00a0function structure originally laid out in the\u00a0SimpleWallet\u00a0sample contract;\u00a0SimpleWallet\u00a0now inherits from\u00a0BaseWallet.", "body": "Update: Fixed in pull request\u00a0#82. A new\u00a0BaseWallet\u00a0contract has been added that requires wallet implementers to adhere to the\u00a0validateUserOp\u00a0function structure originally laid out in the\u00a0SimpleWallet\u00a0sample contract;\u00a0SimpleWallet\u00a0now inherits from\u00a0BaseWallet.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#82.-a-new\u00a0basewallet\u00a0contract-has-been-added-that-requires-wallet-implementers-to-adhere-to-the\u00a0validateuserop\u00a0function-structure-originally-laid-out-in-the\u00a0simplewallet\u00a0sample-contract;\u00a0simplewallet\u00a0now-inherits-from\u00a0basewallet.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Not all state variables have explicit visibility [sample]", "body": "[N12] Not all state variables have explicit visibility [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n12]-not-all-state-variables-have-explicit-visibility-[sample]", "labels": ["OpenZeppelin"]}, {"title": "Several contracts in the samples directory don\u2019t explicitly declare the visibility of the state variables and constants:", "body": "Several contracts in the samples directory don\u2019t explicitly declare the visibility of the state variables and constants:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#several-contracts-in-the-samples-directory-don\u2019t-explicitly-declare-the-visibility-of-the-state-variables-and-constants:", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0DepositPaymaster\u00a0contract: \u2013\u00a0nullOracle\u00a0\u2013\u00a0unlockBlock", "body": "In the\u00a0DepositPaymaster\u00a0contract: \u2013\u00a0nullOracle\u00a0\u2013\u00a0unlockBlock", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0depositpaymaster\u00a0contract:-\u2013\u00a0nulloracle\u00a0\u2013\u00a0unlockblock", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TokenPaymaster\u00a0contract: \u2013\u00a0knownWallet", "body": "In the\u00a0TokenPaymaster\u00a0contract: \u2013\u00a0knownWallet", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0tokenpaymaster\u00a0contract:-\u2013\u00a0knownwallet", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0SimpleWallet\u00a0contract: \u2013\u00a0ownerNonce", "body": "In the\u00a0SimpleWallet\u00a0contract: \u2013\u00a0ownerNonce", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0simplewallet\u00a0contract:-\u2013\u00a0ownernonce", "labels": ["OpenZeppelin"]}, {"title": "For clarity, consider always explicitly declaring the visibility of functions and variables, even when the default visibility type matches the intended type.", "body": "For clarity, consider always explicitly declaring the visibility of functions and variables, even when the default visibility type matches the intended type.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#for-clarity,-consider-always-explicitly-declaring-the-visibility-of-functions-and-variables,-even-when-the-default-visibility-type-matches-the-intended-type.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#70.", "body": "[N15] Inconsistent solidity version [core and sample]  The majority of the code base supports solidity versions ^0.8.7, but the StakeManager contract supports versions ^0.8 and the ECDSA contract supports versions ^0.8.0.  Consider using consistent solidity versions throughout the code base. Additionally, in the interest of predictability, consider locking the contracts to a specific supported version.  Update: Fixed in pull request #71 and commit 4efa5fc296f0034dbf402dcd558a07be45bdd761. All contracts were updated to use Solidity version ^0.8.12.  All of the contract versions remain unpinned.  [N16] Undocumented assembly [core and sample]  There are several contracts where inline assembly code is undocumented. Using inline assembly is risky because it bypasses some of the compilers safety checks, its harder to read and audit, and more likely to contain errors. For these reasons, the recommended best practice is for every line of assembly to have a corresponding explanatory comment.  Consider adding documentation to the following lines of code:  ECDSA.sol lines 188-202  UserOperation.sol line 25  UserOperation.sol lines 64-71  Update: Partially fixed in pull request #72. High-level comments were added to assembly blocks but individual lines remain uncommented.  [N17] Excessive code optimization [core]  getSender function takes a  inline assembly code. This is the only struct member that has its own custom getter function, and even though there are two addresses in the struct (  For safety and clarity, consider removal of the getSender function.  Update: Not fixed. A comment was added in pull request #72 that indicates this function saves 800 gas by using inline assembly.  [N18] Indirect import [sample]  The TokenPaymaster contract imports the obsolete SimpleWalletForTokens contract as an indirect mechanism to import the SimpleWallet contract. Consider replacing the indirect import with a direct one.  Update: Fixed in pull request #73.  [N19] Unused imports [sample]  To improve readability and avoid confusion, consider removing the following unused imports:  In the TokenPaymaster contract, the hardhat console library.  In the SimpleWallet contract, the hardhat console library.  In the TestCounter contract, the UserOperation contract and the IWallet interface.  In the TestOracle contract, the OpenZeppelin ERC20 contract.  In the TestUtil contract, the IWallet interface.  Update: Fixed in pull request #73 and commit 4efa5fc296f0034dbf402dcd558a07be45bdd761.  [N20] Redundant code [core and sample]  Consider making the following changes to eliminate redundant code:  In UserOperation.sol, the requiredGas function calculates mul by evaluating the expression userOp.paymaster != address(0), which is equivalent to hasPaymaster(userOp).  In UserOperation.sol, the pack function has an unnecessary return statement.  In DepositPaymaster.sol, the statement to silence an unused variable warning for mode can be removed. The mode variable is used to determine the payment method.  Update: Fixed in pull request #73.  [N21] Inconsistent clearing of memory [sample]  OpenZeppelins ECDSA library, which replaces the existing  ecrecover2 assembly implementation that does not use the GAS opcode. After  a few more instructions to zero out the first two words of the free memory space, overwriting the  associated comment it can be inferred that memory space is being zeroed out for the benefit of future callers that might assume the memory has been cleared. However, the current implementation is not clearing all of the modified memoryit only zeroes out the  Consider either clearing all of the memory used, or none of it. The Solidity documentation makes it clear that users should not expect the free memory to point to zeroed-out memory, so this final clearing operation is not necessary.  Update: Fixed in pull request #56. The memory clearing instructions were removed.  Following this pull request, the EIP was updated to allow the GAS opcode to be used when simulating validation, provided that it is followed by CALL, DELEGATECALL, CALLCODE, or STATICCALL. Additional statement from the Ethereum Foundation on this issue:  This is no longer an issue, since we removed completely the need for ecrecover2 (we allow the use of GAS opcode if immediately followed by *CALL).  [N22] Unclear use of mixed size values [core]  The StakeManager contract defines the DepositInfo struct with three values of size uint112, uint32 and uint64. While the intention to pack the contents into a single word can be inferred, the reason for the particular sizes are not obvious. Consider documenting the reason for this design pattern and the corresponding (reasonable) assumptions about the maximum sizes of each type.  Update: Fixed in pull request #76.  [N23] Unused parameter in validatePaymasterUserOp methods [sample]  validatePaymasterUserOp function in the  Consider providing a sample paymaster contract that demonstrates the use of the requestId parameter for validati", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#70.", "labels": ["OpenZeppelin"]}, {"title": "[N13] One oracle per token restriction [sample]", "body": "[N13] One oracle per token restriction [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n13]-one-oracle-per-token-restriction-[sample]", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0getTokenToEthOutputPrice\u00a0function\u00a0of the\u00a0IOracle\u00a0interface does not specify the particular token to translate. This means that each\u00a0IOracle\u00a0contract can only support one token, which seems like an unnecessary restriction. Consider including a\u00a0tokenAddress\u00a0parameter to the function specification.", "body": "The\u00a0getTokenToEthOutputPrice\u00a0function\u00a0of the\u00a0IOracle\u00a0interface does not specify the particular token to translate. This means that each\u00a0IOracle\u00a0contract can only support one token, which seems like an unnecessary restriction. Consider including a\u00a0tokenAddress\u00a0parameter to the function specification.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0gettokentoethoutputprice\u00a0function\u00a0of-the\u00a0ioracle\u00a0interface-does-not-specify-the-particular-token-to-translate.-this-means-that-each\u00a0ioracle\u00a0contract-can-only-support-one-token,-which-seems-like-an-unnecessary-restriction.-consider-including-a\u00a0tokenaddress\u00a0parameter-to-the-function-specification.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. An oracle is intended to be an\u00a0IUniswapExchange, which has a single instance per token.", "body": "Update: Not an issue. An oracle is intended to be an\u00a0IUniswapExchange, which has a single instance per token.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-not-an-issue.-an-oracle-is-intended-to-be-an\u00a0iuniswapexchange,-which-has-a-single-instance-per-token.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Unnecessary encapsulation [sample]", "body": "[N14] Unnecessary encapsulation [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n14]-unnecessary-encapsulation-[sample]", "labels": ["OpenZeppelin"]}, {"title": "OwnerNonce\u00a0struct. Since these variables would still pack into a single storage slot without the struct, encapsulating them together in", "body": "OwnerNonce\u00a0struct. Since these variables would still pack into a single storage slot without the struct, encapsulating them together in", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#ownernonce\u00a0struct.-since-these-variables-would-still-pack-into-a-single-storage-slot-without-the-struct,-encapsulating-them-together-in", "labels": ["OpenZeppelin"]}, {"title": "owner\u00a0and", "body": "owner\u00a0and", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#owner\u00a0and", "labels": ["OpenZeppelin"]}, {"title": "nonce\u00a0getter functions.", "body": "nonce\u00a0getter functions.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#nonce\u00a0getter-functions.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the\u00a0OwnerNonce\u00a0struct and having standalone\u00a0nonce\u00a0and\u00a0owner\u00a0state variables.", "body": "Consider removing the\u00a0OwnerNonce\u00a0struct and having standalone\u00a0nonce\u00a0and\u00a0owner\u00a0state variables.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-removing-the\u00a0ownernonce\u00a0struct-and-having-standalone\u00a0nonce\u00a0and\u00a0owner\u00a0state-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Inconsistent solidity version [core and sample]", "body": "[N15] Inconsistent solidity version [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n15]-inconsistent-solidity-version-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "The majority of the code base supports solidity versions\u00a0^0.8.7, but the\u00a0StakeManager\u00a0contract\u00a0supports versions\u00a0^0.8\u00a0and the\u00a0ECDSA\u00a0contract\u00a0supports versions\u00a0^0.8.0.", "body": "The majority of the code base supports solidity versions\u00a0^0.8.7, but the\u00a0StakeManager\u00a0contract\u00a0supports versions\u00a0^0.8\u00a0and the\u00a0ECDSA\u00a0contract\u00a0supports versions\u00a0^0.8.0.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the-majority-of-the-code-base-supports-solidity-versions\u00a0^0.8.7,-but-the\u00a0stakemanager\u00a0contract\u00a0supports-versions\u00a0^0.8\u00a0and-the\u00a0ecdsa\u00a0contract\u00a0supports-versions\u00a0^0.8.0.", "labels": ["OpenZeppelin"]}, {"title": "Consider using consistent solidity versions throughout the code base. Additionally, in the interest of predictability, consider locking the contracts to a specific supported version.", "body": "Consider using consistent solidity versions throughout the code base. Additionally, in the interest of predictability, consider locking the contracts to a specific supported version.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-using-consistent-solidity-versions-throughout-the-code-base.-additionally,-in-the-interest-of-predictability,-consider-locking-the-contracts-to-a-specific-supported-version.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#71\u00a0and commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761. All contracts were updated to use Solidity version\u00a0^0.8.12.", "body": "Update: Fixed in pull request\u00a0#71\u00a0and commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761. All contracts were updated to use Solidity version\u00a0^0.8.12.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#71\u00a0and-commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761.-all-contracts-were-updated-to-use-solidity-version\u00a0^0.8.12.", "labels": ["OpenZeppelin"]}, {"title": "All of the contract versions remain unpinned.", "body": "All of the contract versions remain unpinned.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#all-of-the-contract-versions-remain-unpinned.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Undocumented assembly [core and sample]", "body": "[N16] Undocumented assembly [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n16]-undocumented-assembly-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "There are several contracts where inline assembly code is undocumented. Using inline assembly is risky because it bypasses some of the compiler\u2019s safety checks, it\u2019s harder to read and audit, and more likely to contain errors. For these reasons, the recommended best practice is for every line of assembly to have a corresponding explanatory comment.", "body": "There are several contracts where inline assembly code is undocumented. Using inline assembly is risky because it bypasses some of the compiler\u2019s safety checks, it\u2019s harder to read and audit, and more likely to contain errors. For these reasons, the recommended best practice is for every line of assembly to have a corresponding explanatory comment.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#there-are-several-contracts-where-inline-assembly-code-is-undocumented.-using-inline-assembly-is-risky-because-it-bypasses-some-of-the-compiler\u2019s-safety-checks,-it\u2019s-harder-to-read-and-audit,-and-more-likely-to-contain-errors.-for-these-reasons,-the-recommended-best-practice-is-for-every-line-of-assembly-to-have-a-corresponding-explanatory-comment.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding documentation to the following lines of code:", "body": "Consider adding documentation to the following lines of code:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-adding-documentation-to-the-following-lines-of-code:", "labels": ["OpenZeppelin"]}, {"title": "ECDSA.sol lines 188-202", "body": "ECDSA.sol lines 188-202", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#ecdsa.sol-lines-188-202", "labels": ["OpenZeppelin"]}, {"title": "UserOperation.sol line 25", "body": "UserOperation.sol line 25", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#useroperation.sol-line-25", "labels": ["OpenZeppelin"]}, {"title": "UserOperation.sol lines 64-71", "body": "UserOperation.sol lines 64-71", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#useroperation.sol-lines-64-71", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request\u00a0#72. High-level comments were added to assembly blocks but individual lines remain uncommented.", "body": "Update: Partially fixed in pull request\u00a0#72. High-level comments were added to assembly blocks but individual lines remain uncommented.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-partially-fixed-in-pull-request\u00a0#72.-high-level-comments-were-added-to-assembly-blocks-but-individual-lines-remain-uncommented.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Excessive code optimization [core]", "body": "[N17] Excessive code optimization [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n17]-excessive-code-optimization-[core]", "labels": ["OpenZeppelin"]}, {"title": "getSender\u00a0function takes a", "body": "getSender\u00a0function takes a", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#getsender\u00a0function-takes-a", "labels": ["OpenZeppelin"]}, {"title": "inline assembly code. This is the only struct member that has its own custom getter function, and even though there are two addresses in the struct (", "body": "inline assembly code. This is the only struct member that has its own custom getter function, and even though there are two addresses in the struct (", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#inline-assembly-code.-this-is-the-only-struct-member-that-has-its-own-custom-getter-function,-and-even-though-there-are-two-addresses-in-the-struct-(", "labels": ["OpenZeppelin"]}, {"title": "For safety and clarity, consider removal of the\u00a0getSender\u00a0function.", "body": "For safety and clarity, consider removal of the\u00a0getSender\u00a0function.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#for-safety-and-clarity,-consider-removal-of-the\u00a0getsender\u00a0function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. A comment was added in pull request\u00a0#72\u00a0that indicates this function saves 800 gas by using inline assembly.", "body": "Update: Not fixed. A comment was added in pull request\u00a0#72\u00a0that indicates this function saves 800 gas by using inline assembly.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-not-fixed.-a-comment-was-added-in-pull-request\u00a0#72\u00a0that-indicates-this-function-saves-800-gas-by-using-inline-assembly.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Indirect import [sample]", "body": "[N18] Indirect import [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n18]-indirect-import-[sample]", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0TokenPaymaster\u00a0contract\u00a0imports\u00a0the obsolete\u00a0SimpleWalletForTokens\u00a0contract as an indirect mechanism to\u00a0import the\u00a0SimpleWallet\u00a0contract. Consider replacing the indirect import with a direct one.", "body": "The\u00a0TokenPaymaster\u00a0contract\u00a0imports\u00a0the obsolete\u00a0SimpleWalletForTokens\u00a0contract as an indirect mechanism to\u00a0import the\u00a0SimpleWallet\u00a0contract. Consider replacing the indirect import with a direct one.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0tokenpaymaster\u00a0contract\u00a0imports\u00a0the-obsolete\u00a0simplewalletfortokens\u00a0contract-as-an-indirect-mechanism-to\u00a0import-the\u00a0simplewallet\u00a0contract.-consider-replacing-the-indirect-import-with-a-direct-one.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#73.", "body": "[N21] Inconsistent clearing of memory [sample]  OpenZeppelins ECDSA library, which replaces the existing  ecrecover2 assembly implementation that does not use the GAS opcode. After  a few more instructions to zero out the first two words of the free memory space, overwriting the  associated comment it can be inferred that memory space is being zeroed out for the benefit of future callers that might assume the memory has been cleared. However, the current implementation is not clearing all of the modified memoryit only zeroes out the  Consider either clearing all of the memory used, or none of it. The Solidity documentation makes it clear that users should not expect the free memory to point to zeroed-out memory, so this final clearing operation is not necessary.  Update: Fixed in pull request #56. The memory clearing instructions were removed.  Following this pull request, the EIP was updated to allow the GAS opcode to be used when simulating validation, provided that it is followed by CALL, DELEGATECALL, CALLCODE, or STATICCALL. Additional statement from the Ethereum Foundation on this issue:  This is no longer an issue, since we removed completely the need for ecrecover2 (we allow the use of GAS opcode if immediately followed by *CALL).  [N22] Unclear use of mixed size values [core]  The StakeManager contract defines the DepositInfo struct with three values of size uint112, uint32 and uint64. While the intention to pack the contents into a single word can be inferred, the reason for the particular sizes are not obvious. Consider documenting the reason for this design pattern and the corresponding (reasonable) assumptions about the maximum sizes of each type.  Update: Fixed in pull request #76.  [N23] Unused parameter in validatePaymasterUserOp methods [sample]  validatePaymasterUserOp function in the  Consider providing a sample paymaster contract that demonstrates the use of the requestId parameter for validation.  Update: Acknowledged.  [N24] Naming suggestions [core and sample]  We believe some functions are variables could benefit from renaming. These are our suggestions:  The IOracle, DepositPaymaster and TokenPaymaster contracts all have a getTokenToEthOutputPrice function, but in all cases, its not a price (because it accounts for the amount bought) and it appears to be described backwards. Something like getTokenValueOfEth would be clearer.  The last parameter of validateUserOp in the IWallet interface should be missingWalletFunds or additionalFundsRequired to match how its used in the EntryPoint contract.  The gasUsedByValidateUserOp variable should be gasUsedByValidateWalletPrepayment  The PaymentMode options should be paymasterDeposit and walletDeposit, because neither uses the stake for gas payments.  The sender parameter in the _call function of the SimpleWallet contract should be target.  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas.  In BasePaymaster, the setEntrypoint and _requireFromEntrypoint functions should capitalize the p for consistency with the rest of the code base.  Update: Partially fixed in pull request #80 and commit 074672b6ccfb596fe7ff44e13783881a2e1cfed2. The following naming suggestions were not implemented:  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas. Ethereum Foundation comment on this issue:  Note that maxPriorityFeePerGas was left unchanged, since it defines the maximum, not actual fee paid by the user.  [N25] Typographical errors [core and sample]  Consider addressing the following typographical errors:  In EntryPoint.sol:  line 29 and line 30: simulateOp should be simulateValidation line 178: of should be if line 297: done, by should be done and  In IWallet.sol:  line 10: successfuly. should be successfully.  In StakeManager.sol:  line 12: blocks to should be seconds to wait line 83: time should be duration  In DepositPaymaster.sol:  line 68: on in the same block as withdrawTo() should be in the same block as withdrawTokensTo()  In SimpleWallet.sol:  line 88: (its should be (its  In TokenPaymaster.sol:  line 11: os should be or line 18: method-ids. should be method ids. line 77: paymaster should be entrypoint  In VerifyingPaymaster.sol:  line 57: signing should be to signing  In eip-4337.md:  line 46: for to compensate the bundler for should be to compensate the bundler line 84: worlflow should be workflow line 89: simulateWalletValidation should be simulateValidation line 127: paymaster should be paymaster) line 151: op should be op validation line 165: valiation should be validation and the line should end in a period.  Update: Fixed in pull request #79 and pull request #88.  [N26] Abstract StakeManager contract [core]  The StakeManager contract is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as abstract.  Update: Fixed in pull request #76.  [N27] Declare ", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#73.", "labels": ["OpenZeppelin"]}, {"title": "[N19] Unused imports [sample]", "body": "[N19] Unused imports [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n19]-unused-imports-[sample]", "labels": ["OpenZeppelin"]}, {"title": "To improve readability and avoid confusion, consider removing the following unused imports:", "body": "To improve readability and avoid confusion, consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#to-improve-readability-and-avoid-confusion,-consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TokenPaymaster\u00a0contract, the\u00a0hardhat console\u00a0library.", "body": "In the\u00a0TokenPaymaster\u00a0contract, the\u00a0hardhat console\u00a0library.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0tokenpaymaster\u00a0contract,-the\u00a0hardhat-console\u00a0library.", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0SimpleWallet\u00a0contract, the\u00a0hardhat console\u00a0library.", "body": "In the\u00a0SimpleWallet\u00a0contract, the\u00a0hardhat console\u00a0library.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0simplewallet\u00a0contract,-the\u00a0hardhat-console\u00a0library.", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TestCounter\u00a0contract, the\u00a0UserOperation\u00a0contract and the\u00a0IWallet\u00a0interface.", "body": "In the\u00a0TestCounter\u00a0contract, the\u00a0UserOperation\u00a0contract and the\u00a0IWallet\u00a0interface.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0testcounter\u00a0contract,-the\u00a0useroperation\u00a0contract-and-the\u00a0iwallet\u00a0interface.", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TestOracle\u00a0contract, the\u00a0OpenZeppelin ERC20\u00a0contract.", "body": "In the\u00a0TestOracle\u00a0contract, the\u00a0OpenZeppelin ERC20\u00a0contract.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0testoracle\u00a0contract,-the\u00a0openzeppelin-erc20\u00a0contract.", "labels": ["OpenZeppelin"]}, {"title": "In the\u00a0TestUtil\u00a0contract, the\u00a0IWallet\u00a0interface.", "body": "In the\u00a0TestUtil\u00a0contract, the\u00a0IWallet\u00a0interface.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in-the\u00a0testutil\u00a0contract,-the\u00a0iwallet\u00a0interface.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#73\u00a0and commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761.", "body": "Update: Fixed in pull request\u00a0#73\u00a0and commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#73\u00a0and-commit\u00a04efa5fc296f0034dbf402dcd558a07be45bdd761.", "labels": ["OpenZeppelin"]}, {"title": "[N20] Redundant code [core and sample]", "body": "[N20] Redundant code [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n20]-redundant-code-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "Consider making the following changes to eliminate redundant code:", "body": "Consider making the following changes to eliminate redundant code:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-making-the-following-changes-to-eliminate-redundant-code:", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0UserOperation.sol, the\u00a0requiredGas\u00a0function\u00a0calculates\u00a0mul\u00a0by evaluating the expression\u00a0userOp.paymaster != address(0), which is equivalent to\u00a0hasPaymaster(userOp).", "body": "In\u00a0UserOperation.sol, the\u00a0requiredGas\u00a0function\u00a0calculates\u00a0mul\u00a0by evaluating the expression\u00a0userOp.paymaster != address(0), which is equivalent to\u00a0hasPaymaster(userOp).", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0useroperation.sol,-the\u00a0requiredgas\u00a0function\u00a0calculates\u00a0mul\u00a0by-evaluating-the-expression\u00a0userop.paymaster-!=-address(0),-which-is-equivalent-to\u00a0haspaymaster(userop).", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0UserOperation.sol, the\u00a0pack\u00a0function has an\u00a0unnecessary return statement.", "body": "In\u00a0UserOperation.sol, the\u00a0pack\u00a0function has an\u00a0unnecessary return statement.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0useroperation.sol,-the\u00a0pack\u00a0function-has-an\u00a0unnecessary-return-statement.", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0DepositPaymaster.sol, the\u00a0statement\u00a0to silence an unused variable warning for\u00a0mode\u00a0can be removed. The\u00a0mode\u00a0variable is\u00a0used to determine the payment method.", "body": "In\u00a0DepositPaymaster.sol, the\u00a0statement\u00a0to silence an unused variable warning for\u00a0mode\u00a0can be removed. The\u00a0mode\u00a0variable is\u00a0used to determine the payment method.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0depositpaymaster.sol,-the\u00a0statement\u00a0to-silence-an-unused-variable-warning-for\u00a0mode\u00a0can-be-removed.-the\u00a0mode\u00a0variable-is\u00a0used-to-determine-the-payment-method.", "labels": ["OpenZeppelin"]}, {"title": "[N21] Inconsistent clearing of memory [sample]", "body": "[N21] Inconsistent clearing of memory [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n21]-inconsistent-clearing-of-memory-[sample]", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s\u00a0ECDSA\u00a0library, which replaces the existing", "body": "OpenZeppelin\u2019s\u00a0ECDSA\u00a0library, which replaces the existing", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#openzeppelin\u2019s\u00a0ecdsa\u00a0library,-which-replaces-the-existing", "labels": ["OpenZeppelin"]}, {"title": "ecrecover2\u00a0assembly implementation that does not use the GAS opcode. After", "body": "ecrecover2\u00a0assembly implementation that does not use the GAS opcode. After", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#ecrecover2\u00a0assembly-implementation-that-does-not-use-the-gas-opcode.-after", "labels": ["OpenZeppelin"]}, {"title": "a few more instructions\u00a0to zero out the first two words of the free memory space, overwriting the", "body": "a few more instructions\u00a0to zero out the first two words of the free memory space, overwriting the", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#a-few-more-instructions\u00a0to-zero-out-the-first-two-words-of-the-free-memory-space,-overwriting-the", "labels": ["OpenZeppelin"]}, {"title": "associated comment\u00a0it can be inferred that memory space is being zeroed out for the benefit of future callers that might assume the memory has been cleared. However, the current implementation is not clearing all of the modified memory\u2013it only zeroes out the", "body": "associated comment\u00a0it can be inferred that memory space is being zeroed out for the benefit of future callers that might assume the memory has been cleared. However, the current implementation is not clearing all of the modified memory\u2013it only zeroes out the", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#associated-comment\u00a0it-can-be-inferred-that-memory-space-is-being-zeroed-out-for-the-benefit-of-future-callers-that-might-assume-the-memory-has-been-cleared.-however,-the-current-implementation-is-not-clearing-all-of-the-modified-memory\u2013it-only-zeroes-out-the", "labels": ["OpenZeppelin"]}, {"title": "Consider either clearing all of the memory used, or none of it. The\u00a0Solidity documentation\u00a0makes it clear that users should not expect the free memory to point to zeroed-out memory, so this final clearing operation is not necessary.", "body": "Consider either clearing all of the memory used, or none of it. The\u00a0Solidity documentation\u00a0makes it clear that users should not expect the free memory to point to zeroed-out memory, so this final clearing operation is not necessary.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-either-clearing-all-of-the-memory-used,-or-none-of-it.-the\u00a0solidity-documentation\u00a0makes-it-clear-that-users-should-not-expect-the-free-memory-to-point-to-zeroed-out-memory,-so-this-final-clearing-operation-is-not-necessary.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#56. The memory clearing instructions were removed.", "body": "Update: Fixed in pull request\u00a0#56. The memory clearing instructions were removed.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#56.-the-memory-clearing-instructions-were-removed.", "labels": ["OpenZeppelin"]}, {"title": "Following this pull request, the\u00a0EIP\u00a0was updated to allow the\u00a0GAS\u00a0opcode to be used when simulating validation, provided that it is followed by\u00a0CALL,\u00a0DELEGATECALL,\u00a0CALLCODE, or\u00a0STATICCALL. Additional statement from the Ethereum Foundation on this issue:", "body": "Following this pull request, the\u00a0EIP\u00a0was updated to allow the\u00a0GAS\u00a0opcode to be used when simulating validation, provided that it is followed by\u00a0CALL,\u00a0DELEGATECALL,\u00a0CALLCODE, or\u00a0STATICCALL. Additional statement from the Ethereum Foundation on this issue:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#following-this-pull-request,-the\u00a0eip\u00a0was-updated-to-allow-the\u00a0gas\u00a0opcode-to-be-used-when-simulating-validation,-provided-that-it-is-followed-by\u00a0call,\u00a0delegatecall,\u00a0callcode,-or\u00a0staticcall.-additional-statement-from-the-ethereum-foundation-on-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "This is no longer an issue, since we removed completely the need for \u201cecrecover2\u201d (we allow the use of GAS opcode if immediately followed by \u201c*CALL\u201d).", "body": "[N22] Unclear use of mixed size values [core]  The StakeManager contract defines the DepositInfo struct with three values of size uint112, uint32 and uint64. While the intention to pack the contents into a single word can be inferred, the reason for the particular sizes are not obvious. Consider documenting the reason for this design pattern and the corresponding (reasonable) assumptions about the maximum sizes of each type.  Update: Fixed in pull request #76.  [N23] Unused parameter in validatePaymasterUserOp methods [sample]  validatePaymasterUserOp function in the  Consider providing a sample paymaster contract that demonstrates the use of the requestId parameter for validation.  Update: Acknowledged.  [N24] Naming suggestions [core and sample]  We believe some functions are variables could benefit from renaming. These are our suggestions:  The IOracle, DepositPaymaster and TokenPaymaster contracts all have a getTokenToEthOutputPrice function, but in all cases, its not a price (because it accounts for the amount bought) and it appears to be described backwards. Something like getTokenValueOfEth would be clearer.  The last parameter of validateUserOp in the IWallet interface should be missingWalletFunds or additionalFundsRequired to match how its used in the EntryPoint contract.  The gasUsedByValidateUserOp variable should be gasUsedByValidateWalletPrepayment  The PaymentMode options should be paymasterDeposit and walletDeposit, because neither uses the stake for gas payments.  The sender parameter in the _call function of the SimpleWallet contract should be target.  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas.  In BasePaymaster, the setEntrypoint and _requireFromEntrypoint functions should capitalize the p for consistency with the rest of the code base.  Update: Partially fixed in pull request #80 and commit 074672b6ccfb596fe7ff44e13783881a2e1cfed2. The following naming suggestions were not implemented:  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas. Ethereum Foundation comment on this issue:  Note that maxPriorityFeePerGas was left unchanged, since it defines the maximum, not actual fee paid by the user.  [N25] Typographical errors [core and sample]  Consider addressing the following typographical errors:  In EntryPoint.sol:  line 29 and line 30: simulateOp should be simulateValidation line 178: of should be if line 297: done, by should be done and  In IWallet.sol:  line 10: successfuly. should be successfully.  In StakeManager.sol:  line 12: blocks to should be seconds to wait line 83: time should be duration  In DepositPaymaster.sol:  line 68: on in the same block as withdrawTo() should be in the same block as withdrawTokensTo()  In SimpleWallet.sol:  line 88: (its should be (its  In TokenPaymaster.sol:  line 11: os should be or line 18: method-ids. should be method ids. line 77: paymaster should be entrypoint  In VerifyingPaymaster.sol:  line 57: signing should be to signing  In eip-4337.md:  line 46: for to compensate the bundler for should be to compensate the bundler line 84: worlflow should be workflow line 89: simulateWalletValidation should be simulateValidation line 127: paymaster should be paymaster) line 151: op should be op validation line 165: valiation should be validation and the line should end in a period.  Update: Fixed in pull request #79 and pull request #88.  [N26] Abstract StakeManager contract [core]  The StakeManager contract is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as abstract.  Update: Fixed in pull request #76.  [N27] Declare uint as uint256 [core and sample]  To favor explicitness, consider declaring all instance of uint as uint256.  Update: Fixed in pull request #77.  Conclusions  1 critical and 4 high severity issues were found in the code base in addition to the high severity issue that the Ethereum Foundation noted. Some changes were proposed to follow best practices and reduce the potential attack surface.  Appendix: Architectural Analysis  Overview  Many security features and mitigations to protect nodes and bundlers are executed partially or entirely off-chain; they also involve complex interactions between multiple parties with competing interests. Based on the EIP and our discussions with the Ethereum Foundation, we have captured our understanding of these features to correct any misunderstandings and identify any shortcomings. For clarity, we are referencing the latest design, which includes modifications that were made during or after the audit. This document attempts to describe high level concepts, and then systematically interrogate the details.  Basic Structure  Actors  Wallets  Smart contract wallets are primary accounts. Users construct arbitrary operations and publish them to a new mempool and each operation is associated with a specific smart", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#this-is-no-longer-an-issue,-since-we-removed-completely-the-need-for-\u201cecrecover2\u201d-(we-allow-the-use-of-gas-opcode-if-immediately-followed-by-\u201c*call\u201d).", "labels": ["OpenZeppelin"]}, {"title": "[N22] Unclear use of mixed size values [core]", "body": "[N22] Unclear use of mixed size values [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n22]-unclear-use-of-mixed-size-values-[core]", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0StakeManager\u00a0contract defines the\u00a0DepositInfo\u00a0struct\u00a0with three values of size\u00a0uint112,\u00a0uint32\u00a0and\u00a0uint64. While the intention to pack the contents into a single word can be inferred, the reason for the particular sizes are not obvious. Consider documenting the reason for this design pattern and the corresponding (reasonable) assumptions about the maximum sizes of each type.", "body": "The\u00a0StakeManager\u00a0contract defines the\u00a0DepositInfo\u00a0struct\u00a0with three values of size\u00a0uint112,\u00a0uint32\u00a0and\u00a0uint64. While the intention to pack the contents into a single word can be inferred, the reason for the particular sizes are not obvious. Consider documenting the reason for this design pattern and the corresponding (reasonable) assumptions about the maximum sizes of each type.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0stakemanager\u00a0contract-defines-the\u00a0depositinfo\u00a0struct\u00a0with-three-values-of-size\u00a0uint112,\u00a0uint32\u00a0and\u00a0uint64.-while-the-intention-to-pack-the-contents-into-a-single-word-can-be-inferred,-the-reason-for-the-particular-sizes-are-not-obvious.-consider-documenting-the-reason-for-this-design-pattern-and-the-corresponding-(reasonable)-assumptions-about-the-maximum-sizes-of-each-type.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#76.", "body": "Staking state is no longer affected by the withdrawTo function. Users can now unlock an existing stake using unlockStake without needing to withdraw the funds, and they can then immediately restake by calling the addStakeTo function.  [L09] Wallet may not be deployed [core]  attempt to deploy the wallet if the operation specifies an  the validateUserOp call will unexpectedly revert  In practice, this should be identified by the bundler when constructing the batch. Nevertheless, in the interest of predictability, consider ensuring _createSenderIfNeeded always ends with a wallet deployed at the expected address.  Update: Acknowledged. The Ethereum Foundation decided not to address this because the bundler should identify this during simulation.  [L10] Unchecked math blocks are not narrow in scope [core]  EntryPoint contract, there are several functions (  For safety and clarity, consider restricting the scope of unchecked math blocks to only include the specific lines where it is needed.  Update: Not fixed. According to the Ethereum Foundation  for code clarity, it was added to wrap entire methods, as it makes the code far less readable if we try to wrap only the math expressions.  [L11] Missing docstrings [core and sample]  Many functions in the code base lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Partially fixed in pull request #81. New docstrings were added and existing ones were expanded; most functions now have a docstring. However not all input and output parameters are explicitly documented. For example, several functions in the StakeManager contract do not have NatSpec comments.  [L12] Downcasting without bounds checks [core]  The StakeManager contract downcasts the amount when incrementing or decrementing deposits, and when increasing an accounts stake. Although these values are unlikely to overflow, as a matter of good practice, consider adding bounds checks.  Update: Partially fixed in pull request #62. Bounds checks were added to the internalIncrementDeposit and internalDecrementDeposit functions, but the addStake function still downcasts msg.value to a uint112 type without first checking if its size exceeds type(uint112).max.  [L13] Missing validations [core]  The compensate function in EntryPoint takes a beneficiary address as input and sends the amount specified to that address. This happens as the final step of a handleOps or handleOp function call. The code does not check that beneficiary is not 0, which could lead to accidental loss of funds. Consider adding a check to verify that beneficiary is a non-zero value.  In the EntryPoint constructor, there are no checks to ensure the immutable contract variables are set to non-zero values. If _create2factory, _paymasterStake, or _unstakeDelaySec were accidentally set to 0, the contract would need to be redeployed because there is no mechanism to update these values. Consider adding a non-zero check for each of the constructor parameters.  Update: Fixed in pull requests #59 and #63. Checks that reject zero values have been added for beneficiary, _create2factory, _paymasterStake, and unstakeDelaySec.  [L14] DepositPaymaster warning [sample]  The DepositPaymaster contract is non-compliant with the current version of the EIP, because it accesses an external oracle during validation. Consider including a warning at the top of the contract to explain the associated risks and how bundlers should decide whether to support this paymaster.  Update: Fixed in pull request #64.  [L15] Wallet storage in EntryPoint [core]  Client reported: The Ethereum Foundation identified this issue after the audit.  Bundlers ensure that wallets can only access their own mutable storage. However, they need to include an exception for the wallets balance in the EntryPoint contract to allow the wallet to prepay for its operation. The EntryPoint contract should expose a mechanism for bundlers to query the necessary storage locations.  This is addressed in pull request #87 of the public repository.  Notes & Additional Information  [N01] Suggested EIP changes  Client reported: The Ethereum Foundation made or inspired many of these suggestions during the audit. We include them here for reference.  Here are some suggestions to improve the precision and clarity of the EIP and associated document", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#76.", "labels": ["OpenZeppelin"]}, {"title": "[N23] Unused parameter in validatePaymasterUserOp methods [sample]", "body": "[N23] Unused parameter in validatePaymasterUserOp methods [sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n23]-unused-parameter-in-validatepaymasteruserop-methods-[sample]", "labels": ["OpenZeppelin"]}, {"title": "validatePaymasterUserOp\u00a0function in the", "body": "validatePaymasterUserOp\u00a0function in the", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#validatepaymasteruserop\u00a0function-in-the", "labels": ["OpenZeppelin"]}, {"title": "Consider providing a sample paymaster contract that demonstrates the use of the\u00a0requestId\u00a0parameter for validation.", "body": "Consider providing a sample paymaster contract that demonstrates the use of the\u00a0requestId\u00a0parameter for validation.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-providing-a-sample-paymaster-contract-that-demonstrates-the-use-of-the\u00a0requestid\u00a0parameter-for-validation.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged.", "body": "[N24] Naming suggestions [core and sample]  We believe some functions are variables could benefit from renaming. These are our suggestions:  The IOracle, DepositPaymaster and TokenPaymaster contracts all have a getTokenToEthOutputPrice function, but in all cases, its not a price (because it accounts for the amount bought) and it appears to be described backwards. Something like getTokenValueOfEth would be clearer.  The last parameter of validateUserOp in the IWallet interface should be missingWalletFunds or additionalFundsRequired to match how its used in the EntryPoint contract.  The gasUsedByValidateUserOp variable should be gasUsedByValidateWalletPrepayment  The PaymentMode options should be paymasterDeposit and walletDeposit, because neither uses the stake for gas payments.  The sender parameter in the _call function of the SimpleWallet contract should be target.  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas.  In BasePaymaster, the setEntrypoint and _requireFromEntrypoint functions should capitalize the p for consistency with the rest of the code base.  Update: Partially fixed in pull request #80 and commit 074672b6ccfb596fe7ff44e13783881a2e1cfed2. The following naming suggestions were not implemented:  The maxPriorityFeePerGas component of the UserOperation struct should be priorityFeePerGas. Ethereum Foundation comment on this issue:  Note that maxPriorityFeePerGas was left unchanged, since it defines the maximum, not actual fee paid by the user.  [N25] Typographical errors [core and sample]  Consider addressing the following typographical errors:  In EntryPoint.sol:  line 29 and line 30: simulateOp should be simulateValidation line 178: of should be if line 297: done, by should be done and  In IWallet.sol:  line 10: successfuly. should be successfully.  In StakeManager.sol:  line 12: blocks to should be seconds to wait line 83: time should be duration  In DepositPaymaster.sol:  line 68: on in the same block as withdrawTo() should be in the same block as withdrawTokensTo()  In SimpleWallet.sol:  line 88: (its should be (its  In TokenPaymaster.sol:  line 11: os should be or line 18: method-ids. should be method ids. line 77: paymaster should be entrypoint  In VerifyingPaymaster.sol:  line 57: signing should be to signing  In eip-4337.md:  line 46: for to compensate the bundler for should be to compensate the bundler line 84: worlflow should be workflow line 89: simulateWalletValidation should be simulateValidation line 127: paymaster should be paymaster) line 151: op should be op validation line 165: valiation should be validation and the line should end in a period.  Update: Fixed in pull request #79 and pull request #88.  [N26] Abstract StakeManager contract [core]  The StakeManager contract is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as abstract.  Update: Fixed in pull request #76.  [N27] Declare uint as uint256 [core and sample]  To favor explicitness, consider declaring all instance of uint as uint256.  Update: Fixed in pull request #77.  Conclusions  1 critical and 4 high severity issues were found in the code base in addition to the high severity issue that the Ethereum Foundation noted. Some changes were proposed to follow best practices and reduce the potential attack surface.  Appendix: Architectural Analysis  Overview  Many security features and mitigations to protect nodes and bundlers are executed partially or entirely off-chain; they also involve complex interactions between multiple parties with competing interests. Based on the EIP and our discussions with the Ethereum Foundation, we have captured our understanding of these features to correct any misunderstandings and identify any shortcomings. For clarity, we are referencing the latest design, which includes modifications that were made during or after the audit. This document attempts to describe high level concepts, and then systematically interrogate the details.  Basic Structure  Actors  Wallets  Smart contract wallets are primary accounts. Users construct arbitrary operations and publish them to a new mempool and each operation is associated with a specific smart contract wallet. In practice, each operation is an arbitrary call to the wallet. This allows the wallet to perform an action from its own context. A wallet can be deployed as part of its first operation.  Paymasters  Operations can specify optional paymasters. These are contracts that agree to pay the gas fees associated with the operation. Typically, they would be reimbursed somehow (perhaps with an ERC20 token), but the system does not specify or enforce any particular incentive. They must stake some funds beforehand as an anti-sybil mechanism. They must also prepay for the operations that they will fund.  Bundlers  Bundlers watch the new mempool and aggregate multiple operations into a bundle (i.e. an ", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-acknowledged.", "labels": ["OpenZeppelin"]}, {"title": "[N24] Naming suggestions [core and sample]", "body": "[N24] Naming suggestions [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n24]-naming-suggestions-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "We believe some functions are variables could benefit from renaming. These are our suggestions:", "body": "We believe some functions are variables could benefit from renaming. These are our suggestions:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#we-believe-some-functions-are-variables-could-benefit-from-renaming.-these-are-our-suggestions:", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0IOracle,\u00a0DepositPaymaster\u00a0and\u00a0TokenPaymaster\u00a0contracts all have a\u00a0getTokenToEthOutputPrice\u00a0function, but in all cases, it\u2019s not a price (because it accounts for the amount bought) and it appears to be described backwards. Something like\u00a0getTokenValueOfEth\u00a0would be clearer.", "body": "The\u00a0IOracle,\u00a0DepositPaymaster\u00a0and\u00a0TokenPaymaster\u00a0contracts all have a\u00a0getTokenToEthOutputPrice\u00a0function, but in all cases, it\u2019s not a price (because it accounts for the amount bought) and it appears to be described backwards. Something like\u00a0getTokenValueOfEth\u00a0would be clearer.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0ioracle,\u00a0depositpaymaster\u00a0and\u00a0tokenpaymaster\u00a0contracts-all-have-a\u00a0gettokentoethoutputprice\u00a0function,-but-in-all-cases,-it\u2019s-not-a-price-(because-it-accounts-for-the-amount-bought)-and-it-appears-to-be-described-backwards.-something-like\u00a0gettokenvalueofeth\u00a0would-be-clearer.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0last parameter of\u00a0validateUserOp\u00a0in the\u00a0IWallet\u00a0interface should be\u00a0missingWalletFunds\u00a0or\u00a0additionalFundsRequired\u00a0to match how it\u2019s used in the\u00a0EntryPoint\u00a0contract.", "body": "The\u00a0last parameter of\u00a0validateUserOp\u00a0in the\u00a0IWallet\u00a0interface should be\u00a0missingWalletFunds\u00a0or\u00a0additionalFundsRequired\u00a0to match how it\u2019s used in the\u00a0EntryPoint\u00a0contract.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0last-parameter-of\u00a0validateuserop\u00a0in-the\u00a0iwallet\u00a0interface-should-be\u00a0missingwalletfunds\u00a0or\u00a0additionalfundsrequired\u00a0to-match-how-it\u2019s-used-in-the\u00a0entrypoint\u00a0contract.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0gasUsedByValidateUserOp\u00a0variable\u00a0should be\u00a0gasUsedByValidateWalletPrepayment", "body": "The\u00a0gasUsedByValidateUserOp\u00a0variable\u00a0should be\u00a0gasUsedByValidateWalletPrepayment", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0gasusedbyvalidateuserop\u00a0variable\u00a0should-be\u00a0gasusedbyvalidatewalletprepayment", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0PaymentMode\u00a0options\u00a0should be\u00a0paymasterDeposit\u00a0and\u00a0walletDeposit, because neither uses the \u201cstake\u201d for gas payments.", "body": "The\u00a0PaymentMode\u00a0options\u00a0should be\u00a0paymasterDeposit\u00a0and\u00a0walletDeposit, because neither uses the \u201cstake\u201d for gas payments.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0paymentmode\u00a0options\u00a0should-be\u00a0paymasterdeposit\u00a0and\u00a0walletdeposit,-because-neither-uses-the-\u201cstake\u201d-for-gas-payments.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0sender\u00a0parameter in\u00a0the\u00a0_call\u00a0function\u00a0of the\u00a0SimpleWallet\u00a0contract should be\u00a0target.", "body": "The\u00a0sender\u00a0parameter in\u00a0the\u00a0_call\u00a0function\u00a0of the\u00a0SimpleWallet\u00a0contract should be\u00a0target.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0sender\u00a0parameter-in\u00a0the\u00a0_call\u00a0function\u00a0of-the\u00a0simplewallet\u00a0contract-should-be\u00a0target.", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0maxPriorityFeePerGas\u00a0component\u00a0of the\u00a0UserOperation\u00a0struct should be\u00a0priorityFeePerGas.", "body": "The\u00a0maxPriorityFeePerGas\u00a0component\u00a0of the\u00a0UserOperation\u00a0struct should be\u00a0priorityFeePerGas.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0maxpriorityfeepergas\u00a0component\u00a0of-the\u00a0useroperation\u00a0struct-should-be\u00a0priorityfeepergas.", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0BasePaymaster, the\u00a0setEntrypoint\u00a0and\u00a0_requireFromEntrypoint\u00a0functions should capitalize the \u201cp\u201d for consistency with the rest of the code base.", "body": "In\u00a0BasePaymaster, the\u00a0setEntrypoint\u00a0and\u00a0_requireFromEntrypoint\u00a0functions should capitalize the \u201cp\u201d for consistency with the rest of the code base.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0basepaymaster,-the\u00a0setentrypoint\u00a0and\u00a0_requirefromentrypoint\u00a0functions-should-capitalize-the-\u201cp\u201d-for-consistency-with-the-rest-of-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request\u00a0#80\u00a0and commit\u00a0074672b6ccfb596fe7ff44e13783881a2e1cfed2. The following naming suggestions were not implemented:", "body": "Update: Partially fixed in pull request\u00a0#80\u00a0and commit\u00a0074672b6ccfb596fe7ff44e13783881a2e1cfed2. The following naming suggestions were not implemented:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-partially-fixed-in-pull-request\u00a0#80\u00a0and-commit\u00a0074672b6ccfb596fe7ff44e13783881a2e1cfed2.-the-following-naming-suggestions-were-not-implemented:", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0maxPriorityFeePerGas\u00a0component of the\u00a0UserOperation\u00a0struct should be\u00a0priorityFeePerGas. Ethereum Foundation comment on this issue:", "body": "The\u00a0maxPriorityFeePerGas\u00a0component of the\u00a0UserOperation\u00a0struct should be\u00a0priorityFeePerGas. Ethereum Foundation comment on this issue:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0maxpriorityfeepergas\u00a0component-of-the\u00a0useroperation\u00a0struct-should-be\u00a0priorityfeepergas.-ethereum-foundation-comment-on-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "Note that maxPriorityFeePerGas was left unchanged, since it defines the maximum, not actual fee paid by the user.", "body": "Note that maxPriorityFeePerGas was left unchanged, since it defines the maximum, not actual fee paid by the user.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#note-that-maxpriorityfeepergas-was-left-unchanged,-since-it-defines-the-maximum,-not-actual-fee-paid-by-the-user.", "labels": ["OpenZeppelin"]}, {"title": "[N25] Typographical errors [core and sample]", "body": "[N25] Typographical errors [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n25]-typographical-errors-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "Consider addressing the following typographical errors:", "body": "Consider addressing the following typographical errors:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#consider-addressing-the-following-typographical-errors:", "labels": ["OpenZeppelin"]}, {"title": "line 29\u00a0and\u00a0line 30: \u201csimulateOp\u201d should be \u201csimulateValidation\u201d", "body": "line 29\u00a0and\u00a0line 30: \u201csimulateOp\u201d should be \u201csimulateValidation\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-29\u00a0and\u00a0line-30:-\u201csimulateop\u201d-should-be-\u201csimulatevalidation\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 178: \u201cof\u201d should be \u201cif\u201d", "body": "line 178: \u201cof\u201d should be \u201cif\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-178:-\u201cof\u201d-should-be-\u201cif\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 297: \u201cdone, by\u201d should be \u201cdone and\u201d", "body": "line 297: \u201cdone, by\u201d should be \u201cdone and\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-297:-\u201cdone,-by\u201d-should-be-\u201cdone-and\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0IWallet.sol:", "body": "In\u00a0IWallet.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0iwallet.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 10: \u201csuccessfuly.\u201d should be \u201csuccessfully.\u201d", "body": "line 10: \u201csuccessfuly.\u201d should be \u201csuccessfully.\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-10:-\u201csuccessfuly.\u201d-should-be-\u201csuccessfully.\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0StakeManager.sol:", "body": "In\u00a0StakeManager.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0stakemanager.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 12: \u201cblocks to\u201d should be \u201cseconds to wait\u201d", "body": "line 12: \u201cblocks to\u201d should be \u201cseconds to wait\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-12:-\u201cblocks-to\u201d-should-be-\u201cseconds-to-wait\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 83: \u201ctime\u201d should be \u201cduration\u201d", "body": "line 83: \u201ctime\u201d should be \u201cduration\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-83:-\u201ctime\u201d-should-be-\u201cduration\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0DepositPaymaster.sol:", "body": "In\u00a0DepositPaymaster.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0depositpaymaster.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 68: \u201con in the same block as withdrawTo()\u201d should be \u201cin the same block as withdrawTokensTo()\u201d", "body": "line 68: \u201con in the same block as withdrawTo()\u201d should be \u201cin the same block as withdrawTokensTo()\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-68:-\u201con-in-the-same-block-as-withdrawto()\u201d-should-be-\u201cin-the-same-block-as-withdrawtokensto()\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0SimpleWallet.sol:", "body": "In\u00a0SimpleWallet.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0simplewallet.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 88: \u201c(its\u201d should be \u201c(it\u2019s\u201d", "body": "line 88: \u201c(its\u201d should be \u201c(it\u2019s\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-88:-\u201c(its\u201d-should-be-\u201c(it\u2019s\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0TokenPaymaster.sol:", "body": "In\u00a0TokenPaymaster.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0tokenpaymaster.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 11: \u201cos\u201d should be \u201cor\u201d", "body": "line 11: \u201cos\u201d should be \u201cor\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-11:-\u201cos\u201d-should-be-\u201cor\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 18: \u201cmethod-ids.\u201d should be \u201cmethod ids.\u201d", "body": "line 18: \u201cmethod-ids.\u201d should be \u201cmethod ids.\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-18:-\u201cmethod-ids.\u201d-should-be-\u201cmethod-ids.\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 77: \u201cpaymaster\u201d should be \u201centrypoint\u201d", "body": "line 77: \u201cpaymaster\u201d should be \u201centrypoint\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-77:-\u201cpaymaster\u201d-should-be-\u201centrypoint\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0VerifyingPaymaster.sol:", "body": "In\u00a0VerifyingPaymaster.sol:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0verifyingpaymaster.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 57: \u201csigning\u201d should be \u201cto signing\u201d", "body": "line 57: \u201csigning\u201d should be \u201cto signing\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-57:-\u201csigning\u201d-should-be-\u201cto-signing\u201d", "labels": ["OpenZeppelin"]}, {"title": "In\u00a0eip-4337.md:", "body": "In\u00a0eip-4337.md:", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#in\u00a0eip-4337.md:", "labels": ["OpenZeppelin"]}, {"title": "line 46: \u201cfor to compensate the bundler for\u201d should be \u201cto compensate the bundler\u201d", "body": "line 46: \u201cfor to compensate the bundler for\u201d should be \u201cto compensate the bundler\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-46:-\u201cfor-to-compensate-the-bundler-for\u201d-should-be-\u201cto-compensate-the-bundler\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 84: \u201cworlflow\u201d should be \u201cworkflow\u201d", "body": "line 84: \u201cworlflow\u201d should be \u201cworkflow\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-84:-\u201cworlflow\u201d-should-be-\u201cworkflow\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 89: \u201csimulateWalletValidation\u201d should be \u201csimulateValidation\u201d", "body": "line 89: \u201csimulateWalletValidation\u201d should be \u201csimulateValidation\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-89:-\u201csimulatewalletvalidation\u201d-should-be-\u201csimulatevalidation\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 127: \u201cpaymaster\u201d should be \u201cpaymaster)\u201d", "body": "line 127: \u201cpaymaster\u201d should be \u201cpaymaster)\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-127:-\u201cpaymaster\u201d-should-be-\u201cpaymaster)\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 151: \u201cop\u201d should be \u201cop\u00a0validation\u201d", "body": "line 151: \u201cop\u201d should be \u201cop\u00a0validation\u201d", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-151:-\u201cop\u201d-should-be-\u201cop\u00a0validation\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 165: \u201cvaliation\u201d should be \u201cvalidation\u201d and the line should end in a period.", "body": "line 165: \u201cvaliation\u201d should be \u201cvalidation\u201d and the line should end in a period.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#line-165:-\u201cvaliation\u201d-should-be-\u201cvalidation\u201d-and-the-line-should-end-in-a-period.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#79\u00a0and pull request\u00a0#88.", "body": "Update: Fixed in pull request\u00a0#79\u00a0and pull request\u00a0#88.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#79\u00a0and-pull-request\u00a0#88.", "labels": ["OpenZeppelin"]}, {"title": "[N26] Abstract StakeManager contract [core]", "body": "[N26] Abstract StakeManager contract [core]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n26]-abstract-stakemanager-contract-[core]", "labels": ["OpenZeppelin"]}, {"title": "The\u00a0StakeManager\u00a0contract\u00a0is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as\u00a0abstract.", "body": "The\u00a0StakeManager\u00a0contract\u00a0is intended to provide staking functionality to other contracts, but should not be deployed directly. To better signal this intention, consider declaring the contract as\u00a0abstract.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#the\u00a0stakemanager\u00a0contract\u00a0is-intended-to-provide-staking-functionality-to-other-contracts,-but-should-not-be-deployed-directly.-to-better-signal-this-intention,-consider-declaring-the-contract-as\u00a0abstract.", "labels": ["OpenZeppelin"]}, {"title": "[N27] Declare uint as uint256 [core and sample]", "body": "[N27] Declare uint as uint256 [core and sample]", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#[n27]-declare-uint-as-uint256-[core-and-sample]", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider declaring all instance of\u00a0uint\u00a0as\u00a0uint256.", "body": "To favor explicitness, consider declaring all instance of\u00a0uint\u00a0as\u00a0uint256.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#to-favor-explicitness,-consider-declaring-all-instance-of\u00a0uint\u00a0as\u00a0uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request\u00a0#77.", "body": "Update: Fixed in pull request\u00a0#77.", "html_url": "https://blog.openzeppelin.com/eth-foundation-account-abstraction-audit#update:-fixed-in-pull-request\u00a0#77.", "labels": ["OpenZeppelin"]}, {"title": "Anyone can steal money from other suppliers in TUSD market by creating negative interest rates", "body": "Auditors note:The bug behind this issue was first privately reported by the ChainSecurity team during their audit of the CToken Refactors. The OpenZeppelin team was later provided access to ChainSecuritys private report and took it as an input. After further exploring scenarios, OpenZeppelin not only confirmed Chainsecuritys findings but found that other protocols could be impacted by similar integration issues with TUSD. As a result, OpenZeppelin worked with the TUSD team to fix the issue at the source.  It is important to note that this vulnerability was in code that was out of scope for this audit and would have likely gone unnoticed if not for the excellent work of the ChainSecurity team.  Context  The exchangeRateStoredInternal function from the CToken contract calculates the exchange rate between an underlying token and its cToken as follows:  Where:  exchangeRate: the exchange rate between the underlying and the cToken, e.g., TUSD/cTUSD  totalCash: the total amount of underlying held by the cToken contract (calculated by calling underlying.balanceOf(cToken))  totalBorrows: the total amount of underlying borrowed  totalReserves: the total reserves of the market, managed by the protocol that is not intended to be borrowed  totalSupply: the total supply of the cToken minted to suppliers, otherwise known as liquidity providers (LPs)  The mintFresh function uses this exchange rate to calculate how many cTokens should be minted to a user that supplies underlying tokens to the market.  The CToken contract additionally defines the sweepToken function, that can be called by anyone, which moves tokens accidentally sent to the CToken contract to its admin, i.e., the Timelock. This function cannot be called for the underlying token. So, for instance, if the CDAI contract holds USDT, anyone can call the sweepToken function on the CDAI contract, sending the USDT balance to the Timelock contract. Notably, if anyone calls this function sending the DAI address as the parameter, the call will fail since the underlying cannot be moved to the Timelock  The TUSD market case  The issue lies in the fact that the totalCash, in the numerator of the exchangeRate formula described above, can be moved to 0 by calling the sweepToken function, and given the amount of underlying that is not being used for borrows in the TUSD market (roughly 50% of the TVL), the exchange rate could be moved down by around 50%.  This means that after calling the sweep function, the following would happen:  The exchange rate, which tracks the borrow rate, and should always be an increasing function, will go down by ~50%  Any supplier that adds TUSD to the market will receive ~2x the cTUSD amount they should. (A malicious supplier could discover this bug, call the sweep function, and then immediately add liquidity)  Any supplier that provided liquidity to the market before the sweep and then redeems their liquidity after the sweep will receive roughly 50% less of the underlying asset than they should. This would only be possible if suppliers added liquidity at an inflated exchange rate after the sweep. Until the sweep is reversed, they will not be able to redeem any amount  Even if the Timelock moves the funds back to the CTUSD contract, the relationship between the cTUSD supply and underlying assets can be permanently changed due to overminted cTUSD tokens. The interest rates would then remain negative, ultimately putting the market in a loss state for previous suppliers. The degree of the negative rates would depend on the amount of cTUSD tokens minted after the sweep: The more inflated cTUSD tokens minted after the sweep, the more negative the interest rate would be  The exact amounts can be found in this spreadsheet.  On February 23rd 2022, the TUSD team disallowed forwarded calls from the legacy contract to the current contract by rejecting them from the latter, ultimately fixing the issue.  High Severity  None.  Medium Severity  None.  Low Severity", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#anyone-can-steal-money-from-other-suppliers-in-tusd-market-by-creating-negative-interest-rates", "labels": ["OpenZeppelin"]}, {"title": "cEther might fail when repaying a borrow", "body": "repayBorrow function of the  repayBorrowFresh function of the  line 683 of the  Then in line 696, the doTransferIn function calls back the CEther implementation where it checks again that msg.value == repayAmountFinal.  This implies the following: If an amount of ether equal to type(uint).max is passed (Which is unlikely, since it represents an enormous quantity of ETH), then the repayAmountFinal which is passed in the doTransferIn function will be different from the original msg.value = repayAmount and execution will revert. If an amount greater than the actual borrow is passed in, then an underflow will occur in line 703, and the execution will revert.  So to pay an ETH loan in its entirety, one must pass msg.value with the exact total borrow amount. If the amount is greater, it will revert. If msg.value == uint(type).max, it will also revert but for different reasons.  Consider refactoring the code to avoid checking type(uint).max in the CETH case as this cannot be passed as msg.value. Consider requiring that repayAmount <= accountBorrowsPrev instead.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#cether-might-fail-when-repaying-a-borrow", "labels": ["OpenZeppelin"]}, {"title": "Possible function selector clashing", "body": "The upgradeability system implemented in the codebase does not manage function clashing between the proxy contract and the implementation contract.  Clashing can happen among functions with different names. Every function that is part of a contracts public ABI is identified, at the bytecode level, by a 4-byte identifier. This identifier depends on the name and arity of the function, but since it is only 4 bytes, there is a possibility that two different functions with different names may end up having the same identifier. The Solidity compiler tracks when this happens within the same contract, but not when the collision happens across different ones, such as between a proxy and its logic contract.  Upgradeable contract instances (or proxies) work by delegating all calls to a logic contract. However, the proxies need some functions of their own, such as _setPendingImplementation(address) and _acceptImplementation() to upgrade to a new implementation. This setup means there can be a function in the proxy contract with the same 4-byte identifier as one in the implementation contract. This issue would make it impossible to access the one defined in the implementation contract, as the call will not be handled by the fallback function but by the function with that signature in the proxy contract.  Consider thoroughly testing all functions implemented in each upgradeable contract to ensure no collisions are possible. Alternatively, consider migrating to the EIP-1822: Universal Upgradeable Proxy Standard (UUPS), which, by design, does not have this problem.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#possible-function-selector-clashing", "labels": ["OpenZeppelin"]}, {"title": "Gas inefficiencies", "body": "There are many places throughout the codebase where changes can be made to improve gas consumption. For example:  Arbitrary use of different uint types can lead to unwanted effects  Numerous unsigned integer (uint) values of various sizes are used. Those less than 256-bits (uint256) are used extensively. Non-uint256 sizes are generally chosen to facilitate tight packing inside of structs to save on storage costs. However, projects must carefully weigh the realized gas savings against the additional complexity such a design decision introduces.  Since the Ethereum Virtual Machine operates on 256-bit integers, additional operations must be performed to process non-uint256 values. These additional operations increase the bytecode size of contracts and consume additional gas during execution.  In the Comp contract, for example, it was necessary to include some specific functions to manage these units safely but causing extra gas costs for the additional operations. Other than that, the variables are not properly packed in the slots of the contract, so the choice of picking these units is not justified.  The code in some loops is executed unnecessarily  cancel should verify  Some variables are being unnecessarily initialized to their default value  getPriorVotes function the local variable  transferTokens function the local variable  NO_ERROR.  The loops of some functions are not properly optimized  getHypotheticalAccountLiquidityInternal,  _addMarketInternal,  fixBadAccruals and  claimComp, in  queue,  execute and  cancel in  if it is a storage array, this is an extra sload operation(100 additional extra gas (EIP-2929) for each iteration except for the first),  if it is a memory array, this is an extra mload operation (3 additional gas for each iteration except for the first),  if it is a calldata array, this is an extra calldataload operation (3 additional gas for each iteration except for the first)  These extra costs are avoidable by creating a variable with the array length (caching the array length in stack).  Arguments with read-only parameters are using memory instead of calldata  Some protocol contract functions have parameters in which they use the keyboard memory. This may not be very efficient as it performs unnecessary steps if the argument is read-only. Here some examples:  safe32, safe96, add96 and sub96 in Comp.sol  enterMarkets, updateCompBorrowIndex, distributeBorrowerComp, claimComp, _setCompSpeeds in Comptroller.sol  propose in GovernorBravoDelegate.sol  Consider using calldata instead of memory if the function argument is only read.  Storage slots read multiple times  Operations that load values onto the execution stack can be expensive. On several occasions, some variables are read multiple times and cause gas cost overruns in the execution. Here are some examples:  doTransferIn in the CToken contract reads three times the underlying state variable.  propose in the GovernorBravoDelegate contract reads three times the targets.length memory variable.  state in Governor Bravo Delegate, the local variable proposal is unnecessarily defined with the keyword storage, causing multiple reads from storage.  Line 254 of cToken contract is defining a storage variable when memory can be used instead.  To avoid this, consider only loading the variable onto the stack once and reusing it from the stack itself.  Redundant validations  The exitMarket function performs a redundant check to verify if the sender is not already in the market. The internal function redeemAllowedInternal called by the former performs the same validation.  Consider removing the redundant validation.  Unnecessary extra steps  transferTokens has local variables and validations that are wasting gas without adding any value and reducing readability.  Consider removing intermediate variable definitions to act directly on storage variables and and synthesize the validations.  Redundant usage of the Exp type  Usage of Exp type can be avoided at lines 308-310 in favour of uint exchangeRate = cashPlusBorrowsMinusReserves * expScale / _totalSupply;.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#gas-inefficiencies", "labels": ["OpenZeppelin"]}, {"title": "isPriceOracle is not used", "body": "uses a  current implementation, the  UniswapAnchorView contract implementation. However, theres a mismatch between  what the PriceOracle interface should implement and what is  actually implemented.  isPriceOracle getter is not present in the implementation, making the  Moreover, when setting a new oracle, theres no check on whether the new implementation implements isPriceOracle nor assets price is retrieved to check if the oracle is working.  Consider either refactoring the PriceOracle interface or adjusting the current implementation to match its interface. This improves correctness and consistency but will also avoid unexpected call failures.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#ispriceoracle-is-not-used", "labels": ["OpenZeppelin"]}, {"title": "Missing or erroneous docstrings and comments", "body": "Several docstrings and inline comments throughout the codebase were found to be erroneous and should be fixed. Some examples are:  In line 2458 of Unitroller.sol, the concept of ComptrollerCore is mentioned but not used nowhere else in the codebase again  In line 2460 of Unitroller.sol, the comment appears to be either incomplete or the if should be removed from the end of the comment  In line 17 of Exponential.sol says INT but should say UINT  line 237 of Comptroller.sol is incorrect, since minter is actually used.  In line 13 of PriceOracle.sol used by the Comptroller says that zero means price unavailable. But according to how that function works, this is not true in general. The result can be correctly 0 and be a valid price.  In line 795 of CToken.sol should say to avoid re-entrancy check  In line 291 of CToken.sol, should be changed since the function does not return error codes anymore (expect the NO_ERROR code in case of success)  In line 136 of Comptroller.sol, borrower should be supplier or borrower. Note that, in this case, the parameter name should also be changed for consistency and accuracy.  In line 140 of CToken.sol, instead of mentioning that -1 is infinite, it should say that uint256.max is the maximum amount allowed  Additionally, some public and external functions throughout the codebase lack documentation. The lack of documentation hinders a reviewers understanding of the codes intention, an understanding that is essential for correctly assessing both security and correctness. Docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec). Additionally, consider reviewing all existent comments and docstrings to check whether they are complete, descriptive, and accurate, including the examples mentioned above.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#missing-or-erroneous-docstrings-and-comments", "labels": ["OpenZeppelin"]}, {"title": "Commented out or missing verify calls", "body": "The CToken contract includes either commented out or removed lines of code without giving enough context on why those lines have been discarded, thus providing them with little to no value at all. These are:  The transferVerify, mintVerify which have been commented out.  The repayBorrowVerify call which was completely removed from the cToken code.  If any of these function calls will be re-activated in the future by changing their current implementation, this CToken model will need to be updated too.  To avoid compatibility issues and to independently support any Comptroller upgrade, consider adding those function calls back. Alternatively, as the purpose of these lines is unclear and may confuse future developers and external contributors, consider removing them from the codebase. If they are present to provide alternate implementation options, consider extracting them to a separate document where a deeper and more thorough explanation could be included.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#commented-out-or-missing-verify-calls", "labels": ["OpenZeppelin"]}, {"title": "Outdated Solidity versions", "body": "The version of Solidity used throughout the codebase is outdated, varies between contracts, and is not pinned.  The choice of Solidity version should always be informed by the features each version introduces and that the codebase could benefit from, as well as the list of known bugs associated with each version. Examples of this are:  Unitroller and Timelock  0.5.8  Compiler Bugs.  Comptroller and COMP Token  0.5.16  Compiler Bugs.  GovernorBravoDelegator and GovernorBravoDelegate  0.5.17  Compiler Bugs.  The new CToken contract uses ^0.8.6  Compiler Bugs.  Consider taking advantage of the latest Solidity version to improve the overall readability and security of the codebase. Regardless of which version of Solidity is used, consider pinning the version consistently throughout the codebase to prevent the introduction of bugs due to incompatible future releases.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#outdated-solidity-versions", "labels": ["OpenZeppelin"]}, {"title": "Unreachable code", "body": "During the cToken refactor, error handling migrated from returning error codes to reverts. However, error codes in the external/public functions have been preserved for compatibility.  In some cases, these error codes are still being checked, but the code after the check is unreachable, increases gas cost, and reduces readability.  In particular, the accrueInterest function always returns NO_ERROR or reverts thus these code blocks are unreachable:  mintInternal  redeemInternal  redeemUnderlyingInternal  borrowInternal  repayBorrowInternal  repayBorrowBehalfInternal  liquidateBorrowInternal (but lines 732-735 should be kept)  _setReserveFactor  _addReservesInternal  _reduceReserves  _setInterestRateModel  totalBorrowsCurrent  borrowBalanceCurrent  exchangeRateCurrent  The following if clauses of the CToken contract will never be true since the accrueInterest function is always called at the beginning of a mint and will update the accrualBlockNumber to be the latest block number.  mintFresh  redeemFresh  borrowFresh  repayBorrowFresh  liquidateBorrowFresh (but lines 761-764 should be kept)  _setReserveFactorFresh  _addReservesFresh  _reduceReservesFresh  _setInterestRateModelFresh  Consider refactoring the code where necessary to improve the overall gas needed to deploy and run operations.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unreachable-code", "labels": ["OpenZeppelin"]}, {"title": "Unused functions and parameters", "body": "In the up-to-date version of the protocol, the Comptroller contract has many functions and parameters defined which are deprecated and not used anymore. In particular:  mintVerify, redeemVerify, borrowVerify, repayBorrowVerify, liquidateBorrowVerify, seizeVerify and transferVerify do nothing.  isComped, maxAssets, _mintGuardianPaused, _borrowGuardianPaused, compSpeeds, compRate, closeFactorMinMantissa and closeFactorMaxMantissa are not used anymore.  Given the distributed ownership over the Compound protocol, the code base is frequently revisited and maintained by many different community members and contributors. Also, the intrinsic storage layout separation pattern and the upgradeability design have important tradeoff consequences over the general readability and quality of the codebase.  We suggest revisiting the current implementation and starting a community-wide conversation over the long-term codebase development to avoid making the error more confused and less readable.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unused-functions-and-parameters", "labels": ["OpenZeppelin"]}, {"title": "Unused return value", "body": "Line 940 of the Comptroller contract calls the isCToken getter in the cToken contract when listing a new market, but it does check the return value, making this check completely useless.  If the called address has no isCToken getter and the passed contract is not an EOA, the fallback function will be executed. Moreover, if the answer is false, the market should not be listed.  The unwanted outcome is that Markets can be mistakenly added but cannot be removed according to the latest deployed version.  Consider explicitly checking the return value of such calls and eventually revert with any unwanted behaviours or values returned.  Notes & Additional Information", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unused-return-value", "labels": ["OpenZeppelin"]}, {"title": "A compromised underlying asset can drain all funds from the protocol", "body": "If an underlying assets collateral factor in a specific market is greater than zero and the underlying token is upgraded with malicious code, then it might be possible to set an arbitrarily large underlying balance to drain all other markets and drain them using the underlying asset as collateral. There could be other examples where a malicious upgrade of an underlying token can circumvent the entire protocols security, and the protocol would be blind to such events.  In the short-term, consider this risk for a new token listing process and add monitoring for compromised or upgraded underlying assets. In the long-term, consider a system design where a specific underlying token cant affect the protocol as a whole to mitigate this specific risk.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#a-compromised-underlying-asset-can-drain-all-funds-from-the-protocol", "labels": ["OpenZeppelin"]}, {"title": "Block velocity assumption", "body": "The InterestRateStrategy makes an assumption on the number of blocks per year to evaluate interests rate.  This will not work for many current L2 solutions or future Ethereum upgrades. Even if this doesnt pose a security issue today, it might be an issue in the future if Compound is deployed on many different chains.  Consider adding this to the backlog tasks when planning to deploy the protocol to a new chain.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#block-velocity-assumption", "labels": ["OpenZeppelin"]}, {"title": "Code style inconsistencies", "body": "Across the codebase there are several places where code has an inconsistent style. Some examples are:  Inconsistent error handling between line 489 and line 504 in the Comptroller contract.  Mixed docstrings style in the ComptrollerInterface used by the Comptroller.  SNAKE_CASE for constants is missing for quorumVotes and proposalMaxOperations in the GovernorBravoDelegate contract.  Some contracts use a require statement for access control and others an if and a custom function called fail that does not revert but returns a number that refers to a type of error.  Consider reviewing the entire codebase to improve consistency and refactor the code where possible.Take into consideration using the Solidity Style Guide when doing so enforcing a standard coding style with help of linter tools such as Solhint.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#code-style-inconsistencies", "labels": ["OpenZeppelin"]}, {"title": "Declare uint as uint256", "body": "In the audited contracts, there is a general use of unsigned integer variables declared as uint.  To favor explicitness, consider replacing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "doTransferOut doesn\u2019t ensure success operation", "body": "The doTransferOut function performs an ERC20s transfer operation taking into account that this transfer call may not return anything if the asset is not ERC20 compliant. To manage this, it uses an assembly block that is implemented to check the returndatasize() as follows:  When returndatasize() = 0, it is assumed that the asset does not comply with the ERC20 specification, and set the success variable to true.  When returndatasize() = 32, it is assumed that the returned value was either true or false, and set the success variable as the returned value.  When returndatasize() equals any other value, it is assumed that the asset is an excessively non-compliant ERC20, and the function reverts.  The issue lies in the fact that when returndatasize() is zero, It cannot be ensured that the transfer succeeded, since the transfer may have silently failed. If the transfer call silently fails, the users CTokens will be burned but no tokens are going to be transferred back to them.  Even though this does not pose a security risk in any current Compound market, it may cause problems in markets to be added in the future.  Consider adding an additional check to the doTransferOut function to evaluate whether the final underlying balance of the CToken is different than its initial underlying balance. Additionally, consider exhaustively reviewing the transfer and transferFrom functions of any future market addition proposal to check that they cannot silently fail.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#dotransferout-doesn\u2019t-ensure-success-operation", "labels": ["OpenZeppelin"]}, {"title": "Implementation used as interface", "body": "_become function to call back the  implementation and not an interface. This implementation slightly differs from the  real  CToken contract.  Consider using interfaces instead of contract files to avoid confusion, improve readability, and reduce the codebase size.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#implementation-used-as-interface", "labels": ["OpenZeppelin"]}, {"title": "Lack of indexed parameters in events", "body": "Over the code base, theres inconsistent use of indexed parameters for event definitions. Specifically, some event definitions lack completely indexed parameters. Some examples are:  The Failure event of the ComptrollerErrorReporter.  The event definitions of the Unitroller.  Many events of the GovernorBravoDelegator contract.  Many events of the Comptroller contract.  Many events of the CTokenInterfaces contract.  The NewImplementation event of the CDelegatorInterface.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "Lack of input validation", "body": "In the codebase, there are several places where theres a lack of input validation. Some examples:  Admin functions of the Comptroller lack of input validation.  The Unitroller doesnt have input validation when setting pending implementation or admin.  When calling _setMarketBorrowCaps an array of cTokens is passed to be configured with a borrow cap. However, there is no check on whether each market isListed before setting a borrow cap.  Consider reviewing the codebase looking for any places where an input validation might be beneficial. This will reduce attack surface, error propagations and improve overall security.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "Lack of SPDX License Identifier", "body": "All Compound protocol contracts except those developed for the new CToken contract do not have a license identifier.  To avoid legal issues regarding copyright and follow best practices, consider adding the SPDX license identifier as suggested by the Solidity documentation.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#lack-of-spdx-license-identifier", "labels": ["OpenZeppelin"]}, {"title": "Constants not declared explicitly", "body": "There are several occurrences of literal values with unexplained meaning in the Compound Protocols contracts. Some examples are:  In Comptroller.sol: line 176, line 188, line 738, and line 1088.  line 71,  line 405,  line 521,  line 584,  line 670,  line 752, and  line 833  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors, and external contributors alike.  For the examples mentioned above in particular, all 0 constants can be replaced with either Error.NO_ERROR or NO_ERROR constants. But in general, developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following Soliditys style guide, constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#constants-not-declared-explicitly", "labels": ["OpenZeppelin"]}, {"title": "cEth and cErc20 underlying balances can be manipulated", "body": "In the cErc20 contract, the balance of the underlying asset is calculated by calling the balanceOf function from the EIP20Interface interface. As a result, if any underlying tokens are sent directly to a cErc20 contract, bypassing the mint function, the underlying token balance is incremented without minting the corresponding cTokens to the user.  When a market has already a notable amount of liquidity, sending funds directly to these contracts will not be profitable, and will instead mean each cToken holder can claim more tokens for themselves. However in markets where the amount of underlying in the contract is relatively low, this may not be true as sending untracked tokens to the market can cause a large change to a markets exchange rate, ultimetly allowing over-minting of cTokens in extreme conditions.  The same is true of cEth, where an actor can bypass the receive function using self destruct, similarly manipulating the underlying amount.  Consider tracking the total underlying balance in a new variable, and increment/decrement it as appropriate when supplies and borrows happen, to avoid adverse actors from being able to bypass predefined functions and manipulating the markets exchange rate.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#ceth-and-cerc20-underlying-balances-can-be-manipulated", "labels": ["OpenZeppelin"]}, {"title": "Markets can\u2019t be unlisted", "body": "The current implementation does not allow for a Markets isListed flag to be turned off. However, markets can become deprecated but will stay in the allMarkets storage variable.  Moreover, the current implementation often performs for loops around the allMarkets array. This altogether means that markets cant be effectively unlisted nor removed from the array.  If markets are added in the future or if some get deprecated, they will still incur higher gas prices for normal operations since the calculations will run through all the markets array independently.  Consider starting a discussion on how to effectively refactor the code to improve the current design in order to improve general gas cost and optimize storage usage.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#markets-can\u2019t-be-unlisted", "labels": ["OpenZeppelin"]}, {"title": "Improper imports style", "body": "Non-explicit imports are used throughout all protocol contracts. This reduces code readability and could lead to conflicts between names defined locally and the ones imported.  Furthermore, many contracts are defined inside the same Solidity files, making the issue even more significant.  Some examples of multiple contracts and interfaces within the same file are:  GovernorBravoEvents, GovernorBravoDelegatorStorage, GovernorBravoDelegateStorageV1, GovernorBravoDelegateStorageV2, TimelockInterface, CompInterface, GovernorAlpha are in GovernorBravoInterfaces.sol  CTokenStorage, CTokenInterface, CErc20Storage, CErc20Interface, CDelegationStorage, CDelegatorInterface, CDelegateInterface are in CTokenInterfaces.sol  On the principle that clearer code is better code, consider using named import syntax (import {A, B, C} from \"X\") to explicitly declare which contracts are being imported and avoid having multiple implementations in the same file.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#improper-imports-style", "labels": ["OpenZeppelin"]}, {"title": "Typos", "body": "Accross the codebase there are different typos. Some examples are:  contructor should be constructor.  arity should be parity.  tather should be rather.  Consider correcting these typos and review the codebase to check for more to improve code readability.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#typos", "labels": ["OpenZeppelin"]}, {"title": "Unclear and inconsistent naming", "body": "There are some places in the codebase that might benefit from some naming changes:  The UnitrollerAdminStorage.sol not only holds the admin storage variables but also the implementation variables (comptrollerImplementation, pendingComptrollerImplementation), so naming it UnitrollerStorage would be more general and consistent.  In general, there is no clear and consistent naming system for functions. Some contracts follow the convention that internal ones are prefixed with _, but in other cases this prefix is used for admin functions that can be public, external or, internal. Some examples are:  In the Comp token contract the prefix is used for internal functions although not consistently as safe32, safe96, add96, sub96 and getChainId are internal and do not carry the prefix.  In the Comptroller, CToken and GovernorBravo contracts, the convention is that the prefix is used for admin functions.  Consider being consistent to improve code readability, clarity, and quality. An inconsistent naming system can confuse users and is prone to error. Moreover, consider reviewing the entire codebase for potential other occurrences.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unclear-and-inconsistent-naming", "labels": ["OpenZeppelin"]}, {"title": "Unnecessary assembly code", "body": "Functions getChainId and getChainIdInternal use assembly code to query for the identifier of the blockchain in which the contract is deployed.  For future implementations, consider using the global variable block.chainid to improve readability, reduce execution gas and optimize bytecode size.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unnecessary-assembly-code", "labels": ["OpenZeppelin"]}, {"title": "Unnecessary checks", "body": "Throughout the codebase, there are some unnecessary checks that can be avoided to save gas and improve readability. For example:  The _acceptAdmin function and the _acceptImplementation function in Unitroller.sol validate that the msg.sender is not the zero address (that is, the new admin who calls the function is not the zero address and the address of the new Comptroller implementation is not the zero address), which is an unfeasible scenario, and is anyway validated in both if clauses in the first evaluated condition  The borrowAllowed function in Comptroller.sol redundantly checks whether the borrower is part of the accountMembership mapping, since this flag is properly set in the addToMarketInternal function, and if that fails, it will return beforehand.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#unnecessary-checks", "labels": ["OpenZeppelin"]}, {"title": "Wrong or missing visibility in functions and variables", "body": "The following functions are defined as public but are never locally used:  inComp.sol: delegate, delegateBySig and getPriorVotes.  in Comptroller.sol: enterMarkets, getAccountLiquidity, getHypotheticalAccountLiquidity, _setPriceOracle, _setPauseGuardian, _setMintPaused, _setBorrowPaused, _setTransferPaused, _setSeizePaused, _become, _grantComp, _setCompSpeeds, _setContributorCompSpeed, getAllMarkets  in CToken.sol: _setInterestRateModel  in GovernorBravoDelegate.sol: propose  all functions in Unitroller contract.  Moreover, in the ExponentialNoError contract, all the constants are implicitly using the default visibility.  To clarify intent and favor readability, consider explicitly declaring the visibility of all constants and state variables. Also, consider changing the visibility of the aforementioned functions to external to reduce gas costs.", "html_url": "https://blog.openzeppelin.com/compound-comprehensive-protocol-audit#wrong-or-missing-visibility-in-functions-and-variables", "labels": ["OpenZeppelin"]}, {"title": "[N01] addStorageRoot can add duplicate url\u2018s", "body": "[N01] addStorageRoot can add duplicate url\u2018s", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#[n01]-addstorageroot-can-add-duplicate-url\u2018s", "labels": ["OpenZeppelin"]}, {"title": "PR #8360, the", "body": "PR #8360, the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#pr-#8360,-the", "labels": ["OpenZeppelin"]}, {"title": "addStorageRoot function of the", "body": "addStorageRoot function of the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#addstorageroot-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "This function does not check whether the url already exists in the array so there can be duplicate entries added.", "body": "This function does not check whether the url already exists in the array so there can be duplicate entries added.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#this-function-does-not-check-whether-the-url-already-exists-in-the-array-so-there-can-be-duplicate-entries-added.", "labels": ["OpenZeppelin"]}, {"title": "This does not pose a security risk. However, it can result in unnecessary gas expenditure. Furthermore the resulting redundant data returned by the getOffchainStorageRoots function can confuse offchain clients and add computational complexity to the processing of this data.", "body": "This does not pose a security risk. However, it can result in unnecessary gas expenditure. Furthermore the resulting redundant data returned by the getOffchainStorageRoots function can confuse offchain clients and add computational complexity to the processing of this data.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#this-does-not-pose-a-security-risk.-however,-it-can-result-in-unnecessary-gas-expenditure.-furthermore-the-resulting-redundant-data-returned-by-the-getoffchainstorageroots-function-can-confuse-offchain-clients-and-add-computational-complexity-to-the-processing-of-this-data.", "labels": ["OpenZeppelin"]}, {"title": "Consider using OpenZeppelin\u2019s EnumerableMap as a more practical solution than an array.", "body": "Consider using OpenZeppelin\u2019s EnumerableMap as a more practical solution than an array.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#consider-using-openzeppelin\u2019s-enumerablemap-as-a-more-practical-solution-than-an-array.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, and will not fix. cLab\u2019s statement for this issue:", "body": "Update: Acknowledged, and will not fix. cLab\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#update:-acknowledged,-and-will-not-fix.-clab\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "These duplicates can be checked for on the client side easily, both as a check before adding a duplicate or as a filter on the returned storage roots. To avoid complicating and inflating the cost of the storage root logic, we will not make a change to address this at this time.", "body": "These duplicates can be checked for on the client side easily, both as a check before adding a duplicate or as a filter on the returned storage roots. To avoid complicating and inflating the cost of the storage root logic, we will not make a change to address this at this time.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#these-duplicates-can-be-checked-for-on-the-client-side-easily,-both-as-a-check-before-adding-a-duplicate-or-as-a-filter-on-the-returned-storage-roots.-to-avoid-complicating-and-inflating-the-cost-of-the-storage-root-logic,-we-will-not-make-a-change-to-address-this-at-this-time.", "labels": ["OpenZeppelin"]}, {"title": "[N02] ExchangeBRL.sol lacks Solidity version pragma", "body": "[N02] ExchangeBRL.sol lacks Solidity version pragma", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#[n02]-exchangebrl.sol-lacks-solidity-version-pragma", "labels": ["OpenZeppelin"]}, {"title": "In PR #8831, the ExchangeBRL.sol file does not define a Solidity version pragma.", "body": "In PR #8831, the ExchangeBRL.sol file does not define a Solidity version pragma.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#in-pr-#8831,-the-exchangebrl.sol-file-does-not-define-a-solidity-version-pragma.", "labels": ["OpenZeppelin"]}, {"title": "In this case, it does not pose a security threat since the ExchangeBRL contract has trivial logic and its base contract does have its Solidity version pragma set. But it is considered good practice to always define the Solidity version pragma, since it can be a security concern when the contract contains non-trivial operations which can have different effects across Solidity versions.", "body": "In this case, it does not pose a security threat since the ExchangeBRL contract has trivial logic and its base contract does have its Solidity version pragma set. But it is considered good practice to always define the Solidity version pragma, since it can be a security concern when the contract contains non-trivial operations which can have different effects across Solidity versions.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#in-this-case,-it-does-not-pose-a-security-threat-since-the-exchangebrl-contract-has-trivial-logic-and-its-base-contract-does-have-its-solidity-version-pragma-set.-but-it-is-considered-good-practice-to-always-define-the-solidity-version-pragma,-since-it-can-be-a-security-concern-when-the-contract-contains-non-trivial-operations-which-can-have-different-effects-across-solidity-versions.", "labels": ["OpenZeppelin"]}, {"title": "Consider defining Solidity version pragmas for all Solidity source files in this project.", "body": "Consider defining Solidity version pragmas for all Solidity source files in this project.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#consider-defining-solidity-version-pragmas-for-all-solidity-source-files-in-this-project.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 8e0caecc0554d5a3f6fb25b6d024f29ff7562029.", "body": "Update: Fixed as of commit 8e0caecc0554d5a3f6fb25b6d024f29ff7562029.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#update:-fixed-as-of-commit-8e0caecc0554d5a3f6fb25b6d024f29ff7562029.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Not using SafeMath", "body": "[N03] Not using SafeMath", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#[n03]-not-using-safemath", "labels": ["OpenZeppelin"]}, {"title": "PR #8360 contains a getOffchainStorageRoots function which concatenates the url bytes of an account using the help of a local totalLength variable. The totalLength is the aggregated length of all the offchainStorageRoots elements for a specified account.", "body": "PR #8360 contains a getOffchainStorageRoots function which concatenates the url bytes of an account using the help of a local totalLength variable. The totalLength is the aggregated length of all the offchainStorageRoots elements for a specified account.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#pr-#8360-contains-a-getoffchainstorageroots-function-which-concatenates-the-url-bytes-of-an-account-using-the-help-of-a-local-totallength-variable.-the-totallength-is-the-aggregated-length-of-all-the-offchainstorageroots-elements-for-a-specified-account.", "labels": ["OpenZeppelin"]}, {"title": "Consider using OpenZeppelin\u2019s SafeMath to perform the addition to totalLength to prevent overflow and maintain consistency with the method in batchGetMetadataURL.", "body": "Consider using OpenZeppelin\u2019s SafeMath to perform the addition to totalLength to prevent overflow and maintain consistency with the method in batchGetMetadataURL.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#consider-using-openzeppelin\u2019s-safemath-to-perform-the-addition-to-totallength-to-prevent-overflow-and-maintain-consistency-with-the-method-in-batchgetmetadataurl.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR9026 as of commit 6af9bf0371550f723731080929f9d8946d78d524.", "body": "Update: Fixed in PR9026 as of commit 6af9bf0371550f723731080929f9d8946d78d524.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#update:-fixed-in-pr9026-as-of-commit-6af9bf0371550f723731080929f9d8946d78d524.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Incorrect token initialization data", "body": "[N04] Incorrect token initialization data", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#[n04]-incorrect-token-initialization-data", "labels": ["OpenZeppelin"]}, {"title": "In PR #8831, the migrationsConfig.js file is updated to include initialization data for the deployment of the StableTokenBRL.", "body": "In PR #8831, the migrationsConfig.js file is updated to include initialization data for the deployment of the StableTokenBRL.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#in-pr-#8831,-the-migrationsconfig.js-file-is-updated-to-include-initialization-data-for-the-deployment-of-the-stabletokenbrl.", "labels": ["OpenZeppelin"]}, {"title": "incorrectly set to be a copy of the", "body": "incorrectly set to be a copy of the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#incorrectly-set-to-be-a-copy-of-the", "labels": ["OpenZeppelin"]}, {"title": "This incorrect token initialization will not affect the inner logic and accounting of the token itself. However, this mislabelling can cause errors in indexing this token in exchanges, and will likely confuse users which can greatly affect its utility and adoption.", "body": "This incorrect token initialization will not affect the inner logic and accounting of the token itself. However, this mislabelling can cause errors in indexing this token in exchanges, and will likely confuse users which can greatly affect its utility and adoption.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#this-incorrect-token-initialization-will-not-affect-the-inner-logic-and-accounting-of-the-token-itself.-however,-this-mislabelling-can-cause-errors-in-indexing-this-token-in-exchanges,-and-will-likely-confuse-users-which-can-greatly-affect-its-utility-and-adoption.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the migrationsConfig.js to have appropriate tokenName and tokenSymbol set specific to the StableTokenBRL.", "body": "Consider updating the migrationsConfig.js to have appropriate tokenName and tokenSymbol set specific to the StableTokenBRL.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#consider-updating-the-migrationsconfig.js-to-have-appropriate-tokenname-and-tokensymbol-set-specific-to-the-stabletokenbrl.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 92441e39e3b5cbb29bb8af6ed914b90a874d9afe. cLabs comments on the issue:", "body": "Update: Fixed as of commit 92441e39e3b5cbb29bb8af6ed914b90a874d9afe. cLabs comments on the issue:", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#update:-fixed-as-of-commit-92441e39e3b5cbb29bb8af6ed914b90a874d9afe.-clabs-comments-on-the-issue:", "labels": ["OpenZeppelin"]}, {"title": "As a clarification, wanted to point out that file is only used for testing proposals and not for mainnet (not even testnets).", "body": "As a clarification, wanted to point out that file is only used for testing proposals and not for mainnet (not even testnets).", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-release-6#as-a-clarification,-wanted-to-point-out-that-file-is-only-used-for-testing-proposals-and-not-for-mainnet-(not-even-testnets).", "labels": ["OpenZeppelin"]}, {"title": "[N01] Deprecated project dependencies", "body": "[N01] Deprecated project dependencies", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n01]-deprecated-project-dependencies", "labels": ["OpenZeppelin"]}, {"title": "During the installation of the project\u2019s dependencies, NPM warns that one of the packages installed, Highlight, \u201cwill no longer be supported or receive security updates in the future\u201d.", "body": "During the installation of the project\u2019s dependencies, NPM warns that one of the packages installed, Highlight, \u201cwill no longer be supported or receive security updates in the future\u201d.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#during-the-installation-of-the-project\u2019s-dependencies,-npm-warns-that-one-of-the-packages-installed,-highlight,-\u201cwill-no-longer-be-supported-or-receive-security-updates-in-the-future\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.", "body": "Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#even-though-it-is-unlikely-that-this-package-could-cause-a-security-risk,-consider-upgrading-the-dependency-that-uses-this-package-to-a-maintained-version.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 0a2b55d. However, the installation now requires the usage of the -force flag on current LTS versions of node in order to succeed.", "body": "Update: Fixed in commit 0a2b55d. However, the installation now requires the usage of the -force flag on current LTS versions of node in order to succeed.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-0a2b55d.-however,-the-installation-now-requires-the-usage-of-the--force-flag-on-current-lts-versions-of-node-in-order-to-succeed.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Pool fees may incentivize imbalanced deposits", "body": "[N02] Pool fees may incentivize imbalanced deposits", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n02]-pool-fees-may-incentivize-imbalanced-deposits", "labels": ["OpenZeppelin"]}, {"title": "When depositing into the FixedRateSwap contract, the _getVirtualAmountsForDeposit function calculates the virtual value of the deposit. Virtual amounts are the original amounts scaled, after charging the fee according to the pool\u2019s current asset ratio.", "body": "When depositing into the FixedRateSwap contract, the _getVirtualAmountsForDeposit function calculates the virtual value of the deposit. Virtual amounts are the original amounts scaled, after charging the fee according to the pool\u2019s current asset ratio.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#when-depositing-into-the-fixedrateswap-contract,-the-_getvirtualamountsfordeposit-function-calculates-the-virtual-value-of-the-deposit.-virtual-amounts-are-the-original-amounts-scaled,-after-charging-the-fee-according-to-the-pool\u2019s-current-asset-ratio.", "labels": ["OpenZeppelin"]}, {"title": "If a user deposits funds at the current ratio of assets within the pool then they are not charged fees. Otherwise, they are charged fees based on the difference between their deposit ratio and the pool\u2019s current asset ratio.", "body": "If a user deposits funds at the current ratio of assets within the pool then they are not charged fees. Otherwise, they are charged fees based on the difference between their deposit ratio and the pool\u2019s current asset ratio.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#if-a-user-deposits-funds-at-the-current-ratio-of-assets-within-the-pool-then-they-are-not-charged-fees.-otherwise,-they-are-charged-fees-based-on-the-difference-between-their-deposit-ratio-and-the-pool\u2019s-current-asset-ratio.", "labels": ["OpenZeppelin"]}, {"title": "This design implies that when the ratio of assets within the pool is imbalanced, users would be incentivized to deposit at the same imbalanced ratio, rather than deposit at a ratio which would make the pool more balanced.", "body": "This design implies that when the ratio of assets within the pool is imbalanced, users would be incentivized to deposit at the same imbalanced ratio, rather than deposit at a ratio which would make the pool more balanced.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#this-design-implies-that-when-the-ratio-of-assets-within-the-pool-is-imbalanced,-users-would-be-incentivized-to-deposit-at-the-same-imbalanced-ratio,-rather-than-deposit-at-a-ratio-which-would-make-the-pool-more-balanced.", "labels": ["OpenZeppelin"]}, {"title": "To encourage a more balanced pool, consider incentivizing deposits that balance the pool rather than penalizing them. Alternatively, if this is not feasible, consider explaining why within the project\u2019s documentation.", "body": "To encourage a more balanced pool, consider incentivizing deposits that balance the pool rather than penalizing them. Alternatively, if this is not feasible, consider explaining why within the project\u2019s documentation.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#to-encourage-a-more-balanced-pool,-consider-incentivizing-deposits-that-balance-the-pool-rather-than-penalizing-them.-alternatively,-if-this-is-not-feasible,-consider-explaining-why-within-the-project\u2019s-documentation.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, and will not fix.", "body": "[L06] No accessible coverage report  Although the README file points to a coverage report, it is inaccessible.  Additionally, there are no instructions for running the test coverage scripts.  Consider making the coverage report accessible and explicitly documenting how to run the test coverage scripts.  Update: Partially fixed. The coverage report is now accessible, however the README file still does not explain how to run the scripts.  [L07] Potentially unsafe unchecked math  Throughout the FixedRateSwap contract, there are many uses of unchecked math. The main reason for using unchecked math is to remove overflow/underflow checks in cases that either rely on such behavior or are known not to underflow/overflow. This has the benefit of saving gas, but, if used incorrectly, can lead to unexpected results and potential vulnerabilities.  Instances of unchecked arithmetic that can potentially underflow/overflow were identified. For example:  The _getReturn function can overflow in multiple places, potentially returning a highly diminished outputAmount.  The _checkVirtualAmountsFormula function can overflow.  The _powerHelper function can overflow, but it is only used by the private _getReturn function.  The necessary values required to overflow these calculations, paired with reasonable validations throughout the codebase, often prevent these overflows from being achievable in practice, but they are still theoretically possible. Consider not using unchecked math except whenever the possibility of overflows can be completely ruled out, in order to prevent unexpected results and reduce the overall attack surface of the protocol.    [L08] Unsafe explicit casting of integers  Swap event takes an  swap0To1,  swap1To0,  swap0To1For, and  swap1To0For functions.  During emission, however, the integer values being passed to the event are explicitly cast from uint256 to int256 values.  Although unlikely to be problematic in practice today, ecosystems developments such as unbounded flash loans of stablecoin assets could cause this design to exhibit undesirable behaviors in the future. On a given large enough uint256 value, explicitly casting into an int256 type would truncate its value. As a result, off-chain systems, dependent on the accuracy of the event emission, could be misled.  Consider redefining the Swap event to deal directly with uint256 values so that the functions that emit the event can forego the explicit casts.  Update: Fixed in commit 8436c6c. 1inch team imported the OpenZeppelins SafeCast library to safely cast the mentioned cases.  [L09] Withdrawal process could result in flooring  When a share holder uses either the withdraw or the withdrawFor functions, the contract calculates the amount of assets that they are entitled to given an amount of shares. Those assets are then transferred to the specified recipient.  However, since if statements are being used rather than require statements to validate whether any asset should be sent to the recipient, if the pool is unbalanced and the amount of shares is small, the contract could floor the value to be sent for either one or both of the assets.  Given that the values involved would necessarily be quite small, and in consideration of the fact that the protocol cannot completely restrict withdrawals where one token output may in fact be zero, consider documenting this potential rounding behavior so that users are aware of it when withdrawing.    Notes & Additional Information  [N01] Deprecated project dependencies  During the installation of the projects dependencies, NPM warns that one of the packages installed, Highlight, will no longer be supported or receive security updates in the future.  Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.  Update: Fixed in commit 0a2b55d. However, the installation now requires the usage of the -force flag on current LTS versions of node in order to succeed.  [N02] Pool fees may incentivize imbalanced deposits  When depositing into the FixedRateSwap contract, the _getVirtualAmountsForDeposit function calculates the virtual value of the deposit. Virtual amounts are the original amounts scaled, after charging the fee according to the pools current asset ratio.  If a user deposits funds at the current ratio of assets within the pool then they are not charged fees. Otherwise, they are charged fees based on the difference between their deposit ratio and the pools current asset ratio.  This design implies that when the ratio of assets within the pool is imbalanced, users would be incentivized to deposit at the same imbalanced ratio, rather than deposit at a ratio which would make the pool more balanced.  To encourage a more balanced pool, consider incentivizing deposits that balance the pool rather than penalizing them. Alternatively, if this is not feasible, consider explaining why within the projects documentation.    [N0", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-acknowledged,-and-will-not-fix.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Undocumented implicit approval requirements", "body": "[N03] Undocumented implicit approval requirements", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n03]-undocumented-implicit-approval-requirements", "labels": ["OpenZeppelin"]}, {"title": "The FixedRateSwap contract implicitly assumes that it has been granted an appropriate allowance before executing swaps and deposits which necessarily transfer tokens.", "body": "The FixedRateSwap contract implicitly assumes that it has been granted an appropriate allowance before executing swaps and deposits which necessarily transfer tokens.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-fixedrateswap-contract-implicitly-assumes-that-it-has-been-granted-an-appropriate-allowance-before-executing-swaps-and-deposits-which-necessarily-transfer-tokens.", "labels": ["OpenZeppelin"]}, {"title": "In favor of explicitness and to improve the overall clarity of the codebase, consider documenting all approval requirements in the relevant functions\u2019 inline documentation.", "body": "In favor of explicitness and to improve the overall clarity of the codebase, consider documenting all approval requirements in the relevant functions\u2019 inline documentation.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#in-favor-of-explicitness-and-to-improve-the-overall-clarity-of-the-codebase,-consider-documenting-all-approval-requirements-in-the-relevant-functions\u2019-inline-documentation.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Confusing implicit validation of outputAmount", "body": "[N04] Confusing implicit validation of outputAmount", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n04]-confusing-implicit-validation-of-outputamount", "labels": ["OpenZeppelin"]}, {"title": "getReturn function is provided three parameters, namely, a token to swap from (", "body": "getReturn function is provided three parameters, namely, a token to swap from (", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#getreturn-function-is-provided-three-parameters,-namely,-a-token-to-swap-from-(", "labels": ["OpenZeppelin"]}, {"title": "calculated and returned.", "body": "calculated and returned.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#calculated-and-returned.", "labels": ["OpenZeppelin"]}, {"title": "Before the calculation, the function requires that the inputAmount value is less than or equal to the pool\u2019s token balance of the tokenTo asset. However, the outputAmount value, arguably the more intuitive value to check against the tokenTo asset balance, is never explicitly checked for the same condition.", "body": "Before the calculation, the function requires that the inputAmount value is less than or equal to the pool\u2019s token balance of the tokenTo asset. However, the outputAmount value, arguably the more intuitive value to check against the tokenTo asset balance, is never explicitly checked for the same condition.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#before-the-calculation,-the-function-requires-that-the-inputamount-value-is-less-than-or-equal-to-the-pool\u2019s-token-balance-of-the-tokento-asset.-however,-the-outputamount-value,-arguably-the-more-intuitive-value-to-check-against-the-tokento-asset-balance,-is-never-explicitly-checked-for-the-same-condition.", "labels": ["OpenZeppelin"]}, {"title": "In fact, the math used to calculate outputAmount value ensures that it will be strictly less than or equal to the inputAmount value.", "body": "In fact, the math used to calculate outputAmount value ensures that it will be strictly less than or equal to the inputAmount value.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#in-fact,-the-math-used-to-calculate-outputamount-value-ensures-that-it-will-be-strictly-less-than-or-equal-to-the-inputamount-value.", "labels": ["OpenZeppelin"]}, {"title": "However, the intentionality of this behavior is unclear, i.e. it is not obvious whether this design is just meant to fail more quickly during execution to reduce the gas cost or not. Consider explicitly documenting the reasoning for the exact check used. Additionally, consider validating if the balance of the to asset is greater than the outputAmount value as opposed to the inputAmount value.", "body": "However, the intentionality of this behavior is unclear, i.e. it is not obvious whether this design is just meant to fail more quickly during execution to reduce the gas cost or not. Consider explicitly documenting the reasoning for the exact check used. Additionally, consider validating if the balance of the to asset is greater than the outputAmount value as opposed to the inputAmount value.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#however,-the-intentionality-of-this-behavior-is-unclear,-i.e.-it-is-not-obvious-whether-this-design-is-just-meant-to-fail-more-quickly-during-execution-to-reduce-the-gas-cost-or-not.-consider-explicitly-documenting-the-reasoning-for-the-exact-check-used.-additionally,-consider-validating-if-the-balance-of-the-to-asset-is-greater-than-the-outputamount-value-as-opposed-to-the-inputamount-value.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 10f4d9c.", "body": "Update: Fixed in commit 10f4d9c.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-10f4d9c.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Naming inconsistency", "body": "[N05] Naming inconsistency", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n05]-naming-inconsistency", "labels": ["OpenZeppelin"]}, {"title": "FixedRateSwap contract sets an explicit", "body": "FixedRateSwap contract sets an explicit", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#fixedrateswap-contract-sets-an-explicit", "labels": ["OpenZeppelin"]}, {"title": "pair of tokens that the swap, withdrawal, and deposit operations are meant to operate with. Throughout the codebase, these tokens are labeled with an index of either", "body": "pair of tokens that the swap, withdrawal, and deposit operations are meant to operate with. Throughout the codebase, these tokens are labeled with an index of either", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#pair-of-tokens-that-the-swap,-withdrawal,-and-deposit-operations-are-meant-to-operate-with.-throughout-the-codebase,-these-tokens-are-labeled-with-an-index-of-either", "labels": ["OpenZeppelin"]}, {"title": "swap0To1 function.", "body": "swap0To1 function.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#swap0to1-function.", "labels": ["OpenZeppelin"]}, {"title": "withdrawForWithRatio function, the parameter that defines the proportion to receive of", "body": "withdrawForWithRatio function, the parameter that defines the proportion to receive of", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#withdrawforwithratio-function,-the-parameter-that-defines-the-proportion-to-receive-of", "labels": ["OpenZeppelin"]}, {"title": "firstTokenShare which could introduce confusion that it is in reference to the", "body": "firstTokenShare which could introduce confusion that it is in reference to the", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#firsttokenshare-which-could-introduce-confusion-that-it-is-in-reference-to-the", "labels": ["OpenZeppelin"]}, {"title": "To improve overall readability and reduce potential confusion, consider keeping naming conventions consistent throughout the entire codebase.", "body": "To improve overall readability and reduce potential confusion, consider keeping naming conventions consistent throughout the entire codebase.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#to-improve-overall-readability-and-reduce-potential-confusion,-consider-keeping-naming-conventions-consistent-throughout-the-entire-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 57ad4cd.", "body": "Update: Fixed in commit 57ad4cd.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-57ad4cd.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Revert messages are inconsistently formatted", "body": "[N06] Revert messages are inconsistently formatted", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n06]-revert-messages-are-inconsistently-formatted", "labels": ["OpenZeppelin"]}, {"title": "The require statements in the constructor of the FixedRateSwap contract are formatted differently than all of the other require statements in the contract.", "body": "The require statements in the constructor of the FixedRateSwap contract are formatted differently than all of the other require statements in the contract.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-require-statements-in-the-constructor-of-the-fixedrateswap-contract-are-formatted-differently-than-all-of-the-other-require-statements-in-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "As inconsistently formatted revert messages can introduce unnecessary confusion, consider ensuring that all require statements have revert messages that are consistently formatted, accurate, informative, and user-friendly.", "body": "As inconsistently formatted revert messages can introduce unnecessary confusion, consider ensuring that all require statements have revert messages that are consistently formatted, accurate, informative, and user-friendly.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#as-inconsistently-formatted-revert-messages-can-introduce-unnecessary-confusion,-consider-ensuring-that-all-require-statements-have-revert-messages-that-are-consistently-formatted,-accurate,-informative,-and-user-friendly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 0aa4e9d.", "body": "Update: Fixed in commit 0aa4e9d.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-0aa4e9d.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Inconsistent use of named return variables", "body": "[N07] Inconsistent use of named return variables", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n07]-inconsistent-use-of-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables in the FixedRateSwap contract.", "body": "There is an inconsistent use of named return variables in the FixedRateSwap contract.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#there-is-an-inconsistent-use-of-named-return-variables-in-the-fixedrateswap-contract.", "labels": ["OpenZeppelin"]}, {"title": "Specifically, while most functions return named variables, the decimals, _getVirtualAmountsForDepositImpl, _getRealAmountsForWithdrawImpl, and _checkVirtualAmountsFormula functions return explicit values.", "body": "Specifically, while most functions return named variables, the decimals, _getVirtualAmountsForDepositImpl, _getRealAmountsForWithdrawImpl, and _checkVirtualAmountsFormula functions return explicit values.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#specifically,-while-most-functions-return-named-variables,-the-decimals,-_getvirtualamountsfordepositimpl,-_getrealamountsforwithdrawimpl,-and-_checkvirtualamountsformula-functions-return-explicit-values.", "labels": ["OpenZeppelin"]}, {"title": "Consider adopting a consistent approach to return values throughout the codebase by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "body": "Consider adopting a consistent approach to return values throughout the codebase by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#consider-adopting-a-consistent-approach-to-return-values-throughout-the-codebase-by-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-the-explicitness-and-readability-of-the-code,-and-it-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Gas optimizations", "body": "[N08] Gas optimizations", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n08]-gas-optimizations", "labels": ["OpenZeppelin"]}, {"title": "Within the FixedRateSwap contract, there are opportunities for a few simple gas consumption reductions. For instance:", "body": "Within the FixedRateSwap contract, there are opportunities for a few simple gas consumption reductions. For instance:", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#within-the-fixedrateswap-contract,-there-are-opportunities-for-a-few-simple-gas-consumption-reductions.-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "The _getVirtualAmountsForDeposit private function is only ever called from one place in the codebase, and that is the depositFor function. Within the depositFor function there are calls to token0.balanceOf(address(this)) and token1.balanceOf(address(this)). However, those exact same calls are made at the top of the _getVirtualAmountsForDeposit function. The latter function could simply be passed the required values, instead of reading the balances twice per depositFor call.", "body": "The _getVirtualAmountsForDeposit private function is only ever called from one place in the codebase, and that is the depositFor function. Within the depositFor function there are calls to token0.balanceOf(address(this)) and token1.balanceOf(address(this)). However, those exact same calls are made at the top of the _getVirtualAmountsForDeposit function. The latter function could simply be passed the required values, instead of reading the balances twice per depositFor call.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-_getvirtualamountsfordeposit-private-function-is-only-ever-called-from-one-place-in-the-codebase,-and-that-is-the-depositfor-function.-within-the-depositfor-function-there-are-calls-to-token0.balanceof(address(this))-and-token1.balanceof(address(this)).-however,-those-exact-same-calls-are-made-at-the-top-of-the-_getvirtualamountsfordeposit-function.-the-latter-function-could-simply-be-passed-the-required-values,-instead-of-reading-the-balances-twice-per-depositfor-call.", "labels": ["OpenZeppelin"]}, {"title": "Within the _getRealAmountsForWithdrawImpl private function, the secondTokenShare variable is defined as _ONE - firstTokenShare. On the very next line, the exact same subtraction is performed again when it could simply use the secondTokenShare variable.", "body": "Within the _getRealAmountsForWithdrawImpl private function, the secondTokenShare variable is defined as _ONE - firstTokenShare. On the very next line, the exact same subtraction is performed again when it could simply use the secondTokenShare variable.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#within-the-_getrealamountsforwithdrawimpl-private-function,-the-secondtokenshare-variable-is-defined-as-_one---firsttokenshare.-on-the-very-next-line,-the-exact-same-subtraction-is-performed-again-when-it-could-simply-use-the-secondtokenshare-variable.", "labels": ["OpenZeppelin"]}, {"title": "To reduce gas costs and further simplify the codebase, consider addressing the instances raised above.", "body": "To reduce gas costs and further simplify the codebase, consider addressing the instances raised above.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#to-reduce-gas-costs-and-further-simplify-the-codebase,-consider-addressing-the-instances-raised-above.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 34974ee.", "body": "Update: Fixed in commit 34974ee.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-34974ee.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Incorrect function visibility", "body": "[N09] Incorrect function visibility", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n09]-incorrect-function-visibility", "labels": ["OpenZeppelin"]}, {"title": "The withdrawWithRatio function is not called internally by any of the functions in the FixedRateSwap contract. Consider setting the visibility to external instead of public.", "body": "The withdrawWithRatio function is not called internally by any of the functions in the FixedRateSwap contract. Consider setting the visibility to external instead of public.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-withdrawwithratio-function-is-not-called-internally-by-any-of-the-functions-in-the-fixedrateswap-contract.-consider-setting-the-visibility-to-external-instead-of-public.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit cb852f5.", "body": "Update: Fixed in commit cb852f5.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-cb852f5.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Reliance on matching decimals may be problematic", "body": "[N10] Reliance on matching decimals may be problematic", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n10]-reliance-on-matching-decimals-may-be-problematic", "labels": ["OpenZeppelin"]}, {"title": "The protocol implicitly requires that both tokens inside of a pool support the decimals method for pool construction to be successful. In reality, this method is almost ubiquitous, but it is, technically, an optional component of the ERC20 specification wherein it is explicitly stated that contracts \u201cMUST NOT expect these values to be present\u201d. Currently, any tokens that do not support the optional decimals method will not be usable within the protocol.", "body": "The protocol implicitly requires that both tokens inside of a pool support the decimals method for pool construction to be successful. In reality, this method is almost ubiquitous, but it is, technically, an optional component of the ERC20 specification wherein it is explicitly stated that contracts \u201cMUST NOT expect these values to be present\u201d. Currently, any tokens that do not support the optional decimals method will not be usable within the protocol.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-protocol-implicitly-requires-that-both-tokens-inside-of-a-pool-support-the-decimals-method-for-pool-construction-to-be-successful.-in-reality,-this-method-is-almost-ubiquitous,-but-it-is,-technically,-an-optional-component-of-the-erc20-specification-wherein-it-is-explicitly-stated-that-contracts-\u201cmust-not-expect-these-values-to-be-present\u201d.-currently,-any-tokens-that-do-not-support-the-optional-decimals-method-will-not-be-usable-within-the-protocol.", "labels": ["OpenZeppelin"]}, {"title": "Perhaps more problematically, as part of these calls to token decimals, the protocol further requires that both tokens return identical values.", "body": "Perhaps more problematically, as part of these calls to token decimals, the protocol further requires that both tokens return identical values.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#perhaps-more-problematically,-as-part-of-these-calls-to-token-decimals,-the-protocol-further-requires-that-both-tokens-return-identical-values.", "labels": ["OpenZeppelin"]}, {"title": "However, the stable coin token space is not homogeneous in this regard. It is comprised of many tokens that return a variety of different values for decimals. For instance, while USDT and USDC report 6 decimals, DAI reports 18 decimals.", "body": "However, the stable coin token space is not homogeneous in this regard. It is comprised of many tokens that return a variety of different values for decimals. For instance, while USDT and USDC report 6 decimals, DAI reports 18 decimals.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#however,-the-stable-coin-token-space-is-not-homogeneous-in-this-regard.-it-is-comprised-of-many-tokens-that-return-a-variety-of-different-values-for-decimals.-for-instance,-while-usdt-and-usdc-report-6-decimals,-dai-reports-18-decimals.", "labels": ["OpenZeppelin"]}, {"title": "If these are intentional limitations of the protocol, consider touching on them explicitly and providing short justifications via the inline documentation. Also consider providing better error messages at construction time for tokens that do not support the decimals method. Alternatively, consider making the protocol more robust, so that it can handle tokens that do not support the decimals method or pairs reporting disparate decimals within the same pool.", "body": "If these are intentional limitations of the protocol, consider touching on them explicitly and providing short justifications via the inline documentation. Also consider providing better error messages at construction time for tokens that do not support the decimals method. Alternatively, consider making the protocol more robust, so that it can handle tokens that do not support the decimals method or pairs reporting disparate decimals within the same pool.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#if-these-are-intentional-limitations-of-the-protocol,-consider-touching-on-them-explicitly-and-providing-short-justifications-via-the-inline-documentation.-also-consider-providing-better-error-messages-at-construction-time-for-tokens-that-do-not-support-the-decimals-method.-alternatively,-consider-making-the-protocol-more-robust,-so-that-it-can-handle-tokens-that-do-not-support-the-decimals-method-or-pairs-reporting-disparate-decimals-within-the-same-pool.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit b49d808. Inline documentation was added.", "body": "Update: Fixed in commit b49d808. Inline documentation was added.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-b49d808.-inline-documentation-was-added.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Typographical error", "body": "[N11] Typographical error", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n11]-typographical-error", "labels": ["OpenZeppelin"]}, {"title": "We identified the following typographical error in the codebase:", "body": "We identified the following typographical error in the codebase:", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#we-identified-the-following-typographical-error-in-the-codebase:", "labels": ["OpenZeppelin"]}, {"title": "The revert message on line 92 of FixedRateSwap.sol starts without a capital letter, making it inconsistent with the rest of the code.", "body": "The revert message on line 92 of FixedRateSwap.sol starts without a capital letter, making it inconsistent with the rest of the code.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-revert-message-on-line-92-of-fixedrateswap.sol-starts-without-a-capital-letter,-making-it-inconsistent-with-the-rest-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "To improve the overall consistency and readability of the codebase, consider correcting this and any other typographical errors throughout the codebase.", "body": "To improve the overall consistency and readability of the codebase, consider correcting this and any other typographical errors throughout the codebase.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#to-improve-the-overall-consistency-and-readability-of-the-codebase,-consider-correcting-this-and-any-other-typographical-errors-throughout-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit a92d16a.", "body": "Update: Fixed in commit a92d16a.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-a92d16a.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Unnecessarily virtual function", "body": "[N12] Unnecessarily virtual function", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#[n12]-unnecessarily-virtual-function", "labels": ["OpenZeppelin"]}, {"title": "The FixedRateSwap contract inherits from OpenZeppelin\u2019s ERC20 contract but it overrides its ERC20.decimals function. This is required because the FixedRateSwap\u2018s liquidity pool token, being dependent on the decimals of the assets that comprise the pool, is necessarily dynamic.", "body": "The FixedRateSwap contract inherits from OpenZeppelin\u2019s ERC20 contract but it overrides its ERC20.decimals function. This is required because the FixedRateSwap\u2018s liquidity pool token, being dependent on the decimals of the assets that comprise the pool, is necessarily dynamic.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#the-fixedrateswap-contract-inherits-from-openzeppelin\u2019s-erc20-contract-but-it-overrides-its-erc20.decimals-function.-this-is-required-because-the-fixedrateswap\u2018s-liquidity-pool-token,-being-dependent-on-the-decimals-of-the-assets-that-comprise-the-pool,-is-necessarily-dynamic.", "labels": ["OpenZeppelin"]}, {"title": "However, even though this overriding implementation of the function should be final, it is defined with the virtual keyword, signaling that it is not necessarily a final implementation and allowing for it to be overridden again.", "body": "However, even though this overriding implementation of the function should be final, it is defined with the virtual keyword, signaling that it is not necessarily a final implementation and allowing for it to be overridden again.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#however,-even-though-this-overriding-implementation-of-the-function-should-be-final,-it-is-defined-with-the-virtual-keyword,-signaling-that-it-is-not-necessarily-a-final-implementation-and-allowing-for-it-to-be-overridden-again.", "labels": ["OpenZeppelin"]}, {"title": "To avoid confusion and clarify intent, consider removing the virtual keyword or documenting the reasons for keeping it.", "body": "To avoid confusion and clarify intent, consider removing the virtual keyword or documenting the reasons for keeping it.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#to-avoid-confusion-and-clarify-intent,-consider-removing-the-virtual-keyword-or-documenting-the-reasons-for-keeping-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 8bce5ec.", "body": "Update: Fixed in commit 8bce5ec.", "html_url": "https://blog.openzeppelin.com/1inch-fixed-rate-swap-audit#update:-fixed-in-commit-8bce5ec.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Change bond token", "body": "[N01] Change bond token", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n01]-change-bond-token", "labels": ["OpenZeppelin"]}, {"title": "The Proposer contract includes a mechanism for the owner to change the size of the proposal bond. Consider whether they should also be able to change the bond token. Note that this would require a mechanism to identify the correct bond currency when existing proposals are resolved.", "body": "The Proposer contract includes a mechanism for the owner to change the size of the proposal bond. Consider whether they should also be able to change the bond token. Note that this would require a mechanism to identify the correct bond currency when existing proposals are resolved.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-proposer-contract-includes-a-mechanism-for-the-owner-to-change-the-size-of-the-proposal-bond.-consider-whether-they-should-also-be-able-to-change-the-bond-token.-note-that-this-would-require-a-mechanism-to-identify-the-correct-bond-currency-when-existing-proposals-are-resolved.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. UMA\u2019s statement for this issue:", "body": "Update: Not an issue. UMA\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-not-an-issue.-uma\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "N01 recommends enabling the proposer contract to change the bond token to something other than UMA. We have no intention of supporting any token other than $UMA for this function and so have chosen to not make any changes for this issue. Moreover, a single token per contract keeps this logic as simple as possible. Lastly, If a change was needed (in the case of a token migration, for instance), we could just deploy a new proposer contract with the other token and initiate a proposal to migrate the system to use that one.", "body": "N01 recommends enabling the proposer contract to change the bond token to something other than UMA. We have no intention of supporting any token other than $UMA for this function and so have chosen to not make any changes for this issue. Moreover, a single token per contract keeps this logic as simple as possible. Lastly, If a change was needed (in the case of a token migration, for instance), we could just deploy a new proposer contract with the other token and initiate a proposal to migrate the system to use that one.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#n01-recommends-enabling-the-proposer-contract-to-change-the-bond-token-to-something-other-than-uma.-we-have-no-intention-of-supporting-any-token-other-than-$uma-for-this-function-and-so-have-chosen-to-not-make-any-changes-for-this-issue.-moreover,-a-single-token-per-contract-keeps-this-logic-as-simple-as-possible.-lastly,-if-a-change-was-needed-(in-the-case-of-a-token-migration,-for-instance),-we-could-just-deploy-a-new-proposer-contract-with-the-other-token-and-initiate-a-proposal-to-migrate-the-system-to-use-that-one.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Incomplete interface", "body": "[N02] Incomplete interface", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n02]-incomplete-interface", "labels": ["OpenZeppelin"]}, {"title": "The ChildMessengerInterface does not specify a processMessageFromCrossChainParent function, even though it is assumed to exist by parent messengers. Consider including it for completeness.", "body": "The ChildMessengerInterface does not specify a processMessageFromCrossChainParent function, even though it is assumed to exist by parent messengers. Consider including it for completeness.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-childmessengerinterface-does-not-specify-a-processmessagefromcrosschainparent-function,-even-though-it-is-assumed-to-exist-by-parent-messengers.-consider-including-it-for-completeness.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. UMA\u2019s statement for this issue:", "body": "Update: Not fixed. UMA\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-not-fixed.-uma\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We intentionally chose to leave this interface inconsistent as implementing this within the ChildMessengerInterface breaks compatibility with the Polygon_ChildMessenger as Polygon\u2019s method for processing messages from other chains requires somewhat custom logic wherein an internal method is called called _processMessageFromRoot.", "body": "We intentionally chose to leave this interface inconsistent as implementing this within the ChildMessengerInterface breaks compatibility with the Polygon_ChildMessenger as Polygon\u2019s method for processing messages from other chains requires somewhat custom logic wherein an internal method is called called _processMessageFromRoot.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#we-intentionally-chose-to-leave-this-interface-inconsistent-as-implementing-this-within-the-childmessengerinterface-breaks-compatibility-with-the-polygon_childmessenger-as-polygon\u2019s-method-for-processing-messages-from-other-chains-requires-somewhat-custom-logic-wherein-an-internal-method-is-called-called-_processmessagefromroot.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Incorrect interface", "body": "[N03] Incorrect interface", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n03]-incorrect-interface", "labels": ["OpenZeppelin"]}, {"title": "The GovernorSpoke contract incorrectly uses the ChildMessengerConsumerInterface type to describe its messenger variable. Consider using the ChildMessengerInterface instead.", "body": "The GovernorSpoke contract incorrectly uses the ChildMessengerConsumerInterface type to describe its messenger variable. Consider using the ChildMessengerInterface instead.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-governorspoke-contract-incorrectly-uses-the-childmessengerconsumerinterface-type-to-describe-its-messenger-variable.-consider-using-the-childmessengerinterface-instead.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit f31a527 in PR3680.", "body": "Update: Fixed as of commit f31a527 in PR3680.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-fixed-as-of-commit-f31a527-in-pr3680.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Pull tokens to Store", "body": "[N04] Pull tokens to Store", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n04]-pull-tokens-to-store", "labels": ["OpenZeppelin"]}, {"title": "previous audit we questioned the purpose of the", "body": "previous audit we questioned the purpose of the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#previous-audit-we-questioned-the-purpose-of-the", "labels": ["OpenZeppelin"]}, {"title": "payOracleFeesErc20 function (in issue L19). The UMA team", "body": "payOracleFeesErc20 function (in issue L19). The UMA team", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#payoraclefeeserc20-function-(in-issue-l19).-the-uma-team", "labels": ["OpenZeppelin"]}, {"title": "opted to keep the function to standardized the interface for potential future modifications. Since the purpose of the function is not fully specified, it is unclear whether it should be triggered when the", "body": "opted to keep the function to standardized the interface for potential future modifications. Since the purpose of the function is not fully specified, it is unclear whether it should be triggered when the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#opted-to-keep-the-function-to-standardized-the-interface-for-potential-future-modifications.-since-the-purpose-of-the-function-is-not-fully-specified,-it-is-unclear-whether-it-should-be-triggered-when-the", "labels": ["OpenZeppelin"]}, {"title": "confiscates a bond. It likely should be used when the", "body": "confiscates a bond. It likely should be used when the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#confiscates-a-bond.-it-likely-should-be-used-when-the", "labels": ["OpenZeppelin"]}, {"title": "pays for a price request. Consider whether the function should be used in either scenario.", "body": "pays for a price request. Consider whether the function should be used in either scenario.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#pays-for-a-price-request.-consider-whether-the-function-should-be-used-in-either-scenario.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. UMA\u2019s statement for this issue:", "body": "Update: Acknowledged. UMA\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-acknowledged.-uma\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "N04 recommends using the Store\u2019s payOracleFeeErc20 method for paying fees in both the Proposer and OracleHub contracts to be consistent with the Store usage. We\u2019ve opted to not use this function as it would mean needing to import an additional interface (for the store) and require casting of the bond amount to a FixedPoint (which would also require an additional import. To keep the code simple and clean we\u2019ve opted to not do this. The OZ feedback on payOracleFeeErc20 in audit phase 1 in April 2020 was valid that this method is not really useful, making this kind of integration harder to reason about.", "body": "N04 recommends using the Store\u2019s payOracleFeeErc20 method for paying fees in both the Proposer and OracleHub contracts to be consistent with the Store usage. We\u2019ve opted to not use this function as it would mean needing to import an additional interface (for the store) and require casting of the bond amount to a FixedPoint (which would also require an additional import. To keep the code simple and clean we\u2019ve opted to not do this. The OZ feedback on payOracleFeeErc20 in audit phase 1 in April 2020 was valid that this method is not really useful, making this kind of integration harder to reason about.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#n04-recommends-using-the-store\u2019s-payoraclefeeerc20-method-for-paying-fees-in-both-the-proposer-and-oraclehub-contracts-to-be-consistent-with-the-store-usage.-we\u2019ve-opted-to-not-use-this-function-as-it-would-mean-needing-to-import-an-additional-interface-(for-the-store)-and-require-casting-of-the-bond-amount-to-a-fixedpoint-(which-would-also-require-an-additional-import.-to-keep-the-code-simple-and-clean-we\u2019ve-opted-to-not-do-this.-the-oz-feedback-on-payoraclefeeerc20-in-audit-phase-1-in-april-2020-was-valid-that-this-method-is-not-really-useful,-making-this-kind-of-integration-harder-to-reason-about.", "labels": ["OpenZeppelin"]}, {"title": "[N05] TODOs in code", "body": "[N05] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n05]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For example:", "body": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For example:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-tracked-in-the-project\u2019s-issues-backlog.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "Line 37 of Arbitrum_ParentMessenger contract", "body": "Line 37 of Arbitrum_ParentMessenger contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#line-37-of-arbitrum_parentmessenger-contract", "labels": ["OpenZeppelin"]}, {"title": "Line 25 of Optimism_ChildMessenger contract", "body": "Line 25 of Optimism_ChildMessenger contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#line-25-of-optimism_childmessenger-contract", "labels": ["OpenZeppelin"]}, {"title": "Lines 83 and 146 of OracleHub contract.", "body": "Lines 83 and 146 of OracleHub contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#lines-83-and-146-of-oraclehub-contract.", "labels": ["OpenZeppelin"]}, {"title": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "body": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#during-development,-having-well-described-\u201ctodo\u201d-comments-will-make-the-process-of-tracking-and-solving-them-easier.-without-that-information,-these-comments-might-tend-to-rot-and-important-information-for-the-security-of-the-system-might-be-forgotten-by-the-time-it-is-released-to-production.", "labels": ["OpenZeppelin"]}, {"title": "These TODO comments should have a brief description of the task pending to do, and a link to the corresponding issue in the project repository.", "body": "These TODO comments should have a brief description of the task pending to do, and a link to the corresponding issue in the project repository.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#these-todo-comments-should-have-a-brief-description-of-the-task-pending-to-do,-and-a-link-to-the-corresponding-issue-in-the-project-repository.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the TODO comments to add this information. For completeness and traceability, a signature and a timestamp can be added. For example:", "body": "Consider updating the TODO comments to add this information. For completeness and traceability, a signature and a timestamp can be added. For example:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#consider-updating-the-todo-comments-to-add-this-information.-for-completeness-and-traceability,-a-signature-and-a-timestamp-can-be-added.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "// TODO: point this at an interface instead.", "body": "// TODO: point this at an interface instead.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#//-todo:-point-this-at-an-interface-instead.", "labels": ["OpenZeppelin"]}, {"title": "// https://github.com/UMAprotocol/protocol/issues/XXXX", "body": "// https://github.com/UMAprotocol/protocol/issues/XXXX", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#//-https://github.com/umaprotocol/protocol/issues/xxxx", "labels": ["OpenZeppelin"]}, {"title": "// --mrice32 - 20211209", "body": "// --mrice32 - 20211209", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#//---mrice32---20211209", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 5d57b5b in PR3684.", "body": "Update: Fixed as of commit 5d57b5b in PR3684.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-fixed-as-of-commit-5d57b5b-in-pr3684.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Typographical errors", "body": "[N06] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n06]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typographical errors:", "body": "The codebase contains the following typographical errors:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-codebase-contains-the-following-typographical-errors:", "labels": ["OpenZeppelin"]}, {"title": "In the Admin_ChildMessenger contract, impleenting should be implementing", "body": "In the Admin_ChildMessenger contract, impleenting should be implementing", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#in-the-admin_childmessenger-contract,-impleenting-should-be-implementing", "labels": ["OpenZeppelin"]}, {"title": "In the OptimisticRewarderBase contract, timestap should be timestamp.", "body": "In the OptimisticRewarderBase contract, timestap should be timestamp.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#in-the-optimisticrewarderbase-contract,-timestap-should-be-timestamp.", "labels": ["OpenZeppelin"]}, {"title": "In the OptimisticRewarderBase contract, liveness liveness should be liveness.", "body": "In the OptimisticRewarderBase contract, liveness liveness should be liveness.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#in-the-optimisticrewarderbase-contract,-liveness-liveness-should-be-liveness.", "labels": ["OpenZeppelin"]}, {"title": "In the GovernorSpoke contract, only called should be only be called.", "body": "In the GovernorSpoke contract, only called should be only be called.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#in-the-governorspoke-contract,-only-called-should-be-only-be-called.", "labels": ["OpenZeppelin"]}, {"title": "In the Optimism_ChildMessenger contract:", "body": "In the Optimism_ChildMessenger contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#in-the-optimism_childmessenger-contract:", "labels": ["OpenZeppelin"]}, {"title": "onlyCrossDomainAccount should be onlyFromCrossDomainAccount.", "body": "onlyCrossDomainAccount should be onlyFromCrossDomainAccount.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#onlycrossdomainaccount-should-be-onlyfromcrossdomainaccount.", "labels": ["OpenZeppelin"]}, {"title": "addresses on the L1 should be addresses on the L2", "body": "addresses on the L1 should be addresses on the L2", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#addresses-on-the-l1-should-be-addresses-on-the-l2", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 9b92b0b in PR3681.", "body": "Update: Fixed as of commit 9b92b0b in PR3681.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-fixed-as-of-commit-9b92b0b-in-pr3681.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unused imports", "body": "[N07] Unused imports", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n07]-unused-imports", "labels": ["OpenZeppelin"]}, {"title": "To improve readability of the code, consider removing the following unused imports:", "body": "To improve readability of the code, consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#to-improve-readability-of-the-code,-consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "The OptimisticRewarderToken contract imports unused OptimisticRewarder contract", "body": "The OptimisticRewarderToken contract imports unused OptimisticRewarder contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-optimisticrewardertoken-contract-imports-unused-optimisticrewarder-contract", "labels": ["OpenZeppelin"]}, {"title": "The OptimisticRewarderCreator contract imports unused ERC721 and Testable contracts", "body": "The OptimisticRewarderCreator contract imports unused ERC721 and Testable contracts", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-optimisticrewardercreator-contract-imports-unused-erc721-and-testable-contracts", "labels": ["OpenZeppelin"]}, {"title": "the OptimisticStaker contract imports usused OptimisticRewarder and OptimisticRewarderToken contracts", "body": "the OptimisticStaker contract imports usused OptimisticRewarder and OptimisticRewarderToken contracts", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-optimisticstaker-contract-imports-usused-optimisticrewarder-and-optimisticrewardertoken-contracts", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 40b7221 in PR3682.", "body": "Update: Fixed as of commit 40b7221 in PR3682.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-fixed-as-of-commit-40b7221-in-pr3682.", "labels": ["OpenZeppelin"]}, {"title": "[N08] L2 transaction ordering", "body": "[N08] L2 transaction ordering", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#[n08]-l2-transaction-ordering", "labels": ["OpenZeppelin"]}, {"title": "The Governor ensures transactions within a proposal are executed in order. However, when those transactions involve cross-chain transactions, this merely guarantees that they arrive at the L1 bridge contract in the correct order. In the Arbitrum case, they may be reordered before they are finalized on L2. Therefore, governance proposals should be constructed to permit the possibility of reordered L2 transactions.", "body": "The Governor ensures transactions within a proposal are executed in order. However, when those transactions involve cross-chain transactions, this merely guarantees that they arrive at the L1 bridge contract in the correct order. In the Arbitrum case, they may be reordered before they are finalized on L2. Therefore, governance proposals should be constructed to permit the possibility of reordered L2 transactions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#the-governor-ensures-transactions-within-a-proposal-are-executed-in-order.-however,-when-those-transactions-involve-cross-chain-transactions,-this-merely-guarantees-that-they-arrive-at-the-l1-bridge-contract-in-the-correct-order.-in-the-arbitrum-case,-they-may-be-reordered-before-they-are-finalized-on-l2.-therefore,-governance-proposals-should-be-constructed-to-permit-the-possibility-of-reordered-l2-transactions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 0fb2e7b in PR3703. The GovernorHub can now relay an array of L2 transactions.", "body": "Update: Fixed as of commit 0fb2e7b in PR3703. The GovernorHub can now relay an array of L2 transactions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-6#update:-fixed-as-of-commit-0fb2e7b-in-pr3703.-the-governorhub-can-now-relay-an-array-of-l2-transactions.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Not importing interfaces", "body": "[N01] Not importing interfaces", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n01]-not-importing-interfaces", "labels": ["OpenZeppelin"]}, {"title": "The AggregatorInterface interface appears to be a subset of code copied from ChainLink\u2018s public code repository. The full interface is included in ChainLink\u2018s contract npm package.", "body": "The AggregatorInterface interface appears to be a subset of code copied from ChainLink\u2018s public code repository. The full interface is included in ChainLink\u2018s contract npm package.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-aggregatorinterface-interface-appears-to-be-a-subset-of-code-copied-from-chainlink\u2018s-public-code-repository.-the-full-interface-is-included-in-chainlink\u2018s-contract-npm-package.", "labels": ["OpenZeppelin"]}, {"title": "When possible, to lessen the potential for interface mismatches and resultant issues, rather than re-defining and/or rewriting another project\u2019s interfaces, consider using interfaces installed via their official npm packages instead.", "body": "When possible, to lessen the potential for interface mismatches and resultant issues, rather than re-defining and/or rewriting another project\u2019s interfaces, consider using interfaces installed via their official npm packages instead.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#when-possible,-to-lessen-the-potential-for-interface-mismatches-and-resultant-issues,-rather-than-re-defining-and/or-rewriting-another-project\u2019s-interfaces,-consider-using-interfaces-installed-via-their-official-npm-packages-instead.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #66.", "body": "Update: Fixed in pull request #66.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#66.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Deprecated project dependencies", "body": "[N02] Deprecated project dependencies", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n02]-deprecated-project-dependencies", "labels": ["OpenZeppelin"]}, {"title": "During the installation of the project\u2019s dependencies, NPM warns that one of the packages installed, Highlight, \u201cwill no longer be supported or receive security updates in the future\u201d.", "body": "During the installation of the project\u2019s dependencies, NPM warns that one of the packages installed, Highlight, \u201cwill no longer be supported or receive security updates in the future\u201d.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#during-the-installation-of-the-project\u2019s-dependencies,-npm-warns-that-one-of-the-packages-installed,-highlight,-\u201cwill-no-longer-be-supported-or-receive-security-updates-in-the-future\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.", "body": "Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#even-though-it-is-unlikely-that-this-package-could-cause-a-security-risk,-consider-upgrading-the-dependency-that-uses-this-package-to-a-maintained-version.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #64.", "body": "Update: Fixed in pull request #64.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#64.", "labels": ["OpenZeppelin"]}, {"title": "[N03] External calls to view methods are not staticcalls", "body": "[N03] External calls to view methods are not staticcalls", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n03]-external-calls-to-view-methods-are-not-staticcalls", "labels": ["OpenZeppelin"]}, {"title": "ChainlinkCalculator contract, despite the intention of making external calls only to", "body": "ChainlinkCalculator contract, despite the intention of making external calls only to", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#chainlinkcalculator-contract,-despite-the-intention-of-making-external-calls-only-to", "labels": ["OpenZeppelin"]}, {"title": "singlePrice and", "body": "doublePrice functions are not made via explicit  While we did not identify any immediate security concerns stemming from this, to reduce the attack surface, improve consistency, and clarify intent, consider using explicit staticcalls, for all external calls to view functions in the ChainlinkCalculator contract.  Update: Not fixed. The 1inch team states:  We think that syntax complication nullifies improvements in consistency.  [N04] Not failing early with invalid orders  In the OrderMixin contract, the fillOrderTo function handles the special condition when an order has not been previously submitted (remainingMakerAmount == 0), but it does not explicitly handle the condition when the order is no longer valid (remainingMakerAmount == 1).  In the latter scenario, the function will eventually revert, but only after burning non-trivial amounts of gas. To clarify intent, increase readability, and reduce gas usage, consider explicitly handling the invalid-order scenario towards the beginning of the function.  Update: Fixed in pull request #68.  [N05] Helper contracts not marked as abstract  In Solidity, the keyword abstract is used for contracts that are either not functional contracts in their own right, or are not meant to be used as such. Instead, abstract contracts are inherited by other contracts in the system to create stand-alone functional contracts.  Throughout the codebase, there are examples of helper contracts that are not marked as abstract, despite the fact that they are not meant to be deployed on their own. For instance, the AmountCalculator, ChainlinkCalculator, ImmutableOwner, NonceManager, and PredicateHelper contracts are all comprised of a base set of functions which are intended to be used by inheriting contracts.  Consider marking helper contracts as abstract to clearly signify that they are designed solely to add functionality to contracts that inherit them.  Update: Not fixed. The 1inch team states:  Those helpers can be deployed separately. They are inherited only for gas savings.  [N06] Inconsistent function ordering  recommended order in the Solidity Style Guide, which is:  However, in the the OrderMixin contract, the public checkPredicate function deviates from the style guide, bisecting the external functions.  To improve the projects overall legibility, consider standardizing function ordering throughout the codebase, as recommended by the Solidity Style Guide.  Update: Fixed in pull request #69.  [N07] Inconsistent order fill flow  The OrderMixin and RFQOrderMixin contracts both handle the filling of signed orders, but the general order flow between the two contracts is inconsistent.  OrderMixins fillOrderTo function follows this general flow (pseudo-code):  Whereas RFQOrderMixins analogous fillOrderRFQTo function follows this flow (pseudo-code):  To clarify intent and increase the overall readability of the code, consider either standardizing the general order flow across these two contracts, or explicitly documenting why the differences exist.  Update: Not fixed. The 1inch team states:  This is due to custom pricing functions in limit orders. Since getMakerAmount can potentially substantially differ from getTakerAmount, we thought that it is better not to make default option for the taker as itll probably confuse them in cases when those getters will be different.  [N08] Error messages are inconsistently formatted or misleading  Throughout the codebase, the require and revert error messages, which are meant to notify users of the particular conditions causing a transaction to fail, were found to be inconsistently formatted.  For instance, each one of the error messages on lines 85 of OrderMixin.sol, 16 of ERC721ProxySafe.sol, and 26 of Permitable.sol employ a different style.  Additionally, some error messages are misleading:  LOP: one of amounts should be 0 should be at least one of the amounts should be 0, since either or both amounts can be zero.  LOP: only one amount should be 0 should be LOP: one, and only one, amount should be 0.  Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Moreover, inconsistently formatted error messages can introduce unnecessary confusion. Therefore, consider reviewing the entire codebase to make sure every require and revert statement has an error message that is consistently formatted, accurate, informative, and user-friendly.  Update: Partially fixed in pull request #81.  [N09] Inconsistent use of named return variables  There is an inconsistent use of named return variables in the OrderMixin contract. Some functions return named variables, others return explicit values, and others declare a named return variable but override it with an explicit return statement.  Consider adopting a consistent approach to ", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#singleprice-and", "labels": ["OpenZeppelin"]}, {"title": "doublePrice functions are not made via explicit", "body": "doublePrice functions are not made via explicit", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#doubleprice-functions-are-not-made-via-explicit", "labels": ["OpenZeppelin"]}, {"title": "While we did not identify any immediate security concerns stemming from this, to reduce the attack surface, improve consistency, and clarify intent, consider using explicit staticcalls, for all external calls to view functions in the ChainlinkCalculator contract.", "body": "While we did not identify any immediate security concerns stemming from this, to reduce the attack surface, improve consistency, and clarify intent, consider using explicit staticcalls, for all external calls to view functions in the ChainlinkCalculator contract.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#while-we-did-not-identify-any-immediate-security-concerns-stemming-from-this,-to-reduce-the-attack-surface,-improve-consistency,-and-clarify-intent,-consider-using-explicit-staticcalls,-for-all-external-calls-to-view-functions-in-the-chainlinkcalculator-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. The 1inch team states:", "body": "We handle that on our backend and well think about the ways to notify possible takers about the issue.  [L12] Rounding can be unfavorable for taker  In the OrderMixin and OrderRFQMixin contracts, when an order is being filled and the taker provides only a makingAmount or takingAmount amount, the protocol attempts to calculate the counterpart amount of the swap.  There are two issues with these calculations, the first being that there is no documentation or logic limiting the number of decimals that the amount parameters should use, which we addressed in the Undocumented decimal assumptions issue.The second issue is that, in the course of these calculations, the protocol rounds in the favor of the maker. The rounding issue can be greatly exacerbated when the implicit decimal assumptions are broken, but even when everything is in the expected terms, rounding will occur with small, odd amounts.  Consider allowing the taker to specify a minimum amount of makerAsset asset that they are willing to receive together with a maximum amount of takerAsset asset they are willing to swap, so that the acceptance of any rounding is more explicit.    Threshold amount should be enough for takers protection.  [L13] Contradictory order handling when lacking parameters  OrderMixin contract, the  fillOrderTo function makes internal calls to the  _callGetMakerAmount and  _callGetTakerAmount functions whenever a fill is attempted and either the  makingAmount or the  takingAmount parameters are zero, respectively, or if the  makingAmount value is larger than the remainingMakerAmount value.  The _callGetMakerAmount and _callGetTakerAmount calls will lead to reversions if the order was not created with the getMakerAmount or getTakerAmount parameters, respectively, and a partial fill is being executed.  An inline comment alongside _callGetMakerAmount and an inline comment alongside _callGetTakerAmount claim that only whole fills are allowed if the order was not created with getMakerAmount or getTakerAmount parameters.  However, there are code paths for which this does not apply, because those paths do not check the lengths of both getMakerAmount and getTakerAmount parameters.  Specifically, when a taker specifies a takerAmount value for an order which only has a getMakerAmount, unless that call to getMakerAmount returns an amount larger than remainingMakerAmount, a partial fill can be executed in contradiction to the inline documentation.  This leaves the intentionality of those code paths unclear. If this is the expected behavior, consider modifying the inline documentation so that it is more explicit. If this is unintentional behavior, consider always checking the lengths of both the getMakerAmount and the getTakerAmount parameters simultaneously so that the implementation reinforces the behavior described by the inline documentation.  Update: Fixed in pull request #79.  [L14] Using deprecated Chainlink calls  The ChainlinkCalculator contract is intended to be used to query Chainlink oracles. It does so via making calls to their latestTimestamp and latestAnswer methods, both of which have been deprecated. In fact, the methods are no longer present in the API of Chainlink aggregators as of version three.  To avoid potential future incompatibilities with Chainlink oracles, consider using the latestRoundData method instead.  Update: Fixed in pull request #67.  Notes & Additional Information  [N01] Not importing interfaces  The AggregatorInterface interface appears to be a subset of code copied from ChainLinks public code repository. The full interface is included in ChainLinks contract npm package.  When possible, to lessen the potential for interface mismatches and resultant issues, rather than re-defining and/or rewriting another projects interfaces, consider using interfaces installed via their official npm packages instead.  Update: Fixed in pull request #66.  [N02] Deprecated project dependencies  During the installation of the projects dependencies, NPM warns that one of the packages installed, Highlight, will no longer be supported or receive security updates in the future.  Even though it is unlikely that this package could cause a security risk, consider upgrading the dependency that uses this package to a maintained version.  Update: Fixed in pull request #64.  [N03] External calls to view methods are not staticcalls  ChainlinkCalculator contract, despite the intention of making external calls only to  singlePrice and  doublePrice functions are not made via explicit  While we did not identify any immediate security concerns stemming from this, to reduce the attack surface, improve consistency, and clarify intent, consider using explicit staticcalls, for all external calls to view functions in the ChainlinkCalculator contract.    We think that syntax complication nullifies improvements in consistency.  [N04] Not failing early with invalid orders  In the OrderMixin contract, the fillOrderTo function handles the special conditio", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-not-fixed.-the-1inch-team-states:", "labels": ["OpenZeppelin"]}, {"title": "We think that syntax complication nullifies improvements in consistency.", "body": "We think that syntax complication nullifies improvements in consistency.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#we-think-that-syntax-complication-nullifies-improvements-in-consistency.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Not failing early with invalid orders", "body": "[N04] Not failing early with invalid orders", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n04]-not-failing-early-with-invalid-orders", "labels": ["OpenZeppelin"]}, {"title": "In the OrderMixin contract, the fillOrderTo function handles the special condition when an order has not been previously submitted (remainingMakerAmount == 0), but it does not explicitly handle the condition when the order is no longer valid (remainingMakerAmount == 1).", "body": "In the OrderMixin contract, the fillOrderTo function handles the special condition when an order has not been previously submitted (remainingMakerAmount == 0), but it does not explicitly handle the condition when the order is no longer valid (remainingMakerAmount == 1).", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#in-the-ordermixin-contract,-the-fillorderto-function-handles-the-special-condition-when-an-order-has-not-been-previously-submitted-(remainingmakeramount-==-0),-but-it-does-not-explicitly-handle-the-condition-when-the-order-is-no-longer-valid-(remainingmakeramount-==-1).", "labels": ["OpenZeppelin"]}, {"title": "In the latter scenario, the function will eventually revert, but only after burning non-trivial amounts of gas. To clarify intent, increase readability, and reduce gas usage, consider explicitly handling the invalid-order scenario towards the beginning of the function.", "body": "In the latter scenario, the function will eventually revert, but only after burning non-trivial amounts of gas. To clarify intent, increase readability, and reduce gas usage, consider explicitly handling the invalid-order scenario towards the beginning of the function.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#in-the-latter-scenario,-the-function-will-eventually-revert,-but-only-after-burning-non-trivial-amounts-of-gas.-to-clarify-intent,-increase-readability,-and-reduce-gas-usage,-consider-explicitly-handling-the-invalid-order-scenario-towards-the-beginning-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #68.", "body": "Update: Fixed in pull request #68.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#68.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Helper contracts not marked as abstract", "body": "[N05] Helper contracts not marked as abstract", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n05]-helper-contracts-not-marked-as-abstract", "labels": ["OpenZeppelin"]}, {"title": "In Solidity, the keyword abstract is used for contracts that are either not functional contracts in their own right, or are not meant to be used as such. Instead, abstract contracts are inherited by other contracts in the system to create stand-alone functional contracts.", "body": "In Solidity, the keyword abstract is used for contracts that are either not functional contracts in their own right, or are not meant to be used as such. Instead, abstract contracts are inherited by other contracts in the system to create stand-alone functional contracts.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#in-solidity,-the-keyword-abstract-is-used-for-contracts-that-are-either-not-functional-contracts-in-their-own-right,-or-are-not-meant-to-be-used-as-such.-instead,-abstract-contracts-are-inherited-by-other-contracts-in-the-system-to-create-stand-alone-functional-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are examples of helper contracts that are not marked as abstract, despite the fact that they are not meant to be deployed on their own. For instance, the AmountCalculator, ChainlinkCalculator, ImmutableOwner, NonceManager, and PredicateHelper contracts are all comprised of a base set of functions which are intended to be used by inheriting contracts.", "body": "Throughout the codebase, there are examples of helper contracts that are not marked as abstract, despite the fact that they are not meant to be deployed on their own. For instance, the AmountCalculator, ChainlinkCalculator, ImmutableOwner, NonceManager, and PredicateHelper contracts are all comprised of a base set of functions which are intended to be used by inheriting contracts.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#throughout-the-codebase,-there-are-examples-of-helper-contracts-that-are-not-marked-as-abstract,-despite-the-fact-that-they-are-not-meant-to-be-deployed-on-their-own.-for-instance,-the-amountcalculator,-chainlinkcalculator,-immutableowner,-noncemanager,-and-predicatehelper-contracts-are-all-comprised-of-a-base-set-of-functions-which-are-intended-to-be-used-by-inheriting-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Consider marking helper contracts as abstract to clearly signify that they are designed solely to add functionality to contracts that inherit them.", "body": "Consider marking helper contracts as abstract to clearly signify that they are designed solely to add functionality to contracts that inherit them.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#consider-marking-helper-contracts-as-abstract-to-clearly-signify-that-they-are-designed-solely-to-add-functionality-to-contracts-that-inherit-them.", "labels": ["OpenZeppelin"]}, {"title": "Those helpers can be deployed separately. They are inherited only for gas savings.", "body": "Those helpers can be deployed separately. They are inherited only for gas savings.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#those-helpers-can-be-deployed-separately.-they-are-inherited-only-for-gas-savings.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistent function ordering", "body": "[N06] Inconsistent function ordering", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n06]-inconsistent-function-ordering", "labels": ["OpenZeppelin"]}, {"title": "recommended order in the Solidity Style Guide, which is:", "body": "recommended order in the Solidity Style Guide, which is:", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#recommended-order-in-the-solidity-style-guide,-which-is:", "labels": ["OpenZeppelin"]}, {"title": "However, in the the OrderMixin contract, the public checkPredicate function deviates from the style guide, bisecting the external functions.", "body": "However, in the the OrderMixin contract, the public checkPredicate function deviates from the style guide, bisecting the external functions.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#however,-in-the-the-ordermixin-contract,-the-public-checkpredicate-function-deviates-from-the-style-guide,-bisecting-the-external-functions.", "labels": ["OpenZeppelin"]}, {"title": "To improve the project\u2019s overall legibility, consider standardizing function ordering throughout the codebase, as recommended by the Solidity Style Guide.", "body": "To improve the project\u2019s overall legibility, consider standardizing function ordering throughout the codebase, as recommended by the Solidity Style Guide.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#to-improve-the-project\u2019s-overall-legibility,-consider-standardizing-function-ordering-throughout-the-codebase,-as-recommended-by-the-solidity-style-guide.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #69.", "body": "Update: Fixed in pull request #69.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#69.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Inconsistent order fill flow", "body": "[N07] Inconsistent order fill flow", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n07]-inconsistent-order-fill-flow", "labels": ["OpenZeppelin"]}, {"title": "The OrderMixin and RFQOrderMixin contracts both handle the filling of signed orders, but the general order flow between the two contracts is inconsistent.", "body": "The OrderMixin and RFQOrderMixin contracts both handle the filling of signed orders, but the general order flow between the two contracts is inconsistent.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-ordermixin-and-rfqordermixin-contracts-both-handle-the-filling-of-signed-orders,-but-the-general-order-flow-between-the-two-contracts-is-inconsistent.", "labels": ["OpenZeppelin"]}, {"title": "OrderMixin\u2018s fillOrderTo function follows this general flow (pseudo-code):", "body": "OrderMixin\u2018s fillOrderTo function follows this general flow (pseudo-code):", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#ordermixin\u2018s-fillorderto-function-follows-this-general-flow-(pseudo-code):", "labels": ["OpenZeppelin"]}, {"title": "Whereas RFQOrderMixin\u2018s analogous fillOrderRFQTo function follows this flow (pseudo-code):", "body": "Whereas RFQOrderMixin\u2018s analogous fillOrderRFQTo function follows this flow (pseudo-code):", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#whereas-rfqordermixin\u2018s-analogous-fillorderrfqto-function-follows-this-flow-(pseudo-code):", "labels": ["OpenZeppelin"]}, {"title": "To clarify intent and increase the overall readability of the code, consider either standardizing the general order flow across these two contracts, or explicitly documenting why the differences exist.", "body": "To clarify intent and increase the overall readability of the code, consider either standardizing the general order flow across these two contracts, or explicitly documenting why the differences exist.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#to-clarify-intent-and-increase-the-overall-readability-of-the-code,-consider-either-standardizing-the-general-order-flow-across-these-two-contracts,-or-explicitly-documenting-why-the-differences-exist.", "labels": ["OpenZeppelin"]}, {"title": "This is due to custom pricing functions in limit orders. Since getMakerAmount can potentially substantially differ from getTakerAmount, we thought that it is better not to make default option for the taker as it\u2019ll probably confuse them in cases when those getters will be different.", "body": "This is due to custom pricing functions in limit orders. Since getMakerAmount can potentially substantially differ from getTakerAmount, we thought that it is better not to make default option for the taker as it\u2019ll probably confuse them in cases when those getters will be different.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#this-is-due-to-custom-pricing-functions-in-limit-orders.-since-getmakeramount-can-potentially-substantially-differ-from-gettakeramount,-we-thought-that-it-is-better-not-to-make-default-option-for-the-taker-as-it\u2019ll-probably-confuse-them-in-cases-when-those-getters-will-be-different.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Error messages are inconsistently formatted or misleading", "body": "[N08] Error messages are inconsistently formatted or misleading", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n08]-error-messages-are-inconsistently-formatted-or-misleading", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, the require and revert error messages, which are meant to notify users of the particular conditions causing a transaction to fail, were found to be inconsistently formatted.", "body": "Throughout the codebase, the require and revert error messages, which are meant to notify users of the particular conditions causing a transaction to fail, were found to be inconsistently formatted.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#throughout-the-codebase,-the-require-and-revert-error-messages,-which-are-meant-to-notify-users-of-the-particular-conditions-causing-a-transaction-to-fail,-were-found-to-be-inconsistently-formatted.", "labels": ["OpenZeppelin"]}, {"title": "For instance, each one of the error messages on lines 85 of OrderMixin.sol, 16 of ERC721ProxySafe.sol, and 26 of Permitable.sol employ a different style.", "body": "For instance, each one of the error messages on lines 85 of OrderMixin.sol, 16 of ERC721ProxySafe.sol, and 26 of Permitable.sol employ a different style.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#for-instance,-each-one-of-the-error-messages-on-lines-85-of-ordermixin.sol,-16-of-erc721proxysafe.sol,-and-26-of-permitable.sol-employ-a-different-style.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, some error messages are misleading:", "body": "Additionally, some error messages are misleading:", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#additionally,-some-error-messages-are-misleading:", "labels": ["OpenZeppelin"]}, {"title": "LOP: one of amounts should be 0 should be at least one of the amounts should be 0, since either or both amounts can be zero.", "body": "LOP: one of amounts should be 0 should be at least one of the amounts should be 0, since either or both amounts can be zero.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#lop:-one-of-amounts-should-be-0-should-be-at-least-one-of-the-amounts-should-be-0,-since-either-or-both-amounts-can-be-zero.", "labels": ["OpenZeppelin"]}, {"title": "LOP: only one amount should be 0 should be LOP: one, and only one, amount should be 0.", "body": "LOP: only one amount should be 0 should be LOP: one, and only one, amount should be 0.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#lop:-only-one-amount-should-be-0-should-be-lop:-one,-and-only-one,-amount-should-be-0.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Moreover, inconsistently formatted error messages can introduce unnecessary confusion. Therefore, consider reviewing the entire codebase to make sure every require and revert statement has an error message that is consistently formatted, accurate, informative, and user-friendly.", "body": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Moreover, inconsistently formatted error messages can introduce unnecessary confusion. Therefore, consider reviewing the entire codebase to make sure every require and revert statement has an error message that is consistently formatted, accurate, informative, and user-friendly.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-so-they-should-provide-enough-information-so-that-appropriate-corrections-can-be-made-to-interact-with-the-system.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-moreover,-inconsistently-formatted-error-messages-can-introduce-unnecessary-confusion.-therefore,-consider-reviewing-the-entire-codebase-to-make-sure-every-require-and-revert-statement-has-an-error-message-that-is-consistently-formatted,-accurate,-informative,-and-user-friendly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #81.", "body": "Update: Partially fixed in pull request #81.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-partially-fixed-in-pull-request-#81.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Inconsistent use of named return variables", "body": "[N09] Inconsistent use of named return variables", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n09]-inconsistent-use-of-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables in the OrderMixin contract. Some functions return named variables, others return explicit values, and others declare a named return variable but override it with an explicit return statement.", "body": "There is an inconsistent use of named return variables in the OrderMixin contract. Some functions return named variables, others return explicit values, and others declare a named return variable but override it with an explicit return statement.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#there-is-an-inconsistent-use-of-named-return-variables-in-the-ordermixin-contract.-some-functions-return-named-variables,-others-return-explicit-values,-and-others-declare-a-named-return-variable-but-override-it-with-an-explicit-return-statement.", "labels": ["OpenZeppelin"]}, {"title": "Consider adopting a consistent approach to return values throughout the codebase by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "body": "Consider adopting a consistent approach to return values throughout the codebase by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#consider-adopting-a-consistent-approach-to-return-values-throughout-the-codebase-by-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-the-explicitness-and-readability-of-the-code,-and-it-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #73.", "body": "Update: Fixed in pull request #73.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#73.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Order\u2019s hash calculation is not open to the API", "body": "[N10] Order\u2019s hash calculation is not open to the API", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n10]-order\u2019s-hash-calculation-is-not-open-to-the-api", "labels": ["OpenZeppelin"]}, {"title": "The external functions remaining, remainingRaw and remainingsRaw all expect an order hash for successful operation.", "body": "The external functions remaining, remainingRaw and remainingsRaw all expect an order hash for successful operation.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-external-functions-remaining,-remainingraw-and-remainingsraw-all-expect-an-order-hash-for-successful-operation.", "labels": ["OpenZeppelin"]}, {"title": "However, the helper function _hash, which returns the hash of an order, has private visibility. This means that users will have to pack parts of the orders and domain strings manually in order to obtain the hash of an order.", "body": "However, the helper function _hash, which returns the hash of an order, has private visibility. This means that users will have to pack parts of the orders and domain strings manually in order to obtain the hash of an order.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#however,-the-helper-function-_hash,-which-returns-the-hash-of-an-order,-has-private-visibility.-this-means-that-users-will-have-to-pack-parts-of-the-orders-and-domain-strings-manually-in-order-to-obtain-the-hash-of-an-order.", "labels": ["OpenZeppelin"]}, {"title": "To avoid the potential for mistakes when calculating order hashes and to provide users with a method for generating an order\u2019s respective hash, consider extending the visibility of the _hash function to public and refactoring the name to hash to be consistent with the rest of the code.", "body": "To avoid the potential for mistakes when calculating order hashes and to provide users with a method for generating an order\u2019s respective hash, consider extending the visibility of the _hash function to public and refactoring the name to hash to be consistent with the rest of the code.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#to-avoid-the-potential-for-mistakes-when-calculating-order-hashes-and-to-provide-users-with-a-method-for-generating-an-order\u2019s-respective-hash,-consider-extending-the-visibility-of-the-_hash-function-to-public-and-refactoring-the-name-to-hash-to-be-consistent-with-the-rest-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #74.", "body": "Update: Fixed in pull request #74.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#74.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Semantic overloading of mapping", "body": "[N11] Semantic overloading of mapping", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n11]-semantic-overloading-of-mapping", "labels": ["OpenZeppelin"]}, {"title": "The _remaining mapping in the OrderMixin contract is semantically overloaded to track the status of orders and the remaining amount of assets available for those orders.", "body": "The _remaining mapping in the OrderMixin contract is semantically overloaded to track the status of orders and the remaining amount of assets available for those orders.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-_remaining-mapping-in-the-ordermixin-contract-is-semantically-overloaded-to-track-the-status-of-orders-and-the-remaining-amount-of-assets-available-for-those-orders.", "labels": ["OpenZeppelin"]}, {"title": "The three states that it can take on are:", "body": "The three states that it can take on are:", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-three-states-that-it-can-take-on-are:", "labels": ["OpenZeppelin"]}, {"title": "0: The order hash has not been seen yet.", "body": "0: The order hash has not been seen yet.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#0:-the-order-hash-has-not-been-seen-yet.", "labels": ["OpenZeppelin"]}, {"title": "1: The order has been either canceled or completely filled.", "body": "1: The order has been either canceled or completely filled.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#1:-the-order-has-been-either-canceled-or-completely-filled.", "labels": ["OpenZeppelin"]}, {"title": "Any uint larger than 1: The remaining makerAmount available to be filled on the order plus 1.", "body": "Any uint larger than 1: The remaining makerAmount available to be filled on the order plus 1.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#any-uint-larger-than-1:-the-remaining-makeramount-available-to-be-filled-on-the-order-plus-1.", "labels": ["OpenZeppelin"]}, {"title": "This semantic overloading requires wrapping and unwrapping of this value during lookup, cancellation, initialization, and storage.", "body": "This semantic overloading requires wrapping and unwrapping of this value during lookup, cancellation, initialization, and storage.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#this-semantic-overloading-requires-wrapping-and-unwrapping-of-this-value-during-lookup,-cancellation,-initialization,-and-storage.", "labels": ["OpenZeppelin"]}, {"title": "Semantic overloading and the necessary logic to enable it can be prone to error and can make the codebase harder to understand and reason about, it may also open the door for regressions in future updates to the code.", "body": "Semantic overloading and the necessary logic to enable it can be prone to error and can make the codebase harder to understand and reason about, it may also open the door for regressions in future updates to the code.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#semantic-overloading-and-the-necessary-logic-to-enable-it-can-be-prone-to-error-and-can-make-the-codebase-harder-to-understand-and-reason-about,-it-may-also-open-the-door-for-regressions-in-future-updates-to-the-code.", "labels": ["OpenZeppelin"]}, {"title": "To improve the code\u2019s readability, consider tracking the completion state of orders in a separate mapping.", "body": "To improve the code\u2019s readability, consider tracking the completion state of orders in a separate mapping.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#to-improve-the-code\u2019s-readability,-consider-tracking-the-completion-state-of-orders-in-a-separate-mapping.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. The 1inch team cited that a fix would increase gas costs for the fillOrder function.", "body": "Update: Not fixed. The 1inch team cited that a fix would increase gas costs for the fillOrder function.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-not-fixed.-the-1inch-team-cited-that-a-fix-would-increase-gas-costs-for-the-fillorder-function.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Orders with permit allow calls to arbitrary contracts", "body": "[N12] Orders with permit allow calls to arbitrary contracts", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n12]-orders-with-permit-allow-calls-to-arbitrary-contracts", "labels": ["OpenZeppelin"]}, {"title": "The OrderMixin contract inherits the Permitable contract to allow for single-transaction order filling with assets that accept such permit calls to modify allowances.", "body": "The OrderMixin contract inherits the Permitable contract to allow for single-transaction order filling with assets that accept such permit calls to modify allowances.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-ordermixin-contract-inherits-the-permitable-contract-to-allow-for-single-transaction-order-filling-with-assets-that-accept-such-permit-calls-to-modify-allowances.", "labels": ["OpenZeppelin"]}, {"title": "However, the calls to the Permitable contract do not validate whether the target is a permitable asset nor if it is even an asset, which could allow a malicious user to pass the address of an arbitrary contract which could execute another call before the order fill completes.", "body": "However, the calls to the Permitable contract do not validate whether the target is a permitable asset nor if it is even an asset, which could allow a malicious user to pass the address of an arbitrary contract which could execute another call before the order fill completes.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#however,-the-calls-to-the-permitable-contract-do-not-validate-whether-the-target-is-a-permitable-asset-nor-if-it-is-even-an-asset,-which-could-allow-a-malicious-user-to-pass-the-address-of-an-arbitrary-contract-which-could-execute-another-call-before-the-order-fill-completes.", "labels": ["OpenZeppelin"]}, {"title": "Although the contract is protected against reentrancy, reducing the attack surface and preventing the calling of external contracts during execution is always recommended. Consider either restricting the asset involved in the permit to the assets involved in the order or to an assets whitelist for the protocol.", "body": "Although the contract is protected against reentrancy, reducing the attack surface and preventing the calling of external contracts during execution is always recommended. Consider either restricting the asset involved in the permit to the assets involved in the order or to an assets whitelist for the protocol.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#although-the-contract-is-protected-against-reentrancy,-reducing-the-attack-surface-and-preventing-the-calling-of-external-contracts-during-execution-is-always-recommended.-consider-either-restricting-the-asset-involved-in-the-permit-to-the-assets-involved-in-the-order-or-to-an-assets-whitelist-for-the-protocol.", "labels": ["OpenZeppelin"]}, {"title": "OrderMixin does not actually have info about actual tokens as makerAsset and takerAsset sometimes are proxies or other intermediate contracts and info about actual tokens is stored in some arbitrary bytes. So there is no viable way to restrict which asset permit is called on.", "body": "OrderMixin does not actually have info about actual tokens as makerAsset and takerAsset sometimes are proxies or other intermediate contracts and info about actual tokens is stored in some arbitrary bytes. So there is no viable way to restrict which asset permit is called on.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#ordermixin-does-not-actually-have-info-about-actual-tokens-as-makerasset-and-takerasset-sometimes-are-proxies-or-other-intermediate-contracts-and-info-about-actual-tokens-is-stored-in-some-arbitrary-bytes.-so-there-is-no-viable-way-to-restrict-which-asset-permit-is-called-on.", "labels": ["OpenZeppelin"]}, {"title": "[N13] solhint is never re-enabled", "body": "[N13] solhint is never re-enabled", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n13]-solhint-is-never-re-enabled", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are a couple of solhint-disable statements, specifically those on line 23 and on line 41 of RevertReasonParser.sol, that are not terminated with solhint-enable.", "body": "Throughout the codebase, there are a couple of solhint-disable statements, specifically those on line 23 and on line 41 of RevertReasonParser.sol, that are not terminated with solhint-enable.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#throughout-the-codebase,-there-are-a-couple-of-solhint-disable-statements,-specifically-those-on-line-23-and-on-line-41-of-revertreasonparser.sol,-that-are-not-terminated-with-solhint-enable.", "labels": ["OpenZeppelin"]}, {"title": "In favor of explicitness and to be as restrictive as possible when disabling solhint, consider using solhint-disable-line or solhint-disable-next-line instead, similar to line 16 of the same file.", "body": "In favor of explicitness and to be as restrictive as possible when disabling solhint, consider using solhint-disable-line or solhint-disable-next-line instead, similar to line 16 of the same file.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#in-favor-of-explicitness-and-to-be-as-restrictive-as-possible-when-disabling-solhint,-consider-using-solhint-disable-line-or-solhint-disable-next-line-instead,-similar-to-line-16-of-the-same-file.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #72.", "body": "Update: Fixed in pull request #72.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#72.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Typos", "body": "[N14] Typos", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n14]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "On line 18 of OrderMixin.sol and line 11 of OrderRFQMixin.sol, v1 should be v2.", "body": "On line 18 of OrderMixin.sol and line 11 of OrderRFQMixin.sol, v1 should be v2.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#on-line-18-of-ordermixin.sol-and-line-11-of-orderrfqmixin.sol,-v1-should-be-v2.", "labels": ["OpenZeppelin"]}, {"title": "On lines 147, 165, and 188 of OrderMixin.sol, it's should be if it's.", "body": "On lines 147, 165, and 188 of OrderMixin.sol, it's should be if it's.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#on-lines-147,-165,-and-188-of-ordermixin.sol,-it's-should-be-if-it's.", "labels": ["OpenZeppelin"]}, {"title": "Additionally the project\u2019s README (out of scope for this audit) contains the following typos:", "body": "Additionally the project\u2019s README (out of scope for this audit) contains the following typos:", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#additionally-the-project\u2019s-readme-(out-of-scope-for-this-audit)-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "Ket should be Key.", "body": "Ket should be Key.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#ket-should-be-key.", "labels": ["OpenZeppelin"]}, {"title": "stategies should be strategies.", "body": "stategies should be strategies.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#stategies-should-be-strategies.", "labels": ["OpenZeppelin"]}, {"title": "cancelation should be cancellation.", "body": "cancelation should be cancellation.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#cancelation-should-be-cancellation.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #71 and pull request #77.", "body": "Update: Fixed in pull request #71 and pull request #77.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#71-and-pull-request-#77.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Use of uint instead of uint256", "body": "[N15] Use of uint instead of uint256", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#[n15]-use-of-uint-instead-of-uint256", "labels": ["OpenZeppelin"]}, {"title": "98 and", "body": "98 and", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#98-and", "labels": ["OpenZeppelin"]}, {"title": "119 of", "body": "119 of", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#119-of", "labels": ["OpenZeppelin"]}, {"title": "OrderMixin.sol and lines", "body": "OrderMixin.sol and lines", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#ordermixin.sol-and-lines", "labels": ["OpenZeppelin"]}, {"title": "16 and", "body": "16 and", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#16-and", "labels": ["OpenZeppelin"]}, {"title": "30 of", "body": "30 of", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#30-of", "labels": ["OpenZeppelin"]}, {"title": "PredicateHelper.sol.", "body": "PredicateHelper.sol.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#predicatehelper.sol.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #70.", "body": "Update: Fixed in pull request #70.", "html_url": "https://blog.openzeppelin.com/1inch-limit-order-protocol-audit#update:-fixed-in-pull-request-#70.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Inconsistent style", "body": "[N01] Inconsistent style", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n01]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "There are some places in the code base, where differences in style affect the readability, making it more difficult to understand the code. Some examples are:", "body": "There are some places in the code base, where differences in style affect the readability, making it more difficult to understand the code. Some examples are:", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#there-are-some-places-in-the-code-base,-where-differences-in-style-affect-the-readability,-making-it-more-difficult-to-understand-the-code.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The Registry contract uses different styles for docstrings in the entire contract.", "body": "The Registry contract uses different styles for docstrings in the entire contract.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-registry-contract-uses-different-styles-for-docstrings-in-the-entire-contract.", "labels": ["OpenZeppelin"]}, {"title": "The SafeGuard contract is emitting an event when queueTransactionWithDescription is called but no events are emitted in other functions dealing with transactions.", "body": "The SafeGuard contract is emitting an event when queueTransactionWithDescription is called but no events are emitted in other functions dealing with transactions.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-safeguard-contract-is-emitting-an-event-when-queuetransactionwithdescription-is-called-but-no-events-are-emitted-in-other-functions-dealing-with-transactions.", "labels": ["OpenZeppelin"]}, {"title": "In the SafeGuard contract, sometimes value is used as named parameter and sometimes _value is used.", "body": "In the SafeGuard contract, sometimes value is used as named parameter and sometimes _value is used.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#in-the-safeguard-contract,-sometimes-value-is-used-as-named-parameter-and-sometimes-_value-is-used.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration the value a consistent coding style adds to the project\u2019s readability, consider enforcing a standard coding style with help of linter tools, such as Solhint.", "body": "Taking into consideration the value a consistent coding style adds to the project\u2019s readability, consider enforcing a standard coding style with help of linter tools, such as Solhint.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#taking-into-consideration-the-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-consider-enforcing-a-standard-coding-style-with-help-of-linter-tools,-such-as-solhint.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #10 and commit 7fd27df16fc879d990d36a167a0b6e719e578558.", "body": "Notes & Additional Information  [N01] Inconsistent style  There are some places in the code base, where differences in style affect the readability, making it more difficult to understand the code. Some examples are:  The Registry contract uses different styles for docstrings in the entire contract.  The SafeGuard contract is emitting an event when queueTransactionWithDescription is called but no events are emitted in other functions dealing with transactions.  In the SafeGuard contract, sometimes value is used as named parameter and sometimes _value is used.  Taking into consideration the value a consistent coding style adds to the projects readability, consider enforcing a standard coding style with help of linter tools, such as Solhint.    [N02] Missing license  The following contracts within the code base are missing an SPDX license identifier.  The ISafeGuard interface.  The ITimelock interface.  The SafeGuard contract.  To silence compiler warnings and increase consistency across the codebase consider adding a license identifier. While doing it consider referring to spdx.dev guidelines.    [N03] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts library, consider pinning the version of this dependency in the package.json file.  Update: Fixed in PR #10.  [N04] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Fixed in PR #10.  [N05] Typo  At various instances throughout the code base, the word role is misspelled as rol. One such example is in the docstring within the constructor of the SafeGuard contract.  Consider correcting these typos to improve code readability.  Update: Partially fixed in PR #10. While the spelling of role has been corrected, the comment set admin role the an defined admin address should be set admin role to a defined admin address. Additionally, execute is misspelled in the SafeGuard contract on line 69, line 82, line 96 and line 110 and available is misspelled on line 70, line 83, line 97, line 111. Also, consider replacing informal words such as gonna in SafeGuard contract with formal alternatives such as going to.  [N06] Declare uint as uint256  eta variable in the QueueTransactionWithDescription event of the    [N07] Unused import  The SafeGuard contract imports the console contract but never uses it.To improve readability of the code, consider removing any unused imports.  Update: Fixed in PR #10.  Conclusions  One high and several other minor vulnerabilities have been found and recommendations and fixes have been suggested.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#update:-fixed-in-pr-#10-and-commit-7fd27df16fc879d990d36a167a0b6e719e578558.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Missing license", "body": "[N02] Missing license", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n02]-missing-license", "labels": ["OpenZeppelin"]}, {"title": "The following contracts within the code base are missing an SPDX license identifier.", "body": "The following contracts within the code base are missing an SPDX license identifier.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-following-contracts-within-the-code-base-are-missing-an-spdx-license-identifier.", "labels": ["OpenZeppelin"]}, {"title": "The ISafeGuard interface.", "body": "The ISafeGuard interface.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-isafeguard-interface.", "labels": ["OpenZeppelin"]}, {"title": "The ITimelock interface.", "body": "The ITimelock interface.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-itimelock-interface.", "labels": ["OpenZeppelin"]}, {"title": "The SafeGuard contract.", "body": "The SafeGuard contract.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-safeguard-contract.", "labels": ["OpenZeppelin"]}, {"title": "To silence compiler warnings and increase consistency across the codebase consider adding a license identifier. While doing it consider referring to spdx.dev guidelines.", "body": "To silence compiler warnings and increase consistency across the codebase consider adding a license identifier. While doing it consider referring to spdx.dev guidelines.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#to-silence-compiler-warnings-and-increase-consistency-across-the-codebase-consider-adding-a-license-identifier.-while-doing-it-consider-referring-to-spdx.dev-guidelines.", "labels": ["OpenZeppelin"]}, {"title": "[N03] OpenZeppelin Contract\u2019s dependency is not pinned", "body": "[N03] OpenZeppelin Contract\u2019s dependency is not pinned", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n03]-openzeppelin-contract\u2019s-dependency-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019 library, consider pinning the version of this dependency in the package.json file.", "body": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019 library, consider pinning the version of this dependency in the package.json file.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#to-prevent-unexpected-behaviors-in-case-breaking-changes-are-released-in-future-updates-of-the-openzeppelin-contracts\u2019-library,-consider-pinning-the-version-of-this-dependency-in-the-package.json-file.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #10.", "body": "[L03] Incorrect interface definition and implementation  The ISafeGuard interface does not define the queueTransactionWithDescription function implemented in the SafeGuard contract, and at the same time, it defines the __abdicate, __queueSetTimelockPendingAdmin and __executeSetTimelockPendingAdmin functions but they are not implemented.  To improve correctness and consistency in the codebase, consider refactoring the ISafeGuard interface to match exactly the SafeGuard implementation.  Update: Fixed in commit 7fd27df16fc879d990d36a167a0b6e719e578558.  [L04] Missing docstrings  Some of the contracts and functions in the code base lack documentation. For example, some functions in the SafeGuard contract.  Additionally, some docstrings use informal language, such as the one above the setTimelock function in the SafeGuard contract.  This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Partially fixed in PR #10. Proper docstrings have been added to various functions throughout the code base. However, in addition to the current changes, consider making the following changes:  Add description as the @param in the docstring above queueTransactionWithDescription function  Add @param in the docstring above the createSafeGuard function in SafeGuardFactory contract  Add @return in docstrings above the functions in SafeGuardFactory contract.  [L05] Useless or repeated code  There are places in the codebase where code is either repeated or not needed. Some examples are:  Lines 29-32 of the Registry contract are useless, because the _add function of the EnumerableSet contract already performs these checks against the values already being set.  Lines 62, 67, 73 and 78 of the SafeGuard contract are all repeating the same exact operation. Consider encapsulating it into an internal function to avoid duplicating code.  Lines 62-63 and 67-68 of SafeGuard are repeated. Consider encapsulating them into a single internal function.  The usage of gasleft to specify how much gas should be forwarded in the call of the function executeTransaction is unnecessary. This is because, at that point of execution, the entire gas left will be used to continue the execution. If this is not for expliciteness, consider removing the gas parameter from the call.  Consider applying the suggested fixed to produce a cleaner code and improve consistency and modularity over the codebase.  Update: Fixed in PR #10 and commit 7fd27df16fc879d990d36a167a0b6e719e578558.  Notes & Additional Information  [N01] Inconsistent style  There are some places in the code base, where differences in style affect the readability, making it more difficult to understand the code. Some examples are:  The Registry contract uses different styles for docstrings in the entire contract.  The SafeGuard contract is emitting an event when queueTransactionWithDescription is called but no events are emitted in other functions dealing with transactions.  In the SafeGuard contract, sometimes value is used as named parameter and sometimes _value is used.  Taking into consideration the value a consistent coding style adds to the projects readability, consider enforcing a standard coding style with help of linter tools, such as Solhint.  Update: Fixed in PR #10 and commit 7fd27df16fc879d990d36a167a0b6e719e578558.  [N02] Missing license  The following contracts within the code base are missing an SPDX license identifier.  The ISafeGuard interface.  The ITimelock interface.  The SafeGuard contract.  To silence compiler warnings and increase consistency across the codebase consider adding a license identifier. While doing it consider referring to spdx.dev guidelines.  Update: Fixed in PR #10 and commit 7fd27df16fc879d990d36a167a0b6e719e578558.  [N03] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts library, consider pinning the version of this dependency in the package.json file.    [N04] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by t", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#update:-fixed-in-pr-#10.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Solidity compiler version is not pinned", "body": "[N04] Solidity compiler version is not pinned", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n04]-solidity-compiler-version-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "body": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#throughout-the-code-base,-consider-pinning-the-version-of-the-solidity-compiler-to-its-latest-stable-version.-this-should-help-prevent-introducing-unexpected-bugs-due-to-incompatible-future-releases.-to-choose-a-specific-version,-developers-should-consider-both-the-compiler\u2019s-features-needed-by-the-project-and-the-list-of-known-bugs-associated-with-each-solidity-compiler-version.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Typo", "body": "[N05] Typo", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n05]-typo", "labels": ["OpenZeppelin"]}, {"title": "At various instances throughout the code base, the word role is misspelled as rol. One such example is in the docstring within the constructor of the SafeGuard contract.", "body": "At various instances throughout the code base, the word role is misspelled as rol. One such example is in the docstring within the constructor of the SafeGuard contract.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#at-various-instances-throughout-the-code-base,-the-word-role-is-misspelled-as-rol.-one-such-example-is-in-the-docstring-within-the-constructor-of-the-safeguard-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR #10. While the spelling of role has been corrected, the comment \u201cset admin role the an defined admin address\u201d should be \u201cset admin role to a defined admin address\u201d. Additionally, \u201cexecute\u201d is misspelled in the SafeGuard contract on line 69, line 82, line 96 and line 110 and \u201cavailable\u201d is misspelled on line 70, line 83, line 97, line 111. Also, consider replacing informal words such as \u201cgonna\u201d in SafeGuard contract with formal alternatives such as \u201cgoing to\u201d.", "body": "Update: Partially fixed in PR #10. While the spelling of role has been corrected, the comment \u201cset admin role the an defined admin address\u201d should be \u201cset admin role to a defined admin address\u201d. Additionally, \u201cexecute\u201d is misspelled in the SafeGuard contract on line 69, line 82, line 96 and line 110 and \u201cavailable\u201d is misspelled on line 70, line 83, line 97, line 111. Also, consider replacing informal words such as \u201cgonna\u201d in SafeGuard contract with formal alternatives such as \u201cgoing to\u201d.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#update:-partially-fixed-in-pr-#10.-while-the-spelling-of-role-has-been-corrected,-the-comment-\u201cset-admin-role-the-an-defined-admin-address\u201d-should-be-\u201cset-admin-role-to-a-defined-admin-address\u201d.-additionally,-\u201cexecute\u201d-is-misspelled-in-the-safeguard-contract-on-line-69,-line-82,-line-96-and-line-110-and-\u201cavailable\u201d-is-misspelled-on-line-70,-line-83,-line-97,-line-111.-also,-consider-replacing-informal-words-such-as-\u201cgonna\u201d-in-safeguard-contract-with-formal-alternatives-such-as-\u201cgoing-to\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Declare uint as uint256", "body": "[N06] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n06]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "eta variable in the QueueTransactionWithDescription event of the", "body": "eta variable in the QueueTransactionWithDescription event of the", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#eta-variable-in-the-queuetransactionwithdescription-event-of-the", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unused import", "body": "[N07] Unused import", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#[n07]-unused-import", "labels": ["OpenZeppelin"]}, {"title": "The SafeGuard contract imports the console contract but never uses it.To improve readability of the code, consider removing any unused imports.", "body": "The SafeGuard contract imports the console contract but never uses it.To improve readability of the code, consider removing any unused imports.", "html_url": "https://blog.openzeppelin.com/tally-safeguard-audit#the-safeguard-contract-imports-the-console-contract-but-never-uses-it.to-improve-readability-of-the-code,-consider-removing-any-unused-imports.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Call return value not checked", "body": "[N01] Call return value not checked", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n01]-call-return-value-not-checked", "labels": ["OpenZeppelin"]}, {"title": "deposit function of the L2", "body": "deposit function of the L2", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#deposit-function-of-the-l2", "labels": ["OpenZeppelin"]}, {"title": "WETH interface. If this", "body": "WETH interface. If this", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#weth-interface.-if-this", "labels": ["OpenZeppelin"]}, {"title": "Consider checking and reacting appropriately to the return values of all low-level calls.", "body": "Consider checking and reacting appropriately to the return values of all low-level calls.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-checking-and-reacting-appropriately-to-the-return-values-of-all-low-level-calls.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Lack of indexed parameters in events", "body": "[N02] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n02]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "Many of the events defined in this codebase have parameters that should be indexed:", "body": "Many of the events defined in this codebase have parameters that should be indexed:", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#many-of-the-events-defined-in-this-codebase-have-parameters-that-should-be-indexed:", "labels": ["OpenZeppelin"]}, {"title": "newAdmin in BridgePoolsAdminTransferred", "body": "newAdmin in BridgePoolsAdminTransferred", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#newadmin-in-bridgepoolsadmintransferred", "labels": ["OpenZeppelin"]}, {"title": "chainId in WhitelistToken", "body": "chainId in WhitelistToken", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#chainid-in-whitelisttoken", "labels": ["OpenZeppelin"]}, {"title": "l2Token in TokensBridged", "body": "l2Token in TokensBridged", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#l2token-in-tokensbridged", "labels": ["OpenZeppelin"]}, {"title": "newAdmin in SetXDomainAdmin", "body": "newAdmin in SetXDomainAdmin", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#newadmin-in-setxdomainadmin", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit d156b40b2ddb109806336c4d169dbdea91ed1c3e of PR3535. The chainId parameter of WhitelistToken was not updated.", "body": "Update: Partially fixed in commit d156b40b2ddb109806336c4d169dbdea91ed1c3e of PR3535. The chainId parameter of WhitelistToken was not updated.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-partially-fixed-in-commit-d156b40b2ddb109806336c4d169dbdea91ed1c3e-of-pr3535.-the-chainid-parameter-of-whitelisttoken-was-not-updated.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Implicit casting inconsistency", "body": "[N03] Implicit casting inconsistency", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n03]-implicit-casting-inconsistency", "labels": ["OpenZeppelin"]}, {"title": "treats timestamps as uint64 values, which are implicitly cast to", "body": "treats timestamps as uint64 values, which are implicitly cast to", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#treats-timestamps-as-uint64-values,-which-are-implicitly-cast-to", "labels": ["OpenZeppelin"]}, {"title": "passed to the Optimistic Oracle. However, the", "body": "passed to the Optimistic Oracle. However, the", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#passed-to-the-optimistic-oracle.-however,-the", "labels": ["OpenZeppelin"]}, {"title": "the _requestOraclePrice function is prematurely cast to a", "body": "the _requestOraclePrice function is prematurely cast to a", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#the-_requestoracleprice-function-is-prematurely-cast-to-a", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, in the interest of consistency, consider using a uint64 for this parameter and allowing it to be implicitly cast to a uint256 when passed to the Optimistic Oracle.", "body": "Nevertheless, in the interest of consistency, consider using a uint64 for this parameter and allowing it to be implicitly cast to a uint256 when passed to the Optimistic Oracle.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#nevertheless,-in-the-interest-of-consistency,-consider-using-a-uint64-for-this-parameter-and-allowing-it-to-be-implicitly-cast-to-a-uint256-when-passed-to-the-optimistic-oracle.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 1c3c5c000ef450f5e2da056e41caff468c3fcdcb of PR3528. The timestamp is now explicitly cast.", "body": "Update: Fixed in commit 1c3c5c000ef450f5e2da056e41caff468c3fcdcb of PR3528. The timestamp is now explicitly cast.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-in-commit-1c3c5c000ef450f5e2da056e41caff468c3fcdcb-of-pr3528.-the-timestamp-is-now-explicitly-cast.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Incorrect type", "body": "[N04] Incorrect type", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n04]-incorrect-type", "labels": ["OpenZeppelin"]}, {"title": "The sendMessage function of the iOptimism_CrossDomainMessenger interface uses a uint256 gas limit while Optimism\u2019s OVM_CrossDomainEnabled uses a uint32 gas limit.", "body": "The sendMessage function of the iOptimism_CrossDomainMessenger interface uses a uint256 gas limit while Optimism\u2019s OVM_CrossDomainEnabled uses a uint32 gas limit.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#the-sendmessage-function-of-the-ioptimism_crossdomainmessenger-interface-uses-a-uint256-gas-limit-while-optimism\u2019s-ovm_crossdomainenabled-uses-a-uint32-gas-limit.", "labels": ["OpenZeppelin"]}, {"title": "For consistency and predictability, consider updating the iOptimisim_CrossDomainMessenger sendMessage function to use a uint32 gas limit.", "body": "For consistency and predictability, consider updating the iOptimisim_CrossDomainMessenger sendMessage function to use a uint32 gas limit.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#for-consistency-and-predictability,-consider-updating-the-ioptimisim_crossdomainmessenger-sendmessage-function-to-use-a-uint32-gas-limit.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 381951aad988bbba6b2ef1b136ed5c48df50aa88 in PR3460.", "body": "Update: Fixed as of commit 381951aad988bbba6b2ef1b136ed5c48df50aa88 in PR3460.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-as-of-commit-381951aad988bbba6b2ef1b136ed5c48df50aa88-in-pr3460.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Lack of validation", "body": "[N05] Lack of validation", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n05]-lack-of-validation", "labels": ["OpenZeppelin"]}, {"title": "All functions in BridgeAdmin that call _relayMessage assume the transaction value matches the l1CallValue parameter, but this is not enforced.", "body": "All functions in BridgeAdmin that call _relayMessage assume the transaction value matches the l1CallValue parameter, but this is not enforced.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#all-functions-in-bridgeadmin-that-call-_relaymessage-assume-the-transaction-value-matches-the-l1callvalue-parameter,-but-this-is-not-enforced.", "labels": ["OpenZeppelin"]}, {"title": "Consider ensuring the correct msg.value is set.", "body": "Consider ensuring the correct msg.value is set.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-ensuring-the-correct-msg.value-is-set.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit f19b8d04c2343051ff2a8145abd41c39bd025063 in PR3537.", "body": "Update: Fixed as of commit f19b8d04c2343051ff2a8145abd41c39bd025063 in PR3537.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-as-of-commit-f19b8d04c2343051ff2a8145abd41c39bd025063-in-pr3537.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Readability", "body": "[N06] Readability", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n06]-readability", "labels": ["OpenZeppelin"]}, {"title": "_getDepositHash function of the", "body": "_getDepositHash function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#_getdeposithash-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "Consider simplifying the arguments to simply be the ordered pair depositData and l1Token.", "body": "Consider simplifying the arguments to simply be the ordered pair depositData and l1Token.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-simplifying-the-arguments-to-simply-be-the-ordered-pair-depositdata-and-l1token.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 31754be4a818109fa12131f854c3f70d6c72dba7 in PR3538.", "body": "Update: Fixed as of commit 31754be4a818109fa12131f854c3f70d6c72dba7 in PR3538.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-as-of-commit-31754be4a818109fa12131f854c3f70d6c72dba7-in-pr3538.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Reentrant function", "body": "[N07] Reentrant function", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n07]-reentrant-function", "labels": ["OpenZeppelin"]}, {"title": "The requestAndProposePriceFor function of the SkinnyOptimisticOracle contract makes a call to an untrusted msg.sender but is not guarded by a nonReentrant modifier. While, in this instance, this does not seem to be a security concern, this can introduce unexpected behavior.", "body": "The requestAndProposePriceFor function of the SkinnyOptimisticOracle contract makes a call to an untrusted msg.sender but is not guarded by a nonReentrant modifier. While, in this instance, this does not seem to be a security concern, this can introduce unexpected behavior.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#the-requestandproposepricefor-function-of-the-skinnyoptimisticoracle-contract-makes-a-call-to-an-untrusted-msg.sender-but-is-not-guarded-by-a-nonreentrant-modifier.-while,-in-this-instance,-this-does-not-seem-to-be-a-security-concern,-this-can-introduce-unexpected-behavior.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the nonReentrant modifier to all functions which make calls to possibly untrusted contracts.", "body": "Consider adding the nonReentrant modifier to all functions which make calls to possibly untrusted contracts.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-adding-the-nonreentrant-modifier-to-all-functions-which-make-calls-to-possibly-untrusted-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit b744d24e7579b7afa2c778f4dd680f26117b3990 of PR3539.", "body": "Update: Fixed in commit b744d24e7579b7afa2c778f4dd680f26117b3990 of PR3539.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-in-commit-b744d24e7579b7afa2c778f4dd680f26117b3990-of-pr3539.", "labels": ["OpenZeppelin"]}, {"title": "[N08] seqNum not logged", "body": "[N08] seqNum not logged", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n08]-seqnum-not-logged", "labels": ["OpenZeppelin"]}, {"title": "relayMessage function of the", "body": "relayMessage function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#relaymessage-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting events after sensitive changes take place, to facilitate tracking and notify off-chain clients following the contract\u2019s activity.", "body": "Consider emitting events after sensitive changes take place, to facilitate tracking and notify off-chain clients following the contract\u2019s activity.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-emitting-events-after-sensitive-changes-take-place,-to-facilitate-tracking-and-notify-off-chain-clients-following-the-contract\u2019s-activity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 30343f33532a6c255dc4cc18c3b497d9b2767a7c in PR3541.", "body": "Update: Fixed as of commit 30343f33532a6c255dc4cc18c3b497d9b2767a7c in PR3541.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-as-of-commit-30343f33532a6c255dc4cc18c3b497d9b2767a7c-in-pr3541.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Typographical errors", "body": "[N09] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n09]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "\u201cint\u201d should be \u201cuint\u201d.", "body": "\u201cint\u201d should be \u201cuint\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cint\u201d-should-be-\u201cuint\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cLPS\u201d should be \u201cLSP\u201d.", "body": "\u201cLPS\u201d should be \u201cLSP\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201clps\u201d-should-be-\u201clsp\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cmaximum\u201d should be \u201cminimum\u201d.", "body": "\u201cmaximum\u201d should be \u201cminimum\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cmaximum\u201d-should-be-\u201cminimum\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cexpire\u201d should be \u201cexpired\u201d.", "body": "Disiputer should be Disputer.  second should be seconds.  a instant should be an instant.  OptimismMessenger should be Optimism_Messenger.  tokens should be token.  callers should be callers.  to should be from.  Can not should be Cannot.  Consider correcting these typos to improve code readability.  Update: Fixed as of commit 2dccbe1c2c82fe2a21c179ac06c2d4f0d911a2ca in PR3540.  [N10] Undocumented ERC20 approval requirement  The requestEarlyExpiration and expire functions of the LongShortPair contract each assume that the caller has granted the contract an allowance to pull the proposer reward.  For the sake of predictability, consider documenting this requirement in the function comments.  Update: Fixed in commit da3754f50284480df57b90b80002da06a1ce0d02 in PR3529.  [N11] Unused modifier  In the BridgePool contract, the onlyFromOptimisticOracle modifier is defined but is never used in the codebase and should therefore be removed.  Update: Fixed in commit 7abece6377637e8c4cd3bd07ab9adcfa051d4e94 in PR3542.  Conclusions  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cexpire\u201d-should-be-\u201cexpired\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cmethod\u201d should be removed.", "body": "\u201cmethod\u201d should be removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cmethod\u201d-should-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "\u201cits\u201d should be \u201cit\u2019s\u201d.", "body": "\u201cits\u201d should be \u201cit\u2019s\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cits\u201d-should-be-\u201cit\u2019s\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cCan not\u201d should be \u201cCannot\u201d.", "body": "Consider correcting these typos to improve code readability.  Update: Fixed as of commit 2dccbe1c2c82fe2a21c179ac06c2d4f0d911a2ca in PR3540.  [N10] Undocumented ERC20 approval requirement  The requestEarlyExpiration and expire functions of the LongShortPair contract each assume that the caller has granted the contract an allowance to pull the proposer reward.  For the sake of predictability, consider documenting this requirement in the function comments.  Update: Fixed in commit da3754f50284480df57b90b80002da06a1ce0d02 in PR3529.  [N11] Unused modifier  In the BridgePool contract, the onlyFromOptimisticOracle modifier is defined but is never used in the codebase and should therefore be removed.  Update: Fixed in commit 7abece6377637e8c4cd3bd07ab9adcfa051d4e94 in PR3542.  Conclusions  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201ccan-not\u201d-should-be-\u201ccannot\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cDisiputer\u201d should be \u201cDisputer\u201d.", "body": "\u201cDisiputer\u201d should be \u201cDisputer\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cdisiputer\u201d-should-be-\u201cdisputer\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201csecond\u201d should be \u201cseconds\u201d.", "body": "\u201csecond\u201d should be \u201cseconds\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201csecond\u201d-should-be-\u201cseconds\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201ca instant\u201d should be \u201can instant\u201d.", "body": "\u201ca instant\u201d should be \u201can instant\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201ca-instant\u201d-should-be-\u201can-instant\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cOptimismMessenger\u201d should be \u201cOptimism_Messenger\u201d.", "body": "\u201cOptimismMessenger\u201d should be \u201cOptimism_Messenger\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201coptimismmessenger\u201d-should-be-\u201coptimism_messenger\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201ctokens\u201d should be \u201ctoken\u201d.", "body": "\u201ctokens\u201d should be \u201ctoken\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201ctokens\u201d-should-be-\u201ctoken\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201ccallers\u201d should be \u201ccaller\u2019s\u201d.", "body": "\u201ccallers\u201d should be \u201ccaller\u2019s\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201ccallers\u201d-should-be-\u201ccaller\u2019s\u201d.", "labels": ["OpenZeppelin"]}, {"title": "\u201cto\u201d should be \u201cfrom\u201d.", "body": "\u201cto\u201d should be \u201cfrom\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#\u201cto\u201d-should-be-\u201cfrom\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Consider correcting these typos to improve code readability.", "body": "Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as of commit 2dccbe1c2c82fe2a21c179ac06c2d4f0d911a2ca in PR3540.", "body": "Update: Fixed as of commit 2dccbe1c2c82fe2a21c179ac06c2d4f0d911a2ca in PR3540.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-as-of-commit-2dccbe1c2c82fe2a21c179ac06c2d4f0d911a2ca-in-pr3540.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Undocumented ERC20 approval requirement", "body": "[N10] Undocumented ERC20 approval requirement", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n10]-undocumented-erc20-approval-requirement", "labels": ["OpenZeppelin"]}, {"title": "The requestEarlyExpiration and expire functions of the LongShortPair contract each assume that the caller has granted the contract an allowance to pull the proposer reward.", "body": "The requestEarlyExpiration and expire functions of the LongShortPair contract each assume that the caller has granted the contract an allowance to pull the proposer reward.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#the-requestearlyexpiration-and-expire-functions-of-the-longshortpair-contract-each-assume-that-the-caller-has-granted-the-contract-an-allowance-to-pull-the-proposer-reward.", "labels": ["OpenZeppelin"]}, {"title": "For the sake of predictability, consider documenting this requirement in the function comments.", "body": "For the sake of predictability, consider documenting this requirement in the function comments.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#for-the-sake-of-predictability,-consider-documenting-this-requirement-in-the-function-comments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit da3754f50284480df57b90b80002da06a1ce0d02 in PR3529.", "body": "Update: Fixed in commit da3754f50284480df57b90b80002da06a1ce0d02 in PR3529.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-in-commit-da3754f50284480df57b90b80002da06a1ce0d02-in-pr3529.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Unused modifier", "body": "[N11] Unused modifier", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#[n11]-unused-modifier", "labels": ["OpenZeppelin"]}, {"title": "In the BridgePool contract, the onlyFromOptimisticOracle modifier is defined but is never used in the codebase and should therefore be removed.", "body": "In the BridgePool contract, the onlyFromOptimisticOracle modifier is defined but is never used in the codebase and should therefore be removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#in-the-bridgepool-contract,-the-onlyfromoptimisticoracle-modifier-is-defined-but-is-never-used-in-the-codebase-and-should-therefore-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 7abece6377637e8c4cd3bd07ab9adcfa051d4e94 in PR3542.", "body": "Update: Fixed in commit 7abece6377637e8c4cd3bd07ab9adcfa051d4e94 in PR3542.", "html_url": "https://blog.openzeppelin.com/uma-audit-l2-bridges#update:-fixed-in-commit-7abece6377637e8c4cd3bd07ab9adcfa051d4e94-in-pr3542.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Additional issues", "body": "During our audit, the Optimism team independently found a number of issues in the code base. We briefly include them below for completeness.  The passMessageToL1 function of the OVM_L2ToL1MessagePasser contract is intended to be called by the OVM_L2CrossDomainMessenger, which validates the message sender and nonce before passing on the message. Although the function has no access controls, only messages sent from the OVM_L2ToL1MessagePasser can be relayed on layer 1. However, an attacker can use the L1-to-L2 message path to invoke the passMessageToL1 function from the OVM_L2CrossDomainMessenger with any parameters. This lets them send a message back up to L1 that bypasses the message sender and nonce validations. The Optimism team has indicated that they will remove the OVM_L2ToL1MessagePasser contract entirely, and use the sentMessages mapping in the OVM_L2CrossDomainMessenger instead.  The logic in the _handleContractCreation function of the OVM_ExecutionManager contract allows deploying potentially unsafe code. While it does validate the runtime code deployed, the restriction is enforced after the code is already deployed, without reverting the state changes.  After running a legitimate fraud proof and reaching the post-execution state, the associated State Manager still considers the Execution Manager as authenticated. This would allow further modifying state during post-execution.  An attacker can maliciously modify the context in which a fraud proof is run by first calling the run function of the OVM_ExecutionManager altering context-related variables (such as the isStatic flag), and then re-entering it during execution of a fraud proof.  Update: These issues were identified in the first audited commit. They are fixed in the latest audited commit. Note that instead of removing the OVM_L2ToL1MessagePasser contract, the first issue was addressed by recognizing and discarding L1-to-L2 cross domain messages directed at the OVM_L2ToL1MessagePasser contract.  [N02] Contracts do not compile with Solidity versions prior to 0.7  Contracts throughout the code base explicitly allow to be compiled with Solidity versions lower than 0.8 and greater than 0.5, by setting its pragma statement to pragma solidity >0.5.0 <0.8.0; (see for example the OVM_CanonicalTransactionChain contract). However, contracts that do not set explicit visibility in their constructors were only allowed starting in Solidity 0.7, meaning that it will not be possible to compile them with older versions.  Consider reviewing and updating the pragma statements of all contracts throughout the code base to ensure they can actually be compiled with the expected versions.  [N03] Fragile default values in Merkle tree  default values. These value are chosen to simulate the effect of padding the input  acceptable bound. This behavior is acknowledged,  noted in the function comments, and respected throughout the code base.  Nevertheless, we understand it would be more gas-efficient and easier to reason about if the default values were replaced with a constant value that provably has no known pre-image. Consider introducing this simplification.  [N04] Gas inefficiencies  This is a non-comprehensive list of simple gas inefficiencies detected as a side-product of the audit for the development teams consideration.  In the OVM_CanonicalTransactionChain contract:  The address of the Sequencer could be resolved before entering the loop to avoid unnecessary external calls during execution of the appendQueueBatch function. Similarly, the address referencing the queue should be resolved before entering the loop, then replacing the call to getQueueElement with _getQueueElement.  In the OVM_StateCommitmentChain contract:  The appendStateBatch function reads from storage the chains total elements twice (in lines 136 and 152) when it could do it once.  In the OVM_ExecutionManager contract:  The _createContract function reads from the messageContext.ovmADDRESS state variable three times, when it could do it just once at the beginning of the function.  In the OVM_L1ETHGateway contract:  The _safeTransferETH function of the OVM_L1ETHGateway contract uses a new bytes(0) object as a parameter when executing the call function. Using \"\" in place of new bytes(0) achieves the same effect and saves gas. Alternatively, consider entirely replacing the custom _safeTransferETH function with the sendValue function available in OpenZeppelin Contracts.  [N05] Incomplete override  The Abs_L1TokenGateway abstract contract has a default amount of gas that is sent with the cross-domain message. The intention is to allow descendant contracts to change this value as needed, but the current code base does not support this.  Consider marking the getFinalizeDepositL2Gas function as virtual so it can be overridden. Additionally, consider marking the default value as internal, so it is removed from the public API when it is no longer in use.  [N06] Inconsistent name resolution  There are a few i", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#[n01]-additional-issues", "labels": ["OpenZeppelin"]}, {"title": "During our audit, the Optimism team independently found a number of issues in the code base. We briefly include them below for completeness.", "body": "During our audit, the Optimism team independently found a number of issues in the code base. We briefly include them below for completeness.", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#during-our-audit,-the-optimism-team-independently-found-a-number-of-issues-in-the-code-base.-we-briefly-include-them-below-for-completeness.", "labels": ["OpenZeppelin"]}, {"title": "The passMessageToL1 function of the OVM_L2ToL1MessagePasser contract is intended to be called by the OVM_L2CrossDomainMessenger, which validates the message sender and nonce before passing on the message. Although the function has no access controls, only messages sent from the OVM_L2ToL1MessagePasser can be relayed on layer 1. However, an attacker can use the L1-to-L2 message path to invoke the passMessageToL1 function from the OVM_L2CrossDomainMessenger with any parameters. This lets them send a message back up to L1 that bypasses the message sender and nonce validations. The Optimism team has indicated that they will remove the OVM_L2ToL1MessagePasser contract entirely, and use the sentMessages mapping in the OVM_L2CrossDomainMessenger instead.", "body": "The passMessageToL1 function of the OVM_L2ToL1MessagePasser contract is intended to be called by the OVM_L2CrossDomainMessenger, which validates the message sender and nonce before passing on the message. Although the function has no access controls, only messages sent from the OVM_L2ToL1MessagePasser can be relayed on layer 1. However, an attacker can use the L1-to-L2 message path to invoke the passMessageToL1 function from the OVM_L2CrossDomainMessenger with any parameters. This lets them send a message back up to L1 that bypasses the message sender and nonce validations. The Optimism team has indicated that they will remove the OVM_L2ToL1MessagePasser contract entirely, and use the sentMessages mapping in the OVM_L2CrossDomainMessenger instead.", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#the-passmessagetol1-function-of-the-ovm_l2tol1messagepasser-contract-is-intended-to-be-called-by-the-ovm_l2crossdomainmessenger,-which-validates-the-message-sender-and-nonce-before-passing-on-the-message.-although-the-function-has-no-access-controls,-only-messages-sent-from-the-ovm_l2tol1messagepasser-can-be-relayed-on-layer-1.-however,-an-attacker-can-use-the-l1-to-l2-message-path-to-invoke-the-passmessagetol1-function-from-the-ovm_l2crossdomainmessenger-with-any-parameters.-this-lets-them-send-a-message-back-up-to-l1-that-bypasses-the-message-sender-and-nonce-validations.-the-optimism-team-has-indicated-that-they-will-remove-the-ovm_l2tol1messagepasser-contract-entirely,-and-use-the-sentmessages-mapping-in-the-ovm_l2crossdomainmessenger-instead.", "labels": ["OpenZeppelin"]}, {"title": "The logic in the _handleContractCreation function of the OVM_ExecutionManager contract allows deploying potentially unsafe code. While it does validate the runtime code deployed, the restriction is enforced after the code is already deployed, without reverting the state changes.", "body": "The logic in the _handleContractCreation function of the OVM_ExecutionManager contract allows deploying potentially unsafe code. While it does validate the runtime code deployed, the restriction is enforced after the code is already deployed, without reverting the state changes.", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#the-logic-in-the-_handlecontractcreation-function-of-the-ovm_executionmanager-contract-allows-deploying-potentially-unsafe-code.-while-it-does-validate-the-runtime-code-deployed,-the-restriction-is-enforced-after-the-code-is-already-deployed,-without-reverting-the-state-changes.", "labels": ["OpenZeppelin"]}, {"title": "After running a legitimate fraud proof and reaching the post-execution state, the associated State Manager still considers the Execution Manager as \u201cauthenticated\u201d. This would allow further modifying state during post-execution.", "body": "After running a legitimate fraud proof and reaching the post-execution state, the associated State Manager still considers the Execution Manager as \u201cauthenticated\u201d. This would allow further modifying state during post-execution.", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#after-running-a-legitimate-fraud-proof-and-reaching-the-post-execution-state,-the-associated-state-manager-still-considers-the-execution-manager-as-\u201cauthenticated\u201d.-this-would-allow-further-modifying-state-during-post-execution.", "labels": ["OpenZeppelin"]}, {"title": "An attacker can maliciously modify the context in which a fraud proof is run by first calling the run function of the OVM_ExecutionManager altering context-related variables (such as the isStatic flag), and then re-entering it during execution of a fraud proof.", "body": "An attacker can maliciously modify the context in which a fraud proof is run by first calling the run function of the OVM_ExecutionManager altering context-related variables (such as the isStatic flag), and then re-entering it during execution of a fraud proof.", "html_url": "https://blog.openzeppelin.com/optimism-smart-contracts-audit#an-attacker-can-maliciously-modify-the-context-in-which-a-fraud-proof-is-run-by-first-calling-the-run-function-of-the-ovm_executionmanager-altering-context-related-variables-(such-as-the-isstatic-flag),-and-then-re-entering-it-during-execution-of-a-fraud-proof.", "labels": ["OpenZeppelin"]}]