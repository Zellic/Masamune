[{"title": "Additionally, the error message returned on line 288 of GovernorBravoDelegate implies only the admin is allowed to call the acceptAdmin function. In actuality, the pendingAdmin role is the only one allowed to call this function. Since pendingAdmin and admin are two distinct roles, this error message should be changed to match this distinction.", "body": "Additionally, the error message returned on line 288 of GovernorBravoDelegate implies only the admin is allowed to call the acceptAdmin function. In actuality, the pendingAdmin role is the only one allowed to call this function. Since pendingAdmin and admin are two distinct roles, this error message should be changed to match this distinction.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#additionally,-the-error-message-returned-on-line-288-of-governorbravodelegate-implies-only-the-admin-is-allowed-to-call-the-acceptadmin-function.-in-actuality,-the-pendingadmin-role-is-the-only-one-allowed-to-call-this-function.-since-pendingadmin-and-admin-are-two-distinct-roles,-this-error-message-should-be-changed-to-match-this-distinction.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough. Furthermore, for consistency, consider reusing error messages when extremely similar conditions are checked.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough. Furthermore, for consistency, consider reusing error messages when extremely similar conditions are checked.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issues-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.-furthermore,-for-consistency,-consider-reusing-error-messages-when-extremely-similar-conditions-are-checked.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request 8. The error message on line 90 of GovernorBravoDelegate has not been changed. Consider updating this message for greater clarity.", "body": "Update: Partially fixed in pull request 8. The error message on line 90 of GovernorBravoDelegate has not been changed. Consider updating this message for greater clarity.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-partially-fixed-in-pull-request-8.-the-error-message-on-line-90-of-governorbravodelegate-has-not-been-changed.-consider-updating-this-message-for-greater-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Overflow protection unneeded", "body": "[N03] Overflow protection unneeded", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n03]-overflow-protection-unneeded", "labels": ["OpenZeppelin"]}, {"title": "Solidity version 0.8 and above has built-in overflow protection for math. The internal functions add256 and sub256 provide overflow checking functionality. Using solidity 0.8, these are unneeded.", "body": "Solidity version 0.8 and above has built-in overflow protection for math. The internal functions add256 and sub256 provide overflow checking functionality. Using solidity 0.8, these are unneeded.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#solidity-version-0.8-and-above-has-built-in-overflow-protection-for-math.-the-internal-functions-add256-and-sub256-provide-overflow-checking-functionality.-using-solidity-0.8,-these-are-unneeded.", "labels": ["OpenZeppelin"]}, {"title": "Consider upgrading to Solidity 0.8 and removing instances of add256 and sub256. Utilizing built-in checks reduces code size and therefore the surface for error.", "body": "Consider upgrading to Solidity 0.8 and removing instances of add256 and sub256. Utilizing built-in checks reduces code size and therefore the surface for error.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#consider-upgrading-to-solidity-0.8-and-removing-instances-of-add256-and-sub256.-utilizing-built-in-checks-reduces-code-size-and-therefore-the-surface-for-error.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Declare uint as uint256", "body": "[N04] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n04]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "In the audited contracts, there is a general use of unsigned integer variables declared as uint.", "body": "In the audited contracts, there is a general use of unsigned integer variables declared as uint.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-the-audited-contracts,-there-is-a-general-use-of-unsigned-integer-variables-declared-as-uint.", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider replacing all instances of uint to uint256.", "body": "To favor explicitness, consider replacing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#to-favor-explicitness,-consider-replacing-all-instances-of-uint-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Upgradeable proxy design can be improved", "body": "[N05] Upgradeable proxy design can be improved", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n05]-upgradeable-proxy-design-can-be-improved", "labels": ["OpenZeppelin"]}, {"title": "The new governance implementation has been designed to have the GovernorBravoDelegator acting as a proxy for the GovernorBravoDelegate contract.", "body": "The new governance implementation has been designed to have the GovernorBravoDelegator acting as a proxy for the GovernorBravoDelegate contract.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-new-governance-implementation-has-been-designed-to-have-the-governorbravodelegator-acting-as-a-proxy-for-the-governorbravodelegate-contract.", "labels": ["OpenZeppelin"]}, {"title": "In this sense, the GovernorBravoDelegate contract is just the logic implementation layer, and the proxy is in charge of forwarding any call through a delegatecall instruction, and of mantaining the storage of the proxied contract.", "body": "In this sense, the GovernorBravoDelegate contract is just the logic implementation layer, and the proxy is in charge of forwarding any call through a delegatecall instruction, and of mantaining the storage of the proxied contract.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-this-sense,-the-governorbravodelegate-contract-is-just-the-logic-implementation-layer,-and-the-proxy-is-in-charge-of-forwarding-any-call-through-a-delegatecall-instruction,-and-of-mantaining-the-storage-of-the-proxied-contract.", "labels": ["OpenZeppelin"]}, {"title": "Separating storage and logic into two separate contracts is a common pattern to follow when upgradeability of the logic layer is needed, but there are some downsides that must be addressed when implementing it.", "body": "Separating storage and logic into two separate contracts is a common pattern to follow when upgradeability of the logic layer is needed, but there are some downsides that must be addressed when implementing it.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#separating-storage-and-logic-into-two-separate-contracts-is-a-common-pattern-to-follow-when-upgradeability-of-the-logic-layer-is-needed,-but-there-are-some-downsides-that-must-be-addressed-when-implementing-it.", "labels": ["OpenZeppelin"]}, {"title": "Storage collision or function clashing are two of them.", "body": "Storage collision or function clashing are two of them.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#storage-collision-or-function-clashing-are-two-of-them.", "labels": ["OpenZeppelin"]}, {"title": "In the audited contracts, we did not identify any possible storage collisions, but there\u2019s a lack of control against function clashing. Moreover, the GovernorBravoDelegateStorageV1 in the GovernorBravoInterfaces.sol file defines variables of different types in mixed order and this is prone to errors when contract upgrades change the storage layout of the contracts.", "body": "In the audited contracts, we did not identify any possible storage collisions, but there\u2019s a lack of control against function clashing. Moreover, the GovernorBravoDelegateStorageV1 in the GovernorBravoInterfaces.sol file defines variables of different types in mixed order and this is prone to errors when contract upgrades change the storage layout of the contracts.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-the-audited-contracts,-we-did-not-identify-any-possible-storage-collisions,-but-there\u2019s-a-lack-of-control-against-function-clashing.-moreover,-the-governorbravodelegatestoragev1-in-the-governorbravointerfaces.sol-file-defines-variables-of-different-types-in-mixed-order-and-this-is-prone-to-errors-when-contract-upgrades-change-the-storage-layout-of-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Consider using the OpenZeppelin unstructured storage proxy pattern to improve design robustness and have proper control over possible function clashes and storage collisions. Alternatively, consider documenting how storage collisions and function clashes will be handled in future upgrades, and consider rearranging the declaration order of GovernorBravoDelegateStorageV1 so that it follows some predictable pattern.", "body": "Consider using the OpenZeppelin unstructured storage proxy pattern to improve design robustness and have proper control over possible function clashes and storage collisions. Alternatively, consider documenting how storage collisions and function clashes will be handled in future upgrades, and consider rearranging the declaration order of GovernorBravoDelegateStorageV1 so that it follows some predictable pattern.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#consider-using-the-openzeppelin-unstructured-storage-proxy-pattern-to-improve-design-robustness-and-have-proper-control-over-possible-function-clashes-and-storage-collisions.-alternatively,-consider-documenting-how-storage-collisions-and-function-clashes-will-be-handled-in-future-upgrades,-and-consider-rearranging-the-declaration-order-of-governorbravodelegatestoragev1-so-that-it-follows-some-predictable-pattern.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #9. Storage variables within GovernorBravoInterfaces are now declared in a predictable order.", "body": "Update: Fixed in pull request #9. Storage variables within GovernorBravoInterfaces are now declared in a predictable order.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-fixed-in-pull-request-#9.-storage-variables-within-governorbravointerfaces-are-now-declared-in-a-predictable-order.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Commented out code", "body": "[N01] Commented out code", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n01]-commented-out-code", "labels": ["OpenZeppelin"]}, {"title": "The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.", "body": "The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-settimeweight-function-contains-two-lines-of-commented-out-code-without-an-explanation.-as-is,-these-lines-provide-little-value-and-may-confuse-external-contributors.-consider-either-removing-these-lines-or-providing-an-explanation.-if-they-are-placeholders-for-a-future-implementation,-it-may-be-better-to-track-them-in-a-separate-document-for-discussion.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#34.", "body": "Update: Fixed in PR#34.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#34.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Functions return without parameters specified", "body": "[N02] Functions return without parameters specified", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n02]-functions-return-without-parameters-specified", "labels": ["OpenZeppelin"]}, {"title": "delegate and", "body": "delegate and", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#delegate-and", "labels": ["OpenZeppelin"]}, {"title": "delegateBySig functions within", "body": "delegateBySig functions within", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#delegatebysig-functions-within", "labels": ["OpenZeppelin"]}, {"title": "Tribe.sol execute the", "body": "Tribe.sol execute the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#tribe.sol-execute-the", "labels": ["OpenZeppelin"]}, {"title": "_delegate function in", "body": "_delegate function in", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_delegate-function-in", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. In the words of the Fei Team: \u201cWant to minimize changes to forked DAO contracts\u201d.", "body": "Update: Acknowledged. In the words of the Fei Team: \u201cWant to minimize changes to forked DAO contracts\u201d.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-acknowledged.-in-the-words-of-the-fei-team:-\u201cwant-to-minimize-changes-to-forked-dao-contracts\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N03] GenesisGroup is a token unnecessarily", "body": "[N03] GenesisGroup is a token unnecessarily", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n03]-genesisgroup-is-a-token-unnecessarily", "labels": ["OpenZeppelin"]}, {"title": "GenesisGroup contract is a token, however this token\u2019s use will last a maximum of", "body": "GenesisGroup contract is a token, however this token\u2019s use will last a maximum of", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#genesisgroup-contract-is-a-token,-however-this-token\u2019s-use-will-last-a-maximum-of", "labels": ["OpenZeppelin"]}, {"title": "3 days. The", "body": "3 days. The", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#3-days.-the", "labels": ["OpenZeppelin"]}, {"title": "mintsFGENtokens to users that deposit collateral, and then burns all", "body": "mintsFGENtokens to users that deposit collateral, and then burns all", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#mintsfgentokens-to-users-that-deposit-collateral,-and-then-burns-all", "labels": ["OpenZeppelin"]}, {"title": "redeem them for", "body": "redeem them for", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#redeem-them-for", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.", "body": "Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-acknowledged.-the-fei-team-decided-to-keep-the-genesisgroup-as-a-token,-since-they-expect-secondary-markets-to-exist-to-allow-users-exiting-genesis-by-selling-their-fgen-tokens.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Improper use of require", "body": "[N04] Improper use of require", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n04]-improper-use-of-require", "labels": ["OpenZeppelin"]}, {"title": "As outlined in the Solidity docs,", "body": "As outlined in the Solidity docs,", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#as-outlined-in-the-solidity-docs,", "labels": ["OpenZeppelin"]}, {"title": "_totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where", "body": "_totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_totalredeemablepooltokens-and-_redeemablepooltokens.-given-that-a-situation-where", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#51.", "body": "Update: Fixed in PR#51.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#51.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistencies around time", "body": "[N05] Inconsistencies around time", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n05]-inconsistencies-around-time", "labels": ["OpenZeppelin"]}, {"title": "While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.", "body": "While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#while-much-of-the-codebase-uses-timestamps-to-measure-time,-some-time-intervals-are-measured-instead-as-a-number-of-blocks.-in-these-instances,-comments-are-used-to-indicate-the-time-interval-desired-that-led-to-the-specified-number-of-blocks,-however,-these-comments-use-inconsistent-methods-of-estimation.", "labels": ["OpenZeppelin"]}, {"title": "For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.", "body": "For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#for-instance,-in-governoralpha-the-votingperiod-value,-17280,-is-accompanied-by-inline-documentation-that-assumes-15-second-block-times.-in-coreorchestrator,-the-incentive_growth_rate-value-has-inline-documentation-that-assumes-12-second-block-times.-the-whitepaper-and-other-project-documentation-generally-match-this-inline-documentation.", "labels": ["OpenZeppelin"]}, {"title": "Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours \u2013 a significant deviation that could result in user confusion.", "body": "Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours \u2013 a significant deviation that could result in user confusion.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#even-when-a-number-of-blocks-is-converted-to-a-time-interval-using-a-consistent-block-time-assumption,-those-approximations-can-deviate-from-reality.-inconsistent-block-time-assumptions-only-make-things-more-confusing.-block-times-can-and-will-be-variable,-and-the-actual-current-block-times-of-the-ethereum-network-have-been-closer-to-~13s.-this-means-that-the-actual-time-intervals-observed-in-production-could-deviate-from-the-documentation-by-as-much-as-13%.-for-example,-the-votingperiod-value-is-documented-as-being-equivalent-to-approximately-three-days,-when,-in-reality,-it-would-be-closer-to-two-days-and-fourteen-hours-\u2013-a-significant-deviation-that-could-result-in-user-confusion.", "labels": ["OpenZeppelin"]}, {"title": "To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.", "body": "To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#to-reduce-confusion-and-increase-the-predictability-of-time-intervals,-consider-using-block-timestamps-for-time-intervals-where-possible.-alternatively,-document-assumptions-about-block-times-clearly-and-consistently,-and-be-sure-to-explicitly-reflect-the-variability-of-the-time-intervals-they-represent.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.", "body": "Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#50.-now,-block-times-are-assumed-to-be-of-~13s.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistent coding style", "body": "[N06] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n06]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.", "body": "There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-general-inconsistencies-and-some-deviations-from-the-solidity-style-guide-throughout-the-codebase.-below-is-a-non-exhaustive-list-of-inconsistent-coding-styles-observed.", "labels": ["OpenZeppelin"]}, {"title": "While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:", "body": "While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#while-most-public-function-names-do-not-contain-an-underscore,-some-begin-with-one-underscore-and-others-begin-with-two-underscores.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The _feiTribeExchangeRate function", "body": "The _feiTribeExchangeRate function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-_feitribeexchangerate-function", "labels": ["OpenZeppelin"]}, {"title": "The __acceptAdmin function", "body": "The __acceptAdmin function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-__acceptadmin-function", "labels": ["OpenZeppelin"]}, {"title": "The __abdicate function", "body": "The __abdicate function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-__abdicate-function", "labels": ["OpenZeppelin"]}, {"title": "Some internal function names start with an underscore, while others do not. For example:", "body": "Some internal function names start with an underscore, while others do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-internal-function-names-start-with-an-underscore,-while-others-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "_writeCheckpoint and safe32 are both internal functions in the Tribe contract.", "body": "_writeCheckpoint and safe32 are both internal functions in the Tribe contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_writecheckpoint-and-safe32-are-both-internal-functions-in-the-tribe-contract.", "labels": ["OpenZeppelin"]}, {"title": "_setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.", "body": "_setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_setbeneficiary-and-setlockedtoken-are-both-internal-functions-in-the-lineartokentimelock-contract.", "labels": ["OpenZeppelin"]}, {"title": "Some parameters end with an underscore, while most do not. For example:", "body": "Some parameters end with an underscore, while most do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-parameters-end-with-an-underscore,-while-most-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The delay_ parameter in the setDelay function", "body": "The delay_ parameter in the setDelay function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-delay_-parameter-in-the-setdelay-function", "labels": ["OpenZeppelin"]}, {"title": "The pendingAdmin_ parameter in the setPendingAdmin function", "body": "The pendingAdmin_ parameter in the setPendingAdmin function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-pendingadmin_-parameter-in-the-setpendingadmin-function", "labels": ["OpenZeppelin"]}, {"title": "Some lines of code are very long. For example:", "body": "Some lines of code are very long. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-lines-of-code-are-very-long.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The propose function definition is 139 characters long.", "body": "The propose function definition is 139 characters long.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-propose-function-definition-is-139-characters-long.", "labels": ["OpenZeppelin"]}, {"title": "The getActions function definition is 164 characters long.", "body": "The getActions function definition is 164 characters long.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-getactions-function-definition-is-164-characters-long.", "labels": ["OpenZeppelin"]}, {"title": "Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:", "body": "Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-string-literals-are-surrounded-by-double-quotes-(\"),-while-others-are-surrounded-by-single-quotes-(').-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The Fei constructor uses double quotes to pass strings to the ERC20 function.", "body": "The Fei constructor uses double quotes to pass strings to the ERC20 function.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-fei-constructor-uses-double-quotes-to-pass-strings-to-the-erc20-function.", "labels": ["OpenZeppelin"]}, {"title": "The Fei constructor uses single quotes to pass a string to the keccak256 function.", "body": "The Fei constructor uses single quotes to pass a string to the keccak256 function.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-fei-constructor-uses-single-quotes-to-pass-a-string-to-the-keccak256-function.", "labels": ["OpenZeppelin"]}, {"title": "There is mixed use of spaces and tabs for indentation. For example:", "body": "There is mixed use of spaces and tabs for indentation. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-is-mixed-use-of-spaces-and-tabs-for-indentation.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.", "body": "The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-incentivize-function-uses-a-mixture-of-spaces-and-tabs-for-indentation,-sometimes-on-the-same-line.", "labels": ["OpenZeppelin"]}, {"title": "Some functions use named return variables, while others do not. For example:", "body": "Some functions use named return variables, while others do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-functions-use-named-return-variables,-while-others-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The IDOOrchestrator contract\u2019s init function declares named variables for returned values.", "body": "The IDOOrchestrator contract\u2019s init function declares named variables for returned values.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-idoorchestrator-contract\u2019s-init-function-declares-named-variables-for-returned-values.", "labels": ["OpenZeppelin"]}, {"title": "The ControllerOchestrator contract\u2019s init function does not declare a named variable for the returned value.", "body": "The ControllerOchestrator contract\u2019s init function does not declare a named variable for the returned value.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-controllerochestrator-contract\u2019s-init-function-does-not-declare-a-named-variable-for-the-returned-value.", "labels": ["OpenZeppelin"]}, {"title": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "body": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-enforcing-a-standard-coding-style,-such-as-that-provided-by-the-solidity-style-guide,-to-improve-the-project\u2019s-overall-legibility.-also-consider-using-a-linter-like-solhint-to-define-a-style-and-analyze-the-codebase-for-style-deviations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#54.", "body": "Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#54.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Inconsistent error message format", "body": "[N07] Inconsistent error message format", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n07]-inconsistent-error-message-format", "labels": ["OpenZeppelin"]}, {"title": "Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.", "body": "Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#error-messages-in-the-codebase-follow-different-formats.-in-particular,-messages-from-the-dao-contracts-conform-to-the-format-contract_name::function_name:-message,-while-other-messages-(like-those-in-the-genesisgroup-contract)-conform-to-the-format-contract_name:-message.-to-improve-readability-and-facilitate-debugging,-consider-following-a-consistent-format-across-all-error-messages.", "labels": ["OpenZeppelin"]}, {"title": "In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.", "body": "In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-addition,-some-error-messages-reference-an-incorrect-function-name,-such-as-those-found-in-the-transferfrom-function,-the-_movedelegates-function,-and-the-timelock-constructor.-these-should-be-resolved.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#47.", "body": "Update: Fixed in PR#47.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#47.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle", "body": "[N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n08]-inconsistent-methods-for-retrieving-cumulative-price-from-uniswap-oracle", "labels": ["OpenZeppelin"]}, {"title": "update function in the", "body": "UniswapOracle contract uses the  currentCumulativePrice function of the  _init function in the same contract retrieves the same values using  separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.  Update: Fixed in PR#46.  [N09] Incorrect GovernorAlpha name constant  The GovernorAlpha contract is forked from Compound, and maintains the name constant Compound Governor Alpha. Consider updating this to reflect the FEI protocol using the TRIBE governance token.  Update: Fixed in PR#35.  [N10] Interfaces omit some external functions  Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:  IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.  IFei omits the permit function that is implemented in Fei.  IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.  IPool omits the burnFrom function that is implemented in Pool.  IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: Fixed in PR#53.  [N11] Uninitializable global variable in LinearTimelockToken  lockedToken global variable in the  LinearTokenTimelock contract is only initializable by the  setLockedToken function. As is, the  Update: Fixed in PR#39.  [N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.  Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.  [N16] Using now instead of block.timestamp  There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:  Line 55 of Core.sol  Line 123 of GenesisGroup.sol  Line 40 and line 46 of Timed.sol  Line 175 and line 251 of Tribe.sol  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#42.  [N17] Proposals can be canceled in states that are unintuitive  The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.  The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal thats been defeated or has already expired.  To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.  Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.  [N18] Proposal struct storage is inefficient  Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the  canceled and  executed attributes immediately after the  proposer  Update: Not fixed. In the words of the Fei Team: We want to minimize changes to forked DAO contracts.  [N19] Redundant event definition  line 23 of the BondingCurveOracle contract. That contract inherits from  IBondingCurveOracle, which inherits from  IOracle where the same  line 12.  Consider removing redundant event definitions to improve overall code clarity and maintainability.  Update: Fixed in PR#52.  [N20] Some interfaces are not inherited  There are numerous interfaces that are not inherited by relevant contracts. Some examples include:  The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator interfaces, which are not inherited by the IDOOrchestrator or GenesisOrchestrator contracts, respectively.  The TimelockInterface interface, which is not inherited by the Timelock contract.  The CompInterface interface, which is not inherited by the Tribe contract.  Consider having contracts inherit from relevant interfaces wherever possible.  Update: Fixed in PR#7 and PR#10. The orchestrator variable was removed from the GenesisGroup contract, and the operator variable is now being used to check that the operator is allowed to perform sell operations.  [N21] Some interfaces are unnecessary or inconsistent with implementation  There are some interfaces used that may be unnecessary or are inconsistent with their implementations.  For instance, the IOrchestrator interface is defined and used for the orchestrator variable, but this orchestrator variable is never used.  In another case, the IIncentive interface defines an operator argument as part of the incentivize function, but this argument is never used in the implemented function.  Consider either removing unused interfaces and arguments, fully implementing them, or modifying them to be consistent with their implementations where appropriate.  Update: Fixed in PR#53.  [N22] Test and production constants in the same codebase  The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the systems integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.  Update: Fixed in PR#38. All the test constants were removed from the master branch.  [N23] Unnecessarily small integer sizes  In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:  The uint128 variables in the Pool contract  The uint96 variables in the Tribe contract  The uint32 variables in the Timed contract  In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.  Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.  Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: We are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible.  [N24] Unnecessary if statement  availableForRelease function fetches the elapsed time since the start timestamp using the  timestamp function inherited from the  Timed contract. It then  checks if this is larger than duration, and if so, caps the value at  timestamp function from the  caps the result to duration, so this  Update: Fixed in PR#8.  [N25] Unnecessary imports  Core.sol imports IFei.sol unnecessarily, because  Fei.sol already imports  Core.sol imports IERC20.sol unnecessarily, because  IFei.sol already imports  Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "UniswapOracle contract uses the", "body": "UniswapOracle contract uses the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#uniswaporacle-contract-uses-the", "labels": ["OpenZeppelin"]}, {"title": "currentCumulativePrice function of the", "body": "currentCumulativePrice function of the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#currentcumulativeprice-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "_init function in the same contract retrieves the same values using", "body": "_init function in the same contract retrieves the same values using", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_init-function-in-the-same-contract-retrieves-the-same-values-using", "labels": ["OpenZeppelin"]}, {"title": "separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.", "body": "separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#separate-individual-functions.-to-improve-legibility-and-facilitate-refactoring,-consider-using-a-consistent-method-for-retrieving-cumulative-prices-from-the-uniswap-oracle.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#46.", "body": "Update: Fixed in PR#46.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#46.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Incorrect GovernorAlpha name constant", "body": "[N09] Incorrect GovernorAlpha name constant", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n09]-incorrect-governoralpha-name-constant", "labels": ["OpenZeppelin"]}, {"title": "The GovernorAlpha contract is forked from Compound, and maintains the name constant \u201cCompound Governor Alpha\u201d. Consider updating this to reflect the FEI protocol using the TRIBE governance token.", "body": "The GovernorAlpha contract is forked from Compound, and maintains the name constant \u201cCompound Governor Alpha\u201d. Consider updating this to reflect the FEI protocol using the TRIBE governance token.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-governoralpha-contract-is-forked-from-compound,-and-maintains-the-name-constant-\u201ccompound-governor-alpha\u201d.-consider-updating-this-to-reflect-the-fei-protocol-using-the-tribe-governance-token.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#35.", "body": "Update: Fixed in PR#35.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#35.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Interfaces omit some external functions", "body": "[N10] Interfaces omit some external functions", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n10]-interfaces-omit-some-external-functions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:", "body": "Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#throughout-the-codebase-there-are-instances-of-interface-contracts-omitting-some-of-the-public-or-external-functions-that-their-corresponding-implementation-contracts-define.-some-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.", "body": "IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ibondingcurveoracle-omits-the-initialprice-function-that-is-implemented-in-bondingcurveoracle.", "labels": ["OpenZeppelin"]}, {"title": "IFei omits the permit function that is implemented in Fei.", "body": "IFei omits the permit function that is implemented in Fei.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ifei-omits-the-permit-function-that-is-implemented-in-fei.", "labels": ["OpenZeppelin"]}, {"title": "IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.", "body": "IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#igenesisgroup-omits-the-burnfrom-function-that-is-implemented-in-genesisgroup.", "labels": ["OpenZeppelin"]}, {"title": "IPool omits the burnFrom function that is implemented in Pool.", "body": "IPool omits the burnFrom function that is implemented in Pool.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ipool-omits-the-burnfrom-function-that-is-implemented-in-pool.", "labels": ["OpenZeppelin"]}, {"title": "IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.", "body": "IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#iuniswappcvcontroller-omits-the-mindistanceforreweight-that-is-implemented-in-ethuniswappcvcontroller.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "body": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#incomplete-interfaces-may-introduce-confusion-for-users,-developers,-and-auditors-alike.-to-improve-overall-code-legibility-and-minimize-confusion,-consider-modifying-the-interface-contracts-to-reflect-all-of-the-public-and-external-functions-from-their-respective-implementation-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#53.", "body": "[N22] Test and production constants in the same codebase  The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the systems integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.  Update: Fixed in PR#38. All the test constants were removed from the master branch.  [N23] Unnecessarily small integer sizes  In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:  The uint128 variables in the Pool contract  The uint96 variables in the Tribe contract  The uint32 variables in the Timed contract  In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.  Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.  Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: We are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible.  [N24] Unnecessary if statement  availableForRelease function fetches the elapsed time since the start timestamp using the  timestamp function inherited from the  Timed contract. It then  checks if this is larger than duration, and if so, caps the value at  timestamp function from the  caps the result to duration, so this  Update: Fixed in PR#8.  [N25] Unnecessary imports  Core.sol imports IFei.sol unnecessarily, because  Fei.sol already imports  Core.sol imports IERC20.sol unnecessarily, because  IFei.sol already imports  Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#53.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Uninitializable global variable in LinearTimelockToken", "body": "[N11] Uninitializable global variable in LinearTimelockToken", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n11]-uninitializable-global-variable-in-lineartimelocktoken", "labels": ["OpenZeppelin"]}, {"title": "lockedToken global variable in the", "body": "lockedToken global variable in the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#lockedtoken-global-variable-in-the", "labels": ["OpenZeppelin"]}, {"title": "LinearTokenTimelock contract is only initializable by the", "body": "LinearTokenTimelock contract is only initializable by the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#lineartokentimelock-contract-is-only-initializable-by-the", "labels": ["OpenZeppelin"]}, {"title": "setLockedToken function. As is, the", "body": "setLockedToken function. As is, the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#setlockedtoken-function.-as-is,-the", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#39.", "body": "[N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.  Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.  [N16] Using now instead of block.timestamp  There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:  Line 55 of Core.sol  Line 123 of GenesisGroup.sol  Line 40 and line 46 of Timed.sol  Line 175 and line 251 of Tribe.sol  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#42.  [N17] Proposals can be canceled in states that are unintuitive  The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.  The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal thats been defeated or has already expired.  To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.  Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.  [N18] Proposal struct storage is inefficient  Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the  canceled and  executed attributes immediately after the  proposer  Update: Not fixed. In the words of the Fei Team: We want to minimize changes to forked DAO contracts.  [N19] Redundant event definition  line 23 of the BondingCurveOracle contract. That contract inherits from  IBondingCurveOracle, which inherits from  IOracle where the same  line 12.  Consider removing redundant event definitions to improve overall code clarity and maintainability.  Update: Fixed in PR#52.  [N20] Some interfaces are not inherited  There are numerous interfaces that are not inherited by relevant contracts. Some examples include:  The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator interfaces, which are not inherited by the IDOOrchestrator or GenesisOrchestrator contracts, respectively.  The TimelockInterface interface, which is not inherited by the Timelock contract.  The CompInterface interface, which is not inherited by the Tribe contract.  Consider having contracts inherit from relevant interfaces wherever possible.  Update: Fixed in PR#7 and PR#10. The orchestrator variable was removed from the GenesisGroup contract, and the operator variable is now being used to check that the operator is allowed to perform sell operations.  [N21] Some interfaces are unnecessary or inconsistent with implementation  There are some interfaces used that may be unnecessary or are inconsistent with their implementations.  For instance, the IOrchestrator interface is defined and used for the orchestrator variable, but this orchestrator variable is never used.  In another case, the IIncentive interface defines an operator argument as part of the incentivize function, but this argument is never used in the implemented function.  Consider either removing unused interfaces and arguments, fully implementing them, or modifying them to be consistent with their implementations where appropriate.  Update: Fixed in PR#53.  [N22] Test and production constants in the same codebase  The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the systems integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.  Update: Fixed in PR#38. All the test constants were removed from the master branch.  [N23] Unnecessarily small integer sizes  In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:  The uint128 variables in the Pool contract  The uint96 variables in the Tribe contract  The uint32 variables in the Timed contract  In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.  Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.  Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: We are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible.  [N24] Unnecessary if statement  availableForRelease function fetches the elapsed time since the start timestamp using the  timestamp function inherited from the  Timed contract. It then  checks if this is larger than duration, and if so, caps the value at  timestamp function from the  caps the result to duration, so this  Update: Fixed in PR#8.  [N25] Unnecessary imports  Core.sol imports IFei.sol unnecessarily, because  Fei.sol already imports  Core.sol imports IERC20.sol unnecessarily, because  IFei.sol already imports  Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#39.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Constants not explicitly declared", "body": "[N12] Constants not explicitly declared", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n12]-constants-not-explicitly-declared", "labels": ["OpenZeppelin"]}, {"title": "There are occurrences of literal values being used with unexplained meaning. Some examples include:", "body": "There are occurrences of literal values being used with unexplained meaning. Some examples include:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-occurrences-of-literal-values-being-used-with-unexplained-meaning.-some-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "The literal value 10000 on line 22 of BondingCurveOrchestrator.sol", "body": "The literal value 10000 on line 22 of BondingCurveOrchestrator.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-literal-value-10000-on-line-22-of-bondingcurveorchestrator.sol", "labels": ["OpenZeppelin"]}, {"title": "The literal value -1 that is often used to represent an approval of \u2018infinite tokens\u2019 in Tribe.sol and throughout the codebase", "body": "The literal value -1 that is often used to represent an approval of \u2018infinite tokens\u2019 in Tribe.sol and throughout the codebase", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-literal-value--1-that-is-often-used-to-represent-an-approval-of-\u2018infinite-tokens\u2019-in-tribe.sol-and-throughout-the-codebase", "labels": ["OpenZeppelin"]}, {"title": "The literal value 2**112 on line 60 of UniswapOracle.sol", "body": "The literal value 2**112 on line 60 of UniswapOracle.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-literal-value-2**112-on-line-60-of-uniswaporacle.sol", "labels": ["OpenZeppelin"]}, {"title": "Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.", "body": "Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#literal-values-in-the-codebase-without-an-explained-meaning-make-the-code-harder-to-read,-understand-and-maintain-for-developers,-auditors,-and-external-contributors-alike.", "labels": ["OpenZeppelin"]}, {"title": "Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.", "body": "Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-defining-a-constant-variable-for-every-magic-value-used,-giving-it-a-clear-and-self-explanatory-name.-additionally,-for-complex-values,-inline-comments-explaining-how-they-were-calculated-or-why-they-were-chosen-are-highly-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.", "body": "Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-partially-fixed-in-pr#41.-only-the-occurrences-of-magic-constants-mentioned-above-were-explicitly-declared.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Missing and incomplete event emissions", "body": "[N13] Missing and incomplete event emissions", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n13]-missing-and-incomplete-event-emissions", "labels": ["OpenZeppelin"]}, {"title": "Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:", "body": "Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#several-constructors-do-not-emit-events-after-initializing-sensitive-variables-in-the-system,-but-when-those-variables-are-updated-using-setter-functions,-an-event-is-emitted.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The Core contract constructor does not emit the FeiUpdate event.", "body": "The Core contract constructor does not emit the FeiUpdate event.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-core-contract-constructor-does-not-emit-the-feiupdate-event.", "labels": ["OpenZeppelin"]}, {"title": "The OracleRef contract constructor does not emit the OracleUpdate event.", "body": "The OracleRef contract constructor does not emit the OracleUpdate event.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-oracleref-contract-constructor-does-not-emit-the-oracleupdate-event.", "labels": ["OpenZeppelin"]}, {"title": "The BondingCurve contract constructor does not emit the ScaleUpdate event.", "body": "The BondingCurve contract constructor does not emit the ScaleUpdate event.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-bondingcurve-contract-constructor-does-not-emit-the-scaleupdate-event.", "labels": ["OpenZeppelin"]}, {"title": "Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.", "body": "Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-setters,-like-the-setgenesisgroup-function,-do-not-emit-events.-whereas-others,-like-the-setfei-function-from-the-same-contract,-do-emit-an-event.", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).", "body": "Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-emitting-events-for-all-state-changing-functions,-including-those-in-contract-constructors.-in-addition,-consider-emitting-the-old-and-new-values-in-these-xupdate-events-to-help-track-changes-(e.g.-scaleupdate(uint256-_oldscale,-uint256-_newscale)).", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.", "body": "Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-partially-fixed-in-pr#52.-the-fei-team-elected-not-to-change-events-to-include-old-update-values.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Naming issues hinder understanding and clarity of the codebase", "body": "[N14] Naming issues hinder understanding and clarity of the codebase", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n14]-naming-issues-hinder-understanding-and-clarity-of-the-codebase", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are-to-rename:", "labels": ["OpenZeppelin"]}, {"title": "state to getProposalState.", "body": "state to getProposalState.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#state-to-getproposalstate.", "labels": ["OpenZeppelin"]}, {"title": "releaseWindow to releaseWindowDuration.", "body": "releaseWindow to releaseWindowDuration.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#releasewindow-to-releasewindowduration.", "labels": ["OpenZeppelin"]}, {"title": "timestamp to timeSinceStart.", "body": "timestamp to timeSinceStart.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#timestamp-to-timesincestart.", "labels": ["OpenZeppelin"]}, {"title": "d and t to duration and timePassed.", "body": "d and t to duration and timePassed.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#d-and-t-to-duration-and-timepassed.", "labels": ["OpenZeppelin"]}, {"title": "dst throughout Tribe.sol to destination.", "body": "dst throughout Tribe.sol to destination.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#dst-throughout-tribe.sol-to-destination.", "labels": ["OpenZeppelin"]}, {"title": "price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.", "body": "price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#price0-in-the-pcvdepositorchestrator-and-corresponding-interface-to-isprice0.", "labels": ["OpenZeppelin"]}, {"title": "_twfb to _timeWeightedFinalBalance.", "body": "_twfb to _timeWeightedFinalBalance.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_twfb-to-_timeweightedfinalbalance.", "labels": ["OpenZeppelin"]}, {"title": "threeHalfsRoot to threeHalvesPower or twoThirdsRoot.", "body": "threeHalfsRoot to threeHalvesPower or twoThirdsRoot.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#threehalfsroot-to-threehalvespower-or-twothirdsroot.", "labels": ["OpenZeppelin"]}, {"title": "twoThirdsRoot to twoThirdsPower or threeHalvesRoot.", "body": "twoThirdsRoot to twoThirdsPower or threeHalvesRoot.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#twothirdsroot-to-twothirdspower-or-threehalvesroot.", "labels": ["OpenZeppelin"]}, {"title": "calculateDeviation to deviationBelowPeg.", "body": "calculateDeviation to deviationBelowPeg.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#calculatedeviation-to-deviationbelowpeg.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming these parts of the contracts to increase overall code clarity.", "body": "Consider renaming these parts of the contracts to increase overall code clarity.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-renaming-these-parts-of-the-contracts-to-increase-overall-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.", "body": "Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#43-and-pr#31.-some-of-the-suggestions-above-were-implemented-by-the-fei-team.", "labels": ["OpenZeppelin"]}, {"title": "[N15] NatSpec comments missing", "body": "[N15] NatSpec comments missing", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n15]-natspec-comments-missing", "labels": ["OpenZeppelin"]}, {"title": "Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.", "body": "Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#many-functions-do-not-have-natspec-comments-(such-as-those-in-the-timelock-and-lineartokentimelock-contracts).-furthermore,-some-functions-do-not-have-any-comments,-for-example-those-in-the-bondingcurve-contract.-while-many-of-these-functions-implement-an-interface,-where-the-interface-does-include-natspec-comments,-there-are-several-exceptions-leaving-some-code-undocumented.-in-addition,-it-may-improve-readability-to-provide-natspec-comments-on-the-implemented-function,-rather-than-on-the-interface-definition.-consider-adding-natspec-comments-to-all-public-and-external-functions,-and-including-more-comments-throughout-function-implementations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.", "body": "Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-partially-fixed-in-pr#56-natspec-comments-were-moved-from-the-interfaces-to-the-implementations,-but-some-of-these-are-still-incomplete.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Using now instead of block.timestamp", "body": "[N16] Using now instead of block.timestamp", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n16]-using-now-instead-of-block.timestamp", "labels": ["OpenZeppelin"]}, {"title": "There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:", "body": "There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-instances-in-the-codebase-where-now-is-used-rather-than-block.timestamp-to-refer-to-the-block-time.-this-term-can-be-misleading-and-is-deprecated-in-more-recent-versions-of-solidity.-this-is-observed-in-the-following-contracts:", "labels": ["OpenZeppelin"]}, {"title": "Line 55 of Core.sol", "body": "Line 55 of Core.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-55-of-core.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 123 of GenesisGroup.sol", "body": "Line 123 of GenesisGroup.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-123-of-genesisgroup.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 40 and line 46 of Timed.sol", "body": "Line 40 and line 46 of Timed.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-40-and-line-46-of-timed.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 175 and line 251 of Tribe.sol", "body": "Line 175 and line 251 of Tribe.sol", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-175-and-line-251-of-tribe.sol", "labels": ["OpenZeppelin"]}, {"title": "Consider using block.timestamp for clarity and to facilitate future upgrades.", "body": "Consider using block.timestamp for clarity and to facilitate future upgrades.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-using-block.timestamp-for-clarity-and-to-facilitate-future-upgrades.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#42.", "body": "Update: Fixed in PR#42.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#42.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Proposals can be canceled in states that are unintuitive", "body": "[N17] Proposals can be canceled in states that are unintuitive", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n17]-proposals-can-be-canceled-in-states-that-are-unintuitive", "labels": ["OpenZeppelin"]}, {"title": "The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.", "body": "The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-governoralpha-contract-is-a-fork-of-a-compound-contract-by-the-same-name.-it-is-responsible-for-governance-proposals,-including-proposal-vote-collection,-creation,-cancellation-and-execution.", "labels": ["OpenZeppelin"]}, {"title": "The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal that\u2019s been defeated or has already expired.", "body": "The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal that\u2019s been defeated or has already expired.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-public-cancel-function-allows-a-proposal-to-be-canceled-only-if-certain-conditions-are-met.-specifically,-if-a-proposal-has-already-been-executed,-then-it-cannot-be-canceled.-however,-a-proposal-that-has-already-been-canceled-can-be-canceled-again,-so-too-can-a-proposal-that\u2019s-been-defeated-or-has-already-expired.", "labels": ["OpenZeppelin"]}, {"title": "To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.", "body": "To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#to-ensure-proposal-states-align-with-user-expectations,-and-to-avoid-any-confusion-for-outside-observers,-consider-also-disallowing-cancellations-for-proposals-that-are-canceled,-defeated-or-expired.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.", "body": "Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#61.-now,-governoralpha-proposals-can-only-be-cancelled-in-active-or-pending-states.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Proposal struct storage is inefficient", "body": "[N18] Proposal struct storage is inefficient", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n18]-proposal-struct-storage-is-inefficient", "labels": ["OpenZeppelin"]}, {"title": "Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the", "body": "Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#proposal-struct-uses-13-storage-slots.-to-improve-gas-efficiency,-consider-reorganizing-the-attributes-within-the-struct-to-reduce-the-storage-to-12-slots,-for-example,-by-moving-the", "labels": ["OpenZeppelin"]}, {"title": "canceled and", "body": "canceled and", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#canceled-and", "labels": ["OpenZeppelin"]}, {"title": "executed attributes immediately after the", "body": "executed attributes immediately after the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#executed-attributes-immediately-after-the", "labels": ["OpenZeppelin"]}, {"title": "proposer", "body": "proposer", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#proposer", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. In the words of the Fei Team: \u201cWe want to minimize changes to forked DAO contracts\u201d.", "body": "[L09] Transfers are not checked for success  transfer and  transferFrom functions return  from the _deposit function and  from the _withdraw function, but these result are not checked for success. Currently, the protocol only handles ETH,  SafeERC20 to catch failed transfers.  Update: Partially fixed in PR#12. An assertion was added when calling the transfer function from the WETH contract. The Fei Team decided not to check the FEI and TRIBE transfer and transferFrom return values since they inherit their behavior from the openzeppelin-contracts ERC20.sol contract, which will revert if something goes wrong.  [L10] UniswapOracle does not allow overflow  The update function in the UniswapOracle contract does not allow the cumulative price variables to overflow, against the guidance of the UniswapV2Pair oracle specification. This means the update function will eventually fail, despite the fact that Uniswap is designed to handle this overflow correctly. Consider permitting overflows to conform to the Uniswap Oracle specification.  Update: Fixed in PR#37.  Notes & Additional Information  [N01] Commented out code  The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.  Update: Fixed in PR#34.  [N02] Functions return without parameters specified  delegate and  delegateBySig functions within  Tribe.sol execute the  _delegate function in  Update: Acknowledged. In the words of the Fei Team: Want to minimize changes to forked DAO contracts.  [N03] GenesisGroup is a token unnecessarily  GenesisGroup contract is a token, however this tokens use will last a maximum of  3 days. The  mintsFGENtokens to users that deposit collateral, and then burns all  redeem them for  Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.  [N04] Improper use of require  As outlined in the Solidity docs,  _totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where  Update: Fixed in PR#51.  [N05] Inconsistencies around time  While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.  For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.  Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours  a significant deviation that could result in user confusion.  To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.  Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.  [N06] Inconsistent coding style  There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.  While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:  The _feiTribeExchangeRate function  The __acceptAdmin function  The __abdicate function  Some internal function names start with an underscore, while others do not. For example:  _writeCheckpoint and safe32 are both internal functions in the Tribe contract.  _setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.  Some parameters end with an underscore, while most do not. For example:  The delay_ parameter in the setDelay function  The pendingAdmin_ parameter in the setPendingAdmin function  Some lines of code are very long. For example:  The propose function definition is 139 characters long.  The getActions function definition is 164 characters long.  Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:  The Fei constructor uses double quotes to pass strings to the ERC20 function.  The Fei constructor uses single quotes to pass a string to the keccak256 function.  There is mixed use of spaces and tabs for indentation. For example:  The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.  Some functions use named return variables, while others do not. For example:  The IDOOrchestrator contracts init function declares named variables for returned values.  The ControllerOchestrator contracts init function does not declare a named variable for the returned value.  Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the projects overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.  Update: Fixed in PR#54.  [N07] Inconsistent error message format  Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.  In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.  Update: Fixed in PR#47.  [N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle  update function in the  UniswapOracle contract uses the  currentCumulativePrice function of the  _init function in the same contract retrieves the same values using  separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.  Update: Fixed in PR#46.  [N09] Incorrect GovernorAlpha name constant  The GovernorAlpha contract is forked from Compound, and maintains the name constant Compound Governor Alpha. Consider updating this to reflect the FEI protocol using the TRIBE governance token.  Update: Fixed in PR#35.  [N10] Interfaces omit some external functions  Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:  IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.  IFei omits the permit function that is implemented in Fei.  IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.  IPool omits the burnFrom function that is implemented in Pool.  IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: Fixed in PR#53.  [N11] Uninitializable global variable in LinearTimelockToken  lockedToken global variable in the  LinearTokenTimelock contract is only initializable by the  setLockedToken function. As is, the  Update: Fixed in PR#39.  [N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.  Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.  [N16] Using now instead of block.timestamp  There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:  Line 55 of Core.sol  Line 123 of GenesisGroup.sol  Line 40 and line 46 of Timed.sol  Line 175 and line 251 of Tribe.sol  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#42.  [N17] Proposals can be canceled in states that are unintuitive  The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.  The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal thats been defeated or has already expired.  To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.  Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.  [N18] Proposal struct storage is inefficient  Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the  canceled and  executed attributes immediately after the  proposer    [N19] Redundant event definition  line 23 of the BondingCurveOracle contract. That contract inherits from  IBondingCurveOracle, which inherits from  IOracle where the same  line 12.  Consider removing redundant event definitions to improve overall code clarity and maintainability.  Update: Fixed in PR#52.  [N20] Some interfaces are not inherited  There are numerous interfaces that are not inherited by relevant contracts. Some examples include:  The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator interfaces, which are not inherited by the IDOOrchestrator or GenesisOrchestrator contracts, respectively.  The TimelockInterface interface, which is not inherited by the Timelock contract.  The CompInterface interface, which is not inherited by the Tribe contract.  Consider having contracts inherit from relevant interfaces wherever possible.  Update: Fixed in PR#7 and PR#10. The orchestrator variable was removed from the GenesisGroup contract, and the operator variable is now being used to check that the operator is allowed to perform sell operations.  [N21] Some interfaces are unnecessary or inconsistent with implementation  There are some interfaces used that may be unnecessary or are inconsistent with their implementations.  For instance, the IOrchestrator interface is defined and used for the orchestrator variable, but this orchestrator variable is never used.  In another case, the IIncentive interface defines an operator argument as part of the incentivize function, but this argument is never used in the implemented function.  Consider either removing unused interfaces and arguments, fully implementing them, or modifying them to be consistent with their implementations where appropriate.  Update: Fixed in PR#53.  [N22] Test and production constants in the same codebase  The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the systems integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.  Update: Fixed in PR#38. All the test constants were removed from the master branch.  [N23] Unnecessarily small integer sizes  In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:  The uint128 variables in the Pool contract  The uint96 variables in the Tribe contract  The uint32 variables in the Timed contract  In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.  Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.  Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: We are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible.  [N24] Unnecessary if statement  availableForRelease function fetches the elapsed time since the start timestamp using the  timestamp function inherited from the  Timed contract. It then  checks if this is larger than duration, and if so, caps the value at  timestamp function from the  caps the result to duration, so this  Update: Fixed in PR#8.  [N25] Unnecessary imports  Core.sol imports IFei.sol unnecessarily, because  Fei.sol already imports  Core.sol imports IERC20.sol unnecessarily, because  IFei.sol already imports  Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-not-fixed.-in-the-words-of-the-fei-team:-\u201cwe-want-to-minimize-changes-to-forked-dao-contracts\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N19] Redundant event definition", "body": "[N19] Redundant event definition", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n19]-redundant-event-definition", "labels": ["OpenZeppelin"]}, {"title": "line 23 of the BondingCurveOracle contract. That contract inherits from", "body": "line 23 of the BondingCurveOracle contract. That contract inherits from", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-23-of-the-bondingcurveoracle-contract.-that-contract-inherits-from", "labels": ["OpenZeppelin"]}, {"title": "IBondingCurveOracle, which inherits from", "body": "IBondingCurveOracle, which inherits from", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ibondingcurveoracle,-which-inherits-from", "labels": ["OpenZeppelin"]}, {"title": "IOracle where the same", "body": "IOracle where the same", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ioracle-where-the-same", "labels": ["OpenZeppelin"]}, {"title": "line 12.", "body": "line 12.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#line-12.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing redundant event definitions to improve overall code clarity and maintainability.", "body": "Consider removing redundant event definitions to improve overall code clarity and maintainability.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-removing-redundant-event-definitions-to-improve-overall-code-clarity-and-maintainability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#52.", "body": "Update: Fixed in PR#52.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#52.", "labels": ["OpenZeppelin"]}, {"title": "[N20] Some interfaces are not inherited", "body": "[N20] Some interfaces are not inherited", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n20]-some-interfaces-are-not-inherited", "labels": ["OpenZeppelin"]}, {"title": "There are numerous interfaces that are not inherited by relevant contracts. Some examples include:", "body": "There are numerous interfaces that are not inherited by relevant contracts. Some examples include:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-numerous-interfaces-that-are-not-inherited-by-relevant-contracts.-some-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator interfaces, which are not inherited by the IDOOrchestrator or GenesisOrchestrator contracts, respectively.", "body": "The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator interfaces, which are not inherited by the IDOOrchestrator or GenesisOrchestrator contracts, respectively.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-orchestrator-interfaces-in-the-coreorchestrator-contract.-for-instance,-the-iidoorchestrator-and-the-igenesisorchestrator-interfaces,-which-are-not-inherited-by-the-idoorchestrator-or-genesisorchestrator-contracts,-respectively.", "labels": ["OpenZeppelin"]}, {"title": "The TimelockInterface interface, which is not inherited by the Timelock contract.", "body": "The TimelockInterface interface, which is not inherited by the Timelock contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-timelockinterface-interface,-which-is-not-inherited-by-the-timelock-contract.", "labels": ["OpenZeppelin"]}, {"title": "The CompInterface interface, which is not inherited by the Tribe contract.", "body": "The CompInterface interface, which is not inherited by the Tribe contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-compinterface-interface,-which-is-not-inherited-by-the-tribe-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider having contracts inherit from relevant interfaces wherever possible.", "body": "Consider having contracts inherit from relevant interfaces wherever possible.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-having-contracts-inherit-from-relevant-interfaces-wherever-possible.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#7 and PR#10. The orchestrator variable was removed from the GenesisGroup contract, and the operator variable is now being used to check that the operator is allowed to perform sell operations.", "body": "Update: Fixed in PR#7 and PR#10. The orchestrator variable was removed from the GenesisGroup contract, and the operator variable is now being used to check that the operator is allowed to perform sell operations.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#7-and-pr#10.-the-orchestrator-variable-was-removed-from-the-genesisgroup-contract,-and-the-operator-variable-is-now-being-used-to-check-that-the-operator-is-allowed-to-perform-sell-operations.", "labels": ["OpenZeppelin"]}, {"title": "[N21] Some interfaces are unnecessary or inconsistent with implementation", "body": "[N21] Some interfaces are unnecessary or inconsistent with implementation", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n21]-some-interfaces-are-unnecessary-or-inconsistent-with-implementation", "labels": ["OpenZeppelin"]}, {"title": "There are some interfaces used that may be unnecessary or are inconsistent with their implementations.", "body": "There are some interfaces used that may be unnecessary or are inconsistent with their implementations.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-some-interfaces-used-that-may-be-unnecessary-or-are-inconsistent-with-their-implementations.", "labels": ["OpenZeppelin"]}, {"title": "For instance, the IOrchestrator interface is defined and used for the orchestrator variable, but this orchestrator variable is never used.", "body": "For instance, the IOrchestrator interface is defined and used for the orchestrator variable, but this orchestrator variable is never used.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#for-instance,-the-iorchestrator-interface-is-defined-and-used-for-the-orchestrator-variable,-but-this-orchestrator-variable-is-never-used.", "labels": ["OpenZeppelin"]}, {"title": "In another case, the IIncentive interface defines an operator argument as part of the incentivize function, but this argument is never used in the implemented function.", "body": "In another case, the IIncentive interface defines an operator argument as part of the incentivize function, but this argument is never used in the implemented function.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-another-case,-the-iincentive-interface-defines-an-operator-argument-as-part-of-the-incentivize-function,-but-this-argument-is-never-used-in-the-implemented-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider either removing unused interfaces and arguments, fully implementing them, or modifying them to be consistent with their implementations where appropriate.", "body": "Consider either removing unused interfaces and arguments, fully implementing them, or modifying them to be consistent with their implementations where appropriate.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-either-removing-unused-interfaces-and-arguments,-fully-implementing-them,-or-modifying-them-to-be-consistent-with-their-implementations-where-appropriate.", "labels": ["OpenZeppelin"]}, {"title": "[N22] Test and production constants in the same codebase", "body": "[N22] Test and production constants in the same codebase", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n22]-test-and-production-constants-in-the-same-codebase", "labels": ["OpenZeppelin"]}, {"title": "The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the system\u2019s integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.", "body": "The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the system\u2019s integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-coreorchestrator-contract-defines-the-test_mode-boolean-variable-which-is-used-to-define-several-constants-in-the-system.-this-decreases-legibility-of-production-code,-and-makes-the-system\u2019s-integral-values-more-error-prone.-consider-instead-having-different-environments-for-production-and-testing,-with-different-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#38. All the test constants were removed from the master branch.", "body": "Update: Fixed in PR#38. All the test constants were removed from the master branch.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#38.-all-the-test-constants-were-removed-from-the-master-branch.", "labels": ["OpenZeppelin"]}, {"title": "[N23] Unnecessarily small integer sizes", "body": "[N23] Unnecessarily small integer sizes", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n23]-unnecessarily-small-integer-sizes", "labels": ["OpenZeppelin"]}, {"title": "In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:", "body": "In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-solidity,-using-integers-smaller-than-256-bits-tends-to-increase-gas-costs-because-the-ethereum-virtual-machine-must-perform-additional-operations-to-zero-out-the-unused-bits.-this-can-be-justified-by-savings-in-storage-costs-in-some-scenarios,-however,-that-is-not-generally-the-case-in-this-codebase.-in-several-contracts,-unsigned-integers-are-being-unnecessarily-sized-less-than-256-bits.-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "The uint128 variables in the Pool contract", "body": "The uint128 variables in the Pool contract", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-uint128-variables-in-the-pool-contract", "labels": ["OpenZeppelin"]}, {"title": "The uint96 variables in the Tribe contract", "body": "The uint96 variables in the Tribe contract", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-uint96-variables-in-the-tribe-contract", "labels": ["OpenZeppelin"]}, {"title": "The uint32 variables in the Timed contract", "body": "The uint32 variables in the Timed contract", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-uint32-variables-in-the-timed-contract", "labels": ["OpenZeppelin"]}, {"title": "In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.", "body": "In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-some-instances,-these-smaller-integer-sizes-can-cause-function-reverts-earlier-than-necessary.-in-particular,-since-the-_timestamp-and-_inittimed-functions-cast-block-times-to-uint32-values,-functions-using-the-timed-contract-to-manage-control-flow-will-revert-beginning-february-7,-2106-at-6:28:16-am-gmt.", "labels": ["OpenZeppelin"]}, {"title": "Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.", "body": "Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-using-integers-of-size-256-bits-to-improve-gas-efficiency-and-mitigate-function-reverts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: \u201cWe are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible\u201d.", "body": "Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: \u201cWe are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible\u201d.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-partially-fixed-in-pr#37,-pr#44.-in-the-words-of-the-fei-team:-\u201cwe-are-not-fixing-the-issue-in-tribe.sol-as-this-is-a-forked-compound-contract-and-we-wish-to-keep-it-as-untouched-as-possible\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N24] Unnecessary if statement", "body": "[N24] Unnecessary if statement", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n24]-unnecessary-if-statement", "labels": ["OpenZeppelin"]}, {"title": "availableForRelease function fetches the elapsed time since the start timestamp using the", "body": "availableForRelease function fetches the elapsed time since the start timestamp using the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#availableforrelease-function-fetches-the-elapsed-time-since-the-start-timestamp-using-the", "labels": ["OpenZeppelin"]}, {"title": "timestamp function inherited from the", "body": "timestamp function inherited from the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#timestamp-function-inherited-from-the", "labels": ["OpenZeppelin"]}, {"title": "Timed contract. It then", "body": "Timed contract. It then", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#timed-contract.-it-then", "labels": ["OpenZeppelin"]}, {"title": "checks if this is larger than duration, and if so, caps the value at", "body": "checks if this is larger than duration, and if so, caps the value at", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#checks-if-this-is-larger-than-duration,-and-if-so,-caps-the-value-at", "labels": ["OpenZeppelin"]}, {"title": "timestamp function from the", "body": "timestamp function from the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#timestamp-function-from-the", "labels": ["OpenZeppelin"]}, {"title": "caps the result to duration, so this", "body": "caps the result to duration, so this", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#caps-the-result-to-duration,-so-this", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#8.", "body": "Update: Fixed in PR#8.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#8.", "labels": ["OpenZeppelin"]}, {"title": "[N25] Unnecessary imports", "body": "[N25] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n25]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "Core.sol imports IFei.sol unnecessarily, because", "body": "Core.sol imports IFei.sol unnecessarily, because", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#core.sol-imports-ifei.sol-unnecessarily,-because", "labels": ["OpenZeppelin"]}, {"title": "Fei.sol already imports", "body": "Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#fei.sol-already-imports", "labels": ["OpenZeppelin"]}, {"title": "Core.sol imports IERC20.sol unnecessarily, because", "body": "Core.sol imports IERC20.sol unnecessarily, because", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#core.sol-imports-ierc20.sol-unnecessarily,-because", "labels": ["OpenZeppelin"]}, {"title": "IFei.sol already imports", "body": "IFei.sol already imports", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ifei.sol-already-imports", "labels": ["OpenZeppelin"]}, {"title": "Pool.sol imports SafeMathCopy.sol without using it.", "body": "Pool.sol imports SafeMathCopy.sol without using it.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#pool.sol-imports-safemathcopy.sol-without-using-it.", "labels": ["OpenZeppelin"]}, {"title": "BondingCurve.sol imports AccessControl.sol without using it.", "body": "BondingCurve.sol imports AccessControl.sol without using it.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#bondingcurve.sol-imports-accesscontrol.sol-without-using-it.", "labels": ["OpenZeppelin"]}, {"title": "EthUniswapPCVController.sol imports IOracle.sol without using it.", "body": "EthUniswapPCVController.sol imports IOracle.sol without using it.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ethuniswappcvcontroller.sol-imports-ioracle.sol-without-using-it.", "labels": ["OpenZeppelin"]}, {"title": "UniswapIncentive.sol imports IOracle.sol without using it.", "body": "UniswapIncentive.sol imports IOracle.sol without using it.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#uniswapincentive.sol-imports-ioracle.sol-without-using-it.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing redundant and unused imports to improve legibility.", "body": "Consider removing redundant and unused imports to improve legibility.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-removing-redundant-and-unused-imports-to-improve-legibility.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#45.", "body": "Update: Fixed in PR#45.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#45.", "labels": ["OpenZeppelin"]}, {"title": "[N26] Unreachable, incorrect error message", "body": "[N26] Unreachable, incorrect error message", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n26]-unreachable,-incorrect-error-message", "labels": ["OpenZeppelin"]}, {"title": "In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads \u201cUniRef: price exceeds peg\u201d, but should read \u201cUniRef: peg exceeds price\u201c.", "body": "In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads \u201cUniRef: price exceeds peg\u201d, but should read \u201cUniRef: peg exceeds price\u201c.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-the-calculatedeviation-function-in-the-uniref-contract-there-is-a-subtraction-with-a-provided-error-message-argument.-this-error-message-is-logically-unreachable,-but-it-is-also-incorrect.-it-currently-reads-\u201cuniref:-price-exceeds-peg\u201d,-but-should-read-\u201cuniref:-peg-exceeds-price\u201c.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing or correcting the error message to improve code clarity.", "body": "Consider removing or correcting the error message to improve code clarity.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-removing-or-correcting-the-error-message-to-improve-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#37.", "body": "[N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#37.", "labels": ["OpenZeppelin"]}, {"title": "[N27] Unnecessary inheritance", "body": "[N27] Unnecessary inheritance", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n27]-unnecessary-inheritance", "labels": ["OpenZeppelin"]}, {"title": "The following contracts inherit both ERC20 and ERC20Burnable:", "body": "The following contracts inherit both ERC20 and ERC20Burnable:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-following-contracts-inherit-both-erc20-and-erc20burnable:", "labels": ["OpenZeppelin"]}, {"title": "Fei", "body": "Protocol team asked us to review and audit their Protocol smart contracts. We looked at the code and now publish our results.  Scope  We audited commit 29aeefddd97f31c7f2a598fb3dca3ef24dc0beb4 of the fei-protocol/fei-protocol-core repository. In scope were the contracts directly inside the /contracts folder, however the contracts within /contract/mocks were out of scope. Note: the repository in question is private at the time of writing, so many hyperlinks will only work for the  team.  System overview   Protocol is the first protocol creating a stablecoin using a new stability mechanism called direct incentives. This stablecoin, named FEI, is not fully collateralized, but instead uses a system of incentives to encourage trading activity that brings the token back to its USD peg. This is achieved by attaching incentives to trades through an ETH/FEI Uniswap Pair, that mint or burn FEI tokens in certain situations.  The protocol uses a bonding curve to price FEI, implements a Protocol Controlled Value to enable the incentive design, and has a governance token called TRIBE to allow user-controlled upgrades to the system  Below we summarize some of the key aspects of the  Protocol.  Protocol Controlled Value  In many DeFi applications, all of the funds deposited within the protocol actually belong to a user, and the user is minted tokens to represent the amount that the protocol owes them. Protocol Controlled Value (PCV) instead is money that the protocol owns outright  that is not owed to a user. This value is what allows the protocol to provide incentives and influence market conditions. The protocols bonding curve is what allows the protocol to calculate and accrue PCV.  Genesis Period  The Genesis period is 3 days in which a contract known as the GenesisGroup collects the ETH needed to bootstrap the protocol. During this time, any user can deposit ETH into the contract, and receive FGEN tokens in return. These tokens entitle the user to an amount of FEI and TRIBE tokens as a reward after launch. Users contributing to the Genesis are guaranteed that they will receive FEI at a maximum price of $0.90, which should then be pegged to $1 after launch and after a thawing period.  The Genesis period ends after 3 days, or earlier if the protocol collects enough ETH. The contract will then add liquidity to the FEI/TRIBE and ETH/FEI Uniswap pools, initialize the bonding curve oracle, and deposit rewards back into the GenesisGroup contracts for contributors to collect.   Reward pool  Incentive contracts  Privileged roles  The admin will be able to:  Add and revoke roles,  Perform emergency reweights to restore the FEI peg,  Modify the scale, buffer, and allocations of the bonding curve,  Change the address of the FEI token,  Transfer/allocate unallocated TRIBE tokens,  Flip the kill switch for the bonding curve oracle,  Change the oracle durations used to calculate time-weighted average prices,  Change the protocol controlled value (PCV) deposit address,  Change the reweight incentive amount,  Change the minimum distance from the peg required for reweight incentivization,  Change incentive contract addresses,  Add and remove addresses that are exempt from incentivizations,  Change the growth rate and time weight for the incentivization calculations,  Withdraw FEI from the Uniswap pool back to the protocol treasury,  Setup new token pairs for use by the protocol,  Change oracle addresses,  Change the genesis group address,  Assign a new beneficiary for the IDO contract  There are functions in place to transfer these roles to other addresses and to allow for the abdication of the Guardian role in the future.  In addition to these roles, there are also Minter, Burner, and PCV Controller roles. The Governor can assign these roles to any address, and has all of their abilities.  They can:  Mint new tokens,  Burn tokens held by any address  Security model and trust assumptions  Voters use TRIBE to vote. It is paid out to liquidity providers, traders, and referrers. TRIBE can be delegated and is transferable. The voting system has the ability to arbitrarily update many critical variables and contracts. This includes the ability to change pricing oracles, which means the voting system has all the powers of an oracle, along with many more. In this audit, we assume that the voters will not pass proposals that would harm FEI.  The  protocol is pegged to the exchange rate of ETH/USDC as a proxy for ETH/USD. Therefore, FEI is exposed to the risks inherent in USDC. In this audit, we do not assess the risks in the USDC protocol and their effects on the  protocol.  The  protocol is initialized to use the Uniswap pricing oracle, which is integral to the system. During this audit, we assumed that the administrator and price feeds are available, honest, and not compromised.  Findings  Here we present three client-reported issues, followed by our findings.  Bypass burn penalty (client reported)  The client reported an economic vulnerability that could be used to bypass the burn penalty applied upon selling FEI. Contracts which hold pooled FEI owned by users and with the ability to withdraw to an arbitrary address, the following attack is possible:  Withdraw FEI from the pooled contract to the FEI/ETH Uniswap pool.  The burn penalty is then borne by the contract which holds FEI pooled from other users.  Execute the swap on Uniswap to receive ETH.  This attack can be executed by a secondary Uniswap market, or other contracts that pool ERC20 tokens. This has been addressed in PR#10.  Rounding errors during reweight (client reported)  The client reported an issue that affects the accuracy of reweighting to re-establish the peg. If a reweight happens when the protocol is the only liquidity provider, the dust left in the Uniswap pool prevents accuracy when reweighting the peg. The error can be over 5% at times. This has been addressed in PR#22.  Attacker can manipulate ETH/FEI spot price on allocations (client reported)  The client reported a vulnerability in which an attacker can manipulate the spot price of the ETH/FEI Uniswap pool by performing a flash loan to borrow ETH and buy FEI, moving the price up right before an allocation is executed, and sell that FEI amount after the allocation is done to make a profit. This has been addressed in PR#81.  Update  Most of the following issues have been either fixed, partially fixed, or acknowledged by the  Team. Our analysis of the mitigations is limited to the specific changes made to cover the issues, and disregards all other unrelated changes in the pull requests and in the codebase.  Critical severity  [C01] Anyone can steal all the TRIBE tokens from the reward pool  The Pool contract allows users to deposit FEI/TRIBE liquidity pool (LP) tokens and earn TRIBE tokens as a reward. The amount of TRIBE that a user can claim is given by the following formula:  Where releasedReward is the total amount of released reward tokens from the total amount available, redeemable", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#fei", "labels": ["OpenZeppelin"]}, {"title": "Pool", "body": "Pool", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#pool", "labels": ["OpenZeppelin"]}, {"title": "GenesisGroup", "body": "contracts for contributors to collect.  Fei Reward pool  Incentive contracts  Privileged roles  The admin will be able to:  Add and revoke roles,  Perform emergency reweights to restore the FEI peg,  Modify the scale, buffer, and allocations of the bonding curve,  Change the address of the FEI token,  Transfer/allocate unallocated TRIBE tokens,  Flip the kill switch for the bonding curve oracle,  Change the oracle durations used to calculate time-weighted average prices,  Change the protocol controlled value (PCV) deposit address,  Change the reweight incentive amount,  Change the minimum distance from the peg required for reweight incentivization,  Change incentive contract addresses,  Add and remove addresses that are exempt from incentivizations,  Change the growth rate and time weight for the incentivization calculations,  Withdraw FEI from the Uniswap pool back to the protocol treasury,  Setup new token pairs for use by the protocol,  Change oracle addresses,  Change the genesis group address,  Assign a new beneficiary for the IDO contract  There are functions in place to transfer these roles to other addresses and to allow for the abdication of the Guardian role in the future.  In addition to these roles, there are also Minter, Burner, and PCV Controller roles. The Governor can assign these roles to any address, and has all of their abilities.  They can:  Mint new tokens,  Burn tokens held by any address  Security model and trust assumptions  Voters use TRIBE to vote. It is paid out to liquidity providers, traders, and referrers. TRIBE can be delegated and is transferable. The voting system has the ability to arbitrarily update many critical variables and contracts. This includes the ability to change pricing oracles, which means the voting system has all the powers of an oracle, along with many more. In this audit, we assume that the voters will not pass proposals that would harm FEI.  The Fei protocol is pegged to the exchange rate of ETH/USDC as a proxy for ETH/USD. Therefore, FEI is exposed to the risks inherent in USDC. In this audit, we do not assess the risks in the USDC protocol and their effects on the Fei protocol.  The Fei protocol is initialized to use the Uniswap pricing oracle, which is integral to the system. During this audit, we assumed that the administrator and price feeds are available, honest, and not compromised.  Findings  Here we present three client-reported issues, followed by our findings.  Bypass burn penalty (client reported)  The client reported an economic vulnerability that could be used to bypass the burn penalty applied upon selling FEI. Contracts which hold pooled FEI owned by users and with the ability to withdraw to an arbitrary address, the following attack is possible:  Withdraw FEI from the pooled contract to the FEI/ETH Uniswap pool.  The burn penalty is then borne by the contract which holds FEI pooled from other users.  Execute the swap on Uniswap to receive ETH.  This attack can be executed by a secondary Uniswap market, or other contracts that pool ERC20 tokens. This has been addressed in PR#10.  Rounding errors during reweight (client reported)  The client reported an issue that affects the accuracy of reweighting to re-establish the peg. If a reweight happens when the protocol is the only liquidity provider, the dust left in the Uniswap pool prevents accuracy when reweighting the peg. The error can be over 5% at times. This has been addressed in PR#22.  Attacker can manipulate ETH/FEI spot price on allocations (client reported)  The client reported a vulnerability in which an attacker can manipulate the spot price of the ETH/FEI Uniswap pool by performing a flash loan to borrow ETH and buy FEI, moving the price up right before an allocation is executed, and sell that FEI amount after the allocation is done to make a profit. This has been addressed in PR#81.  Update  Most of the following issues have been either fixed, partially fixed, or acknowledged by the Fei Team. Our analysis of the mitigations is limited to the specific changes made to cover the issues, and disregards all other unrelated changes in the pull requests and in the codebase.  Critical severity  [C01] Anyone can steal all the TRIBE tokens from the reward pool  The FeiPool contract allows users to deposit FEI/TRIBE liquidity pool (LP) tokens and earn TRIBE tokens as a reward. The amount of TRIBE that a user can claim is given by the following formula:  Where releasedReward is the total amount of released reward tokens from the total amount available, redeemablePoolTokens is the amount of reward tokens that the user can claim, and totalRedeemablePoolTokens is the total amount of redeemable pool tokens by all the stakers participating in the pool. Both redeemablePoolTokens and totalRedeemablePoolTokens increase over time, which means that the more time the user leaves their stake in the pool, the more rewards they will be able to claim.  The issue lies in the fact that burnFrom function from the Pool contract allows anyone that holds LP tokens to burn them and, therefore, manipulate the amountReward value returned by the redeemableReward function. An attacker can do the following:  Deposit an amount of FEI/TRIBE LP tokens when the pool opens from two different accounts, account A and account B.  Let some time pass so that the numerator in the formula that calculates the amountReward value equals or is near the pools rewardBalance, which includes both the released and unreleased rewards. This will not take much time since the numerator is proportional to the released amount of rewards given by the releasedReward function, the number of tokens staked, and the remaining time of the pool.  Burn an amount of _totalRedeemablePoolTokens - 1 pool tokens from account B. This way, the denominator in the formula will equal 1, and the amountReward value returned by the redeemableReward function will equal the pools rewardBalance as calculated in 2.  Withdraw or claim rewards from account A.  Wait until the pool closes and withdraw staked tokens from account B.  Since the FeiPool contract holds 20% of TRIBEs total supply, the attacker would be stealing 200,000,000 TRIBE tokens in the worst case. A step-by-step proof-of-concept exploit for this scenario can be found in this secret gist.  Consider disallowing external burns by removing the ERC20Burnable inheritance from the Pool contract, and only allow burning to be an internal operation triggered by claiming rewards.  Update: Fixed in PR#32. The FeiPool contract no longer inherits from the ERC20Burnable contract. Additionally, the burnFrom public function was removed, and a new _burnFrom function was added to be used in the _withdraw function.  [C02] ETH can get stuck in the  contract  purchase function, which mints them  maxGenesisPrice, or the genesis period has ended, the  launch function can be called to transfer all the ETH collected to  PCVDeposit contracts, and launch the rest of the protocol. After  redeem function to cash in their  However, if the launch function gets called due to the maxGenesisPrice being reached, the contract does not prevent purchase from being called by users. This would likely happen when users race to contribute to the genesis before launch. This has the following negative consequences:  The ETH deposited by users will become locked in the  contract. This is due to the fact that launch is the only function that can transfer ETH out of the , and it cannot be called a second time  enforced by complete reverting if someone tries to call launch a second time.  The additional calls to purchase continue to mint FGEN to the callers. This increases the totalSupply of FGEN, and skews the calculation in _fgenRatio, meaning that valid contributors to the  will not receive their rightful allocation of TRIBE and FEI.  Consider adding a condition to the purchase function that prevents it from being called if hasCompleted is true.  Update: Fixed in PR#24. The Fei Team decided to remove the isAtMaxPrice condition that allowed the protocol to be launched before the genesis period passed. Additionally, a condition was added to check whether the genesis was launched when calling the purchase function.  [C03] Anyone can partially bypass the FEI sell penalty to earn a profit  The UniswapIncentive contract defines the incentives to be applied when users buy or sell FEI tokens in the ETH/FEI Uniswap pool. On the one hand, when a user sells tokens and causes a deviation in the price peg, a sell penalty is applied and the protocol burns a portion of their tokens. This penalty is calculated using the following formulas:  Where deviation is the price deviation from the peg caused by selling an amountSold amount, and amountSold is the amount sold by the user. This sell penalty will be burned from the users account after the sell operation is performed.  On the other hand, when a user buys FEI tokens to move the price back towards the peg, a buy incentive is applied and the protocol mints tokens to them. This incentive is calculated as follows:  time-weighted function,  timeGranularity is the granularity, and  sellIncentiveMultiplier is the sell penalty multiplier described above. Notably, when the  buyIncentiveMultiplier is equal or greater than the sellIncentiveMultiplier,  incentive parity is reached, and the  do a reweight to move the price back to the peg if necessary.  Moreover, since performing a buy operation in the first place will either decrease or reset the time-weight function, other users may not have enough incentive to move the price back to the peg, and since there will no longer be incentive parity, the EthUniswapPCVController will not be able to do a conventional reweight, instead having to use the force reweight function.  Consider revising the sell incentive multiplier formula so that multiple sell operations will not decrease the sell penalty, or consider revising the buy incentive multiplier so that even after performing multiple sell operations, the attack is not profitable.  Update: Fixed in PR#63. The buy incentive multiplier was capped to 30% of the sell incentive multiplier to make this attack unprofitable.  [C04] Users can claim unreleased rewards or have their funds locked  FeiPool contract allows users to  deposit  withdraw their LP tokens and get the accrued rewards. To track users staked amounts and the total staked amount in the pool, the contract defines the  incremented each time a user deposits liquidity pool tokens into the pool.  When a user withdraws their staked tokens and accrued rewards, only the users stakedBalance is updated, while the totalStaked variable remains the same. Since the redeemableRewards function depends on the totalStaked variable to compute the amount of redeemable rewards in the _totalRedeemablePoolTokens function, the total amount of redeemable tokens for the user is miscalculated, resulting in more tokens being released than what was intended.  claims and  withdrawals, while the  balance variable from the  total variable. This would prevent users from claiming rewards and withdrawing their stake due to  a Redeemable underflow require statement.  Consider decrementing the totalStaked variable in the _withdraw function to accurately track the total stake in the pool and avoid these scenarios.  Update: Fixed in PR#19. The totalStaked amount is now being decremented in the _withdraw function.  [C05] Anyone with enough liquidity to reach the maxGenesisPrice can make profit from genesis   contract allows users to deposit ETH through the  purchase function in exchange for  genesis period has ended or after the maxGenesisPrice has been reached, the protocol can be launched via the  launch function (which can be called by anyone). After the protocol is launched, users will be able to  redeem  Since all of the operations mentioned above can be executed in the same transaction, a flash loan could be used to steal ETH using the following attack:  Borrow the amount of ETH necessary to increase the average price to the maxGenesisPrice.  Launch the protocol by calling the launch function. This operation will:  Initialize the bonding curve oracle, which will start with an initial price that equals the  FEI/TRIBE Uniswap pool at an exchange rate based on the amount of  amount of TRIBE held by the IDO contract  and the  exchangeRateDiscount variable.  ETH/FEI Uniswap pool.  based on the ratio of FGEN owned.  The amount used by the attacker should be such that they can afford the price impact on Uniswaps ETH/FEI pair, and still make profit. A spreadsheet that calculates this amount can be found here.  If this attack is performed, then:  The ETH/FEI Uniswap pool price will be below the bonding curve oracles peg, forcing a reweight, or other users in the system will try to restore the peg by interacting with the incentive contracts.  The ETH/FEI Uniswap pool will be launched with less ETH than expected.  The FEI/TRIBE pool will be launched with less FEI and a lower price than expected.  The attacker will steal around 800,000 USD in ETH from the protocol.  Note that this attack is feasible even without a flash loan, for example, by a user with enough liquidity to reach the maxGenesisPrice with a purchase.  Consider flagging the block where the maxGenesisPrice is reached in a global variable and restricting the launch function to only be called when the current block number is higher than this value. Additionally, consider revising the exchangeRateDiscount amount so that this scenario is not profitable for a user with enough liquidity nor for an attacker using a flash loan.  Update: Fixed in PR#27. The flash loan attack was fixed by disallowing to launch the protocol and redeem FEI and TRIBE in the same transaction. Additionally, the initial bonidng curve oracle price has been decreased to drastically reduce the profit that users with enough liquidity would make by selling all their FEI and TRIBE tokens right after the protocol is launched.  High severity  [H01] Users participating in Genesis can get fewer FEI and TRIBE than expected  The  contract stops the genesis period earlier than its duration, if enough ETH has been contributed to reach the maximum price of FEI paid by the Genesis Group. This attractive maximum price incentivizes users to contribute to the  to bootstrap the protocol.  purchase calls after the  maxGenesisPrice has been reached. Even with a solution to  ETH can get stuck in the  contract issue  launch function is called. These additional purchases could push the average price for the  Consider implementing a check in the purchase function that prevents it from being executed if the purchase causes the maxGenesisPrice to be exceeded. Notably, if the maximum price has not been reached, but a purchase would cause the maximum price to be exceeded, some or all of the purchase amount should be rejected.  Update: Fixed in PR#24. The Fei Team decided to remove the isAtMaxPrice condition to allow the protocol to be launched before the genesis period passed, and added a condition to check whether the genesis was launched when calling the purchase function. Additionally, the initial FEI price has been capped in the BondingCurve contract so that it does not exceed the buffer adjusted amount, which means that if enough ETH is collected in genesis, users will not benefit from a discount in FEI.  [H02] Outdated oracle prices being used throughout the protocol  UniswapOracle contract and the  BondingCurveOracle contract are used to  read the current  While the oracle is updated using the update function in a number of function calls, there are some calls within the system that read the price without updating it first. We understand that the Fei team is intending to manually update the oracle, however this poses a risk during times of high-volatility or high network-congestion.  Locations in the code that do not update the oracle price include:  Within the function reweight in the EthUniswapPCVController contract, the function first determines whether reweightEligible. To determine this, it calculates the deviation from the current peg. However this peg is fetched without first updating the Uniswap Oracle. This means that the determination of whether to reweight is based on an outdated price, and the protocol could end up not reweighting when it should.  The call to isAtMaxPrice to determine whether the  can execute launch reads the peg without updating it. This might cause the protocol to launch before the max has been reached, or to not launch when it should.  Functions in the BondingCurve contract that rely on the peg, for example getCurrentPrice, and getAdjustedAmount.  The thaw function in the BondingCurveOracle which calculates the thawed FEI price based on the current Uniswap price.  Consider ensuring that all function calls that read an Oracle price execute a call to update before reading it.  Update: Fixed in PR#28. The issue was fixed in the reweight function of the EthUniswapPCVController contract, and the isAtMaxPrice check was removed from the launch function of the  contract.  [H03] Incentive to support the peg decays with volatility  struct containing a  timeWeightInfo variable. The  timeWeightInfo.growthRate is initialized as  updateTimeWeight function, which updates the  _setTimeWeight function. Whenever a buy is performed, the price deviation and updated weight is factored into the  calculateBuyIncentiveMultiplier function to determine the incentive, whereas the  calculateSellPenaltyMultiplier function which calculates the disincentive for selling. Upon each transaction,  incentivize is called, which calls either  incentivizeBuy or  incentivizeSell depending on the direction of the trade. Regardless of the direction,  updateTimeWeight is called, but this function  differs for buy and sell transactions, with an asymmetric effect that reduces the incentive for buyers when there is price volatility below parity.  Suppose, for example, the protocol starts at parity, which sets the weight to 0. Then the following sequence of transactions occur:  A large sell pushes the price down to 0.9. First getTimeWeight will be called, and return 0, because no blocks have passed since the peg was last at parity. In the same transaction, updateTimeWeight is called with parameters weight = 0, initialDeviation = 0, finalDeviation = 0.1. As a result, updateTimeWeight calls _setTimeWeight to update timeWeightInfo.weight to 0 and timeWeightInfo.blockNo to the current block height.  Next, a hundred blocks later, a partial buy is submitted, which would bring the price up to 0.95. First, getTimeWeight will be called. The blockDelta will now be 100, and the timeWeightInfo.growthRate remains 333. The product (33300) is added to the previously stored timeWeightInfo.weight (0), and the sum of 33300 is returned. In the same buy transaction, updateTimeWeight will be called, and passed the parameters: weight = 33300, initialDeviation = 0.10, and finalDeviation = 0.05. Since the peg was only partially restored, updateTimeWeight reduces the weight by remainingRatio = finalDeviation / initialDeviation = 0.5. Then, when _setTimeWeight is called, timeWeightInfo.weight is updated to 33300 * 0.5 = 16650, and the current block height is stored in timeWeightInfo.blockNo.  One block later, another sell happens, pushing the price back down to 0.9. This time, when getTimeWeight is called, the blockDelta will be 1 and timeWeightInfo.weight will be 16650, so the function returns a weight of 16650 + 1 * 333 = 16983. In the same sell transaction, _setTimeWeight is called, updating timeWeightInfo.weight to 16983 and updating timeWeightInfo.blockNo.  One block later, with the price back down to 0.9, suppose a buyer makes a purchase of any size. When getTimeWeight is called, the blockDelta is 1, and the timeWeightInfo.weight is 16983, so the function returns 16983 + 1 * 333 = 17316.  If the incentive decays such that buyers are no longer incentivi", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#genesisgroup", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#32.", "body": "The FeiPool contract no longer inherits from the ERC20Burnable contract. Additionally, the burnFrom public function was removed, and a new _burnFrom function was added to be used in the _withdraw function.  [L02] Authorized burners can burn FEI balances without an amount restriction  The Protocol uses a Burner role to manage permissions around token burning, which the incentivization model requires.  burnFrom function in the  Fei contract uses the internal  _burn function from the OpenZeppelin  burnFrom function from the OpenZeppelin  For the FEI token, consider using the burnFrom function from ERC20Burnable rather than the _burn function from the ERC20 contract to minimize risk.  Update: Acknowledged. In the words of the Fei team: We feel that this risk is appropriate as the burner should not need ERC20 approval and is only given to one contract.  [L03] Core contract cannot allocate all Tribe tokens  The function allocateTribe in the Core contract is used to distribute TRIBE tokens to specified addresses. A percentage of TRIBE tokens remains undistributed as a treasury. According to the Fei whitepaper, the community can distribute this as it sees fit as the protocol develops.  However, in the allocation process, the function requires that the amount to be distributed is strictly less than the contracts TRIBE balance. This means that the contract cannot allocate all of the TRIBE tokens it holds, and a single unit of TRIBE will be locked in the contract.  Consider changing the require statement to use >= instead of >, so that all of the TRIBE it holds can be allocated.  Update: Fixed in PR#33.  [L04] Multiple outdated Solidity versions in use  Outdated versions of Solidity are being used in all contracts. The compiler options in the truffle-config file specifies version 0.6.6, which was released on April 6, 2020. Throughout the codebase there are also different versions of Solidity being used. For example, most of the Solidity files specify supported versions ^0.6.0, while the following files specify supported versions ^0.6.2:  IPCVDeposit.sol  IUniswapPCVController.sol  IFei.sol  IIncentive.sol  IUniswapIncentive.sol  As Solidity is now under a fast release cycle, consider using a more recent version of the compiler, such as version 0.7.6. In addition, to avoid unexpected behavior, consider specifying explicit Solidity versions in pragma statements.  Update: Not fixed. In the words of the Fei Team: It is not possible due to dependence on solidity compiler version 0.6.6 due to Uniswap interfaces.  [L05] Not checking for 0 addresses  Some constructors do not check that an initialized address is not 0. This could result in loss of control or locked funds. Examples include:  beneficiary address in the LinearTokenTimelock constructor  admin address in the Timelock constructor  Consider validating that addresses are not 0 to ensure contracts operate as intended.  Update: Fixed in PR#39.  [L06] Not using SafeMath and SafeCast  Throughout the codebase there are math operations that are not checked for overflow or underflow using the SafeMath library. Examples can be found in the following locations, however this list is not exhaustive:  The Roots library  The LinearTokenTimelock contract  The alreadyReleasedAmount function  The _beforeTokenTransfer function  The checkAllocation function  The getFinalPrice function  Although we did not observe instances which appear at high risk of overflow, consider checking all math operations using SafeMath as a best practice. In addition, the getFinalPrice function casts an int256 value to uint256 without any checks. Consider using the SafeCast library to check casting operations.  Update: Partially fixed in PR#37 and PR#67. There are still some ocurrencies where SafeMath and SafeCast are not being used.  [L07] queueTransaction does not check transaction value  The queueTransaction function uses ETH in the Timelock contract to execute transactions. The contract is funded using the receive function, which can then be used to execute queued transactions. However, there is no easy way to withdraw ETH from the contract, and queueTransaction does not validate that ETH being sent in a queued transaction was provided for that purpose.  Consider making queueTransaction a payable function and validating msg.value == value to ensure proper allocation of funds. In addition, consider implementing a way to withdraw any remaining ETH from the contract after confirming success in the executeTransaction function.  Update: Not fixed. In the words of the Fei Team: We want to minimize changes to forked DAO contracts.  [L08] Re-implementing ECDSA signature recovery  The following functions include implementations of the ECDSA signature recovery function:  castVoteBySig in the GovernorAlpha contract  delegateBySig in the Tribe contract  permit in the Tribe contract  permit in the Fei contract  This function is already part of the OpenZeppelin Contracts, which has been audited and is constantly reviewed by the community. Consider importing and using the recover function from OpenZeppelins ECDSA library not only to benefit from bug fixes to be applied in future releases, but also to reduce the codes attack surface.  Update: Not fixed. In the words of the Fei Team: We want to minimize changes to forked DAO contracts.  [L09] Transfers are not checked for success  transfer and  transferFrom functions return  from the _deposit function and  from the _withdraw function, but these result are not checked for success. Currently, the protocol only handles ETH,  SafeERC20 to catch failed transfers.  Update: Partially fixed in PR#12. An assertion was added when calling the transfer function from the WETH contract. The Fei Team decided not to check the FEI and TRIBE transfer and transferFrom return values since they inherit their behavior from the openzeppelin-contracts ERC20.sol contract, which will revert if something goes wrong.  [L10] UniswapOracle does not allow overflow  The update function in the UniswapOracle contract does not allow the cumulative price variables to overflow, against the guidance of the UniswapV2Pair oracle specification. This means the update function will eventually fail, despite the fact that Uniswap is designed to handle this overflow correctly. Consider permitting overflows to conform to the Uniswap Oracle specification.  Update: Fixed in PR#37.  Notes & Additional Information  [N01] Commented out code  The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.  Update: Fixed in PR#34.  [N02] Functions return without parameters specified  delegate and  delegateBySig functions within  Tribe.sol execute the  _delegate function in  Update: Acknowledged. In the words of the Fei Team: Want to minimize changes to forked DAO contracts.  [N03] GenesisGroup is a token unnecessarily  GenesisGroup contract is a token, however this tokens use will last a maximum of  3 days. The  mintsFGENtokens to users that deposit collateral, and then burns all  redeem them for  Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.  [N04] Improper use of require  As outlined in the Solidity docs,  _totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where  Update: Fixed in PR#51.  [N05] Inconsistencies around time  While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.  For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.  Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours  a significant deviation that could result in user confusion.  To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.  Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.  [N06] Inconsistent coding style  There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.  While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:  The _feiTribeExchangeRate function  The __acceptAdmin function  The __abdicate function  Some internal function names start with an underscore, while others do not. For example:  _writeCheckpoint and safe32 are both internal functions in the Tribe contract.  _setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.  Some parameters end with an underscore, while most do not. For example:  The delay_ parameter in the setDelay function  The pendingAdmin_ parameter in the setPendingAdmin function  Some lines of code are very long. For example:  The propose function definition is 139 characters long.  The getActions function definition is 164 characters long.  Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:  The Fei constructor uses double quotes to pass strings to the ERC20 function.  The Fei constructor uses single quotes to pass a string to the keccak256 function.  There is mixed use of spaces and tabs for indentation. For example:  The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.  Some functions use named return variables, while others do not. For example:  The IDOOrchestrator contracts init function declares named variables for returned values.  The ControllerOchestrator contracts init function does not declare a named variable for the returned value.  Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the projects overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.  Update: Fixed in PR#54.  [N07] Inconsistent error message format  Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.  In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.  Update: Fixed in PR#47.  [N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle  update function in the  UniswapOracle contract uses the  currentCumulativePrice function of the  _init function in the same contract retrieves the same values using  separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.  Update: Fixed in PR#46.  [N09] Incorrect GovernorAlpha name constant  The GovernorAlpha contract is forked from Compound, and maintains the name constant Compound Governor Alpha. Consider updating this to reflect the FEI protocol using the TRIBE governance token.  Update: Fixed in PR#35.  [N10] Interfaces omit some external functions  Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:  IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.  IFei omits the permit function that is implemented in Fei.  IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.  IPool omits the burnFrom function that is implemented in Pool.  IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: Fixed in PR#53.  [N11] Uninitializable global variable in LinearTimelockToken  lockedToken global variable in the  LinearTokenTimelock contract is only initializable by the  setLockedToken function. As is, the  Update: Fixed in PR#39.  [N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.  Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.  [N16] Using now instead of block.timestamp  There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:  Line 55 of Core.sol  Line 123 of GenesisGroup.sol  Line 40 and line 46 of Timed.sol  Line 175 and line 251 of Tribe.sol  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#42.  [N17] Proposals can be canceled in states that are unintuitive  The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.  The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal thats been defeated or has already expired.  To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.  Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.  [N18] Proposal struct storage is inefficient  Proposal struct uses 13 storage slots. To improve gas efficiency, consider reorganizing the attributes within the struct to reduce the storage to 12 slots, for example, by moving the  canceled and  executed attributes immediately after the  proposer  Update: Not fixed. In the words of the Fei Team: We want to minimize changes to forked DAO contracts.  [N19] Redundant event definition  line 23 of the BondingCurveOracle contract. That contract inherits from  IBondingCurveOracle, which inherits from  IOracle where the same  line 12.  Consider removing redundant event definitions to improve overall code clarity and maintainability.  Update: Fixed in PR#52.  [N20] Some interfaces are not inherited  There are numerous interfaces that are not inherited by relevant contracts. Some examples include:  The Orchestrator interfaces in the CoreOrchestrator contract. For instance, the IIDOOrchestrator and the IGenesisOrchestrator int", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#32.", "labels": ["OpenZeppelin"]}, {"title": "[N28] Use of uint instead of uint256", "body": "[N28] Use of uint instead of uint256", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n28]-use-of-uint-instead-of-uint256", "labels": ["OpenZeppelin"]}, {"title": "Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.", "body": "Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#across-the-codebase,-there-are-hundreds-of-instances-of-uint,-as-opposed-to-uint256.-in-favor-of-explicitness,-consider-replacing-all-instances-of-uint-with-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Approximate compounding", "body": "[N01] Approximate compounding", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n01]-approximate-compounding", "labels": ["OpenZeppelin"]}, {"title": "In the Perpetual Multiparty template, the funding rate is applied on every fee-accruing transaction, where the total change is simply the rate applied evenly since the last update. This implies that the compounding rate depends on the frequency of update transactions, and it never reaches the ideal of continuous compounding.", "body": "In the Perpetual Multiparty template, the funding rate is applied on every fee-accruing transaction, where the total change is simply the rate applied evenly since the last update. This implies that the compounding rate depends on the frequency of update transactions, and it never reaches the ideal of continuous compounding.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-the-perpetual-multiparty-template,-the-funding-rate-is-applied-on-every-fee-accruing-transaction,-where-the-total-change-is-simply-the-rate-applied-evenly-since-the-last-update.-this-implies-that-the-compounding-rate-depends-on-the-frequency-of-update-transactions,-and-it-never-reaches-the-ideal-of-continuous-compounding.", "labels": ["OpenZeppelin"]}, {"title": "This approximate-compounding pattern is common in the Ethereum ecosystem, and the discrepancy is likely unimportant in this case. Nevertheless, in the interest of clarity, we believe it is worth noting. Consider documenting this behavior in the FundingRateApplier comments.", "body": "This approximate-compounding pattern is common in the Ethereum ecosystem, and the discrepancy is likely unimportant in this case. Nevertheless, in the interest of clarity, we believe it is worth noting. Consider documenting this behavior in the FundingRateApplier comments.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#this-approximate-compounding-pattern-is-common-in-the-ethereum-ecosystem,-and-the-discrepancy-is-likely-unimportant-in-this-case.-nevertheless,-in-the-interest-of-clarity,-we-believe-it-is-worth-noting.-consider-documenting-this-behavior-in-the-fundingrateapplier-comments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2328. To reduce bytecode, some error message strings were removed.", "body": "Update: Fixed in PR#2328. To reduce bytecode, some error message strings were removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2328.-to-reduce-bytecode,-some-error-message-strings-were-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Consider ERC777 tokens", "body": "[N02] Consider ERC777 tokens", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n02]-consider-erc777-tokens", "labels": ["OpenZeppelin"]}, {"title": "The ERC777 token standard extends ERC20 tokens to include send and receive hooks on every balance update. Although the standard is intended to be backwards compatible, it can introduce unexpected risks into systems designed to work with ERC20s.", "body": "The ERC777 token standard extends ERC20 tokens to include send and receive hooks on every balance update. Although the standard is intended to be backwards compatible, it can introduce unexpected risks into systems designed to work with ERC20s.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#the-erc777-token-standard-extends-erc20-tokens-to-include-send-and-receive-hooks-on-every-balance-update.-although-the-standard-is-intended-to-be-backwards-compatible,-it-can-introduce-unexpected-risks-into-systems-designed-to-work-with-erc20s.", "labels": ["OpenZeppelin"]}, {"title": "In this case, the Liquidatable contract has been refactored to distribute funds to all participants in the same transaction. The same pattern is used in the PerpetualLiquidatable contract. If any of those addresses have a receive hook that reverts, none of the participants could withdraw their funds.", "body": "In this case, the Liquidatable contract has been refactored to distribute funds to all participants in the same transaction. The same pattern is used in the PerpetualLiquidatable contract. If any of those addresses have a receive hook that reverts, none of the participants could withdraw their funds.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-this-case,-the-liquidatable-contract-has-been-refactored-to-distribute-funds-to-all-participants-in-the-same-transaction.-the-same-pattern-is-used-in-the-perpetualliquidatable-contract.-if-any-of-those-addresses-have-a-receive-hook-that-reverts,-none-of-the-participants-could-withdraw-their-funds.", "labels": ["OpenZeppelin"]}, {"title": "Similarly, if an address that requests a price from the Optimistic oracle prevents the dispute refund transfer, they will disable the dispute functionality.", "body": "Similarly, if an address that requests a price from the Optimistic oracle prevents the dispute refund transfer, they will disable the dispute functionality.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#similarly,-if-an-address-that-requests-a-price-from-the-optimistic-oracle-prevents-the-dispute-refund-transfer,-they-will-disable-the-dispute-functionality.", "labels": ["OpenZeppelin"]}, {"title": "If the system should support ERC777 tokens, consider isolating the transfer logic so that maliciously constructed send or receive hooks cannot disable any functionality. Otherwise, consider explicitly documenting that ERC777 tokens should not be used as collateral or oracle rewards.", "body": "If the system should support ERC777 tokens, consider isolating the transfer logic so that maliciously constructed send or receive hooks cannot disable any functionality. Otherwise, consider explicitly documenting that ERC777 tokens should not be used as collateral or oracle rewards.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#if-the-system-should-support-erc777-tokens,-consider-isolating-the-transfer-logic-so-that-maliciously-constructed-send-or-receive-hooks-cannot-disable-any-functionality.-otherwise,-consider-explicitly-documenting-that-erc777-tokens-should-not-be-used-as-collateral-or-oracle-rewards.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2345 and PR#2347. ERC777 tokens are not currently supported and this has been documented in the contract comments.", "body": "Update: Fixed in PR#2345 and PR#2347. ERC777 tokens are not currently supported and this has been documented in the contract comments.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2345-and-pr#2347.-erc777-tokens-are-not-currently-supported-and-this-has-been-documented-in-the-contract-comments.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Incorrect filename", "body": "[N03] Incorrect filename", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n03]-incorrect-filename", "labels": ["OpenZeppelin"]}, {"title": "The StructuredNoteFinancialLibrary contract is defined in a file named StructureNoteFinancialProductLibrary. Consider renaming the file to match the library.", "body": "The StructuredNoteFinancialLibrary contract is defined in a file named StructureNoteFinancialProductLibrary. Consider renaming the file to match the library.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#the-structurednotefinanciallibrary-contract-is-defined-in-a-file-named-structurenotefinancialproductlibrary.-consider-renaming-the-file-to-match-the-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2317.", "body": "Update: Fixed in PR#2317.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2317.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Naming issues hinder code understanding and readability", "body": "[N04] Naming issues hinder code understanding and readability", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n04]-naming-issues-hinder-code-understanding-and-readability", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "PreDispute to NotDisputed.", "body": "PreDispute to NotDisputed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#predispute-to-notdisputed.", "labels": ["OpenZeppelin"]}, {"title": "PendingDispute to Disputed.", "body": "PendingDispute to Disputed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#pendingdispute-to-disputed.", "labels": ["OpenZeppelin"]}, {"title": "disputeBondPct to disputeBondPercentage.", "body": "disputeBondPct to disputeBondPercentage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#disputebondpct-to-disputebondpercentage.", "labels": ["OpenZeppelin"]}, {"title": "sponsorDisputeRewardPct to sponsorDisputeRewardPercentage.", "body": "sponsorDisputeRewardPct to sponsorDisputeRewardPercentage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#sponsordisputerewardpct-to-sponsordisputerewardpercentage.", "labels": ["OpenZeppelin"]}, {"title": "disputerDisputeRewardPct to disputerDisputeRewardPercentage.", "body": "disputerDisputeRewardPct to disputerDisputeRewardPercentage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#disputerdisputerewardpct-to-disputerdisputerewardpercentage.", "labels": ["OpenZeppelin"]}, {"title": "dispute to disputeLiquidation.", "body": "dispute to disputeLiquidation.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#dispute-to-disputeliquidation.", "labels": ["OpenZeppelin"]}, {"title": "regularFees to paysRegularFees.", "body": "regularFees to paysRegularFees.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#regularfees-to-paysregularfees.", "labels": ["OpenZeppelin"]}, {"title": "_collateralAddress to _collateralTokenAddress.", "body": "_collateralAddress to _collateralTokenAddress.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#_collateraladdress-to-_collateraltokenaddress.", "labels": ["OpenZeppelin"]}, {"title": "proposeNewRate to proposeFundingRate.", "body": "proposeNewRate to proposeFundingRate.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#proposenewrate-to-proposefundingrate.", "labels": ["OpenZeppelin"]}, {"title": "tokenCurrency to syntheticToken.", "body": "tokenCurrency to syntheticToken.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#tokencurrency-to-synthetictoken.", "labels": ["OpenZeppelin"]}, {"title": "Deposit to Deposited.", "body": "Deposit to Deposited.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#deposit-to-deposited.", "labels": ["OpenZeppelin"]}, {"title": "Withdrawal to Withdrawn.", "body": "Withdrawal to Withdrawn.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#withdrawal-to-withdrawn.", "labels": ["OpenZeppelin"]}, {"title": "RequestWithdrawal to WithdrawalRequested.", "body": "RequestWithdrawal to WithdrawalRequested.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#requestwithdrawal-to-withdrawalrequested.", "labels": ["OpenZeppelin"]}, {"title": "RequestWithdrawalExecuted to WithdrawalExecuted.", "body": "RequestWithdrawalExecuted to WithdrawalExecuted.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#requestwithdrawalexecuted-to-withdrawalexecuted.", "labels": ["OpenZeppelin"]}, {"title": "RequestWithdrawalCanceled to WithdrawalCanceled.", "body": "RequestWithdrawalCanceled to WithdrawalCanceled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#requestwithdrawalcanceled-to-withdrawalcanceled.", "labels": ["OpenZeppelin"]}, {"title": "NewSponsor to SponsorAdded.", "body": "NewSponsor to SponsorAdded.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#newsponsor-to-sponsoradded.", "labels": ["OpenZeppelin"]}, {"title": "Redeem to Redeemed.", "body": "Redeem to Redeemed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#redeem-to-redeemed.", "labels": ["OpenZeppelin"]}, {"title": "EmergencyShutdown to EmergencyShutdownEnabled.", "body": "EmergencyShutdown to EmergencyShutdownEnabled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#emergencyshutdown-to-emergencyshutdownenabled.", "labels": ["OpenZeppelin"]}, {"title": "SettleEmergencyShutdown to EmergencyShutdownSettled.", "body": "SettleEmergencyShutdown to EmergencyShutdownSettled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#settleemergencyshutdown-to-emergencyshutdownsettled.", "labels": ["OpenZeppelin"]}, {"title": "_getIdentifierWhitelist to _getIdentifierApprovedList.", "body": "_getIdentifierWhitelist to _getIdentifierApprovedList.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#_getidentifierwhitelist-to-_getidentifierapprovedlist.", "labels": ["OpenZeppelin"]}, {"title": "rewardRate and proposerBond in both events to rewardRatePerSecond and proposerBondPercentage respectively.", "body": "rewardRate and proposerBond in both events to rewardRatePerSecond and proposerBondPercentage respectively.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#rewardrate-and-proposerbond-in-both-events-to-rewardratepersecond-and-proposerbondpercentage-respectively.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#2332. Per UMA\u2019s discussion in the PR thread, there are many instances where a renaming would break infrastructure.", "body": "Update: Partially fixed in PR#2332. Per UMA\u2019s discussion in the PR thread, there are many instances where a renaming would break infrastructure.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-partially-fixed-in-pr#2332.-per-uma\u2019s-discussion-in-the-pr-thread,-there-are-many-instances-where-a-renaming-would-break-infrastructure.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Not using the immutable keyword", "body": "[N05] Not using the immutable keyword", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n05]-not-using-the-immutable-keyword", "labels": ["OpenZeppelin"]}, {"title": "In line 95 of PerpetualLiquidatable.sol a group of immutable state variables are defined. Since Solidity version 0.6.5 the immutable keyword was introduced for variables that can only be set once, but these definitions are not using this feature of the compiler.", "body": "In line 95 of PerpetualLiquidatable.sol a group of immutable state variables are defined. Since Solidity version 0.6.5 the immutable keyword was introduced for variables that can only be set once, but these definitions are not using this feature of the compiler.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-line-95-of-perpetualliquidatable.sol-a-group-of-immutable-state-variables-are-defined.-since-solidity-version-0.6.5-the-immutable-keyword-was-introduced-for-variables-that-can-only-be-set-once,-but-these-definitions-are-not-using-this-feature-of-the-compiler.", "labels": ["OpenZeppelin"]}, {"title": "Consider using the immutable keyword for immutable state variables. Note that this change would require updating the contracts to require version 0.6.5 of the compiler or later.", "body": "Consider using the immutable keyword for immutable state variables. Note that this change would require updating the contracts to require version 0.6.5 of the compiler or later.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#consider-using-the-immutable-keyword-for-immutable-state-variables.-note-that-this-change-would-require-updating-the-contracts-to-require-version-0.6.5-of-the-compiler-or-later.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. UMA\u2019s statement for the issue:", "body": "Update: Acknowledged. UMA\u2019s statement for the issue:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-acknowledged.-uma\u2019s-statement-for-the-issue:", "labels": ["OpenZeppelin"]}, {"title": "After implementing this change, we discovered that each use of the immutable keyword adds ~60 bytes per instance to the contract size. This spread over the PerpetualPositionManageri & the PerpetualLiquidatable means that it would incur a considerable bytecode cost.", "body": "After implementing this change, we discovered that each use of the immutable keyword adds ~60 bytes per instance to the contract size. This spread over the PerpetualPositionManageri & the PerpetualLiquidatable means that it would incur a considerable bytecode cost.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#after-implementing-this-change,-we-discovered-that-each-use-of-the-immutable-keyword-adds-~60-bytes-per-instance-to-the-contract-size.-this-spread-over-the-perpetualpositionmanageri-&-the-perpetualliquidatable-means-that-it-would-incur-a-considerable-bytecode-cost.", "labels": ["OpenZeppelin"]}, {"title": "As a result, we\u2019ve chosen to do nothing for this issue for two reasons:1. The extra bytecode.1. Consistency with existing code outside of the scope of the audit.", "body": "As a result, we\u2019ve chosen to do nothing for this issue for two reasons:1. The extra bytecode.1. Consistency with existing code outside of the scope of the audit.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#as-a-result,-we\u2019ve-chosen-to-do-nothing-for-this-issue-for-two-reasons:1.-the-extra-bytecode.1.-consistency-with-existing-code-outside-of-the-scope-of-the-audit.", "labels": ["OpenZeppelin"]}, {"title": "Note: this change may be considered when the entire repository is upgraded to Solidity 0.8+.", "body": "Note: this change may be considered when the entire repository is upgraded to Solidity 0.8+.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#note:-this-change-may-be-considered-when-the-entire-repository-is-upgraded-to-solidity-0.8+.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Redundant code and unnecessary complex calculations", "body": "[N06] Redundant code and unnecessary complex calculations", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n06]-redundant-code-and-unnecessary-complex-calculations", "labels": ["OpenZeppelin"]}, {"title": "Some functions are duplicating code or performing unnecessary calculations:", "body": "Some functions are duplicating code or performing unnecessary calculations:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#some-functions-are-duplicating-code-or-performing-unnecessary-calculations:", "labels": ["OpenZeppelin"]}, {"title": "The hasPrice function of the OptimisticOracle contract can call getState twice to determine the return value. Consider saving the output of getState in a variable that can be used to determine the return value.", "body": "The hasPrice function of the OptimisticOracle contract can call getState twice to determine the return value. Consider saving the output of getState in a variable that can be used to determine the return value.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#the-hasprice-function-of-the-optimisticoracle-contract-can-call-getstate-twice-to-determine-the-return-value.-consider-saving-the-output-of-getstate-in-a-variable-that-can-be-used-to-determine-the-return-value.", "labels": ["OpenZeppelin"]}, {"title": "In the _applyEffectiveFundingRate function of the FundingRateApplier contract, the _getLatestFundingRate() function is unnecessarily called when the value was already assigned to _latestFundingRatePerSecond. Given the _getLatestFundingRate function has nontrivial logic, consider reusing _latestFundingRatePerSecond.", "body": "In the _applyEffectiveFundingRate function of the FundingRateApplier contract, the _getLatestFundingRate() function is unnecessarily called when the value was already assigned to _latestFundingRatePerSecond. Given the _getLatestFundingRate function has nontrivial logic, consider reusing _latestFundingRatePerSecond.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-the-_applyeffectivefundingrate-function-of-the-fundingrateapplier-contract,-the-_getlatestfundingrate()-function-is-unnecessarily-called-when-the-value-was-already-assigned-to-_latestfundingratepersecond.-given-the-_getlatestfundingrate-function-has-nontrivial-logic,-consider-reusing-_latestfundingratepersecond.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PRs #2319 and #2284.", "body": "Update: Fixed in PRs #2319 and #2284.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-prs-#2319-and-#2284.", "labels": ["OpenZeppelin"]}, {"title": "[N07] TODOs in code", "body": "[N07] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n07]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. See for example:", "body": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. See for example:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-tracked-in-the-project\u2019s-issues-backlog.-see-for-example:", "labels": ["OpenZeppelin"]}, {"title": "Line 17 of FundingRateApplier.sol.", "body": "Line 17 of FundingRateApplier.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-17-of-fundingrateapplier.sol.", "labels": ["OpenZeppelin"]}, {"title": "Line 427 of PerpetualLiquidatable.sol.", "body": "Line 427 of PerpetualLiquidatable.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-427-of-perpetualliquidatable.sol.", "labels": ["OpenZeppelin"]}, {"title": "Line 532 of PerpetualPositionManager.sol.", "body": "Line 532 of PerpetualPositionManager.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-532-of-perpetualpositionmanager.sol.", "labels": ["OpenZeppelin"]}, {"title": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "body": "During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might tend to rot and important information for the security of the system might be forgotten by the time it is released to production.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#during-development,-having-well-described-\u201ctodo\u201d-comments-will-make-the-process-of-tracking-and-solving-them-easier.-without-that-information,-these-comments-might-tend-to-rot-and-important-information-for-the-security-of-the-system-might-be-forgotten-by-the-time-it-is-released-to-production.", "labels": ["OpenZeppelin"]}, {"title": "These TODO comments should at least have a brief description of the task pending to do, and a link to the corresponding issue in the project repository.", "body": "These TODO comments should at least have a brief description of the task pending to do, and a link to the corresponding issue in the project repository.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#these-todo-comments-should-at-least-have-a-brief-description-of-the-task-pending-to-do,-and-a-link-to-the-corresponding-issue-in-the-project-repository.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the TODO comments, adding a link to the corresponding issue in the project repository. In addition to this, for completeness, a signature and a timestamp can be added. For example:", "body": "Consider updating the TODO comments, adding a link to the corresponding issue in the project repository. In addition to this, for completeness, a signature and a timestamp can be added. For example:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#consider-updating-the-todo-comments,-adding-a-link-to-the-corresponding-issue-in-the-project-repository.-in-addition-to-this,-for-completeness,-a-signature-and-a-timestamp-can-be-added.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "// TODO: point this at an interface instead.// https://github.com/UMAprotocol/protocol/issues/XXXX// \u2013mrice32 \u2013 20201129", "body": "// TODO: point this at an interface instead.// https://github.com/UMAprotocol/protocol/issues/XXXX// \u2013mrice32 \u2013 20201129", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#//-todo:-point-this-at-an-interface-instead.//-https://github.com/umaprotocol/protocol/issues/xxxx//-\u2013mrice32-\u2013-20201129", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2327", "body": "Update: Fixed in PR#2327", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2327", "labels": ["OpenZeppelin"]}, {"title": "[N08] Typographical errors", "body": "[N08] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n08]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In FundingRateApplier.sol:", "body": "In FundingRateApplier.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-fundingrateapplier.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 142: \u201cto\u201d should be removed", "body": "line 142: \u201cto\u201d should be removed", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-142:-\u201cto\u201d-should-be-removed", "labels": ["OpenZeppelin"]}, {"title": "In PreExpirationIdentifierTransformationFinancialProductLibrary.sol:", "body": "In PreExpirationIdentifierTransformationFinancialProductLibrary.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-preexpirationidentifiertransformationfinancialproductlibrary.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 10: \u201cthan\u201d should be \u201cthen\u201d", "body": "line 10: \u201cthan\u201d should be \u201cthen\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-10:-\u201cthan\u201d-should-be-\u201cthen\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 21: \u201cCant\u201d should be \u201ccan\u2019t\u201d", "body": "line 21: \u201cCant\u201d should be \u201ccan\u2019t\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-21:-\u201ccant\u201d-should-be-\u201ccan\u2019t\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 23: \u201cexposes\u201d should be \u201cexpose\u201d", "body": "line 23: \u201cexposes\u201d should be \u201cexpose\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-23:-\u201cexposes\u201d-should-be-\u201cexpose\u201d", "labels": ["OpenZeppelin"]}, {"title": "In StructureNoteFinancialProductLibrary.sol:", "body": "In StructureNoteFinancialProductLibrary.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-structurenotefinancialproductlibrary.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 14: \u201cdetermine\u201d should be \u201cdetermined\u201d", "body": "line 14: \u201cdetermine\u201d should be \u201cdetermined\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-14:-\u201cdetermine\u201d-should-be-\u201cdetermined\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 23: \u201ccan not\u201d should be \u201ccannot\u201d", "body": "line 23: \u201ccan not\u201d should be \u201ccannot\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-23:-\u201ccan-not\u201d-should-be-\u201ccannot\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 25: \u201cexposes\u201d should be \u201cexpose\u201d", "body": "line 25: \u201cexposes\u201d should be \u201cexpose\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-25:-\u201cexposes\u201d-should-be-\u201cexpose\u201d", "labels": ["OpenZeppelin"]}, {"title": "In ConfigStore.sol:", "body": "In ConfigStore.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-configstore.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 14: \u201cand\u201d should be \u201can\u201d", "body": "line 14: \u201cand\u201d should be \u201can\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-14:-\u201cand\u201d-should-be-\u201can\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 144: \u201ccan\u201d should be removed", "body": "line 144: \u201ccan\u201d should be removed", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-144:-\u201ccan\u201d-should-be-removed", "labels": ["OpenZeppelin"]}, {"title": "In PerpetualCreator.sol:", "body": "In PerpetualCreator.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-perpetualcreator.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 20: there is an extra space", "body": "line 20: there is an extra space", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-20:-there-is-an-extra-space", "labels": ["OpenZeppelin"]}, {"title": "In PerpetualLiquidatable.sol:", "body": "In PerpetualLiquidatable.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-perpetualliquidatable.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 545: \u201cvalid(liquidation\u201d should be \u201cvalid (liquidation\u201d", "body": "line 545: \u201cvalid(liquidation\u201d should be \u201cvalid (liquidation\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-545:-\u201cvalid(liquidation\u201d-should-be-\u201cvalid-(liquidation\u201d", "labels": ["OpenZeppelin"]}, {"title": "In PerpetualPositionManager.sol:", "body": "In PerpetualPositionManager.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-perpetualpositionmanager.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 229: \u201cwitdrawl.\u201d should be \u201cwithdrawal.\u201d", "body": "line 229: \u201cwitdrawl.\u201d should be \u201cwithdrawal.\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-229:-\u201cwitdrawl.\u201d-should-be-\u201cwithdrawal.\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 242: \u201cwithdraw`\u201d should be \u201cwithdraw\u201d", "body": "line 242: \u201cwithdraw`\u201d should be \u201cwithdraw\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-242:-\u201cwithdraw`\u201d-should-be-\u201cwithdraw\u201d", "labels": ["OpenZeppelin"]}, {"title": "In OptimisticOracle.sol:", "body": "In OptimisticOracle.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-optimisticoracle.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 211: \u201cothers'\u201d should be \u201cother\u2019s\u201d", "body": "line 211: \u201cothers'\u201d should be \u201cother\u2019s\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-211:-\u201cothers'\u201d-should-be-\u201cother\u2019s\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 327: \u201cvalue\u201d should be \u201cvalid\u201d", "body": "line 327: \u201cvalue\u201d should be \u201cvalid\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-327:-\u201cvalue\u201d-should-be-\u201cvalid\u201d", "labels": ["OpenZeppelin"]}, {"title": "There are several places where \u201cidentifiy\u201d should be \u201cidentify\u201d", "body": "Update: Partially fixed in PR#2312. All typos were fixed except the one on line 25 of StructureNoteFinancialProductLibrary.sol.  [N09] Unnecessary imports  In the PerpetualPositionManager.sol file, consider removing the import statement for FeePayer.sol, as it is never used in the PerpetualPositionManager contract.  Also, in the FundingRateApplier.sol file, consider removing the import statements for StoreInterface.sol and FinderInterface.sol, as they are never used in the FundingRateApplier contract.  Update: Fixed in PR#2315.  [N10] Unnecessary type cast  102 and  104 of  it is defined as address type, the casts are unnecessary.  Consider omitting this address type cast.  Update: Fixed in PR#2316.  Conclusion  Originally, no critical and one high severity issue was found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the issues have been fixed or acknowledged.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#there-are-several-places-where-\u201cidentifiy\u201d-should-be-\u201cidentify\u201d", "labels": ["OpenZeppelin"]}, {"title": "In OptimisticOracleInterface.sol:", "body": "In OptimisticOracleInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-optimisticoracleinterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "line 77: \u201cothers'\u201d should be \u201cother\u2019s\u201d", "body": "line 77: \u201cothers'\u201d should be \u201cother\u2019s\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-77:-\u201cothers'\u201d-should-be-\u201cother\u2019s\u201d", "labels": ["OpenZeppelin"]}, {"title": "line 152: \u201cvalue\u201d should be \u201cvalid\u201d", "body": "line 152: \u201cvalue\u201d should be \u201cvalid\u201d", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#line-152:-\u201cvalue\u201d-should-be-\u201cvalid\u201d", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in PR#2312. All typos were fixed except the one on line 25 of StructureNoteFinancialProductLibrary.sol.", "body": "Update: Partially fixed in PR#2312. All typos were fixed except the one on line 25 of StructureNoteFinancialProductLibrary.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-partially-fixed-in-pr#2312.-all-typos-were-fixed-except-the-one-on-line-25-of-structurenotefinancialproductlibrary.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unnecessary imports", "body": "[N09] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n09]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "In the PerpetualPositionManager.sol file, consider removing the import statement for FeePayer.sol, as it is never used in the PerpetualPositionManager contract.", "body": "In the PerpetualPositionManager.sol file, consider removing the import statement for FeePayer.sol, as it is never used in the PerpetualPositionManager contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#in-the-perpetualpositionmanager.sol-file,-consider-removing-the-import-statement-for-feepayer.sol,-as-it-is-never-used-in-the-perpetualpositionmanager-contract.", "labels": ["OpenZeppelin"]}, {"title": "Also, in the FundingRateApplier.sol file, consider removing the import statements for StoreInterface.sol and FinderInterface.sol, as they are never used in the FundingRateApplier contract.", "body": "Also, in the FundingRateApplier.sol file, consider removing the import statements for StoreInterface.sol and FinderInterface.sol, as they are never used in the FundingRateApplier contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#also,-in-the-fundingrateapplier.sol-file,-consider-removing-the-import-statements-for-storeinterface.sol-and-finderinterface.sol,-as-they-are-never-used-in-the-fundingrateapplier-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2315.", "body": "Update: Fixed in PR#2315.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2315.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Unnecessary type cast", "body": "[N10] Unnecessary type cast", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#[n10]-unnecessary-type-cast", "labels": ["OpenZeppelin"]}, {"title": "102 and", "body": "102 and", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#102-and", "labels": ["OpenZeppelin"]}, {"title": "104 of", "body": "104 of", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#104-of", "labels": ["OpenZeppelin"]}, {"title": "it is defined as address type, the casts are unnecessary.", "body": "it is defined as address type, the casts are unnecessary.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#it-is-defined-as-address-type,-the-casts-are-unnecessary.", "labels": ["OpenZeppelin"]}, {"title": "Consider omitting this address type cast.", "body": "Consider omitting this address type cast.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#consider-omitting-this-address-type-cast.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#2316.", "body": "Update: Fixed in PR#2316.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-4#update:-fixed-in-pr#2316.", "labels": ["OpenZeppelin"]}, {"title": "[N01] The voting window and resolving window overlap at the time boundary", "body": "[N01] The voting window and resolving window overlap at the time boundary", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n01]-the-voting-window-and-resolving-window-overlap-at-the-time-boundary", "labels": ["OpenZeppelin"]}, {"title": "The vote function of the Voting contract allows voting as long as the current block\u2019s timestamp is less than or equal to the votingEnds value of the proposal, as seen below:", "body": "The vote function of the Voting contract allows voting as long as the current block\u2019s timestamp is less than or equal to the votingEnds value of the proposal, as seen below:", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#the-vote-function-of-the-voting-contract-allows-voting-as-long-as-the-current-block\u2019s-timestamp-is-less-than-or-equal-to-the-votingends-value-of-the-proposal,-as-seen-below:", "labels": ["OpenZeppelin"]}, {"title": "However, a proposal can be resolved as long as the current block\u2019s timestamp is greater than or equal to the votingEnds field of the proposal, as seen below:", "body": "However, a proposal can be resolved as long as the current block\u2019s timestamp is greater than or equal to the votingEnds field of the proposal, as seen below:", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#however,-a-proposal-can-be-resolved-as-long-as-the-current-block\u2019s-timestamp-is-greater-than-or-equal-to-the-votingends-field-of-the-proposal,-as-seen-below:", "labels": ["OpenZeppelin"]}, {"title": "In other words, the voting and resolving windows overlap at p.votingEnds. So at this timestamp, a proposal could be resolved before the voting window closes. Consider modifying the requireProposalCanBeResolved function\u2019s require statement to now > p.votingEnds.", "body": "In other words, the voting and resolving windows overlap at p.votingEnds. So at this timestamp, a proposal could be resolved before the voting window closes. Consider modifying the requireProposalCanBeResolved function\u2019s require statement to now > p.votingEnds.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#in-other-words,-the-voting-and-resolving-windows-overlap-at-p.votingends.-so-at-this-timestamp,-a-proposal-could-be-resolved-before-the-voting-window-closes.-consider-modifying-the-requireproposalcanberesolved-function\u2019s-require-statement-to-now->-p.votingends.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed by PR #527.", "body": "Update: Fixed by PR #527.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-by-pr-#527.", "labels": ["OpenZeppelin"]}, {"title": "[N02] ProposalRejected event might never be emitted", "body": "[N02] ProposalRejected event might never be emitted", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n02]-proposalrejected-event-might-never-be-emitted", "labels": ["OpenZeppelin"]}, {"title": "The resolve function of the Voting contract emits a ProposalRejected event when the proposal fails. However, there does not seem to be any incentive to call the resolve function when a proposal has failed. The caller would spend gas to emit an event without getting anything in return. If the event is never emitted, it may make it difficult to track the state of proposals off-chain via emitted events (such as in tools like The Graph).", "body": "The resolve function of the Voting contract emits a ProposalRejected event when the proposal fails. However, there does not seem to be any incentive to call the resolve function when a proposal has failed. The caller would spend gas to emit an event without getting anything in return. If the event is never emitted, it may make it difficult to track the state of proposals off-chain via emitted events (such as in tools like The Graph).", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#the-resolve-function-of-the-voting-contract-emits-a-proposalrejected-event-when-the-proposal-fails.-however,-there-does-not-seem-to-be-any-incentive-to-call-the-resolve-function-when-a-proposal-has-failed.-the-caller-would-spend-gas-to-emit-an-event-without-getting-anything-in-return.-if-the-event-is-never-emitted,-it-may-make-it-difficult-to-track-the-state-of-proposals-off-chain-via-emitted-events-(such-as-in-tools-like-the-graph).", "labels": ["OpenZeppelin"]}, {"title": "If this is a concern, consider adding an incentive for calling the resolve function.", "body": "If this is a concern, consider adding an incentive for calling the resolve function.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#if-this-is-a-concern,-consider-adding-an-incentive-for-calling-the-resolve-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Unchanged. Comment from the Futureswap team: \u201cNot addressed, State of proposals can be tracked via view functions and the Futureswap team will resolve non succeeding proposals.\u201d", "body": "Update: Unchanged. Comment from the Futureswap team: \u201cNot addressed, State of proposals can be tracked via view functions and the Futureswap team will resolve non succeeding proposals.\u201d", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-unchanged.-comment-from-the-futureswap-team:-\u201cnot-addressed,-state-of-proposals-can-be-tracked-via-view-functions-and-the-futureswap-team-will-resolve-non-succeeding-proposals.\u201d", "labels": ["OpenZeppelin"]}, {"title": "[N03] Wallet does not renounce minting privileges over DecimalPaddingToken contract", "body": "[N03] Wallet does not renounce minting privileges over DecimalPaddingToken contract", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n03]-wallet-does-not-renounce-minting-privileges-over-decimalpaddingtoken-contract", "labels": ["OpenZeppelin"]}, {"title": "set the Wallet contract as an address with minting privileges.", "body": "set the Wallet contract as an address with minting privileges.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#set-the-wallet-contract-as-an-address-with-minting-privileges.", "labels": ["OpenZeppelin"]}, {"title": "This Wallet contract never calls the mint function of the DecimalPaddingToken contract. To minimize unnecessary minting privileges and reduce the attack surface, consider having the Wallet contract renounce the minter role.", "body": "This Wallet contract never calls the mint function of the DecimalPaddingToken contract. To minimize unnecessary minting privileges and reduce the attack surface, consider having the Wallet contract renounce the minter role.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#this-wallet-contract-never-calls-the-mint-function-of-the-decimalpaddingtoken-contract.-to-minimize-unnecessary-minting-privileges-and-reduce-the-attack-surface,-consider-having-the-wallet-contract-renounce-the-minter-role.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #529, where the DecimalPaddingToken contract no longer inherits from ERC20Mintable or ERC20Burnable.", "body": "Update: Fixed in PR #529, where the DecimalPaddingToken contract no longer inherits from ERC20Mintable or ERC20Burnable.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#529,-where-the-decimalpaddingtoken-contract-no-longer-inherits-from-erc20mintable-or-erc20burnable.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Duplicate conditionals in the calculateClosingData function", "body": "[N04] Duplicate conditionals in the calculateClosingData function", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n04]-duplicate-conditionals-in-the-calculateclosingdata-function", "labels": ["OpenZeppelin"]}, {"title": "There are two if statements with the same conditional in the calculateClosingData function. One begins on line 338, and the other begins on line 353. Consider combining these statements into one.", "body": "There are two if statements with the same conditional in the calculateClosingData function. One begins on line 338, and the other begins on line 353. Consider combining these statements into one.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#there-are-two-if-statements-with-the-same-conditional-in-the-calculateclosingdata-function.-one-begins-on-line-338,-and-the-other-begins-on-line-353.-consider-combining-these-statements-into-one.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #518.", "body": "Update: Fixed in PR #518.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#518.", "labels": ["OpenZeppelin"]}, {"title": "[N05] ensureClosingAccess function can be restricted to view", "body": "[N05] ensureClosingAccess function can be restricted to view", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n05]-ensureclosingaccess-function-can-be-restricted-to-view", "labels": ["OpenZeppelin"]}, {"title": "The ensureClosingAccess() function on line 287 of Trading.sol does not modify any state variables. Considering restricting the function to view.", "body": "The ensureClosingAccess() function on line 287 of Trading.sol does not modify any state variables. Considering restricting the function to view.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#the-ensureclosingaccess()-function-on-line-287-of-trading.sol-does-not-modify-any-state-variables.-considering-restricting-the-function-to-view.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #487.", "body": "Update: Fixed in PR #487.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#487.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Incorrect code comment", "body": "[N06] Incorrect code comment", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n06]-incorrect-code-comment", "labels": ["OpenZeppelin"]}, {"title": "The comment on line 25 of Wallet.sol says tokenAddress -> userAddress -> amount but it should say userAddress -> tokenAddress -> amount", "body": "The comment on line 25 of Wallet.sol says tokenAddress -> userAddress -> amount but it should say userAddress -> tokenAddress -> amount", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#the-comment-on-line-25-of-wallet.sol-says-tokenaddress-->-useraddress-->-amount-but-it-should-say-useraddress-->-tokenaddress-->-amount", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #519.", "body": "Update: Fixed in PR #519.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#519.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Lack of explicit visibility for some state variables and constants", "body": "[N07] Lack of explicit visibility for some state variables and constants", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n07]-lack-of-explicit-visibility-for-some-state-variables-and-constants", "labels": ["OpenZeppelin"]}, {"title": "Some state variables and constants do not have explicit visibility. See constants in MessageProcessor, the replayNumberByUserAddress in ReplayTracker, etc. To improve readability, consider making the visibility of all state variables and constants explicit throughout the code.", "body": "Some state variables and constants do not have explicit visibility. See constants in MessageProcessor, the replayNumberByUserAddress in ReplayTracker, etc. To improve readability, consider making the visibility of all state variables and constants explicit throughout the code.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#some-state-variables-and-constants-do-not-have-explicit-visibility.-see-constants-in-messageprocessor,-the-replaynumberbyuseraddress-in-replaytracker,-etc.-to-improve-readability,-consider-making-the-visibility-of-all-state-variables-and-constants-explicit-throughout-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #535.", "body": "Update: Fixed in PR #535.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#535.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Typos", "body": "[N08] Typos", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n08]-typos", "labels": ["OpenZeppelin"]}, {"title": "There are some mis-spelling across the codebase as listed below, we recommend a thorough spell check before releasing.", "body": "There are some mis-spelling across the codebase as listed below, we recommend a thorough spell check before releasing.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#there-are-some-mis-spelling-across-the-codebase-as-listed-below,-we-recommend-a-thorough-spell-check-before-releasing.", "labels": ["OpenZeppelin"]}, {"title": "exchange/Exchange.sol L86 occure should be occur, occurred", "body": "exchange/Exchange.sol L86 occure should be occur, occurred", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/exchange.sol-l86-occure-should-be-occur,-occurred", "labels": ["OpenZeppelin"]}, {"title": "exchange/Exchange.sol L187 incase should be in case", "body": "exchange/Exchange.sol L187 incase should be in case", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/exchange.sol-l187-incase-should-be-in-case", "labels": ["OpenZeppelin"]}, {"title": "exchange/Liquidity.sol L262 recieve should be receive", "body": "exchange/Liquidity.sol L262 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/liquidity.sol-l262-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "exchange/Liquidity.sol L270 recieve should be receive", "body": "exchange/Liquidity.sol L270 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/liquidity.sol-l270-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "exchange/Liquidity.sol L290 recieve should be receive", "body": "exchange/Liquidity.sol L290 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/liquidity.sol-l290-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "exchange/Liquidity.sol L298 recieve should be receive", "body": "exchange/Liquidity.sol L298 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/liquidity.sol-l298-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "exchange/Trading.sol L328 exlusive should be exclusive", "body": "exchange/Trading.sol L328 exlusive should be exclusive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/trading.sol-l328-exlusive-should-be-exclusive", "labels": ["OpenZeppelin"]}, {"title": "exchange/Trading.sol L440 exlusive should be exclusive", "body": "exchange/Trading.sol L440 exlusive should be exclusive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/trading.sol-l440-exlusive-should-be-exclusive", "labels": ["OpenZeppelin"]}, {"title": "exchange/VoteCasting.sol L66 exludes should be excludes, exudes", "body": "exchange/VoteCasting.sol L66 exludes should be excludes, exudes", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#exchange/votecasting.sol-l66-exludes-should-be-excludes,-exudes", "labels": ["OpenZeppelin"]}, {"title": "external/WrappedETH.sol L7 implemenetation should be implementation", "body": "external/WrappedETH.sol L7 implemenetation should be implementation", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#external/wrappedeth.sol-l7-implemenetation-should-be-implementation", "labels": ["OpenZeppelin"]}, {"title": "FSToken/FsProxyAdmin.sol L6 effectly should be effectively", "body": "FSToken/FsProxyAdmin.sol L6 effectly should be effectively", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#fstoken/fsproxyadmin.sol-l6-effectly-should-be-effectively", "labels": ["OpenZeppelin"]}, {"title": "incentives/Incentives.sol L323 begining should be beginning", "body": "incentives/Incentives.sol L323 begining should be beginning", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#incentives/incentives.sol-l323-begining-should-be-beginning", "labels": ["OpenZeppelin"]}, {"title": "incentives/Incentives.sol L337 payed should be paid", "body": "incentives/Incentives.sol L337 payed should be paid", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#incentives/incentives.sol-l337-payed-should-be-paid", "labels": ["OpenZeppelin"]}, {"title": "messageProcessor/MessageProcessor.sol L611 recieve should be receive", "body": "messageProcessor/MessageProcessor.sol L611 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#messageprocessor/messageprocessor.sol-l611-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "messageProcessor/MessageProcessor.sol L620 recieve should be receive", "body": "messageProcessor/MessageProcessor.sol L620 recieve should be receive", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#messageprocessor/messageprocessor.sol-l620-recieve-should-be-receive", "labels": ["OpenZeppelin"]}, {"title": "messageProcessor/MessageProcessor.sol L418 withDrawer should be withdrawer", "body": "messageProcessor/MessageProcessor.sol L418 withDrawer should be withdrawer", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#messageprocessor/messageprocessor.sol-l418-withdrawer-should-be-withdrawer", "labels": ["OpenZeppelin"]}, {"title": "registry/IRegistryUpdateConsumer.sol L3 objets should be objects", "body": "registry/IRegistryUpdateConsumer.sol L3 objets should be objects", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#registry/iregistryupdateconsumer.sol-l3-objets-should-be-objects", "labels": ["OpenZeppelin"]}, {"title": "registry/KnowsRegistry.sol L7 classs should be class", "body": "registry/KnowsRegistry.sol L7 classs should be class", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#registry/knowsregistry.sol-l7-classs-should-be-class", "labels": ["OpenZeppelin"]}, {"title": "registry/Registry.sol L13 Wether should be Weather, whether", "body": "registry/Registry.sol L13 Wether should be Weather, whether", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#registry/registry.sol-l13-wether-should-be-weather,-whether", "labels": ["OpenZeppelin"]}, {"title": "voting/Voting.sol L34 upgrate should be upgrade", "body": "voting/Voting.sol L34 upgrate should be upgrade", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#voting/voting.sol-l34-upgrate-should-be-upgrade", "labels": ["OpenZeppelin"]}, {"title": "voting/Voting.sol L61 lenght should be length", "body": "voting/Voting.sol L61 lenght should be length", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#voting/voting.sol-l61-lenght-should-be-length", "labels": ["OpenZeppelin"]}, {"title": "voting/Voting.sol L137 intial should be initial", "body": "voting/Voting.sol L137 intial should be initial", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#voting/voting.sol-l137-intial-should-be-initial", "labels": ["OpenZeppelin"]}, {"title": "wallet/DecimalPaddingToken.sol L27 correspoding should be corresponding", "body": "wallet/DecimalPaddingToken.sol L27 correspoding should be corresponding", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/decimalpaddingtoken.sol-l27-correspoding-should-be-corresponding", "labels": ["OpenZeppelin"]}, {"title": "wallet/DecimalPaddingToken.sol L36 correspoding should be corresponding", "body": "wallet/DecimalPaddingToken.sol L36 correspoding should be corresponding", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/decimalpaddingtoken.sol-l36-correspoding-should-be-corresponding", "labels": ["OpenZeppelin"]}, {"title": "wallet/Wallet.sol L120 retuns should be returns", "body": "wallet/Wallet.sol L120 retuns should be returns", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/wallet.sol-l120-retuns-should-be-returns", "labels": ["OpenZeppelin"]}, {"title": "wallet/Wallet.sol L195 to large should be too large", "body": "wallet/Wallet.sol L195 to large should be too large", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/wallet.sol-l195-to-large-should-be-too-large", "labels": ["OpenZeppelin"]}, {"title": "wallet/Wallet.sol L235 widthdrawl should be withdraw, withdrawal", "body": "wallet/Wallet.sol L235 widthdrawl should be withdraw, withdrawal", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/wallet.sol-l235-widthdrawl-should-be-withdraw,-withdrawal", "labels": ["OpenZeppelin"]}, {"title": "wallet/InternalWallet.sol L4 only every should be only ever", "body": "wallet/InternalWallet.sol L4 only every should be only ever", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#wallet/internalwallet.sol-l4-only-every-should-be-only-ever", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #516.", "body": "Update: Fixed in PR #516.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#516.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unused Parameters", "body": "[N09] Unused Parameters", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n09]-unused-parameters", "labels": ["OpenZeppelin"]}, {"title": "There are two unused parameters in the Exchange.addCollateral function. If these are not intended to be used in future upgrades, consider removing them.", "body": "There are two unused parameters in the Exchange.addCollateral function. If these are not intended to be used in future upgrades, consider removing them.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#there-are-two-unused-parameters-in-the-exchange.addcollateral-function.-if-these-are-not-intended-to-be-used-in-future-upgrades,-consider-removing-them.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #517.", "body": "Update: Fixed in PR #517.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#517.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Variable Naming Issues", "body": "[N10] Variable Naming Issues", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#[n10]-variable-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "The tokenAddress parameter of the Wallet.doWithdraw(address tokenAddress, uint256 amount, bool isWrapped, address to) function is always an \u201cinternal token address\u201d. Consider renaming it to _internalTokenAddress.", "body": "The tokenAddress parameter of the Wallet.doWithdraw(address tokenAddress, uint256 amount, bool isWrapped, address to) function is always an \u201cinternal token address\u201d. Consider renaming it to _internalTokenAddress.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#the-tokenaddress-parameter-of-the-wallet.dowithdraw(address-tokenaddress,-uint256-amount,-bool-iswrapped,-address-to)-function-is-always-an-\u201cinternal-token-address\u201d.-consider-renaming-it-to-_internaltokenaddress.", "labels": ["OpenZeppelin"]}, {"title": "In MessageProcessor.sol, the verifyMaxmarketAssetPrice and verifyMinmarketAssetPrice function names are not using camelCase.", "body": "In MessageProcessor.sol, the verifyMaxmarketAssetPrice and verifyMinmarketAssetPrice function names are not using camelCase.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#in-messageprocessor.sol,-the-verifymaxmarketassetprice-and-verifyminmarketassetprice-function-names-are-not-using-camelcase.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #524.", "body": "Update: Fixed in PR #524.", "html_url": "https://blog.openzeppelin.com/futureswap-v2-audit#update:-fixed-in-pr-#524.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Efficiency improvements", "body": "[N01] Efficiency improvements", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n01]-efficiency-improvements", "labels": ["OpenZeppelin"]}, {"title": "While the following code inefficiencies are not vulnerabilities in the Saddle contracts, we have listed them for the Saddle team to consider as potential improvements to the code.", "body": "While the following code inefficiencies are not vulnerabilities in the Saddle contracts, we have listed them for the Saddle team to consider as potential improvements to the code.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#while-the-following-code-inefficiencies-are-not-vulnerabilities-in-the-saddle-contracts,-we-have-listed-them-for-the-saddle-team-to-consider-as-potential-improvements-to-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Both calculateWithdrawOneTokenDY, and removeLiquidityImbalance both make 3 calls to _getAPrecise with an identical state. Consider instead making one call to _getAPrecise and storing the result to then reuse each time it is needed.", "body": "Both calculateWithdrawOneTokenDY, and removeLiquidityImbalance both make 3 calls to _getAPrecise with an identical state. Consider instead making one call to _getAPrecise and storing the result to then reuse each time it is needed.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#both-calculatewithdrawonetokendy,-and-removeliquidityimbalance-both-make-3-calls-to-_getaprecise-with-an-identical-state.-consider-instead-making-one-call-to-_getaprecise-and-storing-the-result-to-then-reuse-each-time-it-is-needed.", "labels": ["OpenZeppelin"]}, {"title": "removeLiquidity contains two for loops in a row that each loop through all tokens. Consider combining them into just one for loop that performs all of the necessary actions.", "body": "removeLiquidity contains two for loops in a row that each loop through all tokens. Consider combining them into just one for loop that performs all of the necessary actions.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#removeliquidity-contains-two-for-loops-in-a-row-that-each-loop-through-all-tokens.-consider-combining-them-into-just-one-for-loop-that-performs-all-of-the-necessary-actions.", "labels": ["OpenZeppelin"]}, {"title": "addLiquidity calls getD(Swap) which itself calls _getAPrecise. addLiquidity then later calls _getAPrecise to pass into getD(uint256[], uint256). Consider performing just one call to _getAPrecise, and passing this stored value into getD(uint256[], uint256) twice.", "body": "addLiquidity calls getD(Swap) which itself calls _getAPrecise. addLiquidity then later calls _getAPrecise to pass into getD(uint256[], uint256). Consider performing just one call to _getAPrecise, and passing this stored value into getD(uint256[], uint256) twice.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#addliquidity-calls-getd(swap)-which-itself-calls-_getaprecise.-addliquidity-then-later-calls-_getaprecise-to-pass-into-getd(uint256[],-uint256).-consider-performing-just-one-call-to-_getaprecise,-and-passing-this-stored-value-into-getd(uint256[],-uint256)-twice.", "labels": ["OpenZeppelin"]}, {"title": "A few times throughout SwapUtils the code requires that some x < = y before then using SafeMath to perform y.sub(x). Given that SafeMath already performs checks that the subtraction cannot overflow, consider removing the require statement preceding the subtraction. Two examples of where this occurs are: line 586 of calculateTokenAmount, and line 850 of removeLiquidityImbalance. Note also that SafeMath provides a sub function which can apply a custom error message. Consider making the suggested changes to improve the efficiency of the contracts. Update: Fixed in pull request 200.", "body": "A few times throughout SwapUtils the code requires that some x < = y before then using SafeMath to perform y.sub(x). Given that SafeMath already performs checks that the subtraction cannot overflow, consider removing the require statement preceding the subtraction. Two examples of where this occurs are: line 586 of calculateTokenAmount, and line 850 of removeLiquidityImbalance. Note also that SafeMath provides a sub function which can apply a custom error message. Consider making the suggested changes to improve the efficiency of the contracts. Update: Fixed in pull request 200.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#a-few-times-throughout-swaputils-the-code-requires-that-some-x-<-=-y-before-then-using-safemath-to-perform-y.sub(x).-given-that-safemath-already-performs-checks-that-the-subtraction-cannot-overflow,-consider-removing-the-require-statement-preceding-the-subtraction.-two-examples-of-where-this-occurs-are:-line-586-of-calculatetokenamount,-and-line-850-of-removeliquidityimbalance.-note-also-that-safemath-provides-a-sub-function-which-can-apply-a-custom-error-message.-consider-making-the-suggested-changes-to-improve-the-efficiency-of-the-contracts.-update:-fixed-in-pull-request-200.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Missing, incorrect, or incomplete NatSpec comments", "body": "[N02] Missing, incorrect, or incomplete NatSpec comments", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n02]-missing,-incorrect,-or-incomplete-natspec-comments", "labels": ["OpenZeppelin"]}, {"title": "Within the codebase, many functions have missing, incorrect, or incomplete NatSpec comments.", "body": "Within the codebase, many functions have missing, incorrect, or incomplete NatSpec comments.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#within-the-codebase,-many-functions-have-missing,-incorrect,-or-incomplete-natspec-comments.", "labels": ["OpenZeppelin"]}, {"title": "The transfer and transferFrom functions of LPToken have no NatSpec comments.", "body": "The transfer and transferFrom functions of LPToken have no NatSpec comments.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-transfer-and-transferfrom-functions-of-lptoken-have-no-natspec-comments.", "labels": ["OpenZeppelin"]}, {"title": "The calculateTokenAmount function of SwapUtils is missing an explanation of it\u2019s return parameter.", "body": "The calculateTokenAmount function of SwapUtils is missing an explanation of it\u2019s return parameter.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-calculatetokenamount-function-of-swaputils-is-missing-an-explanation-of-it\u2019s-return-parameter.", "labels": ["OpenZeppelin"]}, {"title": "The self parameter of many functions in SwapUtils is undocumented.", "body": "The self parameter of many functions in SwapUtils is undocumented.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-self-parameter-of-many-functions-in-swaputils-is-undocumented.", "labels": ["OpenZeppelin"]}, {"title": "The tokenAmount parameter of removeLiquidityOneToken is incorrectly labelled as \u201cthe amount of the token you want to receive\u201d, when it is actually the amount of liquidity tokens to burn. The solidity documentation recommends NatSpec for all public interfaces (everything in the ABI). Consider implementing complete NatSpec for all public and external functions.", "body": "The tokenAmount parameter of removeLiquidityOneToken is incorrectly labelled as \u201cthe amount of the token you want to receive\u201d, when it is actually the amount of liquidity tokens to burn. The solidity documentation recommends NatSpec for all public interfaces (everything in the ABI). Consider implementing complete NatSpec for all public and external functions.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-tokenamount-parameter-of-removeliquidityonetoken-is-incorrectly-labelled-as-\u201cthe-amount-of-the-token-you-want-to-receive\u201d,-when-it-is-actually-the-amount-of-liquidity-tokens-to-burn.-the-solidity-documentation-recommends-natspec-for-all-public-interfaces-(everything-in-the-abi).-consider-implementing-complete-natspec-for-all-public-and-external-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 199.", "body": "Update: Fixed in pull request 199.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-199.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Inconsistent coding style", "body": "[N03] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n03]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "The code base does not follow a consistent coding style.Namely:", "body": "The code base does not follow a consistent coding style.Namely:", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-code-base-does-not-follow-a-consistent-coding-style.namely:", "labels": ["OpenZeppelin"]}, {"title": "The use of leading underscores to mark internal functions. For example, _updateUserWithdrawFee is internal and marked with an underscore, whereas feePerToken is not.", "body": "The use of leading underscores to mark internal functions. For example, _updateUserWithdrawFee is internal and marked with an underscore, whereas feePerToken is not.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-use-of-leading-underscores-to-mark-internal-functions.-for-example,-_updateuserwithdrawfee-is-internal-and-marked-with-an-underscore,-whereas-feepertoken-is-not.", "labels": ["OpenZeppelin"]}, {"title": "The use of underscores to mark a function parameter. For example, function _xp has parameters _balances marked with an underscore, and precisionMultipliers with no underscore.", "body": "The use of underscores to mark a function parameter. For example, function _xp has parameters _balances marked with an underscore, and precisionMultipliers with no underscore.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-use-of-underscores-to-mark-a-function-parameter.-for-example,-function-_xp-has-parameters-_balances-marked-with-an-underscore,-and-precisionmultipliers-with-no-underscore.", "labels": ["OpenZeppelin"]}, {"title": "The use of lowercase letters for variable names. For example, struct CalculateWithdrawOneTokenDYInfo has fields D0 and D1 beginning with uppercase letters, and fields newY and feePerToken beginning with lowercase letters.", "body": "The use of lowercase letters for variable names. For example, struct CalculateWithdrawOneTokenDYInfo has fields D0 and D1 beginning with uppercase letters, and fields newY and feePerToken beginning with lowercase letters.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-use-of-lowercase-letters-for-variable-names.-for-example,-struct-calculatewithdrawonetokendyinfo-has-fields-d0-and-d1-beginning-with-uppercase-letters,-and-fields-newy-and-feepertoken-beginning-with-lowercase-letters.", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent style of wrapping long function signatures. For example see the wrapping of calculateTokenAmount versus the wrapping of calculateRemoveLiquidity. Consider always following the same style to improve the project\u2019s readability. As reference, consider following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Inconsistent style of wrapping long function signatures. For example see the wrapping of calculateTokenAmount versus the wrapping of calculateRemoveLiquidity. Consider always following the same style to improve the project\u2019s readability. As reference, consider following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#inconsistent-style-of-wrapping-long-function-signatures.-for-example-see-the-wrapping-of-calculatetokenamount-versus-the-wrapping-of-calculateremoveliquidity.-consider-always-following-the-same-style-to-improve-the-project\u2019s-readability.-as-reference,-consider-following-the-style-proposed-in-solidity\u2019s-style-guide.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 203.", "body": "Update: Fixed in pull request 203.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-203.", "labels": ["OpenZeppelin"]}, {"title": "[N04] LPToken copying inherited code", "body": "[N04] LPToken copying inherited code", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n04]-lptoken-copying-inherited-code", "labels": ["OpenZeppelin"]}, {"title": "LPToken contract, the", "body": "LPToken contract, the", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#lptoken-contract,-the", "labels": ["OpenZeppelin"]}, {"title": "transfer and", "body": "transferFrom functions re-implement the code from OpenZeppelins  ERC20 contract functions    transferFrom. Instead of re-implementing this code in  Update: Fixed in pull request 193.  [N05] calculateCurrentWithdrawFee else case missing an explicit return  calculateCurrentWithdrawFee function within  4 weeks has passed, and if not returns the calculated fee. However in the case that 4 weeks  if statement is not executed.  Update: Fixed in pull request 156.  [N06] Writing custom Pausable and ERC20Mintable contracts  The contracts OwnerPausable and LPToken implement custom logic to enable pausing of contracts and a mintable ERC20 respectively. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library. In particular, consider inheriting from OpenZeppelins Pausable and ERC20Mintable contracts. This will help reduce the codes attack surface.  Update: Fixed in pull request 198. ERC20Mintable was not implemented, Saddles reasoning for this:  As ERC20Mintable contract no longer exists in OpenZeppelin v3.0+, we left LPToken.sol as is.  [N07] Typos in comments  Within the codebase there are some instances of typos in comments and docstrings. Some examples are:  On line 18 of Swap.sol get should be gets.  On line 42 of Swap.sol fromm should be from.  On line 249 of Swap.sol tokens should be token.  On line 169 of SwapUtils.sol tokens to should be tokens.  On line 178 of SwapUtils.sol the word calculation should be removed.  Consider updating the lines identified above. Furthermore consider applying an automated spelling and grammar checker to your codebase to identify further instances.  Update: Fixed in pull request 192. Line 178 of SwapUtils.sol was removed.  [N08] Superfluous else clause  Within the SwapUtils function getYD, there exists an if clause and accompanying else clause. The else clause is superfluous, and can be removed. Consider removing it to simplify the codebase and improve code readability.  Update: Fixed in PR#188  [N09] Unnecessary inheritance in LPToken  LPToken contract  inherits ERC20 along with  inherits ERC20 already, so there is no need to inherit it again in  Consider removing the inheritance of ERC20 from LPToken.  Update: Fixed in PR#187.  [N10] Declare uint as uint256  To favor explicitness, consider declaring the instance of uint in the CERC20Utils contract as uint256.  Update: Fixed in PR#186  Conclusions  0 critical and 0 high severity issues were found during this audit, and the contracts were found to function much the same as Curves StableSwap implementation. Some less-severe issues were discovered and changes were proposed to follow best practices and reduce potential attack surface. We advise the Saddle team conducts further research into Curves StableSwap algorithm to ensure all potential side-effects and pitfalls of using their algorithm are considered.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#transfer-and", "labels": ["OpenZeppelin"]}, {"title": "transferFrom functions re-implement the code from OpenZeppelin\u2019s", "body": "transferFrom functions re-implement the code from OpenZeppelin\u2019s", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#transferfrom-functions-re-implement-the-code-from-openzeppelin\u2019s", "labels": ["OpenZeppelin"]}, {"title": "ERC20 contract functions", "body": "ERC20 contract functions", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#erc20-contract-functions", "labels": ["OpenZeppelin"]}, {"title": "transferFrom. Instead of re-implementing this code in", "body": "transferFrom. Instead of re-implementing this code in", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#transferfrom.-instead-of-re-implementing-this-code-in", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 193.", "body": "Update: Fixed in pull request 193.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-193.", "labels": ["OpenZeppelin"]}, {"title": "[N05] calculateCurrentWithdrawFee else case missing an explicit return", "body": "[N05] calculateCurrentWithdrawFee else case missing an explicit return", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n05]-calculatecurrentwithdrawfee-else-case-missing-an-explicit-return", "labels": ["OpenZeppelin"]}, {"title": "calculateCurrentWithdrawFee function within", "body": "calculateCurrentWithdrawFee function within", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#calculatecurrentwithdrawfee-function-within", "labels": ["OpenZeppelin"]}, {"title": "4 weeks has passed, and if not returns the calculated fee. However in the case that 4 weeks", "body": "4 weeks has passed, and if not returns the calculated fee. However in the case that 4 weeks", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#4-weeks-has-passed,-and-if-not-returns-the-calculated-fee.-however-in-the-case-that-4-weeks", "labels": ["OpenZeppelin"]}, {"title": "if statement is not executed.", "body": "if statement is not executed.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#if-statement-is-not-executed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 156.", "body": "Update: Fixed in pull request 156.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-156.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Writing custom Pausable and ERC20Mintable contracts", "body": "[N06] Writing custom Pausable and ERC20Mintable contracts", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n06]-writing-custom-pausable-and-erc20mintable-contracts", "labels": ["OpenZeppelin"]}, {"title": "The contracts OwnerPausable and LPToken implement custom logic to enable pausing of contracts and a mintable ERC20 respectively. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library. In particular, consider inheriting from OpenZeppelin\u2019s Pausable and ERC20Mintable contracts. This will help reduce the code\u2019s attack surface.", "body": "The contracts OwnerPausable and LPToken implement custom logic to enable pausing of contracts and a mintable ERC20 respectively. Although this does not pose a security risk, consider always inheriting functionality from the secure, community-vetted, OpenZeppelin Contracts library. In particular, consider inheriting from OpenZeppelin\u2019s Pausable and ERC20Mintable contracts. This will help reduce the code\u2019s attack surface.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#the-contracts-ownerpausable-and-lptoken-implement-custom-logic-to-enable-pausing-of-contracts-and-a-mintable-erc20-respectively.-although-this-does-not-pose-a-security-risk,-consider-always-inheriting-functionality-from-the-secure,-community-vetted,-openzeppelin-contracts-library.-in-particular,-consider-inheriting-from-openzeppelin\u2019s-pausable-and-erc20mintable-contracts.-this-will-help-reduce-the-code\u2019s-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 198. ERC20Mintable was not implemented, Saddle\u2019s reasoning for this:", "body": "Update: Fixed in pull request 198. ERC20Mintable was not implemented, Saddle\u2019s reasoning for this:", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-198.-erc20mintable-was-not-implemented,-saddle\u2019s-reasoning-for-this:", "labels": ["OpenZeppelin"]}, {"title": "As ERC20Mintable contract no longer exists in OpenZeppelin v3.0+, we left LPToken.sol as is.", "body": "As ERC20Mintable contract no longer exists in OpenZeppelin v3.0+, we left LPToken.sol as is.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#as-erc20mintable-contract-no-longer-exists-in-openzeppelin-v3.0+,-we-left-lptoken.sol-as-is.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Typos in comments", "body": "[N07] Typos in comments", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n07]-typos-in-comments", "labels": ["OpenZeppelin"]}, {"title": "Within the codebase there are some instances of typos in comments and docstrings. Some examples are:", "body": "Within the codebase there are some instances of typos in comments and docstrings. Some examples are:", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#within-the-codebase-there-are-some-instances-of-typos-in-comments-and-docstrings.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "On line 18 of Swap.sol get should be gets.", "body": "On line 18 of Swap.sol get should be gets.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#on-line-18-of-swap.sol-get-should-be-gets.", "labels": ["OpenZeppelin"]}, {"title": "On line 42 of Swap.sol fromm should be from.", "body": "On line 42 of Swap.sol fromm should be from.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#on-line-42-of-swap.sol-fromm-should-be-from.", "labels": ["OpenZeppelin"]}, {"title": "On line 249 of Swap.sol tokens should be token.", "body": "On line 249 of Swap.sol tokens should be token.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#on-line-249-of-swap.sol-tokens-should-be-token.", "labels": ["OpenZeppelin"]}, {"title": "On line 169 of SwapUtils.sol tokens to should be tokens.", "body": "On line 169 of SwapUtils.sol tokens to should be tokens.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#on-line-169-of-swaputils.sol-tokens-to-should-be-tokens.", "labels": ["OpenZeppelin"]}, {"title": "On line 178 of SwapUtils.sol the word calculation should be removed.", "body": "On line 178 of SwapUtils.sol the word calculation should be removed.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#on-line-178-of-swaputils.sol-the-word-calculation-should-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the lines identified above. Furthermore consider applying an automated spelling and grammar checker to your codebase to identify further instances.", "body": "Consider updating the lines identified above. Furthermore consider applying an automated spelling and grammar checker to your codebase to identify further instances.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#consider-updating-the-lines-identified-above.-furthermore-consider-applying-an-automated-spelling-and-grammar-checker-to-your-codebase-to-identify-further-instances.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 192. Line 178 of SwapUtils.sol was removed.", "body": "Update: Fixed in pull request 192. Line 178 of SwapUtils.sol was removed.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pull-request-192.-line-178-of-swaputils.sol-was-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Superfluous else clause", "body": "[N08] Superfluous else clause", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n08]-superfluous-else-clause", "labels": ["OpenZeppelin"]}, {"title": "Within the SwapUtils function getYD, there exists an if clause and accompanying else clause. The else clause is superfluous, and can be removed. Consider removing it to simplify the codebase and improve code readability.", "body": "Within the SwapUtils function getYD, there exists an if clause and accompanying else clause. The else clause is superfluous, and can be removed. Consider removing it to simplify the codebase and improve code readability.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#within-the-swaputils-function-getyd,-there-exists-an-if-clause-and-accompanying-else-clause.-the-else-clause-is-superfluous,-and-can-be-removed.-consider-removing-it-to-simplify-the-codebase-and-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#188", "body": "Update: Fixed in PR#188", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pr#188", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unnecessary inheritance in LPToken", "body": "[N09] Unnecessary inheritance in LPToken", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n09]-unnecessary-inheritance-in-lptoken", "labels": ["OpenZeppelin"]}, {"title": "LPToken contract", "body": "inherits ERC20 along with  inherits ERC20 already, so there is no need to inherit it again in  Consider removing the inheritance of ERC20 from LPToken.  Update: Fixed in PR#187.  [N10] Declare uint as uint256  To favor explicitness, consider declaring the instance of uint in the CERC20Utils contract as uint256.  Update: Fixed in PR#186  Conclusions  0 critical and 0 high severity issues were found during this audit, and the contracts were found to function much the same as Curves StableSwap implementation. Some less-severe issues were discovered and changes were proposed to follow best practices and reduce potential attack surface. We advise the Saddle team conducts further research into Curves StableSwap algorithm to ensure all potential side-effects and pitfalls of using their algorithm are considered.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#lptoken-contract", "labels": ["OpenZeppelin"]}, {"title": "inherits ERC20 along with", "body": "inherits ERC20 along with", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#inherits-erc20-along-with", "labels": ["OpenZeppelin"]}, {"title": "inherits ERC20 already, so there is no need to inherit it again in", "body": "inherits ERC20 already, so there is no need to inherit it again in", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#inherits-erc20-already,-so-there-is-no-need-to-inherit-it-again-in", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the inheritance of ERC20 from LPToken.", "body": "Consider removing the inheritance of ERC20 from LPToken.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#consider-removing-the-inheritance-of-erc20-from-lptoken.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#187.", "body": "Update: Fixed in PR#187.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pr#187.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Declare uint as uint256", "body": "[N10] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#[n10]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider declaring the instance of uint in the CERC20Utils contract as uint256.", "body": "To favor explicitness, consider declaring the instance of uint in the CERC20Utils contract as uint256.", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#to-favor-explicitness,-consider-declaring-the-instance-of-uint-in-the-cerc20utils-contract-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#186", "body": "Update: Fixed in PR#186", "html_url": "https://blog.openzeppelin.com/saddle-contracts-audit#update:-fixed-in-pr#186", "labels": ["OpenZeppelin"]}, {"title": "[N01] State variables and events declared after functions", "body": "[N01] State variables and events declared after functions", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n01]-state-variables-and-events-declared-after-functions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code base, variables and events are declared after functions. For example, in the AccountingEngine contract, the function addAuthorization uses the contractEnabled variable on line 55. This variable is declared further down in the contract on line 122.", "body": "Throughout the code base, variables and events are declared after functions. For example, in the AccountingEngine contract, the function addAuthorization uses the contractEnabled variable on line 55. This variable is declared further down in the contract on line 122.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#throughout-the-code-base,-variables-and-events-are-declared-after-functions.-for-example,-in-the-accountingengine-contract,-the-function-addauthorization-uses-the-contractenabled-variable-on-line-55.-this-variable-is-declared-further-down-in-the-contract-on-line-122.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability, consider declaring state variables, events and constructor before defining functions within a contract.", "body": "To improve readability, consider declaring state variables, events and constructor before defining functions within a contract.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#to-improve-readability,-consider-declaring-state-variables,-events-and-constructor-before-defining-functions-within-a-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, not fixed. Reflexer Labs\u2019 statement for this issue:", "body": "We will have to delay this but we will take care of it.  [L09] Lack of input sanitization  Throughout the codebase, many contracts have an instance of the function modifyParameters(), which allows authorized accounts to change parameters of the protocol. For example, such functions exist in the CoinSavingsAccount contract and in the GlobalSettlement contract, among many others.  GlobalSettlement contract, no changes to  AccountingEngine contract, some delay parameters are not bounded, allowing them to be set to excessively high values. And in the  CollateralAuctionHouse contract, some parameters are immediately cast to  Furthermore, values passed into constructors for various contracts do not contain input checks. For example, the constructor for the BasicCollateralJoin contract contains no checks that the two address parameters are not address(0), and neither does the constructor of the CollateralAuctionHouse contract.  Update: Aknowledged, not fixed. Reflexer Labs statement for this issue:  We understand the concern although wed like to stick to what we inherited from MCD.  [L10] Repeated code  Throughout the code base, there is consistent use of repeated code. Some instances of repeated code are as follows:  All the arithmetic functions, such as in AccountingEngine or in OracleRelayer, are repeated in many contracts. Note that these arithmetic functions are well covered by OpenZeppelin Math libraries, which are battle tested and widely adopted contracts.  The governance functions addAuthorization and removeAuthorization, and the modifier isAuthorized are repetitive.  Similarly, the either and both functions, which are just performing logical OR and AND operations, are often repeated in the code base.  Lines 199-201 of the disableContract function in the StabilityFeeTreasury contract are the same as the joinAllCoins function.  The conditions on lines 317-320 and line 348 of the LiquidationEngine contract are identical.  Lines 489-491 and 353-355 of the SAFEEngine contract are repeated.  Lines 717 and 726 of the FixedDiscountCollateralAuctionHouse contract are repeated.  getApproximateCollateralBought and getCollateralBoughtfunctions of the FixedDiscountCollateralAuctionHouse contract are almost identical.  Solidity language provides the use of libraries to call functions that need to be accessed by several contracts and that are always the same. Having libraries is easy for code maintenance since any bug or new functionality can be coded in only one single contract that serves all the others. Also, libraries can also help in reducing the gas cost associated with deployment and use of the contracts while reducing the potential attack surface. Contracts can also define internal functions that are then called internally in many places.  Consider adopting libraries and internal functions design to improve code size, quality and readability at the same time.  Update: Partially fixed in pull request #84. Lines 199-201 in StabilityFeeTreasury have been replaced with a call to joinAllCoins, and the getAdjustedBid function has been created to consolidate functionality for getApproximateCollateralBought and getCollateralBought.  [L11] Uncommented assembly block  The OracleRelayer contract includes an assembly block in the rpower() function. The same assembly block is repeated in the TaxCollector and CoinSavingsAccount contracts.  CollateralAuctionHouse,  LiquidationEngine,  SAFEEngine,  StabilityFeeTreasury and  TaxCollector contracts are using assembly lines without any docstring or comment.  While this does not pose a security risk per se, it is at the same time a complicated and critical part of the system. Moreover, as this is a low-level language that is harder to parse by readers, consider including extensive documentation regarding the rationale behind its use, clearly explaining what every single assembly instruction does. This will make it easier for users to trust the code, for reviewers to verify it, and for developers to build on top of it or update it.  Note that the use of assembly discards several important safety features of Solidity, which may render the code unsafer and more error-prone. Hence, consider implementing thorough tests to cover all potential use cases of these functions to ensure they behave as expected.    We will have to delay this.  [L12] Unnecessary require statements  There are several instances in the code base where the require statements or conditional checks are unnecessary. For instance:  In the OracleRelayer contract, the require statement in the modifyParameters function at line 189 checks if the input parameter data &gt; 0. This is unnecessary since the same condition is already checked in the require statement at line 187.  In the StabilityFeeTreasury contract, the require statement in the constructor at line 113 checks if the input address accountingEngine_ is not the same as address(this). The scenario can happen only when the address of the StabilityFeeTreasury contract, that is going to be deployed, is precalculated and then passed to the constructor as the accountingEngine_ address. Since the StabilityFeeTreasury contract is deployed by the governance, which is assumed to not be malicious, this check is unnecessary.  To simplify the code and prevent wastage of gas, consider removing the unnecessary checks.  Update: Fixed in pull request #85.  Notes & Additional Information  [N01] State variables and events declared after functions  Throughout the code base, variables and events are declared after functions. For example, in the AccountingEngine contract, the function addAuthorization uses the contractEnabled variable on line 55. This variable is declared further down in the contract on line 122.  To improve readability, consider declaring state variables, events and constructor before defining functions within a contract.    For now we will keep the same structure.  [N02] Incorrect or misleading docstrings  In the code base there are several docstrings that are either incorrect or confusing. Examples are:  Line 299 of the AccountingEngine contract says that the contract will automatically send any surplus right away. This is done by calling transferPostSettlementSurplus but this is not done within the function.  Line 182 of the CoinSavingsAccount contract says smaller when it should be greater than.  Line 212 of the LinkedList contract should say head or tail rather than head.  Line 476 of SAFEEngine contract should say debt rather than collateral.  Line 85 of the GlobalSettlement contract says that shutdownSystem() will cancel collateral auctions. This is not true since it is done in the fastTrackAuction() function.  Consider reviewing all docstrings in the code base and fixing them to better reflect function behaviours and improve code readability.  Update: Fixed in pull request #86.  [N03] Catch clause not handled  In getCollateralMedianPrice and getSystemCoinMarketPrice functions of the FixedDiscountCollateralAuctionHouse contract, the catch clause of the try/catch is not emitting events nor handling the error, continuing the execution.  Even if continuing execution after a possible fail is something explicitly wanted, to follow the fail early and loudly principle, consider handling the catch clause by either emitting an appropriate event or registering the failed try call.    We will keep them as they are right now.  [N04] Naming issues  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are:  Rename SAFEEngine struct CollateralType to SAFECollateralInfo.  Rename SAFEEngine mapping collateralTypes to SAFEInfoForCollateral.  Rename OracleRelayer struct CollateralType to OracleCollateralInfo.  Rename OracleRelayer mapping collateralTypes to oracleInfoForCollateral.  Rename LiquidationEngine struct CollateralType to LiquidationCollateralInfo.  Rename LiquidationEngine mapping collateralTypes to liquidationInfoForCollateral.  Rename TaxCollector struct CollateralType to TaxCollateralInfo.  Rename TaxCollector mapping collateralTypes to taxInfoForCollateral.  Rename updateAccumulatedRate functions parameter rateMultiplier to rateIncrease.  Update: Acknowledged, not fixed. Reflexer Labs statement for this issue:  We will keep the namings as they are right now.  [N05] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Fixed in pull request #80.  [N06] restartAuction can be called for auctions which never started  In the DebtAuctionHouse contract, the function restartAuction can be called for auctions which have never started by passing in an id value greater than auctionsStarted.  pull request #87.  869 of the  leftoverCollateral variable defined two lines above. In order to save gas and improve code understandability, consider replacing the  commit c582fb57c746e36ed6f43ca80a7816e751c0ae2d.  CoinSavingsAccount contract, on  line 155 and on  line 210,  latestUpdateTime is compared to  updateAccumulatedRate will  set latestUpdateTime appropriately, and will  return early if  TaxCollector contract, on  line 241,  within taxSingle, and  return early if it has already been called for that  OracleRelayer contract, on  line 193,  set within updateRedemptionPrice, which is called by  redemptionPrice. It will  return early if called more than once within the same block. Consider replacing the identified  pull request #88 and  pull request #86. Only the identified instances within  [N09] Typos  There are several typos in the code base.  On line 116 of the AccountingEngine contract, surpluscan should be surplus can.  On line 131 of the BasicTokenAdapter contract, adapte should be adapter.  On line 164 of the BasicTokenAdapter contract, an authed should be a restricted.  On line 803 of the CollateralAuctionHouse contract, its should be is.  On line 331 of the GlobalSettlement contract, art should be safeDebt.  On line 10 of the LinkedList contract, an utility should be a utility.  On line 128 of the LinkedList contract, _value should be StructLike(_struct).val(next_).  On line 212 of the LinkedList contract, head should be head or tail.  On line 129 of the OracleRelayer contract, alsites should probably be always.  On lines 162 and 218 of the OracleRelayer contract, whos should be whose.  On lines 296, 303 and 310 of the OracleRelayer contract, collateral price should be collateral type.  On line 61 of the SafeEngine contract, give should be deny.  Consider fixing them to improve readability and overall quality of the code base.  Update: Fixed in pull request #88.  [N10] Unclear variable role  23 and  371, the  is called auctionIncomeRecipient.  The CollateralAuctionHouse contracts are actually using the passed address as the one receiving system coins obtained by collateral auctions and for this, the initialBidder variables in the LiquidationEngine contract should be renamed to better reflect that they are the recipient of system coins and not the first bidders.  Update: Acknowledged, and will not fix. Reflexer Labs statement for this issue:  Same as M05, Maker made the interface general in the sense that we could have a future implementation where someone triggers an auction and also places the first bid.  [N11] Unnecessary event emission  The popDebtFromQueue function of the AccountingEngine contract is emitting a useless event whenever someone tries to call it with a debtBlockTimestamp that has not been saved before.  Consider checking if debtQueue[debtBlockTimestamp] is greater than 0 before anything else to save gas and avoid emitting unnecessary events.  Update: Fixed in pull request #89.  [N12] rmultiply() is not used in LiquidationEngine contract  In the LiquidationEngine contract, the internal function rmultiply() is unused in the audited codebase.  Consider removing it to simplify the code and improve readability.  Update: Fixed in pull request #90.  [N13] Unused variables  In the FixedDiscountCollateralAuctionHouse contract, inside the getApproximateCollateralBought and getCollateralBought functions, the totalRaised local variable is declared but not used anywhere else.  EnglishCollateralAuctionHouse,  FixedDiscountCollateralAuctionHouse,  DebtAuctionHouse,  PreSettlementSurplusAuctionHouse and  PostSettlementSurplusAuctionHouse, the constants  Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.  Consider removing the totalRaised variable and any unused constant from the code base.  Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs statement for this issue:  We want to leave these in because theyre used by other contracts and also by keepers to differentiate between auction types  Conclusions  No critical and one high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-acknowledged,-not-fixed.-reflexer-labs\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "For now we will keep the same structure.", "body": "For now we will keep the same structure.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#for-now-we-will-keep-the-same-structure.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Incorrect or misleading docstrings", "body": "[N02] Incorrect or misleading docstrings", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n02]-incorrect-or-misleading-docstrings", "labels": ["OpenZeppelin"]}, {"title": "In the code base there are several docstrings that are either incorrect or confusing. Examples are:", "body": "In the code base there are several docstrings that are either incorrect or confusing. Examples are:", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#in-the-code-base-there-are-several-docstrings-that-are-either-incorrect-or-confusing.-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "Line 299 of the AccountingEngine contract says that the contract will automatically send any surplus right away. This is done by calling transferPostSettlementSurplus but this is not done within the function.", "body": "Line 299 of the AccountingEngine contract says that the contract will automatically send any surplus right away. This is done by calling transferPostSettlementSurplus but this is not done within the function.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-299-of-the-accountingengine-contract-says-that-the-contract-will-automatically-send-any-surplus-right-away.-this-is-done-by-calling-transferpostsettlementsurplus-but-this-is-not-done-within-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Line 182 of the CoinSavingsAccount contract says \u201csmaller\u201d when it should be \u201cgreater than\u201d.", "body": "Line 182 of the CoinSavingsAccount contract says \u201csmaller\u201d when it should be \u201cgreater than\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-182-of-the-coinsavingsaccount-contract-says-\u201csmaller\u201d-when-it-should-be-\u201cgreater-than\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 212 of the LinkedList contract should say \u201chead or tail\u201d rather than \u201chead\u201d.", "body": "Line 212 of the LinkedList contract should say \u201chead or tail\u201d rather than \u201chead\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-212-of-the-linkedlist-contract-should-say-\u201chead-or-tail\u201d-rather-than-\u201chead\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 476 of SAFEEngine contract should say \u201cdebt\u201d rather than \u201ccollateral\u201d.", "body": "Line 476 of SAFEEngine contract should say \u201cdebt\u201d rather than \u201ccollateral\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-476-of-safeengine-contract-should-say-\u201cdebt\u201d-rather-than-\u201ccollateral\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 85 of the GlobalSettlement contract says that shutdownSystem() will cancel collateral auctions. This is not true since it is done in the fastTrackAuction() function.", "body": "Line 85 of the GlobalSettlement contract says that shutdownSystem() will cancel collateral auctions. This is not true since it is done in the fastTrackAuction() function.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-85-of-the-globalsettlement-contract-says-that-shutdownsystem()-will-cancel-collateral-auctions.-this-is-not-true-since-it-is-done-in-the-fasttrackauction()-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider reviewing all docstrings in the code base and fixing them to better reflect function behaviours and improve code readability.", "body": "Consider reviewing all docstrings in the code base and fixing them to better reflect function behaviours and improve code readability.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#consider-reviewing-all-docstrings-in-the-code-base-and-fixing-them-to-better-reflect-function-behaviours-and-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #86.", "body": "Update: Fixed in pull request #86.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-fixed-in-pull-request-#86.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Catch clause not handled", "body": "[N03] Catch clause not handled", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n03]-catch-clause-not-handled", "labels": ["OpenZeppelin"]}, {"title": "In getCollateralMedianPrice and getSystemCoinMarketPrice functions of the FixedDiscountCollateralAuctionHouse contract, the catch clause of the try/catch is not emitting events nor handling the error, continuing the execution.", "body": "In getCollateralMedianPrice and getSystemCoinMarketPrice functions of the FixedDiscountCollateralAuctionHouse contract, the catch clause of the try/catch is not emitting events nor handling the error, continuing the execution.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#in-getcollateralmedianprice-and-getsystemcoinmarketprice-functions-of-the-fixeddiscountcollateralauctionhouse-contract,-the-catch-clause-of-the-try/catch-is-not-emitting-events-nor-handling-the-error,-continuing-the-execution.", "labels": ["OpenZeppelin"]}, {"title": "Even if continuing execution after a possible fail is something explicitly wanted, to follow the \u201cfail early and loudly\u201d principle, consider handling the catch clause by either emitting an appropriate event or registering the failed try call.", "body": "Even if continuing execution after a possible fail is something explicitly wanted, to follow the \u201cfail early and loudly\u201d principle, consider handling the catch clause by either emitting an appropriate event or registering the failed try call.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#even-if-continuing-execution-after-a-possible-fail-is-something-explicitly-wanted,-to-follow-the-\u201cfail-early-and-loudly\u201d-principle,-consider-handling-the-catch-clause-by-either-emitting-an-appropriate-event-or-registering-the-failed-try-call.", "labels": ["OpenZeppelin"]}, {"title": "We will keep them as they are right now.", "body": "We will keep them as they are right now.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#we-will-keep-them-as-they-are-right-now.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Naming issues", "body": "[N04] Naming issues", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n04]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are:", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "Rename SAFEEngine struct CollateralType to SAFECollateralInfo.", "body": "Rename SAFEEngine struct CollateralType to SAFECollateralInfo.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-safeengine-struct-collateraltype-to-safecollateralinfo.", "labels": ["OpenZeppelin"]}, {"title": "Rename SAFEEngine mapping collateralTypes to SAFEInfoForCollateral.", "body": "Rename SAFEEngine mapping collateralTypes to SAFEInfoForCollateral.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-safeengine-mapping-collateraltypes-to-safeinfoforcollateral.", "labels": ["OpenZeppelin"]}, {"title": "Rename OracleRelayer struct CollateralType to OracleCollateralInfo.", "body": "Rename OracleRelayer struct CollateralType to OracleCollateralInfo.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-oraclerelayer-struct-collateraltype-to-oraclecollateralinfo.", "labels": ["OpenZeppelin"]}, {"title": "Rename OracleRelayer mapping collateralTypes to oracleInfoForCollateral.", "body": "Rename OracleRelayer mapping collateralTypes to oracleInfoForCollateral.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-oraclerelayer-mapping-collateraltypes-to-oracleinfoforcollateral.", "labels": ["OpenZeppelin"]}, {"title": "Rename LiquidationEngine struct CollateralType to LiquidationCollateralInfo.", "body": "Rename LiquidationEngine struct CollateralType to LiquidationCollateralInfo.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-liquidationengine-struct-collateraltype-to-liquidationcollateralinfo.", "labels": ["OpenZeppelin"]}, {"title": "Rename LiquidationEngine mapping collateralTypes to liquidationInfoForCollateral.", "body": "Rename LiquidationEngine mapping collateralTypes to liquidationInfoForCollateral.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-liquidationengine-mapping-collateraltypes-to-liquidationinfoforcollateral.", "labels": ["OpenZeppelin"]}, {"title": "Rename TaxCollector struct CollateralType to TaxCollateralInfo.", "body": "Rename TaxCollector struct CollateralType to TaxCollateralInfo.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-taxcollector-struct-collateraltype-to-taxcollateralinfo.", "labels": ["OpenZeppelin"]}, {"title": "Rename TaxCollector mapping collateralTypes to taxInfoForCollateral.", "body": "Rename TaxCollector mapping collateralTypes to taxInfoForCollateral.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-taxcollector-mapping-collateraltypes-to-taxinfoforcollateral.", "labels": ["OpenZeppelin"]}, {"title": "Rename updateAccumulatedRate function\u2019s parameter rateMultiplier to rateIncrease.", "body": "Rename updateAccumulatedRate function\u2019s parameter rateMultiplier to rateIncrease.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#rename-updateaccumulatedrate-function\u2019s-parameter-ratemultiplier-to-rateincrease.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, not fixed. Reflexer Lab\u2019s statement for this issue:", "body": "Update: Acknowledged, not fixed. Reflexer Lab\u2019s statement for this issue:", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-acknowledged,-not-fixed.-reflexer-lab\u2019s-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We will keep the namings as they are right now.", "body": "We will keep the namings as they are right now.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#we-will-keep-the-namings-as-they-are-right-now.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Solidity compiler version is not pinned", "body": "[N05] Solidity compiler version is not pinned", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n05]-solidity-compiler-version-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "body": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#throughout-the-code-base,-consider-pinning-the-version-of-the-solidity-compiler-to-its-latest-stable-version.-this-should-help-prevent-introducing-unexpected-bugs-due-to-incompatible-future-releases.-to-choose-a-specific-version,-developers-should-consider-both-the-compiler\u2019s-features-needed-by-the-project-and-the-list-of-known-bugs-associated-with-each-solidity-compiler-version.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #80.", "body": "Update: Fixed in pull request #80.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-fixed-in-pull-request-#80.", "labels": ["OpenZeppelin"]}, {"title": "[N06] restartAuction can be called for auctions which never started", "body": "[N06] restartAuction can be called for auctions which never started", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n06]-restartauction-can-be-called-for-auctions-which-never-started", "labels": ["OpenZeppelin"]}, {"title": "In the DebtAuctionHouse contract, the function restartAuction can be called for auctions which have never started by passing in an id value greater than auctionsStarted.", "body": "In the DebtAuctionHouse contract, the function restartAuction can be called for auctions which have never started by passing in an id value greater than auctionsStarted.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#in-the-debtauctionhouse-contract,-the-function-restartauction-can-be-called-for-auctions-which-have-never-started-by-passing-in-an-id-value-greater-than-auctionsstarted.", "labels": ["OpenZeppelin"]}, {"title": "pull request #87.", "body": "pull request #87.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#pull-request-#87.", "labels": ["OpenZeppelin"]}, {"title": "869 of the", "body": "869 of the", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#869-of-the", "labels": ["OpenZeppelin"]}, {"title": "leftoverCollateral variable defined two lines above. In order to save gas and improve code understandability, consider replacing the", "body": "leftoverCollateral variable defined two lines above. In order to save gas and improve code understandability, consider replacing the", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#leftovercollateral-variable-defined-two-lines-above.-in-order-to-save-gas-and-improve-code-understandability,-consider-replacing-the", "labels": ["OpenZeppelin"]}, {"title": "commit c582fb57c746e36ed6f43ca80a7816e751c0ae2d.", "body": "CoinSavingsAccount contract, on  line 155 and on  line 210,  latestUpdateTime is compared to  updateAccumulatedRate will  set latestUpdateTime appropriately, and will  return early if  TaxCollector contract, on  line 241,  within taxSingle, and  return early if it has already been called for that  OracleRelayer contract, on  line 193,  set within updateRedemptionPrice, which is called by  redemptionPrice. It will  return early if called more than once within the same block. Consider replacing the identified  pull request #88 and  pull request #86. Only the identified instances within  [N09] Typos  There are several typos in the code base.  On line 116 of the AccountingEngine contract, surpluscan should be surplus can.  On line 131 of the BasicTokenAdapter contract, adapte should be adapter.  On line 164 of the BasicTokenAdapter contract, an authed should be a restricted.  On line 803 of the CollateralAuctionHouse contract, its should be is.  On line 331 of the GlobalSettlement contract, art should be safeDebt.  On line 10 of the LinkedList contract, an utility should be a utility.  On line 128 of the LinkedList contract, _value should be StructLike(_struct).val(next_).  On line 212 of the LinkedList contract, head should be head or tail.  On line 129 of the OracleRelayer contract, alsites should probably be always.  On lines 162 and 218 of the OracleRelayer contract, whos should be whose.  On lines 296, 303 and 310 of the OracleRelayer contract, collateral price should be collateral type.  On line 61 of the SafeEngine contract, give should be deny.  Consider fixing them to improve readability and overall quality of the code base.  Update: Fixed in pull request #88.  [N10] Unclear variable role  23 and  371, the  is called auctionIncomeRecipient.  The CollateralAuctionHouse contracts are actually using the passed address as the one receiving system coins obtained by collateral auctions and for this, the initialBidder variables in the LiquidationEngine contract should be renamed to better reflect that they are the recipient of system coins and not the first bidders.  Update: Acknowledged, and will not fix. Reflexer Labs statement for this issue:  Same as M05, Maker made the interface general in the sense that we could have a future implementation where someone triggers an auction and also places the first bid.  [N11] Unnecessary event emission  The popDebtFromQueue function of the AccountingEngine contract is emitting a useless event whenever someone tries to call it with a debtBlockTimestamp that has not been saved before.  Consider checking if debtQueue[debtBlockTimestamp] is greater than 0 before anything else to save gas and avoid emitting unnecessary events.  Update: Fixed in pull request #89.  [N12] rmultiply() is not used in LiquidationEngine contract  In the LiquidationEngine contract, the internal function rmultiply() is unused in the audited codebase.  Consider removing it to simplify the code and improve readability.  Update: Fixed in pull request #90.  [N13] Unused variables  In the FixedDiscountCollateralAuctionHouse contract, inside the getApproximateCollateralBought and getCollateralBought functions, the totalRaised local variable is declared but not used anywhere else.  EnglishCollateralAuctionHouse,  FixedDiscountCollateralAuctionHouse,  DebtAuctionHouse,  PreSettlementSurplusAuctionHouse and  PostSettlementSurplusAuctionHouse, the constants  Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.  Consider removing the totalRaised variable and any unused constant from the code base.  Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs statement for this issue:  We want to leave these in because theyre used by other contracts and also by keepers to differentiate between auction types  Conclusions  No critical and one high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#commit-c582fb57c746e36ed6f43ca80a7816e751c0ae2d.", "labels": ["OpenZeppelin"]}, {"title": "CoinSavingsAccount contract, on", "body": "CoinSavingsAccount contract, on", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#coinsavingsaccount-contract,-on", "labels": ["OpenZeppelin"]}, {"title": "line 155 and on", "body": "line 155 and on", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-155-and-on", "labels": ["OpenZeppelin"]}, {"title": "line 210,", "body": "line 210,", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-210,", "labels": ["OpenZeppelin"]}, {"title": "latestUpdateTime is compared to", "body": "latestUpdateTime is compared to", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#latestupdatetime-is-compared-to", "labels": ["OpenZeppelin"]}, {"title": "updateAccumulatedRate will", "body": "updateAccumulatedRate will", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#updateaccumulatedrate-will", "labels": ["OpenZeppelin"]}, {"title": "set latestUpdateTime appropriately, and will", "body": "set latestUpdateTime appropriately, and will", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#set-latestupdatetime-appropriately,-and-will", "labels": ["OpenZeppelin"]}, {"title": "return early if", "body": "it has already been called for that  OracleRelayer contract, on  line 193,  set within updateRedemptionPrice, which is called by  redemptionPrice. It will   called more than once within the same block. Consider replacing the identified  pull request #88 and  pull request #86. Only the identified instances within  [N09] Typos  There are several typos in the code base.  On line 116 of the AccountingEngine contract, surpluscan should be surplus can.  On line 131 of the BasicTokenAdapter contract, adapte should be adapter.  On line 164 of the BasicTokenAdapter contract, an authed should be a restricted.  On line 803 of the CollateralAuctionHouse contract, its should be is.  On line 331 of the GlobalSettlement contract, art should be safeDebt.  On line 10 of the LinkedList contract, an utility should be a utility.  On line 128 of the LinkedList contract, _value should be StructLike(_struct).val(next_).  On line 212 of the LinkedList contract, head should be head or tail.  On line 129 of the OracleRelayer contract, alsites should probably be always.  On lines 162 and 218 of the OracleRelayer contract, whos should be whose.  On lines 296, 303 and 310 of the OracleRelayer contract, collateral price should be collateral type.  On line 61 of the SafeEngine contract, give should be deny.  Consider fixing them to improve readability and overall quality of the code base.  Update: Fixed in pull request #88.  [N10] Unclear variable role  23 and  371, the  is called auctionIncomeRecipient.  The CollateralAuctionHouse contracts are actually using the passed address as the one receiving system coins obtained by collateral auctions and for this, the initialBidder variables in the LiquidationEngine contract should be renamed to better reflect that they are the recipient of system coins and not the first bidders.  Update: Acknowledged, and will not fix. Reflexer Labs statement for this issue:  Same as M05, Maker made the interface general in the sense that we could have a future implementation where someone triggers an auction and also places the first bid.  [N11] Unnecessary event emission  The popDebtFromQueue function of the AccountingEngine contract is emitting a useless event whenever someone tries to call it with a debtBlockTimestamp that has not been saved before.  Consider checking if debtQueue[debtBlockTimestamp] is greater than 0 before anything else to save gas and avoid emitting unnecessary events.  Update: Fixed in pull request #89.  [N12] rmultiply() is not used in LiquidationEngine contract  In the LiquidationEngine contract, the internal function rmultiply() is unused in the audited codebase.  Consider removing it to simplify the code and improve readability.  Update: Fixed in pull request #90.  [N13] Unused variables  In the FixedDiscountCollateralAuctionHouse contract, inside the getApproximateCollateralBought and getCollateralBought functions, the totalRaised local variable is declared but not used anywhere else.  EnglishCollateralAuctionHouse,  FixedDiscountCollateralAuctionHouse,  DebtAuctionHouse,  PreSettlementSurplusAuctionHouse and  PostSettlementSurplusAuctionHouse, the constants  Lastly, the RAD constant in the FixedDiscountCollateralAuctionHouse is declared but never used.  Consider removing the totalRaised variable and any unused constant from the code base.  Update: Partially fixed in pull request #91. Instances of AUCTION_HOUSE_TYPE and AUCTION_TYPE have been intentionally left in the codebase. Reflexer Labs statement for this issue:  We want to leave these in because theyre used by other contracts and also by keepers to differentiate between auction types  Conclusions  No critical and one high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#return-early-if", "labels": ["OpenZeppelin"]}, {"title": "TaxCollector contract, on", "body": "TaxCollector contract, on", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#taxcollector-contract,-on", "labels": ["OpenZeppelin"]}, {"title": "line 241,", "body": "line 241,", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-241,", "labels": ["OpenZeppelin"]}, {"title": "within taxSingle, and", "body": "within taxSingle, and", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#within-taxsingle,-and", "labels": ["OpenZeppelin"]}, {"title": "return early if it has already been called for that", "body": "return early if it has already been called for that", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#return-early-if-it-has-already-been-called-for-that", "labels": ["OpenZeppelin"]}, {"title": "OracleRelayer contract, on", "body": "OracleRelayer contract, on", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#oraclerelayer-contract,-on", "labels": ["OpenZeppelin"]}, {"title": "line 193,", "body": "line 193,", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#line-193,", "labels": ["OpenZeppelin"]}, {"title": "set within updateRedemptionPrice, which is called by", "body": "set within updateRedemptionPrice, which is called by", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#set-within-updateredemptionprice,-which-is-called-by", "labels": ["OpenZeppelin"]}, {"title": "redemptionPrice. It will", "body": "redemptionPrice. It will", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#redemptionprice.-it-will", "labels": ["OpenZeppelin"]}, {"title": "return early if called more than once within the same block. Consider replacing the identified", "body": "return early if called more than once within the same block. Consider replacing the identified", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#return-early-if-called-more-than-once-within-the-same-block.-consider-replacing-the-identified", "labels": ["OpenZeppelin"]}, {"title": "pull request #88 and", "body": "pull request #88 and", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#pull-request-#88-and", "labels": ["OpenZeppelin"]}, {"title": "pull request #86. Only the identified instances within", "body": "pull request #86. Only the identified instances within", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#pull-request-#86.-only-the-identified-instances-within", "labels": ["OpenZeppelin"]}, {"title": "[N09] Typos", "body": "[N09] Typos", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#[n09]-typos", "labels": ["OpenZeppelin"]}, {"title": "There are several typos in the code base.", "body": "There are several typos in the code base.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#there-are-several-typos-in-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "On line 116 of the AccountingEngine contract, \u201csurpluscan\u201d should be \u201csurplus can\u201d.", "body": "On line 116 of the AccountingEngine contract, \u201csurpluscan\u201d should be \u201csurplus can\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-116-of-the-accountingengine-contract,-\u201csurpluscan\u201d-should-be-\u201csurplus-can\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 131 of the BasicTokenAdapter contract, \u201cadapte\u201d should be \u201cadapter\u201d.", "body": "On line 131 of the BasicTokenAdapter contract, \u201cadapte\u201d should be \u201cadapter\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-131-of-the-basictokenadapter-contract,-\u201cadapte\u201d-should-be-\u201cadapter\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 164 of the BasicTokenAdapter contract, \u201can authed\u201d should be \u201ca restricted\u201d.", "body": "On line 164 of the BasicTokenAdapter contract, \u201can authed\u201d should be \u201ca restricted\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-164-of-the-basictokenadapter-contract,-\u201can-authed\u201d-should-be-\u201ca-restricted\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 803 of the CollateralAuctionHouse contract, \u201cit\u2019s\u201d should be \u201cis\u201d.", "body": "On line 803 of the CollateralAuctionHouse contract, \u201cit\u2019s\u201d should be \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-803-of-the-collateralauctionhouse-contract,-\u201cit\u2019s\u201d-should-be-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 331 of the GlobalSettlement contract, \u201cart\u201d should be \u201csafeDebt\u201d.", "body": "On line 331 of the GlobalSettlement contract, \u201cart\u201d should be \u201csafeDebt\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-331-of-the-globalsettlement-contract,-\u201cart\u201d-should-be-\u201csafedebt\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 10 of the LinkedList contract, \u201can utility\u201d should be \u201ca utility\u201d.", "body": "On line 10 of the LinkedList contract, \u201can utility\u201d should be \u201ca utility\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-10-of-the-linkedlist-contract,-\u201can-utility\u201d-should-be-\u201ca-utility\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 128 of the LinkedList contract, \u201c_value\u201d should be \u201cStructLike(_struct).val(next_)\u201d.", "body": "On line 128 of the LinkedList contract, \u201c_value\u201d should be \u201cStructLike(_struct).val(next_)\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-128-of-the-linkedlist-contract,-\u201c_value\u201d-should-be-\u201cstructlike(_struct).val(next_)\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 212 of the LinkedList contract, \u201chead\u201d should be \u201chead or tail\u201d.", "body": "On line 212 of the LinkedList contract, \u201chead\u201d should be \u201chead or tail\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-212-of-the-linkedlist-contract,-\u201chead\u201d-should-be-\u201chead-or-tail\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 129 of the OracleRelayer contract, \u201calsites\u201d should probably be \u201calways\u201d.", "body": "On line 129 of the OracleRelayer contract, \u201calsites\u201d should probably be \u201calways\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-129-of-the-oraclerelayer-contract,-\u201calsites\u201d-should-probably-be-\u201calways\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On lines 162 and 218 of the OracleRelayer contract, \u201cwho\u2019s\u201d should be \u201cwhose\u201d.", "body": "On lines 162 and 218 of the OracleRelayer contract, \u201cwho\u2019s\u201d should be \u201cwhose\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-lines-162-and-218-of-the-oraclerelayer-contract,-\u201cwho\u2019s\u201d-should-be-\u201cwhose\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On lines 296, 303 and 310 of the OracleRelayer contract, \u201ccollateral price\u201d should be \u201ccollateral type\u201d.", "body": "On lines 296, 303 and 310 of the OracleRelayer contract, \u201ccollateral price\u201d should be \u201ccollateral type\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-lines-296,-303-and-310-of-the-oraclerelayer-contract,-\u201ccollateral-price\u201d-should-be-\u201ccollateral-type\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 61 of the SafeEngine contract, \u201cgive\u201d should be \u201cdeny\u201d.", "body": "On line 61 of the SafeEngine contract, \u201cgive\u201d should be \u201cdeny\u201d.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#on-line-61-of-the-safeengine-contract,-\u201cgive\u201d-should-be-\u201cdeny\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing them to improve readability and overall quality of the code base.", "body": "Consider fixing them to improve readability and overall quality of the code base.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#consider-fixing-them-to-improve-readability-and-overall-quality-of-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #88.", "body": "Update: Fixed in pull request #88.", "html_url": "https://blog.openzeppelin.com/geb-protocol-audit#update:-fixed-in-pull-request-#88.", "labels": ["OpenZeppelin"]}]