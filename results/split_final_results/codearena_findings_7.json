[{"title": "`public` functions can be `external`", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/126", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "`public` functions can be `external`"}, {"title": "Prefix increaments are cheaper than postfix increaments", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/125", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-vader-findings", "body": "Prefix increaments are cheaper than postfix increaments"}, {"title": "Unchecked{i++} is better than i++", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/124", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-vader-findings", "body": "Unchecked{i++} is better than i++"}, {"title": "Caching array length to save gas", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-vader-findings", "body": "Caching array length to save gas"}, {"title": "Add zero address validation in the GovernorAlpha contract", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/122", "labels": ["bug", "1 (Low Risk)", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Add zero address validation in the GovernorAlpha contract"}, {"title": "Incompatibility With Rebasing/Deflationary/Inflationary tokens", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/118", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "BasePool"], "target": "2021-11-vader-findings", "body": "Incompatibility With Rebasing/Deflationary/Inflationary tokens"}, {"title": "Redundant Functions", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/117", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "SwapQueue"], "target": "2021-11-vader-findings", "body": "Redundant Functions"}, {"title": "Redundant Gas Modifider", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/115", "labels": ["bug", "0 (Non-critical)", "sponsor disputed", "GasThrottle"], "target": "2021-11-vader-findings", "body": "Redundant Gas Modifider"}, {"title": "Redundant Code Statement", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/114", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Redundant Code Statement"}, {"title": "No event emission for \"guardian\" changes (GovernorAlpha.sol)", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/110", "labels": ["bug", "0 (Non-critical)", "sponsor disputed", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "No event emission for \"guardian\" changes (GovernorAlpha.sol)"}, {"title": "No event emission for \"timelock\" changes (GovernorAlpha.sol)", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/108", "labels": ["bug", "0 (Non-critical)", "sponsor disputed", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "No event emission for \"timelock\" changes (GovernorAlpha.sol)"}, {"title": "Long Revert Strings", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/104", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-vader-findings", "body": "Long Revert Strings"}, {"title": "User may not receive the full amount of IL compensation", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/100", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "VaderReserve"], "target": "2021-11-vader-findings", "body": "User may not receive the full amount of IL compensation"}, {"title": "internal function _addLiquidity in the router is unnecessary", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/99", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "VaderRouter"], "target": "2021-11-vader-findings", "body": "internal function _addLiquidity in the router is unnecessary"}, {"title": "Attacker can get extremely cheap synth by front-running create Pool", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/98", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "VaderPoolV2", "VaderPoolFactory"], "target": "2021-11-vader-findings", "body": "Attacker can get extremely cheap synth by front-running create Pool"}, {"title": "token allocation specs in contract code does not match with whitepaper", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/95", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "ProtocolConstants"], "target": "2021-11-vader-findings", "body": "token allocation specs in contract code does not match with whitepaper"}, {"title": "Save gas by caching array length used in for loops", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/94", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "GovernorAlpha", "LinearVesting"], "target": "2021-11-vader-findings", "body": "Save gas by caching array length used in for loops"}, {"title": "Missing hasStarted modifier, can lead to user vesting before the owner begin the vesting", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/90", "labels": ["bug", "2 (Med Risk)", "LinearVesting"], "target": "2021-11-vader-findings", "body": "Missing hasStarted modifier, can lead to user vesting before the owner begin the vesting"}, {"title": "using memory pointer instead storage", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/87", "labels": ["bug", "duplicate", "G (Gas Optimization)", "LinearVesting"], "target": "2021-11-vader-findings", "body": "using memory pointer instead storage"}, {"title": "using memory pointer instead storage", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/86", "labels": ["bug", "G (Gas Optimization)", "LinearVesting"], "target": "2021-11-vader-findings", "body": "using memory pointer instead storage"}, {"title": "Multiple Solidity pragma in repo/vader-bond/contracts/VaderBond.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/79", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma in repo/vader-bond/contracts/VaderBond.sol"}, {"title": "Multiple Solidity pragma in repo/vader-bond/contracts/Treasury.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/78", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond", "Treasury"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma in repo/vader-bond/contracts/Treasury.sol"}, {"title": "Multiple Solidity pragma repo/vader-bond/contracts/lib/FixedPoint.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/77", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma repo/vader-bond/contracts/lib/FixedPoint.sol"}, {"title": "Multiple Solidity pragma In repo/vader-bond/contracts/Ownable.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/76", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma In repo/vader-bond/contracts/Ownable.sol"}, {"title": "Multiple Solidity pragma repo/vader-bond/contracts/lib/FullMath.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/75", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma repo/vader-bond/contracts/lib/FullMath.sol"}, {"title": "Multiple Solidity pragma in repo/vader-bond/contracts/test/TestToken.sol", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/74", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma in repo/vader-bond/contracts/test/TestToken.sol"}, {"title": "Multiple Solidity pragma in repo/vader-bond/contracts/interfaces/ITreasury.sol ", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/73", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "Treasury"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma in repo/vader-bond/contracts/interfaces/ITreasury.sol "}, {"title": "Multiple Solidity pragma", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/72", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged", "VaderBond"], "target": "2021-11-vader-findings", "body": "Multiple Solidity pragma"}, {"title": "(dex-v1) BasePool.mint() function can be frontrun", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/71", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "BasePool"], "target": "2021-11-vader-findings", "body": "(dex-v1) BasePool.mint() function can be frontrun"}, {"title": "`onlyOnwer` in the synthFactory is confusing", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/68", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-11-vader-findings", "body": "`onlyOnwer` in the synthFactory is confusing"}, {"title": "add liquidity is vulnerable to sandwich attack", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/67", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "VaderRouterV2"], "target": "2021-11-vader-findings", "body": "add liquidity is vulnerable to sandwich attack"}, {"title": " calculate Loss is vulnerable to flashloan attack", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/65", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "VaderMath"], "target": "2021-11-vader-findings", "body": " calculate Loss is vulnerable to flashloan attack"}, {"title": "Using SafeMath ins Solidity 0.8.9 contracts wastes gas", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/64", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-vader-findings", "body": "Using SafeMath ins Solidity 0.8.9 contracts wastes gas"}, {"title": "Unnecessary validation of `proposalId>0` due to incorrect proposalId increments", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/62", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Unnecessary validation of `proposalId>0` due to incorrect proposalId increments"}, {"title": "Governance Veto lacks sufficient validation to protect against frontrunning", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/61", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Governance Veto lacks sufficient validation to protect against frontrunning"}, {"title": "Some public functions can be converted as external", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/52", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Some public functions can be converted as external"}, {"title": "Use SafeERC20 library", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/46", "labels": ["bug", "invalid", "sponsor disputed", "USDV", "XVader", "GovernorAlpha"], "target": "2021-11-vader-findings", "body": "Use SafeERC20 library"}, {"title": "Did not check if vestor is address(0)", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/42", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "LinearVesting"], "target": "2021-11-vader-findings", "body": "Did not check if vestor is address(0)"}, {"title": "Cache length of array before loop to optimize gas", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/41", "labels": ["bug", "G (Gas Optimization)", "LinearVesting"], "target": "2021-11-vader-findings", "body": "Cache length of array before loop to optimize gas"}, {"title": "Use `indexed` keyword in events which can be used as filter", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/40", "labels": ["bug", "0 (Non-critical)", "Vader"], "target": "2021-11-vader-findings", "body": "Use `indexed` keyword in events which can be used as filter"}, {"title": "VaderReserve does not support paying IL protection out to more than one address, resulting in locked funds", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/37", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "VaderRouter", "VaderRouterV2"], "target": "2021-11-vader-findings", "body": "VaderReserve does not support paying IL protection out to more than one address, resulting in locked funds"}, {"title": "Paying IL protection for all VaderPool pairs allows the reserve to be drained.", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/34", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "VaderRouter", "VaderPool"], "target": "2021-11-vader-findings", "body": "Paying IL protection for all VaderPool pairs allows the reserve to be drained."}, {"title": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/31", "labels": ["bug", "question", "3 (High Risk)", "VaderPoolV2", "VaderRouterV2"], "target": "2021-11-vader-findings", "body": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve."}, {"title": "Function LinearVesting.claim() will never meet require conditions", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/29", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "LinearVesting"], "target": "2021-11-vader-findings", "body": "Function LinearVesting.claim() will never meet require conditions"}, {"title": "Use `_safeMint()` instead of `_mint()`", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/27", "labels": ["bug", "1 (Low Risk)", "sponsor disputed", "BasePoolV2", "VaderRouterV2"], "target": "2021-11-vader-findings", "body": "Use `_safeMint()` instead of `_mint()`"}, {"title": "_totalSupply can be different from actual supply", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/26", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "StakingRewards"], "target": "2021-11-vader-findings", "body": "_totalSupply can be different from actual supply"}, {"title": "VaderRouter breaks compatibility with IUniswapV2Router0X", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/25", "labels": ["bug", "0 (Non-critical)", "VaderRouter"], "target": "2021-11-vader-findings", "body": "VaderRouter breaks compatibility with IUniswapV2Router0X"}, {"title": "VaderRouterV2 breaks compatibility with IUniswapV2Router0X", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/24", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "VaderRouterV2"], "target": "2021-11-vader-findings", "body": "VaderRouterV2 breaks compatibility with IUniswapV2Router0X"}, {"title": "Use proxy clones to create Synths & LPTokens", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/21", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "SynthFactory", "LPWrapper"], "target": "2021-11-vader-findings", "body": "Use proxy clones to create Synths & LPTokens"}, {"title": "Use of SafeERC20 for known tokens used extra gas unnecessarily", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged", "Vader", "USDV"], "target": "2021-11-vader-findings", "body": "Use of SafeERC20 for known tokens used extra gas unnecessarily"}, {"title": "BasePool does not account for Vader transfer fees when removing liquidity", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/4", "labels": ["bug", "0 (Non-critical)", "sponsor disputed", "Vader", "BasePool"], "target": "2021-11-vader-findings", "body": "BasePool does not account for Vader transfer fees when removing liquidity"}, {"title": "Redemption value of synths can be manipulated to drain `VaderPool` of all native assets", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/3", "labels": ["bug", "question", "3 (High Risk)", "VaderPoolV2"], "target": "2021-11-vader-findings", "body": "Redemption value of synths can be manipulated to drain `VaderPool` of all native assets"}, {"title": "Minting and burning synths exposes users to unlimited slippage", "html_url": "https://github.com/code-423n4/2021-11-vader-findings/issues/2", "labels": ["bug", "3 (High Risk)", "disagree with severity", "sponsor acknowledged", "VaderPoolV2"], "target": "2021-11-vader-findings", "body": "Minting and burning synths exposes users to unlimited slippage"}, {"title": "Passing multiple ETH deposits in orders array will use the same msg.value many times", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/226", "labels": ["bug", "2 (Med Risk)", "disagree with severity"], "target": "2021-11-nested-findings", "body": "Passing multiple ETH deposits in orders array will use the same msg.value many times"}, {"title": "NestedFactory._decreaseHoldingAmount needs explicit amount control for spending reserve", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/223", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "NestedFactory._decreaseHoldingAmount needs explicit amount control for spending reserve"}, {"title": "NestedFactory.removeOperator code doesn't correspond to it's logic", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/220", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-nested-findings", "body": "NestedFactory.removeOperator code doesn't correspond to it's logic"}, {"title": "Ensure on-chain that cache is synced", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/217", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-nested-findings", "body": "Ensure on-chain that cache is synced"}, {"title": "mintWithMetadata onlyFactory ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/213", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "mintWithMetadata onlyFactory "}, {"title": "OperatorResolver.areAddressesImported doesn't check lengths of argument arrays", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/210", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "OperatorResolver.areAddressesImported doesn't check lengths of argument arrays"}, {"title": "_burnNST", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/208", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "_burnNST"}, {"title": "index + 1 can be simplified", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/207", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "index + 1 can be simplified"}, {"title": "INestedToken interface", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/206", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "INestedToken interface"}, {"title": "NestedAsset.setFactory should be named addFactory", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/204", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedAsset.setFactory should be named addFactory"}, {"title": "Can't revoke factory in NestedRecrods", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/203", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Can't revoke factory in NestedRecrods"}, {"title": "NestedFactory.addTokens and withdraw functions require NFT reserve check", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/199", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedFactory.addTokens and withdraw functions require NFT reserve check"}, {"title": "Check condition before calling NestedFactory._handleUnderSpending", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/198", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Check condition before calling NestedFactory._handleUnderSpending"}, {"title": "Unused local variables ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/195", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-nested-findings", "body": "Unused local variables "}, {"title": "Small refactor for functions to save some gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/193", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Small refactor for functions to save some gas"}, {"title": "Unnecessary Use of _msgSender()", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/185", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Unnecessary Use of _msgSender()"}, {"title": "`_handleUnderSpending` reverts if condition is false", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/183", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "`_handleUnderSpending` reverts if condition is false"}, {"title": "Function using `msg.value` called in loop", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/182", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Function using `msg.value` called in loop"}, {"title": "Can add duplicate operators", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/180", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Can add duplicate operators"}, {"title": "Cannot change `tokenUri`", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/179", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Cannot change `tokenUri`"}, {"title": "Missing parameter validation", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/178", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Missing parameter validation"}, {"title": "Cache and read storage variables from the stack can save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/175", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Cache and read storage variables from the stack can save gas"}, {"title": "Adding unchecked directive can save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/173", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Adding unchecked directive can save gas"}, {"title": "`NestedFactory#removeOperator()` Avoid empty items can save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-nested-findings", "body": "`NestedFactory#removeOperator()` Avoid empty items can save gas"}, {"title": "Inconsistent use of `_msgSender()`", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/169", "labels": ["bug", "invalid", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Inconsistent use of `_msgSender()`"}, {"title": "Consider making `_calculateFees` inline to save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/167", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Consider making `_calculateFees` inline to save gas"}, {"title": "Use of assert() instead of require()", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/166", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-nested-findings", "body": "Use of assert() instead of require()"}, {"title": "Avoid unnecessary storage writes can save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/162", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Avoid unnecessary storage writes can save gas"}, {"title": "Misleading error message", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/161", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Misleading error message"}, {"title": "`NestedFactory.sol#_submitInOrders()` Wrong implementation cause users to be overcharged", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/160", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "`NestedFactory.sol#_submitInOrders()` Wrong implementation cause users to be overcharged"}, {"title": "Gas Optimization: Set allowance only when needed", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/151", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Gas Optimization: Set allowance only when needed"}, {"title": "Gas Optimization: Pack struct in FeeSplitter.sol", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/146", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Gas Optimization: Pack struct in FeeSplitter.sol"}, {"title": "isResolverCached() will always return false after removing operator", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/139", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-nested-findings", "body": "isResolverCached() will always return false after removing operator"}, {"title": "FeeSplitter: Unbounded number of shareholders can cause DOS", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/137", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "FeeSplitter: Unbounded number of shareholders can cause DOS"}, {"title": "NestedFactory: Ensure zero msg.value if transferring from user and inputToken is not ETH ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/136", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedFactory: Ensure zero msg.value if transferring from user and inputToken is not ETH "}, {"title": "FeeSplitter: No sanity check to prevent shareholder from being added twice.", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/135", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-nested-findings", "body": "FeeSplitter: No sanity check to prevent shareholder from being added twice."}, {"title": "FeeSplitter: ETH_ADDR isn't supported", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/134", "labels": ["bug", "1 (Low Risk)", "disagree with severity"], "target": "2021-11-nested-findings", "body": "FeeSplitter: ETH_ADDR isn't supported"}, {"title": "NestedFactory: _fromReserve param in _submitOutOrders() is redundant", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/128", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedFactory: _fromReserve param in _submitOutOrders() is redundant"}, {"title": "NestedRecords: createRecord() can have modifier check removed", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/126", "labels": ["bug", "duplicate", "G (Gas Optimization)"], "target": "2021-11-nested-findings", "body": "NestedRecords: createRecord() can have modifier check removed"}, {"title": "NestedRecords: createRecord()'s isActive check is redundant", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/125", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-nested-findings", "body": "NestedRecords: createRecord()'s isActive check is redundant"}, {"title": "NestedRecords: createRecord() can be made internal", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/124", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedRecords: createRecord() can be made internal"}, {"title": "NestedReserve: Redundant valid token address checks", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedReserve: Redundant valid token address checks"}, {"title": "MixinOperatorResolver: variables are declared multiple times in rebuildCache()", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "MixinOperatorResolver: variables are declared multiple times in rebuildCache()"}, {"title": "NestedRecords: Unnecessary variable in the Holding struct", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/121", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedRecords: Unnecessary variable in the Holding struct"}, {"title": "OperatorResolver: importOperators() function redeclares local variable multiple times", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/119", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "OperatorResolver: importOperators() function redeclares local variable multiple times"}, {"title": "Add index param to remove in function argument to reduce gas.", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/115", "labels": ["bug", "duplicate", "G (Gas Optimization)"], "target": "2021-11-nested-findings", "body": "Add index param to remove in function argument to reduce gas."}, {"title": "No used library added", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/114", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "No used library added"}, {"title": "Add zero-address checkers", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/108", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-nested-findings", "body": "Add zero-address checkers"}, {"title": "Use `calldata` keyword instead of `memory` keyword in function arguments", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/107", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Use `calldata` keyword instead of `memory` keyword in function arguments"}, {"title": "Unused Named Return", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/105", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Unused Named Return"}, {"title": "Missing input validation on array lengths ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/103", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Missing input validation on array lengths "}, {"title": "Use existing memory version of state variables", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/102", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Use existing memory version of state variables"}, {"title": "transferOwnership should be two step process", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/101", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "transferOwnership should be two step process"}, {"title": "double reading of state variable inside a loop", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/98", "labels": ["bug", "question", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "double reading of state variable inside a loop"}, {"title": "reordering struct fields", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/96", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "reordering struct fields"}, {"title": "DummyRouter.sol .transfer isn't safe", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/92", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "DummyRouter.sol .transfer isn't safe"}, {"title": "WETHMock withdraw function unnecessary safe math", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/90", "labels": ["bug", "G (Gas Optimization)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "WETHMock withdraw function unnecessary safe math"}, {"title": "Missing events on changes", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/84", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Missing events on changes"}, {"title": "setReserve() can be front-run", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/82", "labels": ["bug", "duplicate", "2 (Med Risk)"], "target": "2021-11-nested-findings", "body": "setReserve() can be front-run"}, {"title": "Gas-consuming way to add shareholders", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/81", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Gas-consuming way to add shareholders"}, {"title": "`NestedFactory.unlockTokens` fails to use safe transfer", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/78", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "`NestedFactory.unlockTokens` fails to use safe transfer"}, {"title": "Unchecked return value in triggerForToken()", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/76", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Unchecked return value in triggerForToken()"}, {"title": "Public functions can be declared external", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/72", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Public functions can be declared external"}, {"title": "Refactor `FeeSplitter::getAmountDue` to save one variable slot", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/68", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Refactor `FeeSplitter::getAmountDue` to save one variable slot"}, {"title": "Remove unnecessary `balanceOf` call in `NestedBuybacker::triggerForToken`", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/65", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Remove unnecessary `balanceOf` call in `NestedBuybacker::triggerForToken`"}, {"title": "`removeFactory` has `==true` comparison in require statement", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/63", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "`removeFactory` has `==true` comparison in require statement"}, {"title": "_sendFees() Repeat SLOAD shareholders In Loop", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/57", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "_sendFees() Repeat SLOAD shareholders In Loop"}, {"title": "function mintWithMetadata() Unused", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/55", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "function mintWithMetadata() Unused"}, {"title": "Wrong Error Message in _transferInputTokens()", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/53", "labels": ["bug", "0 (Non-critical)"], "target": "2021-11-nested-findings", "body": "Wrong Error Message in _transferInputTokens()"}, {"title": "ExchangeHelpers: in setMaxAllowance, safeApprove shouldn't be used", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/50", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "ExchangeHelpers: in setMaxAllowance, safeApprove shouldn't be used"}, {"title": "NestedFactory: in deleteAsset and freeToken, tokens should only be declared once ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/49", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedFactory: in deleteAsset and freeToken, tokens should only be declared once "}, {"title": "OperatorHelpers.sol: function decodeDataAndRequire state mutability can be restricted to pure", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/48", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "OperatorHelpers.sol: function decodeDataAndRequire state mutability can be restricted to pure"}, {"title": "Remove empty file OwnableOperator.so", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/47", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Remove empty file OwnableOperator.so"}, {"title": "Subtraction from totalWeights can be done unchecked to save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/46", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Subtraction from totalWeights can be done unchecked to save gas"}, {"title": "Different coding style for same pattern: x += y and sometimes x = x + y", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/45", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Different coding style for same pattern: x += y and sometimes x = x + y"}, {"title": "Comment for PaymentReceived event should state \"received\" instead of \"released\"", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/44", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Comment for PaymentReceived event should state \"received\" instead of \"released\""}, {"title": "FeeSplitter: totalWeights can be set to 0 by onlyOwner", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/43", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "FeeSplitter: totalWeights can be set to 0 by onlyOwner"}, {"title": "Missing events for critical privileged functions", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/42", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Missing events for critical privileged functions"}, {"title": "Use SafeERC20 instead of IERC20 in contracts/mocks/DummyRouter.sol ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/41", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Use SafeERC20 instead of IERC20 in contracts/mocks/DummyRouter.sol "}, {"title": "Indexing parameters of your events", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/40", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Indexing parameters of your events"}, {"title": "claimFees may end up locking user funds", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/39", "labels": ["bug", "1 (Low Risk)", "disagree with severity"], "target": "2021-11-nested-findings", "body": "claimFees may end up locking user funds"}, {"title": "Adding an if check to avoid unnecessary call", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/38", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Adding an if check to avoid unnecessary call"}, {"title": "Typo", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/37", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Typo"}, {"title": "Store hash of `type(ZeroExStorage).creationCode` rather than recalculating it on each call", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/35", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Store hash of `type(ZeroExStorage).creationCode` rather than recalculating it on each call"}, {"title": "Move from a pull to a push pattern for sending fees to the FeeSplitter", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/34", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "Move from a pull to a push pattern for sending fees to the FeeSplitter"}, {"title": "NestedBuybacker sends NST to NestedReserve with no proper way to retrieve it.", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/33", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "NestedBuybacker sends NST to NestedReserve with no proper way to retrieve it."}, {"title": "1:1 linkage between factory and reserve prevents desired upgradability path.", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/32", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "1:1 linkage between factory and reserve prevents desired upgradability path."}, {"title": "Copy your own portfolio to keep earning royalties ", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/30", "labels": ["bug", "3 (High Risk)", "disagree with severity"], "target": "2021-11-nested-findings", "body": "Copy your own portfolio to keep earning royalties "}, {"title": "Mix of external and public function visibility with the same access modifier", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Mix of external and public function visibility with the same access modifier"}, {"title": "More gas efficient calculation of weights", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/28", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "More gas efficient calculation of weights"}, {"title": "`NestedReserve.transferFromFactory` function increases deployment gas costs unnecessarily", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/27", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "`NestedReserve.transferFromFactory` function increases deployment gas costs unnecessarily"}, {"title": "FlatOperator can be inlined into NestedFactory to save gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/26", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "FlatOperator can be inlined into NestedFactory to save gas"}, {"title": "unchecked { ++i }  is more gas efficient than i++ for loops", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/25", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-11-nested-findings", "body": "unchecked { ++i }  is more gas efficient than i++ for loops"}, {"title": "Multiple Solidity pragma", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/22", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-nested-findings", "body": "Multiple Solidity pragma"}, {"title": "Reduce require messages length to save contract size", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Reduce require messages length to save contract size"}, {"title": "`updateShareholder` in `FeeSplitter.sol` can be implemented more efficiently", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/11", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "`updateShareholder` in `FeeSplitter.sol` can be implemented more efficiently"}, {"title": "For `uint` replace `> 0` with `!= 0`", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/8", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "For `uint` replace `> 0` with `!= 0`"}, {"title": "Save gas by caching array length used in for loops", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Save gas by caching array length used in for loops"}, {"title": "NestedFactory: _transferToReserveAndStore can be simplified to save on gas", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "NestedFactory: _transferToReserveAndStore can be simplified to save on gas"}, {"title": "Weak guarantees on ZeroExOperator using correct create2 salt to recompute storage address", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/4", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "Weak guarantees on ZeroExOperator using correct create2 salt to recompute storage address"}, {"title": "ZeroExOperator", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/3", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "ZeroExOperator"}, {"title": "use msg.sender rather than _msgSender() in FeeSplitter.receive", "html_url": "https://github.com/code-423n4/2021-11-nested-findings/issues/1", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-nested-findings", "body": "use msg.sender rather than _msgSender() in FeeSplitter.receive"}, {"title": "MixinPurchase:shareKey allows to generate keys without purchasing", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/242", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "MixinPurchase:shareKey allows to generate keys without purchasing"}, {"title": "address(this).address2Str()", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/241", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "address(this).address2Str()"}, {"title": "++/-- are cheapest", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/240", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "++/-- are cheapest"}, {"title": "0 valueInETH", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/239", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "0 valueInETH"}, {"title": "assigned operations to constant variables", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/238", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "assigned operations to constant variables"}, {"title": "timePlusFee = timeRemaining", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/237", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "timePlusFee = timeRemaining"}, {"title": "Refund amount and penalty calculation", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/236", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Refund amount and penalty calculation"}, {"title": "Unnecessary checks", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/234", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unnecessary checks"}, {"title": "Precalculate expressions", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/233", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Precalculate expressions"}, {"title": "Unlock:_deployProxyAdmin return value is not used", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/232", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unlock:_deployProxyAdmin return value is not used"}, {"title": "Store owners in EnumerableSet", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/231", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Store owners in EnumerableSet"}, {"title": "Distribution of tokens in recordKeyPurchase", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/230", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Distribution of tokens in recordKeyPurchase"}, {"title": "Validations", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/228", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Validations"}, {"title": "Unlock:createLock no need to define the newLock as payable", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/226", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unlock:createLock no need to define the newLock as payable"}, {"title": "onKeyPurchase hook expects amount + discount", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/225", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "onKeyPurchase hook expects amount + discount"}, {"title": "Interface and implementation differ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/224", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Interface and implementation differ"}, {"title": "_cancelAndRefund is not protected from re-entrancy", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/223", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "_cancelAndRefund is not protected from re-entrancy"}, {"title": "tokenByIndex returns wrong token id", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/222", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "tokenByIndex returns wrong token id"}, {"title": "Support of different ERC20 tokens", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/221", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Support of different ERC20 tokens"}, {"title": "msg.value should be 0 when token is not native", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/220", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "msg.value should be 0 when token is not native"}, {"title": "Unable to change token approval when tokenAddress changed", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/215", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Unable to change token approval when tokenAddress changed"}, {"title": "Gas optimization: Unused variable `yieldedDiscountTokens`", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/213", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas optimization: Unused variable `yieldedDiscountTokens`"}, {"title": "Inconsistent code and comment", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/212", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Inconsistent code and comment"}, {"title": "Gas improvement on the nonce increment", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/210", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas improvement on the nonce increment"}, {"title": "Inconsistent use of _msgSender()", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/209", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Inconsistent use of _msgSender()"}, {"title": "Incorrect or confusing comments or missing code in tokenOfOwnerByIndex", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/208", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Incorrect or confusing comments or missing code in tokenOfOwnerByIndex"}, {"title": "Critical changes should use two-step procedure", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/207", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Critical changes should use two-step procedure"}, {"title": "`MixinRefunds.sol#_getCancelAndRefundValue` Cache and read storage variables from the stack can save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/206", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`MixinRefunds.sol#_getCancelAndRefundValue` Cache and read storage variables from the stack can save gas"}, {"title": "Typos", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/205", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Typos"}, {"title": "Missing events for critical operations", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/204", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Missing events for critical operations"}, {"title": "Adding unchecked directive can save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/203", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Adding unchecked directive can save gas"}, {"title": "Race condition on ERC20 approval", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/202", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Race condition on ERC20 approval"}, {"title": "Remove unnecessary function can make the code simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/200", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Remove unnecessary function can make the code simpler and save some gas"}, {"title": "Avoid unnecessary storage reads can save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/199", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Avoid unnecessary storage reads can save gas"}, {"title": "`MixinPurchase#purchase()` Consider checking if _referrer equals _recipient", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/198", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "`MixinPurchase#purchase()` Consider checking if _referrer equals _recipient"}, {"title": "Incomplete implementation", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/197", "labels": ["bug", "duplicate", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Incomplete implementation"}, {"title": "Changing function visibility from public to external can save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/196", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Changing function visibility from public to external can save gas"}, {"title": "Redundant check of `owner() != address(0)`", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/194", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Redundant check of `owner() != address(0)`"}, {"title": "Consider adding `initializer` modifier to _initialize** functions", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/193", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Consider adding `initializer` modifier to _initialize** functions"}, {"title": "Malicious user can get infinite free trial by repeatedly refund and repurchase right before the freeTrial ends", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/189", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Malicious user can get infinite free trial by repeatedly refund and repurchase right before the freeTrial ends"}, {"title": "Wrong design/implementation of freeTrial allows attacker to steal funds from the protocol", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/188", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Wrong design/implementation of freeTrial allows attacker to steal funds from the protocol"}, {"title": "`MixinRefunds.sol#cancelAndRefund()` Potential fund loss on `cancelAndRefund()` for users who purchased multiple times", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/187", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "`MixinRefunds.sol#cancelAndRefund()` Potential fund loss on `cancelAndRefund()` for users who purchased multiple times"}, {"title": "Potential economic attack on UDT grants to the referrer", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/186", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Potential economic attack on UDT grants to the referrer"}, {"title": "Remove unnecessary variables can make the code simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/185", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Remove unnecessary variables can make the code simpler and save some gas"}, {"title": "Code Style: Unnecessary public function visibility", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/184", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Code Style: Unnecessary public function visibility"}, {"title": "`MixinTransfer.sol#transferFrom` Wrong implementation can potentially allows attackers to reverse transfer and cause fund loss to the users", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/182", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "`MixinTransfer.sol#transferFrom` Wrong implementation can potentially allows attackers to reverse transfer and cause fund loss to the users"}, {"title": "`MixinLockCore.sol#updateKeyPricing()` Check of `_tokenAddress` can be done earlier to save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/179", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`MixinLockCore.sol#updateKeyPricing()` Check of `_tokenAddress` can be done earlier to save gas"}, {"title": "`UnlockUtils.sol#uint2Str()` Implementation can be simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/178", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`UnlockUtils.sol#uint2Str()` Implementation can be simpler and save some gas"}, {"title": "Unused named returns", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/177", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unused named returns"}, {"title": "Consider adding storage gaps to `Mixin***` contracts", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/174", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Consider adding storage gaps to `Mixin***` contracts"}, {"title": "Constants are not explicitly declared", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/173", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Constants are not explicitly declared"}, {"title": "Insufficient input validation", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/171", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Insufficient input validation"}, {"title": " PREVENT DIV BY 0", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/170", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": " PREVENT DIV BY 0"}, {"title": "transferOwnership should be two step process", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/169", "labels": ["bug", "0 (Non-critical)", "disagree with severity"], "target": "2021-11-unlock-findings", "body": "transferOwnership should be two step process"}, {"title": "Gas: `_recordOwner` pushes duplicates", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/167", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas: `_recordOwner` pushes duplicates"}, {"title": "Inaccurate fees computation", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/165", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Inaccurate fees computation"}, {"title": "DoS when `onKeyPurchaseHook` reverts", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/163", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "DoS when `onKeyPurchaseHook` reverts"}, {"title": "No ERC20 safeApprove called & not success check", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/161", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "No ERC20 safeApprove called & not success check"}, {"title": "Approvals not cleared after key transfer", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/160", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Approvals not cleared after key transfer"}, {"title": "Can set arbitrary lock templates", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/158", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Can set arbitrary lock templates"}, {"title": "ERC20 return values not checked", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/157", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "ERC20 return values not checked"}, {"title": "Missing scaling factor in `recordKeyPurchase`?", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/156", "labels": ["bug", "help wanted", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Missing scaling factor in `recordKeyPurchase`?"}, {"title": "Referrer discount token amount can be manipulated", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/155", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Referrer discount token amount can be manipulated"}, {"title": "Lock template versions can be overwritten", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/154", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Lock template versions can be overwritten"}, {"title": "`initialize` functions can be frontrun", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/153", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "`initialize` functions can be frontrun"}, {"title": "MixinLockCore: use safeApprove from SafeERC20, and do approve(0) before approve(amount)", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/151", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "MixinLockCore: use safeApprove from SafeERC20, and do approve(0) before approve(amount)"}, {"title": "MixinGrantKeys:grantKeys gas optimizations", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/149", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "MixinGrantKeys:grantKeys gas optimizations"}, {"title": "Function grantKeys() - Bulk Send Free Keys Are Not Practical & Gas May Over Block Size Limit", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/147", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Function grantKeys() - Bulk Send Free Keys Are Not Practical & Gas May Over Block Size Limit"}, {"title": "Avoiding Initialization of Loop Index If It Is 0", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/146", "labels": ["bug", "0 (Non-critical)"], "target": "2021-11-unlock-findings", "body": "Avoiding Initialization of Loop Index If It Is 0"}, {"title": "Avoid On Chain Computation That Have Known Answer to Save Gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Avoid On Chain Computation That Have Known Answer to Save Gas"}, {"title": "getTransferFee() Fee Could Be 0", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/140", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "getTransferFee() Fee Could Be 0"}, {"title": "Initialization parameters of new lock template are hardcoded", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/137", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Initialization parameters of new lock template are hardcoded"}, {"title": "Unlock has incomplete fallback function which may cause loss of funds", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/136", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Unlock has incomplete fallback function which may cause loss of funds"}, {"title": "MEV miner can mint larger than expected UDT total supply", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/135", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "MEV miner can mint larger than expected UDT total supply"}, {"title": "Insufficient version validation causes denial of service for `PublicLock` during lock upgrades", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/134", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Insufficient version validation causes denial of service for `PublicLock` during lock upgrades"}, {"title": "`Unlock.addLockTemplate` does not adequately increment version, leading to gaps in version", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/133", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "`Unlock.addLockTemplate` does not adequately increment version, leading to gaps in version"}, {"title": "Frontrunning `PublicLock.initialize()` can prevent upgrades due to insufficient access control", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/132", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Frontrunning `PublicLock.initialize()` can prevent upgrades due to insufficient access control"}, {"title": "Reduce rounding error when minting UDT in Unlock", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/131", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Reduce rounding error when minting UDT in Unlock"}, {"title": "Gas: remove owners array", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/130", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas: remove owners array"}, {"title": "Gas: Cast instead of creating new variables", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/129", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas: Cast instead of creating new variables"}, {"title": "Fix event params for `KeyManagerChanged`", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/128", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Fix event params for `KeyManagerChanged`"}, {"title": "Gas: Assume 0 when creating struct", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/127", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas: Assume 0 when creating struct"}, {"title": "Gas: Merge callbacks to Unlock on purchase", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Gas: Merge callbacks to Unlock on purchase"}, {"title": "MixinTransfer:getTransferFee gas optimization with unchecked", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/123", "labels": ["G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "MixinTransfer:getTransferFee gas optimization with unchecked"}, {"title": "MixinLockCore.sol has wrong comments", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/122", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "MixinLockCore.sol has wrong comments"}, {"title": "Use existing memory version of state variables", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Use existing memory version of state variables"}, {"title": "a single user can become owner of multiple token ids", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/120", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "a single user can become owner of multiple token ids"}, {"title": "Setting the admin in initialize initializeProxyAdmin can be frontrun by an attacker", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/117", "labels": ["bug", "1 (Low Risk)"], "target": "2021-11-unlock-findings", "body": "Setting the admin in initialize initializeProxyAdmin can be frontrun by an attacker"}, {"title": "4 variables are cached and used only once at `Unlock.sol#upgradeLock`", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/116", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "4 variables are cached and used only once at `Unlock.sol#upgradeLock`"}, {"title": "`== true` doesn't bring anything", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/115", "labels": ["bug", "0 (Non-critical)"], "target": "2021-11-unlock-findings", "body": "`== true` doesn't bring anything"}, {"title": "`Unlock.sol#RecordKeyPurchases` can be implemented cheaper", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/114", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`Unlock.sol#RecordKeyPurchases` can be implemented cheaper"}, {"title": "Use unchecked operation to save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/111", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Use unchecked operation to save gas"}, {"title": "`MixinGrantKeys.sol` apply requiere statements earlier", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/110", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`MixinGrantKeys.sol` apply requiere statements earlier"}, {"title": "Use safeTransfer consistently instead of transfer", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/109", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Use safeTransfer consistently instead of transfer"}, {"title": "Missing input validation on array lengths (MixinGrantKeys.sol)", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/105", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Missing input validation on array lengths (MixinGrantKeys.sol)"}, {"title": "Cache length at for loop to save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Cache length at for loop to save gas"}, {"title": "Setters of `UnlockProtocolGovernor.sol` can be implemented more efficiently", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/101", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Setters of `UnlockProtocolGovernor.sol` can be implemented more efficiently"}, {"title": "`UnlockUtils.sol#address2Str` can be implemented much cheaper", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/98", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "`UnlockUtils.sol#address2Str` can be implemented much cheaper"}, {"title": "`freeTrialLength` is used as full refund period", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/96", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "`freeTrialLength` is used as full refund period"}, {"title": "Remove fallback function", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/94", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Remove fallback function"}, {"title": "shareKey onERC721Received tokenId", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/91", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "shareKey onERC721Received tokenId"}, {"title": "Unconventional log emittance confuses Etherscan", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/90", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Unconventional log emittance confuses Etherscan"}, {"title": "Less than 256 uints are not gas efficient", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/89", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Less than 256 uints are not gas efficient"}, {"title": "Key transfer will destroy key if from==to", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/87", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Key transfer will destroy key if from==to"}, {"title": "Input validation of Zero address on function initialize()", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/86", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor disputed"], "target": "2021-11-unlock-findings", "body": "Input validation of Zero address on function initialize()"}, {"title": "Confliction on double `initialize` functions front-run `minter` ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/85", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Confliction on double `initialize` functions front-run `minter` "}, {"title": "Wrong event parameter emitted at _setKeyManagerOf", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/84", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Wrong event parameter emitted at _setKeyManagerOf"}, {"title": "Input validation of Zero address on addLockTemplate", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/83", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Input validation of Zero address on addLockTemplate"}, {"title": "Wrong comment in recordKeyPurchase", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/82", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Wrong comment in recordKeyPurchase"}, {"title": "Input validation Zero address", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/81", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Input validation Zero address"}, {"title": "Missing `_beforeTokenTransfer` Token Transfer Handle", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/78", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Missing `_beforeTokenTransfer` Token Transfer Handle"}, {"title": "input validation", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/77", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "input validation"}, {"title": "Function type from public to external tokenByIndex()", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/76", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Function type from public to external tokenByIndex()"}, {"title": "Missing event for critical updateBeneficiary function", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/75", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Missing event for critical updateBeneficiary function"}, {"title": "Unimplemented function computeAvailableDiscountFor ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/74", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Unimplemented function computeAvailableDiscountFor "}, {"title": "MixinRefunds: frontrun updateKeyPricing() for free profit", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/72", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "MixinRefunds: frontrun updateKeyPricing() for free profit"}, {"title": "Unlock: free UDT arbitrage opportunity", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/70", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Unlock: free UDT arbitrage opportunity"}, {"title": "MixinPurchase: gas optimisation by relying on 0.8.0 auto revert on underflow.", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/69", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "MixinPurchase: gas optimisation by relying on 0.8.0 auto revert on underflow."}, {"title": "MixinRefunds: use variable to save gas", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/68", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "MixinRefunds: use variable to save gas"}, {"title": "Unused Named Returns", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/66", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unused Named Returns"}, {"title": "MixinGrantKeys:grantKeys possible DoS with (Unexpected) revert", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/62", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "MixinGrantKeys:grantKeys possible DoS with (Unexpected) revert"}, {"title": "MixinFunds:_initializeMixinFunds move the require statement to the beginning of the function so save gas in the case of a revert", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/60", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "MixinFunds:_initializeMixinFunds move the require statement to the beginning of the function so save gas in the case of a revert"}, {"title": "grantKeys no check on parameter array lengths and values", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/56", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "grantKeys no check on parameter array lengths and values"}, {"title": "Missing maxNumberOfKeys checks in shareKey and grantKey", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/55", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-unlock-findings", "body": "Missing maxNumberOfKeys checks in shareKey and grantKey"}, {"title": "Redundant check of freeTrialLength == 0", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/54", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Redundant check of freeTrialLength == 0"}, {"title": "Refund mechanism doesn't take into account that key price can change", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/53", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Refund mechanism doesn't take into account that key price can change"}, {"title": "setKeyManagerOf has no address-0 check", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/52", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "setKeyManagerOf has no address-0 check"}, {"title": "Key buyers will not be able to get refund if lock manager withdraws profits", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/50", "labels": ["bug", "2 (Med Risk)"], "target": "2021-11-unlock-findings", "body": "Key buyers will not be able to get refund if lock manager withdraws profits"}, {"title": "Use of access control require statement when modifier exists", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/48", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Use of access control require statement when modifier exists"}, {"title": "Commented lines of code", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/46", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Commented lines of code"}, {"title": "Function spec and implementation difference / strict comparison", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/45", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Function spec and implementation difference / strict comparison"}, {"title": "Potential division by 0 in `recordKeyPurchase`", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/43", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Potential division by 0 in `recordKeyPurchase`"}, {"title": "Use explicit variables type", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/37", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Use explicit variables type"}, {"title": "Long Revert Strings", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/36", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Long Revert Strings"}, {"title": "MixinERC721Enumerable.tokenOfOwnerByIndex - parameter _index can be removed", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/32", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "MixinERC721Enumerable.tokenOfOwnerByIndex - parameter _index can be removed"}, {"title": "The function MixinLockCore.approveBeneficiary is susceptible to a race condition", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/29", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "The function MixinLockCore.approveBeneficiary is susceptible to a race condition"}, {"title": "Changes that affect access control should be accompanied by an event", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/28", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Changes that affect access control should be accompanied by an event"}, {"title": "Scenario where variable in Unlock.recordKeyPurchase() is not initialized", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/27", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Scenario where variable in Unlock.recordKeyPurchase() is not initialized"}, {"title": "Unnecessary function parameter in Unlock.upgradeLock() function", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/25", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Unnecessary function parameter in Unlock.upgradeLock() function"}, {"title": "Using uint16 for lock versions increases gas costs for no reason.", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/24", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Using uint16 for lock versions increases gas costs for no reason."}, {"title": "Open TODOs", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/22", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Open TODOs"}, {"title": "safeApprove is deprecated. ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/21", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "safeApprove is deprecated. "}, {"title": "named return issue", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/20", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "named return issue"}, {"title": "USE OF FLOATING PRAGMA", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/15", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "USE OF FLOATING PRAGMA"}, {"title": "USE OF DEPRECATED _SETUPROLE FUNCTION", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/14", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "USE OF DEPRECATED _SETUPROLE FUNCTION"}, {"title": "Upgrade pragma to at least 0.8.4", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/12", "labels": ["bug", "0 (Non-critical)"], "target": "2021-11-unlock-findings", "body": "Upgrade pragma to at least 0.8.4"}, {"title": "Order of layout is wrong in ERC20Patched.sol", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/11", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Order of layout is wrong in ERC20Patched.sol"}, {"title": "Order of function is wrong in contracts ERC20PermitUpgradeable, ERC20VotesCompUpgradeable, EIP712Upgradeable", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/9", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Order of function is wrong in contracts ERC20PermitUpgradeable, ERC20VotesCompUpgradeable, EIP712Upgradeable"}, {"title": "Function type from public to external", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/5", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Function type from public to external"}, {"title": "Unnecessary fallback function", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/4", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-unlock-findings", "body": "Unnecessary fallback function"}, {"title": "Unused function parameters ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/3", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Unused function parameters "}, {"title": "Initializer modifiers should be called in the same way everywhere ", "html_url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/1", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-11-unlock-findings", "body": "Initializer modifiers should be called in the same way everywhere "}, {"title": "IsContract Function Usage", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/72", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-12-maple-findings", "body": "IsContract Function Usage"}, {"title": "Fund stuck in `Liquidator` if `stopLiquidation` is called ", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/67", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Fund stuck in `Liquidator` if `stopLiquidation` is called "}, {"title": "Reuse arithmetic results can save gas ", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/66", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Reuse arithmetic results can save gas "}, {"title": "Avoid unnecessary arithmetic operations can save gas", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/65", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Avoid unnecessary arithmetic operations can save gas"}, {"title": "`Liquidator.sol#_locked` Switching between 1, 2 instead of true, false is more gas efficient", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/64", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "`Liquidator.sol#_locked` Switching between 1, 2 instead of true, false is more gas efficient"}, {"title": "Cache external call result in the stack can save gas", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/62", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Cache external call result in the stack can save gas"}, {"title": "Consider adding storage gaps to proxied contracts", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/57", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor acknowledged"], "target": "2021-12-maple-findings", "body": "Consider adding storage gaps to proxied contracts"}, {"title": "`makePayment()` Lack of access control allows malicious `lender` to retrieve a large portion of the funds earlier, making the borrower suffer fund loss", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/56", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "`makePayment()` Lack of access control allows malicious `lender` to retrieve a large portion of the funds earlier, making the borrower suffer fund loss"}, {"title": "Gas Optimization: Use constant instead of block.timestamp", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/55", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Gas Optimization: Use constant instead of block.timestamp"}, {"title": "Unchecked return value for `ERC20.approve` call", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/52", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Unchecked return value for `ERC20.approve` call"}, {"title": "Adding unchecked directive can save gas", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/50", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-maple-findings", "body": "Adding unchecked directive can save gas"}, {"title": "Unsafe implementation of `fundLoan()` allows attacker to steal collateral from an unfunded loan", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/47", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Unsafe implementation of `fundLoan()` allows attacker to steal collateral from an unfunded loan"}, {"title": "Anyone can call `closeLoan()` to close the loan", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/46", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Anyone can call `closeLoan()` to close the loan"}, {"title": "Insufficient input validation", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/45", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Insufficient input validation"}, {"title": "Functionality of liquidation strategies can be broken", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/35", "labels": ["bug", "1 (Low Risk)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Functionality of liquidation strategies can be broken"}, {"title": "Same implementation can be registerd for several versions", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/33", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Same implementation can be registerd for several versions"}, {"title": "Function poolDelegate does not have a named return (DebtLocker.sol)", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/25", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Function poolDelegate does not have a named return (DebtLocker.sol)"}, {"title": "\"> 0\" is less efficient than \"!= 0\" for unsigned integers", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/24", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "\"> 0\" is less efficient than \"!= 0\" for unsigned integers"}, {"title": "Floating pragma", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/23", "labels": ["bug", "0 (Non-critical)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Floating pragma"}, {"title": "Typos", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/22", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Typos"}, {"title": "Must approve 0 first", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/11", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Must approve 0 first"}, {"title": "Open TODOs", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/10", "labels": ["bug", "question", "0 (Non-critical)", "disagree with severity", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Open TODOs"}, {"title": "State variables that could be set immutable", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "State variables that could be set immutable"}, {"title": "Storage double reading. Could save SLOAD", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/4", "labels": ["bug", "duplicate", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Storage double reading. Could save SLOAD"}, {"title": "Short the following require messages", "html_url": "https://github.com/code-423n4/2021-12-maple-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-12-maple-findings", "body": "Short the following require messages"}, {"title": "`Timelock` Struct Packing in `Vesting.sol`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/307", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`Timelock` Struct Packing in `Vesting.sol`"}, {"title": "Incorrect `require` Statement in `Vesting.claim()`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/306", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Incorrect `require` Statement in `Vesting.claim()`"}, {"title": "Validations", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/301", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Validations"}, {"title": "_recordBurn _payer", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/300", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "_recordBurn _payer"}, {"title": "Useless nonReentrant", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/293", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Useless nonReentrant"}, {"title": "Optimize structs", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/290", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Optimize structs"}, {"title": "Itteration over all the timelocks when revoking the user", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/285", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Itteration over all the timelocks when revoking the user"}, {"title": "function claim optimizations", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/283", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "function claim optimizations"}, {"title": "modifyInvestor does not need to check if _investor is not empty", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/281", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "modifyInvestor does not need to check if _investor is not empty"}, {"title": "Usage of assert", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/279", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Usage of assert"}, {"title": "NFT flashloans can bypass sale constraints", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/276", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "NFT flashloans can bypass sale constraints"}, {"title": "burnAddress is not actually meant to burn anything", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/275", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "burnAddress is not actually meant to burn anything"}, {"title": "_recordBurn does not handle 0 _eth appropriately", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/274", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "_recordBurn does not handle 0 _eth appropriately"}, {"title": "payable vest", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/273", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "payable vest"}, {"title": "Adding unchecked directive can save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/261", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Adding unchecked directive can save gas"}, {"title": "Packing of state variable ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/258", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Packing of state variable "}, {"title": "use of floating pragma", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/257", "labels": ["bug", "0 (Non-critical)"], "target": "2021-11-bootfinance-findings", "body": "use of floating pragma"}, {"title": "wrong operator used in checking the fees, adminfee, withdrawfee", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/254", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "wrong operator used in checking the fees, adminfee, withdrawfee"}, {"title": "`SwapUtils.sol` Wrong implementation", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/252", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`SwapUtils.sol` Wrong implementation"}, {"title": "`Vesting.sol#calcClaimableAmount()` Claimed amount should be excluded in claimable amount", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/248", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-bootfinance-findings", "body": "`Vesting.sol#calcClaimableAmount()` Claimed amount should be excluded in claimable amount"}, {"title": "Missing error messages in require statements", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/247", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Missing error messages in require statements"}, {"title": "`Vesting.sol#_claimableAmount()` Remove unnecessary storage variables can save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/246", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`Vesting.sol#_claimableAmount()` Remove unnecessary storage variables can save gas"}, {"title": "Cache external call results can save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/242", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Cache external call results can save gas"}, {"title": "Use literal `2` instead of read from storage for `pooledTokens.length` can save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/241", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Use literal `2` instead of read from storage for `pooledTokens.length` can save gas"}, {"title": "`SwapUtils.sol#getD()` Remove unnecessary variable and internal call can make the code simpler and save some gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/238", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`SwapUtils.sol#getD()` Remove unnecessary variable and internal call can make the code simpler and save some gas"}, {"title": "`SwapUtils.sol` Inconsistent parameter value of `lpTokenSupply` among `Liquidity` related events", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/237", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`SwapUtils.sol` Inconsistent parameter value of `lpTokenSupply` among `Liquidity` related events"}, {"title": "External call can be done later to save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/236", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "External call can be done later to save gas"}, {"title": "`SwapUtils.sol#getYD()` Remove redundant code can save gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/233", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`SwapUtils.sol#getYD()` Remove redundant code can save gas"}, {"title": "Typos", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/230", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Typos"}, {"title": "Code Style: consistency", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/228", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Code Style: consistency"}, {"title": "Remove unnecessary variables can save some gas", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/223", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Remove unnecessary variables can save some gas"}, {"title": "Tokens with decimals larger than 18 are not supported", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/221", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "Tokens with decimals larger than 18 are not supported"}, {"title": "Gas: Unnecessary msg.sender != 0 check", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/218", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Gas: Unnecessary msg.sender != 0 check"}, {"title": "Gas: Unnecessary length check in `Swap.constructor`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/217", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Gas: Unnecessary length check in `Swap.constructor`"}, {"title": "Swaps are not split when trade crosses target price", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/216", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Swaps are not split when trade crosses target price"}, {"title": "can withdraw shares on behalf of anyone", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/215", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "can withdraw shares on behalf of anyone"}, {"title": "`BasicSale` uses inaccurate `secondsPerDay` value", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/211", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`BasicSale` uses inaccurate `secondsPerDay` value"}, {"title": "`BasicSale` has unused ERC20 code", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/210", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`BasicSale` has unused ERC20 code"}, {"title": "# Missing parameter validation", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/209", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "# Missing parameter validation"}, {"title": "Stop ramp target price would create huge arbitrage space.", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/208", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Stop ramp target price would create huge arbitrage space."}, {"title": "SwapUtils's getD, getY, getYD functions do repetitive calculations of contant expression within the cycles", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/207", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "SwapUtils's getD, getY, getYD functions do repetitive calculations of contant expression within the cycles"}, {"title": "revoke() Does Not Check Zero Address for _addr", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/202", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "revoke() Does Not Check Zero Address for _addr"}, {"title": "addInvestor() Does Not Check Availability of investors_supply", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/201", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "addInvestor() Does Not Check Availability of investors_supply"}, {"title": "SwapUtils.calculateTokenAmount does repetitive checks of static condition", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/200", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "SwapUtils.calculateTokenAmount does repetitive checks of static condition"}, {"title": "SwapUtils's addLiquidity does multiple LP token total supply calls", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/197", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "SwapUtils's addLiquidity does multiple LP token total supply calls"}, {"title": "validate() to Verify Airdrop Address On Chain is Unnecessary", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/195", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "validate() to Verify Airdrop Address On Chain is Unnecessary"}, {"title": "claimExact() Missing Validation As In claim()", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/194", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "claimExact() Missing Validation As In claim()"}, {"title": "SwapUtils.getVirtualPrice double calling to storage reading function _xp(self)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/193", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "SwapUtils.getVirtualPrice double calling to storage reading function _xp(self)"}, {"title": "Multiple double storage reading _xp(self) function calls", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/191", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Multiple double storage reading _xp(self) function calls"}, {"title": "'From' and 'to' tokens are read from storage multiple times in SwapUtils's swap function", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/190", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "'From' and 'to' tokens are read from storage multiple times in SwapUtils's swap function"}, {"title": "Vesting.benVested storage variable can be simplified, while _claimableAmount's \"s <= benTotal[_addr]\" check is redundant and to be removed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/186", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Vesting.benVested storage variable can be simplified, while _claimableAmount's \"s <= benTotal[_addr]\" check is redundant and to be removed"}, {"title": "Get virtual price is not monotonically increasing ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/185", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Get virtual price is not monotonically increasing "}, {"title": "`customPrecisionMultipliers` would be rounded to zero and break the pool", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/183", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`customPrecisionMultipliers` would be rounded to zero and break the pool"}, {"title": "Use bytes32 instead of string when possible", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/176", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Use bytes32 instead of string when possible"}, {"title": "Use of uint8 for counter in for loop increases gas costs", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/175", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Use of uint8 for counter in for loop increases gas costs"}, {"title": "Redundant hardhat console import ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/173", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Redundant hardhat console import "}, {"title": "Use calldata instead of memory for function parameters", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/172", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Use calldata instead of memory for function parameters"}, {"title": "unnecessary variable y in getYD ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/170", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "unnecessary variable y in getYD "}, {"title": "Missing revert message", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/168", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Missing revert message"}, {"title": "Usage of deprecated safeApprove", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/166", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Usage of deprecated safeApprove"}, {"title": "Constants should be written in UPPER_CASE", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/165", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Constants should be written in UPPER_CASE"}, {"title": "Contract `Vesting` should inherit from interface `IVesting`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/164", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Contract `Vesting` should inherit from interface `IVesting`"}, {"title": "Functions should be written in mixedCase", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/163", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Functions should be written in mixedCase"}, {"title": "Events should be written in CapWords", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/162", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Events should be written in CapWords"}, {"title": "Remove unused variables", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/161", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Remove unused variables"}, {"title": "safeERC20 library imported but not used", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/154", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "safeERC20 library imported but not used"}, {"title": "Ideal balance is not calculated correctly when providing imbalanced liquidity", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/150", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Ideal balance is not calculated correctly when providing imbalanced liquidity"}, {"title": "Reentrancy", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/148", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Reentrancy"}, {"title": "block timestamp", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/147", "labels": ["bug", "0 (Non-critical)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "block timestamp"}, {"title": "Missing Zero-check", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/146", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Missing Zero-check"}, {"title": "Unchecked low-level calls", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/145", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unchecked low-level calls"}, {"title": "Can not update target price", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/143", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Can not update target price"}, {"title": "Unclear Commented Out Code", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/140", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unclear Commented Out Code"}, {"title": "Rearrange state variables", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/138", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Rearrange state variables"}, {"title": "Require statement missing in fallback and burnEtherForMember() functions", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/137", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Require statement missing in fallback and burnEtherForMember() functions"}, {"title": "Contract BasicSale is missing an approve(address(vestLock), 2**256-1) call", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/135", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Contract BasicSale is missing an approve(address(vestLock), 2**256-1) call"}, {"title": "uint256 is always >= 0", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/133", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "uint256 is always >= 0"}, {"title": "Overwrite benRevocable", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/132", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Overwrite benRevocable"}, {"title": "Investor can't claim the last tokens (via claim() )", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/131", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Investor can't claim the last tokens (via claim() )"}, {"title": "Can't claim last part of airdrop", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/130", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "resolved", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Can't claim last part of airdrop"}, {"title": "Claim airdrop repeatedly", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/129", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Claim airdrop repeatedly"}, {"title": "No event was emitted while setting fees and admin_fees in constructor", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/128", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "No event was emitted while setting fees and admin_fees in constructor"}, {"title": "No checking of admin_fee, wether it is <= max_admin_fee ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/127", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "No checking of admin_fee, wether it is <= max_admin_fee "}, {"title": "claimExact does not check claimable amount", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/126", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "claimExact does not check claimable amount"}, {"title": "Renaming variables for clarity", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/125", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Renaming variables for clarity"}, {"title": "Public functions can be external", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/121", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Public functions can be external"}, {"title": "Unable to claim vesting due to unbounded timelock loop", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/120", "labels": ["bug", "3 (High Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unable to claim vesting due to unbounded timelock loop"}, {"title": "Function _getDayEmission can be simplified (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/118", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Function _getDayEmission can be simplified (PublicSale.sol)"}, {"title": "Cache Reference To State Variables \"currentDay, currentEra, emission\" in _updateEmission (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/117", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Cache Reference To State Variables \"currentDay, currentEra, emission\" in _updateEmission (PublicSale.sol)"}, {"title": "Vesting.revoke is missing a require statement", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/116", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Vesting.revoke is missing a require statement"}, {"title": "Unnecessary require statement in vesting.claim()", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unnecessary require statement in vesting.claim()"}, {"title": "Use of uint256 parameter instead of bool", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/112", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Use of uint256 parameter instead of bool"}, {"title": "Check ERC20 token `approve()` function return value", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/109", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Check ERC20 token `approve()` function return value"}, {"title": "Tokens not recoverable", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/108", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Tokens not recoverable"}, {"title": "Incorrect event parameter used in emit", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/105", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "Incorrect event parameter used in emit"}, {"title": "Using ++i consumes less gas than i++", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/104", "labels": ["bug", "G (Gas Optimization)"], "target": "2021-11-bootfinance-findings", "body": "Using ++i consumes less gas than i++"}, {"title": "Airdrop Supply differs", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/99", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Airdrop Supply differs"}, {"title": "Don't allow swapping the same token", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/89", "labels": ["bug", "1 (Low Risk)", "sponsor acknowledged"], "target": "2021-11-bootfinance-findings", "body": "Don't allow swapping the same token"}, {"title": "Redundant check on claim", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/97", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Redundant check on claim"}, {"title": "Duplicated code and usage of assert", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/96", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Duplicated code and usage of assert"}, {"title": "Gas optimization on InvestorDistribution.sol", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/94", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Gas optimization on InvestorDistribution.sol"}, {"title": "Invalid return value when calculating claimable amount ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/92", "labels": ["bug", "0 (Non-critical)", "sponsor disputed"], "target": "2021-11-bootfinance-findings", "body": "Invalid return value when calculating claimable amount "}, {"title": "State variables could be declared constant", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/88", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "State variables could be declared constant"}, {"title": "Unnecessary imports", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/91", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unnecessary imports"}, {"title": "Vesting contract locks tokens for less time than expected", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/82", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Vesting contract locks tokens for less time than expected"}, {"title": "`GaugeController.commit_transfer_ownership()` emits `CommitOwnership` events when the future admin hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/81", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`GaugeController.commit_transfer_ownership()` emits `CommitOwnership` events when the future admin hasn't changed"}, {"title": "`GaugeController.apply_transfer_ownership()` emits `ApplyOwnership` events when the admin hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/80", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`GaugeController.apply_transfer_ownership()` emits `ApplyOwnership` events when the admin hasn't changed"}, {"title": "Missing emit of initial `ApplyOwnership` event in `GaugeController.__init__()`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/79", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Missing emit of initial `ApplyOwnership` event in `GaugeController.__init__()`"}, {"title": "Missing emit of initial `SetAdmin` event in `MainToken.__init__()`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/78", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Missing emit of initial `SetAdmin` event in `MainToken.__init__()`"}, {"title": "`LPToken.approve()` emits `Approval` events when the allowance hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/73", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`LPToken.approve()` emits `Approval` events when the allowance hasn't changed"}, {"title": "`LPToken.transferFrom()` emits `Transfer` events when `_from` equals `_to`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/71", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`LPToken.transferFrom()` emits `Transfer` events when `_from` equals `_to`"}, {"title": "`LPToken.transfer()` and `LPToken.transferFrom()` emit `Transfer` events when the transferred amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/70", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`LPToken.transfer()` and `LPToken.transferFrom()` emit `Transfer` events when the transferred amount is zero"}, {"title": "`LPToken.set_minter()` doesn't check that `_minter` doesn't equal zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/69", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`LPToken.set_minter()` doesn't check that `_minter` doesn't equal zero"}, {"title": "`LPToken.__init__()` emits `Transfer` events when the amount minted for `msg.sender` is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/68", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`LPToken.__init__()` emits `Transfer` events when the amount minted for `msg.sender` is zero"}, {"title": "`MainToken.__init__()` emits `Transfer` events when the amount minted for `msg.sender` is zero (and it is always the case)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/67", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.__init__()` emits `Transfer` events when the amount minted for `msg.sender` is zero (and it is always the case)"}, {"title": "`MainToken.set_mint_multisig()` doesn't check that `_minting_multisig` doesn't equal zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/66", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.set_mint_multisig()` doesn't check that `_minting_multisig` doesn't equal zero"}, {"title": "`MainToken.set_mint_multisig()` emits `SetMintMultisig` events when `minting_multisig` hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/64", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.set_mint_multisig()` emits `SetMintMultisig` events when `minting_multisig` hasn't changed"}, {"title": "`MainToken.set_admin()` emits `SetAdmin` events when the admin hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/63", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.set_admin()` emits `SetAdmin` events when the admin hasn't changed"}, {"title": "`MainToken.set_minter()` emits `SetMinter` events when the minter hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/62", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.set_minter()` emits `SetMinter` events when the minter hasn't changed"}, {"title": "`MainToken.burn()` emits `Transfer` events when the burned amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/61", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.burn()` emits `Transfer` events when the burned amount is zero"}, {"title": "`MainToken.mint()` and `MainToken.mint_dev()` emit `Transfer` events when the minted amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/60", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.mint()` and `MainToken.mint_dev()` emit `Transfer` events when the minted amount is zero"}, {"title": "`MainToken.approve()` emits `Approval` events when the allowance hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/54", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.approve()` emits `Approval` events when the allowance hasn't changed"}, {"title": "`MainToken.transferFrom()` emits `Transfer` events when `_from` equals `_to`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/52", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.transferFrom()` emits `Transfer` events when `_from` equals `_to`"}, {"title": "`MainToken.transfer()` and `MainToken.transferFrom()` emit `Transfer` events when the transferred amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/51", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`MainToken.transfer()` and `MainToken.transferFrom()` emit `Transfer` events when the transferred amount is zero"}, {"title": "`PoolGauge.withdraw()` emits `Withdraw` events when the withdrawn amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/49", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`PoolGauge.withdraw()` emits `Withdraw` events when the withdrawn amount is zero"}, {"title": "`PoolGauge.deposit()` emits `Deposit` events when the deposited amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/48", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`PoolGauge.deposit()` emits `Deposit` events when the deposited amount is zero"}, {"title": "`PoolGauge.withdraw()` can be optimized when `_value` equals zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/47", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`PoolGauge.withdraw()` can be optimized when `_value` equals zero"}, {"title": "`Token.approve()` emits `Approval` events when the allowence hasn't changed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/46", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`Token.approve()` emits `Approval` events when the allowence hasn't changed"}, {"title": "`Token.transferFrom()` emits `Transfer` events when `_from` equals `_to`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/44", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`Token.transferFrom()` emits `Transfer` events when `_from` equals `_to`"}, {"title": "`Token.transfer()` and `Token.transferFrom()` emit `Transfer` events when the transferred amount is zero", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/43", "labels": ["bug", "0 (Non-critical)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "`Token.transfer()` and `Token.transferFrom()` emit `Transfer` events when the transferred amount is zero"}, {"title": "Array out-of-bounds errors in `USDPoolDelegator`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/39", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Array out-of-bounds errors in `USDPoolDelegator`"}, {"title": "Array out-of-bounds errors in `ETHPoolDelegator`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/38", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Array out-of-bounds errors in `ETHPoolDelegator`"}, {"title": "Array out-of-bounds errors in `BTCPoolDelegator`", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/37", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Array out-of-bounds errors in `BTCPoolDelegator`"}, {"title": "No Transfer Ownership Pattern", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/35", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "No Transfer Ownership Pattern"}, {"title": "If statement in _updateEmission() can be removed", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/34", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "If statement in _updateEmission() can be removed"}, {"title": "Lack of maximum and minimum vesting amount check on the vesting function", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/32", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Lack of maximum and minimum vesting amount check on the vesting function"}, {"title": "Unchecked transfers", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/31", "labels": ["bug", "2 (Med Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unchecked transfers"}, {"title": "Upgrade pragma to at least 0.8.4", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Upgrade pragma to at least 0.8.4"}, {"title": "getEmissionShare Can Be Rewritten To Be More Efficient (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/28", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "getEmissionShare Can Be Rewritten To Be More Efficient (PublicSale.sol)"}, {"title": "_processWithdrawal Can Be Rewritten To Be More Efficient (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/27", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "_processWithdrawal Can Be Rewritten To Be More Efficient (PublicSale.sol)"}, {"title": "_withdrawShare Can Be Rewritten To Be More Efficient (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/26", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "_withdrawShare Can Be Rewritten To Be More Efficient (PublicSale.sol)"}, {"title": "Unused Named Returns (PublicSale.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/25", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unused Named Returns (PublicSale.sol)"}, {"title": "Long Revert Strings", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/23", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Long Revert Strings"}, {"title": "Unnecessary \"else if\" in function vest (Vesting.sol)", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/22", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unnecessary \"else if\" in function vest (Vesting.sol)"}, {"title": "internal functions could be set private", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/18", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "internal functions could be set private"}, {"title": "optimizing for loops by caching array length", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "optimizing for loops by caching array length"}, {"title": "double reading of memory inside a loop without caching", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/13", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "double reading of memory inside a loop without caching"}, {"title": "admin can override investor and stuck its funds in the system ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/11", "labels": ["bug", "1 (Low Risk)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "admin can override investor and stuck its funds in the system "}, {"title": "multiple reading of state variables without caching", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/9", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "multiple reading of state variables without caching"}, {"title": "too many bits to describe small quantities ", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/8", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "too many bits to describe small quantities "}, {"title": "Unnecessary use of safeMath", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/7", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Unnecessary use of safeMath"}, {"title": "Numerous gas optimizations in SwapUtils.sol", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/6", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Numerous gas optimizations in SwapUtils.sol"}, {"title": "No need to initialize variables with default values", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/5", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "No need to initialize variables with default values"}, {"title": "Redundant check", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/2", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "Redundant check"}, {"title": "No usage of immutable keyword leaves free gas savings on the table", "html_url": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues/1", "labels": ["bug", "G (Gas Optimization)", "sponsor confirmed"], "target": "2021-11-bootfinance-findings", "body": "No usage of immutable keyword leaves free gas savings on the table"}, {"title": "Migrate from NonFungiblePositionManager to UniV3Pool directly", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/133", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-mellow-findings", "body": "Migrate from NonFungiblePositionManager to UniV3Pool directly"}, {"title": "Make deposit efficient ", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/132", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-mellow-findings", "body": "Make deposit efficient "}, {"title": "What you guys mean by this line ? Its redundant imo", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/130", "labels": ["bug", "0 (Non-critical)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": "What you guys mean by this line ? Its redundant imo"}, {"title": "No need of separate indexing (NFT_ID => Vault Address)", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/129", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": "No need of separate indexing (NFT_ID => Vault Address)"}, {"title": "Skip initialization of factory address in vault governance by predicting it before hand", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/127", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-mellow-findings", "body": "Skip initialization of factory address in vault governance by predicting it before hand"}, {"title": "Save Gas With The Unchecked Keyword", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/123", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-mellow-findings", "body": "Save Gas With The Unchecked Keyword"}, {"title": " Constant variables can be immutable (DefaultAccessControl.sol)", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/122", "labels": ["bug", "G (Gas Optimization)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": " Constant variables can be immutable (DefaultAccessControl.sol)"}, {"title": "`YearnVault.sol#pull()` will most certainly fail", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/121", "labels": ["bug", "3 (High Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": "`YearnVault.sol#pull()` will most certainly fail"}, {"title": "`AaveVault.sol#_pull()` may return wrong `actualTokenAmounts`", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/119", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": "`AaveVault.sol#_pull()` may return wrong `actualTokenAmounts`"}, {"title": "pre-calculate expressions that do not change", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/118", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2021-12-mellow-findings", "body": "pre-calculate expressions that do not change"}, {"title": "adminApprove will not work", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/117", "labels": ["bug", "1 (Low Risk)", "resolved", "sponsor confirmed"], "target": "2021-12-mellow-findings", "body": "adminApprove will not work"}, {"title": " The Contract Should Approve(0) first", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/115", "labels": ["bug", "1 (Low Risk)"], "target": "2021-12-mellow-findings", "body": " The Contract Should Approve(0) first"}, {"title": "`UniV3Vault` does not distribute fee earning to depositor", "html_url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/111", "labels": ["bug", "1 (Low Risk)", "sponsor disputed"], "target": "2021-12-mellow-findings", "body": "`UniV3Vault` does not distribute fee earning to depositor"}]