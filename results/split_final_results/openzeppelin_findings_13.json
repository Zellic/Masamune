[{"title": "In the Governance contract:", "body": "In the Governance contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-governance-contract:", "labels": ["OpenZeppelin"]}, {"title": "No to Rejected.", "body": "No to Rejected.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#no-to-rejected.", "labels": ["OpenZeppelin"]}, {"title": "Yes to Approved or ExecutedSuccessfully.", "body": "Yes to Approved or ExecutedSuccessfully.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#yes-to-approved-or-executedsuccessfully.", "labels": ["OpenZeppelin"]}, {"title": "TxFailed to ExecutedWithFailure.", "body": "TxFailed to ExecutedWithFailure.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#txfailed-to-executedwithfailure.", "labels": ["OpenZeppelin"]}, {"title": "startBlockNumber to submissionBlockNumber.", "body": "startBlockNumber to submissionBlockNumber.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#startblocknumber-to-submissionblocknumber.", "labels": ["OpenZeppelin"]}, {"title": "signature to functionSignature.", "body": "signature to functionSignature.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#signature-to-functionsignature.", "labels": ["OpenZeppelin"]}, {"title": "submitProposalVote to submitVote.", "body": "submitProposalVote to submitVote.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#submitproposalvote-to-submitvote.", "labels": ["OpenZeppelin"]}, {"title": "In the ClaimsManager contract:", "body": "In the ClaimsManager contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-claimsmanager-contract:", "labels": ["OpenZeppelin"]}, {"title": "fundBlock to fundedBlock.", "body": "fundBlock to fundedBlock.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#fundblock-to-fundedblock.", "labels": ["OpenZeppelin"]}, {"title": "fundingAmount to fundedAmount.", "body": "fundingAmount to fundedAmount.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#fundingamount-to-fundedamount.", "labels": ["OpenZeppelin"]}, {"title": "_address to _stakingAddress.", "body": "_address to _stakingAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_address-to-_stakingaddress.", "labels": ["OpenZeppelin"]}, {"title": "_spFactory to _serviceProviderFactoryAddress.", "body": "_spFactory to _serviceProviderFactoryAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_spfactory-to-_serviceproviderfactoryaddress.", "labels": ["OpenZeppelin"]}, {"title": "_delegateManager to _delegateManagerAddress.", "body": "_delegateManager to _delegateManagerAddress.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#_delegatemanager-to-_delegatemanageraddress.", "labels": ["OpenZeppelin"]}, {"title": "In the ServiceProviderFactory contract:", "body": "In the ServiceProviderFactory contract:", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-the-serviceproviderfactory-contract:", "labels": ["OpenZeppelin"]}, {"title": "UpdateEndpoint to EndpointUpdated.", "body": "UpdateEndpoint to EndpointUpdated.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#updateendpoint-to-endpointupdated.", "labels": ["OpenZeppelin"]}, {"title": "sp to serviceEndpoint.", "body": "sp to serviceEndpoint.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#sp-to-serviceendpoint.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request 595. Some functions or variables\u2019 names that derive from the suggestions are still using the old nomenclature such as in the getLastFundBlock function from the ClaimsManager contract.", "body": "Update: Partially fixed in pull request 595. Some functions or variables\u2019 names that derive from the suggestions are still using the old nomenclature such as in the getLastFundBlock function from the ClaimsManager contract.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-595.-some-functions-or-variables\u2019-names-that-derive-from-the-suggestions-are-still-using-the-old-nomenclature-such-as-in-the-getlastfundblock-function-from-the-claimsmanager-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request 657.", "body": "Update: Fixed in pull request 657.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-657.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Declaring two variables for some addresses", "body": "[N05] Declaring two variables for some addresses", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n05]-declaring-two-variables-for-some-addresses", "labels": ["OpenZeppelin"]}, {"title": "tokenAddress and", "body": "tokenAddress and", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#tokenaddress-and", "labels": ["OpenZeppelin"]}, {"title": "audiusToken of the", "body": "audiusToken of the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#audiustoken-of-the", "labels": ["OpenZeppelin"]}, {"title": "registry and", "body": "registryAddress of the  It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.  Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.  Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses variables have been removed.  [N06] Not declaring uint as uint256  In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol  To favor explicitness and consistency, consider declaring all instances of uint as uint256.  Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.  Update: Fully fixed in pull request #657.  Conclusions  3 critical and 12 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Update: The Audius team fixed all the critical, high, and medium severity issues that we reported.  Additional security recommendations  Note: The following recommendations were made after the Audius team had already addressed the issues from our initial audit.  Audius has a lot of moving parts: A delegated staking system, a rewards program, a registration system, a voting and governance system, and a slashing mechanism. The code to implement all these moving parts is complex, and there are a lot of interactions between the various systems. We have done our best to raise as many valuable security issues as we could find during our time-limited engagement. However, we cannot guarantee that weve found all the bugs or enumerated all the risks in the Audius system.  Given the complexity of this system, and the large number of users that may interact with it, consider applying the following recommendations to further reduce the attack surface, mitigate risk, and get more eyes on the code:  Beta testing: Consider engaging a community of early adopters to put the system under test with conditions as close to mainnet as possible.  Bug bounty: Consider implementing a bug bounty program to get more eyes on the code, and to incentivize hackers to contribute with the system instead of attacking it.  Future reaudit: Given the high number of critical and high severity issues found during this audit, the number of changes that were made as a result, and the complex interactions between the various systems, we suggest the Audius team to analyze the results of the beta testing and bug bounty to decide if the code should be reaudited with a fresh set of eyes.  Security contact info: To make it easier for independent security researchers to contact Audius with any issues they may find, consider adding security contact info to the audius-protocol repo and/or the Audius website.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#registry-and", "labels": ["OpenZeppelin"]}, {"title": "registryAddress of the", "body": "registryAddress of the", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#registryaddress-of-the", "labels": ["OpenZeppelin"]}, {"title": "It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.", "body": "It is not clear why the two variables are declared. With the address it is possible to get the deployed contract instance, and from the deployed contract instance it is possible to get the address, so there seems to be unnecessary duplication.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#it-is-not-clear-why-the-two-variables-are-declared.-with-the-address-it-is-possible-to-get-the-deployed-contract-instance,-and-from-the-deployed-contract-instance-it-is-possible-to-get-the-address,-so-there-seems-to-be-unnecessary-duplication.", "labels": ["OpenZeppelin"]}, {"title": "Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.", "body": "Consider refactoring the code to use only variable for the address or for the contract instance, to slightly reduce the number of lines of code to maintain and the number of variables to keep track of. If there is a reason to declare both, consider documenting it.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#consider-refactoring-the-code-to-use-only-variable-for-the-address-or-for-the-contract-instance,-to-slightly-reduce-the-number-of-lines-of-code-to-maintain-and-the-number-of-variables-to-keep-track-of.-if-there-is-a-reason-to-declare-both,-consider-documenting-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses\u2019 variables have been removed.", "body": "Update: Fixed in pull request #590. Only the instance variables are now stored, all addresses\u2019 variables have been removed.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fixed-in-pull-request-#590.-only-the-instance-variables-are-now-stored,-all-addresses\u2019-variables-have-been-removed.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Not declaring uint as uint256", "body": "[N06] Not declaring uint as uint256", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#[n06]-not-declaring-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol", "body": "In most parts of the code variables are declared as uint instead of uint256. For example, in lines 52 to 54 of ClaimsManager.sol", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#in-most-parts-of-the-code-variables-are-declared-as-uint-instead-of-uint256.-for-example,-in-lines-52-to-54-of-claimsmanager.sol", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and consistency, consider declaring all instances of uint as uint256.", "body": "To favor explicitness and consistency, consider declaring all instances of uint as uint256.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#to-favor-explicitness-and-consistency,-consider-declaring-all-instances-of-uint-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.", "body": "Update: Partially fixed in pull request #593. There are still cases, such as in the ClaimsManager contract, where the variables are defined as uint instead of explicitly make use of the uint256 type.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-partially-fixed-in-pull-request-#593.-there-are-still-cases,-such-as-in-the-claimsmanager-contract,-where-the-variables-are-defined-as-uint-instead-of-explicitly-make-use-of-the-uint256-type.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fully fixed in pull request #657.", "body": "Update: Fully fixed in pull request #657.", "html_url": "https://blog.openzeppelin.com/audius-contracts-audit#update:-fully-fixed-in-pull-request-#657.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Code with testing purposes might be deployed", "body": "[N01] Code with testing purposes might be deployed", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n01]-code-with-testing-purposes-might-be-deployed", "labels": ["OpenZeppelin"]}, {"title": "Even though the code base is still under heavy development and will not be launched to production soon, it should strive to always follow best practices of code cleanliness to avoid future errors.", "body": "Even though the code base is still under heavy development and will not be launched to production soon, it should strive to always follow best practices of code cleanliness to avoid future errors.", "html_url": "https://blog.openzeppelin.com/primitive-audit#even-though-the-code-base-is-still-under-heavy-development-and-will-not-be-launched-to-production-soon,-it-should-strive-to-always-follow-best-practices-of-code-cleanliness-to-avoid-future-errors.", "labels": ["OpenZeppelin"]}, {"title": "In particular, consider removing any lines of code from the contracts that were included for testing purposes. These leftovers from tests in the contracts could lead to the deployment of undesired code. For instance, it seems that the use of weth in the constructor of the Trader contract was solely intended for testing purposes.", "body": "In particular, consider removing any lines of code from the contracts that were included for testing purposes. These leftovers from tests in the contracts could lead to the deployment of undesired code. For instance, it seems that the use of weth in the constructor of the Trader contract was solely intended for testing purposes.", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-particular,-consider-removing-any-lines-of-code-from-the-contracts-that-were-included-for-testing-purposes.-these-leftovers-from-tests-in-the-contracts-could-lead-to-the-deployment-of-undesired-code.-for-instance,-it-seems-that-the-use-of-weth-in-the-constructor-of-the-trader-contract-was-solely-intended-for-testing-purposes.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, for improved readability, consider using smaller names and symbols for the Option and Redeem tokens.", "body": "Additionally, for improved readability, consider using smaller names and symbols for the Option and Redeem tokens.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-for-improved-readability,-consider-using-smaller-names-and-symbols-for-the-option-and-redeem-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed.", "body": "Low severity  [L01] Erroneous data logged in events  The Close event should emit the callers address and the number of options sent in, but it is actually logs the receiver address and the number of underlying tokens sent out.  The Redeem event should emit the callers address, but it actually logs the receiver address.  The Exercise event should emit the callers address, but it actually logs the receiver address.  The Mint event should emit the callers address, but it actually logs the receivers address.  Update: Fixed in PR #25. Event definitions and logged data now match.  [L02] External call does not check if target is contract  The Option contract performs external function calls during its execution to user-controlled addresses. An example can be seen in the exercise function, where the receiver argument is implicitly assumed to be a contract.  While this issue does not pose a security risk, consider always using the Address library from OpenZeppelin Contracts to explicitly validate whether user-controlled targets of external calls are indeed contracts.    [L03] Naming issues hinder code understanding and readability  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Consider renaming the following functions and variables:  parameters to optionParameters.  take to withdrawUnusedFunds.  update to updateCacheBalances.  tokens to getAssetAddresses.  redeem to redeemStrikeTokens.  exercise to exerciseOptions.  mint to mintOptions.  _fund to _updateCacheBalances.  caches to getCacheBalances.  strikeToken to getStrikeTokenAddress.  underlyingToken to getUnderlyingTokenAddress.  base to getBaseValue.  quote to getQuoteValue.  expiry to getExpiryTime.  Update: Fixed in PR #26.  [L04] Incomplete IRedeem and IOption interfaces  Redeem and  Option contracts inherit from OpenZeppelin Contracts  ERC20 contract, the corresponding interfaces  IRedeem and  IOption do not inherit from the  IERC20 interface.  To favor explicitness and avoid unexpected errors when using the IRedeem and IOption interfaces, consider inheriting from the IERC20 interface in the IRedeem and IOption interfaces.  Update: Fixed in PR #27.  [L05] Lack of input validation in Option contracts initialization  The initialize function of the Option contract does not validate the initialization parameters passed. In particular:  The underlyingToken and strikeToken addresses could reference the same token.  The base and quote parameters can be set to zero, which can introduce unexpected division-by-zero errors in other operations.  The expiry time can be set in the past (that is, lower than the current blocks timestamp).  To avoid errors and explicitly restrict the type of options that can be created, consider implementing require clauses where appropriate to validate all user-controlled input.  Update: Fixed in PR #28.  [L06] Missing check in initRedeemToken function  OptionFactory contract can call the  initialize function which in turns calls the  initRedeemToken function in the  Option contract. The owner of the  Registry contract which deploys the factory contract by calling the  deployOption function.  In summary, Option contracts are deployed via the factory, and the factory is owned by the registry, and there does not seem to be a way of setting the redeem token for an option twice. However, future changes to the code base might introduce viable ways of doing it.  Since setting the redeem token is an important functionality of the Primitive protocol, in order to reduce the attack surface, consider adding an explicit check in the initRedeemToken function that verifies that the address of redeemToken is zero before setting it to the passed _redeemToken address.  Update: Fixed in PR #29.  [L07] Missing docstrings  Some of the contracts and functions in Primitives code base lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec), as addressed in the issue [N04] Not following the Ethereum Natural Specification Format.  Update: Partially fixed. While there is no PR covering this particular issue, overall improvements have been made in terms of docstrings. However, there are still exposed functions without docstrings (see the initialize function of Redeem contract as an example).  [L08] Multiple conditions in a single require statemen", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-not-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inconsistent coding style", "body": "[N02] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n02]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "The code base does not always follow a consistent coding style. Some cases identified in the Option contract are:", "body": "The code base does not always follow a consistent coding style. Some cases identified in the Option contract are:", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-code-base-does-not-always-follow-a-consistent-coding-style.-some-cases-identified-in-the-option-contract-are:", "labels": ["OpenZeppelin"]}, {"title": "It inherits the properties from the OpenZeppelin\u2019s ERC20 contract and with it, the balanceOf function. Nevertheless, the Option contract calls this function in 2 different ways in line 124 and in line 238.", "body": "It inherits the properties from the OpenZeppelin\u2019s ERC20 contract and with it, the balanceOf function. Nevertheless, the Option contract calls this function in 2 different ways in line 124 and in line 238.", "html_url": "https://blog.openzeppelin.com/primitive-audit#it-inherits-the-properties-from-the-openzeppelin\u2019s-erc20-contract-and-with-it,-the-balanceof-function.-nevertheless,-the-option-contract-calls-this-function-in-2-different-ways-in-line-124-and-in-line-238.", "labels": ["OpenZeppelin"]}, {"title": "The revert reasons, such as the one in line 222, display in capital letters and underscores a brief error message. However, given the contracts also use contracts from OpenZeppelin Contracts, such as Pausable, the style of revert reasons are not going to be consistent across the code base.", "body": "The revert reasons, such as the one in line 222, display in capital letters and underscores a brief error message. However, given the contracts also use contracts from OpenZeppelin Contracts, such as Pausable, the style of revert reasons are not going to be consistent across the code base.", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-revert-reasons,-such-as-the-one-in-line-222,-display-in-capital-letters-and-underscores-a-brief-error-message.-however,-given-the-contracts-also-use-contracts-from-openzeppelin-contracts,-such-as-pausable,-the-style-of-revert-reasons-are-not-going-to-be-consistent-across-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Some functions declare the return variable in the function definition, and then copy a state variable\u2019s value into the implicit return variables instead of directly returning the value of the state variables. Furthermore, this style is not consistent across all functions, where getters from the same contract return directly the state variable instead of copying into a new one.", "body": "Some functions declare the return variable in the function definition, and then copy a state variable\u2019s value into the implicit return variables instead of directly returning the value of the state variables. Furthermore, this style is not consistent across all functions, where getters from the same contract return directly the state variable instead of copying into a new one.", "html_url": "https://blog.openzeppelin.com/primitive-audit#some-functions-declare-the-return-variable-in-the-function-definition,-and-then-copy-a-state-variable\u2019s-value-into-the-implicit-return-variables-instead-of-directly-returning-the-value-of-the-state-variables.-furthermore,-this-style-is-not-consistent-across-all-functions,-where-getters-from-the-same-contract-return-directly-the-state-variable-instead-of-copying-into-a-new-one.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing this inconsistent styles to improve the project\u2019s readability. As reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Consider fixing this inconsistent styles to improve the project\u2019s readability. As reference, consider always following the style proposed in Solidity\u2019s Style Guide. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/primitive-audit#consider-fixing-this-inconsistent-styles-to-improve-the-project\u2019s-readability.-as-reference,-consider-always-following-the-style-proposed-in-solidity\u2019s-style-guide.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed.", "body": "[N03] Named return variables  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.  Update: Not fixed.  [N04] Not following the Ethereum Natural Specification Format  Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts public API.  Update: Not fixed.  [N05] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.  Update: Not fixed.  [N06] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Not fixed.  [N07] Unnecessary library  The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.  To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.  Update: Fixed in PR #32.  [N08] Unused import statements  In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:  IERC20 in the Redeem contract.  ERC20, IERC20, and SafeERC20 in the Trader contract.  Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.  Update: Fixed in PR #33.  [N09] Unused state variables  Redeem contract declares a variable  redeemableToken which is later assigned in the  initialize function. The  deployOption function in the  calls the deploy function present in the  RedeemFactory contract, which in turn  calls the initialize function present in the  Redeem contract and sets the value of  Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.  In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.  Update: Not fixed.  Conclusions  Originally, 3 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. As stated in the Update section, and in each particular issue as well, all severe issues identified have been either acknowledged (by considering them inherent to the systems design) or correctly fixed.  We audited an early version of the Primitive project that is a work-in-progress and not yet ready for production. This first audit round has been Primitives initial step on its way to reach the needed level of maturity for projects intended to handle large sums of financial assets. To further help the project reach a production-ready state, we highly advise additional rounds of security reviews.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-partially-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Named return variables", "body": "[N03] Named return variables", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n03]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "body": "Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both explicitness and readability of the code, and may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/primitive-audit#consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-explicitness-and-readability-of-the-code,-and-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Not following the Ethereum Natural Specification Format", "body": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts public API.  Update: Not fixed.  [N05] OpenZeppelin Contracts dependency is not pinned  To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contractss library, consider pinning the version of this dependency in the package.json file.  Update: Not fixed.  [N06] Solidity compiler version is not pinned  Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compilers features needed by the project and the list of known bugs associated with each Solidity compiler version.  Update: Not fixed.  [N07] Unnecessary library  The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.  To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.  Update: Fixed in PR #32.  [N08] Unused import statements  In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:  IERC20 in the Redeem contract.  ERC20, IERC20, and SafeERC20 in the Trader contract.  Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.  Update: Fixed in PR #33.  [N09] Unused state variables  Redeem contract declares a variable  redeemableToken which is later assigned in the  initialize function. The  deployOption function in the  calls the deploy function present in the  RedeemFactory contract, which in turn  calls the initialize function present in the  Redeem contract and sets the value of  Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.  In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.  Update: Not fixed.  Conclusions  Originally, 3 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. As stated in the Update section, and in each particular issue as well, all severe issues identified have been either acknowledged (by considering them inherent to the systems design) or correctly fixed.  We audited an early version of the Primitive project that is a work-in-progress and not yet ready for production. This first audit round has been Primitives initial step on its way to reach the needed level of maturity for projects intended to handle large sums of financial assets. To further help the project reach a production-ready state, we highly advise additional rounds of security reviews.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n04]-not-following-the-ethereum-natural-specification-format", "labels": ["OpenZeppelin"]}, {"title": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts\u2019 public API.", "body": "Most of the docstrings in the code base are not fully following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of a contracts\u2019 public API.", "html_url": "https://blog.openzeppelin.com/primitive-audit#most-of-the-docstrings-in-the-code-base-are-not-fully-following-the-ethereum-natural-specification-format-(natspec).-consider-following-this-specification-on-everything-that-is-part-of-a-contracts\u2019-public-api.", "labels": ["OpenZeppelin"]}, {"title": "[N05] OpenZeppelin Contract\u2019s dependency is not pinned", "body": "[N05] OpenZeppelin Contract\u2019s dependency is not pinned", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n05]-openzeppelin-contract\u2019s-dependency-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "body": "To prevent unexpected behaviors in case breaking changes are released in future updates of the OpenZeppelin Contracts\u2019s library, consider pinning the version of this dependency in the package.json file.", "html_url": "https://blog.openzeppelin.com/primitive-audit#to-prevent-unexpected-behaviors-in-case-breaking-changes-are-released-in-future-updates-of-the-openzeppelin-contracts\u2019s-library,-consider-pinning-the-version-of-this-dependency-in-the-package.json-file.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Solidity compiler version is not pinned", "body": "[N06] Solidity compiler version is not pinned", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n06]-solidity-compiler-version-is-not-pinned", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "body": "Throughout the code base, consider pinning the version of the Solidity compiler to its latest stable version. This should help prevent introducing unexpected bugs due to incompatible future releases. To choose a specific version, developers should consider both the compiler\u2019s features needed by the project and the list of known bugs associated with each Solidity compiler version.", "html_url": "https://blog.openzeppelin.com/primitive-audit#throughout-the-code-base,-consider-pinning-the-version-of-the-solidity-compiler-to-its-latest-stable-version.-this-should-help-prevent-introducing-unexpected-bugs-due-to-incompatible-future-releases.-to-choose-a-specific-version,-developers-should-consider-both-the-compiler\u2019s-features-needed-by-the-project-and-the-list-of-known-bugs-associated-with-each-solidity-compiler-version.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unnecessary library", "body": "[N07] Unnecessary library", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n07]-unnecessary-library", "labels": ["OpenZeppelin"]}, {"title": "The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.", "body": "The Primitives library consists of only a struct Option and has no other functions or variables in it. This struct is solely used in the Option contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#the-primitives-library-consists-of-only-a-struct-option-and-has-no-other-functions-or-variables-in-it.-this-struct-is-solely-used-in-the-option-contract.", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.", "body": "To favor simplicity, consider moving the Option struct to the Option contract and removing the Primitive library from the code base.", "html_url": "https://blog.openzeppelin.com/primitive-audit#to-favor-simplicity,-consider-moving-the-option-struct-to-the-option-contract-and-removing-the-primitive-library-from-the-code-base.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #32.", "body": "Update: Fixed in PR #32.", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-fixed-in-pr-#32.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused import statements", "body": "[N08] Unused import statements", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n08]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:", "body": "In the code base, there are places in which contracts are imported but are never used. Consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-the-code-base,-there-are-places-in-which-contracts-are-imported-but-are-never-used.-consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "IERC20 in the Redeem contract.", "body": "IERC20 in the Redeem contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#ierc20-in-the-redeem-contract.", "labels": ["OpenZeppelin"]}, {"title": "ERC20, IERC20, and SafeERC20 in the Trader contract.", "body": "ERC20, IERC20, and SafeERC20 in the Trader contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#erc20,-ierc20,-and-safeerc20-in-the-trader-contract.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.", "body": "Additionally, the TraderLib library imports the IERC20 interface from the ERC20.sol file, while it could directly import the IERC20 interface from the IERC20.sol file.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-the-traderlib-library-imports-the-ierc20-interface-from-the-erc20.sol-file,-while-it-could-directly-import-the-ierc20-interface-from-the-ierc20.sol-file.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR #33.", "body": "Update: Fixed in PR #33.", "html_url": "https://blog.openzeppelin.com/primitive-audit#update:-fixed-in-pr-#33.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unused state variables", "body": "[N09] Unused state variables", "html_url": "https://blog.openzeppelin.com/primitive-audit#[n09]-unused-state-variables", "labels": ["OpenZeppelin"]}, {"title": "Redeem contract declares a variable", "body": "Redeem contract declares a variable", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeem-contract-declares-a-variable", "labels": ["OpenZeppelin"]}, {"title": "redeemableToken which is later assigned in the", "body": "redeemableToken which is later assigned in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeemabletoken-which-is-later-assigned-in-the", "labels": ["OpenZeppelin"]}, {"title": "initialize function. The", "body": "initialize function. The", "html_url": "https://blog.openzeppelin.com/primitive-audit#initialize-function.-the", "labels": ["OpenZeppelin"]}, {"title": "deployOption function in the", "body": "deployOption function in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#deployoption-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "calls the deploy function present in the", "body": "calls the deploy function present in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#calls-the-deploy-function-present-in-the", "labels": ["OpenZeppelin"]}, {"title": "RedeemFactory contract, which in turn", "body": "RedeemFactory contract, which in turn", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeemfactory-contract,-which-in-turn", "labels": ["OpenZeppelin"]}, {"title": "calls the initialize function present in the", "body": "calls the initialize function present in the", "html_url": "https://blog.openzeppelin.com/primitive-audit#calls-the-initialize-function-present-in-the", "labels": ["OpenZeppelin"]}, {"title": "Redeem contract and sets the value of", "body": "Redeem contract and sets the value of", "html_url": "https://blog.openzeppelin.com/primitive-audit#redeem-contract-and-sets-the-value-of", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.", "body": "Additionally, the Trader contract declares a variable weth which is initialized in the constructor but is not used anywhere in the code.", "html_url": "https://blog.openzeppelin.com/primitive-audit#additionally,-the-trader-contract-declares-a-variable-weth-which-is-initialized-in-the-constructor-but-is-not-used-anywhere-in-the-code.", "labels": ["OpenZeppelin"]}, {"title": "In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.", "body": "In order to increase code readability and favor simplicity, consider removing the state variable redeemableToken from the Redeem contract (making the subsequent necessary code changes). Similarly, consider removing the weth state variable from the Trader contract.", "html_url": "https://blog.openzeppelin.com/primitive-audit#in-order-to-increase-code-readability-and-favor-simplicity,-consider-removing-the-state-variable-redeemabletoken-from-the-redeem-contract-(making-the-subsequent-necessary-code-changes).-similarly,-consider-removing-the-weth-state-variable-from-the-trader-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Superfluous code in _getFormattedStrikePrice", "body": "[N01] Superfluous code in _getFormattedStrikePrice", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n01]-superfluous-code-in-_getformattedstrikeprice", "labels": ["OpenZeppelin"]}, {"title": "line 987 of", "body": "line 987 of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-987-of", "labels": ["OpenZeppelin"]}, {"title": "initialized to 0 and cannot be otherwise changed", "body": "initialized to 0 and cannot be otherwise changed", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#initialized-to-0-and-cannot-be-otherwise-changed", "labels": ["OpenZeppelin"]}, {"title": "until after representativeAt has been changed. Additionally, since this change can only happen", "body": "until after representativeAt has been changed. Additionally, since this change can only happen", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#until-after-representativeat-has-been-changed.-additionally,-since-this-change-can-only-happen", "labels": ["OpenZeppelin"]}, {"title": "when representativeAt == -1, it follows that", "body": "when representativeAt == -1, it follows that", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#when-representativeat-==--1,-it-follows-that", "labels": ["OpenZeppelin"]}, {"title": "condition on line 1014 must always be true, since", "body": "condition on line 1014 must always be true, since", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#condition-on-line-1014-must-always-be-true,-since", "labels": ["OpenZeppelin"]}, {"title": "i is always 0 or greater. So, this", "body": "i is always 0 or greater. So, this", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#i-is-always-0-or-greater.-so,-this", "labels": ["OpenZeppelin"]}, {"title": "1014 and", "body": "1014 and", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#1014-and", "labels": ["OpenZeppelin"]}, {"title": "1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.", "body": "1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#1016-can-be-removed.-consider-making-the-changes-indicated-above.-doing-so-will-make-this-portion-of-the-code-clearer-for-future-developers.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #16.", "body": "Update: Fixed in pull request #16.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#16.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Superfluous check within _validateAndBurn", "body": "[N02] Superfluous check within _validateAndBurn", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n02]-superfluous-check-within-_validateandburn", "labels": ["OpenZeppelin"]}, {"title": "line 738 of", "body": "line 738 of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-738-of", "labels": ["OpenZeppelin"]}, {"title": "sub is called with", "body": "sub is called with", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#sub-is-called-with", "labels": ["OpenZeppelin"]}, {"title": "requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of", "body": "requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#requires-that-tokendata[account].amount-<=-balanceof(account).-while-this-does-not-cover-the-case-of", "labels": ["OpenZeppelin"]}, {"title": "tokenAmount is required to be > 0 and", "body": "tokenAmount is required to be > 0 and", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#tokenamount-is-required-to-be->-0-and", "labels": ["OpenZeppelin"]}, {"title": "the result of sub is required to be >= tokenAmount, there is no way for the case of", "body": "the result of sub is required to be >= tokenAmount, there is no way for the case of", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-result-of-sub-is-required-to-be->=-tokenamount,-there-is-no-way-for-the-case-of", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the check on line 738.", "body": "Consider removing the check on line 738.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-removing-the-check-on-line-738.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #18.", "body": "Update: Fixed in pull request #18.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#18.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Check for updates to copied code", "body": "[N03] Check for updates to copied code", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n03]-check-for-updates-to-copied-code", "labels": ["OpenZeppelin"]}, {"title": "Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these \u201cimported\u201d libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.", "body": "Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these \u201cimported\u201d libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#many-contracts,-such-as-strings,-bokkypoobahsdatetimelibrary,-and-uniswapv2library-come-from-other-sources.-while-these-\u201cimported\u201d-libraries-can-be-useful-to-leverage-the-development-efforts-of-other-teams,-a-process-should-exist-to-check-these-contracts-for-updates.", "labels": ["OpenZeppelin"]}, {"title": "Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.", "body": "Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-establishing-a-cadence-for-regularly-checking-these-contracts-for-updates.-by-doing-so,-any-functionality-or-security-improvements-can-be-quickly-integrated-into-the-aco-repository.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. Auctus\u2019 statement for this issue:", "body": "The team is aware and will always check if new token pairs are supported, paying attention to the points mentioned.  [L08] Lack of indexed parameters  SetFactoryAdmin,  SetAcoTokenImplementation,  SetAcoFee and  SetAcoFeeDestination events in the  ACOFactory are indexed. The same is true for the  ProxyAdminUpdated and  SetImplementation events of the  ACOProxy contract.  Indexing parameters in these events allows the timeline of sensitive changes to be more easily tracked. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  Update: Partially fixed. The Auctus team decided to index event parameters in the ACOFactory contract in pull request #11, but not in ACOProxy as shown in pull request #15. Auctus statemement for this issue:  We indexed parameters in the ACOFactory. About the proxy parameters, we dont expect significant amount of data to justify changing our current proxy address.  [L09] An infinite loop may exist  infinite loop on line 665. The continuation condition for this loop is that  Considering the check following the loop (which checks that tokenAmount == 0) and the break condition for the loop which checks the same thing, it appears that the intention was for this loop to be exitable without using the break condition.  Consider changing the definition of i to int instead of uint.  Update: Fixed. They refactored the mentioned loop in different pull requests. Now it iterates over a maximum number of accounts that can be exercised for each call, shown in pull request #9.  [L10] underlyingPrecision can overflow  underlyingPrecision is defined within the  underlyingDecimals is set, there are no checks afterwards to ensure that  uint256 is roughly  Update: Fixed in pull request #10.  Notes & Additional Information  [N01] Superfluous code in _getFormattedStrikePrice  line 987 of  initialized to 0 and cannot be otherwise changed  until after representativeAt has been changed. Additionally, since this change can only happen  when representativeAt == -1, it follows that  condition on line 1014 must always be true, since  i is always 0 or greater. So, this  1014 and  1016 can be removed. Consider making the changes indicated above. Doing so will make this portion of the code clearer for future developers.  Update: Fixed in pull request #16.  [N02] Superfluous check within _validateAndBurn  line 738 of  sub is called with  requires that tokenData[account].amount <= balanceOf(account). While this does not cover the case of  tokenAmount is required to be > 0 and  the result of sub is required to be >= tokenAmount, there is no way for the case of  Consider removing the check on line 738.  Update: Fixed in pull request #18.  [N03] Check for updates to copied code  Many contracts, such as Strings, BokkyPooBahsDateTimeLibrary, and UniswapV2Library come from other sources. While these imported libraries can be useful to leverage the development efforts of other teams, a process should exist to check these contracts for updates.  Consider establishing a cadence for regularly checking these contracts for updates. By doing so, any functionality or security improvements can be quickly integrated into the ACO repository.    We will establish a process to regularly check updates  [N04] Lack of comments in _getFormattedStrikePrice  In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.  Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.  Update: Fixed in pull request #17.  [N05] Inaccurate docstrings  There are some inaccuracies in the docstrings describing the functions in the codebase.  Line 168 of the ACOToken contract should say first require instead of assert.  Line 610 of the ACOToken contract should say transferred instead of redeemed.  Update: Fixed in pull request #19.  [N06] Inaccurate error message  The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Fixed in pull request #20.  [N07] Typos in code  In the code, the following typos were found:  On line 11 of ACOToken.sol, the comment should say compliant instead of compliance.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-acknowledged.-auctus\u2019-statement-for-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "We will establish a process to regularly check updates", "body": "We will establish a process to regularly check updates", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#we-will-establish-a-process-to-regularly-check-updates", "labels": ["OpenZeppelin"]}, {"title": "[N04] Lack of comments in _getFormattedStrikePrice", "body": "[N04] Lack of comments in _getFormattedStrikePrice", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n04]-lack-of-comments-in-_getformattedstrikeprice", "labels": ["OpenZeppelin"]}, {"title": "In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.", "body": "In the _getFormattedStrikePrice function of the ACOToken contract, there is not enough information in the docstrings about how the function should behave and what is doing.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#in-the-_getformattedstrikeprice-function-of-the-acotoken-contract,-there-is-not-enough-information-in-the-docstrings-about-how-the-function-should-behave-and-what-is-doing.", "labels": ["OpenZeppelin"]}, {"title": "Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.", "body": "Given the intrinsic complexity of the function, consider giving a short explanation of how the function works, either through NatSpec comments or inline comments, so that readers can have a clearer understanding of the code.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#given-the-intrinsic-complexity-of-the-function,-consider-giving-a-short-explanation-of-how-the-function-works,-either-through-natspec-comments-or-inline-comments,-so-that-readers-can-have-a-clearer-understanding-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #17.", "body": "Update: Fixed in pull request #17.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#17.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inaccurate docstrings", "body": "[N05] Inaccurate docstrings", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n05]-inaccurate-docstrings", "labels": ["OpenZeppelin"]}, {"title": "There are some inaccuracies in the docstrings describing the functions in the codebase.", "body": "There are some inaccuracies in the docstrings describing the functions in the codebase.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#there-are-some-inaccuracies-in-the-docstrings-describing-the-functions-in-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Line 168 of the ACOToken contract should say \u201cfirst require\u201d instead of \u201cassert\u201c.", "body": "Line 168 of the ACOToken contract should say \u201cfirst require\u201d instead of \u201cassert\u201c.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-168-of-the-acotoken-contract-should-say-\u201cfirst-require\u201d-instead-of-\u201cassert\u201c.", "labels": ["OpenZeppelin"]}, {"title": "Line 610 of the ACOToken contract should say \u201ctransferred\u201d instead of \u201credeemed\u201d.", "body": "Line 610 of the ACOToken contract should say \u201ctransferred\u201d instead of \u201credeemed\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#line-610-of-the-acotoken-contract-should-say-\u201ctransferred\u201d-instead-of-\u201credeemed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #19.", "body": "Update: Fixed in pull request #19.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#19.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inaccurate error message", "body": "[N06] Inaccurate error message", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n06]-inaccurate-error-message", "labels": ["OpenZeppelin"]}, {"title": "The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.", "body": "The error message on line 459 of ACOToken.sol indicates that there is no allowance for msg.sender from account. A more accurate error message would be ACOToken::redeemFrom: Allowance too low.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-error-message-on-line-459-of-acotoken.sol-indicates-that-there-is-no-allowance-for-msg.sender-from-account.-a-more-accurate-error-message-would-be-acotoken::redeemfrom:-allowance-too-low.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issue mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issue-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #20.", "body": "Update: Fixed in pull request #20.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#20.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Typos in code", "body": "[N07] Typos in code", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n07]-typos-in-code", "labels": ["OpenZeppelin"]}, {"title": "In the code, the following typos were found:", "body": "In the code, the following typos were found:", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#in-the-code,-the-following-typos-were-found:", "labels": ["OpenZeppelin"]}, {"title": "On line 11 of ACOToken.sol, the comment should say \u201ccompliant\u201d instead of \u201ccompliance\u201d.", "body": "On line 11 of ACOToken.sol, the comment should say \u201ccompliant\u201d instead of \u201ccompliance\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-11-of-acotoken.sol,-the-comment-should-say-\u201ccompliant\u201d-instead-of-\u201ccompliance\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 156 of ACOToken.sol, the comment should say \u201cprevent\u201d instead of \u201cprevents\u201d.", "body": "On line 156 of ACOToken.sol, the comment should say \u201cprevent\u201d instead of \u201cprevents\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-156-of-acotoken.sol,-the-comment-should-say-\u201cprevent\u201d-instead-of-\u201cprevents\u201d.", "labels": ["OpenZeppelin"]}, {"title": "On line 965 of ACOToken.sol, the function should say \u201cCharacters\u201d instead of \u201cCaracters\u201d. This change should also be made in the function calls on lines 903, 907, and 908.", "body": "On line 965 of ACOToken.sol, the function should say \u201cCharacters\u201d instead of \u201cCaracters\u201d. This change should also be made in the function calls on lines 903, 907, and 908.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-965-of-acotoken.sol,-the-function-should-say-\u201ccharacters\u201d-instead-of-\u201ccaracters\u201d.-this-change-should-also-be-made-in-the-function-calls-on-lines-903,-907,-and-908.", "labels": ["OpenZeppelin"]}, {"title": "On line 147 of ACOFlashExercise.sol, the comment should say \u201cto be called\u201d instead of \u201cto called\u201d.", "body": "On line 147 of ACOFlashExercise.sol, the comment should say \u201cto be called\u201d instead of \u201cto called\u201d.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#on-line-147-of-acoflashexercise.sol,-the-comment-should-say-\u201cto-be-called\u201d-instead-of-\u201cto-called\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #21.", "body": "Update: Fixed in pull request #21.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#21.", "labels": ["OpenZeppelin"]}, {"title": "[N08] IUniswapV2Router01.sol is unused", "body": "[N08] IUniswapV2Router01.sol is unused", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n08]-iuniswapv2router01.sol-is-unused", "labels": ["OpenZeppelin"]}, {"title": "The IUniswapV2Router01 interface is not used within the contracts and can be safely removed.", "body": "The IUniswapV2Router01 interface is not used within the contracts and can be safely removed.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#the-iuniswapv2router01-interface-is-not-used-within-the-contracts-and-can-be-safely-removed.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the file from the repository. If it is intended to be used, consider implementing it or documenting the reason for keeping it.", "body": "Consider removing the file from the repository. If it is intended to be used, consider implementing it or documenting the reason for keeping it.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-removing-the-file-from-the-repository.-if-it-is-intended-to-be-used,-consider-implementing-it-or-documenting-the-reason-for-keeping-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #23. The file has been renamed to IUniswapV2Router02.sol and it has been modified to add a new interface that now is being used.", "body": "Update: Fixed in pull request #23. The file has been renamed to IUniswapV2Router02.sol and it has been modified to add a new interface that now is being used.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#23.-the-file-has-been-renamed-to-iuniswapv2router02.sol-and-it-has-been-modified-to-add-a-new-interface-that-now-is-being-used.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Expiration definition mismatches the actual behaviour", "body": "[N09] Expiration definition mismatches the actual behaviour", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#[n09]-expiration-definition-mismatches-the-actual-behaviour", "labels": ["OpenZeppelin"]}, {"title": "expiryTime passed as input parameter in the", "body": "expiryTime passed as input parameter in the", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#expirytime-passed-as-input-parameter-in-the", "labels": ["OpenZeppelin"]}, {"title": "_notExpired internal function. There,", "body": "_notExpired internal function. There,", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#_notexpired-internal-function.-there,", "labels": ["OpenZeppelin"]}, {"title": "Consider adding the proper comments in the docstrings and in the documentation or providing a better name for such variable in order to clarify its purpose and make easier the task of understanding the code properly.", "body": "Consider adding the proper comments in the docstrings and in the documentation or providing a better name for such variable in order to clarify its purpose and make easier the task of understanding the code properly.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#consider-adding-the-proper-comments-in-the-docstrings-and-in-the-documentation-or-providing-a-better-name-for-such-variable-in-order-to-clarify-its-purpose-and-make-easier-the-task-of-understanding-the-code-properly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #24. _notExpired now returns false when now == expiryTime.", "body": "Update: Fixed in pull request #24. _notExpired now returns false when now == expiryTime.", "html_url": "https://blog.openzeppelin.com/aco-protocol-audit#update:-fixed-in-pull-request-#24.-_notexpired-now-returns-false-when-now-==-expirytime.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Prone-to-error implementation in UniswapConfig contract", "body": "[N01] Prone-to-error implementation in UniswapConfig contract", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n01]-prone-to-error-implementation-in-uniswapconfig-contract", "labels": ["OpenZeppelin"]}, {"title": "The UniswapConfig contract stores important configuration related to each of the 30 tokens the oracle\u2019s view can handle. Instead of tracking all information for the 30 tokens in standard, more appropriate, data structures such as mappings or arrays, the Compound team has decided to store all data in individual state variables. As a result, the UniswapConfig contract has 242 internal state variables.", "body": "The UniswapConfig contract stores important configuration related to each of the 30 tokens the oracle\u2019s view can handle. Instead of tracking all information for the 30 tokens in standard, more appropriate, data structures such as mappings or arrays, the Compound team has decided to store all data in individual state variables. As a result, the UniswapConfig contract has 242 internal state variables.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-uniswapconfig-contract-stores-important-configuration-related-to-each-of-the-30-tokens-the-oracle\u2019s-view-can-handle.-instead-of-tracking-all-information-for-the-30-tokens-in-standard,-more-appropriate,-data-structures-such-as-mappings-or-arrays,-the-compound-team-has-decided-to-store-all-data-in-individual-state-variables.-as-a-result,-the-uniswapconfig-contract-has-242-internal-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "While the current implementation may be more efficient in terms of gas costs, the team has heavily compromised on readability and ease of maintenance, which we consider fundamental factors for the project\u2019s long-term sustainability. This kind of error-prone implementations is discouraged and should only be applied after thorough testing, so as to ensure gas-savings benefits far outweigh the loss in code quality.", "body": "While the current implementation may be more efficient in terms of gas costs, the team has heavily compromised on readability and ease of maintenance, which we consider fundamental factors for the project\u2019s long-term sustainability. This kind of error-prone implementations is discouraged and should only be applied after thorough testing, so as to ensure gas-savings benefits far outweigh the loss in code quality.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#while-the-current-implementation-may-be-more-efficient-in-terms-of-gas-costs,-the-team-has-heavily-compromised-on-readability-and-ease-of-maintenance,-which-we-consider-fundamental-factors-for-the-project\u2019s-long-term-sustainability.-this-kind-of-error-prone-implementations-is-discouraged-and-should-only-be-applied-after-thorough-testing,-so-as-to-ensure-gas-savings-benefits-far-outweigh-the-loss-in-code-quality.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Implicit upcasting of uint112 variable", "body": "[N02] Implicit upcasting of uint112 variable", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n02]-implicit-upcasting-of-uint112-variable", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and code readability, consider explicitly casting the denominator variable from uint112 to uint224 in line 17 of UniswapLib.sol.", "body": "To favor explicitness and code readability, consider explicitly casting the denominator variable from uint112 to uint224 in line 17 of UniswapLib.sol.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-favor-explicitness-and-code-readability,-consider-explicitly-casting-the-denominator-variable-from-uint112-to-uint224-in-line-17-of-uniswaplib.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Code repetition", "body": "[N03] Code repetition", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n03]-code-repetition", "labels": ["OpenZeppelin"]}, {"title": "The source function of the UniswapAnchoredView contract appears to have been copied from the OpenOracleData contract. Similarly, the mul function appears to have been copied from the AnchoredView contract.", "body": "The source function of the UniswapAnchoredView contract appears to have been copied from the OpenOracleData contract. Similarly, the mul function appears to have been copied from the AnchoredView contract.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-source-function-of-the-uniswapanchoredview-contract-appears-to-have-been-copied-from-the-openoracledata-contract.-similarly,-the-mul-function-appears-to-have-been-copied-from-the-anchoredview-contract.", "labels": ["OpenZeppelin"]}, {"title": "To avoid code repetition, favoring reusability and maintenance, consider factoring out the mentioned functions into libraries to ensure they are only defined in one place, and then import them as needed in the contracts.", "body": "To avoid code repetition, favoring reusability and maintenance, consider factoring out the mentioned functions into libraries to ensure they are only defined in one place, and then import them as needed in the contracts.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-avoid-code-repetition,-favoring-reusability-and-maintenance,-consider-factoring-out-the-mentioned-functions-into-libraries-to-ensure-they-are-only-defined-in-one-place,-and-then-import-them-as-needed-in-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Copied code from Uniswap V2 Periphery repository", "body": "[N04] Copied code from Uniswap V2 Periphery repository", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n04]-copied-code-from-uniswap-v2-periphery-repository", "labels": ["OpenZeppelin"]}, {"title": "Uniswap V2 Periphery repository. To benefit from patches and new features in future releases, consider removing this library from the Open Price Feed\u2019s code base and instead import it once the", "body": "Uniswap V2 Periphery repository. To benefit from patches and new features in future releases, consider removing this library from the Open Price Feed\u2019s code base and instead import it once the", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#uniswap-v2-periphery-repository.-to-benefit-from-patches-and-new-features-in-future-releases,-consider-removing-this-library-from-the-open-price-feed\u2019s-code-base-and-instead-import-it-once-the", "labels": ["OpenZeppelin"]}, {"title": "released.", "body": "released.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#released.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Missing units", "body": "[N05] Missing units", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n05]-missing-units", "labels": ["OpenZeppelin"]}, {"title": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the anchorPeriod state variable is measured. Similarly, docstrings of the getUnderlyingPrice function should state the unit of the returned price.", "body": "To avoid errors in future changes to the code base, consider using an inline comment to clearly state in which units the anchorPeriod state variable is measured. Similarly, docstrings of the getUnderlyingPrice function should state the unit of the returned price.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-avoid-errors-in-future-changes-to-the-code-base,-consider-using-an-inline-comment-to-clearly-state-in-which-units-the-anchorperiod-state-variable-is-measured.-similarly,-docstrings-of-the-getunderlyingprice-function-should-state-the-unit-of-the-returned-price.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Redundant boolean check", "body": "[N06] Redundant boolean check", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n06]-redundant-boolean-check", "labels": ["OpenZeppelin"]}, {"title": "Line 160 of UniswapAnchoreView.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "body": "Line 160 of UniswapAnchoreView.sol explicitly compares a boolean value to true. This is a redundant operation because the result will be equivalent to the boolean value itself. Consider removing the redundant comparison.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#line-160-of-uniswapanchoreview.sol-explicitly-compares-a-boolean-value-to-true.-this-is-a-redundant-operation-because-the-result-will-be-equivalent-to-the-boolean-value-itself.-consider-removing-the-redundant-comparison.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Constants not declared explicitly", "body": "[N07] Constants not declared explicitly", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n07]-constants-not-declared-explicitly", "labels": ["OpenZeppelin"]}, {"title": "There are several occurrences of literal values with unexplained meaning:", "body": "There are several occurrences of literal values with unexplained meaning:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#there-are-several-occurrences-of-literal-values-with-unexplained-meaning:", "labels": ["OpenZeppelin"]}, {"title": "In UniswapLib.sol: lines 27 and 112.", "body": "In UniswapLib.sol: lines 27 and 112.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-uniswaplib.sol:-lines-27-and-112.", "labels": ["OpenZeppelin"]}, {"title": "In UniswapAnchoredView.sol: lines 77, 78, 79, 125, 174, 197 and 219.", "body": "In UniswapAnchoredView.sol: lines 77, 78, 79, 125, 174, 197 and 219.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-uniswapanchoredview.sol:-lines-77,-78,-79,-125,-174,-197-and-219.", "labels": ["OpenZeppelin"]}, {"title": "Literal values in the code base without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.", "body": "Literal values in the code base without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#literal-values-in-the-code-base-without-an-explained-meaning-make-the-code-harder-to-read,-understand-and-maintain,-thus-hindering-the-experience-of-developers,-auditors-and-external-contributors-alike.", "labels": ["OpenZeppelin"]}, {"title": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following Solidity\u2019s style guide, constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.", "body": "Developers should define a constant variable for every magic value used (including booleans), giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following Solidity\u2019s style guide, constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#developers-should-define-a-constant-variable-for-every-magic-value-used-(including-booleans),-giving-it-a-clear-and-self-explanatory-name.-additionally,-for-complex-values,-inline-comments-explaining-how-they-were-calculated-or-why-they-were-chosen-are-highly-recommended.-following-solidity\u2019s-style-guide,-constants-should-be-named-in-upper_case_with_underscores-format,-and-specific-public-getters-should-be-defined-to-read-each-one-of-them.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Naming", "body": "[N08] Naming", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n08]-naming", "labels": ["OpenZeppelin"]}, {"title": "In the UniswapAnchoredView contract:", "body": "In the UniswapAnchoredView contract:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-the-uniswapanchoredview-contract:", "labels": ["OpenZeppelin"]}, {"title": "The price function should be renamed to getPrice, getPriceInUsd or similar.", "body": "The price function should be renamed to getPrice, getPriceInUsd or similar.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-price-function-should-be-renamed-to-getprice,-getpriceinusd-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The priceInternal function should be renamed to getPriceInternal, getPrinceInternalInUsd or similar.", "body": "The priceInternal function should be renamed to getPriceInternal, getPrinceInternalInUsd or similar.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-priceinternal-function-should-be-renamed-to-getpriceinternal,-getprinceinternalinusd-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The acc field of the Observation struct should be renamed to make it more self-explanatory.", "body": "The acc field of the Observation struct should be renamed to make it more self-explanatory.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-acc-field-of-the-observation-struct-should-be-renamed-to-make-it-more-self-explanatory.", "labels": ["OpenZeppelin"]}, {"title": "The UniswapWindowUpdate event should be renamed to UniswapWindowUpdated.", "body": "The UniswapWindowUpdate event should be renamed to UniswapWindowUpdated.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-uniswapwindowupdate-event-should-be-renamed-to-uniswapwindowupdated.", "labels": ["OpenZeppelin"]}, {"title": "The AnchorPriceUpdate event should be renamed to AnchorPriceUpdated.", "body": "The AnchorPriceUpdate event should be renamed to AnchorPriceUpdated.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-anchorpriceupdate-event-should-be-renamed-to-anchorpriceupdated.", "labels": ["OpenZeppelin"]}, {"title": "The decoded_message variable should be renamed to decodedMessage.", "body": "The decoded_message variable should be renamed to decodedMessage.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-decoded_message-variable-should-be-renamed-to-decodedmessage.", "labels": ["OpenZeppelin"]}, {"title": "In the UniswapConfig contract:", "body": "In the UniswapConfig contract:", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-the-uniswapconfig-contract:", "labels": ["OpenZeppelin"]}, {"title": "The i parameter in the getToken and get functions should be renamed to index.", "body": "The i parameter in the getToken and get functions should be renamed to index.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-i-parameter-in-the-gettoken-and-get-functions-should-be-renamed-to-index.", "labels": ["OpenZeppelin"]}, {"title": "The get function should be renamed with a more self-explanatory name.", "body": "The get function should be renamed with a more self-explanatory name.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-get-function-should-be-renamed-with-a-more-self-explanatory-name.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Inconsistent use of uint and uint256 types", "body": "[N09] Inconsistent use of uint and uint256 types", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n09]-inconsistent-use-of-uint-and-uint256-types", "labels": ["OpenZeppelin"]}, {"title": "Throughout the UniswapConfig contract, the uint and uint256 types are used interchangeably to declare 256-bit unsigned integers. To favor consistency, consider following the same convention on all these declarations.", "body": "Throughout the UniswapConfig contract, the uint and uint256 types are used interchangeably to declare 256-bit unsigned integers. To favor consistency, consider following the same convention on all these declarations.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#throughout-the-uniswapconfig-contract,-the-uint-and-uint256-types-are-used-interchangeably-to-declare-256-bit-unsigned-integers.-to-favor-consistency,-consider-following-the-same-convention-on-all-these-declarations.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Typographical errors", "body": "[N10] Typographical errors", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n10]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In line 193 of UniswapAnchoredView.sol, \u201cunsiwap\u201d should say \u201cUniswap\u201d.", "body": "In line 193 of UniswapAnchoredView.sol, \u201cunsiwap\u201d should say \u201cUniswap\u201d.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#in-line-193-of-uniswapanchoredview.sol,-\u201cunsiwap\u201d-should-say-\u201cuniswap\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Lack of explicit visibility in state variables", "body": "[N11] Lack of explicit visibility in state variables", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n11]-lack-of-explicit-visibility-in-state-variables", "labels": ["OpenZeppelin"]}, {"title": "The constant state variables ethHash and rotateHash of the UniswapAnchoredView contract are implicitly using the default visibility.", "body": "The constant state variables ethHash and rotateHash of the UniswapAnchoredView contract are implicitly using the default visibility.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-constant-state-variables-ethhash-and-rotatehash-of-the-uniswapanchoredview-contract-are-implicitly-using-the-default-visibility.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Unnecessary public visibility in functions", "body": "[N12] Unnecessary public visibility in functions", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#[n12]-unnecessary-public-visibility-in-functions", "labels": ["OpenZeppelin"]}, {"title": "The price and getUnderlyingPrice functions of the UniswapAnchoredViewContract are defined as public but are not being accessed from within this contract. Consider changing their visibility to external.", "body": "The price and getUnderlyingPrice functions of the UniswapAnchoredViewContract are defined as public but are not being accessed from within this contract. Consider changing their visibility to external.", "html_url": "https://blog.openzeppelin.com/compound-open-price-feed-uniswap-integration-audit#the-price-and-getunderlyingprice-functions-of-the-uniswapanchoredviewcontract-are-defined-as-public-but-are-not-being-accessed-from-within-this-contract.-consider-changing-their-visibility-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N01] WhitelistedRole and ERC20Mintable removed from OpenZeppelin Contracts v3.0.0", "body": "[N01] WhitelistedRole and ERC20Mintable removed from OpenZeppelin Contracts v3.0.0", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n01]-whitelistedrole-and-erc20mintable-removed-from-openzeppelin-contracts-v3.0.0", "labels": ["OpenZeppelin"]}, {"title": "The codebase utilizes WhitelistedRole.sol from OpenZeppelin Contracts. For example, it is imported here in GlobalConfig.sol. This contract was supported up to OpenZeppelin Contracts version 2.5.0, but beginning with version 3.0.0, it has been replaced with AccessControl.sol. Similarly, ERC20Mintable.sol, which is imported into the codebase here, no longer exists in OpenZeppelin Contracts v3.0.0.", "body": "The codebase utilizes WhitelistedRole.sol from OpenZeppelin Contracts. For example, it is imported here in GlobalConfig.sol. This contract was supported up to OpenZeppelin Contracts version 2.5.0, but beginning with version 3.0.0, it has been replaced with AccessControl.sol. Similarly, ERC20Mintable.sol, which is imported into the codebase here, no longer exists in OpenZeppelin Contracts v3.0.0.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-codebase-utilizes-whitelistedrole.sol-from-openzeppelin-contracts.-for-example,-it-is-imported-here-in-globalconfig.sol.-this-contract-was-supported-up-to-openzeppelin-contracts-version-2.5.0,-but-beginning-with-version-3.0.0,-it-has-been-replaced-with-accesscontrol.sol.-similarly,-erc20mintable.sol,-which-is-imported-into-the-codebase-here,-no-longer-exists-in-openzeppelin-contracts-v3.0.0.", "labels": ["OpenZeppelin"]}, {"title": "Although the team maintaining OpenZeppelin Contracts will continue to provide support for security issues, new functionality will no longer be added to the WhitelistedRole nor the ERC20Mintable contracts. AccessControl.sol was designed with consideration for common use cases, security, and complex systems. To keep up with constantly-improving OpenZeppelin Contracts and future Solidity developments, consider updating the codebase to utilize the latest version of OpenZeppelin Contracts.", "body": "Although the team maintaining OpenZeppelin Contracts will continue to provide support for security issues, new functionality will no longer be added to the WhitelistedRole nor the ERC20Mintable contracts. AccessControl.sol was designed with consideration for common use cases, security, and complex systems. To keep up with constantly-improving OpenZeppelin Contracts and future Solidity developments, consider updating the codebase to utilize the latest version of OpenZeppelin Contracts.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#although-the-team-maintaining-openzeppelin-contracts-will-continue-to-provide-support-for-security-issues,-new-functionality-will-no-longer-be-added-to-the-whitelistedrole-nor-the-erc20mintable-contracts.-accesscontrol.sol-was-designed-with-consideration-for-common-use-cases,-security,-and-complex-systems.-to-keep-up-with-constantly-improving-openzeppelin-contracts-and-future-solidity-developments,-consider-updating-the-codebase-to-utilize-the-latest-version-of-openzeppelin-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged by the Monte Carlo team.", "body": "The Order structs data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.  [N04] Unused OrderSignature struct  The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.  Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.  [N05] Unused import statements  Consider removing the following unused imports:  LibOrder in LibTypes.sol  LibMathUnsigned in ChainlinkAdapter.sol  LibMathUnsigned in InversedChainlinkAdapter.sol  LibOrder in AMM.sol  IPriceFeeder and IGlobalConfig in Perpetual.sol  IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.  LibOrder in Perpetual.sol, once the unnecessary association is removed.  LibMathSigned and LibMathUnsigned in PerpetualProxy.sol  ERC20 in ShareToken.sol  ERC20Burnable in ShareToken.sol  The following imports are only used for their transitive imports:  LibOrder in LibTypes.sol  Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.  [N06] Unused constant  In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.  Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.  [N07] Unused return parameters  In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.  Consider removing it from the definition to reflect the actual behavior of the function.  Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.  [N08] Unused OrderStatus enum  Please consider removing the unused enum OrderStatus declared in Exchange.sol  Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.  [N09] Uninformative error messages  Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.  within AMM.sol:  on line 156, consider using the message amount must be divisible by lotSize  on line 183, consider using the message amount must be divisible by tradingLotSize  on line 225, consider using the message amount must be divisible by tradingLotSize  on line 259, consider using the message amount must be divisible by lotSize  on line 287, consider using the message shareBalance too low  on line 622, consider using the message time steps (n) must be positive  within Brokerage.sol:  on line 25, consider using the message invalid newBroker  within Collateral.sol:  on line 123, consider using the message negative balance  within Exchange.sol:  on line 63, consider using the message amounts must be divisible by tradingLotSize  on line 74, consider using the message taker initial margin unsafe  on line 103, consider using the message maker initial margin unsafe  on line 119, consider using the message amount must be divisible by tradingLotSize  on line 206, consider using the message available margin too low for fee  within LibMath.sol:  on line 99, consider using the message cannot convert negative ints  on line 294, consider using the message cannot convert uints greater than _UINT256_MAX  within Perpetual.sol:  on line 53, consider using the message fallback function disabled  on line 69, consider using the message cannot deposit to 0 address  on line 157, consider using the message cannot withdraw from 0 address  on line 168, consider using the message withdrawer available margin negative  on line 194, consider using the message no ether sent  on line 271, consider using the message maxAmount must be divisible by lotSize  on line 283, consider using the message liquidator available margin negative  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.  [N10] Inconsistent use of return variables  There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here th", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged-by-the-monte-carlo-team.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Lack of explicit visibility", "body": "[N02] Lack of explicit visibility", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n02]-lack-of-explicit-visibility", "labels": ["OpenZeppelin"]}, {"title": "The perpetual state variable in the PerpetualProxy contract implicitly uses the default visibility.Moreover the IPerpetualProxy interface declares a perpetual function that matches the one that is silently implemented in PerpetualProxy as the automatically generated getter.", "body": "The perpetual state variable in the PerpetualProxy contract implicitly uses the default visibility.Moreover the IPerpetualProxy interface declares a perpetual function that matches the one that is silently implemented in PerpetualProxy as the automatically generated getter.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-perpetual-state-variable-in-the-perpetualproxy-contract-implicitly-uses-the-default-visibility.moreover-the-iperpetualproxy-interface-declares-a-perpetual-function-that-matches-the-one-that-is-silently-implemented-in-perpetualproxy-as-the-automatically-generated-getter.", "labels": ["OpenZeppelin"]}, {"title": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "body": "To favor readability, consider explicitly declaring the visibility of all state variables and constants.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-favor-readability,-consider-explicitly-declaring-the-visibility-of-all-state-variables-and-constants.", "labels": ["OpenZeppelin"]}, {"title": "Update: This is not an issue anymore since the perpetual state variable has been removed along with the IPerpetualProxy contract.", "body": "Update: This is not an issue anymore since the perpetual state variable has been removed along with the IPerpetualProxy contract.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-this-is-not-an-issue-anymore-since-the-perpetual-state-variable-has-been-removed-along-with-the-iperpetualproxy-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Extract Order parameters", "body": "[N03] Extract Order parameters", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n03]-extract-order-parameters", "labels": ["OpenZeppelin"]}, {"title": "The Order struct contains a data field, which is a combination of eleven individual fields. This necessitates custom getter functions to extract the individual components. To favor simplicity and readability, consider using a data type with named variables to address the individual fields.", "body": "The Order struct contains a data field, which is a combination of eleven individual fields. This necessitates custom getter functions to extract the individual components. To favor simplicity and readability, consider using a data type with named variables to address the individual fields.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-order-struct-contains-a-data-field,-which-is-a-combination-of-eleven-individual-fields.-this-necessitates-custom-getter-functions-to-extract-the-individual-components.-to-favor-simplicity-and-readability,-consider-using-a-data-type-with-named-variables-to-address-the-individual-fields.", "labels": ["OpenZeppelin"]}, {"title": "It should be noted that the data type can be densely packed, so the underlying storage layout would not be affected. Furthermore, the object could be cast to the existing Order struct before generating the EIP712 hash, so compliance with the standard wouldn\u2019t require any additional complexity to handle the extra fields.", "body": "It should be noted that the data type can be densely packed, so the underlying storage layout would not be affected. Furthermore, the object could be cast to the existing Order struct before generating the EIP712 hash, so compliance with the standard wouldn\u2019t require any additional complexity to handle the extra fields.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#it-should-be-noted-that-the-data-type-can-be-densely-packed,-so-the-underlying-storage-layout-would-not-be-affected.-furthermore,-the-object-could-be-cast-to-the-existing-order-struct-before-generating-the-eip712-hash,-so-compliance-with-the-standard-wouldn\u2019t-require-any-additional-complexity-to-handle-the-extra-fields.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged by the Monte Carlo team. The Order struct\u2019s data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.", "body": "Update: Acknowledged by the Monte Carlo team. The Order struct\u2019s data field remains unchanged, it is designed to make the Order data structure compatible with old off-chain infrastructure.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged-by-the-monte-carlo-team.-the-order-struct\u2019s-data-field-remains-unchanged,-it-is-designed-to-make-the-order-data-structure-compatible-with-old-off-chain-infrastructure.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Unused OrderSignature struct", "body": "[N04] Unused OrderSignature struct", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n04]-unused-ordersignature-struct", "labels": ["OpenZeppelin"]}, {"title": "The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.", "body": "The LibEIP712 library declares an unused OrderSignature struct that is a duplicate of the one declared in the LibSignature library. To avoid confusion and inconsistencies, consider removing it.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-libeip712-library-declares-an-unused-ordersignature-struct-that-is-a-duplicate-of-the-one-declared-in-the-libsignature-library.-to-avoid-confusion-and-inconsistencies,-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.", "body": "Update: Fixed. The unused OrderSignature struct has been removed from LibEIP712 library.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-ordersignature-struct-has-been-removed-from-libeip712-library.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unused import statements", "body": "[N05] Unused import statements", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n05]-unused-import-statements", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the following unused imports:", "body": "Consider removing the following unused imports:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-removing-the-following-unused-imports:", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in LibTypes.sol", "body": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.  [N06] Unused constant  In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.  Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.  [N07] Unused return parameters  In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.  Consider removing it from the definition to reflect the actual behavior of the function.  Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.  [N08] Unused OrderStatus enum  Please consider removing the unused enum OrderStatus declared in Exchange.sol  Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.  [N09] Uninformative error messages  Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.  within AMM.sol:  on line 156, consider using the message amount must be divisible by lotSize  on line 183, consider using the message amount must be divisible by tradingLotSize  on line 225, consider using the message amount must be divisible by tradingLotSize  on line 259, consider using the message amount must be divisible by lotSize  on line 287, consider using the message shareBalance too low  on line 622, consider using the message time steps (n) must be positive  within Brokerage.sol:  on line 25, consider using the message invalid newBroker  within Collateral.sol:  on line 123, consider using the message negative balance  within Exchange.sol:  on line 63, consider using the message amounts must be divisible by tradingLotSize  on line 74, consider using the message taker initial margin unsafe  on line 103, consider using the message maker initial margin unsafe  on line 119, consider using the message amount must be divisible by tradingLotSize  on line 206, consider using the message available margin too low for fee  within LibMath.sol:  on line 99, consider using the message cannot convert negative ints  on line 294, consider using the message cannot convert uints greater than _UINT256_MAX  within Perpetual.sol:  on line 53, consider using the message fallback function disabled  on line 69, consider using the message cannot deposit to 0 address  on line 157, consider using the message cannot withdraw from 0 address  on line 168, consider using the message withdrawer available margin negative  on line 194, consider using the message no ether sent  on line 271, consider using the message maxAmount must be divisible by lotSize  on line 283, consider using the message liquidator available margin negative  Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the systems quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.  Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.  [N10] Inconsistent use of return variables  There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.  [N11] Liquidation price is not validated  The calculateLiquidateAmount function doesnt confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the fail early and loudly principle, consider explicitly requiring the price to be positive.  Update: Fixed in PR#5.  [N12] Redundant condition in require  On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).  It can be shown that the conditions _collateral !=", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-libtypes.sol", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned in ChainlinkAdapter.sol", "body": "LibMathUnsigned in ChainlinkAdapter.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-in-chainlinkadapter.sol", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned in InversedChainlinkAdapter.sol", "body": "LibMathUnsigned in InversedChainlinkAdapter.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-in-inversedchainlinkadapter.sol", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in AMM.sol", "body": "LibOrder in AMM.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-amm.sol", "labels": ["OpenZeppelin"]}, {"title": "IPriceFeeder and IGlobalConfig in Perpetual.sol", "body": "IPriceFeeder and IGlobalConfig in Perpetual.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ipricefeeder-and-iglobalconfig-in-perpetual.sol", "labels": ["OpenZeppelin"]}, {"title": "IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.", "body": "IERC20 and SafeERC20 in Perpetual.sol, once the unnecessary association is removed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ierc20-and-safeerc20-in-perpetual.sol,-once-the-unnecessary-association-is-removed.", "labels": ["OpenZeppelin"]}, {"title": "LibOrder in Perpetual.sol, once the unnecessary association is removed.", "body": "LibOrder in Perpetual.sol, once the unnecessary association is removed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder-in-perpetual.sol,-once-the-unnecessary-association-is-removed.", "labels": ["OpenZeppelin"]}, {"title": "LibMathSigned and LibMathUnsigned in PerpetualProxy.sol", "body": "LibMathSigned and LibMathUnsigned in PerpetualProxy.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathsigned-and-libmathunsigned-in-perpetualproxy.sol", "labels": ["OpenZeppelin"]}, {"title": "ERC20 in ShareToken.sol", "body": "ERC20 in ShareToken.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#erc20-in-sharetoken.sol", "labels": ["OpenZeppelin"]}, {"title": "ERC20Burnable in ShareToken.sol", "body": "ERC20Burnable in ShareToken.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#erc20burnable-in-sharetoken.sol", "labels": ["OpenZeppelin"]}, {"title": "The following imports are only used for their transitive imports:", "body": "The following imports are only used for their transitive imports:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-following-imports-are-only-used-for-their-transitive-imports:", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.", "body": "Update: Partially fixed. All of the unused imports mentioned above are removed except LibOrder which is still imported in Perpetual.sol and is used in this unnecessary association.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-all-of-the-unused-imports-mentioned-above-are-removed-except-liborder-which-is-still-imported-in-perpetual.sol-and-is-used-in-this-unnecessary-association.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Unused constant", "body": "[N06] Unused constant", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n06]-unused-constant", "labels": ["OpenZeppelin"]}, {"title": "In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.", "body": "In the AMM.sol contract, the constant ONE_WAD_U is declared but never used. Please consider removing it.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-amm.sol-contract,-the-constant-one_wad_u-is-declared-but-never-used.-please-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.", "body": "Update: Fixed. The unused constant ONE_WAD_U has been removed from the AMM.sol contract.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-constant-one_wad_u-has-been-removed-from-the-amm.sol-contract.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Unused return parameters", "body": "[N07] Unused return parameters", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n07]-unused-return-parameters", "labels": ["OpenZeppelin"]}, {"title": "In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.", "body": "In the Perpetual contract, the liquidateFrom function is declared as returning two uint256 unnamed variables that are never returned or explicitly set inside the function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-perpetual-contract,-the-liquidatefrom-function-is-declared-as-returning-two-uint256-unnamed-variables-that-are-never-returned-or-explicitly-set-inside-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing it from the definition to reflect the actual behavior of the function.", "body": "Consider removing it from the definition to reflect the actual behavior of the function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-removing-it-from-the-definition-to-reflect-the-actual-behavior-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.", "body": "Update: Fixed. The function liquidateFrom has been refactored to the liquidate function which now returns two uint256 variables liquidationPrice and liquidationAmount.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-function-liquidatefrom-has-been-refactored-to-the-liquidate-function-which-now-returns-two-uint256-variables-liquidationprice-and-liquidationamount.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused OrderStatus enum", "body": "[N08] Unused OrderStatus enum", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n08]-unused-orderstatus-enum", "labels": ["OpenZeppelin"]}, {"title": "Please consider removing the unused enum OrderStatus declared in Exchange.sol", "body": "Please consider removing the unused enum OrderStatus declared in Exchange.sol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#please-consider-removing-the-unused-enum-orderstatus-declared-in-exchange.sol", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.", "body": "Update: Fixed. The unused enum OrderStatus has been removed from Exchange.sol.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-unused-enum-orderstatus-has-been-removed-from-exchange.sol.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Uninformative error messages", "body": "[N09] Uninformative error messages", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n09]-uninformative-error-messages", "labels": ["OpenZeppelin"]}, {"title": "Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.", "body": "Several error messages in require statements were found to be too generic, not accurately notifying users of the actual failing condition causing the transaction to revert. Within the following files, we identify spots where error messages could be changed for greater clarity.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#several-error-messages-in-require-statements-were-found-to-be-too-generic,-not-accurately-notifying-users-of-the-actual-failing-condition-causing-the-transaction-to-revert.-within-the-following-files,-we-identify-spots-where-error-messages-could-be-changed-for-greater-clarity.", "labels": ["OpenZeppelin"]}, {"title": "within AMM.sol:", "body": "within AMM.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-amm.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 156, consider using the message \u201camount must be divisible by lotSize\u201d", "body": "on line 156, consider using the message \u201camount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-156,-consider-using-the-message-\u201camount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 183, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 183, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-183,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 225, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 225, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-225,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 259, consider using the message \u201camount must be divisible by lotSize\u201d", "body": "on line 259, consider using the message \u201camount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-259,-consider-using-the-message-\u201camount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 287, consider using the message \u201cshareBalance too low\u201d", "body": "on line 287, consider using the message \u201cshareBalance too low\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-287,-consider-using-the-message-\u201csharebalance-too-low\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 622, consider using the message \u201ctime steps (n) must be positive\u201d", "body": "on line 622, consider using the message \u201ctime steps (n) must be positive\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-622,-consider-using-the-message-\u201ctime-steps-(n)-must-be-positive\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Brokerage.sol:", "body": "within Brokerage.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-brokerage.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 25, consider using the message \u201cinvalid newBroker\u201d", "body": "on line 25, consider using the message \u201cinvalid newBroker\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-25,-consider-using-the-message-\u201cinvalid-newbroker\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Collateral.sol:", "body": "within Collateral.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-collateral.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 123, consider using the message \u201cnegative balance\u201d", "body": "on line 123, consider using the message \u201cnegative balance\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-123,-consider-using-the-message-\u201cnegative-balance\u201d", "labels": ["OpenZeppelin"]}, {"title": "within Exchange.sol:", "body": "within Exchange.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-exchange.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 63, consider using the message \u201camounts must be divisible by tradingLotSize\u201d", "body": "on line 63, consider using the message \u201camounts must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-63,-consider-using-the-message-\u201camounts-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 74, consider using the message \u201ctaker initial margin unsafe\u201d", "body": "on line 74, consider using the message \u201ctaker initial margin unsafe\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-74,-consider-using-the-message-\u201ctaker-initial-margin-unsafe\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 103, consider using the message \u201cmaker initial margin unsafe\u201d", "body": "on line 103, consider using the message \u201cmaker initial margin unsafe\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-103,-consider-using-the-message-\u201cmaker-initial-margin-unsafe\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 119, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "body": "on line 119, consider using the message \u201camount must be divisible by tradingLotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-119,-consider-using-the-message-\u201camount-must-be-divisible-by-tradinglotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 206, consider using the message \u201cavailable margin too low for fee\u201d", "body": "on line 206, consider using the message \u201cavailable margin too low for fee\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-206,-consider-using-the-message-\u201cavailable-margin-too-low-for-fee\u201d", "labels": ["OpenZeppelin"]}, {"title": "within LibMath.sol:", "body": "within LibMath.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-libmath.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 99, consider using the message \u201ccannot convert negative ints\u201d", "body": "on line 99, consider using the message \u201ccannot convert negative ints\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-99,-consider-using-the-message-\u201ccannot-convert-negative-ints\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 294, consider using the message \u201ccannot convert uints greater than _UINT256_MAX\u201c", "body": "on line 294, consider using the message \u201ccannot convert uints greater than _UINT256_MAX\u201c", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-294,-consider-using-the-message-\u201ccannot-convert-uints-greater-than-_uint256_max\u201c", "labels": ["OpenZeppelin"]}, {"title": "within Perpetual.sol:", "body": "within Perpetual.sol:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#within-perpetual.sol:", "labels": ["OpenZeppelin"]}, {"title": "on line 53, consider using the message \u201cfallback function disabled\u201d", "body": "on line 53, consider using the message \u201cfallback function disabled\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-53,-consider-using-the-message-\u201cfallback-function-disabled\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 69, consider using the message \u201ccannot deposit to 0 address\u201d", "body": "on line 69, consider using the message \u201ccannot deposit to 0 address\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-69,-consider-using-the-message-\u201ccannot-deposit-to-0-address\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 157, consider using the message \u201ccannot withdraw from 0 address\u201d", "body": "on line 157, consider using the message \u201ccannot withdraw from 0 address\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-157,-consider-using-the-message-\u201ccannot-withdraw-from-0-address\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 168, consider using the message \u201cwithdrawer available margin negative\u201d", "body": "on line 168, consider using the message \u201cwithdrawer available margin negative\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-168,-consider-using-the-message-\u201cwithdrawer-available-margin-negative\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 194, consider using the message \u201cno ether sent\u201d", "body": "on line 194, consider using the message \u201cno ether sent\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-194,-consider-using-the-message-\u201cno-ether-sent\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 271, consider using the message \u201cmaxAmount must be divisible by lotSize\u201d", "body": "on line 271, consider using the message \u201cmaxAmount must be divisible by lotSize\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-271,-consider-using-the-message-\u201cmaxamount-must-be-divisible-by-lotsize\u201d", "labels": ["OpenZeppelin"]}, {"title": "on line 283, consider using the message \u201cliquidator available margin negative\u201d", "body": "on line 283, consider using the message \u201cliquidator available margin negative\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-283,-consider-using-the-message-\u201cliquidator-available-margin-negative\u201d", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issues-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.", "body": "Update: Partially fixed. Most of the listed error messages are more descriptive or no longer necessary.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-most-of-the-listed-error-messages-are-more-descriptive-or-no-longer-necessary.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Inconsistent use of return variables", "body": "[N10] Inconsistent use of return variables", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n10]-inconsistent-use-of-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "body": "There is an inconsistent use of named return variables across the entire code base. For example, here the returned variables are named but not assigned to, here they are unnamed and here they are never returned.Consider removing all named return variables, explicitly declaring them as local variables where needed, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-code-base.-for-example,-here-the-returned-variables-are-named-but-not-assigned-to,-here-they-are-unnamed-and-here-they-are-never-returned.consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables-where-needed,-and-adding-the-necessary-return-statements-where-appropriate.-this-should-improve-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.", "body": "Update: Partially fixed. While the mentioned examples have been rectified, there are still inconsistencies in the codebase. For example, the wfrac and wpowi functions in LibMathSigned still use named return variables.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-while-the-mentioned-examples-have-been-rectified,-there-are-still-inconsistencies-in-the-codebase.-for-example,-the-wfrac-and-wpowi-functions-in-libmathsigned-still-use-named-return-variables.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Liquidation price is not validated", "body": "[N11] Liquidation price is not validated", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n11]-liquidation-price-is-not-validated", "labels": ["OpenZeppelin"]}, {"title": "The calculateLiquidateAmount function doesn\u2019t confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the \u201cfail early and loudly principle\u201d, consider explicitly requiring the price to be positive.", "body": "The calculateLiquidateAmount function doesn\u2019t confirm that liquidationPrice is not zero. In this scenario, the function would revert when performing a division by zero. Following the \u201cfail early and loudly principle\u201d, consider explicitly requiring the price to be positive.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-calculateliquidateamount-function-doesn\u2019t-confirm-that-liquidationprice-is-not-zero.-in-this-scenario,-the-function-would-revert-when-performing-a-division-by-zero.-following-the-\u201cfail-early-and-loudly-principle\u201d,-consider-explicitly-requiring-the-price-to-be-positive.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#5.", "body": "Update: Fixed in PR#5.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed-in-pr#5.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Redundant condition in require", "body": "[N12] Redundant condition in require", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n12]-redundant-condition-in-require", "labels": ["OpenZeppelin"]}, {"title": "On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).", "body": "On line 30 of Collateral.sol, a require is done which checks the conditions: _collateral != address(0x0) || (_collateral == address(0x0) &amp;&amp; decimals == 18).", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#on-line-30-of-collateral.sol,-a-require-is-done-which-checks-the-conditions:-_collateral-!=-address(0x0)-||-(_collateral-==-address(0x0)-&amp;&amp;-decimals-==-18).", "labels": ["OpenZeppelin"]}, {"title": "It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.", "body": "It can be shown that the conditions _collateral != address(0x0) || decimals == 18 will produce the exact same result.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#it-can-be-shown-that-the-conditions-_collateral-!=-address(0x0)-||-decimals-==-18-will-produce-the-exact-same-result.", "labels": ["OpenZeppelin"]}, {"title": "Consider simplifying the conditional statement to make the code smaller and more readable.", "body": "Consider simplifying the conditional statement to make the code smaller and more readable.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-simplifying-the-conditional-statement-to-make-the-code-smaller-and-more-readable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The require statement has been updated.", "body": "Update: Fixed. The require statement has been updated.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-require-statement-has-been-updated.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Misplaced state variable definitions", "body": "[N13] Misplaced state variable definitions", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n13]-misplaced-state-variable-definitions", "labels": ["OpenZeppelin"]}, {"title": "In the LibMath library there are some state variables declared in between two functions.", "body": "In the LibMath library there are some state variables declared in between two functions.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-libmath-library-there-are-some-state-variables-declared-in-between-two-functions.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.", "body": "To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-readability-and-follow-the-solidity-style-guide,-consider-positioning-the-state-variables-before-the-constructor.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The state variables declaration is positioned as per the suggestion.", "body": "Update: Fixed. The state variables declaration is positioned as per the suggestion.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-state-variables-declaration-is-positioned-as-per-the-suggestion.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Inconsistency between \u201cemergency\u201d and \u201csettling\u201d", "body": "[N14] Inconsistency between \u201cemergency\u201d and \u201csettling\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n14]-inconsistency-between-\u201cemergency\u201d-and-\u201csettling\u201d", "labels": ["OpenZeppelin"]}, {"title": "In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.", "body": "In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-contractreader-contract-the-isemergency-parameter-of-the-perpetualstorage-struct-is-true-only-if-the-perpetual-contract-is-in-settling-mode.", "labels": ["OpenZeppelin"]}, {"title": "Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.", "body": "Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#moreover-the-documentation-clearly-states-that-when-settling,-the-system-enters-into-an-emergency-status-where-trades-and-withdrawals-are-disabled-until-the-settlement-ends.", "labels": ["OpenZeppelin"]}, {"title": "Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.", "body": "Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-unifying-the-variable-names-in-the-code-and-documentation-to-improve-the-readability-of-the-code-and-avoid-confusion.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as \u201csettlement\u201d and the final state is SETTLED.", "body": "Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as \u201csettlement\u201d and the final state is SETTLED.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-all-occurrences-of-settling-have-been-renamed-to-emergency-in-the-code-base.-note-that-the-process-is-still-described-as-\u201csettlement\u201d-and-the-final-state-is-settled.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Inconsistency in defining 10**18", "body": "[N15] Inconsistency in defining 10**18", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n15]-inconsistency-in-defining-10**18", "labels": ["OpenZeppelin"]}, {"title": "LibMath library the", "body": "re are some state variables declared in between two functions.  To improve readability and follow the Solidity style guide, consider positioning the state variables before the constructor.  Update: Fixed. The state variables declaration is positioned as per the suggestion.  [N14] Inconsistency between emergency and settling  In the ContractReader contract the isEmergency parameter of the PerpetualStorage struct is true only if the perpetual contract is in SETTLING mode.  Moreover the documentation clearly states that when settling, the system enters into an Emergency status where trades and withdrawals are disabled until the settlement ends.  Consider unifying the variable names in the code and documentation to improve the readability of the code and avoid confusion.  Update: Fixed. All occurrences of SETTLING have been renamed to EMERGENCY in the code base. Note that the process is still described as settlement and the final state is SETTLED.  [N15] Inconsistency in defining 10**18", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmath-library-the", "labels": ["OpenZeppelin"]}, {"title": "LibMathSigned and", "body": "LibMathUnsigned. However,  LibOrder, which  makes use of LibMath, declares the variable  ONE as 1e18. Also,  AmmGovernance uses the hardcoded  Other occurrences of this value in the code are:  constant ONE_WAD_U of AMM  constant ONE_WAD_S of AMM  The PerpetualGovernance initial margin rate restriction  constant ONE of InversedChainlinkAdapter  Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.  Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.  [N16] Inconsistency in defining other large constants  Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned  Other occurrences of large decimals in the code are :  chainlinkDecimalsAdapter of InversedChainlinkAdapter  longer_fixed_1 of LibMathSigned  the LibMathSigned natural log restriction  FEE_BASE_RATE of LibOrder  To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.  Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used    LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes appli", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathsigned-and", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned. However,", "body": "LibMathUnsigned. However,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned.-however,", "labels": ["OpenZeppelin"]}, {"title": "LibOrder, which", "body": "LibOrder, which", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#liborder,-which", "labels": ["OpenZeppelin"]}, {"title": "makes use of LibMath, declares the variable", "body": "makes use of LibMath, declares the variable", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#makes-use-of-libmath,-declares-the-variable", "labels": ["OpenZeppelin"]}, {"title": "ONE as 1e18. Also,", "body": "ONE as 1e18. Also,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#one-as-1e18.-also,", "labels": ["OpenZeppelin"]}, {"title": "AmmGovernance uses the hardcoded", "body": "AmmGovernance uses the hardcoded", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#ammgovernance-uses-the-hardcoded", "labels": ["OpenZeppelin"]}, {"title": "Other occurrences of this value in the code are:", "body": "Other occurrences of this value in the code are:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#other-occurrences-of-this-value-in-the-code-are:", "labels": ["OpenZeppelin"]}, {"title": "constant ONE_WAD_U of AMM", "body": "constant ONE_WAD_U of AMM", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one_wad_u-of-amm", "labels": ["OpenZeppelin"]}, {"title": "constant ONE_WAD_S of AMM", "body": "constant ONE_WAD_S of AMM", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one_wad_s-of-amm", "labels": ["OpenZeppelin"]}, {"title": "The PerpetualGovernance initial margin rate restriction", "body": "The PerpetualGovernance initial margin rate restriction", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-perpetualgovernance-initial-margin-rate-restriction", "labels": ["OpenZeppelin"]}, {"title": "constant ONE of InversedChainlinkAdapter", "body": "constant ONE of InversedChainlinkAdapter", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#constant-one-of-inversedchainlinkadapter", "labels": ["OpenZeppelin"]}, {"title": "Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.", "body": "Given the role 10**18 has inside the system, consider defining this variable only once (or twice, if a signed and unsigned version are desired) and refactor any use to use this definition.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#given-the-role-10**18-has-inside-the-system,-consider-defining-this-variable-only-once-(or-twice,-if-a-signed-and-unsigned-version-are-desired)-and-refactor-any-use-to-use-this-definition.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.", "body": "Update: Partially fixed. ChainlinkAdapter still uses a new constant ONE instead of the WAD() function of LibMathUnsigned library. AmmGovernance and PerpetualGovernance still use 10**18 directly.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-chainlinkadapter-still-uses-a-new-constant-one-instead-of-the-wad()-function-of-libmathunsigned-library.-ammgovernance-and-perpetualgovernance-still-use-10**18-directly.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Inconsistency in defining \u2018other\u2019 large constants", "body": "[N16] Inconsistency in defining \u2018other\u2019 large constants", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n16]-inconsistency-in-defining-\u2018other\u2019-large-constants", "labels": ["OpenZeppelin"]}, {"title": "Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned", "body": "Apart from 10**18, there are several large constants defined inconsistently throughout the codebase.For example, 10**x syntax is used in chainlinkDecimalsAdapter of ChainlinkAdapter whereas raw decimal syntax is used in fixed_1 of LibMathSigned", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#apart-from-10**18,-there-are-several-large-constants-defined-inconsistently-throughout-the-codebase.for-example,-10**x-syntax-is-used-in-chainlinkdecimalsadapter-of-chainlinkadapter-whereas-raw-decimal-syntax-is-used-in-fixed_1-of-libmathsigned", "labels": ["OpenZeppelin"]}, {"title": "Other occurrences of large decimals in the code are :", "body": "Other occurrences of large decimals in the code are :", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#other-occurrences-of-large-decimals-in-the-code-are-:", "labels": ["OpenZeppelin"]}, {"title": "chainlinkDecimalsAdapter of InversedChainlinkAdapter", "body": "chainlinkDecimalsAdapter of InversedChainlinkAdapter", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#chainlinkdecimalsadapter-of-inversedchainlinkadapter", "labels": ["OpenZeppelin"]}, {"title": "longer_fixed_1 of LibMathSigned", "body": "longer_fixed_1 of LibMathSigned", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#longer_fixed_1-of-libmathsigned", "labels": ["OpenZeppelin"]}, {"title": "the LibMathSigned natural log restriction", "body": ".  [N17] Inconsistent style  The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesnt.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed.  [N18] Lot size checks are generalizeable  line 63 of Exchange.sol, while another exists on  line 119. Similar checks involving  here and  here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-libmathsigned-natural-log-restriction", "labels": ["OpenZeppelin"]}, {"title": "FEE_BASE_RATE of LibOrder", "body": "FEE_BASE_RATE of LibOrder", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#fee_base_rate-of-liborder", "labels": ["OpenZeppelin"]}, {"title": "To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.", "body": "To improve the readability of the code, please consider using 10**x or 1ex syntax for all the large constants that can be expressed in this form.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-the-readability-of-the-code,-please-consider-using-10**x-or-1ex-syntax-for-all-the-large-constants-that-can-be-expressed-in-this-form.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.", "body": "Update: Partially fixed. All of the examples mentioned above have been fixed except the LibMathSigned natural log restriction.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-all-of-the-examples-mentioned-above-have-been-fixed-except-the-libmathsigned-natural-log-restriction.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Inconsistent style", "body": "[N17] Inconsistent style", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n17]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesn\u2019t.", "body": "The code base does not use a consistent style. For example, in the Collateral contract, the private function _withdraw has an underscore _ prepended while the private function withdrawFromAccount from the Perpetual contract doesn\u2019t.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-code-base-does-not-use-a-consistent-style.-for-example,-in-the-collateral-contract,-the-private-function-_withdraw-has-an-underscore-_-prepended-while-the-private-function-withdrawfromaccount-from-the-perpetual-contract-doesn\u2019t.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed.", "body": "The validation now checks the cancellation status.  High severity  [H01] Incorrect social loss  When a bankrupt position is liquidated and the insurance fund is empty, the opponent position holders should cover the loss. In this way, the profits on one side are garnished to fund the loss on the other side. This ensures the system as a whole cannot become insolvent. However, the loss is actually attributed to positions on the same side. In the worst case, none of the positions on the same side will be able to cover the loss, which means the contract will be underfunded and some profits will not be redeemable. Consider updating the code to assign losses to the opposite side of the liquidation.    Medium severity  [M01] liquidateFrom does not use tradingLotSize  In the Perpetual contract, within the function liquidateFrom there is a check that the maxAmount to be liquidated is a multiple of lotSize. This may be the amount of some users position that gets liquidated by the end of the function call.  However, all trades which happen during a call to matchOrders must be for an amount that is a multiple of tradingLotSize. This is the only way to trade with other users. Otherwise, trading with the AMM is also limited through checks in buyFrom and sellFrom such that the user can only trade amounts that are a multiple of tradingLotSize.  In the PerpetualGovernance contract, we can see that tradingLotSize must be a multiple of lotSize. If these two numbers differ, and a user is liquidated for an amount not divisible by tradingLotSize, they may have a left-over position that is not an even multiple of tradingLotSize. If this occurs, they may not be able to close their position completely.  Consider restricting liquidation amounts to multiples of tradingLotSize, rather than lotSize. Alternatively, consider providing a method for liquidated traders to close their positions that are of less than tradingLotSize.  Update: Acknowledged. Typically, lotSize and tradingLotSize will be the same value, but tradingLotSize might be increased to help with high Ethereum congestion.  [M02] Unspecified parameters  When a user liquidates another position, they specify the maximum position amount to liquidate. However, the liquidation price and position side is inferred contextually from the current mark price and the state of the target account. These values could change before the liquidation is confirmed, particularly during periods of high Ethereum congestion. In many cases the liquidator would accept any successful liquidation, but for the sake of predictability, consider allowing the liquidator to specify an acceptable price range, the side of the positions to liquidate and a deadline for when the liquidation attempt expires.  Similarly, when creating the AMM pool, adding liquidity or removing liquidity, the price is inferred contextually. In the case of adding or removing liquidity, it could even change based on the actions of other users in the same block. Consider allowing the user to specify an acceptable price range and a deadline for when the action expires.  Update: Acknowledged. The Monte Carlo team have decided not to address this issue.  [M03] Re-entrancy possibilities  Solidity recommends the usage of the Check-Effects-Interaction Pattern to avoid potential security issues, such as reentrancy. However, there are several examples of interactions preceding effects:  In the deposit function of the Collateral contract, collateral is retrieved before the user balance is updated and an event is emitted.  In the _withdraw function of the Collateral contract, collateral is sent before the event is emitted  The same pattern occurs in the depositToInsuranceFund, depositEtherToInsuranceFund and withdrawFromInsuranceFund functions of the Perpetual contract.  It should be noted that even when a correctly implemented ERC20 contract is used for collateral, incoming and outgoing transfers could execute arbitrary code if the contract is also ERC777 compliant. These re-entrancy opportunities are unlikely to corrupt the internal state of the system, but they would effect the order and contents of emitted events, which could confuse external clients about the state of the system. Consider always following the Check-Effects-Interactions pattern.   The ReentrancyGuard contract is now used to protect those functions.  [M04] Missing docstrings and comments  Most of the contracts and functions in the audited code base lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Fun", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.", "labels": ["OpenZeppelin"]}, {"title": "[N18] Lot size checks are generalizeable", "body": "[N18] Lot size checks are generalizeable", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n18]-lot-size-checks-are-generalizeable", "labels": ["OpenZeppelin"]}, {"title": "line 63 of Exchange.sol, while another exists on", "body": "line 63 of Exchange.sol, while another exists on", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#line-63-of-exchange.sol,-while-another-exists-on", "labels": ["OpenZeppelin"]}, {"title": "line 119. Similar checks involving", "body": "line 119. Similar checks involving", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#line-119.-similar-checks-involving", "labels": ["OpenZeppelin"]}, {"title": "here and", "body": "here.  Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the dont repeat yourself development principle, and the surface for error will be reduced since all instances of this code will behave the same way.  Update: Acknowledged.  [N19] Repeated code  In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol  To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.  Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.  [N20] SafeMath and SignedSafeMath should be used  LibMathSigned and  LibMathUnsigned are used for operations on  SignedSafeMath library. Likewise, the functions  SafeMath library.  Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here,", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#here-and", "labels": ["OpenZeppelin"]}, {"title": "here.", "body": "[N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#here.", "labels": ["OpenZeppelin"]}, {"title": "Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the \u201cdon\u2019t repeat yourself\u201d development principle, and the surface for error will be reduced since all instances of this code will behave the same way.", "body": "Since this code is repeated many times throughout the codebase, consider implementing it within a function or modifier, and instead using this whenever needed. By doing so, the code will follow the \u201cdon\u2019t repeat yourself\u201d development principle, and the surface for error will be reduced since all instances of this code will behave the same way.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#since-this-code-is-repeated-many-times-throughout-the-codebase,-consider-implementing-it-within-a-function-or-modifier,-and-instead-using-this-whenever-needed.-by-doing-so,-the-code-will-follow-the-\u201cdon\u2019t-repeat-yourself\u201d-development-principle,-and-the-surface-for-error-will-be-reduced-since-all-instances-of-this-code-will-behave-the-same-way.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged.", "body": "The Monte Carlo team have decided not to address this issue.  [M03] Re-entrancy possibilities  Solidity recommends the usage of the Check-Effects-Interaction Pattern to avoid potential security issues, such as reentrancy. However, there are several examples of interactions preceding effects:  In the deposit function of the Collateral contract, collateral is retrieved before the user balance is updated and an event is emitted.  In the _withdraw function of the Collateral contract, collateral is sent before the event is emitted  The same pattern occurs in the depositToInsuranceFund, depositEtherToInsuranceFund and withdrawFromInsuranceFund functions of the Perpetual contract.  It should be noted that even when a correctly implemented ERC20 contract is used for collateral, incoming and outgoing transfers could execute arbitrary code if the contract is also ERC777 compliant. These re-entrancy opportunities are unlikely to corrupt the internal state of the system, but they would effect the order and contents of emitted events, which could confuse external clients about the state of the system. Consider always following the Check-Effects-Interactions pattern.  Update: Fixed. The ReentrancyGuard contract is now used to protect those functions.  [M04] Missing docstrings and comments  Most of the contracts and functions in the audited code base lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Additionally, the OpenZeppelin team found a notable lack of comments throughout the audited code. Well-commented code not only improves audit speed and depth, but it also helps to reveal what developer intentions may be and thus helps identify issues of misalignment between intention and implementation. Without comments, identifying issues in the code is much more difficult. Aside from benefiting auditors, code comments also benefit future developers and users, by clearly defining the functionality of the code and by reducing the risk of bugs.  Consider thoroughly commenting the existing code, and adding regular commenting to the software development process. We specifically recommend commenting every line of assembly code and commenting all complex math operations.  Update: Fixed. Many parts of the codebase have been documented and commented.  [M05] Incomplete Denial of Service prevention  As described in the documentation, the purpose of the broker and withdraw time locks is to prevent traders nullifying trades that have already been submitted. If this were possible, it would not only disrupt their counterpartys trade, it may also revert unrelated trades if they are processed in batches. The time locks ensure the order book has time to respond to a trader that attempts to withdraw excess collateral or make trades through the AMM or another broker. However, we have identified two other scenarios that would allow the trader to nullify their trade.  applied to withdraw, they could  set their appliedBalance to a large amount. Subsequently, when a trade is processed,  the available margin can cover any opening fee. However, the available margin calculation  does not respect the time lock, so a large  availableMarginWithPrice to check the traders  appliedHeight before processing the  Secondly, a trader can directly cancel their order. This should immediately prevent it being processed, which would nullify the trade directly. Consider preventing traders from cancelling their request directly, and instead rely on their broker to relay the cancellation.  Note: This issue is related to C02 and any mitigation should consider both issues simultaneously.  Update: Fixed with notable change to functionality. The entire timelock mechanism for brokers and withdrawals has been removed. This means there is no protection against a user nullifying a trade that was submitted to the offline order book. Importantly, this does not lead to inconsistencies within the protocol. Additionally, users can no longer choose an arbitrary broker address  they must use an address approved by the administrator (or the AMM).  [M06] Governance parameter changes should not be instant  WhitelistAdmin role via the functions  AMMGovernance and  PerpetualGovernance contracts. For example, the  fee schedule, the  initial and  maintenance margin rates, or the  lot size parameters, and these new p", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged.", "labels": ["OpenZeppelin"]}, {"title": "[N19] Repeated code", "body": "[N19] Repeated code", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n19]-repeated-code", "labels": ["OpenZeppelin"]}, {"title": "In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol", "body": "In the Collateral contract, the _withdraw function in lines 81-85 is doing the same operations as in the function withdrawFromProtocol", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-the-collateral-contract,-the-_withdraw-function-in-lines-81-85-is-doing-the-same-operations-as-in-the-function-withdrawfromprotocol", "labels": ["OpenZeppelin"]}, {"title": "To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.", "body": "To improve readability and reduce code size, consider encapsulating the repeated code into a single function that can be called when needed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#to-improve-readability-and-reduce-code-size,-consider-encapsulating-the-repeated-code-into-a-single-function-that-can-be-called-when-needed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.", "body": "Update: Fixed. The repeated code has been encapsulated into the pushCollateral function.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-fixed.-the-repeated-code-has-been-encapsulated-into-the-pushcollateral-function.", "labels": ["OpenZeppelin"]}, {"title": "[N20] SafeMath and SignedSafeMath should be used", "body": "[N20] SafeMath and SignedSafeMath should be used", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n20]-safemath-and-signedsafemath-should-be-used", "labels": ["OpenZeppelin"]}, {"title": "LibMathUnsigned are used for operations on", "body": "LibMathUnsigned are used for operations on", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#libmathunsigned-are-used-for-operations-on", "labels": ["OpenZeppelin"]}, {"title": "SignedSafeMath library. Likewise, the functions", "body": "SignedSafeMath library. Likewise, the functions", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#signedsafemath-library.-likewise,-the-functions", "labels": ["OpenZeppelin"]}, {"title": "SafeMath library.", "body": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.  [N21] Typographical errors  In line 419 of AMM.sol: already is misspelled  In line 37 of LibTypes.sol: current is misspelled  In line 42 of LibTypes.sol: applied is misspelled  In line 79 of Position.sol: negative is misspelled  In line 207 of Position.sol: invalid is misspelled  In line 265 of Position.sol: liquidated is misspelled  In line 279 of Position.sol: position is misspelled  In line 292 of Position.sol: negative is misspelled  In line 68 of Collateral.sol: negative is misspelled  In line 7 of GlobalConfig.sol: submiting withdrawal apllication should be submitting application  Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.  [N22] Inherit from interfaces  The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.  Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.  Update: Acknowledged.  [N23] Missing view modifier  For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contracts storage:  In Position contract:  availableMarginWithPrice  marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.", "body": "Update: Acknowledged. The Monte Carlo team intends to address this when upgrading to Solidity 0.6.x.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-acknowledged.-the-monte-carlo-team-intends-to-address-this-when-upgrading-to-solidity-0.6.x.", "labels": ["OpenZeppelin"]}, {"title": "[N21] Typographical errors", "body": "[N21] Typographical errors", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n21]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In line 419 of AMM.sol: \u201calready\u201d is misspelled", "body": "In line 419 of AMM.sol: \u201calready\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-419-of-amm.sol:-\u201calready\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 37 of LibTypes.sol: \u201ccurrent\u201d is misspelled", "body": "In line 37 of LibTypes.sol: \u201ccurrent\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-37-of-libtypes.sol:-\u201ccurrent\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 42 of LibTypes.sol: \u201capplied\u201d is misspelled", "body": "In line 42 of LibTypes.sol: \u201capplied\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-42-of-libtypes.sol:-\u201capplied\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 79 of Position.sol: \u201cnegative\u201d is misspelled", "body": "In line 79 of Position.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-79-of-position.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 207 of Position.sol: \u201cinvalid\u201d is misspelled", "body": "In line 207 of Position.sol: \u201cinvalid\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-207-of-position.sol:-\u201cinvalid\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 265 of Position.sol: \u201cliquidated\u201d is misspelled", "body": "In line 265 of Position.sol: \u201cliquidated\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-265-of-position.sol:-\u201cliquidated\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 279 of Position.sol: \u201cposition\u201d is misspelled", "body": "In line 279 of Position.sol: \u201cposition\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-279-of-position.sol:-\u201cposition\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 292 of Position.sol: \u201cnegative\u201d is misspelled", "body": "In line 292 of Position.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-292-of-position.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 68 of Collateral.sol: \u201cnegative\u201d is misspelled", "body": "In line 68 of Collateral.sol: \u201cnegative\u201d is misspelled", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-68-of-collateral.sol:-\u201cnegative\u201d-is-misspelled", "labels": ["OpenZeppelin"]}, {"title": "In line 7 of GlobalConfig.sol: \u201csubmiting withdrawal apllication\u201d should be \u201csubmitting application\u201d", "body": "In line 7 of GlobalConfig.sol: \u201csubmiting withdrawal apllication\u201d should be \u201csubmitting application\u201d", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-line-7-of-globalconfig.sol:-\u201csubmiting-withdrawal-apllication\u201d-should-be-\u201csubmitting-application\u201d", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.", "body": "Update: Partially fixed. Some of the examples mentioned above have been corrected or removed. However, there are some typographical errors in MarginAccount, which can be found here, here and here.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-partially-fixed.-some-of-the-examples-mentioned-above-have-been-corrected-or-removed.-however,-there-are-some-typographical-errors-in-marginaccount,-which-can-be-found-here,-here-and-here.", "labels": ["OpenZeppelin"]}, {"title": "[N22] Inherit from interfaces", "body": "[N22] Inherit from interfaces", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n22]-inherit-from-interfaces", "labels": ["OpenZeppelin"]}, {"title": "The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.", "body": "The interface folder contains a number of interfaces for contracts within the system. However, the contracts do not explicitly implement these interfaces when needed.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#the-interface-folder-contains-a-number-of-interfaces-for-contracts-within-the-system.-however,-the-contracts-do-not-explicitly-implement-these-interfaces-when-needed.", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.", "body": "Consider updating the inheritance declarations of the AMM, GlobalConfig, Perpetual and PerpetualProxy contracts to implement the relevant interfaces.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#consider-updating-the-inheritance-declarations-of-the-amm,-globalconfig,-perpetual-and-perpetualproxy-contracts-to-implement-the-relevant-interfaces.", "labels": ["OpenZeppelin"]}, {"title": "[N23] Missing view modifier", "body": "[N23] Missing view modifier", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#[n23]-missing-view-modifier", "labels": ["OpenZeppelin"]}, {"title": "For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contract\u2019s storage:", "body": "For added readability and better code readability, consider declaring the following functions as view since all of them preserve the contract\u2019s storage:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#for-added-readability-and-better-code-readability,-consider-declaring-the-following-functions-as-view-since-all-of-them-preserve-the-contract\u2019s-storage:", "labels": ["OpenZeppelin"]}, {"title": "In Position contract:", "body": "In Position contract:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-position-contract:", "labels": ["OpenZeppelin"]}, {"title": "availableMarginWithPrice", "body": "marginBalanceWithPrice  calculatePnl  pnlWithPrice  In Perpetual contract  isIMSafeWithPrice  isSafeWithPrice  In PerpetualProxy contract:  isProxySafeWithPrice  isSafeWithPrice  isIMSafeWithPrice  Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#availablemarginwithprice", "labels": ["OpenZeppelin"]}, {"title": "marginBalanceWithPrice", "body": "marginBalanceWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#marginbalancewithprice", "labels": ["OpenZeppelin"]}, {"title": "calculatePnl", "body": "calculatePnl", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#calculatepnl", "labels": ["OpenZeppelin"]}, {"title": "pnlWithPrice", "body": "pnlWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#pnlwithprice", "labels": ["OpenZeppelin"]}, {"title": "In Perpetual contract", "body": "In Perpetual contract", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-perpetual-contract", "labels": ["OpenZeppelin"]}, {"title": "isIMSafeWithPrice", "body": "Update: Not an issue. These calculations may update the funding.  Conclusion  2 critical and 1 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the Monte Carlo team and all most relevant issues have been fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#isimsafewithprice", "labels": ["OpenZeppelin"]}, {"title": "isSafeWithPrice", "body": "isSafeWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#issafewithprice", "labels": ["OpenZeppelin"]}, {"title": "In PerpetualProxy contract:", "body": "In PerpetualProxy contract:", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#in-perpetualproxy-contract:", "labels": ["OpenZeppelin"]}, {"title": "isProxySafeWithPrice", "body": "isProxySafeWithPrice", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#isproxysafewithprice", "labels": ["OpenZeppelin"]}, {"title": "Update: Not an issue. These calculations may update the funding.", "body": "Update: Not an issue. These calculations may update the funding.", "html_url": "https://blog.openzeppelin.com/mcdex-mai-protocol-audit#update:-not-an-issue.-these-calculations-may-update-the-funding.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Unnecessary public visibility in some functions", "body": "[N01] Unnecessary public visibility in some functions", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#[n01]-unnecessary-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "The following functions are defined as public but are never locally used:", "body": "The following functions are defined as public but are never locally used:", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#the-following-functions-are-defined-as-public-but-are-never-locally-used:", "labels": ["OpenZeppelin"]}, {"title": "In Dripper.sol, the drip function", "body": "In Dripper.sol, the drip function", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#in-dripper.sol,-the-drip-function", "labels": ["OpenZeppelin"]}, {"title": "In Comptroller.sol, the claimComp, _dropCompMarket, and getCompMarkets functions", "body": "In Comptroller.sol, the claimComp, _dropCompMarket, and getCompMarkets functions", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#in-comptroller.sol,-the-claimcomp,-_dropcompmarket,-and-getcompmarkets-functions", "labels": ["OpenZeppelin"]}, {"title": "To reduce gas costs, consider changing the visibility of these functions to external.", "body": "To reduce gas costs, consider changing the visibility of these functions to external.", "html_url": "https://blog.openzeppelin.com/compound-comp-distribution-system-audit#to-reduce-gas-costs,-consider-changing-the-visibility-of-these-functions-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Missing upper bound constraint during fee payment", "body": "[N01] Missing upper bound constraint during fee payment", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n01]-missing-upper-bound-constraint-during-fee-payment", "labels": ["OpenZeppelin"]}, {"title": "The payFees function of the FeePayer contract does not compare the profit from corruption value (stored in the _pfc local variable) to the total amount of fees paid before dividing them, as is done in the _payFinalFees function.", "body": "The payFees function of the FeePayer contract does not compare the profit from corruption value (stored in the _pfc local variable) to the total amount of fees paid before dividing them, as is done in the _payFinalFees function.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-payfees-function-of-the-feepayer-contract-does-not-compare-the-profit-from-corruption-value-(stored-in-the-_pfc-local-variable)-to-the-total-amount-of-fees-paid-before-dividing-them,-as-is-done-in-the-_payfinalfees-function.", "labels": ["OpenZeppelin"]}, {"title": "Should _pfc be lower than totalPaid (a local variable representing the total amount of fees being paid), the subsequent calculation of the cumulativeFeeMultiplier value would underflow, reverting the transaction in the SafeMath sub operation.", "body": "Should _pfc be lower than totalPaid (a local variable representing the total amount of fees being paid), the subsequent calculation of the cumulativeFeeMultiplier value would underflow, reverting the transaction in the SafeMath sub operation.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#should-_pfc-be-lower-than-totalpaid-(a-local-variable-representing-the-total-amount-of-fees-being-paid),-the-subsequent-calculation-of-the-cumulativefeemultiplier-value-would-underflow,-reverting-the-transaction-in-the-safemath-sub-operation.", "labels": ["OpenZeppelin"]}, {"title": "Following the \u201cfail early and loudly\u201d principle, consider explicitly restricting the upper bound of the totalPaid local variable.", "body": "Following the \u201cfail early and loudly\u201d principle, consider explicitly restricting the upper bound of the totalPaid local variable.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#following-the-\u201cfail-early-and-loudly\u201d-principle,-consider-explicitly-restricting-the-upper-bound-of-the-totalpaid-local-variable.", "labels": ["OpenZeppelin"]}, {"title": "Update: Addressed in PR#1338. The UMA team decided to refactor the payRegularFees function (originally called payFees) to reduce or waive unaffordable fees rather than revert the transaction. This ensures funds will not be trapped in the contract, but the cumulative fee multiplier will be set to zero and the contract will no longer work as intended. We strongly suggest thoroughly testing this dangerous scenario, in particular ensuring that users can no longer deposit funds into the defunct contract to prevent accidental loss of funds. Additionally, we suggest explicitly checking for this condition, rather than relying on division-by-zero errors to prevent new deposits.", "body": "Update: Addressed in PR#1338. The UMA team decided to refactor the payRegularFees function (originally called payFees) to reduce or waive unaffordable fees rather than revert the transaction. This ensures funds will not be trapped in the contract, but the cumulative fee multiplier will be set to zero and the contract will no longer work as intended. We strongly suggest thoroughly testing this dangerous scenario, in particular ensuring that users can no longer deposit funds into the defunct contract to prevent accidental loss of funds. Additionally, we suggest explicitly checking for this condition, rather than relying on division-by-zero errors to prevent new deposits.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-addressed-in-pr#1338.-the-uma-team-decided-to-refactor-the-payregularfees-function-(originally-called-payfees)-to-reduce-or-waive-unaffordable-fees-rather-than-revert-the-transaction.-this-ensures-funds-will-not-be-trapped-in-the-contract,-but-the-cumulative-fee-multiplier-will-be-set-to-zero-and-the-contract-will-no-longer-work-as-intended.-we-strongly-suggest-thoroughly-testing-this-dangerous-scenario,-in-particular-ensuring-that-users-can-no-longer-deposit-funds-into-the-defunct-contract-to-prevent-accidental-loss-of-funds.-additionally,-we-suggest-explicitly-checking-for-this-condition,-rather-than-relying-on-division-by-zero-errors-to-prevent-new-deposits.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Inefficient timestamp validation", "body": "[N02] Inefficient timestamp validation", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n02]-inefficient-timestamp-validation", "labels": ["OpenZeppelin"]}, {"title": "_isValidTimestamp function of the", "body": "_isValidTimestamp function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#_isvalidtimestamp-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1308. It should be noted that timestamps are defined using the uint32 type, but then implicitly casted and stored as uint256.", "body": "Update: Fixed in PR#1308. It should be noted that timestamps are defined using the uint32 type, but then implicitly casted and stored as uint256.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1308.-it-should-be-noted-that-timestamps-are-defined-using-the-uint32-type,-but-then-implicitly-casted-and-stored-as-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Repeated function calls to read Profit from Corruption value", "body": "[N03] Repeated function calls to read Profit from Corruption value", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n03]-repeated-function-calls-to-read-profit-from-corruption-value", "labels": ["OpenZeppelin"]}, {"title": "_payFinalFees function of the", "body": "_payFinalFees function of the", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#_payfinalfees-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "in line 134, the function is called and its return value stored in a local variable", "body": "in line 134, the function is called and its return value stored in a local variable", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-line-134,-the-function-is-called-and-its-return-value-stored-in-a-local-variable", "labels": ["OpenZeppelin"]}, {"title": "in line 140.", "body": "in line 140.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-line-140.", "labels": ["OpenZeppelin"]}, {"title": "To reduce gas costs during execution, consider reusing the _pfc local variable instead of calling the pfc function again.", "body": "To reduce gas costs during execution, consider reusing the _pfc local variable instead of calling the pfc function again.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-reduce-gas-costs-during-execution,-consider-reusing-the-_pfc-local-variable-instead-of-calling-the-pfc-function-again.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1339.", "body": "Update: Fixed in PR#1339.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1339.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Undocumented prior approval of ERC20 tokens", "body": "[N04] Undocumented prior approval of ERC20 tokens", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n04]-undocumented-prior-approval-of-erc20-tokens", "labels": ["OpenZeppelin"]}, {"title": "There are functions that execute transfers of ERC20 tokens from the caller\u2019s balance using the standard transferFrom function. The caller, in these cases, must first approve the contract that is moving the funds. Neither the existing external documentation nor the functions\u2019 docstrings explicitly state this requirement. In particular:", "body": "There are functions that execute transfers of ERC20 tokens from the caller\u2019s balance using the standard transferFrom function. The caller, in these cases, must first approve the contract that is moving the funds. Neither the existing external documentation nor the functions\u2019 docstrings explicitly state this requirement. In particular:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-functions-that-execute-transfers-of-erc20-tokens-from-the-caller\u2019s-balance-using-the-standard-transferfrom-function.-the-caller,-in-these-cases,-must-first-approve-the-contract-that-is-moving-the-funds.-neither-the-existing-external-documentation-nor-the-functions\u2019-docstrings-explicitly-state-this-requirement.-in-particular:", "labels": ["OpenZeppelin"]}, {"title": "The deposit, create, dispute and createLiquidation functions need the msg.sender to first approve the contract to move an amount of collateral.", "body": "The deposit, create, dispute and createLiquidation functions need the msg.sender to first approve the contract to move an amount of collateral.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-deposit,-create,-dispute-and-createliquidation-functions-need-the-msg.sender-to-first-approve-the-contract-to-move-an-amount-of-collateral.", "labels": ["OpenZeppelin"]}, {"title": "The redeem, settleExpired and createLiquidation functions need the msg.sender to first approve the contract to move an amount of synthetic tokens.", "body": "The redeem, settleExpired and createLiquidation functions need the msg.sender to first approve the contract to move an amount of synthetic tokens.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-redeem,-settleexpired-and-createliquidation-functions-need-the-msg.sender-to-first-approve-the-contract-to-move-an-amount-of-synthetic-tokens.", "labels": ["OpenZeppelin"]}, {"title": "So as to clearly document their assumptions, consider expanding the functions\u2019 docstrings stating that the caller must first approve enough tokens for the functions to work as expected.", "body": "So as to clearly document their assumptions, consider expanding the functions\u2019 docstrings stating that the caller must first approve enough tokens for the functions to work as expected.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#so-as-to-clearly-document-their-assumptions,-consider-expanding-the-functions\u2019-docstrings-stating-that-the-caller-must-first-approve-enough-tokens-for-the-functions-to-work-as-expected.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1319.", "body": "Update: Fixed in PR#1319.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1319.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessary public getter for state variable", "body": "[N05] Unnecessary public getter for state variable", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n05]-unnecessary-public-getter-for-state-variable", "labels": ["OpenZeppelin"]}, {"title": "An inline comment in the PricelessPositionManager contract states that the rawTotalPositionCollateral state variable should not be used directly. However, the state variable\u2019s visibility is currently public, and Solidity will therefore create a public getter for it.", "body": "An inline comment in the PricelessPositionManager contract states that the rawTotalPositionCollateral state variable should not be used directly. However, the state variable\u2019s visibility is currently public, and Solidity will therefore create a public getter for it.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#an-inline-comment-in-the-pricelesspositionmanager-contract-states-that-the-rawtotalpositioncollateral-state-variable-should-not-be-used-directly.-however,-the-state-variable\u2019s-visibility-is-currently-public,-and-solidity-will-therefore-create-a-public-getter-for-it.", "labels": ["OpenZeppelin"]}, {"title": "To avoid mismatches between code and documentation, consider restricting access by removing the public keyword from the rawTotalPositionCollateral state variable.", "body": "To avoid mismatches between code and documentation, consider restricting access by removing the public keyword from the rawTotalPositionCollateral state variable.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-avoid-mismatches-between-code-and-documentation,-consider-restricting-access-by-removing-the-public-keyword-from-the-rawtotalpositioncollateral-state-variable.", "labels": ["OpenZeppelin"]}, {"title": "Update: The UMA team decided not to follow our suggestion to ease testing and inspection after deployment.", "body": "Update: The UMA team decided not to follow our suggestion to ease testing and inspection after deployment.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-the-uma-team-decided-not-to-follow-our-suggestion-to-ease-testing-and-inspection-after-deployment.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Lack of indexed parameters in events", "body": "[N06] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n06]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "The CreatedExpiringMultiParty event defined in the ExpiringMultiPartyCreator contract, and the LiquidationWithdrawn event defined in the Liquidatable contract, do not index any of their parameters. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "The CreatedExpiringMultiParty event defined in the ExpiringMultiPartyCreator contract, and the LiquidationWithdrawn event defined in the Liquidatable contract, do not index any of their parameters. Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-createdexpiringmultiparty-event-defined-in-the-expiringmultipartycreator-contract,-and-the-liquidationwithdrawn-event-defined-in-the-liquidatable-contract,-do-not-index-any-of-their-parameters.-consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1317.", "body": "Update: Fixed in PR#1317.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1317.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Function missing view modifier", "body": "[N07] Function missing view modifier", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n07]-function-missing-view-modifier", "labels": ["OpenZeppelin"]}, {"title": "For added readability, consider declaring as view the _computeFinalFees function of the FeePayer contract, since it does not modify the contract\u2019s storage.", "body": "For added readability, consider declaring as view the _computeFinalFees function of the FeePayer contract, since it does not modify the contract\u2019s storage.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#for-added-readability,-consider-declaring-as-view-the-_computefinalfees-function-of-the-feepayer-contract,-since-it-does-not-modify-the-contract\u2019s-storage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1315.", "body": "Update: Fixed in PR#1315.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1315.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unused repeated function", "body": "[N08] Unused repeated function", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n08]-unused-repeated-function", "labels": ["OpenZeppelin"]}, {"title": "In the PricelessPositionManager contract, the function _getStoreAddress is not called nor used in any way.", "body": "In the PricelessPositionManager contract, the function _getStoreAddress is not called nor used in any way.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-the-pricelesspositionmanager-contract,-the-function-_getstoreaddress-is-not-called-nor-used-in-any-way.", "labels": ["OpenZeppelin"]}, {"title": "Moreover, the contract itself inherits from the FeePayer contract which already implements the _getStore function with the same purpose.", "body": "Moreover, the contract itself inherits from the FeePayer contract which already implements the _getStore function with the same purpose.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#moreover,-the-contract-itself-inherits-from-the-feepayer-contract-which-already-implements-the-_getstore-function-with-the-same-purpose.", "labels": ["OpenZeppelin"]}, {"title": "To favor simplicity, consider removing the _getStoreAddress function from the PricelessPositionManager contract.", "body": "To favor simplicity, consider removing the _getStoreAddress function from the PricelessPositionManager contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-favor-simplicity,-consider-removing-the-_getstoreaddress-function-from-the-pricelesspositionmanager-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1303.", "body": "Update: Fixed in PR#1303.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1303.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Code repetition", "body": "[N09] Code repetition", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n09]-code-repetition", "labels": ["OpenZeppelin"]}, {"title": "There are some examples of repeated code blocks performing conceptually atomic operations.", "body": "There are some examples of repeated code blocks performing conceptually atomic operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-some-examples-of-repeated-code-blocks-performing-conceptually-atomic-operations.", "labels": ["OpenZeppelin"]}, {"title": "In FeePayer.sol:", "body": "Line 30: there is an extra space before Finder.  Line 82: more is misspelled.  Line 195: cumulativeFeeMultiplier is misspelled.  Line 210: cumulativeFeeMultiplier is misspelled.  In Liquidatable.sol:  Line 95: multiplier is misspelled.  Line 98: multiplier is misspelled.  Line 126: DisputeSucceeded should be disputeSucceeded.  Line 147: there is an unmatched backtick symbol.  Line 185: tokens is misspelled.  Line 288: whose is misspelled.  Line 370: the word is is missing.  Line 371: from times should be times from.  In PricelessPositionManager.sol:  Line 39: is should be as.  Line 66: a should be an.  Line 196: requestWithdrawal is misspelled.  Line 298: the should be removed.  Line 322: mint the caller should be mint to the caller.  Line 377: Burns should be burns.  In SyntheticToken.sol:  Line 8: there is an extra space before who.  In TokenFactory.sol:  Line 12: it should say return it to the caller.  Line 13: adding new roles should be assigning the roles.  Line 16: tokens should be tokens.  Update: Fixed in PR#1298.  [N15] Unnecessary imports  In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.  Update: Fixed in PR#1299 and PR#1236.  Conclusion  Originally, no critical and 2 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-feepayer.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 114 to 115 and 140 to 141 are both reducing the cumulativeFeeMultiplier by a given amount.", "body": "Lines 114 to 115 and 140 to 141 are both reducing the cumulativeFeeMultiplier by a given amount.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-114-to-115-and-140-to-141-are-both-reducing-the-cumulativefeemultiplier-by-a-given-amount.", "labels": ["OpenZeppelin"]}, {"title": "In PricelessPositionManager.sol:", "body": "Line 39: is should be as.  Line 66: a should be an.  Line 196: requestWithdrawal is misspelled.  Line 298: the should be removed.  Line 322: mint the caller should be mint to the caller.  Line 377: Burns should be burns.  In SyntheticToken.sol:  Line 8: there is an extra space before who.  In TokenFactory.sol:  Line 12: it should say return it to the caller.  Line 13: adding new roles should be assigning the roles.  Line 16: tokens should be tokens.  Update: Fixed in PR#1298.  [N15] Unnecessary imports  In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.  Update: Fixed in PR#1299 and PR#1236.  Conclusion  Originally, no critical and 2 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface. We later reviewed all fixes applied by the UMA team and all the most relevant issues have been already fixed.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-pricelesspositionmanager.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 278 to 279 and 292 to 293 are both resetting the withdrawal request.", "body": "Lines 278 to 279 and 292 to 293 are both resetting the withdrawal request.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-278-to-279-and-292-to-293-are-both-resetting-the-withdrawal-request.", "labels": ["OpenZeppelin"]}, {"title": "Lines 184 to 185 and 316+319 are ensuring individual and global consistency when increasing collateral balances.", "body": "Lines 184 to 185 and 316+319 are ensuring individual and global consistency when increasing collateral balances.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-184-to-185-and-316+319-are-ensuring-individual-and-global-consistency-when-increasing-collateral-balances.", "labels": ["OpenZeppelin"]}, {"title": "Lines 210+215, 269 to 270, 356+362 and 534+542 are ensuring individual and global consistency when decreasing collateral balances.", "body": "Lines 210+215, 269 to 270, 356+362 and 534+542 are ensuring individual and global consistency when decreasing collateral balances.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-210+215,-269-to-270,-356+362-and-534+542-are-ensuring-individual-and-global-consistency-when-decreasing-collateral-balances.", "labels": ["OpenZeppelin"]}, {"title": "To favor reusability, consider refactoring these repeated operations into private functions.", "body": "To favor reusability, consider refactoring these repeated operations into private functions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#to-favor-reusability,-consider-refactoring-these-repeated-operations-into-private-functions.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1300.", "body": "Update: Fixed in PR#1300.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1300.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Inconsistent NatSpec usage", "body": "[N10] Inconsistent NatSpec usage", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n10]-inconsistent-natspec-usage", "labels": ["OpenZeppelin"]}, {"title": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently.", "body": "The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-code-base-uses-the-ethereum-natural-specification-(natspec)-format-inconsistently.", "labels": ["OpenZeppelin"]}, {"title": "For example, in the FeePayer contract, the function _getCollateral is using single line comments format, other functions like _getStore have no comments at all, while others such as _payFinalFees are following the NatSpec format correctly.", "body": "For example, in the FeePayer contract, the function _getCollateral is using single line comments format, other functions like _getStore have no comments at all, while others such as _payFinalFees are following the NatSpec format correctly.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#for-example,-in-the-feepayer-contract,-the-function-_getcollateral-is-using-single-line-comments-format,-other-functions-like-_getstore-have-no-comments-at-all,-while-others-such-as-_payfinalfees-are-following-the-natspec-format-correctly.", "labels": ["OpenZeppelin"]}, {"title": "So as to favor consistency, readability and improve the quality of the project\u2019s documentation, consider always following the Ethereum Natural Specification format.", "body": "So as to favor consistency, readability and improve the quality of the project\u2019s documentation, consider always following the Ethereum Natural Specification format.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#so-as-to-favor-consistency,-readability-and-improve-the-quality-of-the-project\u2019s-documentation,-consider-always-following-the-ethereum-natural-specification-format.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1345. The UMA team adopted a style guide where the NatSpec format is reserved exclusively for public and external functions. Single line comments are optionally used for the remaining functions.", "body": "Update: Fixed in PR#1345. The UMA team adopted a style guide where the NatSpec format is reserved exclusively for public and external functions. Single line comments are optionally used for the remaining functions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1345.-the-uma-team-adopted-a-style-guide-where-the-natspec-format-is-reserved-exclusively-for-public-and-external-functions.-single-line-comments-are-optionally-used-for-the-remaining-functions.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Missing docstrings in sensitive functions", "body": "[N11] Missing docstrings in sensitive functions", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n11]-missing-docstrings-in-sensitive-functions", "labels": ["OpenZeppelin"]}, {"title": "Some internal and private functions implementing sensitive functionality are not commented. See for example _reduceSponsorPosition and _deleteSponsorPosition functions in the PricelessPositionManager contract. The lack of documentation might hinder reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance.", "body": "Some internal and private functions implementing sensitive functionality are not commented. See for example _reduceSponsorPosition and _deleteSponsorPosition functions in the PricelessPositionManager contract. The lack of documentation might hinder reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to assess not only security, but also correctness. Additionally, docstrings improve readability and ease maintenance.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#some-internal-and-private-functions-implementing-sensitive-functionality-are-not-commented.-see-for-example-_reducesponsorposition-and-_deletesponsorposition-functions-in-the-pricelesspositionmanager-contract.-the-lack-of-documentation-might-hinder-reviewers\u2019-understanding-of-the-code\u2019s-intention,-which-is-fundamental-to-assess-not-only-security,-but-also-correctness.-additionally,-docstrings-improve-readability-and-ease-maintenance.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all non-trivial functions, even if they are not part of the contracts\u2019 public API. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all non-trivial functions, even if they are not part of the contracts\u2019 public API. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#consider-thoroughly-documenting-all-non-trivial-functions,-even-if-they-are-not-part-of-the-contracts\u2019-public-api.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1343.", "body": "Update: Fixed in PR#1343.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1343.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Naming issues", "body": "[N12] Naming issues", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n12]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "The following functions and variables may benefit from better naming:", "body": "The following functions and variables may benefit from better naming:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-following-functions-and-variables-may-benefit-from-better-naming:", "labels": ["OpenZeppelin"]}, {"title": "The _getCollateral and _convertCollateral functions in FeePayer should be renamed to indicate fee-adjustment operations.", "body": "The _getCollateral and _convertCollateral functions in FeePayer should be renamed to indicate fee-adjustment operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-_getcollateral-and-_convertcollateral-functions-in-feepayer-should-be-renamed-to-indicate-fee-adjustment-operations.", "labels": ["OpenZeppelin"]}, {"title": "The payFees function of the FeePayer contract should be renamed to payRegularFees, payOngoingFees, payRegularAndPenaltyFees or similar.", "body": "The payFees function of the FeePayer contract should be renamed to payRegularFees, payOngoingFees, payRegularAndPenaltyFees or similar.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-payfees-function-of-the-feepayer-contract-should-be-renamed-to-payregularfees,-payongoingfees,-payregularandpenaltyfees-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "The priceIdentifer variable in PricelessPositionManager should be priceIdentifier.", "body": "The priceIdentifer variable in PricelessPositionManager should be priceIdentifier.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-priceidentifer-variable-in-pricelesspositionmanager-should-be-priceidentifier.", "labels": ["OpenZeppelin"]}, {"title": "The EndedSponsor event in PricelessPositionManager should be EndedSponsorship or EndedSponsorPosition.", "body": "The EndedSponsor event in PricelessPositionManager should be EndedSponsorship or EndedSponsorPosition.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-endedsponsor-event-in-pricelesspositionmanager-should-be-endedsponsorship-or-endedsponsorposition.", "labels": ["OpenZeppelin"]}, {"title": "The create function of PricelessPositionManager should be renamed to indicate the possibility of augmenting an existing position.", "body": "The create function of PricelessPositionManager should be renamed to indicate the possibility of augmenting an existing position.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-create-function-of-pricelesspositionmanager-should-be-renamed-to-indicate-the-possibility-of-augmenting-an-existing-position.", "labels": ["OpenZeppelin"]}, {"title": "The transfer function of PricelessPositionManager should be transferPositionOwnership or similar. The Transfer event should be renamed accordingly.", "body": "The transfer function of PricelessPositionManager should be transferPositionOwnership or similar. The Transfer event should be renamed accordingly.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#the-transfer-function-of-pricelesspositionmanager-should-be-transferpositionownership-or-similar.-the-transfer-event-should-be-renamed-accordingly.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1341. The create function has not been renamed but its docstrings have been improved to better reflect the function\u2019s behavior.", "body": "Update: Fixed in PR#1341. The create function has not been renamed but its docstrings have been improved to better reflect the function\u2019s behavior.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1341.-the-create-function-has-not-been-renamed-but-its-docstrings-have-been-improved-to-better-reflect-the-function\u2019s-behavior.", "labels": ["OpenZeppelin"]}, {"title": "[N13] TODOs in code", "body": "[N13] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n13]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for examples:", "body": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for examples:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-backlog-of-issues.-see-for-examples:", "labels": ["OpenZeppelin"]}, {"title": "Lines 253 and 478 of PricelessPositionManager.sol.", "body": "Lines 253 and 478 of PricelessPositionManager.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#lines-253-and-478-of-pricelesspositionmanager.sol.", "labels": ["OpenZeppelin"]}, {"title": "Line 206 of Liquidatable.sol.", "body": "Line 206 of Liquidatable.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-206-of-liquidatable.sol.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1327.", "body": "Update: Fixed in PR#1327.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1327.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Typographical errors", "body": "[N14] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n14]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In ExpiringMultiPartyCreator.sol:", "body": "In ExpiringMultiPartyCreator.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-expiringmultipartycreator.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 148: \u201cconstrainments\u201d should be \u201cconstraints\u201d.", "body": "Line 148: \u201cconstrainments\u201d should be \u201cconstraints\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-148:-\u201cconstrainments\u201d-should-be-\u201cconstraints\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 30: there is an extra space before \u201cFinder\u201d.", "body": "Line 30: there is an extra space before \u201cFinder\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-30:-there-is-an-extra-space-before-\u201cfinder\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 82: \u201cmore\u201d is misspelled.", "body": "Line 82: \u201cmore\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-82:-\u201cmore\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 195: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "body": "Line 195: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-195:-\u201ccumulativefeemultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 210: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "body": "Line 210: \u201ccumulativeFeeMultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-210:-\u201ccumulativefeemultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "In Liquidatable.sol:", "body": "In Liquidatable.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-liquidatable.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 95: \u201cmultiplier\u201d is misspelled.", "body": "Line 95: \u201cmultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-95:-\u201cmultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 98: \u201cmultiplier\u201d is misspelled.", "body": "Line 98: \u201cmultiplier\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-98:-\u201cmultiplier\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 126: \u201cDisputeSucceeded\u201d should be \u201cdisputeSucceeded\u201d.", "body": "Line 126: \u201cDisputeSucceeded\u201d should be \u201cdisputeSucceeded\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-126:-\u201cdisputesucceeded\u201d-should-be-\u201cdisputesucceeded\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 147: there is an unmatched backtick symbol.", "body": "Line 147: there is an unmatched backtick symbol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-147:-there-is-an-unmatched-backtick-symbol.", "labels": ["OpenZeppelin"]}, {"title": "Line 185: \u201ctokens\u201d is misspelled.", "body": "Line 185: \u201ctokens\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-185:-\u201ctokens\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 288: \u201cwhose\u201d is misspelled.", "body": "Line 288: \u201cwhose\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-288:-\u201cwhose\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 370: the word \u201cis\u201d is missing.", "body": "Line 370: the word \u201cis\u201d is missing.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-370:-the-word-\u201cis\u201d-is-missing.", "labels": ["OpenZeppelin"]}, {"title": "Line 371: \u201cfrom times\u201d should be \u201ctimes from\u201d.", "body": "Line 371: \u201cfrom times\u201d should be \u201ctimes from\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-371:-\u201cfrom-times\u201d-should-be-\u201ctimes-from\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 39: \u201cis\u201d should be \u201cas\u201d.", "body": "Line 39: \u201cis\u201d should be \u201cas\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-39:-\u201cis\u201d-should-be-\u201cas\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 66: \u201ca\u201d should be \u201can\u201d.", "body": "Line 66: \u201ca\u201d should be \u201can\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-66:-\u201ca\u201d-should-be-\u201can\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 196: \u201crequestWithdrawal\u201d is misspelled.", "body": "Line 196: \u201crequestWithdrawal\u201d is misspelled.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-196:-\u201crequestwithdrawal\u201d-is-misspelled.", "labels": ["OpenZeppelin"]}, {"title": "Line 298: \u201cthe\u201d should be removed.", "body": "Line 298: \u201cthe\u201d should be removed.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-298:-\u201cthe\u201d-should-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "Line 322: \u201cmint the caller\u201d should be \u201cmint to the caller\u201d.", "body": "Line 322: \u201cmint the caller\u201d should be \u201cmint to the caller\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-322:-\u201cmint-the-caller\u201d-should-be-\u201cmint-to-the-caller\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 377: \u201cBurns\u201d should be \u201cburns\u201d.", "body": "Line 377: \u201cBurns\u201d should be \u201cburns\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-377:-\u201cburns\u201d-should-be-\u201cburns\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In SyntheticToken.sol:", "body": "In SyntheticToken.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-synthetictoken.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 8: there is an extra space before \u201cwho\u201d.", "body": "Line 8: there is an extra space before \u201cwho\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-8:-there-is-an-extra-space-before-\u201cwho\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In TokenFactory.sol:", "body": "In TokenFactory.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-tokenfactory.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 12: it should say \u201creturn it to the caller\u201d.", "body": "Line 12: it should say \u201creturn it to the caller\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-12:-it-should-say-\u201creturn-it-to-the-caller\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 13: \u201cadding new roles\u201d should be \u201cassigning the roles\u201d.", "body": "Line 13: \u201cadding new roles\u201d should be \u201cassigning the roles\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-13:-\u201cadding-new-roles\u201d-should-be-\u201cassigning-the-roles\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 16: \u201ctokens\u201d should be \u201ctoken\u2019s\u201d.", "body": "Line 16: \u201ctokens\u201d should be \u201ctoken\u2019s\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#line-16:-\u201ctokens\u201d-should-be-\u201ctoken\u2019s\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1298.", "body": "Update: Fixed in PR#1298.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1298.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unnecessary imports", "body": "[N15] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#[n15]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.", "body": "In the PricelessPositionManager and Liquidatable contracts, consider removing the imports statement for the Testable contract, as this contract is never used in any of them. Similarly, consider removing the unused import for the FixedPoint library in the ExpiringMultiParty contract.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#in-the-pricelesspositionmanager-and-liquidatable-contracts,-consider-removing-the-imports-statement-for-the-testable-contract,-as-this-contract-is-never-used-in-any-of-them.-similarly,-consider-removing-the-unused-import-for-the-fixedpoint-library-in-the-expiringmultiparty-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1299 and PR#1236.", "body": "Update: Fixed in PR#1299 and PR#1236.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-2#update:-fixed-in-pr#1299-and-pr#1236.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Unexpected initial round", "body": "[N01] Unexpected initial round", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n01]-unexpected-initial-round", "labels": ["OpenZeppelin"]}, {"title": "As explained in the comment for the computeCurrentRoundId function of the VoteTiming library, the round ID depends on the global timestamp but not on the lifetime of the system. Although this is a reasonable choice to simplify the implementation, it has the surprising consequence that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one. To favor readability, consider stating this behavior explicitly in the function\u2019s comments.", "body": "As explained in the comment for the computeCurrentRoundId function of the VoteTiming library, the round ID depends on the global timestamp but not on the lifetime of the system. Although this is a reasonable choice to simplify the implementation, it has the surprising consequence that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one. To favor readability, consider stating this behavior explicitly in the function\u2019s comments.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#as-explained-in-the-comment-for-the-computecurrentroundid-function-of-the-votetiming-library,-the-round-id-depends-on-the-global-timestamp-but-not-on-the-lifetime-of-the-system.-although-this-is-a-reasonable-choice-to-simplify-the-implementation,-it-has-the-surprising-consequence-that-the-initial-round-id-starts-at-an-arbitrary-number-(that-increments,-as-expected,-for-subsequent-rounds)-instead-of-zero-or-one.-to-favor-readability,-consider-stating-this-behavior-explicitly-in-the-function\u2019s-comments.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1272.", "body": "Update: Fixed in PR#1272.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1272.", "labels": ["OpenZeppelin"]}, {"title": "[N02] TODOs in code", "body": "[N02] TODOs in code", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n02]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for example line 65 of ResultComputation.sol, line 7 of ContractCreator.sol or line 194 of FixedPoint.sol.", "body": "There are \u201cTODO\u201d comments in the code base that should be removed and instead tracked in the project\u2019s backlog of issues. See for example line 65 of ResultComputation.sol, line 7 of ContractCreator.sol or line 194 of FixedPoint.sol.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-backlog-of-issues.-see-for-example-line-65-of-resultcomputation.sol,-line-7-of-contractcreator.sol-or-line-194-of-fixedpoint.sol.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1250.", "body": "Update: Fixed in PR#1250.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1250.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Use of uint type", "body": "[N03] Use of uint type", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n03]-use-of-uint-type", "labels": ["OpenZeppelin"]}, {"title": "Several variables are declared as uint throughout the code base. To favor explicitness, consider changing all instances of uint to uint256.", "body": "Several variables are declared as uint throughout the code base. To favor explicitness, consider changing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#several-variables-are-declared-as-uint-throughout-the-code-base.-to-favor-explicitness,-consider-changing-all-instances-of-uint-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1230.", "body": "Update: Fixed in PR#1230.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1230.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Typographical errors", "body": "[N04] Typographical errors", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n04]-typographical-errors", "labels": ["OpenZeppelin"]}, {"title": "In IdentifierWhitelist.sol:", "body": "In IdentifierWhitelist.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-identifierwhitelist.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 30 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "body": "Line 30 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-30-should-say-\u201cwill-succeed\u201d-instead-of-\u201cwill-be-succeed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Lines 31, 45 and62 have the same unclear parameter description.", "body": "Lines 31, 45 and62 have the same unclear parameter description.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-31,-45-and62-have-the-same-unclear-parameter-description.", "labels": ["OpenZeppelin"]}, {"title": "In IdentifierWhitelistInterface.sol:", "body": "In IdentifierWhitelistInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-identifierwhitelistinterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 12 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "body": "Line 12 should say \u201cwill succeed\u201d instead of \u201cwill be succeed\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-12-should-say-\u201cwill-succeed\u201d-instead-of-\u201cwill-be-succeed\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In MultiRole.sol:", "body": "In MultiRole.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-multirole.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 189 should say \u201can exclusive\u201d instead of \u201ca exclusive\u201d.", "body": "Line 189 should say \u201can exclusive\u201d instead of \u201ca exclusive\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-189-should-say-\u201can-exclusive\u201d-instead-of-\u201ca-exclusive\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 190 should say \u201cinitialMember\u201d instead of \u201cinitialMembers\u201d.", "body": "Line 190 should say \u201cinitialMember\u201d instead of \u201cinitialMembers\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-190-should-say-\u201cinitialmember\u201d-instead-of-\u201cinitialmembers\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In OracleInterface.sol:", "body": "In OracleInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-oracleinterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Lines 13, 21 and 30 contain the extra word \u201cof\u201d.", "body": "Lines 13, 21 and 30 contain the extra word \u201cof\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-13,-21-and-30-contain-the-extra-word-\u201cof\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 31 misspells \u201cidentifier\u201d.", "body": "Line 31 misspells \u201cidentifier\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-31-misspells-\u201cidentifier\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In Registry.sol:", "body": "In Registry.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-registry.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 127 should say \u201cfrom the calling contract\u201d instead of \u201cto the calling contract\u201d.", "body": "Line 127 should say \u201cfrom the calling contract\u201d instead of \u201cto the calling contract\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-127-should-say-\u201cfrom-the-calling-contract\u201d-instead-of-\u201cto-the-calling-contract\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In ResultComputation.sol:", "body": "In ResultComputation.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-resultcomputation.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 55 has the extra word \u201cbeen\u201d.", "body": "Line 55 has the extra word \u201cbeen\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-55-has-the-extra-word-\u201cbeen\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 95 has the extra word \u201ccorrectly\u201d.", "body": "Line 95 has the extra word \u201ccorrectly\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-95-has-the-extra-word-\u201ccorrectly\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In Voting.sol:", "body": "In Voting.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-voting.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 215 has an extra word \u201cof\u201d.", "body": "Line 215 has an extra word \u201cof\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-215-has-an-extra-word-\u201cof\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 279 says \u201ctime\u201d instead of \u201ctype\u201d.", "body": "Line 279 says \u201ctime\u201d instead of \u201ctype\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-279-says-\u201ctime\u201d-instead-of-\u201ctype\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 279 should say \u201can identifier\u201d instead of \u201ca identifier\u201d.", "body": "Line 279 should say \u201can identifier\u201d instead of \u201ca identifier\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-279-should-say-\u201can-identifier\u201d-instead-of-\u201ca-identifier\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 280 misspells the word \u201clist\u201d.", "body": "Line 280 misspells the word \u201clist\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-280-misspells-the-word-\u201clist\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Lines 314 and 346 have the extra word \u201cis\u201d.", "body": "Lines 314 and 346 have the extra word \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-314-and-346-have-the-extra-word-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 396 references EncryptedSender.sol but there is no such file in the repository.", "body": "Line 396 references EncryptedSender.sol but there is no such file in the repository.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-396-references-encryptedsender.sol-but-there-is-no-such-file-in-the-repository.", "labels": ["OpenZeppelin"]}, {"title": "Lines 605 and 614 should say \u201cround\u2019s\u201d instead of \u201crounds\u201d.", "body": "Lines 605 and 614 should say \u201cround\u2019s\u201d instead of \u201crounds\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#lines-605-and-614-should-say-\u201cround\u2019s\u201d-instead-of-\u201crounds\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 711 misspells the word \u201csnapshotted\u201d.", "body": "Line 711 misspells the word \u201csnapshotted\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-711-misspells-the-word-\u201csnapshotted\u201d.", "labels": ["OpenZeppelin"]}, {"title": "In VotingInterface.sol:", "body": "In VotingInterface.sol:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-votinginterface.sol:", "labels": ["OpenZeppelin"]}, {"title": "Line 46 has the extra word \u201cis\u201d.", "body": "Line 46 has the extra word \u201cis\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-46-has-the-extra-word-\u201cis\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 47 describes the salt parameter in a confusing way.", "body": "Line 47 describes the salt parameter in a confusing way.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-47-describes-the-salt-parameter-in-a-confusing-way.", "labels": ["OpenZeppelin"]}, {"title": "Line 56 should say \u201carray of structs\u201d instead of \u201cstruct\u201d.", "body": "Line 56 should say \u201carray of structs\u201d instead of \u201cstruct\u201d.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-56-should-say-\u201carray-of-structs\u201d-instead-of-\u201cstruct\u201d.", "labels": ["OpenZeppelin"]}, {"title": "Line 106 describes a named return parameter (totalRewardToIssue) but the name is not part of the function signature.", "body": "Line 106 describes a named return parameter (totalRewardToIssue) but the name is not part of the function signature.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-106-describes-a-named-return-parameter-(totalrewardtoissue)-but-the-name-is-not-part-of-the-function-signature.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1206.", "body": "Update: Fixed in PR#1206.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1206.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistent use of SafeERC20 contract", "body": "[N05] Inconsistent use of SafeERC20 contract", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n05]-inconsistent-use-of-safeerc20-contract", "labels": ["OpenZeppelin"]}, {"title": "line 29 of", "body": "line 29 of", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-29-of", "labels": ["OpenZeppelin"]}, {"title": "line 71 of", "body": "OpenZeppelins SafeERC20 library is used for ERC20 operations.  To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.  Update: Fixed in PR#1205.  [N06] Inconsistencies in coding style  Solidity Style Guide were found. For example, internal functions in lines  37 and  47 of  start with an underscore,  others do not.  Taking into consideration how much value a consistent coding style adds to the projects readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.  Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.  [N07] Naming issues  In the MultiRole contract:  The resetMember function should be renamed to resetExclusiveMember.  The getMember function should be renamed to getExclusiveMember.  The addMember function should be renamed to addSharedMember.  The removeMember function should be renamed to removeSharedMember.  In the Withdrawable contract:  The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.  In the Store contract:  The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.  The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.  In the EncryptedStore contract:  The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.  In the Governor contract:  The _uintToBytes function should be renamed to _uintToBytes32.  In the Voting contract:  The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.  In the FixedPoint contract:  The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.  Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.  [N08] Potentially differing time sources in testing environment  The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.  Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.  [N09] Named return variables  Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.  [N10] Consider warning voters about salt reuse  When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the systems expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.  Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.  Update: Fixed in PR#1273.  [N11] Hardcoded condition in require statement  To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.  Update: Fixed in PR#1228.  [N12] Inconsistent NatSpec usage  The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.  Update: Fixed in PR#1270.  [N13] Redundant inheritance from MultiRole contract  DesignatedVoting and  Store inherit from both  Update: Fixed in PR#1203. It should be noted that the related import s", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#line-71-of", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s SafeERC20 library is used for ERC20 operations.", "body": "OpenZeppelin\u2019s SafeERC20 library is used for ERC20 operations.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#openzeppelin\u2019s-safeerc20-library-is-used-for-erc20-operations.", "labels": ["OpenZeppelin"]}, {"title": "To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.", "body": "To be consistent throughout the code base and avoid confusion, consider modifying the Withdrawable and Store contracts to use the SafeERC20 library.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#to-be-consistent-throughout-the-code-base-and-avoid-confusion,-consider-modifying-the-withdrawable-and-store-contracts-to-use-the-safeerc20-library.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1205.", "body": "Update: Fixed in PR#1205.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1205.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistencies in coding style", "body": "[N06] Inconsistencies in coding style", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n06]-inconsistencies-in-coding-style", "labels": ["OpenZeppelin"]}, {"title": "Solidity Style Guide were found. For example, internal functions in lines", "body": "Solidity Style Guide were found. For example, internal functions in lines", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#solidity-style-guide-were-found.-for-example,-internal-functions-in-lines", "labels": ["OpenZeppelin"]}, {"title": "37 and", "body": "37 and", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#37-and", "labels": ["OpenZeppelin"]}, {"title": "47 of", "body": "47 of", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#47-of", "labels": ["OpenZeppelin"]}, {"title": "start with an underscore,", "body": "start with an underscore,", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#start-with-an-underscore,", "labels": ["OpenZeppelin"]}, {"title": "others do not.", "body": "others do not.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#others-do-not.", "labels": ["OpenZeppelin"]}, {"title": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.", "body": "Update: Fixed in PR#1271. The related STYLE.md file has been updated accordingly in PR#1286.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#update:-fixed-in-pr#1271.-the-related-style.md-file-has-been-updated-accordingly-in-pr#1286.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Naming issues", "body": "[N07] Naming issues", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#[n07]-naming-issues", "labels": ["OpenZeppelin"]}, {"title": "In the MultiRole contract:", "body": "In the MultiRole contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-multirole-contract:", "labels": ["OpenZeppelin"]}, {"title": "The resetMember function should be renamed to resetExclusiveMember.", "body": "The resetMember function should be renamed to resetExclusiveMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-resetmember-function-should-be-renamed-to-resetexclusivemember.", "labels": ["OpenZeppelin"]}, {"title": "The getMember function should be renamed to getExclusiveMember.", "body": "The getMember function should be renamed to getExclusiveMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-getmember-function-should-be-renamed-to-getexclusivemember.", "labels": ["OpenZeppelin"]}, {"title": "The addMember function should be renamed to addSharedMember.", "body": "The addMember function should be renamed to addSharedMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-addmember-function-should-be-renamed-to-addsharedmember.", "labels": ["OpenZeppelin"]}, {"title": "The removeMember function should be renamed to removeSharedMember.", "body": "The removeMember function should be renamed to removeSharedMember.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-removemember-function-should-be-renamed-to-removesharedmember.", "labels": ["OpenZeppelin"]}, {"title": "In the Withdrawable contract:", "body": "In the Withdrawable contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-withdrawable-contract:", "labels": ["OpenZeppelin"]}, {"title": "The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.", "body": "The owner parameter of the createWithdrawRole function should be renamed to withdrawerAddress.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-owner-parameter-of-the-createwithdrawrole-function-should-be-renamed-to-withdraweraddress.", "labels": ["OpenZeppelin"]}, {"title": "In the Store contract:", "body": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.  The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.  In the EncryptedStore contract:  The contract name EncryptedStore is misleading, as it does not actually enforce any kind of encryption. It should be renamed to MessageStore or similar.  In the Governor contract:  The _uintToBytes function should be renamed to _uintToBytes32.  In the Voting contract:  The getPendingRequests function should be renamed to getActiveRequests or similar, since it only returns active price requests. In particular, it does not return requests scheduled to be resolved in a future round.  In the FixedPoint contract:  The divRaw variable should be renamed to aScaled or similar, since it has nothing to do with division.  Update: Fixed in PR#1227, PR#1231 and PR#1204. The MultiRole library will remain unchanged, as well as the getPendingRequests function of the Voting contract.  [N08] Potentially differing time sources in testing environment  The Testable contract is a base contract from which all contracts that need to mock time changes in testnets should inherit. If several contracts of the UMA protocol derive from the Testable contract, then for each change in time all contracts must be updated at the same timestamp to maintain a consistent time across the system. Otherwise there might exist multiple time sources with differing times, potentially causing unexpected failures during testing. Consider implementing a pattern that keeps a single source of time in testing environments.  Update: Fixed in PR#1236. All contracts use a shared Timer contract during testing to obtain the mocked time.  [N09] Named return variables  Named return variables are used inconsistently throughout the code base. For example, the computeCurrentRoundId and computeRoundEndTime functions of the VoteTiming library have named return variables in the function signature but return their results directly.  Consider removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This should improve both explicitness and readability of the project.  Update: Fixed in PR#1229. Named returns are only consistently used in functions that return multiple values.  [N10] Consider warning voters about salt reuse  When voters reveal their previously committed vote using the revealVote function of the Voting contract, they must provide the salt used to mask the vote hash. Since transaction data is public, the salt will be revealed with the vote. While this is the systems expected behavior, it assumes that voters will never reuse the same pair of salt and price. Otherwise their commits could be easily disclosed in advance.  Since this is a common mistake, consider adding user-friendly documentation, both in docstrings and external documentation, stating the risks of reusing salts in the commit and reveal voting scheme.  Update: Fixed in PR#1273.  [N11] Hardcoded condition in require statement  To favor simplicity, consider replacing the require statement in line 114 of MultiRole.sol with a revert statement.  Update: Fixed in PR#1228.  [N12] Inconsistent NatSpec usage  The code base uses the Ethereum Natural Specification (NatSpec) format inconsistently. In particular the @param and @return tags are often missing. Consider adding the missing tags to all contracts and functions.  Update: Fixed in PR#1270.  [N13] Redundant inheritance from MultiRole contract  DesignatedVoting and  Store inherit from both  Update: Fixed in PR#1203. It should be noted that the related import statements were not removed.  [N14] Untested, undocumented behavior of late penalty fee  The computeRegularFee function of the Store contract computes a penalty fee that is to be paid if the regular fee is overdue. The penalty fee is expected to be computed per overdue week and currently is always floored. For example, if the regular fee is more than a week overdue but less than two, the penalty fee will be computed as if a single week had passed. While this appears to be the systems expected behavior, it was found to be undocumented and barely tested, which may cause confusions in developers, auditors and users alike.  Consider explicitly documenting the behavior of the penalty fee and adding relevant unit tests to ensure the system behaves as intended.  Update: Fixed in PR#1251.  [N15] Unused encrypted vote  When a voter commits to a price, they can optionally include an encrypted version of their vote to be stored in the Voting contract. This value is never decrypted, verified against their hash or processed in any way within the EVM. Instead, it simply uses the EVM as a temporary storage location so that voters do not need to save their vote c", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-store-contract:", "labels": ["OpenZeppelin"]}, {"title": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.", "body": "The computeFinalFee function should be renamed as it does not actually compute anything. If keeping the name for consistency, this should be explicitly stated in docstrings to avoid confusions.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-computefinalfee-function-should-be-renamed-as-it-does-not-actually-compute-anything.-if-keeping-the-name-for-consistency,-this-should-be-explicitly-stated-in-docstrings-to-avoid-confusions.", "labels": ["OpenZeppelin"]}, {"title": "The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.", "body": "The fixedOracleFeePerSecond and weeklyDelayFee variables should be renamed to fixedOracleFeePerSecondPerPFC and weeklyDelayFeePerPFC or similar.", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#the-fixedoraclefeepersecond-and-weeklydelayfee-variables-should-be-renamed-to-fixedoraclefeepersecondperpfc-and-weeklydelayfeeperpfc-or-similar.", "labels": ["OpenZeppelin"]}, {"title": "In the EncryptedStore contract:", "body": "In the EncryptedStore contract:", "html_url": "https://blog.openzeppelin.com/uma-audit-phase-1#in-the-encryptedstore-contract:", "labels": ["OpenZeppelin"]}]