[{"title": "The USD monetary base is tied to the centralized policies of the Federal Reserve team. In contrast with most other digital assets, where supply is algorithmically pre-determined, the USD token\u2019s supply is subject to central planning and manual minting by the team. This means the USD tokens are produced on an unpredictable pattern of increasing inflation.", "body": "The USD monetary base is tied to the centralized policies of the Federal Reserve team. In contrast with most other digital assets, where supply is algorithmically pre-determined, the USD token\u2019s supply is subject to central planning and manual minting by the team. This means the USD tokens are produced on an unpredictable pattern of increasing inflation.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#the-usd-monetary-base-is-tied-to-the-centralized-policies-of-the-federal-reserve-team.-in-contrast-with-most-other-digital-assets,-where-supply-is-algorithmically-pre-determined,-the-usd-token\u2019s-supply-is-subject-to-central-planning-and-manual-minting-by-the-team.-this-means-the-usd-tokens-are-produced-on-an-unpredictable-pattern-of-increasing-inflation.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the Federal Reserve\u2019s ability to mint new USD tokens at discretion.", "body": "Consider removing the Federal Reserve\u2019s ability to mint new USD tokens at discretion.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-removing-the-federal-reserve\u2019s-ability-to-mint-new-usd-tokens-at-discretion.", "labels": ["OpenZeppelin"]}, {"title": "Not backed by any physical\u00a0asset", "body": "Not backed by any physical\u00a0asset", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#not-backed-by-any-physical\u00a0asset", "labels": ["OpenZeppelin"]}, {"title": "USD token is what is called a \u201cfiat\u201d currency. Fiat money is an intrinsically worthless object, that is deemed to be money by law (in this case, US law). This means that users of USD token are required to trust the US government to exist and operate correctly in order to use it. A black-swan scenario where the US government ceases to exist and enforce the USD token\u2019s value would cause a global financial crisis.", "body": "USD token is what is called a \u201cfiat\u201d currency. Fiat money is an intrinsically worthless object, that is deemed to be money by law (in this case, US law). This means that users of USD token are required to trust the US government to exist and operate correctly in order to use it. A black-swan scenario where the US government ceases to exist and enforce the USD token\u2019s value would cause a global financial crisis.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#usd-token-is-what-is-called-a-\u201cfiat\u201d-currency.-fiat-money-is-an-intrinsically-worthless-object,-that-is-deemed-to-be-money-by-law-(in-this-case,-us-law).-this-means-that-users-of-usd-token-are-required-to-trust-the-us-government-to-exist-and-operate-correctly-in-order-to-use-it.-a-black-swan-scenario-where-the-us-government-ceases-to-exist-and-enforce-the-usd-token\u2019s-value-would-cause-a-global-financial-crisis.", "labels": ["OpenZeppelin"]}, {"title": "Consider reverting to the gold standard and having each USD token represent a fixed amount of gold.", "body": "Consider reverting to the gold standard and having each USD token represent a fixed amount of gold.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-reverting-to-the-gold-standard-and-having-each-usd-token-represent-a-fixed-amount-of-gold.", "labels": ["OpenZeppelin"]}, {"title": "Heavily depreciating asset", "body": "Heavily depreciating asset", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#heavily-depreciating-asset", "labels": ["OpenZeppelin"]}, {"title": "The USD token has been alarmingly depreciating in value over the past 100+ years. $1 in 1860 had the same purchasing power as $28.53 in 2018. This means someone hiding $1000 in 1860 would now have the equivalent of only $35.05 at their time. This heavily undermines the token\u2019s usefulness, and damages trust from its users.", "body": "The USD token has been alarmingly depreciating in value over the past 100+ years. $1 in 1860 had the same purchasing power as $28.53 in 2018. This means someone hiding $1000 in 1860 would now have the equivalent of only $35.05 at their time. This heavily undermines the token\u2019s usefulness, and damages trust from its users.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#the-usd-token-has-been-alarmingly-depreciating-in-value-over-the-past-100+-years.-$1-in-1860-had-the-same-purchasing-power-as-$28.53-in-2018.-this-means-someone-hiding-$1000-in-1860-would-now-have-the-equivalent-of-only-$35.05-at-their-time.-this-heavily-undermines-the-token\u2019s-usefulness,-and-damages-trust-from-its-users.", "labels": ["OpenZeppelin"]}, {"title": "Consider adopting a stabler monetary policy.", "body": "Consider adopting a stabler monetary policy.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-adopting-a-stabler-monetary-policy.", "labels": ["OpenZeppelin"]}, {"title": "High energy usage and environmental impact", "body": "High energy usage and environmental impact", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#high-energy-usage-and-environmental-impact", "labels": ["OpenZeppelin"]}, {"title": "The token\u2019s physical implementation requires huge amounts of energy for printing, counterfeit management, as well as transportation. Consider switching to a crypto-based currency to reduce environmental impact.", "body": "The token\u2019s physical implementation requires huge amounts of energy for printing, counterfeit management, as well as transportation. Consider switching to a crypto-based currency to reduce environmental impact.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#the-token\u2019s-physical-implementation-requires-huge-amounts-of-energy-for-printing,-counterfeit-management,-as-well-as-transportation.-consider-switching-to-a-crypto-based-currency-to-reduce-environmental-impact.", "labels": ["OpenZeppelin"]}, {"title": "Undetermined confirmation time for transactions", "body": "Undetermined confirmation time for transactions", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#undetermined-confirmation-time-for-transactions", "labels": ["OpenZeppelin"]}, {"title": "Electronic transactions of USD may be rolled back by a centralized agency at the request of the payer, at an arbitrary time after being executed (sometimes even months after). Compared to the average confirmation time in the order of minutes in all major currencies, this time is unacceptable for most use cases, as merchants cannot reliably count on the payment received for a provided service or good.", "body": "Electronic transactions of USD may be rolled back by a centralized agency at the request of the payer, at an arbitrary time after being executed (sometimes even months after). Compared to the average confirmation time in the order of minutes in all major currencies, this time is unacceptable for most use cases, as merchants cannot reliably count on the payment received for a provided service or good.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#electronic-transactions-of-usd-may-be-rolled-back-by-a-centralized-agency-at-the-request-of-the-payer,-at-an-arbitrary-time-after-being-executed-(sometimes-even-months-after).-compared-to-the-average-confirmation-time-in-the-order-of-minutes-in-all-major-currencies,-this-time-is-unacceptable-for-most-use-cases,-as-merchants-cannot-reliably-count-on-the-payment-received-for-a-provided-service-or-good.", "labels": ["OpenZeppelin"]}, {"title": "Consider settling transactions after a reasonable period of time, or switching to another currency altogether for managing payments.", "body": "Consider settling transactions after a reasonable period of time, or switching to another currency altogether for managing payments.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-settling-transactions-after-a-reasonable-period-of-time,-or-switching-to-another-currency-altogether-for-managing-payments.", "labels": ["OpenZeppelin"]}, {"title": "Unappealing design", "body": "Unappealing design", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#unappealing-design", "labels": ["OpenZeppelin"]}, {"title": "Consider redesigning the USD token branding for a more modern look and feel.", "body": "Consider redesigning the USD token branding for a more modern look and feel.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-redesigning-the-usd-token-branding-for-a-more-modern-look-and-feel.", "labels": ["OpenZeppelin"]}, {"title": "Highly susceptible to\u00a0theft", "body": "Highly susceptible to\u00a0theft", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#highly-susceptible-to\u00a0theft", "labels": ["OpenZeppelin"]}, {"title": "Physical US Dollar bills are highly susceptible to theft, especially through the \u201cpickpocketing\u201d attack vector. Any malicious user with enough proficiency in this kind of attack can remove an arbitrary amount of US dollars from an unsuspecting user, by substracting their entire wallet.", "body": "Physical US Dollar bills are highly susceptible to theft, especially through the \u201cpickpocketing\u201d attack vector. Any malicious user with enough proficiency in this kind of attack can remove an arbitrary amount of US dollars from an unsuspecting user, by substracting their entire wallet.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#physical-us-dollar-bills-are-highly-susceptible-to-theft,-especially-through-the-\u201cpickpocketing\u201d-attack-vector.-any-malicious-user-with-enough-proficiency-in-this-kind-of-attack-can-remove-an-arbitrary-amount-of-us-dollars-from-an-unsuspecting-user,-by-substracting-their-entire-wallet.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding some form of password-based protection to US Dollar wallets.", "body": "Consider adding some form of password-based protection to US Dollar wallets.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-adding-some-form-of-password-based-protection-to-us-dollar-wallets.", "labels": ["OpenZeppelin"]}, {"title": "Unsuited for global transfers", "body": "Unsuited for global transfers", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#unsuited-for-global-transfers", "labels": ["OpenZeppelin"]}, {"title": "US dollars can be transferred in either physical or electronic form. Physical form, while convenient for exchanging small amounts with neighbouring parties (note that this use case was already covered by barter), is extremely cumbersome for long distance transfers, requiring the usage of trusted third party services. Furthermore, these third parties employ transportation methods to provide this service, which consume extremely high levels of energy, compared to those required for a simple cryptocurrency transfer.", "body": "US dollars can be transferred in either physical or electronic form. Physical form, while convenient for exchanging small amounts with neighbouring parties (note that this use case was already covered by barter), is extremely cumbersome for long distance transfers, requiring the usage of trusted third party services. Furthermore, these third parties employ transportation methods to provide this service, which consume extremely high levels of energy, compared to those required for a simple cryptocurrency transfer.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#us-dollars-can-be-transferred-in-either-physical-or-electronic-form.-physical-form,-while-convenient-for-exchanging-small-amounts-with-neighbouring-parties-(note-that-this-use-case-was-already-covered-by-barter),-is-extremely-cumbersome-for-long-distance-transfers,-requiring-the-usage-of-trusted-third-party-services.-furthermore,-these-third-parties-employ-transportation-methods-to-provide-this-service,-which-consume-extremely-high-levels-of-energy,-compared-to-those-required-for-a-simple-cryptocurrency-transfer.", "labels": ["OpenZeppelin"]}, {"title": "On the other hand, in electronic form, US dollar transfers or payments require the approval of several intermediate agencies, which may demand arbitrary documentation to authorize each individual step.", "body": "On the other hand, in electronic form, US dollar transfers or payments require the approval of several intermediate agencies, which may demand arbitrary documentation to authorize each individual step.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#on-the-other-hand,-in-electronic-form,-us-dollar-transfers-or-payments-require-the-approval-of-several-intermediate-agencies,-which-may-demand-arbitrary-documentation-to-authorize-each-individual-step.", "labels": ["OpenZeppelin"]}, {"title": "Consider setting up local exchanges from USD to cryptocurrencies, to use an efficient method for global transfers.", "body": "Consider setting up local exchanges from USD to cryptocurrencies, to use an efficient method for global transfers.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#consider-setting-up-local-exchanges-from-usd-to-cryptocurrencies,-to-use-an-efficient-method-for-global-transfers.", "labels": ["OpenZeppelin"]}, {"title": "We found it really hard to find up to date documentation on this project. Please improve documentation to help users and future auditors understand and evaluate the project.", "body": "We found it really hard to find up to date documentation on this project. Please improve documentation to help users and future auditors understand and evaluate the project.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#we-found-it-really-hard-to-find-up-to-date-documentation-on-this-project.-please-improve-documentation-to-help-users-and-future-auditors-understand-and-evaluate-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Even though the token is burnable, we found the process to be rather anti-ecological. Consider minting new tokens with more eco-friendly materials.", "body": "Even though the token is burnable, we found the process to be rather anti-ecological. Consider minting new tokens with more eco-friendly materials.", "html_url": "https://blog.openzeppelin.com/us-dollar-audit-90dbcbb0258f#even-though-the-token-is-burnable,-we-found-the-process-to-be-rather-anti-ecological.-consider-minting-new-tokens-with-more-eco-friendly-materials.", "labels": ["OpenZeppelin"]}, {"title": "The last release of the OpenZeppelin framework includes a parameterized ERC20 token contract called DetailedERC20. Consider inheriting ElementToken from it to reuse that functionality.", "body": "The last release of the OpenZeppelin framework includes a parameterized ERC20 token contract called DetailedERC20. Consider inheriting ElementToken from it to reuse that functionality.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#the-last-release-of-the-openzeppelin-framework-includes-a-parameterized-erc20-token-contract-called-detailederc20.-consider-inheriting-elementtoken-from-it-to-reuse-that-functionality.", "labels": ["OpenZeppelin"]}, {"title": "Consider reusing OpenZeppelin\u2019s PausableToken, which already makes all token fuctionality pausable.", "body": "Consider reusing OpenZeppelin\u2019s PausableToken, which already makes all token fuctionality pausable.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#consider-reusing-openzeppelin\u2019s-pausabletoken,-which-already-makes-all-token-fuctionality-pausable.", "labels": ["OpenZeppelin"]}, {"title": "It is possible to create an instance of ElementToken with a zero-valued totalSupply. Consider adding a precondition in the constructor function.", "body": "It is possible to create an instance of ElementToken with a zero-valued totalSupply. Consider adding a precondition in the constructor function.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#it-is-possible-to-create-an-instance-of-elementtoken-with-a-zero-valued-totalsupply.-consider-adding-a-precondition-in-the-constructor-function.", "labels": ["OpenZeppelin"]}, {"title": "The ElementToken contract initializes sets initial values for the state variables name, symbol and decimals unnecessarily. Consider removing the initialization for each.", "body": "The ElementToken contract initializes sets initial values for the state variables name, symbol and decimals unnecessarily. Consider removing the initialization for each.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#the-elementtoken-contract-initializes-sets-initial-values-for-the-state-variables-name,-symbol-and-decimals-unnecessarily.-consider-removing-the-initialization-for-each.", "labels": ["OpenZeppelin"]}, {"title": "The increaseApproval and decreaseApproval functions of the ElementToken contract define a name for the return value (success) which is unused. Consider removing said variable.", "body": "The increaseApproval and decreaseApproval functions of the ElementToken contract define a name for the return value (success) which is unused. Consider removing said variable.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#the-increaseapproval-and-decreaseapproval-functions-of-the-elementtoken-contract-define-a-name-for-the-return-value-(success)-which-is-unused.-consider-removing-said-variable.", "labels": ["OpenZeppelin"]}, {"title": "It is important to specify function visibility modifiers explicitly to avoid confusion. Consider adding public to the ElementToken constructor function.", "body": "It is important to specify function visibility modifiers explicitly to avoid confusion. Consider adding public to the ElementToken constructor function.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#it-is-important-to-specify-function-visibility-modifiers-explicitly-to-avoid-confusion.-consider-adding-public-to-the-elementtoken-constructor-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider following the conventions proposed by the Solidity style guide for the transfer and transferFrom functions, according to which function visibility modifiers should come before any custom modifiers.", "body": "Consider following the conventions proposed by the Solidity style guide for the transfer and transferFrom functions, according to which function visibility modifiers should come before any custom modifiers.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#consider-following-the-conventions-proposed-by-the-solidity-style-guide-for-the-transfer-and-transferfrom-functions,-according-to-which-function-visibility-modifiers-should-come-before-any-custom-modifiers.", "labels": ["OpenZeppelin"]}, {"title": "Consider upgrading to the latest version of Solidity (0.4.19), which comes with the last release of Truffle.", "body": "Consider upgrading to the latest version of Solidity (0.4.19), which comes with the last release of Truffle.", "html_url": "https://blog.openzeppelin.com/erc20-element-token-audit-2128b50e37cd#consider-upgrading-to-the-latest-version-of-solidity-(0.4.19),-which-comes-with-the-last-release-of-truffle.", "labels": ["OpenZeppelin"]}, {"title": "Use safe math (new)", "body": "Use safe math (new)", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#use-safe-math-(new)", "labels": ["OpenZeppelin"]}, {"title": "An attacker can manipulate the tentative winning outcome in case a fork", "body": "An attacker can manipulate the tentative winning outcome in case a fork", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#an-attacker-can-manipulate-the-tentative-winning-outcome-in-case-a-fork", "labels": ["OpenZeppelin"]}, {"title": "An attacker can prevent forking-market traders from claiming their fees", "body": "An attacker can prevent forking-market traders from claiming their fees", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#an-attacker-can-prevent-forking-market-traders-from-claiming-their-fees", "labels": ["OpenZeppelin"]}, {"title": "Markets can be migrated after finalization", "body": "Markets can be migrated after finalization", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-can-be-migrated-after-finalization", "labels": ["OpenZeppelin"]}, {"title": "Markets are not sanity-checked in trading module", "body": "Markets are not sanity-checked in trading module", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-are-not-sanity-checked-in-trading-module", "labels": ["OpenZeppelin"]}, {"title": "Universe open interest can be manipulated by an attacker", "body": "Universe open interest can be manipulated by an attacker", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#universe-open-interest-can-be-manipulated-by-an-attacker", "labels": ["OpenZeppelin"]}, {"title": "Complete sets of shares can be purchased for free", "body": "Complete sets of shares can be purchased for free", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#complete-sets-of-shares-can-be-purchased-for-free", "labels": ["OpenZeppelin"]}, {"title": "Alternative denomination tokens can be stolen from a Reporting Window", "body": "Alternative denomination tokens can be stolen from a Reporting Window", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#alternative-denomination-tokens-can-be-stolen-from-a-reporting-window", "labels": ["OpenZeppelin"]}, {"title": "Order info is repeated as arguments when cancelling an order", "body": "Order info is repeated as arguments when cancelling an order", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#order-info-is-repeated-as-arguments-when-cancelling-an-order", "labels": ["OpenZeppelin"]}, {"title": "It may not be possible to stake tokens on an invalid outcome", "body": "It may not be possible to stake tokens on an invalid outcome", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#it-may-not-be-possible-to-stake-tokens-on-an-invalid-outcome", "labels": ["OpenZeppelin"]}, {"title": "Markets ether balance can be stolen by the first reporter", "body": "Markets ether balance can be stolen by the first reporter", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-ether-balance-can-be-stolen-by-the-first-reporter", "labels": ["OpenZeppelin"]}, {"title": "All reporting fees can be frozen by a Market creator", "body": "All reporting fees can be frozen by a Market creator", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#all-reporting-fees-can-be-frozen-by-a-market-creator", "labels": ["OpenZeppelin"]}, {"title": "A market owner can block the Participation token purchase", "body": "A market owner can block the Participation token purchase", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#a-market-owner-can-block-the-participation-token-purchase", "labels": ["OpenZeppelin"]}, {"title": "Extractable functionality is not necessary and error prone", "body": "Extractable functionality is not necessary and error prone", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#extractable-functionality-is-not-necessary-and-error-prone", "labels": ["OpenZeppelin"]}, {"title": "Non-potential-winning dispute crowdsourcers can redeem their REP tokens", "body": "Non-potential-winning dispute crowdsourcers can redeem their REP tokens", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#non-potential-winning-dispute-crowdsourcers-can-redeem-their-rep-tokens", "labels": ["OpenZeppelin"]}, {"title": "Market number of ticks can be zero", "body": "Market number of ticks can be zero", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#market-number-of-ticks-can-be-zero", "labels": ["OpenZeppelin"]}, {"title": "Self-reference in market nudging mechanism", "body": "Self-reference in market nudging mechanism", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#self-reference-in-market-nudging-mechanism", "labels": ["OpenZeppelin"]}, {"title": "Tight coupling between contracts", "body": "Tight coupling between contracts", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#tight-coupling-between-contracts", "labels": ["OpenZeppelin"]}, {"title": "Anyone can trigger Augur events", "body": "Anyone can trigger Augur events", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#anyone-can-trigger-augur-events", "labels": ["OpenZeppelin"]}, {"title": "Cancelling an order with share tokens in escrow will fail", "body": "Cancelling an order with share tokens in escrow will fail", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#cancelling-an-order-with-share-tokens-in-escrow-will-fail", "labels": ["OpenZeppelin"]}, {"title": "Markets can be created with malicious Cash tokens", "body": "Markets can be created with malicious Cash tokens", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-can-be-created-with-malicious-cash-tokens", "labels": ["OpenZeppelin"]}, {"title": "Shareholders fees can be frozen by a malicious market creator", "body": "Shareholders fees can be frozen by a malicious market creator", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#shareholders-fees-can-be-frozen-by-a-malicious-market-creator", "labels": ["OpenZeppelin"]}, {"title": "Spender contracts cannot be re-approved if updated", "body": "Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted  Use safe math  Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Low Severity", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#spender-contracts-cannot-be-re-approved-if-updated", "labels": ["OpenZeppelin"]}, {"title": "Favor pull payments over push payments (new)", "body": "Favor pull payments over push payments (new)", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#favor-pull-payments-over-push-payments-(new)", "labels": ["OpenZeppelin"]}, {"title": "Integer index types are unnecessarily small", "body": "Integer index types are unnecessarily small", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#integer-index-types-are-unnecessarily-small", "labels": ["OpenZeppelin"]}, {"title": "Unbound iteration in arrays (new)", "body": "Unbound iteration in arrays (new)", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unbound-iteration-in-arrays-(new)", "labels": ["OpenZeppelin"]}, {"title": "Unbound iteration in arrays", "body": "Users are allowed to place orders for a market independently of their state  Unclear relation between MIN_ORDER_VALUE and MINIMUM_GAS_NEEDED  Reentrancy risk in FillOrder  Markets can be initially reported in a locked universe  Forking market can be migrated  Fork values for child universes must be manually updated  Trading contracts upgradeability may become useless  Controller does not guarantee that dev mode cannot be turned on again  Whitelisted contracts are not explicit to the user  Favor pull payments over push payments  It is possible to create orders for untrusted markets  Markets can be created in a locked universe  Eventually it will not be possible to produce further forks  Spender contracts cannot be re-approved if updated  Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted  Use safe math  Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Low Severity  Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted  Use safe math  Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Conclusion  Thirteen critical and ten high severity issues were found, along with recommendations on how to fix them. Additionally, some medium and lower severity issues were found and explained. Some changes were proposed to follow best practices and reduce the potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Augur project. The above should not be construed as investment advice or an offering of REP tokens. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unbound-iteration-in-arrays", "labels": ["OpenZeppelin"]}, {"title": "Users are allowed to place orders for a market independently of their state", "body": "Users are allowed to place orders for a market independently of their state", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#users-are-allowed-to-place-orders-for-a-market-independently-of-their-state", "labels": ["OpenZeppelin"]}, {"title": "Unclear relation between MIN_ORDER_VALUE and MINIMUM_GAS_NEEDED", "body": "Unclear relation between MIN_ORDER_VALUE and MINIMUM_GAS_NEEDED", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unclear-relation-between-min_order_value-and-minimum_gas_needed", "labels": ["OpenZeppelin"]}, {"title": "Reentrancy risk in FillOrder", "body": "Reentrancy risk in FillOrder", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#reentrancy-risk-in-fillorder", "labels": ["OpenZeppelin"]}, {"title": "Markets can be initially reported in a locked universe", "body": "Markets can be initially reported in a locked universe", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-can-be-initially-reported-in-a-locked-universe", "labels": ["OpenZeppelin"]}, {"title": "Forking market can be migrated", "body": "Forking market can be migrated", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#forking-market-can-be-migrated", "labels": ["OpenZeppelin"]}, {"title": "Fork values for child universes must be manually updated", "body": "Fork values for child universes must be manually updated", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#fork-values-for-child-universes-must-be-manually-updated", "labels": ["OpenZeppelin"]}, {"title": "Trading contracts upgradeability may become useless", "body": "Trading contracts upgradeability may become useless", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#trading-contracts-upgradeability-may-become-useless", "labels": ["OpenZeppelin"]}, {"title": "Controller does not guarantee that dev mode cannot be turned on again", "body": "Controller does not guarantee that dev mode cannot be turned on again", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#controller-does-not-guarantee-that-dev-mode-cannot-be-turned-on-again", "labels": ["OpenZeppelin"]}, {"title": "Whitelisted contracts are not explicit to the user", "body": "Whitelisted contracts are not explicit to the user", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#whitelisted-contracts-are-not-explicit-to-the-user", "labels": ["OpenZeppelin"]}, {"title": "Favor pull payments over push payments", "body": "It is possible to create orders for untrusted markets  Markets can be created in a locked universe  Eventually it will not be possible to produce further forks  Spender contracts cannot be re-approved if updated  Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted  Use safe math  Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Low Severity  Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted  Use safe math  Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Conclusion  Thirteen critical and ten high severity issues were found, along with recommendations on how to fix them. Additionally, some medium and lower severity issues were found and explained. Some changes were proposed to follow best practices and reduce the potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Augur project. The above should not be construed as investment advice or an offering of REP tokens. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#favor-pull-payments-over-push-payments", "labels": ["OpenZeppelin"]}, {"title": "It is possible to create orders for untrusted markets", "body": "It is possible to create orders for untrusted markets", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#it-is-possible-to-create-orders-for-untrusted-markets", "labels": ["OpenZeppelin"]}, {"title": "Markets can be created in a locked universe", "body": "Markets can be created in a locked universe", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-can-be-created-in-a-locked-universe", "labels": ["OpenZeppelin"]}, {"title": "Eventually it will not be possible to produce further forks", "body": "Eventually it will not be possible to produce further forks", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#eventually-it-will-not-be-possible-to-produce-further-forks", "labels": ["OpenZeppelin"]}, {"title": "Naming issues", "body": "Naming issues", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#naming-issues", "labels": ["OpenZeppelin"]}, {"title": "Repeated code for factory contracts", "body": "Repeated code for factory contracts", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#repeated-code-for-factory-contracts", "labels": ["OpenZeppelin"]}, {"title": "Unused boolean return values", "body": "Unused boolean return values", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unused-boolean-return-values", "labels": ["OpenZeppelin"]}, {"title": "Unsolved TODO comments", "body": "Unsolved TODO comments", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unsolved-todo-comments", "labels": ["OpenZeppelin"]}, {"title": "Instances of Map contract left in blockchain storage", "body": "Instances of Map contract left in blockchain storage", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#instances-of-map-contract-left-in-blockchain-storage", "labels": ["OpenZeppelin"]}, {"title": "Unused Set library", "body": "Unused Set library", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unused-set-library", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent usage of getter functions and state variables", "body": "Inconsistent usage of getter functions and state variables", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#inconsistent-usage-of-getter-functions-and-state-variables", "labels": ["OpenZeppelin"]}, {"title": "Use a standard toolchain for building contracts", "body": "Use a standard toolchain for building contracts", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#use-a-standard-toolchain-for-building-contracts", "labels": ["OpenZeppelin"]}, {"title": "No assertions for detecting broken invariants", "body": "No assertions for detecting broken invariants", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#no-assertions-for-detecting-broken-invariants", "labels": ["OpenZeppelin"]}, {"title": "Install OpenZeppelin via NPM", "body": "Install OpenZeppelin via NPM", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#install-openzeppelin-via-npm", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin standard tokens were modified", "body": "OpenZeppelin standard tokens were modified", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#openzeppelin-standard-tokens-were-modified", "labels": ["OpenZeppelin"]}, {"title": "Outdated OpenZeppelin\u2019s contracts", "body": "Outdated OpenZeppelin\u2019s contracts", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#outdated-openzeppelin\u2019s-contracts", "labels": ["OpenZeppelin"]}, {"title": "Outdated documentation", "body": "Outdated documentation", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#outdated-documentation", "labels": ["OpenZeppelin"]}, {"title": "Orders are vulnerable to front-running", "body": "Orders are vulnerable to front-running", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#orders-are-vulnerable-to-front-running", "labels": ["OpenZeppelin"]}, {"title": "Basic token implementation allows transfers to the zero address", "body": "Basic token implementation allows transfers to the zero address", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#basic-token-implementation-allows-transfers-to-the-zero-address", "labels": ["OpenZeppelin"]}, {"title": "Lack of Report abstraction", "body": "Lack of Report abstraction", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#lack-of-report-abstraction", "labels": ["OpenZeppelin"]}, {"title": "Universe open interest is not decremented in bad times", "body": "Universe open interest is not decremented in bad times", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#universe-open-interest-is-not-decremented-in-bad-times", "labels": ["OpenZeppelin"]}, {"title": "Markets can fork into more than N+1 universes, N being the number of outcomes (new)", "body": "Markets can fork into more than N+1 universes, N being the number of outcomes (new)", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-can-fork-into-more-than-n+1-universes,-n-being-the-number-of-outcomes-(new)", "labels": ["OpenZeppelin"]}, {"title": "Markets may fork in more than N+1 universes, N being the number of outcomes", "body": "Markets may fork in more than N+1 universes, N being the number of outcomes", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#markets-may-fork-in-more-than-n+1-universes,-n-being-the-number-of-outcomes", "labels": ["OpenZeppelin"]}, {"title": "When a market forks, stake tokens and disputes of other markets are reset", "body": "When a market forks, stake tokens and disputes of other markets are reset", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#when-a-market-forks,-stake-tokens-and-disputes-of-other-markets-are-reset", "labels": ["OpenZeppelin"]}, {"title": "Unchecked token transfers and approvals", "body": "Unchecked token transfers and approvals", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#unchecked-token-transfers-and-approvals", "labels": ["OpenZeppelin"]}, {"title": "ShareToken is unnecessarily whitelisted", "body": "ShareToken is unnecessarily whitelisted", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#sharetoken-is-unnecessarily-whitelisted", "labels": ["OpenZeppelin"]}, {"title": "Use safe math", "body": "Remove unused code  The Trade logic treats a lack of gas as a complete order fill  Market creators may not be able to collect their corresponding fees  Delegator memory allocation not working for arguments larger than 32 bytes  Delegator not working for return data greater than 32 bytes  Low Severity  Naming issues  Repeated code for factory contracts  Unused boolean return values  Unsolved TODO comments  Instances of Map contract left in blockchain storage  Unused Set library  Inconsistent usage of getter functions and state variables  Use a standard toolchain for building contracts  No assertions for detecting broken invariants  Install OpenZeppelin via NPM  OpenZeppelin standard tokens were modified  Outdated OpenZeppelins contracts  Outdated documentation  Orders are vulnerable to front-running  Basic token implementation allows transfers to the zero address  Lack of Report abstraction  Universe open interest is not decremented in bad times  Markets can fork into more than N+1 universes, N being the number of outcomes (new)  Markets may fork in more than N+1 universes, N being the number of outcomes  When a market forks, stake tokens and disputes of other markets are reset  Unchecked token transfers and approvals  ShareToken is unnecessarily whitelisted", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#use-safe-math", "labels": ["OpenZeppelin"]}, {"title": "Remove unused code", "body": "Remove unused code", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#remove-unused-code", "labels": ["OpenZeppelin"]}, {"title": "The Trade logic treats a lack of gas as a complete order fill", "body": "The Trade logic treats a lack of gas as a complete order fill", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#the-trade-logic-treats-a-lack-of-gas-as-a-complete-order-fill", "labels": ["OpenZeppelin"]}, {"title": "Market creators may not be able to collect their corresponding fees", "body": "Market creators may not be able to collect their corresponding fees", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#market-creators-may-not-be-able-to-collect-their-corresponding-fees", "labels": ["OpenZeppelin"]}, {"title": "Delegator memory allocation not working for arguments larger than 32 bytes", "body": "Delegator memory allocation not working for arguments larger than 32 bytes", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#delegator-memory-allocation-not-working-for-arguments-larger-than-32-bytes", "labels": ["OpenZeppelin"]}, {"title": "Delegator not working for return data greater than 32 bytes", "body": "Conclusion  Thirteen critical and ten high severity issues were found, along with recommendations on how to fix them. Additionally, some medium and lower severity issues were found and explained. Some changes were proposed to follow best practices and reduce the potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Augur project. The above should not be construed as investment advice or an offering of REP tokens. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/augur-core-audit-244160d77c09#delegator-not-working-for-return-data-greater-than-32-bytes", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete test\u00a0coverage", "body": "Incomplete test\u00a0coverage", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#incomplete-test\u00a0coverage", "labels": ["OpenZeppelin"]}, {"title": "Of the features implemented in MultiSigWallet, only the following are tested:", "body": "Of the features implemented in MultiSigWallet, only the following are tested:", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#of-the-features-implemented-in-multisigwallet,-only-the-following-are-tested:", "labels": ["OpenZeppelin"]}, {"title": "Funding a wallet", "body": "Funding a wallet", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#funding-a-wallet", "labels": ["OpenZeppelin"]}, {"title": "Submitting a transaction", "body": "Submitting a transaction", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#submitting-a-transaction", "labels": ["OpenZeppelin"]}, {"title": "Confirming a transaction", "body": "Confirming a transaction", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#confirming-a-transaction", "labels": ["OpenZeppelin"]}, {"title": "Changing the required number of confirmations", "body": "Changing the required number of confirmations", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#changing-the-required-number-of-confirmations", "labels": ["OpenZeppelin"]}, {"title": "Executing a transaction", "body": "Executing a transaction", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#executing-a-transaction", "labels": ["OpenZeppelin"]}, {"title": "A considerable amount of features are not tested, such as:", "body": "A considerable amount of features are not tested, such as:", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#a-considerable-amount-of-features-are-not-tested,-such-as:", "labels": ["OpenZeppelin"]}, {"title": "Adding an owner", "body": "Adding an owner", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#adding-an-owner", "labels": ["OpenZeppelin"]}, {"title": "Changing an owner", "body": "Changing an owner", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#changing-an-owner", "labels": ["OpenZeppelin"]}, {"title": "Removing an owner", "body": "Removing an owner", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#removing-an-owner", "labels": ["OpenZeppelin"]}, {"title": "Trying to add duplicate owners", "body": "Trying to add duplicate owners", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#trying-to-add-duplicate-owners", "labels": ["OpenZeppelin"]}, {"title": "Trying to remove all owners", "body": "Trying to remove all owners", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#trying-to-remove-all-owners", "labels": ["OpenZeppelin"]}, {"title": "Trying to set an invalid number of required approvals", "body": "Trying to set an invalid number of required approvals", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#trying-to-set-an-invalid-number-of-required-approvals", "labels": ["OpenZeppelin"]}, {"title": "An Owner trying to execute a transaction that is not yet approved by other owners", "body": "An Owner trying to execute a transaction that is not yet approved by other owners", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#an-owner-trying-to-execute-a-transaction-that-is-not-yet-approved-by-other-owners", "labels": ["OpenZeppelin"]}, {"title": "Non-owners trying to submit/approve/execute transactions", "body": "Non-owners trying to submit/approve/execute transactions", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#non-owners-trying-to-submit/approve/execute-transactions", "labels": ["OpenZeppelin"]}, {"title": "Consider making use of a coverage library such as solidity-coverage and increasing the test coverage to match all the features, behaviors and edge cases implemented in the MultiSigWallet contract.Update: The Gnosis team informed us that there are some tests which were not ported to the truffle testing framework.", "body": "Consider making use of a coverage library such as solidity-coverage and increasing the test coverage to match all the features, behaviors and edge cases implemented in the MultiSigWallet contract.Update: The Gnosis team informed us that there are some tests which were not ported to the truffle testing framework.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#consider-making-use-of-a-coverage-library-such-as-solidity-coverage-and-increasing-the-test-coverage-to-match-all-the-features,-behaviors-and-edge-cases-implemented-in-the-multisigwallet-contract.update:-the-gnosis-team-informed-us-that-there-are-some-tests-which-were-not-ported-to-the-truffle-testing-framework.", "labels": ["OpenZeppelin"]}, {"title": "replaceOwner can produce an invalid owner\u00a0set", "body": "replaceOwner can produce an invalid owner\u00a0set", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#replaceowner-can-produce-an-invalid-owner\u00a0set", "labels": ["OpenZeppelin"]}, {"title": "at least one valid owner is set. Similarly, the function", "body": "at least one valid owner is set. Similarly, the function", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#at-least-one-valid-owner-is-set.-similarly,-the-function", "labels": ["OpenZeppelin"]}, {"title": "removeOwner will not allow its last owner to be removed because, in such situation, it would call", "body": "removeOwner will not allow its last owner to be removed because, in such situation, it would call", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#removeowner-will-not-allow-its-last-owner-to-be-removed-because,-in-such-situation,-it-would-call", "labels": ["OpenZeppelin"]}, {"title": "with zero as a parameter, which is not a", "body": "with zero as a parameter, which is not a", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#with-zero-as-a-parameter,-which-is-not-a", "labels": ["OpenZeppelin"]}, {"title": "replaceOwner does not check for the validity of the incoming owner address, which means that an address such as", "body": "replaceOwner does not check for the validity of the incoming owner address, which means that an address such as", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#replaceowner-does-not-check-for-the-validity-of-the-incoming-owner-address,-which-means-that-an-address-such-as", "labels": ["OpenZeppelin"]}, {"title": "Duplicate code for confirmation count", "body": "Duplicate code for confirmation count", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#duplicate-code-for-confirmation-count", "labels": ["OpenZeppelin"]}, {"title": "getConfirmationCount iterates over the", "body": "getConfirmationCount iterates over the", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#getconfirmationcount-iterates-over-the", "labels": ["OpenZeppelin"]}, {"title": "finally checks if the total count is larger or equal to the wallet\u2019s required approval count for confirming a transaction.", "body": "finally checks if the total count is larger or equal to the wallet\u2019s required approval count for confirming a transaction.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#finally-checks-if-the-total-count-is-larger-or-equal-to-the-wallet\u2019s-required-approval-count-for-confirming-a-transaction.", "labels": ["OpenZeppelin"]}, {"title": "Outdated Solidity\u00a0version", "body": "Outdated Solidity\u00a0version", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#outdated-solidity\u00a0version", "labels": ["OpenZeppelin"]}, {"title": "The latest solidity version at the time of this writing is 0.4.20. The contract uses 0.4.18 and truffle is setup for version 3.4.9, which uses the 0.4.15 solidity compiler. As a result, all tests fail because the version specified in solidity is larger than the available compiler version.Also, despite the solidity version of the contract being 0.4.18, deprecated usage of constant in functions still exists.Consider updating the solidity version in the contracts to 0.4.20, updating to truffle version 4.0.0, and replacing all usage of constant in functions to view (or pure if applicable).", "body": "The latest solidity version at the time of this writing is 0.4.20. The contract uses 0.4.18 and truffle is setup for version 3.4.9, which uses the 0.4.15 solidity compiler. As a result, all tests fail because the version specified in solidity is larger than the available compiler version.Also, despite the solidity version of the contract being 0.4.18, deprecated usage of constant in functions still exists.Consider updating the solidity version in the contracts to 0.4.20, updating to truffle version 4.0.0, and replacing all usage of constant in functions to view (or pure if applicable).", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#the-latest-solidity-version-at-the-time-of-this-writing-is-0.4.20.-the-contract-uses-0.4.18-and-truffle-is-setup-for-version-3.4.9,-which-uses-the-0.4.15-solidity-compiler.-as-a-result,-all-tests-fail-because-the-version-specified-in-solidity-is-larger-than-the-available-compiler-version.also,-despite-the-solidity-version-of-the-contract-being-0.4.18,-deprecated-usage-of-constant-in-functions-still-exists.consider-updating-the-solidity-version-in-the-contracts-to-0.4.20,-updating-to-truffle-version-4.0.0,-and-replacing-all-usage-of-constant-in-functions-to-view-(or-pure-if-applicable).", "labels": ["OpenZeppelin"]}, {"title": "Functions that return variable sized arrays should be\u00a0external", "body": "Functions that return variable sized arrays should be\u00a0external", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#functions-that-return-variable-sized-arrays-should-be\u00a0external", "labels": ["OpenZeppelin"]}, {"title": "As addressed in the solidity documentation, section \u201cCan you return an array or a string from a solidity function call?\u201c, functions can return variable sized data only in external calls. The functions getConfirmations and getTransactionIds have public visibility, which implies that they can be called internally. Even though such an internal call does not exist in the contract, a future modification may add one, producing unexpected results.The bodies of the mentioned functions do construct and return fixed-size arrays, in what might be an attempt from the developer to mitigate this problem.Consider simplifying the code by not using fixed sized arrays at all, and changing the visibility of the functions to external.", "body": "As addressed in the solidity documentation, section \u201cCan you return an array or a string from a solidity function call?\u201c, functions can return variable sized data only in external calls. The functions getConfirmations and getTransactionIds have public visibility, which implies that they can be called internally. Even though such an internal call does not exist in the contract, a future modification may add one, producing unexpected results.The bodies of the mentioned functions do construct and return fixed-size arrays, in what might be an attempt from the developer to mitigate this problem.Consider simplifying the code by not using fixed sized arrays at all, and changing the visibility of the functions to external.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#as-addressed-in-the-solidity-documentation,-section-\u201ccan-you-return-an-array-or-a-string-from-a-solidity-function-call?\u201c,-functions-can-return-variable-sized-data-only-in-external-calls.-the-functions-getconfirmations-and-gettransactionids-have-public-visibility,-which-implies-that-they-can-be-called-internally.-even-though-such-an-internal-call-does-not-exist-in-the-contract,-a-future-modification-may-add-one,-producing-unexpected-results.the-bodies-of-the-mentioned-functions-do-construct-and-return-fixed-size-arrays,-in-what-might-be-an-attempt-from-the-developer-to-mitigate-this-problem.consider-simplifying-the-code-by-not-using-fixed-sized-arrays-at-all,-and-changing-the-visibility-of-the-functions-to-external.", "labels": ["OpenZeppelin"]}, {"title": "The contract never specifies uint resolution\u200a\u2014\u200aIt is a good practice to specify weather a uint is uint256, uint64, etc, in all cases. Doing so has multiple benefits such as reducing storage space, avoiding overflows, etc.", "body": "The contract never specifies uint resolution\u200a\u2014\u200aIt is a good practice to specify weather a uint is uint256, uint64, etc, in all cases. Doing so has multiple benefits such as reducing storage space, avoiding overflows, etc.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#the-contract-never-specifies-uint-resolution\u200a\u2014\u200ait-is-a-good-practice-to-specify-weather-a-uint-is-uint256,-uint64,-etc,-in-all-cases.-doing-so-has-multiple-benefits-such-as-reducing-storage-space,-avoiding-overflows,-etc.", "labels": ["OpenZeppelin"]}, {"title": "Inconsistent variable naming conventions\u200a\u2014\u200aThe contract adopts the convention of using underscore in function parameters in order to distinguish them from contract members. However, it does so partially. For example, the function changeRequirement uses underscore, while addOwner doesn\u2019t. Consider using underscore in all method parameters.", "body": "Inconsistent variable naming conventions\u200a\u2014\u200aThe contract adopts the convention of using underscore in function parameters in order to distinguish them from contract members. However, it does so partially. For example, the function changeRequirement uses underscore, while addOwner doesn\u2019t. Consider using underscore in all method parameters.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#inconsistent-variable-naming-conventions\u200a\u2014\u200athe-contract-adopts-the-convention-of-using-underscore-in-function-parameters-in-order-to-distinguish-them-from-contract-members.-however,-it-does-so-partially.-for-example,-the-function-changerequirement-uses-underscore,-while-addowner-doesn\u2019t.-consider-using-underscore-in-all-method-parameters.", "labels": ["OpenZeppelin"]}, {"title": "The code would benefit from minor renaming to make it more explicit and easier to read. For example, the confirmed modifier, which checks if a given transaction id has been confirmed by a given owner, could be renamed to txConfirmedByOwner. Similarly the modifier notConfirmed could be renamed to txNotConfirmedByOwner. The central variable required determines the minimum number of owner confirmations that a transaction needs for approval, and a name like requiredConfirmations would be clearer. Finally, changeRequirement could be changed to changeRequiredConfirmations.", "body": "The code would benefit from minor renaming to make it more explicit and easier to read. For example, the confirmed modifier, which checks if a given transaction id has been confirmed by a given owner, could be renamed to txConfirmedByOwner. Similarly the modifier notConfirmed could be renamed to txNotConfirmedByOwner. The central variable required determines the minimum number of owner confirmations that a transaction needs for approval, and a name like requiredConfirmations would be clearer. Finally, changeRequirement could be changed to changeRequiredConfirmations.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#the-code-would-benefit-from-minor-renaming-to-make-it-more-explicit-and-easier-to-read.-for-example,-the-confirmed-modifier,-which-checks-if-a-given-transaction-id-has-been-confirmed-by-a-given-owner,-could-be-renamed-to-txconfirmedbyowner.-similarly-the-modifier-notconfirmed-could-be-renamed-to-txnotconfirmedbyowner.-the-central-variable-required-determines-the-minimum-number-of-owner-confirmations-that-a-transaction-needs-for-approval,-and-a-name-like-requiredconfirmations-would-be-clearer.-finally,-changerequirement-could-be-changed-to-changerequiredconfirmations.", "labels": ["OpenZeppelin"]}, {"title": "getTransactionIds does not check if to is larger than from.", "body": "getTransactionIds does not check if to is larger than from.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#gettransactionids-does-not-check-if-to-is-larger-than-from.", "labels": ["OpenZeppelin"]}, {"title": "The fallback function should explicitly declare public visibility.", "body": "The fallback function should explicitly declare public visibility.", "html_url": "https://blog.openzeppelin.com/gnosis-multisig-wallet-audit-d702ff0e2b1e#the-fallback-function-should-explicitly-declare-public-visibility.", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "Possible overflow in loop index\u00a0variable", "body": "Possible overflow in loop index\u00a0variable", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#possible-overflow-in-loop-index\u00a0variable", "labels": ["OpenZeppelin"]}, {"title": "airdropTokens function of the", "body": "airdropTokens function of the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#airdroptokens-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "PolyDistribution contract takes an array of addresses as a parameter in order to \u201cairdrop\u201d tokens to each of them. To do so, a", "body": "PolyDistribution contract takes an array of addresses as a parameter in order to \u201cairdrop\u201d tokens to each of them. To do so, a", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#polydistribution-contract-takes-an-array-of-addresses-as-a-parameter-in-order-to-\u201cairdrop\u201d-tokens-to-each-of-them.-to-do-so,-a", "labels": ["OpenZeppelin"]}, {"title": "loop is used, with an index variable of type", "body": "loop is used, with an index variable of type", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#loop-is-used,-with-an-index-variable-of-type", "labels": ["OpenZeppelin"]}, {"title": "0b47ae4.", "body": "Install OpenZeppelin via NPM  SafeMath and  Ownable contacts were copied from the OpenZeppelin repository, and  PolyToken is a copy of the  StandardToken contract.  recommended way to use OpenZeppelin contracts, which is via the  zeppelin-solidity NPM package, allowing for any bugfixes to be easily integrated into the codebase.  No Transfer event for minted tokens  in the ERC20 spec, to emit a  Etherscan to learn of the new token holders. In this case this is only relevant for the constructor, where the initial balance is assigned to the distribution contract. Nonetheless, consider emitting the corresponding event:    Token distribution address can be null  PolyToken constructor, the total supply of the token is granted to the  PolyDistribution contracts address.    Notes & Additional Information  In the PolyToken and PolyDistribution contracts there are several numbers with too many digits, making them hard to read and error-prone. We recommend replacing them with their scientific notation equivalents. For example, 10e9 for PolyTokenss totalSupply.  There is a transfer of tokens in the functiontransferTokens whose return value is unchecked. Even though the token as of now never returns false, it is good practice to not omit the check, as was correctly donein the rest of the contract. (Update: Fixed in)  Conclusion  No critical or high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the POLY Token contracts. We have not reviewed the related Polymath project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#0b47ae4.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete ERC20 Interface", "body": "Incomplete ERC20 Interface", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#incomplete-erc20-interface", "labels": ["OpenZeppelin"]}, {"title": "IERC20 contract defines the basic interface of a standard token to be used by the", "body": "IERC20 contract defines the basic interface of a standard token to be used by the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#ierc20-contract-defines-the-basic-interface-of-a-standard-token-to-be-used-by-the", "labels": ["OpenZeppelin"]}, {"title": "PolyToken contract. However, this contract doesn\u2019t follow the", "body": "PolyToken contract. However, this contract doesn\u2019t follow the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#polytoken-contract.-however,-this-contract-doesn\u2019t-follow-the", "labels": ["OpenZeppelin"]}, {"title": "ERC20 standard which requires for the", "body": "ERC20 standard which requires for the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#erc20-standard-which-requires-for-the", "labels": ["OpenZeppelin"]}, {"title": "totalSupply function to be defined in its public interface.", "body": "totalSupply function to be defined in its public interface.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#totalsupply-function-to-be-defined-in-its-public-interface.", "labels": ["OpenZeppelin"]}, {"title": "ERC20 contract from the OpenZeppelin library. If not, consider adding the missing function to the contract to comply with the standard and making this contract an", "body": "ERC20 contract from the OpenZeppelin library. If not, consider adding the missing function to the contract to comply with the standard and making this contract an", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#erc20-contract-from-the-openzeppelin-library.-if-not,-consider-adding-the-missing-function-to-the-contract-to-comply-with-the-standard-and-making-this-contract-an", "labels": ["OpenZeppelin"]}, {"title": "interface as its name and usage suggests.", "body": "interface as its name and usage suggests.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#interface-as-its-name-and-usage-suggests.", "labels": ["OpenZeppelin"]}, {"title": "Install OpenZeppelin via\u00a0NPM", "body": "Install OpenZeppelin via\u00a0NPM", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#install-openzeppelin-via\u00a0npm", "labels": ["OpenZeppelin"]}, {"title": "SafeMath and", "body": "SafeMath and", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#safemath-and", "labels": ["OpenZeppelin"]}, {"title": "Ownable contacts were copied from the OpenZeppelin repository, and", "body": "Ownable contacts were copied from the OpenZeppelin repository, and", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#ownable-contacts-were-copied-from-the-openzeppelin-repository,-and", "labels": ["OpenZeppelin"]}, {"title": "PolyToken is a copy of the", "body": "PolyToken is a copy of the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#polytoken-is-a-copy-of-the", "labels": ["OpenZeppelin"]}, {"title": "StandardToken contract.", "body": "StandardToken contract.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#standardtoken-contract.", "labels": ["OpenZeppelin"]}, {"title": "recommended way to use OpenZeppelin contracts, which is via the", "body": "recommended way to use OpenZeppelin contracts, which is via the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#recommended-way-to-use-openzeppelin-contracts,-which-is-via-the", "labels": ["OpenZeppelin"]}, {"title": "zeppelin-solidity NPM package, allowing for any bugfixes to be easily integrated into the codebase.", "body": "zeppelin-solidity NPM package, allowing for any bugfixes to be easily integrated into the codebase.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#zeppelin-solidity-npm-package,-allowing-for-any-bugfixes-to-be-easily-integrated-into-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "No Transfer event for minted\u00a0tokens", "body": "No Transfer event for minted\u00a0tokens", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#no-transfer-event-for-minted\u00a0tokens", "labels": ["OpenZeppelin"]}, {"title": "in the ERC20 spec, to emit a", "body": "in the ERC20 spec, to emit a", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#in-the-erc20-spec,-to-emit-a", "labels": ["OpenZeppelin"]}, {"title": "Etherscan to learn of the new token holders. In this case this is only relevant for the constructor, where the initial balance is assigned to the distribution contract. Nonetheless, consider emitting the corresponding event:", "body": "Etherscan to learn of the new token holders. In this case this is only relevant for the constructor, where the initial balance is assigned to the distribution contract. Nonetheless, consider emitting the corresponding event:", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#etherscan-to-learn-of-the-new-token-holders.-in-this-case-this-is-only-relevant-for-the-constructor,-where-the-initial-balance-is-assigned-to-the-distribution-contract.-nonetheless,-consider-emitting-the-corresponding-event:", "labels": ["OpenZeppelin"]}, {"title": "Token distribution address can be\u00a0null", "body": "Token distribution address can be\u00a0null", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#token-distribution-address-can-be\u00a0null", "labels": ["OpenZeppelin"]}, {"title": "PolyToken constructor, the total supply of the token is granted to the", "body": "PolyToken constructor, the total supply of the token is granted to the", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#polytoken-constructor,-the-total-supply-of-the-token-is-granted-to-the", "labels": ["OpenZeppelin"]}, {"title": "PolyDistribution contract\u2019s address.", "body": "PolyDistribution contract\u2019s address.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#polydistribution-contract\u2019s-address.", "labels": ["OpenZeppelin"]}, {"title": "In the PolyToken and PolyDistribution contracts there are several numbers with too many digits, making them hard to read and error-prone. We recommend replacing them with their scientific notation equivalents. For example, 10e9 for PolyTokens\u2019s totalSupply.", "body": "In the PolyToken and PolyDistribution contracts there are several numbers with too many digits, making them hard to read and error-prone. We recommend replacing them with their scientific notation equivalents. For example, 10e9 for PolyTokens\u2019s totalSupply.", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#in-the-polytoken-and-polydistribution-contracts-there-are-several-numbers-with-too-many-digits,-making-them-hard-to-read-and-error-prone.-we-recommend-replacing-them-with-their-scientific-notation-equivalents.-for-example,-10e9-for-polytokens\u2019s-totalsupply.", "labels": ["OpenZeppelin"]}, {"title": "There is a transfer of tokens in the functiontransferTokens whose return value is unchecked. Even though the token as of now never returns false, it is good practice to not omit the check, as was correctly donein the rest of the contract. (Update: Fixed in0b47ae4.)", "body": "There is a transfer of tokens in the functiontransferTokens whose return value is unchecked. Even though the token as of now never returns false, it is good practice to not omit the check, as was correctly donein the rest of the contract. (Update: Fixed in0b47ae4.)", "html_url": "https://blog.openzeppelin.com/polymath-audit-be55e9936aba#there-is-a-transfer-of-tokens-in-the-functiontransfertokens-whose-return-value-is-unchecked.-even-though-the-token-as-of-now-never-returns-false,-it-is-good-practice-to-not-omit-the-check,-as-was-correctly-donein-the-rest-of-the-contract.-(update:-fixed-in0b47ae4.)", "labels": ["OpenZeppelin"]}, {"title": "BaxToken uses some OpenZeppelin\u2019s contracts claiming to be version 1.5.0, but there is no such declared dependency in the project. Consider declaring this dependency explicitly following our installation recommendation via the zeppelin-solidity NPM package.Update: Fixed in commit be9f106.", "body": "BaxToken uses some OpenZeppelin\u2019s contracts claiming to be version 1.5.0, but there is no such declared dependency in the project. Consider declaring this dependency explicitly following our installation recommendation via the zeppelin-solidity NPM package.Update: Fixed in commit be9f106.", "html_url": "https://blog.openzeppelin.com/bax-token-audit-85fe7b186c89#baxtoken-uses-some-openzeppelin\u2019s-contracts-claiming-to-be-version-1.5.0,-but-there-is-no-such-declared-dependency-in-the-project.-consider-declaring-this-dependency-explicitly-following-our-installation-recommendation-via-the-zeppelin-solidity-npm-package.update:-fixed-in-commit-be9f106.", "labels": ["OpenZeppelin"]}, {"title": "The 1.5.0 version of the OpenZeppelin framework includes a parameterized ERC20 token contract called DetailedERC20. Consider inheriting BaxToken from it to reuse that functionality.Update: Fixed in commit c0fa245.", "body": "The 1.5.0 version of the OpenZeppelin framework includes a parameterized ERC20 token contract called DetailedERC20. Consider inheriting BaxToken from it to reuse that functionality.Update: Fixed in commit c0fa245.", "html_url": "https://blog.openzeppelin.com/bax-token-audit-85fe7b186c89#the-1.5.0-version-of-the-openzeppelin-framework-includes-a-parameterized-erc20-token-contract-called-detailederc20.-consider-inheriting-baxtoken-from-it-to-reuse-that-functionality.update:-fixed-in-commit-c0fa245.", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "Merchant address can be\u00a0null", "body": "Merchant address can be\u00a0null", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#merchant-address-can-be\u00a0null", "labels": ["OpenZeppelin"]}, {"title": "MerchantSubscription contract can be instantiated with the null address as the", "body": "MerchantSubscription contract can be instantiated with the null address as the", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#merchantsubscription-contract-can-be-instantiated-with-the-null-address-as-the", "labels": ["OpenZeppelin"]}, {"title": "failing as early and loudly as possible.", "body": "failing as early and loudly as possible.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#failing-as-early-and-loudly-as-possible.", "labels": ["OpenZeppelin"]}, {"title": "this commit by checking", "body": "this commit by checking", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#this-commit-by-checking", "labels": ["OpenZeppelin"]}, {"title": "Solidity version", "body": "pragma to a more recent version (for example, pragma solidity ^0.4.17) to enforce the use of an up to date compiler.Update: Fixed in this commit.  Reuse open source contracts  OpenZeppelins  SafeMath,  Ownable (or  Claimable) and  Pausable. Reimplementing functionality instead of reusing public and already audited code can bring  regression problems and difficult to find bugs. Consider removing the duplicate code from your repo and using the installed versions from OpenZeppelin.  this commit by using OpenZeppelins contracts.  Redundant amount state variable  amount state variable, which intends to track the amount of ether received. However, it is redundant because such a value is already accessible via  here. This would leave the  SubscriptionPaymentMade event will not be emitted for these cases.  this commit by using  Notes & Additional Information  Neither the constructor, fallback function nor the claimOwnership method have explicit visibility. Solidity defaults to public. Consider making this explicit. This will also avoid some compiler warnings introduced in the latest versions, motivated by the first Parity wallet hack.(Update: Fixed in this commit.)  The contracts version state variable could be declared constant.(Update: Fixed in this commit.)  The SafeMath methods could be marked pure. Consider using Soliditys using for feature for enhanced readability.(Update: Fixed in this commit by reusing OpenZeppelins SafeMath.)  Consider indexing event parameters such as SubscriptionPaymentMades customer as it enables faster lookups for consuming apps.(Update: Fixed in this commit.)  Only the owner can trigger a withdrawal of funds from the subscription. This requires trust in the owner by the merchant. Unless this limitation is by design, consider also allowing the merchant to trigger it.  The withdrawal function transfers ether to the merchant address (by using Soliditys transfer). Make sure that merchant addresses can receive ether.  Conclusion  No critical or high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to Coinfixs contract. We have not reviewed the related Coinfix project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#solidity-version", "labels": ["OpenZeppelin"]}, {"title": "The contracts can be compiled with versions of the compiler as low as 0.4.11. We recommend changing the Solidity version pragma to a more recent version (for example, pragma solidity ^0.4.17) to enforce the use of an up to date compiler.Update: Fixed in this commit.", "body": "The contracts can be compiled with versions of the compiler as low as 0.4.11. We recommend changing the Solidity version pragma to a more recent version (for example, pragma solidity ^0.4.17) to enforce the use of an up to date compiler.Update: Fixed in this commit.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#the-contracts-can-be-compiled-with-versions-of-the-compiler-as-low-as-0.4.11.-we-recommend-changing-the-solidity-version-pragma-to-a-more-recent-version-(for-example,-pragma-solidity-^0.4.17)-to-enforce-the-use-of-an-up-to-date-compiler.update:-fixed-in-this-commit.", "labels": ["OpenZeppelin"]}, {"title": "Reuse open source contracts", "body": "Reuse open source contracts", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#reuse-open-source-contracts", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s", "body": "contracts.  Redundant amount state variable  amount state variable, which intends to track the amount of ether received. However, it is redundant because such a value is already accessible via  here. This would leave the  SubscriptionPaymentMade event will not be emitted for these cases.  this commit by using  Notes & Additional Information  Neither the constructor, fallback function nor the claimOwnership method have explicit visibility. Solidity defaults to public. Consider making this explicit. This will also avoid some compiler warnings introduced in the latest versions, motivated by the first Parity wallet hack.(Update: Fixed in this commit.)  The contracts version state variable could be declared constant.(Update: Fixed in this commit.)  The SafeMath methods could be marked pure. Consider using Soliditys using for feature for enhanced readability.(Update: Fixed in this commit by reusing  SafeMath.)  Consider indexing event parameters such as SubscriptionPaymentMades customer as it enables faster lookups for consuming apps.(Update: Fixed in this commit.)  Only the owner can trigger a withdrawal of funds from the subscription. This requires trust in the owner by the merchant. Unless this limitation is by design, consider also allowing the merchant to trigger it.  The withdrawal function transfers ether to the merchant address (by using Soliditys transfer). Make sure that merchant addresses can receive ether.  Conclusion  No critical or high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to Coinfixs contract. We have not reviewed the related Coinfix project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#openzeppelin\u2019s", "labels": ["OpenZeppelin"]}, {"title": "SafeMath,", "body": "SafeMath,", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#safemath,", "labels": ["OpenZeppelin"]}, {"title": "Ownable (or", "body": "Ownable (or", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#ownable-(or", "labels": ["OpenZeppelin"]}, {"title": "Claimable) and", "body": "Claimable) and", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#claimable)-and", "labels": ["OpenZeppelin"]}, {"title": "Pausable. Reimplementing functionality instead of reusing public and already audited code can bring", "body": "Pausable. Reimplementing functionality instead of reusing public and already audited code can bring", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#pausable.-reimplementing-functionality-instead-of-reusing-public-and-already-audited-code-can-bring", "labels": ["OpenZeppelin"]}, {"title": "regression problems and difficult to find bugs. Consider removing the duplicate code from your repo and using the installed versions from OpenZeppelin.", "body": "regression problems and difficult to find bugs. Consider removing the duplicate code from your repo and using the installed versions from OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#regression-problems-and-difficult-to-find-bugs.-consider-removing-the-duplicate-code-from-your-repo-and-using-the-installed-versions-from-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "this commit by using OpenZeppelin\u2019s contracts.", "body": "this commit by using OpenZeppelin\u2019s contracts.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#this-commit-by-using-openzeppelin\u2019s-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Redundant amount state\u00a0variable", "body": "Redundant amount state\u00a0variable", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#redundant-amount-state\u00a0variable", "labels": ["OpenZeppelin"]}, {"title": "amount state variable, which intends to track the amount of ether received. However, it is redundant because such a value is already accessible via", "body": "amount state variable, which intends to track the amount of ether received. However, it is redundant because such a value is already accessible via", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#amount-state-variable,-which-intends-to-track-the-amount-of-ether-received.-however,-it-is-redundant-because-such-a-value-is-already-accessible-via", "labels": ["OpenZeppelin"]}, {"title": "here. This would leave the", "body": "here. This would leave the", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#here.-this-would-leave-the", "labels": ["OpenZeppelin"]}, {"title": "SubscriptionPaymentMade event will not be emitted for these cases.", "body": "SubscriptionPaymentMade event will not be emitted for these cases.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#subscriptionpaymentmade-event-will-not-be-emitted-for-these-cases.", "labels": ["OpenZeppelin"]}, {"title": "this commit by using", "body": "Notes & Additional Information  Neither the constructor, fallback function nor the claimOwnership method have explicit visibility. Solidity defaults to public. Consider making this explicit. This will also avoid some compiler warnings introduced in the latest versions, motivated by the first Parity wallet hack.(Update: Fixed in this commit.)  The contracts version state variable could be declared constant.(Update: Fixed in this commit.)  The SafeMath methods could be marked pure. Consider using Soliditys using for feature for enhanced readability.(Update: Fixed in this commit by reusing OpenZeppelins SafeMath.)  Consider indexing event parameters such as SubscriptionPaymentMades customer as it enables faster lookups for consuming apps.(Update: Fixed in this commit.)  Only the owner can trigger a withdrawal of funds from the subscription. This requires trust in the owner by the merchant. Unless this limitation is by design, consider also allowing the merchant to trigger it.  The withdrawal function transfers ether to the merchant address (by using Soliditys transfer). Make sure that merchant addresses can receive ether.  Conclusion  No critical or high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to Coinfixs contract. We have not reviewed the related Coinfix project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#this-commit-by-using", "labels": ["OpenZeppelin"]}, {"title": "Neither the constructor, fallback function nor the claimOwnership method have explicit visibility. Solidity defaults to public. Consider making this explicit. This will also avoid some compiler warnings introduced in the latest versions, motivated by the first Parity wallet hack.(Update: Fixed in this commit.)", "body": "Neither the constructor, fallback function nor the claimOwnership method have explicit visibility. Solidity defaults to public. Consider making this explicit. This will also avoid some compiler warnings introduced in the latest versions, motivated by the first Parity wallet hack.(Update: Fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#neither-the-constructor,-fallback-function-nor-the-claimownership-method-have-explicit-visibility.-solidity-defaults-to-public.-consider-making-this-explicit.-this-will-also-avoid-some-compiler-warnings-introduced-in-the-latest-versions,-motivated-by-the-first-parity-wallet-hack.(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "The contract\u2019s version state variable could be declared constant.(Update: Fixed in this commit.)", "body": "The contract\u2019s version state variable could be declared constant.(Update: Fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#the-contract\u2019s-version-state-variable-could-be-declared-constant.(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "The SafeMath methods could be marked pure. Consider using Solidity\u2019s using for feature for enhanced readability.(Update: Fixed in this commit by reusing OpenZeppelin\u2019s SafeMath.)", "body": "The SafeMath methods could be marked pure. Consider using Solidity\u2019s using for feature for enhanced readability.(Update: Fixed in this commit by reusing OpenZeppelin\u2019s SafeMath.)", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#the-safemath-methods-could-be-marked-pure.-consider-using-solidity\u2019s-using-for-feature-for-enhanced-readability.(update:-fixed-in-this-commit-by-reusing-openzeppelin\u2019s-safemath.)", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters such as SubscriptionPaymentMade\u2019s customer as it enables faster lookups for consuming apps.(Update: Fixed in this commit.)", "body": "Consider indexing event parameters such as SubscriptionPaymentMade\u2019s customer as it enables faster lookups for consuming apps.(Update: Fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#consider-indexing-event-parameters-such-as-subscriptionpaymentmade\u2019s-customer-as-it-enables-faster-lookups-for-consuming-apps.(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "Only the owner can trigger a withdrawal of funds from the subscription. This requires trust in the owner by the merchant. Unless this limitation is by design, consider also allowing the merchant to trigger it.", "body": "Only the owner can trigger a withdrawal of funds from the subscription. This requires trust in the owner by the merchant. Unless this limitation is by design, consider also allowing the merchant to trigger it.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#only-the-owner-can-trigger-a-withdrawal-of-funds-from-the-subscription.-this-requires-trust-in-the-owner-by-the-merchant.-unless-this-limitation-is-by-design,-consider-also-allowing-the-merchant-to-trigger-it.", "labels": ["OpenZeppelin"]}, {"title": "The withdrawal function transfers ether to the merchant address (by using Solidity\u2019s transfer). Make sure that merchant addresses can receive ether.", "body": "The withdrawal function transfers ether to the merchant address (by using Solidity\u2019s transfer). Make sure that merchant addresses can receive ether.", "html_url": "https://blog.openzeppelin.com/coinfix-token-audit-c4a0e64190bf#the-withdrawal-function-transfers-ether-to-the-merchant-address-(by-using-solidity\u2019s-transfer).-make-sure-that-merchant-addresses-can-receive-ether.", "labels": ["OpenZeppelin"]}, {"title": "Tokens burning breaks MigrationAgent contract", "body": "Tokens burning breaks MigrationAgent contract", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#tokens-burning-breaks-migrationagent-contract", "labels": ["OpenZeppelin"]}, {"title": "MigrationAgent creates a discrepancy between", "body": "MigrationAgent creates a discrepancy between", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#migrationagent-creates-a-discrepancy-between", "labels": ["OpenZeppelin"]}, {"title": "MigrationAgent. Once the", "body": "MigrationAgent. Once the", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#migrationagent.-once-the", "labels": ["OpenZeppelin"]}, {"title": "tokenSupply to match the current state of", "body": "tokenSupply to match the current state of", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#tokensupply-to-match-the-current-state-of", "labels": ["OpenZeppelin"]}, {"title": "tokenSupply variable is not updated causing invariants checks to fail.", "body": "tokenSupply variable is not updated causing invariants checks to fail.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#tokensupply-variable-is-not-updated-causing-invariants-checks-to-fail.", "labels": ["OpenZeppelin"]}, {"title": "MigrationAgent may be corrupted by any token holder as the access to the", "body": "MigrationAgent may be corrupted by any token holder as the access to the", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#migrationagent-may-be-corrupted-by-any-token-holder-as-the-access-to-the", "labels": ["OpenZeppelin"]}, {"title": "burn function is not restricted.", "body": "burn function is not restricted.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#burn-function-is-not-restricted.", "labels": ["OpenZeppelin"]}, {"title": "Consider restricting the access to the burn function solely to the QiibeeToken owner. If this solution cannot be implemented, we suggest updating tokenSupply variable of after every burn operation as an alternative.", "body": "Consider restricting the access to the burn function solely to the QiibeeToken owner. If this solution cannot be implemented, we suggest updating tokenSupply variable of after every burn operation as an alternative.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#consider-restricting-the-access-to-the-burn-function-solely-to-the-qiibeetoken-owner.-if-this-solution-cannot-be-implemented,-we-suggest-updating-tokensupply-variable-of-after-every-burn-operation-as-an-alternative.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit by both restricting the access to the burn function and counting the burntTokens, so the MigrationAgent can updateSupply.", "body": "Update: Fixed in this commit by both restricting the access to the burn function and counting the burntTokens, so the MigrationAgent can updateSupply.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#update:-fixed-in-this-commit-by-both-restricting-the-access-to-the-burn-function-and-counting-the-burnttokens,-so-the-migrationagent-can-updatesupply.", "labels": ["OpenZeppelin"]}, {"title": "Migration bypasses vesting restrictions", "body": "Migration bypasses vesting restrictions", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#migration-bypasses-vesting-restrictions", "labels": ["OpenZeppelin"]}, {"title": "All of the users are allowed to migrate their tokens to a new contract regardless of whether their assets are fully transferable or locked in a vesting scheme. Moreover, once they migrate the tokens any vesting restrictions are removed.", "body": "All of the users are allowed to migrate their tokens to a new contract regardless of whether their assets are fully transferable or locked in a vesting scheme. Moreover, once they migrate the tokens any vesting restrictions are removed.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#all-of-the-users-are-allowed-to-migrate-their-tokens-to-a-new-contract-regardless-of-whether-their-assets-are-fully-transferable-or-locked-in-a-vesting-scheme.-moreover,-once-they-migrate-the-tokens-any-vesting-restrictions-are-removed.", "labels": ["OpenZeppelin"]}, {"title": "We recommend only allowing transferableTokens to be available for migrations. An alternative solution is to implement a new migateVestedTokens function that will copy the vesting configuration to the migration target contract.", "body": "We recommend only allowing transferableTokens to be available for migrations. An alternative solution is to implement a new migateVestedTokens function that will copy the vesting configuration to the migration target contract.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-recommend-only-allowing-transferabletokens-to-be-available-for-migrations.-an-alternative-solution-is-to-implement-a-new-migatevestedtokens-function-that-will-copy-the-vesting-configuration-to-the-migration-target-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit by checking if the amount of tokens is within the transferableTokens limit at the moment of migration.", "body": "Update: Fixed in this commit by checking if the amount of tokens is within the transferableTokens limit at the moment of migration.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#update:-fixed-in-this-commit-by-checking-if-the-amount-of-tokens-is-within-the-transferabletokens-limit-at-the-moment-of-migration.", "labels": ["OpenZeppelin"]}, {"title": "Token minting is not synchronized with MigrationAgent", "body": "Token minting is not synchronized with MigrationAgent", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#token-minting-is-not-synchronized-with-migrationagent", "labels": ["OpenZeppelin"]}, {"title": "Token minting leads to an inconsistent state as the MigrationAgent tokenSupply is never increased after being set in the constructor. The discrepancy between the QiibeeToken and the MigrationAgent states, breaks the safetyInvariantCheck and corrupts the migration process.", "body": "Token minting leads to an inconsistent state as the MigrationAgent tokenSupply is never increased after being set in the constructor. The discrepancy between the QiibeeToken and the MigrationAgent states, breaks the safetyInvariantCheck and corrupts the migration process.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#token-minting-leads-to-an-inconsistent-state-as-the-migrationagent-tokensupply-is-never-increased-after-being-set-in-the-constructor.-the-discrepancy-between-the-qiibeetoken-and-the-migrationagent-states,-breaks-the-safetyinvariantcheck-and-corrupts-the-migration-process.", "labels": ["OpenZeppelin"]}, {"title": "We suggest enforcing that the token has finalized the minitingby adding the check require(_qbxSourceToken.mintingFinished) in line 21 of the MigrationAgent. If the team wants to continue the minting after the migration is deployed we recommend increasing the tokenSupply by the amount of newly created tokens.", "body": "We suggest enforcing that the token has finalized the minitingby adding the check require(_qbxSourceToken.mintingFinished) in line 21 of the MigrationAgent. If the team wants to continue the minting after the migration is deployed we recommend increasing the tokenSupply by the amount of newly created tokens.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-suggest-enforcing-that-the-token-has-finalized-the-minitingby-adding-the-check-require(_qbxsourcetoken.mintingfinished)-in-line-21-of-the-migrationagent.-if-the-team-wants-to-continue-the-minting-after-the-migration-is-deployed-we-recommend-increasing-the-tokensupply-by-the-amount-of-newly-created-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit by tracking newTokens and updating the MigrationAgent state in the updateSupply function.", "body": "Update: Fixed in this commit by tracking newTokens and updating the MigrationAgent state in the updateSupply function.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#update:-fixed-in-this-commit-by-tracking-newtokens-and-updating-the-migrationagent-state-in-the-updatesupply-function.", "labels": ["OpenZeppelin"]}, {"title": "Unchecked math operations", "body": "Unchecked math operations", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#unchecked-math-operations", "labels": ["OpenZeppelin"]}, {"title": "There are three unchecked math operations inside the migration function in lines 114\u2013116\u00a0. It\u2019s always better to be safe and perform operations with correctness assertions.", "body": "There are three unchecked math operations inside the migration function in lines 114\u2013116\u00a0. It\u2019s always better to be safe and perform operations with correctness assertions.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#there-are-three-unchecked-math-operations-inside-the-migration-function-in-lines-114\u2013116\u00a0.-it\u2019s-always-better-to-be-safe-and-perform-operations-with-correctness-assertions.", "labels": ["OpenZeppelin"]}, {"title": "Consider rigorously checking for under and overflows for all of the arithmetic operations. We recommend using the SafeMath library from OpenZeppelin.", "body": "Consider rigorously checking for under and overflows for all of the arithmetic operations. We recommend using the SafeMath library from OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#consider-rigorously-checking-for-under-and-overflows-for-all-of-the-arithmetic-operations.-we-recommend-using-the-safemath-library-from-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit.", "body": "Low Severity  Vesting logic implemented directly in the token contract  The vesting logic is currently implemented in the QiibeeToken in the form of a base VestedToken contract. These features are going to be used by a limited number of buyers and for a restricted amount of time only. Having complex logic included directly in the token contract may not only cause compatibility issues with blockchain explorers and exchanges, but it may also increase the potential attack surface.  We would suggest extracting the vesting logic into a separate contract as implemented in the OpenZeppelin pull request.  Update: The Qiibee team explained, that because of legal matters, they prefer to keep both functionalities within a single contract that controls token issuance.  Validate MigrationAgent setting  The setMigrationAgent function from QiibeeToken does not check if the agent.qbxSourceToken matches the address of the contract from which the function is executed. Linking to a MigrationAgent that was configured to work with a different token may corrupt the migration process.  We recommend checking the precondition require(_agent.qbxSourceToken == address(this)) in line 102 to avoid being in an inconsistent state.    Missing full sanity checks on adding accredited investors  It is possible to addAccreditedInvestor with minInvest being greater than maxCumulativeInvest. Although this configuration will be recorded properly, it will throw an exception on line 92 of the buyTokens function, therefore preventing the investor to take a part into the sale.  We recommend adding an extra precondition require( minInvest &lt;= maxCumulativeInvest) in line 119 so any potential errors are detected as early as possible.    Notes & Additional Information  We suggest adding timezone information to the date description: start time for vested tokens (equiv. to 30/06/2018). (Update: fixed in this commit.)  Consider emitting an event similar to the NewTokenGrant from the _VestedToken base contract, once the tokens are minted for vesting. (Update: fixed in this commit.)  There is a TODO comment left in the code: is there any way to properly check this?. Please make sure that all of the outstanding questions are resolved before deploying the code in the production mode. (Update: fixed in this commit.)  QiibeeToken inherits from a BurnableToken which provides a burn function allowing anyone to burn a certain token amount, destroying them and reducing totalSupply. Please make sure this is expected, or consider making the burn function only callable from the Qiibee address. Note that any ERC20 token allows owners to burn tokens by transferring them to the zero address or any random one, but this does not modify the totalSupply. (Update: fixed in this commit.)  There is a typo in the QiibeePresale , it says Call only be called where it should say Can only be called. (Update: fixed in this commit.)  Consider using the hasEnded function instead of duplicating the logic in afterFundraising modifier body. (Update: fixed in this commit.)  We recommend setting the token address in the QiibeePresale constructor ,mitigating the risk that the setToken function may not be called before the sale starts. (Update: fixed in this commit.)  Conclusion  Two critical severity issues and one high severity issue were found and explained, along with recommendations on how to fix them. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the QBX Tokencontracts. We have not reviewed the related Qiibee project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#update:-fixed-in-this-commit.", "labels": ["OpenZeppelin"]}, {"title": "Constant names incompatible with the ERC20\u00a0standard", "body": "Constant names incompatible with the ERC20\u00a0standard", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#constant-names-incompatible-with-the-erc20\u00a0standard", "labels": ["OpenZeppelin"]}, {"title": "QiibeeToken declares the obligatory", "body": "QiibeeToken declares the obligatory", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#qiibeetoken-declares-the-obligatory", "labels": ["OpenZeppelin"]}, {"title": "ERC20 standard parameters as uppercase constants:", "body": "ERC20 standard parameters as uppercase constants:", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#erc20-standard-parameters-as-uppercase-constants:", "labels": ["OpenZeppelin"]}, {"title": "SYMBOL,", "body": "SYMBOL,", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#symbol,", "labels": ["OpenZeppelin"]}, {"title": "NAME,", "body": "NAME,", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#name,", "labels": ["OpenZeppelin"]}, {"title": "DECIMALS. This conflicts with the official specification that requires the names to be lowercase:", "body": "DECIMALS. This conflicts with the official specification that requires the names to be lowercase:", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#decimals.-this-conflicts-with-the-official-specification-that-requires-the-names-to-be-lowercase:", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming constants to lowercase, so they are compliant with the official ERC20 standard.", "body": "Consider renaming constants to lowercase, so they are compliant with the official ERC20 standard.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#consider-renaming-constants-to-lowercase,-so-they-are-compliant-with-the-official-erc20-standard.", "labels": ["OpenZeppelin"]}, {"title": "Vesting logic implemented directly in the token\u00a0contract", "body": "Vesting logic implemented directly in the token\u00a0contract", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#vesting-logic-implemented-directly-in-the-token\u00a0contract", "labels": ["OpenZeppelin"]}, {"title": "The vesting logic is currently implemented in the QiibeeToken in the form of a base VestedToken contract. These features are going to be used by a limited number of buyers and for a restricted amount of time only. Having complex logic included directly in the token contract may not only cause compatibility issues with blockchain explorers and exchanges, but it may also increase the potential attack surface.", "body": "The vesting logic is currently implemented in the QiibeeToken in the form of a base VestedToken contract. These features are going to be used by a limited number of buyers and for a restricted amount of time only. Having complex logic included directly in the token contract may not only cause compatibility issues with blockchain explorers and exchanges, but it may also increase the potential attack surface.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#the-vesting-logic-is-currently-implemented-in-the-qiibeetoken-in-the-form-of-a-base-vestedtoken-contract.-these-features-are-going-to-be-used-by-a-limited-number-of-buyers-and-for-a-restricted-amount-of-time-only.-having-complex-logic-included-directly-in-the-token-contract-may-not-only-cause-compatibility-issues-with-blockchain-explorers-and-exchanges,-but-it-may-also-increase-the-potential-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "We would suggest extracting the vesting logic into a separate contract as implemented in the OpenZeppelin pull request.", "body": "We would suggest extracting the vesting logic into a separate contract as implemented in the OpenZeppelin pull request.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-would-suggest-extracting-the-vesting-logic-into-a-separate-contract-as-implemented-in-the-openzeppelin-pull-request.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Qiibee team explained, that because of legal matters, they prefer to keep both functionalities within a single contract that controls token issuance.", "body": "Update: The Qiibee team explained, that because of legal matters, they prefer to keep both functionalities within a single contract that controls token issuance.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#update:-the-qiibee-team-explained,-that-because-of-legal-matters,-they-prefer-to-keep-both-functionalities-within-a-single-contract-that-controls-token-issuance.", "labels": ["OpenZeppelin"]}, {"title": "Validate MigrationAgent setting", "body": "Validate MigrationAgent setting", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#validate-migrationagent-setting", "labels": ["OpenZeppelin"]}, {"title": "The setMigrationAgent function from QiibeeToken does not check if the agent.qbxSourceToken matches the address of the contract from which the function is executed. Linking to a MigrationAgent that was configured to work with a different token may corrupt the migration process.", "body": "The setMigrationAgent function from QiibeeToken does not check if the agent.qbxSourceToken matches the address of the contract from which the function is executed. Linking to a MigrationAgent that was configured to work with a different token may corrupt the migration process.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#the-setmigrationagent-function-from-qiibeetoken-does-not-check-if-the-agent.qbxsourcetoken-matches-the-address-of-the-contract-from-which-the-function-is-executed.-linking-to-a-migrationagent-that-was-configured-to-work-with-a-different-token-may-corrupt-the-migration-process.", "labels": ["OpenZeppelin"]}, {"title": "We recommend checking the precondition require(_agent.qbxSourceToken == address(this)) in line 102 to avoid being in an inconsistent state.", "body": "We recommend checking the precondition require(_agent.qbxSourceToken == address(this)) in line 102 to avoid being in an inconsistent state.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-recommend-checking-the-precondition-require(_agent.qbxsourcetoken-==-address(this))-in-line-102-to-avoid-being-in-an-inconsistent-state.", "labels": ["OpenZeppelin"]}, {"title": "Missing full sanity checks on adding accredited investors", "body": "Missing full sanity checks on adding accredited investors", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#missing-full-sanity-checks-on-adding-accredited-investors", "labels": ["OpenZeppelin"]}, {"title": "It is possible to addAccreditedInvestor with minInvest being greater than maxCumulativeInvest. Although this configuration will be recorded properly, it will throw an exception on line 92 of the buyTokens function, therefore preventing the investor to take a part into the sale.", "body": "It is possible to addAccreditedInvestor with minInvest being greater than maxCumulativeInvest. Although this configuration will be recorded properly, it will throw an exception on line 92 of the buyTokens function, therefore preventing the investor to take a part into the sale.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#it-is-possible-to-addaccreditedinvestor-with-mininvest-being-greater-than-maxcumulativeinvest.-although-this-configuration-will-be-recorded-properly,-it-will-throw-an-exception-on-line-92-of-the-buytokens-function,-therefore-preventing-the-investor-to-take-a-part-into-the-sale.", "labels": ["OpenZeppelin"]}, {"title": "We recommend adding an extra precondition require( minInvest &lt;= maxCumulativeInvest) in line 119 so any potential errors are detected as early as possible.", "body": "We recommend adding an extra precondition require( minInvest &lt;= maxCumulativeInvest) in line 119 so any potential errors are detected as early as possible.", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-recommend-adding-an-extra-precondition-require(-mininvest-&lt;=-maxcumulativeinvest)-in-line-119-so-any-potential-errors-are-detected-as-early-as-possible.", "labels": ["OpenZeppelin"]}, {"title": "We suggest adding timezone information to the date description: start time for vested tokens (equiv. to 30/06/2018). (Update: fixed in this commit.)", "body": "We suggest adding timezone information to the date description: start time for vested tokens (equiv. to 30/06/2018). (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-suggest-adding-timezone-information-to-the-date-description:-start-time-for-vested-tokens-(equiv.-to-30/06/2018).-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting an event similar to the NewTokenGrant from the _VestedToken base contract, once the tokens are minted for vesting. (Update: fixed in this commit.)", "body": "Consider emitting an event similar to the NewTokenGrant from the _VestedToken base contract, once the tokens are minted for vesting. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#consider-emitting-an-event-similar-to-the-newtokengrant-from-the-_vestedtoken-base-contract,-once-the-tokens-are-minted-for-vesting.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "There is a TODO comment left in the code: \u201cis there any way to properly check this?. Please make sure that all of the outstanding questions are resolved before deploying the code in the production mode. (Update: fixed in this commit.)", "body": "There is a TODO comment left in the code: \u201cis there any way to properly check this?. Please make sure that all of the outstanding questions are resolved before deploying the code in the production mode. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#there-is-a-todo-comment-left-in-the-code:-\u201cis-there-any-way-to-properly-check-this?.-please-make-sure-that-all-of-the-outstanding-questions-are-resolved-before-deploying-the-code-in-the-production-mode.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "QiibeeToken inherits from a BurnableToken which provides a burn function allowing anyone to burn a certain token amount, destroying them and reducing totalSupply. Please make sure this is expected, or consider making the burn function only callable from the Qiibee address. Note that any ERC20 token allows owners to burn tokens by transferring them to the zero address or any random one, but this does not modify the totalSupply. (Update: fixed in this commit.)", "body": "QiibeeToken inherits from a BurnableToken which provides a burn function allowing anyone to burn a certain token amount, destroying them and reducing totalSupply. Please make sure this is expected, or consider making the burn function only callable from the Qiibee address. Note that any ERC20 token allows owners to burn tokens by transferring them to the zero address or any random one, but this does not modify the totalSupply. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#qiibeetoken-inherits-from-a-burnabletoken-which-provides-a-burn-function-allowing-anyone-to-burn-a-certain-token-amount,-destroying-them-and-reducing-totalsupply.-please-make-sure-this-is-expected,-or-consider-making-the-burn-function-only-callable-from-the-qiibee-address.-note-that-any-erc20-token-allows-owners-to-burn-tokens-by-transferring-them-to-the-zero-address-or-any-random-one,-but-this-does-not-modify-the-totalsupply.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in the QiibeePresale\u00a0, it says \u201cCall only be called\u201d where it should say \u201cCan only be called\u201d. (Update: fixed in this commit.)", "body": "There is a typo in the QiibeePresale\u00a0, it says \u201cCall only be called\u201d where it should say \u201cCan only be called\u201d. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#there-is-a-typo-in-the-qiibeepresale\u00a0,-it-says-\u201ccall-only-be-called\u201d-where-it-should-say-\u201ccan-only-be-called\u201d.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "Consider using the hasEnded function instead of duplicating the logic in afterFundraising modifier body. (Update: fixed in this commit.)", "body": "Consider using the hasEnded function instead of duplicating the logic in afterFundraising modifier body. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#consider-using-the-hasended-function-instead-of-duplicating-the-logic-in-afterfundraising-modifier-body.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "We recommend setting the token address in the QiibeePresale constructor\u00a0,mitigating the risk that the setToken function may not be called before the sale starts. (Update: fixed in this commit.)", "body": "We recommend setting the token address in the QiibeePresale constructor\u00a0,mitigating the risk that the setToken function may not be called before the sale starts. (Update: fixed in this commit.)", "html_url": "https://blog.openzeppelin.com/qiibee-token-audit-b19c03262f99#we-recommend-setting-the-token-address-in-the-qiibeepresale-constructor\u00a0,mitigating-the-risk-that-the-settoken-function-may-not-be-called-before-the-sale-starts.-(update:-fixed-in-this-commit.)", "labels": ["OpenZeppelin"]}, {"title": "The added fallback function with a manual revert is not necessary, since this is the default behavior of Solidity contracts. Consider removing it.", "body": "The added fallback function with a manual revert is not necessary, since this is the default behavior of Solidity contracts. Consider removing it.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#the-added-fallback-function-with-a-manual-revert-is-not-necessary,-since-this-is-the-default-behavior-of-solidity-contracts.-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "The WaxToken contract is requiring that the receiver is not the zero address in transfer and transferFrom. OpenZeppelin\u2019s BasicToken and StandardToken already have this precondition. Consider removing those validations from the WaxToken contract.", "body": "The WaxToken contract is requiring that the receiver is not the zero address in transfer and transferFrom. OpenZeppelin\u2019s BasicToken and StandardToken already have this precondition. Consider removing those validations from the WaxToken contract.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#the-waxtoken-contract-is-requiring-that-the-receiver-is-not-the-zero-address-in-transfer-and-transferfrom.-openzeppelin\u2019s-basictoken-and-standardtoken-already-have-this-precondition.-consider-removing-those-validations-from-the-waxtoken-contract.", "labels": ["OpenZeppelin"]}, {"title": "In the WaxToken constructor, a reference to this (the address of the contract) is stored in a variable called contractAddress. We see no reason why this variable is used instead of directly using the value of this throughout the contract.", "body": "In the WaxToken constructor, a reference to this (the address of the contract) is stored in a variable called contractAddress. We see no reason why this variable is used instead of directly using the value of this throughout the contract.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#in-the-waxtoken-constructor,-a-reference-to-this-(the-address-of-the-contract)-is-stored-in-a-variable-called-contractaddress.-we-see-no-reason-why-this-variable-is-used-instead-of-directly-using-the-value-of-this-throughout-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "The functions transfer and transferFrom have a precondition to reject a transfer of tokens to the WaxToken contract itself. It would be good to define a modifier that ensures this condition to avoid code duplication.", "body": "The functions transfer and transferFrom have a precondition to reject a transfer of tokens to the WaxToken contract itself. It would be good to define a modifier that ensures this condition to avoid code duplication.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#the-functions-transfer-and-transferfrom-have-a-precondition-to-reject-a-transfer-of-tokens-to-the-waxtoken-contract-itself.-it-would-be-good-to-define-a-modifier-that-ensures-this-condition-to-avoid-code-duplication.", "labels": ["OpenZeppelin"]}, {"title": "The WaxToken contract defines all its public functions without the public keyword explicitly. It\u2019s important to mark public functions as such, even though Solidity functions are public by default, to avoid confusion. Moreover, since version 0.4.17 of Solidity, the compiler will show a warning if the visibility specifier (public) is not explicitly given.", "body": "The WaxToken contract defines all its public functions without the public keyword explicitly. It\u2019s important to mark public functions as such, even though Solidity functions are public by default, to avoid confusion. Moreover, since version 0.4.17 of Solidity, the compiler will show a warning if the visibility specifier (public) is not explicitly given.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#the-waxtoken-contract-defines-all-its-public-functions-without-the-public-keyword-explicitly.-it\u2019s-important-to-mark-public-functions-as-such,-even-though-solidity-functions-are-public-by-default,-to-avoid-confusion.-moreover,-since-version-0.4.17-of-solidity,-the-compiler-will-show-a-warning-if-the-visibility-specifier-(public)-is-not-explicitly-given.", "labels": ["OpenZeppelin"]}, {"title": "The INITIAL_SUPPLY variable is initialized multiplying 1000000000 by the corresponding amount of decimals defined for the contract. Such a long number is hard to verify manually. It would be better to use the notation 1e9 to represent this kind of number in order to avoid typos.", "body": "The INITIAL_SUPPLY variable is initialized multiplying 1000000000 by the corresponding amount of decimals defined for the contract. Such a long number is hard to verify manually. It would be better to use the notation 1e9 to represent this kind of number in order to avoid typos.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#the-initial_supply-variable-is-initialized-multiplying-1000000000-by-the-corresponding-amount-of-decimals-defined-for-the-contract.-such-a-long-number-is-hard-to-verify-manually.-it-would-be-better-to-use-the-notation-1e9-to-represent-this-kind-of-number-in-order-to-avoid-typos.", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider using the mitigations implemented in OpenZeppelin\u2019s StandardToken.", "body": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider using the mitigations implemented in OpenZeppelin\u2019s StandardToken.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#keep-in-mind-that-there-is-a-possible-attack-vector-on-the-approve/transferfrom-functionality-of-erc20-tokens,-described-here.-consider-using-the-mitigations-implemented-in-openzeppelin\u2019s-standardtoken.", "labels": ["OpenZeppelin"]}, {"title": "Update: Suggestions were implemented in 841b4f9, 72686ef, d597238 and 2d9ffbc.", "body": "Update: Suggestions were implemented in 841b4f9, 72686ef, d597238 and 2d9ffbc.", "html_url": "https://blog.openzeppelin.com/wax-token-audit-e072e580407e#update:-suggestions-were-implemented-in-841b4f9,-72686ef,-d597238-and-2d9ffbc.", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "Sale can end while being\u00a0paused", "body": "Sale can end while being\u00a0paused", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#sale-can-end-while-being\u00a0paused", "labels": ["OpenZeppelin"]}, {"title": "The hasSaleEnded function can change its return value from false to true during the pause period while there should be an extension of the duration of the token sale. The update of endTime is done only after calling the unpausefunction and the state during the pause period may be misreported.", "body": "The hasSaleEnded function can change its return value from false to true during the pause period while there should be an extension of the duration of the token sale. The update of endTime is done only after calling the unpausefunction and the state during the pause period may be misreported.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#the-hassaleended-function-can-change-its-return-value-from-false-to-true-during-the-pause-period-while-there-should-be-an-extension-of-the-duration-of-the-token-sale.-the-update-of-endtime-is-done-only-after-calling-the-unpausefunction-and-the-state-during-the-pause-period-may-be-misreported.", "labels": ["OpenZeppelin"]}, {"title": "A consequence of this could be losing the ability to update whitelist in updateWhitelist function during the pause period.", "body": "A consequence of this could be losing the ability to update whitelist in updateWhitelist function during the pause period.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#a-consequence-of-this-could-be-losing-the-ability-to-update-whitelist-in-updatewhitelist-function-during-the-pause-period.", "labels": ["OpenZeppelin"]}, {"title": "We recommend updating hasSaleEnded function to consider the pause period.", "body": "We recommend updating hasSaleEnded function to consider the pause period.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-updating-hassaleended-function-to-consider-the-pause-period.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in these two commits.", "body": "Update: Fixed in these two commits.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-these-two-commits.", "labels": ["OpenZeppelin"]}, {"title": "Unchecked assumption that trustee and token have the same\u00a0owner", "body": "Unchecked assumption that trustee and token have the same\u00a0owner", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#unchecked-assumption-that-trustee-and-token-have-the-same\u00a0owner", "labels": ["OpenZeppelin"]}, {"title": "In thereclaimTokens function, there is a token transfer to the trusteecontract owner, but according to the comment above it should be transferred to the tokenContract owner: Note that the trustee should be able to move tokens even before the token is finalised because SimpleToken allows sending back to owner specifically. This statement is only true if the token contract owner is the same as trustee owner, but this precondition is not enforced anywhere.", "body": "In thereclaimTokens function, there is a token transfer to the trusteecontract owner, but according to the comment above it should be transferred to the tokenContract owner: Note that the trustee should be able to move tokens even before the token is finalised because SimpleToken allows sending back to owner specifically. This statement is only true if the token contract owner is the same as trustee owner, but this precondition is not enforced anywhere.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#in-thereclaimtokens-function,-there-is-a-token-transfer-to-the-trusteecontract-owner,-but-according-to-the-comment-above-it-should-be-transferred-to-the-tokencontract-owner:-note-that-the-trustee-should-be-able-to-move-tokens-even-before-the-token-is-finalised-because-simpletoken-allows-sending-back-to-owner-specifically.-this-statement-is-only-true-if-the-token-contract-owner-is-the-same-as-trustee-owner,-but-this-precondition-is-not-enforced-anywhere.", "labels": ["OpenZeppelin"]}, {"title": "We recommend replacing owner with tokenContract.owner in line 206 to specify the transfer target precisely.", "body": "We recommend replacing owner with tokenContract.owner in line 206 to specify the transfer target precisely.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-replacing-owner-with-tokencontract.owner-in-line-206-to-specify-the-transfer-target-precisely.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit improving both the TokenSale and Trusteecontracts.", "body": "Update: Fixed in this commit improving both the TokenSale and Trusteecontracts.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-this-commit-improving-both-the-tokensale-and-trusteecontracts.", "labels": ["OpenZeppelin"]}, {"title": "Two unchecked math operations involving constant\u00a0values", "body": "Two unchecked math operations involving constant\u00a0values", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#two-unchecked-math-operations-involving-constant\u00a0values", "labels": ["OpenZeppelin"]}, {"title": "There are some math operations that aren\u2019t checked like calculating the number of bought tokens orthe actual cost for the partial amount of tokens. It\u2019s always better to be safe and perform checked operations.", "body": "There are some math operations that aren\u2019t checked like calculating the number of bought tokens orthe actual cost for the partial amount of tokens. It\u2019s always better to be safe and perform checked operations.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#there-are-some-math-operations-that-aren\u2019t-checked-like-calculating-the-number-of-bought-tokens-orthe-actual-cost-for-the-partial-amount-of-tokens.-it\u2019s-always-better-to-be-safe-and-perform-checked-operations.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s worth mentioning that the safety of all the other calculations were correctly ensured with the SafeMath library.", "body": "It\u2019s worth mentioning that the safety of all the other calculations were correctly ensured with the SafeMath library.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#it\u2019s-worth-mentioning-that-the-safety-of-all-the-other-calculations-were-correctly-ensured-with-the-safemath-library.", "labels": ["OpenZeppelin"]}, {"title": "Consider using the SafeMath library, or performing pre-condition checks on all of the math operations.", "body": "Consider using the SafeMath library, or performing pre-condition checks on all of the math operations.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#consider-using-the-safemath-library,-or-performing-pre-condition-checks-on-all-of-the-math-operations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit by introducing the _PURCHASE_DIVIDER constant.", "body": "Update: Fixed in this commit by introducing the _PURCHASE_DIVIDER constant.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-this-commit-by-introducing-the-_purchase_divider-constant.", "labels": ["OpenZeppelin"]}, {"title": "Missing validation of the TOKEN_SALE constant", "body": "Missing validation of the TOKEN_SALE constant", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#missing-validation-of-the-token_sale-constant", "labels": ["OpenZeppelin"]}, {"title": "In the TokenSale contract, there is validation for most of the configuration constants which is a very good practice. The validation skips checking the correctness ofTOKENS_SALE parameter which can allow creation of a contract that is unable to sell any tokens at all.", "body": "In the TokenSale contract, there is validation for most of the configuration constants which is a very good practice. The validation skips checking the correctness ofTOKENS_SALE parameter which can allow creation of a contract that is unable to sell any tokens at all.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#in-the-tokensale-contract,-there-is-validation-for-most-of-the-configuration-constants-which-is-a-very-good-practice.-the-validation-skips-checking-the-correctness-oftokens_sale-parameter-which-can-allow-creation-of-a-contract-that-is-unable-to-sell-any-tokens-at-all.", "labels": ["OpenZeppelin"]}, {"title": "We recommend adding the missing validation to the TokenSale constructor.", "body": "We recommend adding the missing validation to the TokenSale constructor.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-adding-the-missing-validation-to-the-tokensale-constructor.", "labels": ["OpenZeppelin"]}, {"title": "Update: The Simple Token team indicated that, TOKENS_SALE is effectively validated by (1) the constructor confirming that all of the token values add up to TOKENS_MAX and (2) TokenSale.initialize confirming that the balance of TokenSale is equal to TOKENS_SALE. It is true that if TOKEN_SALE were set to 0in TokenSaleConfig (and other values adjusted) and if we either transfer 0 STto TokenSale or do not transfer anything at all, those validations would pass. However, the team thinks they must surely be allowed to assume that their config contract is correct.", "body": "Update: The Simple Token team indicated that, TOKENS_SALE is effectively validated by (1) the constructor confirming that all of the token values add up to TOKENS_MAX and (2) TokenSale.initialize confirming that the balance of TokenSale is equal to TOKENS_SALE. It is true that if TOKEN_SALE were set to 0in TokenSaleConfig (and other values adjusted) and if we either transfer 0 STto TokenSale or do not transfer anything at all, those validations would pass. However, the team thinks they must surely be allowed to assume that their config contract is correct.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-the-simple-token-team-indicated-that,-tokens_sale-is-effectively-validated-by-(1)-the-constructor-confirming-that-all-of-the-token-values-add-up-to-tokens_max-and-(2)-tokensale.initialize-confirming-that-the-balance-of-tokensale-is-equal-to-tokens_sale.-it-is-true-that-if-token_sale-were-set-to-0in-tokensaleconfig-(and-other-values-adjusted)-and-if-we-either-transfer-0-stto-tokensale-or-do-not-transfer-anything-at-all,-those-validations-would-pass.-however,-the-team-thinks-they-must-surely-be-allowed-to-assume-that-their-config-contract-is-correct.", "labels": ["OpenZeppelin"]}, {"title": "Access modifier conflicting with documentation and function\u00a0body", "body": "Access modifier conflicting with documentation and function\u00a0body", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#access-modifier-conflicting-with-documentation-and-function\u00a0body", "labels": ["OpenZeppelin"]}, {"title": "The onlyOps modifier restricts access to the processAllocation function, allowing only an account that matches the opsAddress. Such a behaviour conflicts with the documentation that describes the function as Push model which allows _the owner to transfer tokens to the beneficiary_. Moreover, this is also inconsistent with the function body which contains logic that requires a message sender to be the owner or the admin.", "body": "The onlyOps modifier restricts access to the processAllocation function, allowing only an account that matches the opsAddress. Such a behaviour conflicts with the documentation that describes the function as Push model which allows _the owner to transfer tokens to the beneficiary_. Moreover, this is also inconsistent with the function body which contains logic that requires a message sender to be the owner or the admin.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#the-onlyops-modifier-restricts-access-to-the-processallocation-function,-allowing-only-an-account-that-matches-the-opsaddress.-such-a-behaviour-conflicts-with-the-documentation-that-describes-the-function-as-push-model-which-allows-_the-owner-to-transfer-tokens-to-the-beneficiary_.-moreover,-this-is-also-inconsistent-with-the-function-body-which-contains-logic-that-requires-a-message-sender-to-be-the-owner-or-the-admin.", "labels": ["OpenZeppelin"]}, {"title": "We recommend resolving the conflict by either removing the onlyOpsrestriction access modifier or updating the documentation and removing irrelevant code fragments lines 167\u2013170) from the function body.", "body": "We recommend resolving the conflict by either removing the onlyOpsrestriction access modifier or updating the documentation and removing irrelevant code fragments lines 167\u2013170) from the function body.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-resolving-the-conflict-by-either-removing-the-onlyopsrestriction-access-modifier-or-updating-the-documentation-and-removing-irrelevant-code-fragments-lines-167\u2013170)-from-the-function-body.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit by updating comments and removing the unreachable code.", "body": "Update: Fixed in this commit by updating comments and removing the unreachable code.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-this-commit-by-updating-comments-and-removing-the-unreachable-code.", "labels": ["OpenZeppelin"]}, {"title": "Possible to initiate Ownership Transfer with the null\u00a0address", "body": "Possible to initiate Ownership Transfer with the null\u00a0address", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#possible-to-initiate-ownership-transfer-with-the-null\u00a0address", "labels": ["OpenZeppelin"]}, {"title": "Function initiateOwnershipTransfer allows initiating a transfer passing the 0x0 address as a _proposedOwner. This action will be ineffective as it\u2019s impossible to call the completeOwnershipTransfer function from the 0x0address. The null address is also used as a special value to mark that the transfer was completed so it\u2019d be the best if it could be set only by internal invocation.", "body": "Function initiateOwnershipTransfer allows initiating a transfer passing the 0x0 address as a _proposedOwner. This action will be ineffective as it\u2019s impossible to call the completeOwnershipTransfer function from the 0x0address. The null address is also used as a special value to mark that the transfer was completed so it\u2019d be the best if it could be set only by internal invocation.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#function-initiateownershiptransfer-allows-initiating-a-transfer-passing-the-0x0-address-as-a-_proposedowner.-this-action-will-be-ineffective-as-it\u2019s-impossible-to-call-the-completeownershiptransfer-function-from-the-0x0address.-the-null-address-is-also-used-as-a-special-value-to-mark-that-the-transfer-was-completed-so-it\u2019d-be-the-best-if-it-could-be-set-only-by-internal-invocation.", "labels": ["OpenZeppelin"]}, {"title": "If the contract could be ownerless a confirmation step needs to be skipped for the 0x0 address. Otherwise, we recommend adding a precondition check preventing initiation of the ownership transfer with the0x0 value.", "body": "If the contract could be ownerless a confirmation step needs to be skipped for the 0x0 address. Otherwise, we recommend adding a precondition check preventing initiation of the ownership transfer with the0x0 value.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#if-the-contract-could-be-ownerless-a-confirmation-step-needs-to-be-skipped-for-the-0x0-address.-otherwise,-we-recommend-adding-a-precondition-check-preventing-initiation-of-the-ownership-transfer-with-the0x0-value.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this pull request. The team decided to postpone merging the changes to the master branch as it will require excessive refactor of all the tests.", "body": "Update: Fixed in this pull request. The team decided to postpone merging the changes to the master branch as it will require excessive refactor of all the tests.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-this-pull-request.-the-team-decided-to-postpone-merging-the-changes-to-the-master-branch-as-it-will-require-excessive-refactor-of-all-the-tests.", "labels": ["OpenZeppelin"]}, {"title": "Duplicated logic in mock contracts", "body": "Duplicated logic in mock contracts", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#duplicated-logic-in-mock-contracts", "labels": ["OpenZeppelin"]}, {"title": "Contracts TokenSaleMock and FutureTokenSaleLockBoxMock have almost identical content duplicating the code that implements time manipulation behaviour. Not only increases it the maintenance costs but also brings the risk of updating only one of the contracts and skipping another.", "body": "Contracts TokenSaleMock and FutureTokenSaleLockBoxMock have almost identical content duplicating the code that implements time manipulation behaviour. Not only increases it the maintenance costs but also brings the risk of updating only one of the contracts and skipping another.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#contracts-tokensalemock-and-futuretokensalelockboxmock-have-almost-identical-content-duplicating-the-code-that-implements-time-manipulation-behaviour.-not-only-increases-it-the-maintenance-costs-but-also-brings-the-risk-of-updating-only-one-of-the-contracts-and-skipping-another.", "labels": ["OpenZeppelin"]}, {"title": "We recommend extracting the common logic into an abstract Mock contract that will be a base class for both TokenSaleMock and FutureTokenSaleLockBoxMock.", "body": "We recommend extracting the common logic into an abstract Mock contract that will be a base class for both TokenSaleMock and FutureTokenSaleLockBoxMock.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-extracting-the-common-logic-into-an-abstract-mock-contract-that-will-be-a-base-class-for-both-tokensalemock-and-futuretokensalelockboxmock.", "labels": ["OpenZeppelin"]}, {"title": "Update: While the Simple Token team agree with the points, they do not feel that this is a concern that merits changing the code.", "body": "Update: While the Simple Token team agree with the points, they do not feel that this is a concern that merits changing the code.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-while-the-simple-token-team-agree-with-the-points,-they-do-not-feel-that-this-is-a-concern-that-merits-changing-the-code.", "labels": ["OpenZeppelin"]}, {"title": "Imprecise unlock date documentation", "body": "Imprecise unlock date documentation", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#imprecise-unlock-date-documentation", "labels": ["OpenZeppelin"]}, {"title": "The definition of unlockDate from FutureTokenSaleLockBox contract (The unlock date is initially six months after 26 weeks. The difference is dependent on an exact unlockDate and requires complex calendar logic to be precisely calculated.", "body": "The definition of unlockDate from FutureTokenSaleLockBox contract (The unlock date is initially six months after 26 weeks. The difference is dependent on an exact unlockDate and requires complex calendar logic to be precisely calculated.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#the-definition-of-unlockdate-from-futuretokensalelockbox-contract-(the-unlock-date-is-initially-six-months-after-26-weeks.-the-difference-is-dependent-on-an-exact-unlockdate-and-requires-complex-calendar-logic-to-be-precisely-calculated.", "labels": ["OpenZeppelin"]}, {"title": "We recommend documenting the periods in fixed time units such as days or weeks.", "body": "We recommend documenting the periods in fixed time units such as days or weeks.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#we-recommend-documenting-the-periods-in-fixed-time-units-such-as-days-or-weeks.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit.", "body": "Update: Fixed in this commit.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#update:-fixed-in-this-commit.", "labels": ["OpenZeppelin"]}, {"title": "Congratulations on writing such a thorough test suite! There are 244 tests in total, with most of them covering the integration of all contracts into the token sale contract.", "body": "Congratulations on writing such a thorough test suite! There are 244 tests in total, with most of them covering the integration of all contracts into the token sale contract.", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#congratulations-on-writing-such-a-thorough-test-suite!-there-are-244-tests-in-total,-with-most-of-them-covering-the-integration-of-all-contracts-into-the-token-sale-contract.", "labels": ["OpenZeppelin"]}, {"title": "There is a typo in Trustee, it saysacount where it should say account. (Update: fixed in this commit).", "body": "There is a typo in Trustee, it saysacount where it should say account. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#there-is-a-typo-in-trustee,-it-saysacount-where-it-should-say-account.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "The comparison ok == true is redundant as the ok variable is already a boolean value. The same comment applies to checking the function result by require(hasUnlockDatePassed() == true).(Update: fixed in this commit).", "body": "The comparison ok == true is redundant as the ok variable is already a boolean value. The same comment applies to checking the function result by require(hasUnlockDatePassed() == true).(Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#the-comparison-ok-==-true-is-redundant-as-the-ok-variable-is-already-a-boolean-value.-the-same-comment-applies-to-checking-the-function-result-by-require(hasunlockdatepassed()-==-true).(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Both PHASE1_ACCOUNT_TOKENS_MAX and TOKENS_PER_KETHER duplicate the same calculations. We recommend adding a helper constant TOKENS_PER_ETH to facilitate calculating the previously mentioned values. (Update: the team decided to leave the code as it is, because the constants are unrelated in general and the similar calculation occurs in the current version only).", "body": "Both PHASE1_ACCOUNT_TOKENS_MAX and TOKENS_PER_KETHER duplicate the same calculations. We recommend adding a helper constant TOKENS_PER_ETH to facilitate calculating the previously mentioned values. (Update: the team decided to leave the code as it is, because the constants are unrelated in general and the similar calculation occurs in the current version only).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#both-phase1_account_tokens_max-and-tokens_per_kether-duplicate-the-same-calculations.-we-recommend-adding-a-helper-constant-tokens_per_eth-to-facilitate-calculating-the-previously-mentioned-values.-(update:-the-team-decided-to-leave-the-code-as-it-is,-because-the-constants-are-unrelated-in-general-and-the-similar-calculation-occurs-in-the-current-version-only).", "labels": ["OpenZeppelin"]}, {"title": "initialize function is described as:\u00a0\u2026link the sale token with the token contract _while the linking process is executed not in this function but in the constructor. Consider updating the comment to explain that the function is only checking correctness of configuration parameters. (Update: _fixed in this commit).", "body": "initialize function is described as:\u00a0\u2026link the sale token with the token contract _while the linking process is executed not in this function but in the constructor. Consider updating the comment to explain that the function is only checking correctness of configuration parameters. (Update: _fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#initialize-function-is-described-as:\u00a0\u2026link-the-sale-token-with-the-token-contract-_while-the-linking-process-is-executed-not-in-this-function-but-in-the-constructor.-consider-updating-the-comment-to-explain-that-the-function-is-only-checking-correctness-of-configuration-parameters.-(update:-_fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Consider turning magic numbers such as \u201c18\u201d and \u201c3\u201d that are repeatably used in buyTokens functions to predefined constants. (Update: fixed in this commit).", "body": "Consider turning magic numbers such as \u201c18\u201d and \u201c3\u201d that are repeatably used in buyTokens functions to predefined constants. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#consider-turning-magic-numbers-such-as-\u201c18\u201d-and-\u201c3\u201d-that-are-repeatably-used-in-buytokens-functions-to-predefined-constants.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Consider using full ERC20Interface instead of the TokenInterface stub to get the compilation time syntax checks. (Update: fixed in this commit).", "body": "Consider using full ERC20Interface instead of the TokenInterface stub to get the compilation time syntax checks. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#consider-using-full-erc20interface-instead-of-the-tokeninterface-stub-to-get-the-compilation-time-syntax-checks.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, describedhere. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place. (Update: explanation note added in this pull request).", "body": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, describedhere. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place. (Update: explanation note added in this pull request).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#keep-in-mind-that-there-is-a-possible-attack-vector-on-the-approve/transferfrom-functionality-of-erc20-tokens,-describedhere.-consider-implementing-one-of-the-proposed-mitigations,-or-using-the-erc20-implementation-from-openzeppelin-which-already-has-one-in-place.-(update:-explanation-note-added-in-this-pull-request).", "labels": ["OpenZeppelin"]}, {"title": "In finalize function of the TokenSale contract there is a suggestion that: The owner will also need to finalize the token contract so that token transfers are enabled. It is actually the admin that needs to finalize the token, not the owner. We recommend to update the documentation or change the permission scheme, so the description is compatible with the documentation. (Update: fixed in this commit).", "body": "In finalize function of the TokenSale contract there is a suggestion that: The owner will also need to finalize the token contract so that token transfers are enabled. It is actually the admin that needs to finalize the token, not the owner. We recommend to update the documentation or change the permission scheme, so the description is compatible with the documentation. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#in-finalize-function-of-the-tokensale-contract-there-is-a-suggestion-that:-the-owner-will-also-need-to-finalize-the-token-contract-so-that-token-transfers-are-enabled.-it-is-actually-the-admin-that-needs-to-finalize-the-token,-not-the-owner.-we-recommend-to-update-the-documentation-or-change-the-permission-scheme,-so-the-description-is-compatible-with-the-documentation.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "The contracts SafeMath andPausable are very similar to OpenZeppelin library contracts sharing the same names. Consider avoiding code repetition, which can bring regression problems andintroduce unexpected bugs. We recommend using the standard modules from OpenZeppelin. (Update: the team decided to wait with directly linking to the OpenZeppelin library until it offers full support for the new version of solidity compiler).", "body": "The contracts SafeMath andPausable are very similar to OpenZeppelin library contracts sharing the same names. Consider avoiding code repetition, which can bring regression problems andintroduce unexpected bugs. We recommend using the standard modules from OpenZeppelin. (Update: the team decided to wait with directly linking to the OpenZeppelin library until it offers full support for the new version of solidity compiler).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#the-contracts-safemath-andpausable-are-very-similar-to-openzeppelin-library-contracts-sharing-the-same-names.-consider-avoiding-code-repetition,-which-can-bring-regression-problems-andintroduce-unexpected-bugs.-we-recommend-using-the-standard-modules-from-openzeppelin.-(update:-the-team-decided-to-wait-with-directly-linking-to-the-openzeppelin-library-until-it-offers-full-support-for-the-new-version-of-solidity-compiler).", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the call to the finalizeInternal function from the publicly accessible buyTokens method. It\u2019s safer to keep the critical functionality in the hands of admin/owner than to leave it open to the public. (Update: the team decided to leave the current version as they have enough control by using the SimpleToken.finalize function).", "body": "Consider removing the call to the finalizeInternal function from the publicly accessible buyTokens method. It\u2019s safer to keep the critical functionality in the hands of admin/owner than to leave it open to the public. (Update: the team decided to leave the current version as they have enough control by using the SimpleToken.finalize function).", "html_url": "https://blog.openzeppelin.com/simple-token-sale-audit-30e5f2365463#consider-removing-the-call-to-the-finalizeinternal-function-from-the-publicly-accessible-buytokens-method.-it\u2019s-safer-to-keep-the-critical-functionality-in-the-hands-of-admin/owner-than-to-leave-it-open-to-the-public.-(update:-the-team-decided-to-leave-the-current-version-as-they-have-enough-control-by-using-the-simpletoken.finalize-function).", "labels": ["OpenZeppelin"]}, {"title": "No critical severity issues were found.", "body": "Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the UKG token and distribution contracts. We have not reviewed the related UnikoinGold project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#no-critical-severity-issues-were-found.", "labels": ["OpenZeppelin"]}, {"title": "Unnecessary claim step for sale contributors", "body": "Unnecessary claim step for sale contributors", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#unnecessary-claim-step-for-sale-contributors", "labels": ["OpenZeppelin"]}, {"title": "Contributors participate in the sale by transferring their balance to a set of trusted addresses managed by Unikrn, who then distribute the tokens in a later step via the TokenDistribution contract. Token allocations are set for each contributor, who must then claim the tokens to have them added to their balance.", "body": "Contributors participate in the sale by transferring their balance to a set of trusted addresses managed by Unikrn, who then distribute the tokens in a later step via the TokenDistribution contract. Token allocations are set for each contributor, who must then claim the tokens to have them added to their balance.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#contributors-participate-in-the-sale-by-transferring-their-balance-to-a-set-of-trusted-addresses-managed-by-unikrn,-who-then-distribute-the-tokens-in-a-later-step-via-the-tokendistribution-contract.-token-allocations-are-set-for-each-contributor,-who-must-then-claim-the-tokens-to-have-them-added-to-their-balance.", "labels": ["OpenZeppelin"]}, {"title": "The documentation indicates that this is done \u201cbecause if a participant were to lose their key, there would never be 1B tokens created\u201d. This is incorrect, since tokens can still be created and allocated to their addresses. This way, there will be indeed 1B tokens, even if some participants cannot move them afterwards.", "body": "The documentation indicates that this is done \u201cbecause if a participant were to lose their key, there would never be 1B tokens created\u201d. This is incorrect, since tokens can still be created and allocated to their addresses. This way, there will be indeed 1B tokens, even if some participants cannot move them afterwards.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-documentation-indicates-that-this-is-done-\u201cbecause-if-a-participant-were-to-lose-their-key,-there-would-never-be-1b-tokens-created\u201d.-this-is-incorrect,-since-tokens-can-still-be-created-and-allocated-to-their-addresses.-this-way,-there-will-be-indeed-1b-tokens,-even-if-some-participants-cannot-move-them-afterwards.", "labels": ["OpenZeppelin"]}, {"title": "Furthermore, if a participant did misplace their keys, tokens are locked in the TokenDistribution contract (as per L136) and there are not methods to take them out of the contract, so the tokens are created but are unusable. A participant may misplace their keys after the distribution, so it makes no sense to try to prevent allocation to addresses with lost keys.", "body": "Furthermore, if a participant did misplace their keys, tokens are locked in the TokenDistribution contract (as per L136) and there are not methods to take them out of the contract, so the tokens are created but are unusable. A participant may misplace their keys after the distribution, so it makes no sense to try to prevent allocation to addresses with lost keys.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#furthermore,-if-a-participant-did-misplace-their-keys,-tokens-are-locked-in-the-tokendistribution-contract-(as-per-l136)-and-there-are-not-methods-to-take-them-out-of-the-contract,-so-the-tokens-are-created-but-are-unusable.-a-participant-may-misplace-their-keys-after-the-distribution,-so-it-makes-no-sense-to-try-to-prevent-allocation-to-addresses-with-lost-keys.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the claim mechanic altogether, and allocate the tokens to the contributors directly. The whole ParticipantAdditionProxy contract seems to be unnecessary. This reduces the complexity of the distribution process, simplifies the code, and reduces the hassle for end users to access their purchased tokens.", "body": "Consider removing the claim mechanic altogether, and allocate the tokens to the contributors directly. The whole ParticipantAdditionProxy contract seems to be unnecessary. This reduces the complexity of the distribution process, simplifies the code, and reduces the hassle for end users to access their purchased tokens.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-removing-the-claim-mechanic-altogether,-and-allocate-the-tokens-to-the-contributors-directly.-the-whole-participantadditionproxy-contract-seems-to-be-unnecessary.-this-reduces-the-complexity-of-the-distribution-process,-simplifies-the-code,-and-reduces-the-hassle-for-end-users-to-access-their-purchased-tokens.", "labels": ["OpenZeppelin"]}, {"title": "Update: The CoinCircle team indicated that this was motivated by the fact that the proxy contract will be deployed before the distribution contract, in order to store the future owners of the token before the final implementation is finalized:", "body": "Update: The CoinCircle team indicated that this was motivated by the fact that the proxy contract will be deployed before the distribution contract, in order to store the future owners of the token before the final implementation is finalized:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-the-coincircle-team-indicated-that-this-was-motivated-by-the-fact-that-the-proxy-contract-will-be-deployed-before-the-distribution-contract,-in-order-to-store-the-future-owners-of-the-token-before-the-final-implementation-is-finalized:", "labels": ["OpenZeppelin"]}, {"title": "The design decision for the contract was to separate concerns: the proxy contract will be deployed prior to the distribution contract. The proxy contract will be populated by Unikrn, and not be made known to the public until the contract is verified, locked and unchangeable", "body": "The design decision for the contract was to separate concerns: the proxy contract will be deployed prior to the distribution contract. The proxy contract will be populated by Unikrn, and not be made known to the public until the contract is verified, locked and unchangeable", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-design-decision-for-the-contract-was-to-separate-concerns:-the-proxy-contract-will-be-deployed-prior-to-the-distribution-contract.-the-proxy-contract-will-be-populated-by-unikrn,-and-not-be-made-known-to-the-public-until-the-contract-is-verified,-locked-and-unchangeable", "labels": ["OpenZeppelin"]}, {"title": "Check order of timestamps in Token distribution constructor", "body": "Check order of timestamps in Token distribution constructor", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#check-order-of-timestamps-in-token-distribution-constructor", "labels": ["OpenZeppelin"]}, {"title": "The TokenDistribution contract relies on three timestamps:", "body": "The TokenDistribution contract relies on three timestamps:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-tokendistribution-contract-relies-on-three-timestamps:", "labels": ["OpenZeppelin"]}, {"title": "freezeTimestamp, which indicates up to which point it is possible to cancel the distribution contract", "body": "freezeTimestamp, which indicates up to which point it is possible to cancel the distribution contract", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#freezetimestamp,-which-indicates-up-to-which-point-it-is-possible-to-cancel-the-distribution-contract", "labels": ["OpenZeppelin"]}, {"title": "distributionStartTimestamp, that signals when the distribution starts", "body": "distributionStartTimestamp, that signals when the distribution starts", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#distributionstarttimestamp,-that-signals-when-the-distribution-starts", "labels": ["OpenZeppelin"]}, {"title": "lockupTimestamp, which indicates when locked tokens may be released", "body": "lockupTimestamp, which indicates when locked tokens may be released", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#lockuptimestamp,-which-indicates-when-locked-tokens-may-be-released", "labels": ["OpenZeppelin"]}, {"title": "Though it is assumed that freezeTimestamp should be before the distributionStartTimestamp, this is not checked in the code. If this precondition is not respected, an owner may stop the contract mid-distribution.", "body": "Though it is assumed that freezeTimestamp should be before the distributionStartTimestamp, this is not checked in the code. If this precondition is not respected, an owner may stop the contract mid-distribution.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#though-it-is-assumed-that-freezetimestamp-should-be-before-the-distributionstarttimestamp,-this-is-not-checked-in-the-code.-if-this-precondition-is-not-respected,-an-owner-may-stop-the-contract-mid-distribution.", "labels": ["OpenZeppelin"]}, {"title": "Also, for the lockup to have any effect, it is necessary for lockupTimestamp to occur after the distributionStartTimestamp. Otherwise, locked tokens can be claimed as soon as distribution starts.", "body": "Also, for the lockup to have any effect, it is necessary for lockupTimestamp to occur after the distributionStartTimestamp. Otherwise, locked tokens can be claimed as soon as distribution starts.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#also,-for-the-lockup-to-have-any-effect,-it-is-necessary-for-lockuptimestamp-to-occur-after-the-distributionstarttimestamp.-otherwise,-locked-tokens-can-be-claimed-as-soon-as-distribution-starts.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding a require guard for freezeTimestamp &lt; distributionStartTimestamp, and another for distributionStartTimestamp &lt; lockupTimestamp, in the TokenDistribution constructor.", "body": "Consider adding a require guard for freezeTimestamp &lt; distributionStartTimestamp, and another for distributionStartTimestamp &lt; lockupTimestamp, in the TokenDistribution constructor.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-adding-a-require-guard-for-freezetimestamp-&lt;-distributionstarttimestamp,-and-another-for-distributionstarttimestamp-&lt;-lockuptimestamp,-in-the-tokendistribution-constructor.", "labels": ["OpenZeppelin"]}, {"title": "Update: First guard added in this commit. Second one is unnecessary as per this commit.", "body": "Update: First guard added in this commit. Second one is unnecessary as per this commit.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-first-guard-added-in-this-commit.-second-one-is-unnecessary-as-per-this-commit.", "labels": ["OpenZeppelin"]}, {"title": "Make Token ERC20 Compliant", "body": "Make Token ERC20 Compliant", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#make-token-erc20-compliant", "labels": ["OpenZeppelin"]}, {"title": "There\u2019s several ways in which the UKG token is not ERC20 compliant.", "body": "There\u2019s several ways in which the UKG token is not ERC20 compliant.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#there\u2019s-several-ways-in-which-the-ukg-token-is-not-erc20-compliant.", "labels": ["OpenZeppelin"]}, {"title": "The totalSupply variable is not updated correctly. It should always contain the total token supply. For example, token balance is given to the Unikrn team in line 138 of TokenDistribution.sol and totalSupply is left unchanged. Consider updating totalSupply every time tokens are created or destroyed.", "body": "The totalSupply variable is not updated correctly. It should always contain the total token supply. For example, token balance is given to the Unikrn team in line 138 of TokenDistribution.sol and totalSupply is left unchanged. Consider updating totalSupply every time tokens are created or destroyed.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-totalsupply-variable-is-not-updated-correctly.-it-should-always-contain-the-total-token-supply.-for-example,-token-balance-is-given-to-the-unikrn-team-in-line-138-of-tokendistribution.sol-and-totalsupply-is-left-unchanged.-consider-updating-totalsupply-every-time-tokens-are-created-or-destroyed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit.", "body": "Consider making these changes to make the token respect the ERC20 standard.  Medium Severity  Split Token and Distribution into different contracts  The token Distribution process is built into the same Token contract in TokenDistribution.sol. Since the distribution is not part of the token intrinsic mechanics, it is strongly recommended to use a standard Token contract and a separate Distribution contract. This contract would start with all the tokens to distribute among users, and invoke the transfer method of the Token when needed.  This simplifies the logic of the token contract, separates different concerns among different contracts, and also reduces the attack surface for the token contract.  Update: Fixed in this, this, this and this commits.  Use SafeMath in all math operations  Though some math operations are safe, there are others that are unchecked in TokenDistribution lines 162, 236, 294. Its always better to be safe and perform checked operations.  In particular, line 235 subtracts the current phase allocation from the senders remaining allowance, without checking that the minuend is greater or equal than the subtrahend. Even though the distribution logic should not allow for this to happen, its highly recommended to always check that a user has enough balance when subtracting from the allowance, which is done automatically when using SafeMath.    Fail early and loudly  In the spirit of failing as promptly as possible in all methods, consider adding checks in functions allocatePresaleBalances,allocateSaleBalances, andallocateLockedBalancesof ParticipantAdditionProxy to ensure that both arrays passed in as parameters have the same length. If the first array passed in is shorter than the second by mistake (ie if an address is missing for an allocation), then the code will silently continue.    Low Severity  Install OpenZeppelin via npm  SafeMath,  Ownable, and  Token. This violates OpenZeppelins MIT license, which requires the licence and copyright notice to be included if its code is used, and makes it difficult to update to a more recent version.  Consider following the recommended way to use OpenZeppelin contracts, which is via the zeppelin-solidity npm package. This allows for any bugfixes to be easily integrated into the codebase, such as issues 375 and 400 which are fixed in the latest release and affect the Token contract.    Redundant state variables in ParticipantAdditionProxy  ParticipantAdditionProxy keeps track of whether the entire  addition process is complete (  balance for each address(  has already been allocated (  Assuming that each participant has a non-negative allocation, and since once a participant is allocated it cannot be modified, then the flag stating whether a participant has been allocated can be replaced by a check of whether the balance for the address is zero or not. This allows the threeParticipantAllocated variables to be removed.  when the cap is reached, the flags and methods for ending the addition process (  Removing redundant state variables not only reduces gas costs due to reduced storage used, but also greatly simplifies the code. Consider doing so.  Update: Fixed in this commit, though endParticipantAddition functions were kept for clarity.  Solidity version  Current code specifies version pragma ^0.4.11. We recommend changing the solidity version pragma to the latest version (pragma solidity ^0.4.17) to enforce the use of an up to date compiler.  Update: Updated to 0.4.15 in this commit, latest version of solidity supported by the used Truffle version.  Confusing use of unneeded temporal variables  Throughout the code, in many functions a temp variable with a calculation is defined, an assertion is performed over the temp value, and if it succeeds, then a state variable is assigned with the value temp. See as an example ParticipantAdditionProxy L70:  The same happens in ParticipantAdditionProxy L92 and L114, and TokenDistribution L158 and L290.  Since a failed assertion via require will revert all state changes within the transaction, it is not necessary to use this temp variable. Assigning directly to the state variable and then checking the assertion will have the same effect, and make the code shorter and easier to read. Consider removing these unneeded temporal variables.  Update: Fixed in this and this commits.  Usage of magic constants  magic constant throughout the contract code, in  L142,  L189,  L214,  L215 and  L239.  Use of magic constants reduces code readability and makes it harder to understand code intention. We recommend extracting magic constants into contract constants.  Update: Fixed all except for L142 in this and this commits.  Unused state variable phasesClaimable  State variable phasesClaimable in TokenDistribution is unused. Moreover, there is a function with the same name in L198 which shadows the getter generated by the public modifier, and has entirely different semantics. Consider removing the phasesClaimablefield.    Use of integer type to represent boolean  represented in the ABI, . Consider changing the type of the map values from  Update: Fixed by removing the field (as suggested below) in this commit._  Redundant state variable isVesting  reached the last phase in    Redundant state variables claimed and phasesClaimed  State variables claimed and phasesClaimed in TokenDistribution hold the same information: whether an address has claimed a particular phase for the presale. The former keeps track of both through a mapping phase =&gt; address =&gt; isClaimed, while the latter stores the last phase claimed for a given address. Given that phases can only be claimed incrementally (i.e. phase N cannot be claimed unless phase N-1 was claimed), the following equivalence holds:  Consider removing either of the two (we suggest removing claimed) in favour of the other to remove redundant state from the contract.  Update: Both variables were decided to be kept to reduce complexity of the phasesClaimable function implementation.  Notes  Some constants are redefined in different locations. Example: PRESALE_TOKEN_ALLOCATION_CAP is defined in both TokenDistribution and ParticipantAdditionProxy. (Update: kept for readability).  Creating modifiers that are only used once is more confusing than useful. For example, presaleTokensStillAvailable defined in L102 of TokenDistribution.sol is only used in L255 of the same file. Consider having that as a regular function precondition. (Update: fixed in this commit).  Consider removing redundant getter functions for fields already marked as public. Solidity automatically creates getter functions for these fields, so it is not necessary to redefine functions to access them from outside the contract. Examples of these functions arebalanceOfPresaleParticipants , balanceOfLockedParticipants and balanceOfSaleParticipants in ParticipantAdditionProxy; as well as all the test functions (presaleParticipantAllowedAllocationTest, allocationPerPhaseTest,remainingAllowanceTest, saleParticipantCollectedTest, and isVestingTest) defined in TokenDistribution L314L332. (Update: fixed in thesetwo commits).  Consider adding a check for phase being strictly greater than zero in claimPresaleTokensIterate, even though the function is internal and only invoked with values greater than zero, for additional security in case the calling code is changed. (Update: fixed in this commit).  The function balanceOf from BasicToken is repeated in TokenDistribution L310, which inherits from BasicToken. Consider removing the redundant code. (Update: fixed in this commit).  Presale, locked, and sale logic in ParticipantAdditionProxy is very similar and contains a lot of very similar code. Lots of functions related to that could be generalized, or abstracted, to reduce code repetition. See for example allocateSaleBalances, allocateLockedBalances, and allocatePresaleBalances, which are almost exact copies of the same code, with different variable names. The same happens with claimLockedTokensand claimSaleTokensin TokenDistribution. (Update: locked logic was removed in thiscommit, reducing the number of copies of the same code)._  For-loops found in code are bounded and safe._  The function min in L180 of TokenDistribution is already implemented in the Math library of OpenZeppelin. Consider reusing the available function from OpenZeppelin rather than copying it into the contract. (Update: fixed in this commit).  Consider adding a comment to the field claimed in L77 of TokenDistribution to clarify that the mapping is indexed by the presale phase. (Update: fixed in this commit).  Consider moving the cancelDistribution flag, along with the modifier and method to set it, to a separate Cancelable contract, similar to OpenZeppelins Pausable contract, to improve separation of concerns._  The first iteration of the loop for computing endOfPhaseTimestamp in L142 of TokenDistribution is skipped and executed manually outside the loop. Consider executing it within the loop to reduce code duplication. (Update: fixed in this commit).  As an alternative to the previous item, consider removing the state variable endOfPhaseTimestampaltogether in order to reduce gas costs from unnecessary storage, since this value can be easily calculated on the fly whenever needed._  Comments on state variables numLockedTokensDistributed and lockupTimestamp are copied from the respective previous lines. Consider updating them to properly document the variables. (Update: fixed in this commit).  Update 51fcf759  After the original audit, the Unikrn team asked us to review two additional changes:  The possibility to correct mistakes when setting up the participants list (commit fcd4b0ce).  A change from pull to push transfers in the tokens distribution, so end-users do not need to pay the gas cost for claiming their tokens from the sale (commit 51fcf759).  We have reviewed these changes and found no issues with the updated code. We include a few comments below:  Great job on automated tests, with coverage reaching an impressive 99%.  With the addition of the removeParticipant method, it is now possible to remove or change the number of tokens for a participant, as long as the sale is not marked as done via the saleAdditionDone flag. In order to prevent any modifications during the distribution, consider adding a check in distributeSaleTokens to ensure that saleAdditionDone is set in the participantData ProxyContract. This prevents a distribution from taking place using a ParticipantAdditionProxy that might still change. Consider doing the same for the claimPresaleTokens method and the presaleAdditionDone flag.  Methods balanceOfPresaleParticipants and balanceOfSaleParticipants in the ProxyContract interface L3233 are not needed and can be removed to prevent confusions, since they are unimplemented by the ParticipantAdditionProxy contract.  Conclusion  No critical severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the UKG token and distribution contracts. We have not reviewed the related UnikoinGold project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-in-this-commit.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding public name, symbol and decimal properties to the Token contract. Though not mandatory, they are recommended as part of the ERC20 specification. See OpenZeppelin\u2019s SimpleToken as an example.", "body": "Consider adding public name, symbol and decimal properties to the Token contract. Though not mandatory, they are recommended as part of the ERC20 specification. See OpenZeppelin\u2019s SimpleToken as an example.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-adding-public-name,-symbol-and-decimal-properties-to-the-token-contract.-though-not-mandatory,-they-are-recommended-as-part-of-the-erc20-specification.-see-openzeppelin\u2019s-simpletoken-as-an-example.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this and this commits. Remember also to bump version field to 1.0 and mark it as constant once the final code is frozen.", "body": "Update: Fixed in this and this commits. Remember also to bump version field to 1.0 and mark it as constant once the final code is frozen.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-in-this-and-this-commits.-remember-also-to-bump-version-field-to-1.0-and-mark-it-as-constant-once-the-final-code-is-frozen.", "labels": ["OpenZeppelin"]}, {"title": "Consider emitting Transfer events from the 0x0 address when creating new tokens, instead of (or additionally to) emitting custom CreateUKGEvent events in the TokenDistribution constructor L137 and L139.", "body": "Consider emitting Transfer events from the 0x0 address when creating new tokens, instead of (or additionally to) emitting custom CreateUKGEvent events in the TokenDistribution constructor L137 and L139.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-emitting-transfer-events-from-the-0x0-address-when-creating-new-tokens,-instead-of-(or-additionally-to)-emitting-custom-createukgevent-events-in-the-tokendistribution-constructor-l137-and-l139.", "labels": ["OpenZeppelin"]}, {"title": "Consider making these changes to make the token respect the ERC20 standard.", "body": "Consider making these changes to make the token respect the ERC20 standard.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-making-these-changes-to-make-the-token-respect-the-erc20-standard.", "labels": ["OpenZeppelin"]}, {"title": "Split Token and Distribution into different contracts", "body": "Split Token and Distribution into different contracts", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#split-token-and-distribution-into-different-contracts", "labels": ["OpenZeppelin"]}, {"title": "The token Distribution process is built into the same Token contract in TokenDistribution.sol. Since the distribution is not part of the token intrinsic mechanics, it is strongly recommended to use a standard Token contract and a separate Distribution contract. This contract would start with all the tokens to distribute among users, and invoke the transfer method of the Token when needed.", "body": "The token Distribution process is built into the same Token contract in TokenDistribution.sol. Since the distribution is not part of the token intrinsic mechanics, it is strongly recommended to use a standard Token contract and a separate Distribution contract. This contract would start with all the tokens to distribute among users, and invoke the transfer method of the Token when needed.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-token-distribution-process-is-built-into-the-same-token-contract-in-tokendistribution.sol.-since-the-distribution-is-not-part-of-the-token-intrinsic-mechanics,-it-is-strongly-recommended-to-use-a-standard-token-contract-and-a-separate-distribution-contract.-this-contract-would-start-with-all-the-tokens-to-distribute-among-users,-and-invoke-the-transfer-method-of-the-token-when-needed.", "labels": ["OpenZeppelin"]}, {"title": "This simplifies the logic of the token contract, separates different concerns among different contracts, and also reduces the attack surface for the token contract.", "body": "This simplifies the logic of the token contract, separates different concerns among different contracts, and also reduces the attack surface for the token contract.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#this-simplifies-the-logic-of-the-token-contract,-separates-different-concerns-among-different-contracts,-and-also-reduces-the-attack-surface-for-the-token-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this, this, this and this commits.", "body": "Update: Fixed in this, this, this and this commits.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-in-this,-this,-this-and-this-commits.", "labels": ["OpenZeppelin"]}, {"title": "Use SafeMath in all math operations", "body": "Use SafeMath in all math operations", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#use-safemath-in-all-math-operations", "labels": ["OpenZeppelin"]}, {"title": "Though some math operations are safe, there are others that are unchecked in TokenDistribution lines 162, 236, 294. It\u2019s always better to be safe and perform checked operations.", "body": "Though some math operations are safe, there are others that are unchecked in TokenDistribution lines 162, 236, 294. It\u2019s always better to be safe and perform checked operations.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#though-some-math-operations-are-safe,-there-are-others-that-are-unchecked-in-tokendistribution-lines-162,-236,-294.-it\u2019s-always-better-to-be-safe-and-perform-checked-operations.", "labels": ["OpenZeppelin"]}, {"title": "In particular, line 235 subtracts the current phase allocation from the sender\u2019s remaining allowance, without checking that the minuend is greater or equal than the subtrahend. Even though the distribution logic should not allow for this to happen, it\u2019s highly recommended to always check that a user has enough balance when subtracting from the allowance, which is done automatically when using SafeMath.", "body": "In particular, line 235 subtracts the current phase allocation from the sender\u2019s remaining allowance, without checking that the minuend is greater or equal than the subtrahend. Even though the distribution logic should not allow for this to happen, it\u2019s highly recommended to always check that a user has enough balance when subtracting from the allowance, which is done automatically when using SafeMath.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#in-particular,-line-235-subtracts-the-current-phase-allocation-from-the-sender\u2019s-remaining-allowance,-without-checking-that-the-minuend-is-greater-or-equal-than-the-subtrahend.-even-though-the-distribution-logic-should-not-allow-for-this-to-happen,-it\u2019s-highly-recommended-to-always-check-that-a-user-has-enough-balance-when-subtracting-from-the-allowance,-which-is-done-automatically-when-using-safemath.", "labels": ["OpenZeppelin"]}, {"title": "Fail early and\u00a0loudly", "body": "Fail early and\u00a0loudly", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#fail-early-and\u00a0loudly", "labels": ["OpenZeppelin"]}, {"title": "In the spirit of failing as promptly as possible in all methods, consider adding checks in functions allocatePresaleBalances,allocateSaleBalances, andallocateLockedBalancesof ParticipantAdditionProxy to ensure that both arrays passed in as parameters have the same length. If the first array passed in is shorter than the second by mistake (ie if an address is missing for an allocation), then the code will silently continue.", "body": "In the spirit of failing as promptly as possible in all methods, consider adding checks in functions allocatePresaleBalances,allocateSaleBalances, andallocateLockedBalancesof ParticipantAdditionProxy to ensure that both arrays passed in as parameters have the same length. If the first array passed in is shorter than the second by mistake (ie if an address is missing for an allocation), then the code will silently continue.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#in-the-spirit-of-failing-as-promptly-as-possible-in-all-methods,-consider-adding-checks-in-functions-allocatepresalebalances,allocatesalebalances,-andallocatelockedbalancesof-participantadditionproxy-to-ensure-that-both-arrays-passed-in-as-parameters-have-the-same-length.-if-the-first-array-passed-in-is-shorter-than-the-second-by-mistake-(ie-if-an-address-is-missing-for-an-allocation),-then-the-code-will-silently-continue.", "labels": ["OpenZeppelin"]}, {"title": "Install OpenZeppelin via\u00a0npm", "body": "Install OpenZeppelin via\u00a0npm", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#install-openzeppelin-via\u00a0npm", "labels": ["OpenZeppelin"]}, {"title": "SafeMath,", "body": "SafeMath,", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#safemath,", "labels": ["OpenZeppelin"]}, {"title": "Ownable, and", "body": "Ownable, and", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#ownable,-and", "labels": ["OpenZeppelin"]}, {"title": "Token. This violates OpenZeppelin\u2019s MIT license, which requires the licence and copyright notice to be included if its code is used, and makes it difficult to update to a more recent version.", "body": "Token. This violates OpenZeppelin\u2019s MIT license, which requires the licence and copyright notice to be included if its code is used, and makes it difficult to update to a more recent version.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#token.-this-violates-openzeppelin\u2019s-mit-license,-which-requires-the-licence-and-copyright-notice-to-be-included-if-its-code-is-used,-and-makes-it-difficult-to-update-to-a-more-recent-version.", "labels": ["OpenZeppelin"]}, {"title": "Consider following the recommended way to use OpenZeppelin contracts, which is via the zeppelin-solidity npm package. This allows for any bugfixes to be easily integrated into the codebase, such as issues 375 and 400 which are fixed in the latest release and affect the Token contract.", "body": "Consider following the recommended way to use OpenZeppelin contracts, which is via the zeppelin-solidity npm package. This allows for any bugfixes to be easily integrated into the codebase, such as issues 375 and 400 which are fixed in the latest release and affect the Token contract.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-following-the-recommended-way-to-use-openzeppelin-contracts,-which-is-via-the-zeppelin-solidity-npm-package.-this-allows-for-any-bugfixes-to-be-easily-integrated-into-the-codebase,-such-as-issues-375-and-400-which-are-fixed-in-the-latest-release-and-affect-the-token-contract.", "labels": ["OpenZeppelin"]}, {"title": "Redundant state variables in ParticipantAdditionProxy", "body": "Redundant state variables in ParticipantAdditionProxy", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#redundant-state-variables-in-participantadditionproxy", "labels": ["OpenZeppelin"]}, {"title": "ParticipantAdditionProxy keeps track of whether the entire", "body": "ParticipantAdditionProxy keeps track of whether the entire", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#participantadditionproxy-keeps-track-of-whether-the-entire", "labels": ["OpenZeppelin"]}, {"title": "addition process is complete (", "body": "addition process is complete (", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#addition-process-is-complete-(", "labels": ["OpenZeppelin"]}, {"title": "balance for each address(", "body": "balance for each address(", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#balance-for-each-address(", "labels": ["OpenZeppelin"]}, {"title": "has already been allocated (", "body": "has already been allocated (", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#has-already-been-allocated-(", "labels": ["OpenZeppelin"]}, {"title": "Assuming that each participant has a non-negative allocation, and since once a participant is allocated it cannot be modified, then the flag stating whether a participant has been allocated can be replaced by a check of whether the balance for the address is zero or not. This allows the threeParticipantAllocated variables to be removed.", "body": "Assuming that each participant has a non-negative allocation, and since once a participant is allocated it cannot be modified, then the flag stating whether a participant has been allocated can be replaced by a check of whether the balance for the address is zero or not. This allows the threeParticipantAllocated variables to be removed.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#assuming-that-each-participant-has-a-non-negative-allocation,-and-since-once-a-participant-is-allocated-it-cannot-be-modified,-then-the-flag-stating-whether-a-participant-has-been-allocated-can-be-replaced-by-a-check-of-whether-the-balance-for-the-address-is-zero-or-not.-this-allows-the-threeparticipantallocated-variables-to-be-removed.", "labels": ["OpenZeppelin"]}, {"title": "when the cap is reached, the flags and methods for ending the addition process (", "body": "when the cap is reached, the flags and methods for ending the addition process (", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#when-the-cap-is-reached,-the-flags-and-methods-for-ending-the-addition-process-(", "labels": ["OpenZeppelin"]}, {"title": "Removing redundant state variables not only reduces gas costs due to reduced storage used, but also greatly simplifies the code. Consider doing so.", "body": "Removing redundant state variables not only reduces gas costs due to reduced storage used, but also greatly simplifies the code. Consider doing so.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#removing-redundant-state-variables-not-only-reduces-gas-costs-due-to-reduced-storage-used,-but-also-greatly-simplifies-the-code.-consider-doing-so.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this commit, though endParticipantAddition functions were kept for clarity.", "body": "Update: Fixed in this commit, though endParticipantAddition functions were kept for clarity.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-in-this-commit,-though-endparticipantaddition-functions-were-kept-for-clarity.", "labels": ["OpenZeppelin"]}, {"title": "Solidity version", "body": "Solidity version", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#solidity-version", "labels": ["OpenZeppelin"]}, {"title": "Current code specifies version pragma ^0.4.11. We recommend changing the solidity version pragma to the latest version (pragma solidity ^0.4.17) to enforce the use of an up to date compiler.", "body": "Current code specifies version pragma ^0.4.11. We recommend changing the solidity version pragma to the latest version (pragma solidity ^0.4.17) to enforce the use of an up to date compiler.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#current-code-specifies-version-pragma-^0.4.11.-we-recommend-changing-the-solidity-version-pragma-to-the-latest-version-(pragma-solidity-^0.4.17)-to-enforce-the-use-of-an-up-to-date-compiler.", "labels": ["OpenZeppelin"]}, {"title": "Update: Updated to 0.4.15 in this commit, latest version of solidity supported by the used Truffle version.", "body": "Update: Updated to 0.4.15 in this commit, latest version of solidity supported by the used Truffle version.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-updated-to-0.4.15-in-this-commit,-latest-version-of-solidity-supported-by-the-used-truffle-version.", "labels": ["OpenZeppelin"]}, {"title": "Confusing use of unneeded temporal variables", "body": "Confusing use of unneeded temporal variables", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#confusing-use-of-unneeded-temporal-variables", "labels": ["OpenZeppelin"]}, {"title": "Throughout the code, in many functions a temp variable with a calculation is defined, an assertion is performed over the temp value, and if it succeeds, then a state variable is assigned with the value temp. See as an example ParticipantAdditionProxy L70:", "body": "Throughout the code, in many functions a temp variable with a calculation is defined, an assertion is performed over the temp value, and if it succeeds, then a state variable is assigned with the value temp. See as an example ParticipantAdditionProxy L70:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#throughout-the-code,-in-many-functions-a-temp-variable-with-a-calculation-is-defined,-an-assertion-is-performed-over-the-temp-value,-and-if-it-succeeds,-then-a-state-variable-is-assigned-with-the-value-temp.-see-as-an-example-participantadditionproxy-l70:", "labels": ["OpenZeppelin"]}, {"title": "The same happens in ParticipantAdditionProxy L92 and L114, and TokenDistribution L158 and L290.", "body": "The same happens in ParticipantAdditionProxy L92 and L114, and TokenDistribution L158 and L290.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-same-happens-in-participantadditionproxy-l92-and-l114,-and-tokendistribution-l158-and-l290.", "labels": ["OpenZeppelin"]}, {"title": "Since a failed assertion via require will revert all state changes within the transaction, it is not necessary to use this temp variable. Assigning directly to the state variable and then checking the assertion will have the same effect, and make the code shorter and easier to read. Consider removing these unneeded temporal variables.", "body": "Since a failed assertion via require will revert all state changes within the transaction, it is not necessary to use this temp variable. Assigning directly to the state variable and then checking the assertion will have the same effect, and make the code shorter and easier to read. Consider removing these unneeded temporal variables.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#since-a-failed-assertion-via-require-will-revert-all-state-changes-within-the-transaction,-it-is-not-necessary-to-use-this-temp-variable.-assigning-directly-to-the-state-variable-and-then-checking-the-assertion-will-have-the-same-effect,-and-make-the-code-shorter-and-easier-to-read.-consider-removing-these-unneeded-temporal-variables.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in this and this commits.", "body": "Usage of magic constants  magic constant throughout the contract code, in  L142,  L189,  L214,  L215 and  L239.  Use of magic constants reduces code readability and makes it harder to understand code intention. We recommend extracting magic constants into contract constants.  Update: Fixed all except for L142 in this and this commits.  Unused state variable phasesClaimable  State variable phasesClaimable in TokenDistribution is unused. Moreover, there is a function with the same name in L198 which shadows the getter generated by the public modifier, and has entirely different semantics. Consider removing the phasesClaimablefield.  Update: Fixed in this commit.  Use of integer type to represent boolean  represented in the ABI, . Consider changing the type of the map values from  Update: Fixed by removing the field (as suggested below) in this commit._  Redundant state variable isVesting  reached the last phase in  Update: Fixed in this commit.  Redundant state variables claimed and phasesClaimed  State variables claimed and phasesClaimed in TokenDistribution hold the same information: whether an address has claimed a particular phase for the presale. The former keeps track of both through a mapping phase =&gt; address =&gt; isClaimed, while the latter stores the last phase claimed for a given address. Given that phases can only be claimed incrementally (i.e. phase N cannot be claimed unless phase N-1 was claimed), the following equivalence holds:  Consider removing either of the two (we suggest removing claimed) in favour of the other to remove redundant state from the contract.  Update: Both variables were decided to be kept to reduce complexity of the phasesClaimable function implementation.  Notes  Some constants are redefined in different locations. Example: PRESALE_TOKEN_ALLOCATION_CAP is defined in both TokenDistribution and ParticipantAdditionProxy. (Update: kept for readability).  Creating modifiers that are only used once is more confusing than useful. For example, presaleTokensStillAvailable defined in L102 of TokenDistribution.sol is only used in L255 of the same file. Consider having that as a regular function precondition. (Update: fixed in this commit).  Consider removing redundant getter functions for fields already marked as public. Solidity automatically creates getter functions for these fields, so it is not necessary to redefine functions to access them from outside the contract. Examples of these functions arebalanceOfPresaleParticipants , balanceOfLockedParticipants and balanceOfSaleParticipants in ParticipantAdditionProxy; as well as all the test functions (presaleParticipantAllowedAllocationTest, allocationPerPhaseTest,remainingAllowanceTest, saleParticipantCollectedTest, and isVestingTest) defined in TokenDistribution L314L332. (Update: fixed in thesetwo commits).  Consider adding a check for phase being strictly greater than zero in claimPresaleTokensIterate, even though the function is internal and only invoked with values greater than zero, for additional security in case the calling code is changed. (Update: fixed in this commit).  The function balanceOf from BasicToken is repeated in TokenDistribution L310, which inherits from BasicToken. Consider removing the redundant code. (Update: fixed in this commit).  Presale, locked, and sale logic in ParticipantAdditionProxy is very similar and contains a lot of very similar code. Lots of functions related to that could be generalized, or abstracted, to reduce code repetition. See for example allocateSaleBalances, allocateLockedBalances, and allocatePresaleBalances, which are almost exact copies of the same code, with different variable names. The same happens with claimLockedTokensand claimSaleTokensin TokenDistribution. (Update: locked logic was removed in thiscommit, reducing the number of copies of the same code)._  For-loops found in code are bounded and safe._  The function min in L180 of TokenDistribution is already implemented in the Math library of OpenZeppelin. Consider reusing the available function from OpenZeppelin rather than copying it into the contract. (Update: fixed in this commit).  Consider adding a comment to the field claimed in L77 of TokenDistribution to clarify that the mapping is indexed by the presale phase. (Update: fixed in this commit).  Consider moving the cancelDistribution flag, along with the modifier and method to set it, to a separate Cancelable contract, similar to OpenZeppelins Pausable contract, to improve separation of concerns._  The first iteration of the loop for computing endOfPhaseTimestamp in L142 of TokenDistribution is skipped and executed manually outside the loop. Consider executing it within the loop to reduce code duplication. (Update: fixed in this commit).  As an alternative to the previous item, consider removing the state variable endOfPhaseTimestampaltogether in order to reduce gas costs from unnecessary storage, since this value can be easily calculated on the fly whenever needed._  Comments on state variables numLockedTokensDistributed and lockupTimestamp are copied from the respective previous lines. Consider updating them to properly document the variables. (Update: fixed in this commit).  Update 51fcf759  After the original audit, the Unikrn team asked us to review two additional changes:  The possibility to correct mistakes when setting up the participants list (commit fcd4b0ce).  A change from pull to push transfers in the tokens distribution, so end-users do not need to pay the gas cost for claiming their tokens from the sale (commit 51fcf759).  We have reviewed these changes and found no issues with the updated code. We include a few comments below:  Great job on automated tests, with coverage reaching an impressive 99%.  With the addition of the removeParticipant method, it is now possible to remove or change the number of tokens for a participant, as long as the sale is not marked as done via the saleAdditionDone flag. In order to prevent any modifications during the distribution, consider adding a check in distributeSaleTokens to ensure that saleAdditionDone is set in the participantData ProxyContract. This prevents a distribution from taking place using a ParticipantAdditionProxy that might still change. Consider doing the same for the claimPresaleTokens method and the presaleAdditionDone flag.  Methods balanceOfPresaleParticipants and balanceOfSaleParticipants in the ProxyContract interface L3233 are not needed and can be removed to prevent confusions, since they are unimplemented by the ParticipantAdditionProxy contract.  Conclusion  No critical severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the UKG token and distribution contracts. We have not reviewed the related UnikoinGold project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-in-this-and-this-commits.", "labels": ["OpenZeppelin"]}, {"title": "Usage of magic constants", "body": "Usage of magic constants", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#usage-of-magic-constants", "labels": ["OpenZeppelin"]}, {"title": "magic constant throughout the contract code, in", "body": "magic constant throughout the contract code, in", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#magic-constant-throughout-the-contract-code,-in", "labels": ["OpenZeppelin"]}, {"title": "L142,", "body": "L142,", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#l142,", "labels": ["OpenZeppelin"]}, {"title": "L189,", "body": "L189,", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#l189,", "labels": ["OpenZeppelin"]}, {"title": "L214,", "body": "L214,", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#l214,", "labels": ["OpenZeppelin"]}, {"title": "L215 and", "body": "L215 and", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#l215-and", "labels": ["OpenZeppelin"]}, {"title": "L239.", "body": "L239.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#l239.", "labels": ["OpenZeppelin"]}, {"title": "Use of magic constants reduces code readability and makes it harder to understand code intention. We recommend extracting magic constants into contract constants.", "body": "Use of magic constants reduces code readability and makes it harder to understand code intention. We recommend extracting magic constants into contract constants.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#use-of-magic-constants-reduces-code-readability-and-makes-it-harder-to-understand-code-intention.-we-recommend-extracting-magic-constants-into-contract-constants.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed all except for L142 in this and this commits.", "body": "Update: Fixed all except for L142 in this and this commits.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-all-except-for-l142-in-this-and-this-commits.", "labels": ["OpenZeppelin"]}, {"title": "Unused state variable phasesClaimable", "body": "Unused state variable phasesClaimable", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#unused-state-variable-phasesclaimable", "labels": ["OpenZeppelin"]}, {"title": "State variable phasesClaimable in TokenDistribution is unused. Moreover, there is a function with the same name in L198 which shadows the getter generated by the public modifier, and has entirely different semantics. Consider removing the phasesClaimablefield.", "body": "State variable phasesClaimable in TokenDistribution is unused. Moreover, there is a function with the same name in L198 which shadows the getter generated by the public modifier, and has entirely different semantics. Consider removing the phasesClaimablefield.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#state-variable-phasesclaimable-in-tokendistribution-is-unused.-moreover,-there-is-a-function-with-the-same-name-in-l198-which-shadows-the-getter-generated-by-the-public-modifier,-and-has-entirely-different-semantics.-consider-removing-the-phasesclaimablefield.", "labels": ["OpenZeppelin"]}, {"title": "Use of integer type to represent boolean", "body": "Use of integer type to represent boolean", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#use-of-integer-type-to-represent-boolean", "labels": ["OpenZeppelin"]}, {"title": "represented in the ABI,\u00a0. Consider changing the type of the map values from", "body": "represented in the ABI,\u00a0. Consider changing the type of the map values from", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#represented-in-the-abi,\u00a0.-consider-changing-the-type-of-the-map-values-from", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed by removing the field (as suggested below) in this commit._", "body": "Update: Fixed by removing the field (as suggested below) in this commit._", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-fixed-by-removing-the-field-(as-suggested-below)-in-this-commit._", "labels": ["OpenZeppelin"]}, {"title": "Redundant state variable isVesting", "body": "Redundant state variable isVesting", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#redundant-state-variable-isvesting", "labels": ["OpenZeppelin"]}, {"title": "reached the last phase in", "body": "reached the last phase in", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#reached-the-last-phase-in", "labels": ["OpenZeppelin"]}, {"title": "Redundant state variables claimed and phasesClaimed", "body": "Redundant state variables claimed and phasesClaimed", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#redundant-state-variables-claimed-and-phasesclaimed", "labels": ["OpenZeppelin"]}, {"title": "State variables claimed and phasesClaimed in TokenDistribution hold the same information: whether an address has claimed a particular phase for the presale. The former keeps track of both through a mapping phase =&gt; address =&gt; isClaimed, while the latter stores the last phase claimed for a given address. Given that phases can only be claimed incrementally (i.e. phase N cannot be claimed unless phase N-1 was claimed), the following equivalence holds:", "body": "State variables claimed and phasesClaimed in TokenDistribution hold the same information: whether an address has claimed a particular phase for the presale. The former keeps track of both through a mapping phase =&gt; address =&gt; isClaimed, while the latter stores the last phase claimed for a given address. Given that phases can only be claimed incrementally (i.e. phase N cannot be claimed unless phase N-1 was claimed), the following equivalence holds:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#state-variables-claimed-and-phasesclaimed-in-tokendistribution-hold-the-same-information:-whether-an-address-has-claimed-a-particular-phase-for-the-presale.-the-former-keeps-track-of-both-through-a-mapping-phase-=&gt;-address-=&gt;-isclaimed,-while-the-latter-stores-the-last-phase-claimed-for-a-given-address.-given-that-phases-can-only-be-claimed-incrementally-(i.e.-phase-n-cannot-be-claimed-unless-phase-n-1-was-claimed),-the-following-equivalence-holds:", "labels": ["OpenZeppelin"]}, {"title": "Consider removing either of the two (we suggest removing claimed) in favour of the other to remove redundant state from the contract.", "body": "Consider removing either of the two (we suggest removing claimed) in favour of the other to remove redundant state from the contract.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-removing-either-of-the-two-(we-suggest-removing-claimed)-in-favour-of-the-other-to-remove-redundant-state-from-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "Update: Both variables were decided to be kept to reduce complexity of the phasesClaimable function implementation.", "body": "Update: Both variables were decided to be kept to reduce complexity of the phasesClaimable function implementation.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update:-both-variables-were-decided-to-be-kept-to-reduce-complexity-of-the-phasesclaimable-function-implementation.", "labels": ["OpenZeppelin"]}, {"title": "Notes", "body": "Notes", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#notes", "labels": ["OpenZeppelin"]}, {"title": "Some constants are redefined in different locations. Example: PRESALE_TOKEN_ALLOCATION_CAP is defined in both TokenDistribution and ParticipantAdditionProxy. (Update: kept for readability).", "body": "Some constants are redefined in different locations. Example: PRESALE_TOKEN_ALLOCATION_CAP is defined in both TokenDistribution and ParticipantAdditionProxy. (Update: kept for readability).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#some-constants-are-redefined-in-different-locations.-example:-presale_token_allocation_cap-is-defined-in-both-tokendistribution-and-participantadditionproxy.-(update:-kept-for-readability).", "labels": ["OpenZeppelin"]}, {"title": "Creating modifiers that are only used once is more confusing than useful. For example, presaleTokensStillAvailable defined in L102 of TokenDistribution.sol is only used in L255 of the same file. Consider having that as a regular function precondition. (Update: fixed in this commit).", "body": "Creating modifiers that are only used once is more confusing than useful. For example, presaleTokensStillAvailable defined in L102 of TokenDistribution.sol is only used in L255 of the same file. Consider having that as a regular function precondition. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#creating-modifiers-that-are-only-used-once-is-more-confusing-than-useful.-for-example,-presaletokensstillavailable-defined-in-l102-of-tokendistribution.sol-is-only-used-in-l255-of-the-same-file.-consider-having-that-as-a-regular-function-precondition.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Consider removing redundant getter functions for fields already marked as public. Solidity automatically creates getter functions for these fields, so it is not necessary to redefine functions to access them from outside the contract. Examples of these functions arebalanceOfPresaleParticipants\u00a0, balanceOfLockedParticipants and balanceOfSaleParticipants in ParticipantAdditionProxy; as well as all the test functions (presaleParticipantAllowedAllocationTest, allocationPerPhaseTest,remainingAllowanceTest, saleParticipantCollectedTest, and isVestingTest) defined in TokenDistribution L314\u2013L332. (Update: fixed in thesetwo commits).", "body": "Consider removing redundant getter functions for fields already marked as public. Solidity automatically creates getter functions for these fields, so it is not necessary to redefine functions to access them from outside the contract. Examples of these functions arebalanceOfPresaleParticipants\u00a0, balanceOfLockedParticipants and balanceOfSaleParticipants in ParticipantAdditionProxy; as well as all the test functions (presaleParticipantAllowedAllocationTest, allocationPerPhaseTest,remainingAllowanceTest, saleParticipantCollectedTest, and isVestingTest) defined in TokenDistribution L314\u2013L332. (Update: fixed in thesetwo commits).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-removing-redundant-getter-functions-for-fields-already-marked-as-public.-solidity-automatically-creates-getter-functions-for-these-fields,-so-it-is-not-necessary-to-redefine-functions-to-access-them-from-outside-the-contract.-examples-of-these-functions-arebalanceofpresaleparticipants\u00a0,-balanceoflockedparticipants-and-balanceofsaleparticipants-in-participantadditionproxy;-as-well-as-all-the-test-functions-(presaleparticipantallowedallocationtest,-allocationperphasetest,remainingallowancetest,-saleparticipantcollectedtest,-and-isvestingtest)-defined-in-tokendistribution-l314\u2013l332.-(update:-fixed-in-thesetwo-commits).", "labels": ["OpenZeppelin"]}, {"title": "Consider adding a check for phase being strictly greater than zero in claimPresaleTokensIterate, even though the function is internal and only invoked with values greater than zero, for additional security in case the calling code is changed. (Update: fixed in this commit).", "body": "Consider adding a check for phase being strictly greater than zero in claimPresaleTokensIterate, even though the function is internal and only invoked with values greater than zero, for additional security in case the calling code is changed. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-adding-a-check-for-phase-being-strictly-greater-than-zero-in-claimpresaletokensiterate,-even-though-the-function-is-internal-and-only-invoked-with-values-greater-than-zero,-for-additional-security-in-case-the-calling-code-is-changed.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "The function balanceOf from BasicToken is repeated in TokenDistribution L310, which inherits from BasicToken. Consider removing the redundant code. (Update: fixed in this commit).", "body": "The function balanceOf from BasicToken is repeated in TokenDistribution L310, which inherits from BasicToken. Consider removing the redundant code. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-function-balanceof-from-basictoken-is-repeated-in-tokendistribution-l310,-which-inherits-from-basictoken.-consider-removing-the-redundant-code.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Presale, locked, and sale logic in ParticipantAdditionProxy is very similar and contains a lot of very similar code. Lots of functions related to that could be generalized, or abstracted, to reduce code repetition. See for example allocateSaleBalances, allocateLockedBalances, and allocatePresaleBalances, which are almost exact copies of the same code, with different variable names. The same happens with claimLockedTokensand claimSaleTokensin TokenDistribution. (Update: locked logic was removed in thiscommit, reducing the number of copies of the same code)._", "body": "Presale, locked, and sale logic in ParticipantAdditionProxy is very similar and contains a lot of very similar code. Lots of functions related to that could be generalized, or abstracted, to reduce code repetition. See for example allocateSaleBalances, allocateLockedBalances, and allocatePresaleBalances, which are almost exact copies of the same code, with different variable names. The same happens with claimLockedTokensand claimSaleTokensin TokenDistribution. (Update: locked logic was removed in thiscommit, reducing the number of copies of the same code)._", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#presale,-locked,-and-sale-logic-in-participantadditionproxy-is-very-similar-and-contains-a-lot-of-very-similar-code.-lots-of-functions-related-to-that-could-be-generalized,-or-abstracted,-to-reduce-code-repetition.-see-for-example-allocatesalebalances,-allocatelockedbalances,-and-allocatepresalebalances,-which-are-almost-exact-copies-of-the-same-code,-with-different-variable-names.-the-same-happens-with-claimlockedtokensand-claimsaletokensin-tokendistribution.-(update:-locked-logic-was-removed-in-thiscommit,-reducing-the-number-of-copies-of-the-same-code)._", "labels": ["OpenZeppelin"]}, {"title": "For-loops found in code are bounded and safe._", "body": "For-loops found in code are bounded and safe._", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#for-loops-found-in-code-are-bounded-and-safe._", "labels": ["OpenZeppelin"]}, {"title": "The function min in L180 of TokenDistribution is already implemented in the Math library of OpenZeppelin. Consider reusing the available function from OpenZeppelin rather than copying it into the contract. (Update: fixed in this commit).", "body": "The function min in L180 of TokenDistribution is already implemented in the Math library of OpenZeppelin. Consider reusing the available function from OpenZeppelin rather than copying it into the contract. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-function-min-in-l180-of-tokendistribution-is-already-implemented-in-the-math-library-of-openzeppelin.-consider-reusing-the-available-function-from-openzeppelin-rather-than-copying-it-into-the-contract.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Consider adding a comment to the field claimed in L77 of TokenDistribution to clarify that the mapping is indexed by the presale phase. (Update: fixed in this commit).", "body": "Consider adding a comment to the field claimed in L77 of TokenDistribution to clarify that the mapping is indexed by the presale phase. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-adding-a-comment-to-the-field-claimed-in-l77-of-tokendistribution-to-clarify-that-the-mapping-is-indexed-by-the-presale-phase.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Consider moving the cancelDistribution flag, along with the modifier and method to set it, to a separate Cancelable contract, similar to OpenZeppelin\u2019s Pausable contract, to improve separation of concerns._", "body": "Consider moving the cancelDistribution flag, along with the modifier and method to set it, to a separate Cancelable contract, similar to OpenZeppelin\u2019s Pausable contract, to improve separation of concerns._", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#consider-moving-the-canceldistribution-flag,-along-with-the-modifier-and-method-to-set-it,-to-a-separate-cancelable-contract,-similar-to-openzeppelin\u2019s-pausable-contract,-to-improve-separation-of-concerns._", "labels": ["OpenZeppelin"]}, {"title": "The first iteration of the loop for computing endOfPhaseTimestamp in L142 of TokenDistribution is skipped and executed manually outside the loop. Consider executing it within the loop to reduce code duplication. (Update: fixed in this commit).", "body": "The first iteration of the loop for computing endOfPhaseTimestamp in L142 of TokenDistribution is skipped and executed manually outside the loop. Consider executing it within the loop to reduce code duplication. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-first-iteration-of-the-loop-for-computing-endofphasetimestamp-in-l142-of-tokendistribution-is-skipped-and-executed-manually-outside-the-loop.-consider-executing-it-within-the-loop-to-reduce-code-duplication.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "As an alternative to the previous item, consider removing the state variable endOfPhaseTimestampaltogether in order to reduce gas costs from unnecessary storage, since this value can be easily calculated on the fly whenever needed._", "body": "As an alternative to the previous item, consider removing the state variable endOfPhaseTimestampaltogether in order to reduce gas costs from unnecessary storage, since this value can be easily calculated on the fly whenever needed._", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#as-an-alternative-to-the-previous-item,-consider-removing-the-state-variable-endofphasetimestampaltogether-in-order-to-reduce-gas-costs-from-unnecessary-storage,-since-this-value-can-be-easily-calculated-on-the-fly-whenever-needed._", "labels": ["OpenZeppelin"]}, {"title": "Comments on state variables numLockedTokensDistributed and lockupTimestamp are copied from the respective previous lines. Consider updating them to properly document the variables. (Update: fixed in this commit).", "body": "Comments on state variables numLockedTokensDistributed and lockupTimestamp are copied from the respective previous lines. Consider updating them to properly document the variables. (Update: fixed in this commit).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#comments-on-state-variables-numlockedtokensdistributed-and-lockuptimestamp-are-copied-from-the-respective-previous-lines.-consider-updating-them-to-properly-document-the-variables.-(update:-fixed-in-this-commit).", "labels": ["OpenZeppelin"]}, {"title": "Update 51fcf759", "body": "Update 51fcf759", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#update-51fcf759", "labels": ["OpenZeppelin"]}, {"title": "After the original audit, the Unikrn team asked us to review two additional changes:", "body": "After the original audit, the Unikrn team asked us to review two additional changes:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#after-the-original-audit,-the-unikrn-team-asked-us-to-review-two-additional-changes:", "labels": ["OpenZeppelin"]}, {"title": "The possibility to correct mistakes when setting up the participants list (commit fcd4b0ce).", "body": "The possibility to correct mistakes when setting up the participants list (commit fcd4b0ce).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#the-possibility-to-correct-mistakes-when-setting-up-the-participants-list-(commit-fcd4b0ce).", "labels": ["OpenZeppelin"]}, {"title": "A change from pull to push transfers in the tokens distribution, so end-users do not need to pay the gas cost for claiming their tokens from the sale (commit 51fcf759).", "body": "A change from pull to push transfers in the tokens distribution, so end-users do not need to pay the gas cost for claiming their tokens from the sale (commit 51fcf759).", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#a-change-from-pull-to-push-transfers-in-the-tokens-distribution,-so-end-users-do-not-need-to-pay-the-gas-cost-for-claiming-their-tokens-from-the-sale-(commit-51fcf759).", "labels": ["OpenZeppelin"]}, {"title": "We have reviewed these changes and found no issues with the updated code. We include a few comments below:", "body": "We have reviewed these changes and found no issues with the updated code. We include a few comments below:", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#we-have-reviewed-these-changes-and-found-no-issues-with-the-updated-code.-we-include-a-few-comments-below:", "labels": ["OpenZeppelin"]}, {"title": "Great job on automated tests, with coverage reaching an impressive 99%.", "body": "Great job on automated tests, with coverage reaching an impressive 99%.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#great-job-on-automated-tests,-with-coverage-reaching-an-impressive-99%.", "labels": ["OpenZeppelin"]}, {"title": "With the addition of the removeParticipant method, it is now possible to remove or change the number of tokens for a participant, as long as the sale is not marked as done via the saleAdditionDone flag. In order to prevent any modifications during the distribution, consider adding a check in distributeSaleTokens to ensure that saleAdditionDone is set in the participantData ProxyContract. This prevents a distribution from taking place using a ParticipantAdditionProxy that might still change. Consider doing the same for the claimPresaleTokens method and the presaleAdditionDone flag.", "body": "With the addition of the removeParticipant method, it is now possible to remove or change the number of tokens for a participant, as long as the sale is not marked as done via the saleAdditionDone flag. In order to prevent any modifications during the distribution, consider adding a check in distributeSaleTokens to ensure that saleAdditionDone is set in the participantData ProxyContract. This prevents a distribution from taking place using a ParticipantAdditionProxy that might still change. Consider doing the same for the claimPresaleTokens method and the presaleAdditionDone flag.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#with-the-addition-of-the-removeparticipant-method,-it-is-now-possible-to-remove-or-change-the-number-of-tokens-for-a-participant,-as-long-as-the-sale-is-not-marked-as-done-via-the-saleadditiondone-flag.-in-order-to-prevent-any-modifications-during-the-distribution,-consider-adding-a-check-in-distributesaletokens-to-ensure-that-saleadditiondone-is-set-in-the-participantdata-proxycontract.-this-prevents-a-distribution-from-taking-place-using-a-participantadditionproxy-that-might-still-change.-consider-doing-the-same-for-the-claimpresaletokens-method-and-the-presaleadditiondone-flag.", "labels": ["OpenZeppelin"]}, {"title": "Methods balanceOfPresaleParticipants and balanceOfSaleParticipants in the ProxyContract interface L32\u201333 are not needed and can be removed to prevent confusions, since they are unimplemented by the ParticipantAdditionProxy contract.", "body": "Methods balanceOfPresaleParticipants and balanceOfSaleParticipants in the ProxyContract interface L32\u201333 are not needed and can be removed to prevent confusions, since they are unimplemented by the ParticipantAdditionProxy contract.", "html_url": "https://blog.openzeppelin.com/unikoingold-token-audit-aafb7de07f3#methods-balanceofpresaleparticipants-and-balanceofsaleparticipants-in-the-proxycontract-interface-l32\u201333-are-not-needed-and-can-be-removed-to-prevent-confusions,-since-they-are-unimplemented-by-the-participantadditionproxy-contract.", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of medium severity.", "body": "No issues of medium severity.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#no-issues-of-medium-severity.", "labels": ["OpenZeppelin"]}, {"title": "Misuse of FinalizableCrowdsale", "body": "Misuse of FinalizableCrowdsale", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#misuse-of-finalizablecrowdsale", "labels": ["OpenZeppelin"]}, {"title": "documented, to use", "body": "documented, to use", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#documented,-to-use", "labels": ["OpenZeppelin"]}, {"title": "redefined. Although it is not causing any problems in the code as is, the misuse of the library damages reusability. Rename", "body": "redefined. Although it is not causing any problems in the code as is, the misuse of the library damages reusability. Rename", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#redefined.-although-it-is-not-causing-any-problems-in-the-code-as-is,-the-misuse-of-the-library-damages-reusability.-rename", "labels": ["OpenZeppelin"]}, {"title": "Update: This was fixed in the latest version.", "body": "Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Great work reusing the existing OpenZeppelin libraries!", "body": "The code is very modular, and looks thoughtfully designed. It is somewhat hard to navigate the inheritance chain, but this is mostly a consequence of the Crowdsale design in OpenZeppelin.  In BonusCrowdsale, there is a comment saying that bonuses are represented as values from 0 to 1000. We think this is wrong, as there could be, for example, a bonus of 200% (represented as 2000). If the comment is wrong, remove it. If it is correct, consider validating the values received in setBonusesForTimes and setBonusesForAmounts.Update: This was fixed in the latest version.  The value of decimals is duplicated in CATCrowdsale and CAToken. Try to avoid the redundancy so that the contracts cant get out of sync.  The TokenMint event is redundant, given that MintableToken already emits both Mint and Transfer events.Update: This was fixed in the latest version.  The calculation of usdValue in BonusCrowdsale is somewhat obscure, and could use a comment explaining it or intermediate variables. (For example, it is not immediately clear why the division by 100 is needed.)Update: This was fixed in the latest version.  Consider removing the special case for when there are no bonuses in BonusCrowdsales buyTokens. It is a small optimization that is not worth the potential for error.Update: This was fixed in the latest version.  Conclusion  No critical or high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  Note that as of the date of publishing, the above review reflects the current understanding of known security patterns as they relate to the Consumer Activity Token contracts. We have not reviewed the related BitClave project. The above should not be construed as investment advice. For general information about smart contract security, check out our thoughts here.  Related Posts  Venus Protocol Diamond Comptroller Audit  The Comptroller is the core smart contract system responsible for managing markets and risk within...  Security Audits  Trufin Audit  The TruStakeMATICv2 and its supporting contracts allow users to stake MATIC via delegation to a...  Security Audits  Land and Tunnel Audit  The LAND token follows the EIP-721 non-fungible token (NFT) standard and has been deployed on both...  Security Audit", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#great-work-reusing-the-existing-openzeppelin-libraries!", "labels": ["OpenZeppelin"]}, {"title": "The code is very modular, and looks thoughtfully designed. It is somewhat hard to navigate the inheritance chain, but this is mostly a consequence of the Crowdsale design in OpenZeppelin.", "body": "The code is very modular, and looks thoughtfully designed. It is somewhat hard to navigate the inheritance chain, but this is mostly a consequence of the Crowdsale design in OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#the-code-is-very-modular,-and-looks-thoughtfully-designed.-it-is-somewhat-hard-to-navigate-the-inheritance-chain,-but-this-is-mostly-a-consequence-of-the-crowdsale-design-in-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "In BonusCrowdsale, there is a comment saying that bonuses are represented as values from 0 to 1000. We think this is wrong, as there could be, for example, a bonus of 200% (represented as 2000). If the comment is wrong, remove it. If it is correct, consider validating the values received in setBonusesForTimes and setBonusesForAmounts.Update: This was fixed in the latest version.", "body": "In BonusCrowdsale, there is a comment saying that bonuses are represented as values from 0 to 1000. We think this is wrong, as there could be, for example, a bonus of 200% (represented as 2000). If the comment is wrong, remove it. If it is correct, consider validating the values received in setBonusesForTimes and setBonusesForAmounts.Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#in-bonuscrowdsale,-there-is-a-comment-saying-that-bonuses-are-represented-as-values-from-0-to-1000.-we-think-this-is-wrong,-as-there-could-be,-for-example,-a-bonus-of-200%-(represented-as-2000).-if-the-comment-is-wrong,-remove-it.-if-it-is-correct,-consider-validating-the-values-received-in-setbonusesfortimes-and-setbonusesforamounts.update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "The value of decimals is duplicated in CATCrowdsale and CAToken. Try to avoid the redundancy so that the contracts can\u2019t get out of sync.", "body": "The value of decimals is duplicated in CATCrowdsale and CAToken. Try to avoid the redundancy so that the contracts can\u2019t get out of sync.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#the-value-of-decimals-is-duplicated-in-catcrowdsale-and-catoken.-try-to-avoid-the-redundancy-so-that-the-contracts-can\u2019t-get-out-of-sync.", "labels": ["OpenZeppelin"]}, {"title": "The TokenMint event is redundant, given that MintableToken already emits both Mint and Transfer events.Update: This was fixed in the latest version.", "body": "The TokenMint event is redundant, given that MintableToken already emits both Mint and Transfer events.Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#the-tokenmint-event-is-redundant,-given-that-mintabletoken-already-emits-both-mint-and-transfer-events.update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "The calculation of usdValue in BonusCrowdsale is somewhat obscure, and could use a comment explaining it or intermediate variables. (For example, it is not immediately clear why the division by 100 is needed.)Update: This was fixed in the latest version.", "body": "The calculation of usdValue in BonusCrowdsale is somewhat obscure, and could use a comment explaining it or intermediate variables. (For example, it is not immediately clear why the division by 100 is needed.)Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#the-calculation-of-usdvalue-in-bonuscrowdsale-is-somewhat-obscure,-and-could-use-a-comment-explaining-it-or-intermediate-variables.-(for-example,-it-is-not-immediately-clear-why-the-division-by-100-is-needed.)update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing the special case for when there are no bonuses in BonusCrowdsale\u2019s buyTokens. It is a small optimization that is not worth the potential for error.Update: This was fixed in the latest version.", "body": "Consider removing the special case for when there are no bonuses in BonusCrowdsale\u2019s buyTokens. It is a small optimization that is not worth the potential for error.Update: This was fixed in the latest version.", "html_url": "https://blog.openzeppelin.com/bitclave-token-audit-570b0c664eb0#consider-removing-the-special-case-for-when-there-are-no-bonuses-in-bonuscrowdsale\u2019s-buytokens.-it-is-a-small-optimization-that-is-not-worth-the-potential-for-error.update:-this-was-fixed-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "Unbounded loops", "body": "Unbounded loops", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#unbounded-loops", "labels": ["OpenZeppelin"]}, {"title": "There are several loops in the contract which can eventually grow so large as to make future operations of the contract cost too much gas to fit in a block. Additionally, using unbounded loops incurs in a lot of avoidable gas costs for all token transactions.", "body": "There are several loops in the contract which can eventually grow so large as to make future operations of the contract cost too much gas to fit in a block. Additionally, using unbounded loops incurs in a lot of avoidable gas costs for all token transactions.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#there-are-several-loops-in-the-contract-which-can-eventually-grow-so-large-as-to-make-future-operations-of-the-contract-cost-too-much-gas-to-fit-in-a-block.-additionally,-using-unbounded-loops-incurs-in-a-lot-of-avoidable-gas-costs-for-all-token-transactions.", "labels": ["OpenZeppelin"]}, {"title": "As an example, there is a state variable allFNUHolders which holds an array with the addresses of all token holders. When an address becomes a token holder, it is added to this array. Whenever an address is left with balance zero after a transfer, the array is iterated over to find the address and remove it (removeAddress). If the array is large enough, the iteration could cost too much gas and it would be impossible to make a transfer function call.", "body": "As an example, there is a state variable allFNUHolders which holds an array with the addresses of all token holders. When an address becomes a token holder, it is added to this array. Whenever an address is left with balance zero after a transfer, the array is iterated over to find the address and remove it (removeAddress). If the array is large enough, the iteration could cost too much gas and it would be impossible to make a transfer function call.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#as-an-example,-there-is-a-state-variable-allfnuholders-which-holds-an-array-with-the-addresses-of-all-token-holders.-when-an-address-becomes-a-token-holder,-it-is-added-to-this-array.-whenever-an-address-is-left-with-balance-zero-after-a-transfer,-the-array-is-iterated-over-to-find-the-address-and-remove-it-(removeaddress).-if-the-array-is-large-enough,-the-iteration-could-cost-too-much-gas-and-it-would-be-impossible-to-make-a-transfer-function-call.", "labels": ["OpenZeppelin"]}, {"title": "allFNUHolders array is", "body": "allFNUHolders array is", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#allfnuholders-array-is", "labels": ["OpenZeppelin"]}, {"title": "iterated in the", "body": "iterated in the", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#iterated-in-the", "labels": ["OpenZeppelin"]}, {"title": "To fix this problem the two arrays have to be removed, and the profit sharing feature completely redesigned.", "body": "To fix this problem the two arrays have to be removed, and the profit sharing feature completely redesigned.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#to-fix-this-problem-the-two-arrays-have-to-be-removed,-and-the-profit-sharing-feature-completely-redesigned.", "labels": ["OpenZeppelin"]}, {"title": "One suggestion for implementing these features securely is calculating the profits \u201con demand\u201d for each token holder, instead of ahead of time for all of them. This would require the token to support taking a snapshot of all balances at the time profits are loaded into the smart contract. It might be worth considering using the MiniMe Token for this.", "body": "One suggestion for implementing these features securely is calculating the profits \u201con demand\u201d for each token holder, instead of ahead of time for all of them. This would require the token to support taking a snapshot of all balances at the time profits are loaded into the smart contract. It might be worth considering using the MiniMe Token for this.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#one-suggestion-for-implementing-these-features-securely-is-calculating-the-profits-\u201con-demand\u201d-for-each-token-holder,-instead-of-ahead-of-time-for-all-of-them.-this-would-require-the-token-to-support-taking-a-snapshot-of-all-balances-at-the-time-profits-are-loaded-into-the-smart-contract.-it-might-be-worth-considering-using-the-minime-token-for-this.", "labels": ["OpenZeppelin"]}, {"title": "Update: The token was migrated to use MiniMe Token, and the profit sharing functionality was reimplemented to use its features and avoid the problems mentioned here.", "body": "Update: The token was migrated to use MiniMe Token, and the profit sharing functionality was reimplemented to use its features and avoid the problems mentioned here.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-the-token-was-migrated-to-use-minime-token,-and-the-profit-sharing-functionality-was-reimplemented-to-use-its-features-and-avoid-the-problems-mentioned-here.", "labels": ["OpenZeppelin"]}, {"title": "Delayed price increase after target amount\u00a0raised", "body": "Delayed price increase after target amount\u00a0raised", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#delayed-price-increase-after-target-amount\u00a0raised", "labels": ["OpenZeppelin"]}, {"title": "token price is meant to start increasing after the target amount of 100,000 ETH has been raised. However, due to the ordering of integer divisions the price doesn\u2019t increase until actually 200,000 ETH have been raised.", "body": "token price is meant to start increasing after the target amount of 100,000 ETH has been raised. However, due to the ordering of integer divisions the price doesn\u2019t increase until actually 200,000 ETH have been raised.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#token-price-is-meant-to-start-increasing-after-the-target-amount-of-100,000-eth-has-been-raised.-however,-due-to-the-ordering-of-integer-divisions-the-price-doesn\u2019t-increase-until-actually-200,000-eth-have-been-raised.", "labels": ["OpenZeppelin"]}, {"title": "Line 207 reads", "body": "Line 207 reads", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#line-207-reads", "labels": ["OpenZeppelin"]}, {"title": "Replace the expression in line 207 for _wei.mul(targetRaiseWei).div(raisedWei) to achieve the desired price adjustment.", "body": "Replace the expression in line 207 for _wei.mul(targetRaiseWei).div(raisedWei) to achieve the desired price adjustment.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#replace-the-expression-in-line-207-for-_wei.mul(targetraisewei).div(raisedwei)-to-achieve-the-desired-price-adjustment.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as suggested in 91ff77c.", "body": "Update: Fixed as suggested in 91ff77c.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-as-suggested-in-91ff77c.", "labels": ["OpenZeppelin"]}, {"title": "Staff allocations assigned to placeholder addresses", "body": "Staff allocations assigned to placeholder addresses", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#staff-allocations-assigned-to-placeholder-addresses", "labels": ["OpenZeppelin"]}, {"title": "The staff allocations done in Milestone_ICOSuccessful mint tokens for the addresses 0x01, 0x02, 0x03 and 0x04. These addresses are not owned by anyone and their tokens will not be usable. This might have been a temporary measure until the actual addresses were known, to set them before deploying the contract. In that case, consider adding them as parameters to the constructor, to make it evident that they need to be set.", "body": "The staff allocations done in Milestone_ICOSuccessful mint tokens for the addresses 0x01, 0x02, 0x03 and 0x04. These addresses are not owned by anyone and their tokens will not be usable. This might have been a temporary measure until the actual addresses were known, to set them before deploying the contract. In that case, consider adding them as parameters to the constructor, to make it evident that they need to be set.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#the-staff-allocations-done-in-milestone_icosuccessful-mint-tokens-for-the-addresses-0x01,-0x02,-0x03-and-0x04.-these-addresses-are-not-owned-by-anyone-and-their-tokens-will-not-be-usable.-this-might-have-been-a-temporary-measure-until-the-actual-addresses-were-known,-to-set-them-before-deploying-the-contract.-in-that-case,-consider-adding-them-as-parameters-to-the-constructor,-to-make-it-evident-that-they-need-to-be-set.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 5295691.", "body": "Update: Fixed in 5295691.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-in-5295691.", "labels": ["OpenZeppelin"]}, {"title": "Profit distribution can be reset by owner at any\u00a0time", "body": "Profit distribution can be reset by owner at any\u00a0time", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#profit-distribution-can-be-reset-by-owner-at-any\u00a0time", "labels": ["OpenZeppelin"]}, {"title": "There is a function PrepareForProfitShare callable by the owner at any time, which resets the distribution of profits: it brings every token holder\u2019s claimable profits down to zero. It\u2019s not clear what purpose it serves. Consider removing it, as it harms the trustlessness of the contract.", "body": "There is a function PrepareForProfitShare callable by the owner at any time, which resets the distribution of profits: it brings every token holder\u2019s claimable profits down to zero. It\u2019s not clear what purpose it serves. Consider removing it, as it harms the trustlessness of the contract.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#there-is-a-function-prepareforprofitshare-callable-by-the-owner-at-any-time,-which-resets-the-distribution-of-profits:-it-brings-every-token-holder\u2019s-claimable-profits-down-to-zero.-it\u2019s-not-clear-what-purpose-it-serves.-consider-removing-it,-as-it-harms-the-trustlessness-of-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "Fiat investments do not respect\u00a0limits", "body": "Fiat investments do not respect\u00a0limits", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#fiat-investments-do-not-respect\u00a0limits", "labels": ["OpenZeppelin"]}, {"title": "Investments submitted by the admin via investFIAT do not respect the maxRaiseWei limit. Consider enforcing this by adding require(raisedWei &lt;= maxRaiseWei) at the end of the function.", "body": "Investments submitted by the admin via investFIAT do not respect the maxRaiseWei limit. Consider enforcing this by adding require(raisedWei &lt;= maxRaiseWei) at the end of the function.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#investments-submitted-by-the-admin-via-investfiat-do-not-respect-the-maxraisewei-limit.-consider-enforcing-this-by-adding-require(raisedwei-&lt;=-maxraisewei)-at-the-end-of-the-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: The function 96e4c50.", "body": "Update: The function 96e4c50.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-the-function-96e4c50.", "labels": ["OpenZeppelin"]}, {"title": "State transition to \u201csuccessful\u201d doesn\u2019t check raised\u00a0amount", "body": "State transition to \u201csuccessful\u201d doesn\u2019t check raised\u00a0amount", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#state-transition-to-\u201csuccessful\u201d-doesn\u2019t-check-raised\u00a0amount", "labels": ["OpenZeppelin"]}, {"title": "Milestone_ICOSuccessful. Consider also adding similar requirements elsewhere, such as", "body": "Milestone_ICOSuccessful. Consider also adding similar requirements elsewhere, such as", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#milestone_icosuccessful.-consider-also-adding-similar-requirements-elsewhere,-such-as", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as suggested in 55f9886.", "body": "Update: Fixed as suggested in 55f9886.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-as-suggested-in-55f9886.", "labels": ["OpenZeppelin"]}, {"title": "Lack of events for investments", "body": "Lack of events for investments", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#lack-of-events-for-investments", "labels": ["OpenZeppelin"]}, {"title": "For auditability purposes, especially given that there is an admin function with potential for abuse (investFIAT), it would be desirable to log events for investments. Consider emitting: 1) in the fallback function an event Investment with beneficiary address, amount of received ETH, and amount of tokens bought; 2) in investFiat an event FiatInvestment with the same data, plus the amount of fiat money invested or exchange rate used.", "body": "For auditability purposes, especially given that there is an admin function with potential for abuse (investFIAT), it would be desirable to log events for investments. Consider emitting: 1) in the fallback function an event Investment with beneficiary address, amount of received ETH, and amount of tokens bought; 2) in investFiat an event FiatInvestment with the same data, plus the amount of fiat money invested or exchange rate used.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#for-auditability-purposes,-especially-given-that-there-is-an-admin-function-with-potential-for-abuse-(investfiat),-it-would-be-desirable-to-log-events-for-investments.-consider-emitting:-1)-in-the-fallback-function-an-event-investment-with-beneficiary-address,-amount-of-received-eth,-and-amount-of-tokens-bought;-2)-in-investfiat-an-event-fiatinvestment-with-the-same-data,-plus-the-amount-of-fiat-money-invested-or-exchange-rate-used.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as suggested in 040c66c.", "body": "Update: Fixed as suggested in 040c66c.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-as-suggested-in-040c66c.", "labels": ["OpenZeppelin"]}, {"title": "Truncation in integer\u00a0division", "body": "Truncation in integer\u00a0division", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#truncation-in-integer\u00a0division", "labels": ["OpenZeppelin"]}, {"title": "The profit sharing mechanism uses integer division to distribute profits proportionally to token holdings: balances[addr].mul(msg.value).div(totalSupply). It must be taken into consideration that integer division truncates the remainder. In this particular case, the amount lost to truncation will be negligible, and is in some sense necessary (you cannot transfer a fraction of a wei). However, a small improvement could be made by letting balances[addr].mul(msg.value) accumulate, and performing the division at the last moment, when the token holder claims his profit shares.", "body": "The profit sharing mechanism uses integer division to distribute profits proportionally to token holdings: balances[addr].mul(msg.value).div(totalSupply). It must be taken into consideration that integer division truncates the remainder. In this particular case, the amount lost to truncation will be negligible, and is in some sense necessary (you cannot transfer a fraction of a wei). However, a small improvement could be made by letting balances[addr].mul(msg.value) accumulate, and performing the division at the last moment, when the token holder claims his profit shares.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#the-profit-sharing-mechanism-uses-integer-division-to-distribute-profits-proportionally-to-token-holdings:-balances[addr].mul(msg.value).div(totalsupply).-it-must-be-taken-into-consideration-that-integer-division-truncates-the-remainder.-in-this-particular-case,-the-amount-lost-to-truncation-will-be-negligible,-and-is-in-some-sense-necessary-(you-cannot-transfer-a-fraction-of-a-wei).-however,-a-small-improvement-could-be-made-by-letting-balances[addr].mul(msg.value)-accumulate,-and-performing-the-division-at-the-last-moment,-when-the-token-holder-claims-his-profit-shares.", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind, too, that integer division is used to convert ether amounts to FNU amounts, and that due to truncation some amounts of ether will be received for no FNU compensation.", "body": "Keep in mind, too, that integer division is used to convert ether amounts to FNU amounts, and that due to truncation some amounts of ether will be received for no FNU compensation.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#keep-in-mind,-too,-that-integer-division-is-used-to-convert-ether-amounts-to-fnu-amounts,-and-that-due-to-truncation-some-amounts-of-ether-will-be-received-for-no-fnu-compensation.", "labels": ["OpenZeppelin"]}, {"title": "Possible erroneous Transfer event in transferFrom", "body": "Possible erroneous Transfer event in transferFrom", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#possible-erroneous-transfer-event-in-transferfrom", "labels": ["OpenZeppelin"]}, {"title": "In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same won\u2019t happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.", "body": "In transferFrom it is not checked that the source account has enough balance. This is not severe because, in general, the safe subtraction will revert the transaction if more than the available balance wants to be transferred. However, in the special case that someone calls transferFrom with the source and destination as the same account, the same won\u2019t happen because the balance is first incremented, and only then decremented. The resulting balance will remain the same, but it would be possible for anyone to emit a Transfer event with themselves as destination and an arbitrary amount. This might be misinterpreted for a real transfer by an application or individual. Consider swapping the lines so that the balance is first decremented and then incremented, in order for such a transaction to fail.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#in-transferfrom-it-is-not-checked-that-the-source-account-has-enough-balance.-this-is-not-severe-because,-in-general,-the-safe-subtraction-will-revert-the-transaction-if-more-than-the-available-balance-wants-to-be-transferred.-however,-in-the-special-case-that-someone-calls-transferfrom-with-the-source-and-destination-as-the-same-account,-the-same-won\u2019t-happen-because-the-balance-is-first-incremented,-and-only-then-decremented.-the-resulting-balance-will-remain-the-same,-but-it-would-be-possible-for-anyone-to-emit-a-transfer-event-with-themselves-as-destination-and-an-arbitrary-amount.-this-might-be-misinterpreted-for-a-real-transfer-by-an-application-or-individual.-consider-swapping-the-lines-so-that-the-balance-is-first-decremented-and-then-incremented,-in-order-for-such-a-transaction-to-fail.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed as suggested in 74e1172.", "body": "Update: Fixed as suggested in 74e1172.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-as-suggested-in-74e1172.", "labels": ["OpenZeppelin"]}, {"title": "ERC20 compliance", "body": "ERC20 compliance", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#erc20-compliance", "labels": ["OpenZeppelin"]}, {"title": "Although a minor problem, the decimals state variable should be defined with type uint8 to be compliant with ERC20.", "body": "Although a minor problem, the decimals state variable should be defined with type uint8 to be compliant with ERC20.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#although-a-minor-problem,-the-decimals-state-variable-should-be-defined-with-type-uint8-to-be-compliant-with-erc20.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, there is a restriction to the usage of approve intended to mitigate a problematic race condition, but it is not ERC20 compliant. Consider removing the line, and including an alternative mitigation.", "body": "Additionally, there is a restriction to the usage of approve intended to mitigate a problematic race condition, but it is not ERC20 compliant. Consider removing the line, and including an alternative mitigation.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#additionally,-there-is-a-restriction-to-the-usage-of-approve-intended-to-mitigate-a-problematic-race-condition,-but-it-is-not-erc20-compliant.-consider-removing-the-line,-and-including-an-alternative-mitigation.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 767b11e.", "body": "Update: Fixed in 767b11e.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-fixed-in-767b11e.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming maxRaiseWei to maxRaisedWei, and the same for minRaiseWei and targetRaiseWei.", "body": "Consider renaming maxRaiseWei to maxRaisedWei, and the same for minRaiseWei and targetRaiseWei.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#consider-renaming-maxraisewei-to-maxraisedwei,-and-the-same-for-minraisewei-and-targetraisewei.", "labels": ["OpenZeppelin"]}, {"title": "The members of Milestones.State have inconsistent capitalization, e.g. ICOopen and ICOFailed. Consider making it consistent.", "body": "The members of Milestones.State have inconsistent capitalization, e.g. ICOopen and ICOFailed. Consider making it consistent.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#the-members-of-milestones.state-have-inconsistent-capitalization,-e.g.-icoopen-and-icofailed.-consider-making-it-consistent.", "labels": ["OpenZeppelin"]}, {"title": "The struct type named Whitelist might be more aptly named WhitelistEntry.", "body": "The struct type named Whitelist might be more aptly named WhitelistEntry.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#the-struct-type-named-whitelist-might-be-more-aptly-named-whitelistentry.", "labels": ["OpenZeppelin"]}, {"title": "In manageAdmins, it\u2019s not necessary to make a special case for _add == false, because admins[_address] = false is exactly equivalent to delete admins[_address] (including the gas reimbursement). Consider rewriting the function body simply to admins[_address] = _add. The same goes for manageInvestors.", "body": "In manageAdmins, it\u2019s not necessary to make a special case for _add == false, because admins[_address] = false is exactly equivalent to delete admins[_address] (including the gas reimbursement). Consider rewriting the function body simply to admins[_address] = _add. The same goes for manageInvestors.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#in-manageadmins,-it\u2019s-not-necessary-to-make-a-special-case-for-_add-==-false,-because-admins[_address]-=-false-is-exactly-equivalent-to-delete-admins[_address]-(including-the-gas-reimbursement).-consider-rewriting-the-function-body-simply-to-admins[_address]-=-_add.-the-same-goes-for-manageinvestors.", "labels": ["OpenZeppelin"]}, {"title": "Solidity provides a shorthand notation for writing ETH amounts like 1 ether. Consider using it to define the crowdsale limits (e.g. minRaiseWei = 20000 ether), and elsewhere like in the token fallback function.", "body": "Solidity provides a shorthand notation for writing ETH amounts like 1 ether. Consider using it to define the crowdsale limits (e.g. minRaiseWei = 20000 ether), and elsewhere like in the token fallback function.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#solidity-provides-a-shorthand-notation-for-writing-eth-amounts-like-1-ether.-consider-using-it-to-define-the-crowdsale-limits-(e.g.-minraisewei-=-20000-ether),-and-elsewhere-like-in-the-token-fallback-function.", "labels": ["OpenZeppelin"]}, {"title": "In the Milestone_* functions in the token contract (Milestone_ICOSuccessful and Milestone_BankLicenseFailed) it\u2019s not necessary to repeat the inState modifiers. They will be handled by the call to super.", "body": "In the Milestone_* functions in the token contract (Milestone_ICOSuccessful and Milestone_BankLicenseFailed) it\u2019s not necessary to repeat the inState modifiers. They will be handled by the call to super.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#in-the-milestone_*-functions-in-the-token-contract-(milestone_icosuccessful-and-milestone_banklicensefailed)-it\u2019s-not-necessary-to-repeat-the-instate-modifiers.-they-will-be-handled-by-the-call-to-super.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s not a problem for the current token because the functions always return true, but when overriding transfer you should respect the return value of the call to super: if it returns false, the failure must be relayed. The same goes for transferFrom.", "body": "It\u2019s not a problem for the current token because the functions always return true, but when overriding transfer you should respect the return value of the call to super: if it returns false, the failure must be relayed. The same goes for transferFrom.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#it\u2019s-not-a-problem-for-the-current-token-because-the-functions-always-return-true,-but-when-overriding-transfer-you-should-respect-the-return-value-of-the-call-to-super:-if-it-returns-false,-the-failure-must-be-relayed.-the-same-goes-for-transferfrom.", "labels": ["OpenZeppelin"]}, {"title": "investFIAT adds the investor address to the list of approved investors if it\u2019s not already in it.", "body": "investFIAT adds the investor address to the list of approved investors if it\u2019s not already in it.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#investfiat-adds-the-investor-address-to-the-list-of-approved-investors-if-it\u2019s-not-already-in-it.", "labels": ["OpenZeppelin"]}, {"title": "Update: Most suggestions were implemented in ba52c70.", "body": "Update: Most suggestions were implemented in ba52c70.", "html_url": "https://blog.openzeppelin.com/fiinu-token-audit-c62ecbf63ad1#update:-most-suggestions-were-implemented-in-ba52c70.", "labels": ["OpenZeppelin"]}, {"title": "No issues of critical severity.", "body": "No issues of critical severity.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#no-issues-of-critical-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}, {"title": "No issues of medium severity.", "body": "No issues of medium severity.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#no-issues-of-medium-severity.", "labels": ["OpenZeppelin"]}, {"title": "Unnecessary low level\u00a0call", "body": "Unnecessary low level\u00a0call", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#unnecessary-low-level\u00a0call", "labels": ["OpenZeppelin"]}, {"title": "No Transfer event for minted\u00a0tokens", "body": "No Transfer event for minted\u00a0tokens", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#no-transfer-event-for-minted\u00a0tokens", "labels": ["OpenZeppelin"]}, {"title": "in the ERC20 spec, to emit a", "body": "in the ERC20 spec, to emit a", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#in-the-erc20-spec,-to-emit-a", "labels": ["OpenZeppelin"]}, {"title": "Etherscan to learn of the new token holders. In this case this is only relevant for the constructor, where the initial balance is assigned to the contract creator. Nonetheless, consider emitting the corresponding event:", "body": "Etherscan to learn of the new token holders. In this case this is only relevant for the constructor, where the initial balance is assigned to the contract creator. Nonetheless, consider emitting the corresponding event:", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#etherscan-to-learn-of-the-new-token-holders.-in-this-case-this-is-only-relevant-for-the-constructor,-where-the-initial-balance-is-assigned-to-the-contract-creator.-nonetheless,-consider-emitting-the-corresponding-event:", "labels": ["OpenZeppelin"]}, {"title": "The ERC20 implementation used is the HumanStandardToken from ConsenSys.", "body": "The ERC20 implementation used is the HumanStandardToken from ConsenSys.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#the-erc20-implementation-used-is-the-humanstandardtoken-from-consensys.", "labels": ["OpenZeppelin"]}, {"title": "It is generally recommended to use a safe math module because otherwise operations may silently overflow and cause bugs. In this case it is not strictly necessary because in this simple contract all integer amounts will be at most the token\u2019s initial supply. However, it is something that should be kept in mind for any further lines of code added.", "body": "It is generally recommended to use a safe math module because otherwise operations may silently overflow and cause bugs. In this case it is not strictly necessary because in this simple contract all integer amounts will be at most the token\u2019s initial supply. However, it is something that should be kept in mind for any further lines of code added.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#it-is-generally-recommended-to-use-a-safe-math-module-because-otherwise-operations-may-silently-overflow-and-cause-bugs.-in-this-case-it-is-not-strictly-necessary-because-in-this-simple-contract-all-integer-amounts-will-be-at-most-the-token\u2019s-initial-supply.-however,-it-is-something-that-should-be-kept-in-mind-for-any-further-lines-of-code-added.", "labels": ["OpenZeppelin"]}, {"title": "The fallback function with a revert call is not needed, as Solidity contracts will by default not accept payments.", "body": "The fallback function with a revert call is not needed, as Solidity contracts will by default not accept payments.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#the-fallback-function-with-a-revert-call-is-not-needed,-as-solidity-contracts-will-by-default-not-accept-payments.", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "body": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "html_url": "https://blog.openzeppelin.com/everus-token-audit-a05f0959534e#keep-in-mind-that-there-is-a-possible-attack-vector-on-the-approve/transferfrom-functionality-of-erc20-tokens,-described-here.-consider-implementing-one-of-the-proposed-mitigations,-or-using-the-erc20-implementation-from-openzeppelin-which-already-has-one-in-place.", "labels": ["OpenZeppelin"]}, {"title": "No critical severity issues were found.", "body": "No critical severity issues were found.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#no-critical-severity-issues-were-found.", "labels": ["OpenZeppelin"]}, {"title": "No high severity issues were found.", "body": "No high severity issues were found.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#no-high-severity-issues-were-found.", "labels": ["OpenZeppelin"]}, {"title": "Reuse open source contracts", "body": "Reuse open source contracts", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#reuse-open-source-contracts", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin\u2019s", "body": "OpenZeppelin\u2019s", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#openzeppelin\u2019s", "labels": ["OpenZeppelin"]}, {"title": "regression problems and difficult to find bugs. Consider removing the duplicate code from your repo and using the installed versions from OpenZeppelin.", "body": "regression problems and difficult to find bugs. Consider removing the duplicate code from your repo and using the installed versions from OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#regression-problems-and-difficult-to-find-bugs.-consider-removing-the-duplicate-code-from-your-repo-and-using-the-installed-versions-from-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "Use safe\u00a0math", "body": "Use safe\u00a0math", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#use-safe\u00a0math", "labels": ["OpenZeppelin"]}, {"title": "There are some unchecked math operations in the code (see thisand this, for example). It\u2019s always better to be safe and perform checked operations. Consider using a safe math library, or performing pre-condition checks on any math operation.", "body": "There are some unchecked math operations in the code (see thisand this, for example). It\u2019s always better to be safe and perform checked operations. Consider using a safe math library, or performing pre-condition checks on any math operation.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#there-are-some-unchecked-math-operations-in-the-code-(see-thisand-this,-for-example).-it\u2019s-always-better-to-be-safe-and-perform-checked-operations.-consider-using-a-safe-math-library,-or-performing-pre-condition-checks-on-any-math-operation.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 1dc13ab and 0daf25a.", "body": "Update: Fixed in 1dc13ab and 0daf25a.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-fixed-in-1dc13ab-and-0daf25a.", "labels": ["OpenZeppelin"]}, {"title": "Token metadata should be in token\u00a0contract", "body": "Token metadata should be in token\u00a0contract", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#token-metadata-should-be-in-token\u00a0contract", "labels": ["OpenZeppelin"]}, {"title": "definedin the", "body": "definedin the", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#definedin-the", "labels": ["OpenZeppelin"]}, {"title": "ERC20. Define a new contract", "body": "ERC20. Define a new contract", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#erc20.-define-a-new-contract", "labels": ["OpenZeppelin"]}, {"title": "the crowdsale contractto create an instance of", "body": "the crowdsale contractto create an instance of", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-crowdsale-contractto-create-an-instance-of", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in be5255a.", "body": "Update: Fixed in be5255a.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-fixed-in-be5255a.", "labels": ["OpenZeppelin"]}, {"title": "Using block numbers to specify start and\u00a0end", "body": "Using block numbers to specify start and\u00a0end", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#using-block-numbers-to-specify-start-and\u00a0end", "labels": ["OpenZeppelin"]}, {"title": "The crowdsale contract uses block numbers to specify when it starts and when it ends. The current recommendation is to use timestamps instead. The risk of miner manipulation of timestamps is very low for this use case, and due to the Difficulty Bombit is now very difficult to correctly estimate future block times. Consider switching to timestamps.", "body": "The crowdsale contract uses block numbers to specify when it starts and when it ends. The current recommendation is to use timestamps instead. The risk of miner manipulation of timestamps is very low for this use case, and due to the Difficulty Bombit is now very difficult to correctly estimate future block times. Consider switching to timestamps.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-crowdsale-contract-uses-block-numbers-to-specify-when-it-starts-and-when-it-ends.-the-current-recommendation-is-to-use-timestamps-instead.-the-risk-of-miner-manipulation-of-timestamps-is-very-low-for-this-use-case,-and-due-to-the-difficulty-bombit-is-now-very-difficult-to-correctly-estimate-future-block-times.-consider-switching-to-timestamps.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 50a51b7.", "body": "Update: Fixed in 50a51b7.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-fixed-in-50a51b7.", "labels": ["OpenZeppelin"]}, {"title": "ERC20 compliance", "body": "ERC20 compliance", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#erc20-compliance", "labels": ["OpenZeppelin"]}, {"title": "declaredas a", "body": "declaredas a", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#declaredas-a", "labels": ["OpenZeppelin"]}, {"title": "400 * 10**decimals. Consider defining a state variable", "body": "400 * 10**decimals. Consider defining a state variable", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#400-*-10**decimals.-consider-defining-a-state-variable", "labels": ["OpenZeppelin"]}, {"title": "Additionally, treat transfers of zero tokens normally, by returning true and emitting the Transfer event in both transferand transferFrom.", "body": "Additionally, treat transfers of zero tokens normally, by returning true and emitting the Transfer event in both transferand transferFrom.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#additionally,-treat-transfers-of-zero-tokens-normally,-by-returning-true-and-emitting-the-transfer-event-in-both-transferand-transferfrom.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 0daf25a.", "body": "Update: Fixed in 0daf25a.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-fixed-in-0daf25a.", "labels": ["OpenZeppelin"]}, {"title": "Constructor parameter validation", "body": "Constructor parameter validation", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#constructor-parameter-validation", "labels": ["OpenZeppelin"]}, {"title": "constructor parameters. Check that", "body": "constructor parameters. Check that", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#constructor-parameters.-check-that", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in 70a42f2.", "body": "Update: Fixed in 70a42f2.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-fixed-in-70a42f2.", "labels": ["OpenZeppelin"]}, {"title": "Consider using require instead of if (...) throw. throw has been deprecated since Solidity 0.4.13.", "body": "Consider using require instead of if (...) throw. throw has been deprecated since Solidity 0.4.13.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#consider-using-require-instead-of-if-(...)-throw.-throw-has-been-deprecated-since-solidity-0.4.13.", "labels": ["OpenZeppelin"]}, {"title": "The comment in line 72 of RCNCrowdsaleseems to be unrelated to the content of the line.", "body": "The comment in line 72 of RCNCrowdsaleseems to be unrelated to the content of the line.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-comment-in-line-72-of-rcncrowdsaleseems-to-be-unrelated-to-the-content-of-the-line.", "labels": ["OpenZeppelin"]}, {"title": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "body": "Keep in mind that there is a possible attack vector on the approve/transferFrom functionality of ERC20 tokens, described here. Consider implementing one of the proposed mitigations, or using the ERC20 implementation from OpenZeppelin which already has one in place.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#keep-in-mind-that-there-is-a-possible-attack-vector-on-the-approve/transferfrom-functionality-of-erc20-tokens,-described-here.-consider-implementing-one-of-the-proposed-mitigations,-or-using-the-erc20-implementation-from-openzeppelin-which-already-has-one-in-place.", "labels": ["OpenZeppelin"]}, {"title": "The state variable name raised is somewhat misleading: it sounds like it stores the amount of ether raised, but it stores the amount of tokens minted. Furthermore, it is redundant because that value can already be found in the variable totalSupply which is updated in every mintoperation. Consider removing raised altogether.", "body": "The state variable name raised is somewhat misleading: it sounds like it stores the amount of ether raised, but it stores the amount of tokens minted. Furthermore, it is redundant because that value can already be found in the variable totalSupply which is updated in every mintoperation. Consider removing raised altogether.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-state-variable-name-raised-is-somewhat-misleading:-it-sounds-like-it-stores-the-amount-of-ether-raised,-but-it-stores-the-amount-of-tokens-minted.-furthermore,-it-is-redundant-because-that-value-can-already-be-found-in-the-variable-totalsupply-which-is-updated-in-every-mintoperation.-consider-removing-raised-altogether.", "labels": ["OpenZeppelin"]}, {"title": "The event LogRefundis not emitted anywhere (there is in fact no refund functionality). Consider removing it.", "body": "The event LogRefundis not emitted anywhere (there is in fact no refund functionality). Consider removing it.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-event-logrefundis-not-emitted-anywhere-(there-is-in-fact-no-refund-functionality).-consider-removing-it.", "labels": ["OpenZeppelin"]}, {"title": "The comment in line 75 of RCNCrowdsaleis describing a previous version of the contract in which investors by default had a fixed cap, and whitelisted investors had no cap. To be accurate it should now read \u201cif sender is not whitelisted or exceeds their cap\u201d.", "body": "The comment in line 75 of RCNCrowdsaleis describing a previous version of the contract in which investors by default had a fixed cap, and whitelisted investors had no cap. To be accurate it should now read \u201cif sender is not whitelisted or exceeds their cap\u201d.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#the-comment-in-line-75-of-rcncrowdsaleis-describing-a-previous-version-of-the-contract-in-which-investors-by-default-had-a-fixed-cap,-and-whitelisted-investors-had-no-cap.-to-be-accurate-it-should-now-read-\u201cif-sender-is-not-whitelisted-or-exceeds-their-cap\u201d.", "labels": ["OpenZeppelin"]}, {"title": "mintand finishMintinghave a boolean return value meant to indicate success or failure. The return value is later ignored in RCNCrowdsale, which doesn\u2019t cause any problems because in this implementation it always return true. Nonetheless, ignored return values can cause problems in future changes to the code. Consider removing them.", "body": "mintand finishMintinghave a boolean return value meant to indicate success or failure. The return value is later ignored in RCNCrowdsale, which doesn\u2019t cause any problems because in this implementation it always return true. Nonetheless, ignored return values can cause problems in future changes to the code. Consider removing them.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#mintand-finishmintinghave-a-boolean-return-value-meant-to-indicate-success-or-failure.-the-return-value-is-later-ignored-in-rcncrowdsale,-which-doesn\u2019t-cause-any-problems-because-in-this-implementation-it-always-return-true.-nonetheless,-ignored-return-values-can-cause-problems-in-future-changes-to-the-code.-consider-removing-them.", "labels": ["OpenZeppelin"]}, {"title": "Update: Most of the suggestions were implemented in the updated version.", "body": "Update: Most of the suggestions were implemented in the updated version.", "html_url": "https://blog.openzeppelin.com/ripio-token-audit-abe43b887664#update:-most-of-the-suggestions-were-implemented-in-the-updated-version.", "labels": ["OpenZeppelin"]}, {"title": "Team can circumvent refund restriction", "body": "Team can circumvent refund restriction", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#team-can-circumvent-refund-restriction", "labels": ["OpenZeppelin"]}, {"title": "The refund function allows investors to ask for a refund if the minimum cap is not reached. Radical App International is given a share of tokens at the beginning of the process for which they should not be entitled to a refund. This is accounted for by not allowing their address to call refund. Since tokens are always transferable, they could easily circumvent this by transferring the tokens to another address and calling refund from it.", "body": "The refund function allows investors to ask for a refund if the minimum cap is not reached. Radical App International is given a share of tokens at the beginning of the process for which they should not be entitled to a refund. This is accounted for by not allowing their address to call refund. Since tokens are always transferable, they could easily circumvent this by transferring the tokens to another address and calling refund from it.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#the-refund-function-allows-investors-to-ask-for-a-refund-if-the-minimum-cap-is-not-reached.-radical-app-international-is-given-a-share-of-tokens-at-the-beginning-of-the-process-for-which-they-should-not-be-entitled-to-a-refund.-this-is-accounted-for-by-not-allowing-their-address-to-call-refund.-since-tokens-are-always-transferable,-they-could-easily-circumvent-this-by-transferring-the-tokens-to-another-address-and-calling-refund-from-it.", "labels": ["OpenZeppelin"]}, {"title": "Consider disallowing transfers until the crowdsale ends successfully, for example by using OpenZeppelin\u2019s PausableToken or something similar. Not only will it fix this bug, but it\u2019s also common practice.", "body": "Consider disallowing transfers until the crowdsale ends successfully, for example by using OpenZeppelin\u2019s PausableToken or something similar. Not only will it fix this bug, but it\u2019s also common practice.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#consider-disallowing-transfers-until-the-crowdsale-ends-successfully,-for-example-by-using-openzeppelin\u2019s-pausabletoken-or-something-similar.-not-only-will-it-fix-this-bug,-but-it\u2019s-also-common-practice.", "labels": ["OpenZeppelin"]}, {"title": "Alternatively, consider giving Radical App International its share of tokens at the successful finalization of the crowdsale.", "body": "Alternatively, consider giving Radical App International its share of tokens at the successful finalization of the crowdsale.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#alternatively,-consider-giving-radical-app-international-its-share-of-tokens-at-the-successful-finalization-of-the-crowdsale.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed with the alternative suggestion in the latest version.", "body": "Update: Fixed with the alternative suggestion in the latest version.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#update:-fixed-with-the-alternative-suggestion-in-the-latest-version.", "labels": ["OpenZeppelin"]}, {"title": "No issues of high severity.", "body": "No issues of high severity.", "html_url": "https://blog.openzeppelin.com/global-messaging-token-audit-865e6a821cd8#no-issues-of-high-severity.", "labels": ["OpenZeppelin"]}]