[{"title": "Nevertheless, the only incentive that a liquidator has when calling the liquidateBorrowerCollateral function is to update its last time of activity. Not only that, but also it only updates the latest activity time for the collateral type involved in the liquidation process and not all the activity times of all collaterals. Liquidators that do not have the collateral involved in the contract, or any collateral at all, will not have any benefit for calling the liquidation process.", "body": "Nevertheless, the only incentive that a liquidator has when calling the liquidateBorrowerCollateral function is to update its last time of activity. Not only that, but also it only updates the latest activity time for the collateral type involved in the liquidation process and not all the activity times of all collaterals. Liquidators that do not have the collateral involved in the contract, or any collateral at all, will not have any benefit for calling the liquidation process.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-the-only-incentive-that-a-liquidator-has-when-calling-the-liquidateborrowercollateral-function-is-to-update-its-last-time-of-activity.-not-only-that,-but-also-it-only-updates-the-latest-activity-time-for-the-collateral-type-involved-in-the-liquidation-process-and-not-all-the-activity-times-of-all-collaterals.-liquidators-that-do-not-have-the-collateral-involved-in-the-contract,-or-any-collateral-at-all,-will-not-have-any-benefit-for-calling-the-liquidation-process.", "labels": ["OpenZeppelin"]}, {"title": "the liquidateBorrowerCollateral function will be high due to the", "body": "the liquidateBorrowerCollateral function will be high due to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidateborrowercollateral-function-will-be-high-due-to-the", "labels": ["OpenZeppelin"]}, {"title": "the clearDebts function, as it was pointed out in the issue", "body": "the clearDebts function, as it was pointed out in the issue", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-cleardebts-function,-as-it-was-pointed-out-in-the-issue", "labels": ["OpenZeppelin"]}, {"title": "the buyLiquidatedCollateral function, by increasing the gas price, just after the transaction to the", "body": "the buyLiquidatedCollateral function, by increasing the gas price, just after the transaction to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-buyliquidatedcollateral-function,-by-increasing-the-gas-price,-just-after-the-transaction-to-the", "labels": ["OpenZeppelin"]}, {"title": "Consider improving the incentive design to give the liquidators higher incentives to execute the liquidation process, or merging the functionalities from the liquidateBorrowerCollateral and the buyLiquidatedCollateral functions under one.", "body": "Consider improving the incentive design to give the liquidators higher incentives to execute the liquidation process, or merging the functionalities from the liquidateBorrowerCollateral and the buyLiquidatedCollateral functions under one.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-improving-the-incentive-design-to-give-the-liquidators-higher-incentives-to-execute-the-liquidation-process,-or-merging-the-functionalities-from-the-liquidateborrowercollateral-and-the-buyliquidatedcollateral-functions-under-one.", "labels": ["OpenZeppelin"]}, {"title": "A 5% discount for buying collateral assets can incentivize the liquidator to liquidate collaterals and then buy it.", "body": "A 5% discount for buying collateral assets can incentivize the liquidator to liquidate collaterals and then buy it.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#a-5%-discount-for-buying-collateral-assets-can-incentivize-the-liquidator-to-liquidate-collaterals-and-then-buy-it.", "labels": ["OpenZeppelin"]}, {"title": "We have updated our suggestion to make it clearer.", "body": "[M09] Not using OpenZeppelin contracts  OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.  This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.  In particular, the following contracts and libraries are being reimplemented or copied:  the Ownable contract can be replaced with the OpenZeppelins Ownable contract  the SafeMath library can be replaced with the OpenZeppelins SafeMath library  The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelins IERC20.sol interface  Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.  Update: Not fixed. Holdefis statement for this issue:  If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and cant remove them. For ERC20 interface, we dont need all functions so web just use a reduced version of IERC20.sol interface.    [M10] Lack of events emission after sensitive actions  Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:  In the CollateralsWallet contract: The withdraw function should emit a CollateralAssetWithdrawn event The fallback function should emit a TransferReceived event  updatePromotionReserve function should emit a  withdrawLiquidationReserve function should emit a  withdrawPromotionReserve function should emit a  UpdateBorrowIndex event should print the  pause function should emit a  unpause function should emit a  setPauser function should emit a  setPauseDuration function should emit a  In the Ownable contract, the constructor should emit an OwnershipTransferred event  In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event  As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.  [M11] Missing docstrings  All the contracts and functions in the Holdefis codebase lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness.  Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Not fixed. Holdefis statement for this issue:  This is not a bug. This is just a suggestion  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Low Severity  [L01] Transfer method is used to send ETH  The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the callers address with the holdefiContract address is compared.  Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.  In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-have-updated-our-suggestion-to-make-it-clearer.", "labels": ["OpenZeppelin"]}, {"title": "[M05] Asset price can be reset by owner", "body": "[M05] Asset price can be reset by owner", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m05]-asset-price-can-be-reset-by-owner", "labels": ["OpenZeppelin"]}, {"title": "addStableCoin function of the", "body": "addStableCoin function of the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#addstablecoin-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "priceDecimal, that will later be used for performing sensible operations such as", "body": "priceDecimal, that will later be used for performing sensible operations such as", "html_url": "https://blog.openzeppelin.com/holdefi-audit#pricedecimal,-that-will-later-be-used-for-performing-sensible-operations-such-as", "labels": ["OpenZeppelin"]}, {"title": "withdrawing collaterals,", "body": "withdrawing collaterals,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawing-collaterals,", "labels": ["OpenZeppelin"]}, {"title": "borrowing market assets, and", "body": "borrowing market assets, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#borrowing-market-assets,-and", "labels": ["OpenZeppelin"]}, {"title": "liquidating a borrower\u2019s collateral on the", "body": "liquidating a borrower\u2019s collateral on the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#liquidating-a-borrower\u2019s-collateral-on-the", "labels": ["OpenZeppelin"]}, {"title": "The problem resides in that the addStableCoin function does not check whether an asset has already been added to the system or not, leading to scenarios where the owner of the contract could reset its value by calling this function multiple times, overwriting the current price of a given asset with the initial priceDecimal value.", "body": "The problem resides in that the addStableCoin function does not check whether an asset has already been added to the system or not, leading to scenarios where the owner of the contract could reset its value by calling this function multiple times, overwriting the current price of a given asset with the initial priceDecimal value.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-problem-resides-in-that-the-addstablecoin-function-does-not-check-whether-an-asset-has-already-been-added-to-the-system-or-not,-leading-to-scenarios-where-the-owner-of-the-contract-could-reset-its-value-by-calling-this-function-multiple-times,-overwriting-the-current-price-of-a-given-asset-with-the-initial-pricedecimal-value.", "labels": ["OpenZeppelin"]}, {"title": "Consider checking whether a given asset price has already been added to the system by checking its existence in the assetPrices mapping before calling the setPrice function inside the addStableCoin function.", "body": "Consider checking whether a given asset price has already been added to the system by checking its existence in the assetPrices mapping before calling the setPrice function inside the addStableCoin function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-checking-whether-a-given-asset-price-has-already-been-added-to-the-system-by-checking-its-existence-in-the-assetprices-mapping-before-calling-the-setprice-function-inside-the-addstablecoin-function.", "labels": ["OpenZeppelin"]}, {"title": "[M06] Markets can become insolvent", "body": "[M06] Markets can become insolvent", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m06]-markets-can-become-insolvent", "labels": ["OpenZeppelin"]}, {"title": "When the value of all collateral is worth less than the value of all borrowed assets, we say a market is insolvent. The Holdefi codebase can do many things to reduce the risk of market insolvency, including: prudent selection of collateral-ratios, incentivizing third-party collateral liquidation, careful selection of which tokens are listed on the platform, etc. However, the risk of insolvency cannot be entirely eliminated, and there are numerous ways a market can become insolvent, for instance:", "body": "When the value of all collateral is worth less than the value of all borrowed assets, we say a market is insolvent. The Holdefi codebase can do many things to reduce the risk of market insolvency, including: prudent selection of collateral-ratios, incentivizing third-party collateral liquidation, careful selection of which tokens are listed on the platform, etc. However, the risk of insolvency cannot be entirely eliminated, and there are numerous ways a market can become insolvent, for instance:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#when-the-value-of-all-collateral-is-worth-less-than-the-value-of-all-borrowed-assets,-we-say-a-market-is-insolvent.-the-holdefi-codebase-can-do-many-things-to-reduce-the-risk-of-market-insolvency,-including:-prudent-selection-of-collateral-ratios,-incentivizing-third-party-collateral-liquidation,-careful-selection-of-which-tokens-are-listed-on-the-platform,-etc.-however,-the-risk-of-insolvency-cannot-be-entirely-eliminated,-and-there-are-numerous-ways-a-market-can-become-insolvent,-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "The price of the underlying (or borrowed) asset makes a big, quick move during a time of high network congestion \u2014 resulting in the market becoming insolvent before enough liquidation transactions can be mined. A similar situation was experienced at the beginning 2020 in the Ethereum network, and specially in Maker\u2019s pricing oracles.", "body": "The price of the underlying (or borrowed) asset makes a big, quick move during a time of high network congestion \u2014 resulting in the market becoming insolvent before enough liquidation transactions can be mined. A similar situation was experienced at the beginning 2020 in the Ethereum network, and specially in Maker\u2019s pricing oracles.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-price-of-the-underlying-(or-borrowed)-asset-makes-a-big,-quick-move-during-a-time-of-high-network-congestion-\u2014-resulting-in-the-market-becoming-insolvent-before-enough-liquidation-transactions-can-be-mined.-a-similar-situation-was-experienced-at-the-beginning-2020-in-the-ethereum-network,-and-specially-in-maker\u2019s-pricing-oracles.", "labels": ["OpenZeppelin"]}, {"title": "The liquidation incentives are not as strong they should be, allowing the accumulation of under-collateralized borrows.", "body": "The liquidation incentives are not as strong they should be, allowing the accumulation of under-collateralized borrows.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidation-incentives-are-not-as-strong-they-should-be,-allowing-the-accumulation-of-under-collateralized-borrows.", "labels": ["OpenZeppelin"]}, {"title": "The price oracle temporarily goes offline during a time of high market volatility. This could result in the oracle not updating the asset prices until after the market has become insolvent. In this case, there will never have been an opportunity for liquidation to occur.", "body": "The price oracle temporarily goes offline during a time of high market volatility. This could result in the oracle not updating the asset prices until after the market has become insolvent. In this case, there will never have been an opportunity for liquidation to occur.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-price-oracle-temporarily-goes-offline-during-a-time-of-high-market-volatility.-this-could-result-in-the-oracle-not-updating-the-asset-prices-until-after-the-market-has-become-insolvent.-in-this-case,-there-will-never-have-been-an-opportunity-for-liquidation-to-occur.", "labels": ["OpenZeppelin"]}, {"title": "The admin or oracle steals enough collateral that the market becomes insolvent.", "body": "The admin or oracle steals enough collateral that the market becomes insolvent.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-admin-or-oracle-steals-enough-collateral-that-the-market-becomes-insolvent.", "labels": ["OpenZeppelin"]}, {"title": "Administrators list an ERC20 token with a later-discovered bug that allows minting tokens arbitrarily. This potentially corrupt tokens can be used as collateral to borrow funds that were never intended to be used as a repayment.", "body": "Administrators list an ERC20 token with a later-discovered bug that allows minting tokens arbitrarily. This potentially corrupt tokens can be used as collateral to borrow funds that were never intended to be used as a repayment.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#administrators-list-an-erc20-token-with-a-later-discovered-bug-that-allows-minting-tokens-arbitrarily.-this-potentially-corrupt-tokens-can-be-used-as-collateral-to-borrow-funds-that-were-never-intended-to-be-used-as-a-repayment.", "labels": ["OpenZeppelin"]}, {"title": "In any case, the effects of an insolvent market could be disastrous. It may result in a \u201crun on the bank\u201d situation, with the last suppliers out losing their money.", "body": "In any case, the effects of an insolvent market could be disastrous. It may result in a \u201crun on the bank\u201d situation, with the last suppliers out losing their money.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-any-case,-the-effects-of-an-insolvent-market-could-be-disastrous.-it-may-result-in-a-\u201crun-on-the-bank\u201d-situation,-with-the-last-suppliers-out-losing-their-money.", "labels": ["OpenZeppelin"]}, {"title": "This risk is not unique to the Holdefi project. All collateralized loans (even non-blockchain loans) have a risk of insolvency. However, it is important to know that this risk does exist, and that it can be difficult to recover from even a small dip into insolvency.", "body": "This risk is not unique to the Holdefi project. All collateralized loans (even non-blockchain loans) have a risk of insolvency. However, it is important to know that this risk does exist, and that it can be difficult to recover from even a small dip into insolvency.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-risk-is-not-unique-to-the-holdefi-project.-all-collateralized-loans-(even-non-blockchain-loans)-have-a-risk-of-insolvency.-however,-it-is-important-to-know-that-this-risk-does-exist,-and-that-it-can-be-difficult-to-recover-from-even-a-small-dip-into-insolvency.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding more targeted tests for these scenarios to better understand the behavior of the protocol, and designing relevant mechanics to make sure the platform operates properly. Also consider communicating the potential risks to the users if needed.", "body": "Consider adding more targeted tests for these scenarios to better understand the behavior of the protocol, and designing relevant mechanics to make sure the platform operates properly. Also consider communicating the potential risks to the users if needed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-adding-more-targeted-tests-for-these-scenarios-to-better-understand-the-behavior-of-the-protocol,-and-designing-relevant-mechanics-to-make-sure-the-platform-operates-properly.-also-consider-communicating-the-potential-risks-to-the-users-if-needed.", "labels": ["OpenZeppelin"]}, {"title": "[M07] Old owner can frontrun the ownerChanger", "body": "[M07] Old owner can frontrun the ownerChanger", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m07]-old-owner-can-frontrun-the-ownerchanger", "labels": ["OpenZeppelin"]}, {"title": "The Ownable contract is a modified version of the OpenZepplin Ownable contract where a third actor is included: the ownerChanger.", "body": "The Ownable contract is a modified version of the OpenZepplin Ownable contract where a third actor is included: the ownerChanger.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownable-contract-is-a-modified-version-of-the-openzepplin-ownable-contract-where-a-third-actor-is-included:-the-ownerchanger.", "labels": ["OpenZeppelin"]}, {"title": "The ownerChanger is can accept an ownership transfer from the old owner to the pendingOwner.", "body": "The ownerChanger is can accept an ownership transfer from the old owner to the pendingOwner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownerchanger-is-can-accept-an-ownership-transfer-from-the-old-owner-to-the-pendingowner.", "labels": ["OpenZeppelin"]}, {"title": "First, to perform a successful ownership transfer, the old owner needs to call the transferOwnership function passing the address of the new desired owner, and then the ownerChanger needs to accept it by calling the acceptTransferOwnership function.", "body": "First, to perform a successful ownership transfer, the old owner needs to call the transferOwnership function passing the address of the new desired owner, and then the ownerChanger needs to accept it by calling the acceptTransferOwnership function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#first,-to-perform-a-successful-ownership-transfer,-the-old-owner-needs-to-call-the-transferownership-function-passing-the-address-of-the-new-desired-owner,-and-then-the-ownerchanger-needs-to-accept-it-by-calling-the-accepttransferownership-function.", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function with the address of the new owner B, address that the", "body": "the transferOwnership function with the address of the new owner B, address that the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function-with-the-address-of-the-new-owner-b,-address-that-the", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function, the old owner A calls", "body": "the acceptTransferOwnership function, the old owner A calls", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function,-the-old-owner-a-calls", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function again with a higher gasPrice and passing another address C as the parameter. In that case, this last transaction would be mined first and just after that", "body": "the transferOwnership function again with a higher gasPrice and passing another address C as the parameter. In that case, this last transaction would be mined first and just after that", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function-again-with-a-higher-gasprice-and-passing-another-address-c-as-the-parameter.-in-that-case,-this-last-transaction-would-be-mined-first-and-just-after-that", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function would confirm the ownership transfer to the undesired address C.", "body": "the acceptTransferOwnership function would confirm the ownership transfer to the undesired address C.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function-would-confirm-the-ownership-transfer-to-the-undesired-address-c.", "labels": ["OpenZeppelin"]}, {"title": "Although it is very unlikely that the old owner would perform such attack, consider changing the acceptTransferOwnership function to ask the ownerChanger the address of the new owner so it can be compared to the pendingOwner submitted by the old owner.", "body": "Although it is very unlikely that the old owner would perform such attack, consider changing the acceptTransferOwnership function to ask the ownerChanger the address of the new owner so it can be compared to the pendingOwner submitted by the old owner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-it-is-very-unlikely-that-the-old-owner-would-perform-such-attack,-consider-changing-the-accepttransferownership-function-to-ask-the-ownerchanger-the-address-of-the-new-owner-so-it-can-be-compared-to-the-pendingowner-submitted-by-the-old-owner.", "labels": ["OpenZeppelin"]}, {"title": "[M08] Excessive indirection", "body": "[M08] Excessive indirection", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m08]-excessive-indirection", "labels": ["OpenZeppelin"]}, {"title": "Due to the massive factorization of certain behaviors under the same function as addressed in the issue \u201c[L08] Overcomplicated return values\u201d, the level of indirection present severely degrades the readability of the code.", "body": "Due to the massive factorization of certain behaviors under the same function as addressed in the issue \u201c[L08] Overcomplicated return values\u201d, the level of indirection present severely degrades the readability of the code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#due-to-the-massive-factorization-of-certain-behaviors-under-the-same-function-as-addressed-in-the-issue-\u201c[l08]-overcomplicated-return-values\u201d,-the-level-of-indirection-present-severely-degrades-the-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "the liquidateBorrowerCollateral function of the", "body": "the liquidateBorrowerCollateral function of the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-liquidateborrowercollateral-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "the clearDebts function, which then would call", "body": "the clearDebts function, which then would call", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-cleardebts-function,-which-then-would-call", "labels": ["OpenZeppelin"]}, {"title": "the updateSupplyIndex function, which would call afterwards", "body": "the updateSupplyIndex function, which would call afterwards", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-updatesupplyindex-function,-which-would-call-afterwards", "labels": ["OpenZeppelin"]}, {"title": "the getCurrentInterestIndex function, and finally jump to the", "body": "the getCurrentInterestIndex function, and finally jump to the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcurrentinterestindex-function,-and-finally-jump-to-the", "labels": ["OpenZeppelin"]}, {"title": "the getInterests function.", "body": "Note that the example of excessive indirection mentioned above is not the only one triggered by the liquidateBorrowerCollateral function, but just one of many.  While this does not pose a security risk per se, it introduces a lot of complexity to important sections of the code, is error prone and difficult to maintain in the long term.  Consider reducing excessive indirections throughout the code base by simplifying each function, so that they can fulfill one single and clear purpose, and also avoid over-factorizing behaviors in order to improve the readability and maintenance of the project. If there is a reason or limitation that forces this complexity, consider documenting it in the code.  Update: Not fixed. Holdefis statement for this issue:  As you mentioned, this does not pose a security risk per se. And its not a medium severity issue. Its just a suggestion.Also, we can use the limited number of values in each function. If we want to simplify functions, we are faced with this error: Stack too deep, try removing local variables.  We have updated our suggestion to make it clearer.  [M09] Not using OpenZeppelin contracts  OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.  This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.  In particular, the following contracts and libraries are being reimplemented or copied:  the Ownable contract can be replaced with the OpenZeppelins Ownable contract  the SafeMath library can be replaced with the OpenZeppelins SafeMath library  The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelins IERC20.sol interface  Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.  Update: Not fixed. Holdefis statement for this issue:  If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and cant remove them. For ERC20 interface, we dont need all functions so web just use a reduced version of IERC20.sol interface.  We have updated our suggestion to make it clearer.  [M10] Lack of events emission after sensitive actions  Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:  In the CollateralsWallet contract: The withdraw function should emit a CollateralAssetWithdrawn event The fallback function should emit a TransferReceived event  updatePromotionReserve function should emit a  withdrawLiquidationReserve function should emit a  withdrawPromotionReserve function should emit a  UpdateBorrowIndex event should print the  pause function should emit a  unpause function should emit a  setPauser function should emit a  setPauseDuration function should emit a  In the Ownable contract, the constructor should emit an OwnershipTransferred event  In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event  As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.  [M11] Missing docstrings  All the contracts and functions in the Holdefis codebase lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness.  Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Not fixed. Holdefis statement for this issue:  This is not a bug. This is just a suggestion  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlM", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getinterests-function.", "labels": ["OpenZeppelin"]}, {"title": "Right after the updateSupplyIndex call ends, the updatePromotionReserve would be called, which would call the getCurrentPromotion function, and would end up jumping again to the HoldefiSettings contract to call the getInterests function.", "body": "Right after the updateSupplyIndex call ends, the updatePromotionReserve would be called, which would call the getCurrentPromotion function, and would end up jumping again to the HoldefiSettings contract to call the getInterests function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#right-after-the-updatesupplyindex-call-ends,-the-updatepromotionreserve-would-be-called,-which-would-call-the-getcurrentpromotion-function,-and-would-end-up-jumping-again-to-the-holdefisettings-contract-to-call-the-getinterests-function.", "labels": ["OpenZeppelin"]}, {"title": "Note that the example of excessive indirection mentioned above is not the only one triggered by the liquidateBorrowerCollateral function, but just one of many.", "body": "Note that the example of excessive indirection mentioned above is not the only one triggered by the liquidateBorrowerCollateral function, but just one of many.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#note-that-the-example-of-excessive-indirection-mentioned-above-is-not-the-only-one-triggered-by-the-liquidateborrowercollateral-function,-but-just-one-of-many.", "labels": ["OpenZeppelin"]}, {"title": "While this does not pose a security risk per se, it introduces a lot of complexity to important sections of the code, is error prone and difficult to maintain in the long term.", "body": "While this does not pose a security risk per se, it introduces a lot of complexity to important sections of the code, is error prone and difficult to maintain in the long term.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#while-this-does-not-pose-a-security-risk-per-se,-it-introduces-a-lot-of-complexity-to-important-sections-of-the-code,-is-error-prone-and-difficult-to-maintain-in-the-long-term.", "labels": ["OpenZeppelin"]}, {"title": "Consider reducing excessive indirections throughout the code base by simplifying each function, so that they can fulfill one single and clear purpose, and also avoid over-factorizing behaviors in order to improve the readability and maintenance of the project. If there is a reason or limitation that forces this complexity, consider documenting it in the code.", "body": "Consider reducing excessive indirections throughout the code base by simplifying each function, so that they can fulfill one single and clear purpose, and also avoid over-factorizing behaviors in order to improve the readability and maintenance of the project. If there is a reason or limitation that forces this complexity, consider documenting it in the code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-reducing-excessive-indirections-throughout-the-code-base-by-simplifying-each-function,-so-that-they-can-fulfill-one-single-and-clear-purpose,-and-also-avoid-over-factorizing-behaviors-in-order-to-improve-the-readability-and-maintenance-of-the-project.-if-there-is-a-reason-or-limitation-that-forces-this-complexity,-consider-documenting-it-in-the-code.", "labels": ["OpenZeppelin"]}, {"title": "As you mentioned, this does not pose a security risk per se. And it\u2019s not a medium severity issue. It\u2019s just a suggestion.Also, we can use the limited number of values in each function. If we want to simplify functions, we are faced with this error: Stack too deep, try removing local variables.", "body": "As you mentioned, this does not pose a security risk per se. And it\u2019s not a medium severity issue. It\u2019s just a suggestion.Also, we can use the limited number of values in each function. If we want to simplify functions, we are faced with this error: Stack too deep, try removing local variables.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-you-mentioned,-this-does-not-pose-a-security-risk-per-se.-and-it\u2019s-not-a-medium-severity-issue.-it\u2019s-just-a-suggestion.also,-we-can-use-the-limited-number-of-values-in-each-function.-if-we-want-to-simplify-functions,-we-are-faced-with-this-error:-stack-too-deep,-try-removing-local-variables.", "labels": ["OpenZeppelin"]}, {"title": "[M09] Not using OpenZeppelin contracts", "body": "[M09] Not using OpenZeppelin contracts", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m09]-not-using-openzeppelin-contracts", "labels": ["OpenZeppelin"]}, {"title": "OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.", "body": "OpenZeppelin maintains a library of standard, audited, community-reviewed, and battle-tested smart contracts.Instead of always importing these contracts, the Holdefi project reimplements them in some cases, while in other cases it just copies them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#openzeppelin-maintains-a-library-of-standard,-audited,-community-reviewed,-and-battle-tested-smart-contracts.instead-of-always-importing-these-contracts,-the-holdefi-project-reimplements-them-in-some-cases,-while-in-other-cases-it-just-copies-them.", "labels": ["OpenZeppelin"]}, {"title": "This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.", "body": "This increases the amount of code that the Holdefi team will have to maintain and misses all the improvements and bug fixes that the OpenZeppelin team is constantly implementing with the help of the community.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-increases-the-amount-of-code-that-the-holdefi-team-will-have-to-maintain-and-misses-all-the-improvements-and-bug-fixes-that-the-openzeppelin-team-is-constantly-implementing-with-the-help-of-the-community.", "labels": ["OpenZeppelin"]}, {"title": "In particular, the following contracts and libraries are being reimplemented or copied:", "body": "In particular, the following contracts and libraries are being reimplemented or copied:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-particular,-the-following-contracts-and-libraries-are-being-reimplemented-or-copied:", "labels": ["OpenZeppelin"]}, {"title": "the Ownable contract can be replaced with the OpenZeppelin\u2019s Ownable contract", "body": "the Ownable contract can be replaced with the OpenZeppelin\u2019s Ownable contract", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-ownable-contract-can-be-replaced-with-the-openzeppelin\u2019s-ownable-contract", "labels": ["OpenZeppelin"]}, {"title": "the SafeMath library can be replaced with the OpenZeppelin\u2019s SafeMath library", "body": "the SafeMath library can be replaced with the OpenZeppelin\u2019s SafeMath library", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-safemath-library-can-be-replaced-with-the-openzeppelin\u2019s-safemath-library", "labels": ["OpenZeppelin"]}, {"title": "The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelin\u2019s IERC20.sol interface", "body": "The ERC20 interface defined in line 3 of CollateralsWallet.sol and line 25 of Holdefi.sol can be replaced with the OpenZeppelin\u2019s IERC20.sol interface", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-erc20-interface-defined-in-line-3-of-collateralswallet.sol-and-line-25-of-holdefi.sol-can-be-replaced-with-the-openzeppelin\u2019s-ierc20.sol-interface", "labels": ["OpenZeppelin"]}, {"title": "Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.", "body": "Consider importing the OpenZeppelin contracts instead of reimplementing or copying them. These contracts can be extended to add the extra functionalities required by Holdefi.Consider always using the full ERC interfaces so that obviously non-compliant implementations can be easily excluded.Consider updating the library to its latest stable version for Solidity 0.5.16.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-importing-the-openzeppelin-contracts-instead-of-reimplementing-or-copying-them.-these-contracts-can-be-extended-to-add-the-extra-functionalities-required-by-holdefi.consider-always-using-the-full-erc-interfaces-so-that-obviously-non-compliant-implementations-can-be-easily-excluded.consider-updating-the-library-to-its-latest-stable-version-for-solidity-0.5.16.", "labels": ["OpenZeppelin"]}, {"title": "If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and can\u2019t remove them. For ERC20 interface, we don\u2019t need all functions so web just use a reduced version of IERC20.sol interface.", "body": "If we use exactly OpenZeppelin contracts, we will miss some added features like ownerChanger. But we need them and can\u2019t remove them. For ERC20 interface, we don\u2019t need all functions so web just use a reduced version of IERC20.sol interface.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#if-we-use-exactly-openzeppelin-contracts,-we-will-miss-some-added-features-like-ownerchanger.-but-we-need-them-and-can\u2019t-remove-them.-for-erc20-interface,-we-don\u2019t-need-all-functions-so-web-just-use-a-reduced-version-of-ierc20.sol-interface.", "labels": ["OpenZeppelin"]}, {"title": "[M10] Lack of events emission after sensitive actions", "body": "[M10] Lack of events emission after sensitive actions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m10]-lack-of-events-emission-after-sensitive-actions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:", "body": "Throughout the Holdefi project codebase, there are several cases where sensitive actions are performed but there are no events being emitted, or the existent emitted events miss important parameters.Our suggestions are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi-project-codebase,-there-are-several-cases-where-sensitive-actions-are-performed-but-there-are-no-events-being-emitted,-or-the-existent-emitted-events-miss-important-parameters.our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "In the CollateralsWallet contract:\u2013 The withdraw function should emit a CollateralAssetWithdrawn event\u2013 The fallback function should emit a TransferReceived event", "body": "In the CollateralsWallet contract:\u2013 The withdraw function should emit a CollateralAssetWithdrawn event\u2013 The fallback function should emit a TransferReceived event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-collateralswallet-contract:\u2013-the-withdraw-function-should-emit-a-collateralassetwithdrawn-event\u2013-the-fallback-function-should-emit-a-transferreceived-event", "labels": ["OpenZeppelin"]}, {"title": "updatePromotionReserve function should emit a", "body": "updatePromotionReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#updatepromotionreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "withdrawLiquidationReserve function should emit a", "body": "withdrawLiquidationReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawliquidationreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "withdrawPromotionReserve function should emit a", "body": "withdrawPromotionReserve function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#withdrawpromotionreserve-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "UpdateBorrowIndex event should print the", "body": "UpdateBorrowIndex event should print the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#updateborrowindex-event-should-print-the", "labels": ["OpenZeppelin"]}, {"title": "pause function should emit a", "body": "setPauser function should emit a  setPauseDuration function should emit a  In the Ownable contract, the constructor should emit an OwnershipTransferred event  In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event  As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.  [M11] Missing docstrings  All the contracts and functions in the Holdefis codebase lack documentation. This hinders reviewers understanding of the codes intention, which is fundamental to correctly assess not only security, but also correctness.  Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.  Consider thoroughly documenting all functions (and their parameters) that are part of the contracts public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).  Update: Not fixed. Holdefis statement for this issue:  This is not a bug. This is just a suggestion  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Low Severity  [L01] Transfer method is used to send ETH  The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the callers address with the holdefiContract address is compared.  Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.  In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores the balance in an internal mapping.  The method used to transfer the ETH to the CollateralsWallet contract is a low level call, which is the current correct way to transfer ETH between addresses due to the fact that the transfer method relies on the fact that gas costs are always constant, but since the Istanbul hard fork, these gas prices cannot be considered constants and contracts that use them may break in the future.  L214,  L325,  L397, and  L778 from the  Consider using the low level call to send ETH as it was implemented in L254-L255 or, even better, replacing all the current implementations to send ETH with the OpenZeppelins sendValue method.  [L02] Collaterals and markets can be updated after being deactivated  HoldefiSettings contract defines a mapping of  collateralAssets to store  information about collaterals, and a mapping of  marketAssets to store information about markets. Even though in both data structures there is an  setValueToLoanRate,  setPenaltyRate,  setBonusRate,  removeMarket,  setSuppliersShareRate, and the  setBorrowRate functions, leading to scenarios where deactivated collaterals and markets can be updated, and undesired event emissions will be triggered.  As addressed in the issue [H02] Markets are not being properly removed from the markets list, consider renaming the functions to reflect the current functionality of the code, and adding a third state for those markets that are still operational but are not active, while checking the state of a given collateral or market at the beginning of the functions mentioned above.  Update: Not fixed. Holdefis statement for this issue:  Removing a market o collateral in the Holdefi means that nobody can supply or borrow or add collateral. But old users can withdraw supply or repay borrow. So we can set new rates (VTL rate, bonus rate, \u2026) for them.  We have updated our suggestion to make it clearer.  [L03] Borrowers are allowed to operatate after the maximum period has passed  The Holdefi contract establishes a maximum period of time in which a borrower can be sure that his assets will not be liquidated. This period is defined as the number of seconds in a regular year.  Nevertheless, this restriction is not being applied on all the functions, a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#pause-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "unpause function should emit a", "body": "unpause function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#unpause-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "setPauser function should emit a", "body": "setPauser function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpauser-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "setPauseDuration function should emit a", "body": "setPauseDuration function should emit a", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpauseduration-function-should-emit-a", "labels": ["OpenZeppelin"]}, {"title": "In the Ownable contract, the constructor should emit an OwnershipTransferred event", "body": "In the Ownable contract, the constructor should emit an OwnershipTransferred event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-ownable-contract,-the-constructor-should-emit-an-ownershiptransferred-event", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event", "body": "In the HoldefiPrices contract, the addStableCoin function should emit a StablecoinAdded event", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefiprices-contract,-the-addstablecoin-function-should-emit-a-stablecoinadded-event", "labels": ["OpenZeppelin"]}, {"title": "As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.", "body": "As a general rule, consider emitting events appropriately when performing sensitive changes to storage variables, and consider emitting the most important variables involved in those changes.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-a-general-rule,-consider-emitting-events-appropriately-when-performing-sensitive-changes-to-storage-variables,-and-consider-emitting-the-most-important-variables-involved-in-those-changes.", "labels": ["OpenZeppelin"]}, {"title": "[M11] Missing docstrings", "body": "[M11] Missing docstrings", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[m11]-missing-docstrings", "labels": ["OpenZeppelin"]}, {"title": "All the contracts and functions in the Holdefi\u2019s codebase lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness.", "body": "All the contracts and functions in the Holdefi\u2019s codebase lack documentation. This hinders reviewers\u2019 understanding of the code\u2019s intention, which is fundamental to correctly assess not only security, but also correctness.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#all-the-contracts-and-functions-in-the-holdefi\u2019s-codebase-lack-documentation.-this-hinders-reviewers\u2019-understanding-of-the-code\u2019s-intention,-which-is-fundamental-to-correctly-assess-not-only-security,-but-also-correctness.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.", "body": "Additionally, docstrings improve readability and ease maintenance. They should explicitly explain the purpose or intention of the functions, the scenarios under which they can fail, the roles allowed to call them, the values returned, and the events emitted.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#additionally,-docstrings-improve-readability-and-ease-maintenance.-they-should-explicitly-explain-the-purpose-or-intention-of-the-functions,-the-scenarios-under-which-they-can-fail,-the-roles-allowed-to-call-them,-the-values-returned,-and-the-events-emitted.", "labels": ["OpenZeppelin"]}, {"title": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "body": "Consider thoroughly documenting all functions (and their parameters) that are part of the contracts\u2019 public API. Functions implementing sensitive functionality, even if those are not public, should be clearly documented as well. When writing docstrings, consider following the Ethereum Natural Specification Format (NatSpec).", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-thoroughly-documenting-all-functions-(and-their-parameters)-that-are-part-of-the-contracts\u2019-public-api.-functions-implementing-sensitive-functionality,-even-if-those-are-not-public,-should-be-clearly-documented-as-well.-when-writing-docstrings,-consider-following-the-ethereum-natural-specification-format-(natspec).", "labels": ["OpenZeppelin"]}, {"title": "This is not a bug. This is just a suggestion", "body": "This is not a bug. This is just a suggestion", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-is-not-a-bug.-this-is-just-a-suggestion", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzaGlnaCUyMiUyMGNsYXNzJTNEJTIyY3VzdG9tLWxpbmslMjIlM0UlM0MlMjBQcmV2aW91cyUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0NidXR0b24lMjBvbmNsaWNrJTNEJTIyY3VzdG9tc2Nyb2xsJTI4JTI5JTIyJTNFJTNDYSUyMGhyZWYlM0QlMjIlMjNsb3clMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizaglnacuymiuymgnsyxnzjtnejtiyy3vzdg9tlwxpbmslmjilm0ulm0mlmjbqcmv2aw91cyuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0nidxr0b24lmjbvbmnsawnrjtnejtiyy3vzdg9tc2nyb2xsjti4jti5jtiyjtnfjtndysuymghyzwylm0qlmjilmjnsb3clmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfbmv4dcuymcuzrsuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0mlmkzkaxylm0u=", "labels": ["OpenZeppelin"]}, {"title": "[L01] Transfer method is used to send ETH", "body": "[L01] Transfer method is used to send ETH", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l01]-transfer-method-is-used-to-send-eth", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the caller\u2019s address with the holdefiContract address is compared.", "body": "The Holdefi platform uses the CollateralsWallet contract to store the collateral assets of the project. There, the contract implements functionalities such as withdrawing the collaterals or accepting ETH through the payable fallback function. To restrict who can call these functions, the caller\u2019s address with the holdefiContract address is compared.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-platform-uses-the-collateralswallet-contract-to-store-the-collateral-assets-of-the-project.-there,-the-contract-implements-functionalities-such-as-withdrawing-the-collaterals-or-accepting-eth-through-the-payable-fallback-function.-to-restrict-who-can-call-these-functions,-the-caller\u2019s-address-with-the-holdeficontract-address-is-compared.", "labels": ["OpenZeppelin"]}, {"title": "Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.", "body": "Meanwhile, the Holdefi contract allows users to deposit assets as collaterals to then increase their collateral balance which allows them to borrow other assets of the platform.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#meanwhile,-the-holdefi-contract-allows-users-to-deposit-assets-as-collaterals-to-then-increase-their-collateral-balance-which-allows-them-to-borrow-other-assets-of-the-platform.", "labels": ["OpenZeppelin"]}, {"title": "In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores the balance in an internal mapping.", "body": "In particular, if someone deposits ETH, the user has to call the collateralize payable function while sending the amount of ETH they want to add in the same transaction. Once the Holdefi contract checks if the ETH market is active, it transfers the ETH to the CollateralsWallet contract and stores the balance in an internal mapping.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-particular,-if-someone-deposits-eth,-the-user-has-to-call-the-collateralize-payable-function-while-sending-the-amount-of-eth-they-want-to-add-in-the-same-transaction.-once-the-holdefi-contract-checks-if-the-eth-market-is-active,-it-transfers-the-eth-to-the-collateralswallet-contract-and-stores-the-balance-in-an-internal-mapping.", "labels": ["OpenZeppelin"]}, {"title": "The method used to transfer the ETH to the CollateralsWallet contract is a low level call, which is the current correct way to transfer ETH between addresses due to the fact that the transfer method relies on the fact that gas costs are always constant, but since the Istanbul hard fork, these gas prices cannot be considered constants and contracts that use them may break in the future.", "body": "The method used to transfer the ETH to the CollateralsWallet contract is a low level call, which is the current correct way to transfer ETH between addresses due to the fact that the transfer method relies on the fact that gas costs are always constant, but since the Istanbul hard fork, these gas prices cannot be considered constants and contracts that use them may break in the future.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-method-used-to-transfer-the-eth-to-the-collateralswallet-contract-is-a-low-level-call,-which-is-the-current-correct-way-to-transfer-eth-between-addresses-due-to-the-fact-that-the-transfer-method-relies-on-the-fact-that-gas-costs-are-always-constant,-but-since-the-istanbul-hard-fork,-these-gas-prices-cannot-be-considered-constants-and-contracts-that-use-them-may-break-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "L214,", "body": "L214,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l214,", "labels": ["OpenZeppelin"]}, {"title": "L325,", "body": "L325,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l325,", "labels": ["OpenZeppelin"]}, {"title": "L397, and", "body": "L397, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l397,-and", "labels": ["OpenZeppelin"]}, {"title": "L778 from the", "body": "L778 from the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#l778-from-the", "labels": ["OpenZeppelin"]}, {"title": "Consider using the low level call to send ETH as it was implemented in L254-L255 or, even better, replacing all the current implementations to send ETH with the OpenZeppelin\u2019s sendValue method.", "body": "Consider using the low level call to send ETH as it was implemented in L254-L255 or, even better, replacing all the current implementations to send ETH with the OpenZeppelin\u2019s sendValue method.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-using-the-low-level-call-to-send-eth-as-it-was-implemented-in-l254-l255-or,-even-better,-replacing-all-the-current-implementations-to-send-eth-with-the-openzeppelin\u2019s-sendvalue-method.", "labels": ["OpenZeppelin"]}, {"title": "[L02] Collaterals and markets can be updated after being deactivated", "body": "[L02] Collaterals and markets can be updated after being deactivated", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l02]-collaterals-and-markets-can-be-updated-after-being-deactivated", "labels": ["OpenZeppelin"]}, {"title": "HoldefiSettings contract defines a mapping of", "body": "HoldefiSettings contract defines a mapping of", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefisettings-contract-defines-a-mapping-of", "labels": ["OpenZeppelin"]}, {"title": "collateralAssets to store", "body": "collateralAssets to store", "html_url": "https://blog.openzeppelin.com/holdefi-audit#collateralassets-to-store", "labels": ["OpenZeppelin"]}, {"title": "information about collaterals, and a mapping of", "body": "information about collaterals, and a mapping of", "html_url": "https://blog.openzeppelin.com/holdefi-audit#information-about-collaterals,-and-a-mapping-of", "labels": ["OpenZeppelin"]}, {"title": "marketAssets to store information about markets. Even though in both data structures there is an", "body": "marketAssets to store information about markets. Even though in both data structures there is an", "html_url": "https://blog.openzeppelin.com/holdefi-audit#marketassets-to-store-information-about-markets.-even-though-in-both-data-structures-there-is-an", "labels": ["OpenZeppelin"]}, {"title": "setValueToLoanRate,", "body": "setValueToLoanRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setvaluetoloanrate,", "labels": ["OpenZeppelin"]}, {"title": "setPenaltyRate,", "body": "setPenaltyRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setpenaltyrate,", "labels": ["OpenZeppelin"]}, {"title": "setBonusRate,", "body": "setBonusRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setbonusrate,", "labels": ["OpenZeppelin"]}, {"title": "removeMarket,", "body": "removeMarket,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#removemarket,", "labels": ["OpenZeppelin"]}, {"title": "setSuppliersShareRate, and the", "body": "setSuppliersShareRate, and the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setsupplierssharerate,-and-the", "labels": ["OpenZeppelin"]}, {"title": "setBorrowRate functions, leading to scenarios where deactivated collaterals and markets can be updated, and undesired event emissions will be triggered.", "body": "setBorrowRate functions, leading to scenarios where deactivated collaterals and markets can be updated, and undesired event emissions will be triggered.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#setborrowrate-functions,-leading-to-scenarios-where-deactivated-collaterals-and-markets-can-be-updated,-and-undesired-event-emissions-will-be-triggered.", "labels": ["OpenZeppelin"]}, {"title": "As addressed in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, consider renaming the functions to reflect the current functionality of the code, and adding a third state for those markets that are still operational but are not active, while checking the state of a given collateral or market at the beginning of the functions mentioned above.", "body": "As addressed in the issue \u201c[H02] Markets are not being properly removed from the markets list\u201d, consider renaming the functions to reflect the current functionality of the code, and adding a third state for those markets that are still operational but are not active, while checking the state of a given collateral or market at the beginning of the functions mentioned above.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-addressed-in-the-issue-\u201c[h02]-markets-are-not-being-properly-removed-from-the-markets-list\u201d,-consider-renaming-the-functions-to-reflect-the-current-functionality-of-the-code,-and-adding-a-third-state-for-those-markets-that-are-still-operational-but-are-not-active,-while-checking-the-state-of-a-given-collateral-or-market-at-the-beginning-of-the-functions-mentioned-above.", "labels": ["OpenZeppelin"]}, {"title": "Removing a market o collateral in the Holdefi means that nobody can supply or borrow or add collateral. But old users can withdraw supply or repay borrow. So we can set new rates (VTL rate, bonus rate, \u2026) for them.", "body": "Removing a market o collateral in the Holdefi means that nobody can supply or borrow or add collateral. But old users can withdraw supply or repay borrow. So we can set new rates (VTL rate, bonus rate, \u2026) for them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#removing-a-market-o-collateral-in-the-holdefi-means-that-nobody-can-supply-or-borrow-or-add-collateral.-but-old-users-can-withdraw-supply-or-repay-borrow.-so-we-can-set-new-rates-(vtl-rate,-bonus-rate,-\u2026)-for-them.", "labels": ["OpenZeppelin"]}, {"title": "[L03] Borrowers are allowed to operatate after the maximum period has passed", "body": "[L03] Borrowers are allowed to operatate after the maximum period has passed", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l03]-borrowers-are-allowed-to-operatate-after-the-maximum-period-has-passed", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi contract establishes a maximum period of time in which a borrower can be sure that his assets will not be liquidated. This period is defined as the number of seconds in a regular year.", "body": "The Holdefi contract establishes a maximum period of time in which a borrower can be sure that his assets will not be liquidated. This period is defined as the number of seconds in a regular year.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi-contract-establishes-a-maximum-period-of-time-in-which-a-borrower-can-be-sure-that-his-assets-will-not-be-liquidated.-this-period-is-defined-as-the-number-of-seconds-in-a-regular-year.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, this restriction is not being applied on all the functions, and it is only used as a limit in the liquidateBorrowerCollateral. This could lead into a hypothetical scenario where a borrower could continue with his borrowing for a period greater than that year in the case where there are no liquidators performing their liquidation duty.", "body": "Nevertheless, this restriction is not being applied on all the functions, and it is only used as a limit in the liquidateBorrowerCollateral. This could lead into a hypothetical scenario where a borrower could continue with his borrowing for a period greater than that year in the case where there are no liquidators performing their liquidation duty.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-this-restriction-is-not-being-applied-on-all-the-functions,-and-it-is-only-used-as-a-limit-in-the-liquidateborrowercollateral.-this-could-lead-into-a-hypothetical-scenario-where-a-borrower-could-continue-with-his-borrowing-for-a-period-greater-than-that-year-in-the-case-where-there-are-no-liquidators-performing-their-liquidation-duty.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, a borrower in such condition who has an account which has been a whole year without activity could frontrun a liquidator when the transaction that calls the liquidateBorrowerCollateral function enters into the mempool, maximizing the period of time for his position beyond the established limit.", "body": "Additionally, a borrower in such condition who has an account which has been a whole year without activity could frontrun a liquidator when the transaction that calls the liquidateBorrowerCollateral function enters into the mempool, maximizing the period of time for his position beyond the established limit.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#additionally,-a-borrower-in-such-condition-who-has-an-account-which-has-been-a-whole-year-without-activity-could-frontrun-a-liquidator-when-the-transaction-that-calls-the-liquidateborrowercollateral-function-enters-into-the-mempool,-maximizing-the-period-of-time-for-his-position-beyond-the-established-limit.", "labels": ["OpenZeppelin"]}, {"title": "Consider adding requirements in all functions related to the financial aspect of the contract to restrict the borrower\u2019s actions after the maximum period of time has been achieved instead of relying on the liquidators\u2019 actions only.", "body": "Consider adding requirements in all functions related to the financial aspect of the contract to restrict the borrower\u2019s actions after the maximum period of time has been achieved instead of relying on the liquidators\u2019 actions only.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-adding-requirements-in-all-functions-related-to-the-financial-aspect-of-the-contract-to-restrict-the-borrower\u2019s-actions-after-the-maximum-period-of-time-has-been-achieved-instead-of-relying-on-the-liquidators\u2019-actions-only.", "labels": ["OpenZeppelin"]}, {"title": "Alternatively, if there is a good reason for this design consider documenting it in the docstrings of the affected functions.", "body": "Alternatively, if there is a good reason for this design consider documenting it in the docstrings of the affected functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#alternatively,-if-there-is-a-good-reason-for-this-design-consider-documenting-it-in-the-docstrings-of-the-affected-functions.", "labels": ["OpenZeppelin"]}, {"title": "In this case, there is no problem that borrowers are allowed to operatate just after the maximum period has passed. His/her account will be liquidated in the first transaction after this period. The reason that we added this time is that if the borrower dies or loses his/her wallet or any other reason that can not get his/her debt back into the platform, suppliers be sure that their tokens will be back. There is no problem if borrower is alive and can perform any action with Holdefi contract after one year.", "body": "In this case, there is no problem that borrowers are allowed to operatate just after the maximum period has passed. His/her account will be liquidated in the first transaction after this period. The reason that we added this time is that if the borrower dies or loses his/her wallet or any other reason that can not get his/her debt back into the platform, suppliers be sure that their tokens will be back. There is no problem if borrower is alive and can perform any action with Holdefi contract after one year.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-this-case,-there-is-no-problem-that-borrowers-are-allowed-to-operatate-just-after-the-maximum-period-has-passed.-his/her-account-will-be-liquidated-in-the-first-transaction-after-this-period.-the-reason-that-we-added-this-time-is-that-if-the-borrower-dies-or-loses-his/her-wallet-or-any-other-reason-that-can-not-get-his/her-debt-back-into-the-platform,-suppliers-be-sure-that-their-tokens-will-be-back.-there-is-no-problem-if-borrower-is-alive-and-can-perform-any-action-with-holdefi-contract-after-one-year.", "labels": ["OpenZeppelin"]}, {"title": "[L04] OwnerChanger cannot renounce its role", "body": "[L04] OwnerChanger cannot renounce its role", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l04]-ownerchanger-cannot-renounce-its-role", "labels": ["OpenZeppelin"]}, {"title": "The role management scheme implemented in the Ownable contract does not include a way for the ownerChanger to renounce the role they have been granted. This might become problematic in a scenario where the account wishes to renounce the role after the trusted device holding the private keys has been compromised.", "body": "The role management scheme implemented in the Ownable contract does not include a way for the ownerChanger to renounce the role they have been granted. This might become problematic in a scenario where the account wishes to renounce the role after the trusted device holding the private keys has been compromised.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-role-management-scheme-implemented-in-the-ownable-contract-does-not-include-a-way-for-the-ownerchanger-to-renounce-the-role-they-have-been-granted.-this-might-become-problematic-in-a-scenario-where-the-account-wishes-to-renounce-the-role-after-the-trusted-device-holding-the-private-keys-has-been-compromised.", "labels": ["OpenZeppelin"]}, {"title": "the current owner may want to transfer its ownership with", "body": "the current owner may want to transfer its ownership with", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-current-owner-may-want-to-transfer-its-ownership-with", "labels": ["OpenZeppelin"]}, {"title": "the transferOwnership function, the", "body": "the transferOwnership function, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-transferownership-function,-the", "labels": ["OpenZeppelin"]}, {"title": "the acceptTransferOwnership function, and as the", "body": "the acceptTransferOwnership function, and as the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-accepttransferownership-function,-and-as-the", "labels": ["OpenZeppelin"]}, {"title": "Consider using multisig accounts for both roles to prevent that one of them becomes compromised, and adding the option to renounce the ownerChanger role if needed.", "body": "Consider using multisig accounts for both roles to prevent that one of them becomes compromised, and adding the option to renounce the ownerChanger role if needed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-using-multisig-accounts-for-both-roles-to-prevent-that-one-of-them-becomes-compromised,-and-adding-the-option-to-renounce-the-ownerchanger-role-if-needed.", "labels": ["OpenZeppelin"]}, {"title": "[L05] Pauser accounts can reset the pause period indefinitely", "body": "[L05] Pauser accounts can reset the pause period indefinitely", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l05]-pauser-accounts-can-reset-the-pause-period-indefinitely", "labels": ["OpenZeppelin"]}, {"title": "The HoldefiPauser contract implements a pausable functionality for certain cases. Each one of them are assigned to a specific index. Then, the timestamp of when a pause action has been triggered for a specific case is tracked in the paused array by using its index.", "body": "The HoldefiPauser contract implements a pausable functionality for certain cases. Each one of them are assigned to a specific index. Then, the timestamp of when a pause action has been triggered for a specific case is tracked in the paused array by using its index.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefipauser-contract-implements-a-pausable-functionality-for-certain-cases.-each-one-of-them-are-assigned-to-a-specific-index.-then,-the-timestamp-of-when-a-pause-action-has-been-triggered-for-a-specific-case-is-tracked-in-the-paused-array-by-using-its-index.", "labels": ["OpenZeppelin"]}, {"title": "This feature provides child contracts with a system overhaul in cases that an unexpected event occurs and part of the code needs to be stopped. This feature can only be called by the owner or the pauser, but on the other hand, the unpause function can only be called by the owner.", "body": "This feature provides child contracts with a system overhaul in cases that an unexpected event occurs and part of the code needs to be stopped. This feature can only be called by the owner or the pauser, but on the other hand, the unpause function can only be called by the owner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-feature-provides-child-contracts-with-a-system-overhaul-in-cases-that-an-unexpected-event-occurs-and-part-of-the-code-needs-to-be-stopped.-this-feature-can-only-be-called-by-the-owner-or-the-pauser,-but-on-the-other-hand,-the-unpause-function-can-only-be-called-by-the-owner.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, if a particular functionality has been paused, in which a pauseDuration should be waited to have the paused functionality back, the pauser can re-call the pause function and reset the timer for that functionality, being possible to extend indefinitely the paused period. If this duality of having a bounded period that can be extended is the intended, the same could be implemented with a better design using a flag variable instead of a timestamp variable.", "body": "Nevertheless, if a particular functionality has been paused, in which a pauseDuration should be waited to have the paused functionality back, the pauser can re-call the pause function and reset the timer for that functionality, being possible to extend indefinitely the paused period. If this duality of having a bounded period that can be extended is the intended, the same could be implemented with a better design using a flag variable instead of a timestamp variable.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-if-a-particular-functionality-has-been-paused,-in-which-a-pauseduration-should-be-waited-to-have-the-paused-functionality-back,-the-pauser-can-re-call-the-pause-function-and-reset-the-timer-for-that-functionality,-being-possible-to-extend-indefinitely-the-paused-period.-if-this-duality-of-having-a-bounded-period-that-can-be-extended-is-the-intended,-the-same-could-be-implemented-with-a-better-design-using-a-flag-variable-instead-of-a-timestamp-variable.", "labels": ["OpenZeppelin"]}, {"title": "Consider modifying the functionality to prevent multiple resets of the pause period by the pausers accounts, or documenting this if it is the expected behavior.", "body": "Consider modifying the functionality to prevent multiple resets of the pause period by the pausers accounts, or documenting this if it is the expected behavior.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-modifying-the-functionality-to-prevent-multiple-resets-of-the-pause-period-by-the-pausers-accounts,-or-documenting-this-if-it-is-the-expected-behavior.", "labels": ["OpenZeppelin"]}, {"title": "[L06] Parameter\u2019s time-off periods are uneven", "body": "[L06] Parameter\u2019s time-off periods are uneven", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l06]-parameter\u2019s-time-off-periods-are-uneven", "labels": ["OpenZeppelin"]}, {"title": "HoldefiSettings contract uses", "body": "HoldefiSettings contract uses", "html_url": "https://blog.openzeppelin.com/holdefi-audit#holdefisettings-contract-uses", "labels": ["OpenZeppelin"]}, {"title": "a 10-day time-off period to prevent the owner to perform actions such as an increase in", "body": "a 10-day time-off period to prevent the owner to perform actions such as an increase in", "html_url": "https://blog.openzeppelin.com/holdefi-audit#a-10-day-time-off-period-to-prevent-the-owner-to-perform-actions-such-as-an-increase-in", "labels": ["OpenZeppelin"]}, {"title": "the borrowRate,", "body": "the borrowRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-borrowrate,", "labels": ["OpenZeppelin"]}, {"title": "the suppliersShareRate,", "body": "the suppliersShareRate,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-supplierssharerate,", "labels": ["OpenZeppelin"]}, {"title": "the valueToLoanRate, and", "body": "the valueToLoanRate, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-valuetoloanrate,-and", "labels": ["OpenZeppelin"]}, {"title": "the penaltyRate.", "body": "the penaltyRate.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-penaltyrate.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, if the owner accidentally changes one of these values and sets up a lower value by mistake, a 10-day time-off period will have to be awaited before the parameters can be corrected, possibly affecting the finances of the platform in a drastic manner.", "body": "Nevertheless, if the owner accidentally changes one of these values and sets up a lower value by mistake, a 10-day time-off period will have to be awaited before the parameters can be corrected, possibly affecting the finances of the platform in a drastic manner.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-if-the-owner-accidentally-changes-one-of-these-values-and-sets-up-a-lower-value-by-mistake,-a-10-day-time-off-period-will-have-to-be-awaited-before-the-parameters-can-be-corrected,-possibly-affecting-the-finances-of-the-platform-in-a-drastic-manner.", "labels": ["OpenZeppelin"]}, {"title": "In addition to this, the awaiting period cannot be changed even by the owner. This means that once the platform is launched, if this period is too high, it will not allow the platform to compensate the dynamics of the market quickly enough.", "body": "In addition to this, the awaiting period cannot be changed even by the owner. This means that once the platform is launched, if this period is too high, it will not allow the platform to compensate the dynamics of the market quickly enough.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-addition-to-this,-the-awaiting-period-cannot-be-changed-even-by-the-owner.-this-means-that-once-the-platform-is-launched,-if-this-period-is-too-high,-it-will-not-allow-the-platform-to-compensate-the-dynamics-of-the-market-quickly-enough.", "labels": ["OpenZeppelin"]}, {"title": "Consider simulating and documenting the selection of these unchangeable values, and taking extra caution before updating these parameters.", "body": "Consider simulating and documenting the selection of these unchangeable values, and taking extra caution before updating these parameters.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-simulating-and-documenting-the-selection-of-these-unchangeable-values,-and-taking-extra-caution-before-updating-these-parameters.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s not a bug. It\u2019s just a suggestion and a warning. We have to be careful about setting these parameters. But these parameters must exist for users to trust us and prove to them that we can\u2019t manipulate the platform.", "body": "It\u2019s not a bug. It\u2019s just a suggestion and a warning. We have to be careful about setting these parameters. But these parameters must exist for users to trust us and prove to them that we can\u2019t manipulate the platform.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it\u2019s-not-a-bug.-it\u2019s-just-a-suggestion-and-a-warning.-we-have-to-be-careful-about-setting-these-parameters.-but-these-parameters-must-exist-for-users-to-trust-us-and-prove-to-them-that-we-can\u2019t-manipulate-the-platform.", "labels": ["OpenZeppelin"]}, {"title": "[L07] Unneeded public visibility in some functions", "body": "[L07] Unneeded public visibility in some functions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l07]-unneeded-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi codebase, there are situations in which functions have a public visibility although those are not called by any other function from the same contract. Some of them are:", "body": "In the Holdefi codebase, there are situations in which functions have a public visibility although those are not called by any other function from the same contract. Some of them are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-codebase,-there-are-situations-in-which-functions-have-a-public-visibility-although-those-are-not-called-by-any-other-function-from-the-same-contract.-some-of-them-are:", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPrices contract, the addStableCoin function", "body": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions  In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter  To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.  [L08] Overcomplicated return values  Throughout the projects codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:  The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.  The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.  Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.  Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.  [L09] Lack of indexed parameters in events  Throughout the Holdefis codebase, none of the parameters in the events defined in the contracts are indexed.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  [L10] Lack of input validation  Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:  The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.  The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.  The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.  Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.  [L11] Semantic overload  Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:  In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.  Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.  In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the arrays getter.  This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.  Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.  Update: Not fixed. Holdefis statement for this issue:  You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didnt explain that what is the issue.  We have updated our suggestion to make it clearer.  [L12] Default variable declaration values are used during calculations  In the codebase of the project, there are several places in which the returned var", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefiprices-contract,-the-addstablecoin-function", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions", "body": "In the HoldefiPauser contract, the batchPause and the batchUnpause functions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefipauser-contract,-the-batchpause-and-the-batchunpause-functions", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter", "body": "In the HoldefiSettings contract, the getMarket function. This function returns true if a certain market is whitelisted, but this information can be known by using the marketAssets getter", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract,-the-getmarket-function.-this-function-returns-true-if-a-certain-market-is-whitelisted,-but-this-information-can-be-known-by-using-the-marketassets-getter", "labels": ["OpenZeppelin"]}, {"title": "To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.", "body": "To favor readability and to reduce the attack surface, consider reducing the visibility of these functions and any similar case to external, and consider reducing the visibility of the marketAssets variable if the getMarket function is not removed from the codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-readability-and-to-reduce-the-attack-surface,-consider-reducing-the-visibility-of-these-functions-and-any-similar-case-to-external,-and-consider-reducing-the-visibility-of-the-marketassets-variable-if-the-getmarket-function-is-not-removed-from-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[L08] Overcomplicated return values", "body": "Throughout the projects codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:  The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.  The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.  Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.  Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.  [L09] Lack of indexed parameters in events  Throughout the Holdefis codebase, none of the parameters in the events defined in the contracts are indexed.  Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.  [L10] Lack of input validation  Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:  The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.  The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.  The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.  Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.  [L11] Semantic overload  Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:  In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.  Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.  In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the arrays getter.  This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.  Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.  Update: Not fixed. Holdefis statement for this issue:  You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didnt explain that what is the issue.  We have updated our suggestion to make it clearer.  [L12] Default variable declaration values are used during calculations  In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the functions body, as addressed in the issue [N06] Named return variables, but also there are places where the local variable is not assigned with an initial value.  Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.  In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueSca", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l08]-overcomplicated-return-values", "labels": ["OpenZeppelin"]}, {"title": "Throughout the project\u2019s codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:", "body": "Throughout the project\u2019s codebase, functions that return several variables are implemented, but when calling these functions, only a few or just one return parameter is used.Some examples are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-project\u2019s-codebase,-functions-that-return-several-variables-are-implemented,-but-when-calling-these-functions,-only-a-few-or-just-one-return-parameter-is-used.some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.", "body": "The getCollateral function in the HoldefiSettings contract returns the isActive, valueToLoanRate, penaltyRate, and bonusRate attributes, but when this function is called in the Holdefi contract, only one of these variables is accessed, such as in the collateralize, withdrawCollateral, and borrow functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcollateral-function-in-the-holdefisettings-contract-returns-the-isactive,-valuetoloanrate,-penaltyrate,-and-bonusrate-attributes,-but-when-this-function-is-called-in-the-holdefi-contract,-only-one-of-these-variables-is-accessed,-such-as-in-the-collateralize,-withdrawcollateral,-and-borrow-functions.", "labels": ["OpenZeppelin"]}, {"title": "The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.", "body": "The getCurrentInterestIndex function in Holdefi contract returns the supplyIndex, supplyRate, borrowIndex, borrowRate, and currentTime attributes, but only a few of these variables are being accessed, such as in the updateSupplyIndex and updateBorrowIndex functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-getcurrentinterestindex-function-in-holdefi-contract-returns-the-supplyindex,-supplyrate,-borrowindex,-borrowrate,-and-currenttime-attributes,-but-only-a-few-of-these-variables-are-being-accessed,-such-as-in-the-updatesupplyindex-and-updateborrowindex-functions.", "labels": ["OpenZeppelin"]}, {"title": "Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.", "body": "Even though this does not pose a security risk, it is very difficult to understand which variables are being accessed when calling a function without checking its signature. Additionally, returning big data structures will increase the gas costs, leading to higher prices when executing transactions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-this-does-not-pose-a-security-risk,-it-is-very-difficult-to-understand-which-variables-are-being-accessed-when-calling-a-function-without-checking-its-signature.-additionally,-returning-big-data-structures-will-increase-the-gas-costs,-leading-to-higher-prices-when-executing-transactions.", "labels": ["OpenZeppelin"]}, {"title": "Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.", "body": "Consider identifying all the functions that follow this pattern and modularize them into smaller ones that return at most one variable each.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-identifying-all-the-functions-that-follow-this-pattern-and-modularize-them-into-smaller-ones-that-return-at-most-one-variable-each.", "labels": ["OpenZeppelin"]}, {"title": "[L09] Lack of indexed parameters in events", "body": "[L09] Lack of indexed parameters in events", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l09]-lack-of-indexed-parameters-in-events", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi\u2019s codebase, none of the parameters in the events defined in the contracts are indexed.", "body": "Throughout the Holdefi\u2019s codebase, none of the parameters in the events defined in the contracts are indexed.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi\u2019s-codebase,-none-of-the-parameters-in-the-events-defined-in-the-contracts-are-indexed.", "labels": ["OpenZeppelin"]}, {"title": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "body": "Consider indexing event parameters to avoid hindering the task of off-chain services searching and filtering for specific events.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-indexing-event-parameters-to-avoid-hindering-the-task-of-off-chain-services-searching-and-filtering-for-specific-events.", "labels": ["OpenZeppelin"]}, {"title": "[L10] Lack of input validation", "body": "[L10] Lack of input validation", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l10]-lack-of-input-validation", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:", "body": "Throughout the codebase, there are certain functions and calculations that do not perform validation checks to ensure the validity of the inputs. Some of them are the following ones:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-codebase,-there-are-certain-functions-and-calculations-that-do-not-perform-validation-checks-to-ensure-the-validity-of-the-inputs.-some-of-them-are-the-following-ones:", "labels": ["OpenZeppelin"]}, {"title": "The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.", "body": "The withdraw function in the CollateralsWallet contract does not check that the recipient is not the zero address.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-withdraw-function-in-the-collateralswallet-contract-does-not-check-that-the-recipient-is-not-the-zero-address.", "labels": ["OpenZeppelin"]}, {"title": "The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.", "body": "The setPrice function in the HoldefiPrices contract does not check whether the newPrice is the same as the old price, triggering an event without any new relevant information.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-setprice-function-in-the-holdefiprices-contract-does-not-check-whether-the-newprice-is-the-same-as-the-old-price,-triggering-an-event-without-any-new-relevant-information.", "labels": ["OpenZeppelin"]}, {"title": "The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.", "body": "The setPauseDuration function in the HoldefiPauser contract does not check the newPauseDuration parameter, which could be zero or a very long period of time, possibly locking important functions of the Holdefi system.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-setpauseduration-function-in-the-holdefipauser-contract-does-not-check-the-newpauseduration-parameter,-which-could-be-zero-or-a-very-long-period-of-time,-possibly-locking-important-functions-of-the-holdefi-system.", "labels": ["OpenZeppelin"]}, {"title": "Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.", "body": "Even though this issue does not pose a security risk, the lack of validation on user-controlled parameters may result in erroneous transactions considering that some clients or owners may default to sending null parameters if none are specified. Consider always adding validation checks to ensure that the parameters are always in the expected range of values.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-this-issue-does-not-pose-a-security-risk,-the-lack-of-validation-on-user-controlled-parameters-may-result-in-erroneous-transactions-considering-that-some-clients-or-owners-may-default-to-sending-null-parameters-if-none-are-specified.-consider-always-adding-validation-checks-to-ensure-that-the-parameters-are-always-in-the-expected-range-of-values.", "labels": ["OpenZeppelin"]}, {"title": "[L11] Semantic overload", "body": "[L11] Semantic overload", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l11]-semantic-overload", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:", "body": "Throughout the codebase, there are cases in which a single variable has two purposes, and, based on which its value is, the code can perform differently. For example:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-codebase,-there-are-cases-in-which-a-single-variable-has-two-purposes,-and,-based-on-which-its-value-is,-the-code-can-perform-differently.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.", "body": "In the HoldefiSettings contract, the properties of a market or collateral are stored inside structs. These structs have a flag called isActive which is raised when a market or collateral is added to the whitelist, and flagged down when the same asset is removed from the whitelist.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefisettings-contract,-the-properties-of-a-market-or-collateral-are-stored-inside-structs.-these-structs-have-a-flag-called-isactive-which-is-raised-when-a-market-or-collateral-is-added-to-the-whitelist,-and-flagged-down-when-the-same-asset-is-removed-from-the-whitelist.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.", "body": "Nevertheless, because the parameters of the assets are not erased after the removeMarket function is called, the isActive variable is used to check not only if the market exists but also if the market is active. The same analogous problem occurs with the collateral and its respective functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-because-the-parameters-of-the-assets-are-not-erased-after-the-removemarket-function-is-called,-the-isactive-variable-is-used-to-check-not-only-if-the-market-exists-but-also-if-the-market-is-active.-the-same-analogous-problem-occurs-with-the-collateral-and-its-respective-functions.", "labels": ["OpenZeppelin"]}, {"title": "In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the array\u2019s getter.", "body": "In the HoldefiPauser contract, an array to keep track of the timestamps of the moment in which the pause function for each functionality was triggered is used, but also this array is used as a flag to know when the functionality is unpaused by checking the array\u2019s getter.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefipauser-contract,-an-array-to-keep-track-of-the-timestamps-of-the-moment-in-which-the-pause-function-for-each-functionality-was-triggered-is-used,-but-also-this-array-is-used-as-a-flag-to-know-when-the-functionality-is-unpaused-by-checking-the-array\u2019s-getter.", "labels": ["OpenZeppelin"]}, {"title": "This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.", "body": "This is known as Semantic Overload. If the multiple meanings of the variables and states are not totally clear when making changes to the code, it can introduce severe vulnerabilities. We strongly discourage its usage if possible.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#this-is-known-as-semantic-overload.-if-the-multiple-meanings-of-the-variables-and-states-are-not-totally-clear-when-making-changes-to-the-code,-it-can-introduce-severe-vulnerabilities.-we-strongly-discourage-its-usage-if-possible.", "labels": ["OpenZeppelin"]}, {"title": "Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.", "body": "Consider explicitly setting independent flags to represent the state of the markets and collaterals instead of using the same variable for different purposes.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-explicitly-setting-independent-flags-to-represent-the-state-of-the-markets-and-collaterals-instead-of-using-the-same-variable-for-different-purposes.", "labels": ["OpenZeppelin"]}, {"title": "You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didn\u2019t explain that what is the issue.", "body": "You said that this is Semantic Overload and it may cause issues when it is not used properly, but you didn\u2019t explain that what is the issue.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#you-said-that-this-is-semantic-overload-and-it-may-cause-issues-when-it-is-not-used-properly,-but-you-didn\u2019t-explain-that-what-is-the-issue.", "labels": ["OpenZeppelin"]}, {"title": "[L12] Default variable declaration values are used during calculations", "body": "[L12] Default variable declaration values are used during calculations", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l12]-default-variable-declaration-values-are-used-during-calculations", "labels": ["OpenZeppelin"]}, {"title": "In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the function\u2019s body, as addressed in the issue \u201c[N06] Named return variables\u201d, but also there are places where the local variable is not assigned with an initial value.", "body": "In the codebase of the project, there are several places in which the returned variable is declared in the function definition without the explicit return instruction within the function\u2019s body, as addressed in the issue \u201c[N06] Named return variables\u201d, but also there are places where the local variable is not assigned with an initial value.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-codebase-of-the-project,-there-are-several-places-in-which-the-returned-variable-is-declared-in-the-function-definition-without-the-explicit-return-instruction-within-the-function\u2019s-body,-as-addressed-in-the-issue-\u201c[n06]-named-return-variables\u201d,-but-also-there-are-places-where-the-local-variable-is-not-assigned-with-an-initial-value.", "labels": ["OpenZeppelin"]}, {"title": "Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.", "body": "Usually, this does not bring problems because the default value of a variable would be overwritten by another one during the code execution, but in other cases, depending on how this variable is used, an issue may appear.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#usually,-this-does-not-bring-problems-because-the-default-value-of-a-variable-would-be-overwritten-by-another-one-during-the-code-execution,-but-in-other-cases,-depending-on-how-this-variable-is-used,-an-issue-may-appear.", "labels": ["OpenZeppelin"]}, {"title": "In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the function\u2019s return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.", "body": "In the getAccountTotalBorrowValue function from the Holdefi contract, totalBorrowValueScaled is declared to represent the function\u2019s return value. This variable is then used in a for loop to accumulate the value of all borrows from a particular account, but during the first iteration, the default value of this variable is used for the calculation.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-getaccounttotalborrowvalue-function-from-the-holdefi-contract,-totalborrowvaluescaled-is-declared-to-represent-the-function\u2019s-return-value.-this-variable-is-then-used-in-a-for-loop-to-accumulate-the-value-of-all-borrows-from-a-particular-account,-but-during-the-first-iteration,-the-default-value-of-this-variable-is-used-for-the-calculation.", "labels": ["OpenZeppelin"]}, {"title": "Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.", "body": "Similar cases can also be found in the totalDebt, assetPrice, and assetValueScaled variables from the getAccountTotalBorrowValue function, and in many other functions.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#similar-cases-can-also-be-found-in-the-totaldebt,-assetprice,-and-assetvaluescaled-variables-from-the-getaccounttotalborrowvalue-function,-and-in-many-other-functions.", "labels": ["OpenZeppelin"]}, {"title": "Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.", "body": "Although it does not represent a problem in the current scenario, consider always declaring variables with an initial value to reduce the attack surface.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-it-does-not-represent-a-problem-in-the-current-scenario,-consider-always-declaring-variables-with-an-initial-value-to-reduce-the-attack-surface.", "labels": ["OpenZeppelin"]}, {"title": "[L13] Use of magic constants", "body": "[L13] Use of magic constants", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l13]-use-of-magic-constants", "labels": ["OpenZeppelin"]}, {"title": "There are several occurrences of magic constants in Holdefi\u2019s codebase. Some examples are:", "body": "There are several occurrences of magic constants in Holdefi\u2019s codebase. Some examples are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#there-are-several-occurrences-of-magic-constants-in-holdefi\u2019s-codebase.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "Line 617, the", "body": "Line 617, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-617,-the", "labels": ["OpenZeppelin"]}, {"title": "Line 655, the", "body": "Line 655, the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-655,-the", "labels": ["OpenZeppelin"]}, {"title": "161,", "body": "161,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#161,", "labels": ["OpenZeppelin"]}, {"title": "174,", "body": "174,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#174,", "labels": ["OpenZeppelin"]}, {"title": "234,", "body": "234,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#234,", "labels": ["OpenZeppelin"]}, {"title": "248,", "body": "248,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#248,", "labels": ["OpenZeppelin"]}, {"title": "261,", "body": "261,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#261,", "labels": ["OpenZeppelin"]}, {"title": "298,", "body": "359,  382,  429,  464, and  481 when calling the  Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.  In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.  Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the codes maintenance.  [L14] Tests not passing successfully  The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.  Although the test suite was left outside of the audits scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.  Update: Not fixed. Holdefis statement on this issue:  These fails are because of very little time difference, and its not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.  [L15] README file is empty  The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.  Consider following Standard Readme to define the structure and contents for the README file.  Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.  Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.  Update: Not fixed. Holdefis statement for this issue:  Its not a bug as well. We will add information in the readme file of course.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Notes & Additional Information  [N01] Variables declared as uint instead of uint256  To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.  [N02] Repeated access control in the code  The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contracts address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.  Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.  Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.  [N03] Not following the Checks-Effects-Interactions pattern  Throughout the projects codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.  Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.  Update: Not fixed. Holdefis statement for this issue:  We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be up", "html_url": "https://blog.openzeppelin.com/holdefi-audit#298,", "labels": ["OpenZeppelin"]}, {"title": "359,", "body": "359,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#359,", "labels": ["OpenZeppelin"]}, {"title": "382,", "body": "382,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#382,", "labels": ["OpenZeppelin"]}, {"title": "429,", "body": "429,", "html_url": "https://blog.openzeppelin.com/holdefi-audit#429,", "labels": ["OpenZeppelin"]}, {"title": "464, and", "body": "464, and", "html_url": "https://blog.openzeppelin.com/holdefi-audit#464,-and", "labels": ["OpenZeppelin"]}, {"title": "481 when calling the", "body": "481 when calling the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#481-when-calling-the", "labels": ["OpenZeppelin"]}, {"title": "Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.", "body": "Even though the meaning of some of this constants are mentioned as comments in the HoldefiPauser contract, there is no reference of them in the contract where the wheNotPaused modifier is being used, which makes the code harder to understand and maintain.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#even-though-the-meaning-of-some-of-this-constants-are-mentioned-as-comments-in-the-holdefipauser-contract,-there-is-no-reference-of-them-in-the-contract-where-the-whenotpaused-modifier-is-being-used,-which-makes-the-code-harder-to-understand-and-maintain.", "labels": ["OpenZeppelin"]}, {"title": "In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.", "body": "In addition to this, the references in the comments mentioned above are not consistent with the list of function codes for pausing operations in the specification, where the operation 3 is being skipped in the whitepaper.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-addition-to-this,-the-references-in-the-comments-mentioned-above-are-not-consistent-with-the-list-of-function-codes-for-pausing-operations-in-the-specification,-where-the-operation-3-is-being-skipped-in-the-whitepaper.", "labels": ["OpenZeppelin"]}, {"title": "Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the code\u2019s maintenance.", "body": "Consider defining a constant variable for every magic constant (including booleans) in the contract where they are used, giving it a clear and self-explanatory name. For complex values, consider adding an inline comment explaining how they were calculated or why they were chosen. All of this will allow a better readability, easing the code\u2019s maintenance.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-defining-a-constant-variable-for-every-magic-constant-(including-booleans)-in-the-contract-where-they-are-used,-giving-it-a-clear-and-self-explanatory-name.-for-complex-values,-consider-adding-an-inline-comment-explaining-how-they-were-calculated-or-why-they-were-chosen.-all-of-this-will-allow-a-better-readability,-easing-the-code\u2019s-maintenance.", "labels": ["OpenZeppelin"]}, {"title": "[L14] Tests not passing successfully", "body": "[L14] Tests not passing successfully", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l14]-tests-not-passing-successfully", "labels": ["OpenZeppelin"]}, {"title": "The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.", "body": "The testing suite finishes with three failing tests, two on the AdminFunctionTests.js file and one on the OwnableTests.js file.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-testing-suite-finishes-with-three-failing-tests,-two-on-the-adminfunctiontests.js-file-and-one-on-the-ownabletests.js-file.", "labels": ["OpenZeppelin"]}, {"title": "Although the test suite was left outside of the audit\u2019s scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.", "body": "Although the test suite was left outside of the audit\u2019s scope, please consider thoroughly reviewing the test suite to make sure all tests run successfully. Furthermore, it is advisable to only merge code that neither breaks the existing tests nor decreases coverage.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-the-test-suite-was-left-outside-of-the-audit\u2019s-scope,-please-consider-thoroughly-reviewing-the-test-suite-to-make-sure-all-tests-run-successfully.-furthermore,-it-is-advisable-to-only-merge-code-that-neither-breaks-the-existing-tests-nor-decreases-coverage.", "labels": ["OpenZeppelin"]}, {"title": "Update: Not fixed. Holdefi\u2019s statement on this issue:", "body": "Update: Not fixed. Holdefi\u2019s statement on this issue:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#update:-not-fixed.-holdefi\u2019s-statement-on-this-issue:", "labels": ["OpenZeppelin"]}, {"title": "These fails are because of very little time difference, and it\u2019s not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.", "body": "These fails are because of very little time difference, and it\u2019s not a bug. This will be pass if you rerun it. Some of our calculations are based on timestamp and because of problem with exactly syncing with blockchain (local, testnet or mainnet), sometimes some tests will fail because of minor differences.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#these-fails-are-because-of-very-little-time-difference,-and-it\u2019s-not-a-bug.-this-will-be-pass-if-you-rerun-it.-some-of-our-calculations-are-based-on-timestamp-and-because-of-problem-with-exactly-syncing-with-blockchain-(local,-testnet-or-mainnet),-sometimes-some-tests-will-fail-because-of-minor-differences.", "labels": ["OpenZeppelin"]}, {"title": "[L15] README file is empty", "body": "[L15] README file is empty", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[l15]-readme-file-is-empty", "labels": ["OpenZeppelin"]}, {"title": "The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.", "body": "The README.md of the Holdefi project has no information about what is the purpose of the project nor how to use it. README files on the root of git repositories are the first documents that most developers often read, so those should be complete, clear, concise, and accurate.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-readme.md-of-the-holdefi-project-has-no-information-about-what-is-the-purpose-of-the-project-nor-how-to-use-it.-readme-files-on-the-root-of-git-repositories-are-the-first-documents-that-most-developers-often-read,-so-those-should-be-complete,-clear,-concise,-and-accurate.", "labels": ["OpenZeppelin"]}, {"title": "Consider following Standard Readme to define the structure and contents for the README file.", "body": "Consider following Standard Readme to define the structure and contents for the README file.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-following-standard-readme-to-define-the-structure-and-contents-for-the-readme-file.", "labels": ["OpenZeppelin"]}, {"title": "Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "body": "Also, consider including an explanation of the core concepts of the repository, the usage workflows, the public APIs, instructions to test and deploy it, and how the code relates to other key components of the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#also,-consider-including-an-explanation-of-the-core-concepts-of-the-repository,-the-usage-workflows,-the-public-apis,-instructions-to-test-and-deploy-it,-and-how-the-code-relates-to-other-key-components-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "body": "Furthermore, it is highly advisable to include instructions for the responsible disclosure of any security vulnerabilities found in the project.Consider adding a method for secure and encrypted communication with the team, like an email address with its GPG key.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#furthermore,-it-is-highly-advisable-to-include-instructions-for-the-responsible-disclosure-of-any-security-vulnerabilities-found-in-the-project.consider-adding-a-method-for-secure-and-encrypted-communication-with-the-team,-like-an-email-address-with-its-gpg-key.", "labels": ["OpenZeppelin"]}, {"title": "It\u2019s not a bug as well. We will add information in the readme file of course.", "body": "It\u2019s not a bug as well. We will add information in the readme file of course.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it\u2019s-not-a-bug-as-well.-we-will-add-information-in-the-readme-file-of-course.", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbWVkaXVtJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM25vdGVzJTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRW5leHQlMjAlM0UlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizbwvkaxvtjtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrsuzqyuymfbyzxzpb3vzjtndjtjgysuzrsuzqyuyrmj1dhrvbiuzrsuwqsuwqsuzq2j1dhrvbiuymg9uy2xpy2slm0qlmjjjdxn0b21zy3jvbgwlmjglmjklmjilm0ulm0nhjtiwahjlziuzrcuymiuym25vdgvzjtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrw5lehqlmjalm0ulm0mlmkzhjtnfjtndjtjgynv0dg9ujtnfjtbbjtbbjtndjtjgzgl2jtnf", "labels": ["OpenZeppelin"]}, {"title": "[N01] Variables declared as uint instead of uint256", "body": "[N01] Variables declared as uint instead of uint256", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n01]-variables-declared-as-uint-instead-of-uint256", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.", "body": "To favor explicitness, consider changing all instances of uint into uint256 in the entire codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-explicitness,-consider-changing-all-instances-of-uint-into-uint256-in-the-entire-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Repeated access control in the code", "body": "[N02] Repeated access control in the code", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n02]-repeated-access-control-in-the-code", "labels": ["OpenZeppelin"]}, {"title": "The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contract\u2019s address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.", "body": "The CollateralsWallet contract is used to store the collateral assets of the project and it implements a function to set the Holdefi contract\u2019s address, a function to withdraw the collateral, and a payable fallback function that allows deposits of ETH into the contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-collateralswallet-contract-is-used-to-store-the-collateral-assets-of-the-project-and-it-implements-a-function-to-set-the-holdefi-contract\u2019s-address,-a-function-to-withdraw-the-collateral,-and-a-payable-fallback-function-that-allows-deposits-of-eth-into-the-contract.", "labels": ["OpenZeppelin"]}, {"title": "Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.", "body": "Except from the first mentioned function which can only be called once, both the withdraw and the fallback functions check whether the caller is the Holdefi contract or not. This functionality could be factorized into a onlyHoldefi modifier as it is done in the Ownable contract instead of implementing the require statement in each function.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#except-from-the-first-mentioned-function-which-can-only-be-called-once,-both-the-withdraw-and-the-fallback-functions-check-whether-the-caller-is-the-holdefi-contract-or-not.-this-functionality-could-be-factorized-into-a-onlyholdefi-modifier-as-it-is-done-in-the-ownable-contract-instead-of-implementing-the-require-statement-in-each-function.", "labels": ["OpenZeppelin"]}, {"title": "Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.", "body": "Consider creating a onlyHoldefi modifier and replacing the require statements in both functions with the modifier.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-creating-a-onlyholdefi-modifier-and-replacing-the-require-statements-in-both-functions-with-the-modifier.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Not following the Checks-Effects-Interactions pattern", "body": "[N03] Not following the Checks-Effects-Interactions pattern", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n03]-not-following-the-checks-effects-interactions-pattern", "labels": ["OpenZeppelin"]}, {"title": "Throughout the project\u2019s codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.", "body": "Throughout the project\u2019s codebase, there are situations in which the code is not following the check-effect-interaction pattern that helps to protect against reentrancy issues, such as in the setBorrowRate function or in the setSuppliersShareRate function from the HoldefiSettings contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-project\u2019s-codebase,-there-are-situations-in-which-the-code-is-not-following-the-check-effect-interaction-pattern-that-helps-to-protect-against-reentrancy-issues,-such-as-in-the-setborrowrate-function-or-in-the-setsupplierssharerate-function-from-the-holdefisettings-contract.", "labels": ["OpenZeppelin"]}, {"title": "Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.", "body": "Although in the codebase these particular cases do not pose a security risk, consider changing the order of operations to first write the state variables and then perform the external calls to other contracts for readability and consistency purposes, and to be safe against reentrancy attacks even if the called functions change.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#although-in-the-codebase-these-particular-cases-do-not-pose-a-security-risk,-consider-changing-the-order-of-operations-to-first-write-the-state-variables-and-then-perform-the-external-calls-to-other-contracts-for-readability-and-consistency-purposes,-and-to-be-safe-against-reentrancy-attacks-even-if-the-called-functions-change.", "labels": ["OpenZeppelin"]}, {"title": "We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.", "body": "We know that. We followed Checks-Effects-Interactions pattern in the whole code. But in this case, indexes should be updated with previous values, not new values.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#we-know-that.-we-followed-checks-effects-interactions-pattern-in-the-whole-code.-but-in-this-case,-indexes-should-be-updated-with-previous-values,-not-new-values.", "labels": ["OpenZeppelin"]}, {"title": "In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.", "body": "In these cases, we still suggest to follow the defensive Checks-Effects-Interactions when calling other contracts. Consider saving the old values into local variables, and pass those when calling the external contracts. In the meanwhile, consider explaining in the code the reason of not follow the Checks-Effects-Interactions pattern.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-these-cases,-we-still-suggest-to-follow-the-defensive-checks-effects-interactions-when-calling-other-contracts.-consider-saving-the-old-values-into-local-variables,-and-pass-those-when-calling-the-external-contracts.-in-the-meanwhile,-consider-explaining-in-the-code-the-reason-of-not-follow-the-checks-effects-interactions-pattern.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Inconsistent coding style", "body": "[N04] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n04]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "body": "Deviations from the Solidity Style Guide were identified throughout the entire codebase. Taking into consideration how much value a consistent coding style adds to the project\u2019s readability, enforcing a standard coding style with help of linter tools such as Solhint is recommended.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#deviations-from-the-solidity-style-guide-were-identified-throughout-the-entire-codebase.-taking-into-consideration-how-much-value-a-consistent-coding-style-adds-to-the-project\u2019s-readability,-enforcing-a-standard-coding-style-with-help-of-linter-tools-such-as-solhint-is-recommended.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Floating Solidity compiler versions", "body": "[N05] Floating Solidity compiler versions", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n05]-floating-solidity-compiler-versions", "labels": ["OpenZeppelin"]}, {"title": "It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.", "body": "It is a good practice to prevent that undiscovered vulnerabilities in newer compilers are not added to the project at the time of compiling the source code.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#it-is-a-good-practice-to-prevent-that-undiscovered-vulnerabilities-in-newer-compilers-are-not-added-to-the-project-at-the-time-of-compiling-the-source-code.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.", "body": "Nevertheless, the Holdefi project is using a floating pragma version that could include these new vulnerabilities when the project is compiled.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-the-holdefi-project-is-using-a-floating-pragma-version-that-could-include-these-new-vulnerabilities-when-the-project-is-compiled.", "labels": ["OpenZeppelin"]}, {"title": "Consider fixing all the dependencies to the same stable Solidity version.", "body": "Consider fixing all the dependencies to the same stable Solidity version.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-fixing-all-the-dependencies-to-the-same-stable-solidity-version.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Named return variables", "body": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.  Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.  [N07] Timestamp may not be reliable  The Holdefis codebase uses the block.timestamp as part of the calculations and time checks.  Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.  Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.  Update: Not fixed. Holdefis statement for this issue:  As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesnt change anything and miner cant make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence  We have updated our suggestion to make it clearer.  [N08] Unnecessary imports  In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.  [N09] Unused events  Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.  [N10] Misleading comments  Line 160: Should say Deposit ERC20 assets as supply  Line 184: The  Line 592: The  Line 607: The  On CollateralsWallet.sol: Line 19: The withrdaw function not only handles tokens, but also ETH  Consider updating the comments to more accurately describe the purpose and effect of the codebase.  [N11] Misleading function and variable names  To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:  isPause to  newOwnerChanger to  functionsNum to  newPaused to  newUnpaused to  secondsPerTenDays to  getMarket to  newOwnerChanger to  Market to  Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n06]-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.", "body": "There is an inconsistent use of named return variables across the entire codebase. Some examples can be found in the getAccountCollateral function from the Holdefi contract or in the getCollateral function of the HoldefiSettings contract.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-codebase.-some-examples-can-be-found-in-the-getaccountcollateral-function-from-the-holdefi-contract-or-in-the-getcollateral-function-of-the-holdefisettings-contract.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.", "body": "Consider removing all named return variables, explicitly declaring them as local variables in the body of the function, and adding the necessary explicit return statements where appropriate. This should favor both explicitness and readability of the project.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables-in-the-body-of-the-function,-and-adding-the-necessary-explicit-return-statements-where-appropriate.-this-should-favor-both-explicitness-and-readability-of-the-project.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Timestamp may not be reliable", "body": "[N07] Timestamp may not be reliable", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n07]-timestamp-may-not-be-reliable", "labels": ["OpenZeppelin"]}, {"title": "The Holdefi\u2019s codebase uses the block.timestamp as part of the calculations and time checks.", "body": "The Holdefi\u2019s codebase uses the block.timestamp as part of the calculations and time checks.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#the-holdefi\u2019s-codebase-uses-the-block.timestamp-as-part-of-the-calculations-and-time-checks.", "labels": ["OpenZeppelin"]}, {"title": "Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.", "body": "Nevertheless, timestamps can be slightly altered by miners to favor them in contracts that have logics that depend strongly on them.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#nevertheless,-timestamps-can-be-slightly-altered-by-miners-to-favor-them-in-contracts-that-have-logics-that-depend-strongly-on-them.", "labels": ["OpenZeppelin"]}, {"title": "Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.", "body": "Consider taking into account this issue and warning the users that such scenario could happen. If the alteration of timestamps cannot affect the protocol in any way, consider documenting the reasoning and writing tests enforcing that these guarantees will be preserved even if the code changes in the future.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-taking-into-account-this-issue-and-warning-the-users-that-such-scenario-could-happen.-if-the-alteration-of-timestamps-cannot-affect-the-protocol-in-any-way,-consider-documenting-the-reasoning-and-writing-tests-enforcing-that-these-guarantees-will-be-preserved-even-if-the-code-changes-in-the-future.", "labels": ["OpenZeppelin"]}, {"title": "As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesn\u2019t change anything and miner can\u2019t make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "body": "As you can see in the below link, If the scale of your time-dependent event can vary by 15 seconds and maintain integrity, it is safe to use a block.timestamp. Using block.timestamp for generating random numbers is not good in the lottery or this kind of context. But in our platform 10-15 seconds in 1 year doesn\u2019t change anything and miner can\u2019t make a profit. https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "html_url": "https://blog.openzeppelin.com/holdefi-audit#as-you-can-see-in-the-below-link,-if-the-scale-of-your-time-dependent-event-can-vary-by-15-seconds-and-maintain-integrity,-it-is-safe-to-use-a-block.timestamp.-using-block.timestamp-for-generating-random-numbers-is-not-good-in-the-lottery-or-this-kind-of-context.-but-in-our-platform-10-15-seconds-in-1-year-doesn\u2019t-change-anything-and-miner-can\u2019t-make-a-profit.-https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence", "labels": ["OpenZeppelin"]}, {"title": "[N08] Unnecessary imports", "body": "[N08] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n08]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.", "body": "In the Holdefi contract, consider removing the import statement for the Ownable contract as it is never used.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-contract,-consider-removing-the-import-statement-for-the-ownable-contract-as-it-is-never-used.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Unused events", "body": "[N09] Unused events", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n09]-unused-events", "labels": ["OpenZeppelin"]}, {"title": "Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.", "body": "Line 124 of Holdefi.sol declares a RepayBorrow event. As it is never emitted, consider removing the declaration or emitting the event in the appropriate place.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-124-of-holdefi.sol-declares-a-repayborrow-event.-as-it-is-never-emitted,-consider-removing-the-declaration-or-emitting-the-event-in-the-appropriate-place.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Misleading comments", "body": "[N10] Misleading comments", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n10]-misleading-comments", "labels": ["OpenZeppelin"]}, {"title": "Line 160: Should say \u2018Deposit ERC20 assets as supply\u2019", "body": "Line 160: Should say \u2018Deposit ERC20 assets as supply\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-160:-should-say-\u2018deposit-erc20-assets-as-supply\u2019", "labels": ["OpenZeppelin"]}, {"title": "Line 184: The", "body": "Line 184: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-184:-the", "labels": ["OpenZeppelin"]}, {"title": "Line 592: The", "body": "Line 592: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-592:-the", "labels": ["OpenZeppelin"]}, {"title": "Line 607: The", "body": "Line 607: The", "html_url": "https://blog.openzeppelin.com/holdefi-audit#line-607:-the", "labels": ["OpenZeppelin"]}, {"title": "On CollateralsWallet.sol:\u2013 Line 19: The withrdaw function not only handles tokens, but also ETH", "body": "On CollateralsWallet.sol:\u2013 Line 19: The withrdaw function not only handles tokens, but also ETH", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-collateralswallet.sol:\u2013-line-19:-the-withrdaw-function-not-only-handles-tokens,-but-also-eth", "labels": ["OpenZeppelin"]}, {"title": "Consider updating the comments to more accurately describe the purpose and effect of the codebase.", "body": "Consider updating the comments to more accurately describe the purpose and effect of the codebase.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#consider-updating-the-comments-to-more-accurately-describe-the-purpose-and-effect-of-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Misleading function and variable names", "body": "[N11] Misleading function and variable names", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n11]-misleading-function-and-variable-names", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:", "body": "To favor explicitness and readability, some functions and variables from the whole repository may benefit from a better naming.Our suggestions are:", "html_url": "https://blog.openzeppelin.com/holdefi-audit#to-favor-explicitness-and-readability,-some-functions-and-variables-from-the-whole-repository-may-benefit-from-a-better-naming.our-suggestions-are:", "labels": ["OpenZeppelin"]}, {"title": "isPause to", "body": "isPause to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#ispause-to", "labels": ["OpenZeppelin"]}, {"title": "newOwnerChanger to", "body": "newOwnerChanger to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newownerchanger-to", "labels": ["OpenZeppelin"]}, {"title": "functionsNum to", "body": "functionsNum to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#functionsnum-to", "labels": ["OpenZeppelin"]}, {"title": "newPaused to", "body": "newPaused to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newpaused-to", "labels": ["OpenZeppelin"]}, {"title": "newUnpaused to", "body": "newUnpaused to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#newunpaused-to", "labels": ["OpenZeppelin"]}, {"title": "secondsPerTenDays to", "body": "secondsPerTenDays to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#secondspertendays-to", "labels": ["OpenZeppelin"]}, {"title": "getMarket to", "body": "getMarket to", "html_url": "https://blog.openzeppelin.com/holdefi-audit#getmarket-to", "labels": ["OpenZeppelin"]}, {"title": "Market to", "body": "Market struct defined in the  In the Holdefi contract: All ocurrencies of totalBalance to totalBorrowedBalance  [N12] TODOs in code  On line 11 and line 38 of HoldefiPrices.sol, there are TODO comments that should be removed and instead tracked in the projects issues backlog.  [N13] Typos in comments  Throughout the Holdefis codebase, there are a few typos in the code and in comments. We list them here.  On line 8 of CollateralsWallet.sol, collateralls should be collaterals  On line 33 and on line 39 of HoldefiPauser.sol, functions should be function  On line 27 of Ownable.sol, can not should be cannot  On line 16 of HoldefiSettings.sol, All these settings is callable by only owner should say All these settings are callable only by the owner  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=  Conclusions  No critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce potential attack surface.  JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbm90ZXMlMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFJTNDJTIwUHJldmlvdXMlM0MlMkZhJTNFJTNDJTJGYnV0dG9uJTNFJTBBJTBBJTNDJTJGZGl2JTNF  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/holdefi-audit#market-to", "labels": ["OpenZeppelin"]}, {"title": "Market struct defined in the", "body": "Market struct defined in the", "html_url": "https://blog.openzeppelin.com/holdefi-audit#market-struct-defined-in-the", "labels": ["OpenZeppelin"]}, {"title": "In the Holdefi contract:\u2013 All ocurrencies of totalBalance to totalBorrowedBalance", "body": "In the Holdefi contract:\u2013 All ocurrencies of totalBalance to totalBorrowedBalance", "html_url": "https://blog.openzeppelin.com/holdefi-audit#in-the-holdefi-contract:\u2013-all-ocurrencies-of-totalbalance-to-totalborrowedbalance", "labels": ["OpenZeppelin"]}, {"title": "[N12] TODOs in code", "body": "[N12] TODOs in code", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n12]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "On line 11 and line 38 of HoldefiPrices.sol, there are \u201cTODO\u201d comments that should be removed and instead tracked in the project\u2019s issues backlog.", "body": "On line 11 and line 38 of HoldefiPrices.sol, there are \u201cTODO\u201d comments that should be removed and instead tracked in the project\u2019s issues backlog.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-11-and-line-38-of-holdefiprices.sol,-there-are-\u201ctodo\u201d-comments-that-should-be-removed-and-instead-tracked-in-the-project\u2019s-issues-backlog.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Typos in comments", "body": "[N13] Typos in comments", "html_url": "https://blog.openzeppelin.com/holdefi-audit#[n13]-typos-in-comments", "labels": ["OpenZeppelin"]}, {"title": "Throughout the Holdefi\u2019s codebase, there are a few typos in the code and in comments. We list them here.", "body": "Throughout the Holdefi\u2019s codebase, there are a few typos in the code and in comments. We list them here.", "html_url": "https://blog.openzeppelin.com/holdefi-audit#throughout-the-holdefi\u2019s-codebase,-there-are-a-few-typos-in-the-code-and-in-comments.-we-list-them-here.", "labels": ["OpenZeppelin"]}, {"title": "On line 8 of CollateralsWallet.sol, \u2018collateralls\u2019 should be \u2018collaterals\u2019", "body": "On line 8 of CollateralsWallet.sol, \u2018collateralls\u2019 should be \u2018collaterals\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-8-of-collateralswallet.sol,-\u2018collateralls\u2019-should-be-\u2018collaterals\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 33 and on line 39 of HoldefiPauser.sol, \u2018functions\u2019 should be \u2018function\u2019", "body": "On line 33 and on line 39 of HoldefiPauser.sol, \u2018functions\u2019 should be \u2018function\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-33-and-on-line-39-of-holdefipauser.sol,-\u2018functions\u2019-should-be-\u2018function\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 27 of Ownable.sol, \u2018can not\u2019 should be \u2018cannot\u2019", "body": "On line 27 of Ownable.sol, \u2018can not\u2019 should be \u2018cannot\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-27-of-ownable.sol,-\u2018can-not\u2019-should-be-\u2018cannot\u2019", "labels": ["OpenZeppelin"]}, {"title": "On line 16 of HoldefiSettings.sol, \u2018All these settings is callable by only owner\u2019 should say \u2018All these settings are callable only by the owner\u2019", "body": "On line 16 of HoldefiSettings.sol, \u2018All these settings is callable by only owner\u2019 should say \u2018All these settings are callable only by the owner\u2019", "html_url": "https://blog.openzeppelin.com/holdefi-audit#on-line-16-of-holdefisettings.sol,-\u2018all-these-settings-is-callable-by-only-owner\u2019-should-say-\u2018all-these-settings-are-callable-only-by-the-owner\u2019", "labels": ["OpenZeppelin"]}, {"title": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "body": "JTNDZGl2JTIwY2xhc3MlM0QlMjJidG4tY29udGFpbmVyJTIyJTNFJTBBJTBBJTNDYnV0dG9uJTIwb25jbGljayUzRCUyMmN1c3RvbXNjcm9sbCUyOCUyOSUyMiUzRSUzQ2ElMjBocmVmJTNEJTIyJTIzbG93JTIyJTIwY2xhc3MlM0QlMjJjdXN0b20tbGluayUyMiUzRSUzQyUyMFByZXZpb3VzJTNDJTJGYSUzRSUzQyUyRmJ1dHRvbiUzRSUwQSUwQSUzQ2J1dHRvbiUyMG9uY2xpY2slM0QlMjJjdXN0b21zY3JvbGwlMjglMjklMjIlM0UlM0NhJTIwaHJlZiUzRCUyMiUyM2NvbmNsdXNpb24lMjIlMjBjbGFzcyUzRCUyMmN1c3RvbS1saW5rJTIyJTNFbmV4dCUyMCUzRSUzQyUyRmElM0UlM0MlMkZidXR0b24lM0UlMEElMEElM0MlMkZkaXYlM0U=", "html_url": "https://blog.openzeppelin.com/holdefi-audit#jtndzgl2jtiwy2xhc3mlm0qlmjjidg4ty29udgfpbmvyjtiyjtnfjtbbjtbbjtndynv0dg9ujtiwb25jbgljayuzrcuymmn1c3rvbxnjcm9sbcuyocuyosuymiuzrsuzq2elmjbocmvmjtnejtiyjtizbg93jtiyjtiwy2xhc3mlm0qlmjjjdxn0b20tbgluayuymiuzrsuzqyuymfbyzxzpb3vzjtndjtjgysuzrsuzqyuyrmj1dhrvbiuzrsuwqsuwqsuzq2j1dhrvbiuymg9uy2xpy2slm0qlmjjjdxn0b21zy3jvbgwlmjglmjklmjilm0ulm0nhjtiwahjlziuzrcuymiuym2nvbmnsdxnpb24lmjilmjbjbgfzcyuzrcuymmn1c3rvbs1saw5rjtiyjtnfbmv4dcuymcuzrsuzqyuyrmelm0ulm0mlmkzidxr0b24lm0ulmeelmeelm0mlmkzkaxylm0u=", "labels": ["OpenZeppelin"]}, {"title": "Commented out code", "body": "Commented out code", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#commented-out-code", "labels": ["OpenZeppelin"]}, {"title": "Lines 87 and 128 of the build.ts script include commented out lines of code without giving developers enough context on why those lines have been discarded, thus providing them with little to no value at all.", "body": "Lines 87 and 128 of the build.ts script include commented out lines of code without giving developers enough context on why those lines have been discarded, thus providing them with little to no value at all.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#lines-87-and-128-of-the-build.ts-script-include-commented-out-lines-of-code-without-giving-developers-enough-context-on-why-those-lines-have-been-discarded,-thus-providing-them-with-little-to-no-value-at-all.", "labels": ["OpenZeppelin"]}, {"title": "As the purpose of these lines is unclear and may confuse future developers and external contributors, consider removing them from the codebase. If they are to provide alternate implementation options, consider extracting them to a separate document where a deeper and more thorough explanation could be included.", "body": "As the purpose of these lines is unclear and may confuse future developers and external contributors, consider removing them from the codebase. If they are to provide alternate implementation options, consider extracting them to a separate document where a deeper and more thorough explanation could be included.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#as-the-purpose-of-these-lines-is-unclear-and-may-confuse-future-developers-and-external-contributors,-consider-removing-them-from-the-codebase.-if-they-are-to-provide-alternate-implementation-options,-consider-extracting-them-to-a-separate-document-where-a-deeper-and-more-thorough-explanation-could-be-included.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 125e3a6.", "body": "Update: This has been fixed in commit 125e3a6.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-125e3a6.", "labels": ["OpenZeppelin"]}, {"title": "guardian not set on initialization", "body": "guardian not set on initialization", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#guardian-not-set-on-initialization", "labels": ["OpenZeppelin"]}, {"title": "guardian address to the", "body": "guardian address to the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#guardian-address-to-the", "labels": ["OpenZeppelin"]}, {"title": "recoverWallet function. This", "body": "recoverWallet function. This", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#recoverwallet-function.-this", "labels": ["OpenZeppelin"]}, {"title": "setGuardian function which has modifier", "body": "setGuardian function which has modifier", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#setguardian-function-which-has-modifier", "labels": ["OpenZeppelin"]}, {"title": "deploy function of the", "body": "deploy function of the", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#deploy-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "To make the recoverability of the MetaTransactionWallet more robust, consider setting the guardian address in the initialize function.", "body": "To make the recoverability of the MetaTransactionWallet more robust, consider setting the guardian address in the initialize function.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#to-make-the-recoverability-of-the-metatransactionwallet-more-robust,-consider-setting-the-guardian-address-in-the-initialize-function.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been acknowledged and retained. In the words of the Celo team, \u201cit is intentional that the guardian recovery flow is optional.\u201d", "body": "Update: This has been acknowledged and retained. In the words of the Celo team, \u201cit is intentional that the guardian recovery flow is optional.\u201d", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-acknowledged-and-retained.-in-the-words-of-the-celo-team,-\u201cit-is-intentional-that-the-guardian-recovery-flow-is-optional.\u201d", "labels": ["OpenZeppelin"]}, {"title": "Naming issue hinders code understanding and readability", "body": "Naming issue hinders code understanding and readability", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#naming-issue-hinders-code-understanding-and-readability", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, a script may benefit from better naming. Consider implementing the following:", "body": "To favor explicitness and readability, a script may benefit from better naming. Consider implementing the following:", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#to-favor-explicitness-and-readability,-a-script-may-benefit-from-better-naming.-consider-implementing-the-following:", "labels": ["OpenZeppelin"]}, {"title": "Changing BUILD_DIR_1 to OLD_BRANCH_BUILD_DIR.", "body": "Changing BUILD_DIR_1 to OLD_BRANCH_BUILD_DIR.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#changing-build_dir_1-to-old_branch_build_dir.", "labels": ["OpenZeppelin"]}, {"title": "Changing BUILD_DIR_2 to NEW_BRANCH_BUILD_DIR.", "body": "Changing BUILD_DIR_2 to NEW_BRANCH_BUILD_DIR.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#changing-build_dir_2-to-new_branch_build_dir.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 947a176.", "body": "Update: This has been fixed in commit 947a176.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-947a176.", "labels": ["OpenZeppelin"]}, {"title": "Typographical error", "body": "Typographical error", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#typographical-error", "labels": ["OpenZeppelin"]}, {"title": "In line 5 of report.ts, there is an unneeded comma in the import statement.", "body": "In line 5 of report.ts, there is an unneeded comma in the import statement.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#in-line-5-of-report.ts,-there-is-an-unneeded-comma-in-the-import-statement.", "labels": ["OpenZeppelin"]}, {"title": "Update: This has been fixed in commit 7132ca1.", "body": "Update: This has been fixed in commit 7132ca1.", "html_url": "https://blog.openzeppelin.com/celo-contracts-audit-phase-7#update:-this-has-been-fixed-in-commit-7132ca1.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Assignment in require statement", "body": "[N01] Assignment in require statement", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n01]-assignment-in-require-statement", "labels": ["OpenZeppelin"]}, {"title": "In the YieldOracle contract, there is a require statement that makes an assignment. This deviates from the standard usage and intention of require statements and can easily lead to confusion. To avoid unnecessary confusion, consider moving the assignment to its own line before the require statement and then using the require statement solely for condition checking.", "body": "In the YieldOracle contract, there is a require statement that makes an assignment. This deviates from the standard usage and intention of require statements and can easily lead to confusion. To avoid unnecessary confusion, consider moving the assignment to its own line before the require statement and then using the require statement solely for condition checking.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-the-yieldoracle-contract,-there-is-a-require-statement-that-makes-an-assignment.-this-deviates-from-the-standard-usage-and-intention-of-require-statements-and-can-easily-lead-to-confusion.-to-avoid-unnecessary-confusion,-consider-moving-the-assignment-to-its-own-line-before-the-require-statement-and-then-using-the-require-statement-solely-for-condition-checking.", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged, but not fixed. The BarnBridge team has stated that their YieldOracle contract is inspired by Uniswap\u2019s ExampleOracleSimple contract and that they wish for their code to remain as \u201cclose to the source\u201d as possible in this case.", "body": "[N04] Misleading contract naming  IProvider,  IController, and  IComptroller are all named following the convention for naming interfaces, despite all being contracts.  To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.  Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N05] Unnecessarily convoluted inheritance  IProvider inherits  IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as  CompoundProvider, much more convoluted than necessary. Since the abstract contract  As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.  Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N06] Gas inefficiencies  Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.  In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.  In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.  In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The deadline provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.  In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.  In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.  In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.  In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides its own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.  In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.  Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.  Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:  There are 4 unnecessary external calls in the function itself. The nested call to _beforeProviderOp performs at least 7 unnecessary external calls. The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls. The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.  Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.  Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase wh", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-acknowledged,-but-not-fixed.-the-barnbridge-team-has-stated-that-their-yieldoracle-contract-is-inspired-by-uniswap\u2019s-exampleoraclesimple-contract-and-that-they-wish-for-their-code-to-remain-as-\u201cclose-to-the-source\u201d-as-possible-in-this-case.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Commented code", "body": "[N02] Commented code", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n02]-commented-code", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase there are lines of code that have been commented out with //. This can lead to confusion and is detrimental to overall code readability. We have provided a non-exhaustive list of examples below:", "body": "Throughout the codebase there are lines of code that have been commented out with //. This can lead to confusion and is detrimental to overall code readability. We have provided a non-exhaustive list of examples below:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase-there-are-lines-of-code-that-have-been-commented-out-with-//.-this-can-lead-to-confusion-and-is-detrimental-to-overall-code-readability.-we-have-provided-a-non-exhaustive-list-of-examples-below:", "labels": ["OpenZeppelin"]}, {"title": "Line 538 of SmartYield.sol", "body": "Line 538 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-538-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Lines 601 and 603 of SmartYield.sol", "body": "Lines 601 and 603 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#lines-601-and-603-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Consider removing commented out lines of code that are no longer needed.", "body": "Consider removing commented out lines of code that are no longer needed.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-commented-out-lines-of-code-that-are-no-longer-needed.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Note: The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Note: The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-note:-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Convoluted conditionals", "body": "[N03] Convoluted conditionals", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n03]-convoluted-conditionals", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains some convoluted conditionals that could benefit from simplification. Two examples of this are:", "body": "The codebase contains some convoluted conditionals that could benefit from simplification. Two examples of this are:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-codebase-contains-some-convoluted-conditionals-that-could-benefit-from-simplification.-two-examples-of-this-are:", "labels": ["OpenZeppelin"]}, {"title": "if (!(timeElapsed <= windowSize)) could be simplified to if (timeElapsed > windowSize)", "body": "if (!(timeElapsed <= windowSize)) could be simplified to if (timeElapsed > windowSize)", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#if-(!(timeelapsed-<=-windowsize))-could-be-simplified-to-if-(timeelapsed->-windowsize)", "labels": ["OpenZeppelin"]}, {"title": "if (!(timeElapsed >= windowSize - periodSize * 2)) could be simplified to if (timeElapsed < windowSize - periodSize * 2)", "body": "if (!(timeElapsed >= windowSize - periodSize * 2)) could be simplified to if (timeElapsed < windowSize - periodSize * 2)", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#if-(!(timeelapsed->=-windowsize---periodsize-*-2))-could-be-simplified-to-if-(timeelapsed-<-windowsize---periodsize-*-2)", "labels": ["OpenZeppelin"]}, {"title": "Consider writing conditionals in their simplest form to reduce potential confusion and increase overall code readability.", "body": "Consider writing conditionals in their simplest form to reduce potential confusion and increase overall code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-writing-conditionals-in-their-simplest-form-to-reduce-potential-confusion-and-increase-overall-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Misleading contract naming", "body": "[N04] Misleading contract naming", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n04]-misleading-contract-naming", "labels": ["OpenZeppelin"]}, {"title": "IProvider,", "body": "IProvider,", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iprovider,", "labels": ["OpenZeppelin"]}, {"title": "IController, and", "body": "consider making IComptroller an interface as its name implies.  Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N05] Unnecessarily convoluted inheritance  IProvider inherits  IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as  CompoundProvider, much more convoluted than necessary. Since the abstract contract  As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.  Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [N06] Gas inefficiencies  Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.  In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.  In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.  In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The deadline provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.  In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.  In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.  In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.  In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides its own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.  In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.  Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.  Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:  There are 4 unnecessary external calls in the function itself. The nested call to _beforeProviderOp performs at least 7 unnecessary external calls. The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls. The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.  Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.  Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.  Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.  [N07] Incomplete interface contracts  There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:  IYieldOracle contains only two function defini", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#icontroller,-and", "labels": ["OpenZeppelin"]}, {"title": "IComptroller are all named following the convention for naming interfaces, despite all being contracts.", "body": "IComptroller are all named following the convention for naming interfaces, despite all being contracts.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#icomptroller-are-all-named-following-the-convention-for-naming-interfaces,-despite-all-being-contracts.", "labels": ["OpenZeppelin"]}, {"title": "To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.", "body": "To increase code readability for future contributors, auditors, and the community, consider renaming IProvider and IController, and consider making IComptroller an interface as its name implies.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-increase-code-readability-for-future-contributors,-auditors,-and-the-community,-consider-renaming-iprovider-and-icontroller,-and-consider-making-icomptroller-an-interface-as-its-name-implies.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. IComptroller and IProvider were changed to interfaces as their names imply, however IController is still a contract. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-557395fd0fcf6bc089e10f312b3478b68e08a5ed.-icomptroller-and-iprovider-were-changed-to-interfaces-as-their-names-imply,-however-icontroller-is-still-a-contract.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Unnecessarily convoluted inheritance", "body": "[N05] Unnecessarily convoluted inheritance", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n05]-unnecessarily-convoluted-inheritance", "labels": ["OpenZeppelin"]}, {"title": "IProvider inherits", "body": "IProvider inherits", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iprovider-inherits", "labels": ["OpenZeppelin"]}, {"title": "IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as", "body": "IYieldOraclelizable, it makes the inheritance graph of anything that inherits the former, such as", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iyieldoraclelizable,-it-makes-the-inheritance-graph-of-anything-that-inherits-the-former,-such-as", "labels": ["OpenZeppelin"]}, {"title": "CompoundProvider, much more convoluted than necessary. Since the abstract contract", "body": "CompoundProvider, much more convoluted than necessary. Since the abstract contract", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#compoundprovider,-much-more-convoluted-than-necessary.-since-the-abstract-contract", "labels": ["OpenZeppelin"]}, {"title": "As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.", "body": "As a general rule, consider keeping inheritance as straightforward as possible to increase overall code readability and maintainability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#as-a-general-rule,-consider-keeping-inheritance-as-straightforward-as-possible-to-increase-overall-code-readability-and-maintainability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Fixed in commit 557395fd0fcf6bc089e10f312b3478b68e08a5ed. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-557395fd0fcf6bc089e10f312b3478b68e08a5ed.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Gas inefficiencies", "body": "[N06] Gas inefficiencies", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n06]-gas-inefficiencies", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.", "body": "Throughout the codebase, there are several opportunities to improve gas efficiency. Below is a lengthy, albeit non-exhaustive, list of such opportunities.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-several-opportunities-to-improve-gas-efficiency.-below-is-a-lengthy,-albeit-non-exhaustive,-list-of-such-opportunities.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.", "body": "In CompoundProvider, the _takeUnderlying function has two require statements. The first require is unnecessary however, as the second require will revert in all cases the first would have.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-_takeunderlying-function-has-two-require-statements.-the-first-require-is-unnecessary-however,-as-the-second-require-will-revert-in-all-cases-the-first-would-have.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.", "body": "In CompoundProvider, the harvest function makes repeated calls to ICTokenErc20(cToken).balanceOf(address(this)). The value could often be cached.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-harvest-function-makes-repeated-calls-to-ictokenerc20(ctoken).balanceof(address(this)).-the-value-could-often-be-cached.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The \u201cdeadline\u201d provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.", "body": "In CompoundProvider, the harvest function makes an external call to IUniswapV2Router.swapExactTokensForTokens to swap reward tokens for underlying tokens. The \u201cdeadline\u201d provided for the swap is this.currentTime() + 1800. However, the addition of 1800 is unnecessary since the swap will necessarily resolve in the current block.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-harvest-function-makes-an-external-call-to-iuniswapv2router.swapexacttokensfortokens-to-swap-reward-tokens-for-underlying-tokens.-the-\u201cdeadline\u201d-provided-for-the-swap-is-this.currenttime()-+-1800.-however,-the-addition-of-1800-is-unnecessary-since-the-swap-will-necessarily-resolve-in-the-current-block.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.", "body": "In CompoundProvider, the transferFees function converts an amount of cTokens into uTokens, adds the latter onto underlyingFees, and then converts that total amount back into cTokens. Converting underlyingFees to cTokens and then adding the two cToken values could reduce complexity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-transferfees-function-converts-an-amount-of-ctokens-into-utokens,-adds-the-latter-onto-underlyingfees,-and-then-converts-that-total-amount-back-into-ctokens.-converting-underlyingfees-to-ctokens-and-then-adding-the-two-ctoken-values-could-reduce-complexity.", "labels": ["OpenZeppelin"]}, {"title": "In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.", "body": "In CompoundProvider, the _accountYieldInternal and currentCumulatives functions both cast a current blocktime to a uint32, but only after performing an unnecessary mod 2^32.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundprovider,-the-_accountyieldinternal-and-currentcumulatives-functions-both-cast-a-current-blocktime-to-a-uint32,-but-only-after-performing-an-unnecessary-mod-2^32.", "labels": ["OpenZeppelin"]}, {"title": "In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.", "body": "In MathUtils, the compound and compound2 functions will use a lot of gas even when ratePerPeriod is 0. There could be a short-circuit to return principal in those cases.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-mathutils,-the-compound-and-compound2-functions-will-use-a-lot-of-gas-even-when-rateperperiod-is-0.-there-could-be-a-short-circuit-to-return-principal-in-those-cases.", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides it\u2019s own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.", "body": "In SmartYield, the bondGain function makes an external call to BondModel.gain. As part of the call, SmartYield provides it\u2019s own address as the pool argument so that BondModel can make calls back to get additional information about the pool. It would be more efficient to pass along all the pool information that BondModel requires as part of the first call to gain.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-bondgain-function-makes-an-external-call-to-bondmodel.gain.-as-part-of-the-call,-smartyield-provides-it\u2019s-own-address-as-the-pool-argument-so-that-bondmodel-can-make-calls-back-to-get-additional-information-about-the-pool.-it-would-be-more-efficient-to-pass-along-all-the-pool-information-that-bondmodel-requires-as-part-of-the-first-call-to-gain.", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.", "body": "In SmartYield, the function _beforeProviderOp has a for loop where this.currentTime() is called every iteration. It could be cached.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-function-_beforeproviderop-has-a-for-loop-where-this.currenttime()-is-called-every-iteration.-it-could-be-cached.", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.", "body": "Throughout the codebase, there are several instances of external calls made to currentTime functions that only return the current block.timestamp. Using block.timestamp directly would reduce gas costs.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-several-instances-of-external-calls-made-to-currenttime-functions-that-only-return-the-current-block.timestamp.-using-block.timestamp-directly-would-reduce-gas-costs.", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:", "body": "Throughout the codebase, there are numerous instances of contracts calling local functions via the this keyword, which makes those calls external. Instead, by removing the this. prefix, these functions can be called internally,. This changes the EVM opcode invocation from CALL to JUMP and in doing so decreases gas costs. There are times the number of external calls invoked along a call chain are non-trivial. For instance, a call to buyBond makes no less than 29 unnecessary external calls:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-numerous-instances-of-contracts-calling-local-functions-via-the-this-keyword,-which-makes-those-calls-external.-instead,-by-removing-the-this.-prefix,-these-functions-can-be-called-internally,.-this-changes-the-evm-opcode-invocation-from-call-to-jump-and-in-doing-so-decreases-gas-costs.-there-are-times-the-number-of-external-calls-invoked-along-a-call-chain-are-non-trivial.-for-instance,-a-call-to-buybond-makes-no-less-than-29-unnecessary-external-calls:", "labels": ["OpenZeppelin"]}, {"title": "There are 4 unnecessary external calls in the function itself.", "body": "There are 4 unnecessary external calls in the function itself.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-4-unnecessary-external-calls-in-the-function-itself.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to _beforeProviderOp performs at least 7 unnecessary external calls.", "body": "The nested call to _beforeProviderOp performs at least 7 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-_beforeproviderop-performs-at-least-7-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls.", "body": "The nested call to underlyingLoanable results in at least an additional 7 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-underlyingloanable-results-in-at-least-an-additional-7-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.", "body": "The nested call to _mintBond calls _accountBond which then makes 11 unnecessary external calls.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-nested-call-to-_mintbond-calls-_accountbond-which-then-makes-11-unnecessary-external-calls.", "labels": ["OpenZeppelin"]}, {"title": "Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.", "body": "Unless msg.sender needs to be changed to the calling contract, making external calls via this inflates gas costs without benefit and should generally be avoided.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#unless-msg.sender-needs-to-be-changed-to-the-calling-contract,-making-external-calls-via-this-inflates-gas-costs-without-benefit-and-should-generally-be-avoided.", "labels": ["OpenZeppelin"]}, {"title": "Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.", "body": "Consider optimizing for gas usage wherever possible to improve overall user experience and generally reduce code complexity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-optimizing-for-gas-usage-wherever-possible-to-improve-overall-user-experience-and-generally-reduce-code-complexity.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The CompoundProvider contract has been too extensively modified since our original audit to properly facilitate the review of relevant fixes. The sixth, seventh, eighth, and ninth bullets were fixed. The tenth bullet point was partially fixed, with only one unnecessary external call via the this keyword remaining. The referenced commit includes various other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-compoundprovider-contract-has-been-too-extensively-modified-since-our-original-audit-to-properly-facilitate-the-review-of-relevant-fixes.-the-sixth,-seventh,-eighth,-and-ninth-bullets-were-fixed.-the-tenth-bullet-point-was-partially-fixed,-with-only-one-unnecessary-external-call-via-the-this-keyword-remaining.-the-referenced-commit-includes-various-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Incomplete interface contracts", "body": "[N07] Incomplete interface contracts", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n07]-incomplete-interface-contracts", "labels": ["OpenZeppelin"]}, {"title": "There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:", "body": "There are instances in the codebase of interfaces omitting some of the public or external functions that their corresponding implementation contracts define. For example:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-instances-in-the-codebase-of-interfaces-omitting-some-of-the-public-or-external-functions-that-their-corresponding-implementation-contracts-define.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.", "body": "IYieldOracle contains only two function definitions, but YieldOracle contains an additional function observationIndexOf.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iyieldoracle-contains-only-two-function-definitions,-but-yieldoracle-contains-an-additional-function-observationindexof.", "labels": ["OpenZeppelin"]}, {"title": "ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.", "body": "ISmartYield does not list any of the public variable getters from SmartYield. The external function setup is also missing from the interface.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ismartyield-does-not-list-any-of-the-public-variable-getters-from-smartyield.-the-external-function-setup-is-also-missing-from-the-interface.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "body": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#incomplete-interfaces-may-introduce-confusion-for-users,-developers,-and-auditors-alike.-to-improve-overall-code-legibility-and-minimize-confusion,-consider-modifying-the-interface-contracts-to-reflect-all-of-the-public-and-external-functions-from-their-respective-implementation-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: The BarnBridge team did not address this issue.", "body": "[M05] Rounding errors in compound and compound2  compound function  divides at the end of every iteration of the  compound2 function is generally more accurate, it also performs this truncated division in the  odd case of the while loop.  As an example of how significant these errors can be, consider the calculation of compound interest with 100 principal, 1.02e18 rate, and 100 periods. The correct answer for this calculation is 724.46. compound gives the result 584, and compound2 gives the result 720.  Consider updating the calculations to always perform divisions as late as possible, while also ensuring the intermediate results do not overflow.   They stated: The code uses only the compound2 function, which we consider to have a good tradeoff between accuracy/gas cost/complexity. Should we decide this is no longer the case, well update the BondModelV1 which uses the compound2 function.  [M06] Using stale cToken exchange rate  CompoundProvider contract, when considering the exchange rate between cTokens and uTokens in a given Compound pool, the pools  exchangeRateStored function is used rather than its  exchangeRateCurrent function. The result is that the exchange rate used is out of date, and relies on parties interacting with the Compound pool incredibly regularly. This leads to incorrect  calculations of fees, incorrect  calculation of the underlying balance, and incorrect  calculation of the expected COMP reward.  Consider using the exchangeRateCurrent function to increase the overall accuracy of the protocol.  Update: Fixed in commit 6a2b956d6b9df4639358368c93e518ea458f5d68. There are no longer any instances of exchangeRateStored being used in the revised code. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  Low severity  [L01] BOND_MAX_RATE_PER_DAY doesnt cap bond rates at 30% as intended  The BOND_MAX_RATE_PER_DAY variable places an upper bound on the daily interest rate that an oracle can report for an underlying pool. The inline comment alongside this variable states the initial rate assignment should be equal to APY ~30% / year. However, the calculation used to set this initial value, i.e., 3 * 49201150733 * 5760, translates to approximately 36.4% APY. Even though the second part of that computation, 49201150733 * 5760, would yield an approximately 10% APY, due to compounding, the relationship between this max rate and the resultant APY is superlinear. Consider reconciling the code and comment to avoid any confusion and to clarify intent.  Update: Fixed in commit e6ac08cfbe0ab1eb0f682927a11f7e0a5bf20a6b. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  [L02] Constants not explicitly declared  Throughout the codebase there are many occurrences of literal values being used with unexplained meaning. This makes areas of the code more difficult to understand. Some examples include:  The literal value 1e18 is used throughout the codebase to add accuracy to calculations. However, the lack of comments and explanation around this makes it hard to track whether or not a value is correctly scaled at the end of a calculation.  The literal value -1 is often used to represent the maximum integer, but this use is generally something that needs to be inferred.  The literal values 49201150733, 3 and 5760 used on line 26 of IController.sol. While there are comments above this line that give them some context, the source of the values remains unclear.  Literal values in the codebase without an explanation as to their meaning make the code harder to read, understand, and maintain for developers, auditors and external contributors alike.  Consider defining a constant variable for every literal value used and giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Fixed in PR#43. The referenced PR is based on commits that include other changes to the codebase which have not been reviewed by OpenZeppelin.  [L03] Duplicated code  Throughout the codebase there are examples of duplicated code. Duplicating code can lead to issues later in the development lifecycle and leaves the project more prone to the introduction of errors. Errors can inadvertently be introduced when functionality changes are not replicated across all instances of code that should be identical. Instead of duplicating code, consider having just one function/modifier/contract containing the duplicated code and using that whenever the duplicated functionality is required. Examples of duplicated code include, but are not limited to:  The SeniorBond and JuniorBond contracts. Consider instead having one common Bond contract.  Conversions from uToken to cToken, and vice versa throughout CompoundProvider. Consider creating helper functions to perform this conversion.  The check whether msg.sender == smartYield is ", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-the-barnbridge-team-did-not-address-this-issue.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Inconsistent use of named return variables", "body": "[N08] Inconsistent use of named return variables", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n08]-inconsistent-use-of-named-return-variables", "labels": ["OpenZeppelin"]}, {"title": "There is an inconsistent use of named return variables across the entire codebase. For instance:", "body": "There is an inconsistent use of named return variables across the entire codebase. For instance:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-is-an-inconsistent-use-of-named-return-variables-across-the-entire-codebase.-for-instance:", "labels": ["OpenZeppelin"]}, {"title": "Some functions return named variables.", "body": "Some functions return named variables.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-functions-return-named-variables.", "labels": ["OpenZeppelin"]}, {"title": "Some return explicit values.", "body": "Some return explicit values.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-return-explicit-values.", "labels": ["OpenZeppelin"]}, {"title": "Some declare a named return variable but override it with an explicit return statement.", "body": "Some declare a named return variable but override it with an explicit return statement.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-declare-a-named-return-variable-but-override-it-with-an-explicit-return-statement.", "labels": ["OpenZeppelin"]}, {"title": "Some have explicit return statements that do not return anything.", "body": "Some have explicit return statements that do not return anything.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#some-have-explicit-return-statements-that-do-not-return-anything.", "labels": ["OpenZeppelin"]}, {"title": "Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "body": "Consider adopting a consistent approach to return values by removing all named return variables, explicitly declaring them as local variables, and adding the necessary return statements where appropriate. This would improve both the explicitness and readability of the code, and it may also help reduce regressions during future code refactors.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-adopting-a-consistent-approach-to-return-values-by-removing-all-named-return-variables,-explicitly-declaring-them-as-local-variables,-and-adding-the-necessary-return-statements-where-appropriate.-this-would-improve-both-the-explicitness-and-readability-of-the-code,-and-it-may-also-help-reduce-regressions-during-future-code-refactors.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Naming issues hinder understanding and clarity of the codebase", "body": "[N09] Naming issues hinder understanding and clarity of the codebase", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n09]-naming-issues-hinder-understanding-and-clarity-of-the-codebase", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "body": "To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-favor-explicitness-and-readability,-several-parts-of-the-contracts-may-benefit-from-better-naming.-our-suggestions-are-to-rename:", "labels": ["OpenZeppelin"]}, {"title": "fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.", "body": "fractionOf to calculatePercentage. The name fractionOf implies calculating a as a fraction of f.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#fractionof-to-calculatepercentage.-the-name-fractionof-implies-calculating-a-as-a-fraction-of-f.", "labels": ["OpenZeppelin"]}, {"title": "a to amount.", "body": "a to amount.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#a-to-amount.", "labels": ["OpenZeppelin"]}, {"title": "f to percentage.", "body": "f to percentage.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#f-to-percentage.", "labels": ["OpenZeppelin"]}, {"title": "cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.", "body": "cumulativeSecondlyYieldLast to latestCumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cumulativesecondlyyieldlast-to-latestcumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "cumulativeSecondlyYield to cumulativeYieldPerSecond.", "body": "cumulativeSecondlyYield to cumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cumulativesecondlyyield-to-cumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "yieldCumulative to cumulativeYieldPerSecond.", "body": "yieldCumulative to cumulativeYieldPerSecond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#yieldcumulative-to-cumulativeyieldpersecond.", "labels": ["OpenZeppelin"]}, {"title": "b_ to seniorBond.", "body": "b_ to seniorBond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#b_-to-seniorbond.", "labels": ["OpenZeppelin"]}, {"title": "d to abondDuration.", "body": "d to abondDuration.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#d-to-abondduration.", "labels": ["OpenZeppelin"]}, {"title": "ts to scaledTimestamp.", "body": "ts to scaledTimestamp.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ts-to-scaledtimestamp.", "labels": ["OpenZeppelin"]}, {"title": "tmp to temp.", "body": "tmp to temp.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#tmp-to-temp.", "labels": ["OpenZeppelin"]}, {"title": "_unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.", "body": "_unaccountBond, _accountBond, _mintBond, unaccountBonds, redeemBond, and buyBond, to all state SeniorBond instead of just Bond.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#_unaccountbond,-_accountbond,-_mintbond,-unaccountbonds,-redeembond,-and-buybond,-to-all-state-seniorbond-instead-of-just-bond.", "labels": ["OpenZeppelin"]}, {"title": "setPaused to setPausedState.", "body": "setPaused to setPausedState.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#setpaused-to-setpausedstate.", "labels": ["OpenZeppelin"]}, {"title": "cTokenBalance to userCTokenBalance.", "body": "cTokenBalance to userCTokenBalance.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#ctokenbalance-to-userctokenbalance.", "labels": ["OpenZeppelin"]}, {"title": "juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.", "body": "juniorBondsMaturitiesPrev to nextJuniorBondToLiquidate.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#juniorbondsmaturitiesprev-to-nextjuniorbondtoliquidate.", "labels": ["OpenZeppelin"]}, {"title": "Consider renaming these parts of the contracts to increase overall code clarity.", "body": "Consider renaming these parts of the contracts to increase overall code clarity.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-renaming-these-parts-of-the-contracts-to-increase-overall-code-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Comments not following NatSpec", "body": "[N10] Comments not following NatSpec", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n10]-comments-not-following-natspec", "labels": ["OpenZeppelin"]}, {"title": "The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts\u2019 public API.", "body": "The docstrings of the contracts are not following the Ethereum Natural Specification Format (NatSpec). Consider following this specification on everything that is part of the contracts\u2019 public API.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-docstrings-of-the-contracts-are-not-following-the-ethereum-natural-specification-format-(natspec).-consider-following-this-specification-on-everything-that-is-part-of-the-contracts\u2019-public-api.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Unnecessary public visibility in some functions", "body": "[N11] Unnecessary public visibility in some functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n11]-unnecessary-public-visibility-in-some-functions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:", "body": "Throughout the codebase, there are functions that are defined as public but are never used locally. Some examples are:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#throughout-the-codebase,-there-are-functions-that-are-defined-as-public-but-are-never-used-locally.-some-examples-are:", "labels": ["OpenZeppelin"]}, {"title": "In CompoundController, the getUniswapPath function", "body": "In CompoundController, the getUniswapPath function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-compoundcontroller,-the-getuniswappath-function", "labels": ["OpenZeppelin"]}, {"title": "In IController, the setHarvestReward function", "body": "In IController, the setHarvestReward function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-icontroller,-the-setharvestreward-function", "labels": ["OpenZeppelin"]}, {"title": "In both JuniorBond and SeniorBond, the mint and burn functions", "body": "In both JuniorBond and SeniorBond, the mint and burn functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-both-juniorbond-and-seniorbond,-the-mint-and-burn-functions", "labels": ["OpenZeppelin"]}, {"title": "In SmartYield, the unaccountBonds function", "body": "In SmartYield, the unaccountBonds function", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#in-smartyield,-the-unaccountbonds-function", "labels": ["OpenZeppelin"]}, {"title": "To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.", "body": "To favor readability and reduce gas costs, consider reducing the visibility of public functions that are not used internally to external.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#to-favor-readability-and-reduce-gas-costs,-consider-reducing-the-visibility-of-public-functions-that-are-not-used-internally-to-external.", "labels": ["OpenZeppelin"]}, {"title": "[N12] TODOs in code", "body": "[N12] TODOs in code", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n12]-todos-in-code", "labels": ["OpenZeppelin"]}, {"title": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.", "body": "There are \u201cTODO\u201d comments in the code base that should be tracked in the project\u2019s issues backlog. For instance, on line 615 of SmartYield.sol, on line 171 of CompoundProvider.sol, and elsewhere. During development, having well described \u201cTODO\u201d comments will make the process of tracking and solving them easier. Without that information, these comments might age, and important information for the security of the system might be forgotten by the time it is released to production.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-\u201ctodo\u201d-comments-in-the-code-base-that-should-be-tracked-in-the-project\u2019s-issues-backlog.-for-instance,-on-line-615-of-smartyield.sol,-on-line-171-of-compoundprovider.sol,-and-elsewhere.-during-development,-having-well-described-\u201ctodo\u201d-comments-will-make-the-process-of-tracking-and-solving-them-easier.-without-that-information,-these-comments-might-age,-and-important-information-for-the-security-of-the-system-might-be-forgotten-by-the-time-it-is-released-to-production.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.", "body": "Consider removing all instances of TODO comments and instead tracking them in the issues backlog. Alternatively, consider linking each inline TODO to the corresponding issues backlog entry.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-all-instances-of-todo-comments-and-instead-tracking-them-in-the-issues-backlog.-alternatively,-consider-linking-each-inline-todo-to-the-corresponding-issues-backlog-entry.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "[N16] Unused functions  The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.  Consider removing all unused functions to improve the overall maintainabilty and readability of the code.  Update: The BarnBridge team did not address this issue.  [N17] Unnecessary imports  The below list outlines contract imports that are unused and are therefore unnecessary.  SmartYield.sol imports console.sol  SmartYield.sol imports IERC20.sol  SmartYield.sol imports Governed.sol  SmartYield.sol imports IYieldOraclelizable.sol  Consider removing unused import statements to simplify the codebase and increase overall readability.  Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.  Conclusions  1 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N13] Typos", "body": "[N13] Typos", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n13]-typos", "labels": ["OpenZeppelin"]}, {"title": "The codebase contains the following typos:", "body": "The codebase contains the following typos:", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-codebase-contains-the-following-typos:", "labels": ["OpenZeppelin"]}, {"title": "curent should be current.", "body": "curent should be current.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#curent-should-be-current.", "labels": ["OpenZeppelin"]}, {"title": "totalUndwerlying should be totalUnderlying.", "body": "totalUndwerlying should be totalUnderlying.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#totalundwerlying-should-be-totalunderlying.", "labels": ["OpenZeppelin"]}, {"title": "withdrawl should be withdrawal.", "body": "withdrawl should be withdrawal.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#withdrawl-should-be-withdrawal.", "labels": ["OpenZeppelin"]}, {"title": "dirrect should be direct.", "body": "dirrect should be direct.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#dirrect-should-be-direct.", "labels": ["OpenZeppelin"]}, {"title": "moar should be more.", "body": "moar should be more.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#moar-should-be-more.", "labels": ["OpenZeppelin"]}, {"title": "substract should be subtract.", "body": "substract should be subtract.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#substract-should-be-subtract.", "labels": ["OpenZeppelin"]}, {"title": "colected should be collected.", "body": "colected should be collected.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#colected-should-be-collected.", "labels": ["OpenZeppelin"]}, {"title": "cummulates should be cumulates.", "body": "cummulates should be cumulates.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#cummulates-should-be-cumulates.", "labels": ["OpenZeppelin"]}, {"title": "IProviderPool should be IProvider.", "body": "IProviderPool should be IProvider.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#iproviderpool-should-be-iprovider.", "labels": ["OpenZeppelin"]}, {"title": "matureing should be maturing.", "body": "matureing should be maturing.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#matureing-should-be-maturing.", "labels": ["OpenZeppelin"]}, {"title": "withdrawls should be withdrawals.", "body": "withdrawls should be withdrawals.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#withdrawls-should-be-withdrawals.", "labels": ["OpenZeppelin"]}, {"title": "begginging should be beginning.", "body": "begginging should be beginning.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#begginging-should-be-beginning.", "labels": ["OpenZeppelin"]}, {"title": "should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.", "body": "should start with rewardCToken and with uToken should be should start with rewardCToken and end with uToken.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#should-start-with-rewardctoken-and-with-utoken-should-be-should-start-with-rewardctoken-and-end-with-utoken.", "labels": ["OpenZeppelin"]}, {"title": "last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.", "body": "last index of juniorBondsMaturities that was liquidated should be next index of juniorBondsMaturities to be liquidated.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#last-index-of-juniorbondsmaturities-that-was-liquidated-should-be-next-index-of-juniorbondsmaturities-to-be-liquidated.", "labels": ["OpenZeppelin"]}, {"title": "Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.", "body": "Additionally the protocol specification (out of scope of the audit) contains many typos. Consider correcting these typos to improve code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#additionally-the-protocol-specification-(out-of-scope-of-the-audit)-contains-many-typos.-consider-correcting-these-typos-to-improve-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed in commit 025c654d59fcfd290c4730335bc9dd7cdec38048. Many of the above typos still exist in the codebase. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-in-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-many-of-the-above-typos-still-exist-in-the-codebase.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N14] Uninformative revert messages in require statements", "body": "[N14] Uninformative revert messages in require statements", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n14]-uninformative-revert-messages-in-require-statements", "labels": ["OpenZeppelin"]}, {"title": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.", "body": "There are several instances in the codebase where require statements have ambiguous or imprecise error messages. Below is a non-exhaustive list of identified instances.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#there-are-several-instances-in-the-codebase-where-require-statements-have-ambiguous-or-imprecise-error-messages.-below-is-a-non-exhaustive-list-of-identified-instances.", "labels": ["OpenZeppelin"]}, {"title": "Line 42 of BondModelV1.sol", "body": "Line 42 of BondModelV1.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-42-of-bondmodelv1.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 366 of CompoundProvider.sol", "body": "Line 366 of CompoundProvider.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-366-of-compoundprovider.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 329 of SmartYield.sol", "body": "Line 329 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-329-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 495 of SmartYield.sol", "body": "Line 495 of SmartYield.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-495-of-smartyield.sol", "labels": ["OpenZeppelin"]}, {"title": "Line 46 of YieldOracle.sol", "body": "Line 46 of YieldOracle.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#line-46-of-yieldoracle.sol", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "body": "Error messages are intended to notify users about failing conditions, so they should provide enough information so that appropriate corrections can be made to interact with the system. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific instances mentioned above, but also reviewing the entire codebase to make sure every error message is informative and user-friendly.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-so-they-should-provide-enough-information-so-that-appropriate-corrections-can-be-made-to-interact-with-the-system.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-instances-mentioned-above,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly.", "labels": ["OpenZeppelin"]}, {"title": "[N15] Unnecessary empty constructor", "body": "[N15] Unnecessary empty constructor", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n15]-unnecessary-empty-constructor", "labels": ["OpenZeppelin"]}, {"title": "On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.", "body": "On line 35 of IController.sol there is an unnecessary empty constructor. In the absence of the empty constructor, the Governed constructor will still be invoked because of inheritance.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#on-line-35-of-icontroller.sol-there-is-an-unnecessary-empty-constructor.-in-the-absence-of-the-empty-constructor,-the-governed-constructor-will-still-be-invoked-because-of-inheritance.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing empty constructors to improve overall code readability.", "body": "Consider removing empty constructors to improve overall code readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-empty-constructors-to-improve-overall-code-readability.", "labels": ["OpenZeppelin"]}, {"title": "[N16] Unused functions", "body": "[N16] Unused functions", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n16]-unused-functions", "labels": ["OpenZeppelin"]}, {"title": "The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.", "body": "The sqrt and compound functions of the MathUtils library are defined, but they are not used in the codebase.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-sqrt-and-compound-functions-of-the-mathutils-library-are-defined,-but-they-are-not-used-in-the-codebase.", "labels": ["OpenZeppelin"]}, {"title": "Consider removing all unused functions to improve the overall maintainabilty and readability of the code.", "body": "Consider removing all unused functions to improve the overall maintainabilty and readability of the code.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-all-unused-functions-to-improve-the-overall-maintainabilty-and-readability-of-the-code.", "labels": ["OpenZeppelin"]}, {"title": "[N17] Unnecessary imports", "body": "[N17] Unnecessary imports", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#[n17]-unnecessary-imports", "labels": ["OpenZeppelin"]}, {"title": "The below list outlines contract imports that are unused and are therefore unnecessary.", "body": "The below list outlines contract imports that are unused and are therefore unnecessary.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#the-below-list-outlines-contract-imports-that-are-unused-and-are-therefore-unnecessary.", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports console.sol", "body": "SmartYield.sol imports console.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-console.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports IERC20.sol", "body": "SmartYield.sol imports IERC20.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-ierc20.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports Governed.sol", "body": "SmartYield.sol imports Governed.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-governed.sol", "labels": ["OpenZeppelin"]}, {"title": "SmartYield.sol imports IYieldOraclelizable.sol", "body": "SmartYield.sol imports IYieldOraclelizable.sol", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#smartyield.sol-imports-iyieldoraclelizable.sol", "labels": ["OpenZeppelin"]}, {"title": "Consider removing unused import statements to simplify the codebase and increase overall readability.", "body": "Consider removing unused import statements to simplify the codebase and increase overall readability.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#consider-removing-unused-import-statements-to-simplify-the-codebase-and-increase-overall-readability.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "body": "Update: Partially fixed as of commit 025c654d59fcfd290c4730335bc9dd7cdec38048. The IERC20 import still remains. The referenced commit includes other changes to the codebase which have not been reviewed by OpenZeppelin.", "html_url": "https://blog.openzeppelin.com/barnbridge-smart-yield-bonds-audit#update:-partially-fixed-as-of-commit-025c654d59fcfd290c4730335bc9dd7cdec38048.-the-ierc20-import-still-remains.-the-referenced-commit-includes-other-changes-to-the-codebase-which-have-not-been-reviewed-by-openzeppelin.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Inconsistent style", "body": "[N01] Inconsistent style", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n01]-inconsistent-style", "labels": ["OpenZeppelin"]}, {"title": "Within the Governor Bravo contracts, there are a few instances of inconsistency in coding style. We have identified the following:", "body": "Within the Governor Bravo contracts, there are a few instances of inconsistency in coding style. We have identified the following:", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#within-the-governor-bravo-contracts,-there-are-a-few-instances-of-inconsistency-in-coding-style.-we-have-identified-the-following:", "labels": ["OpenZeppelin"]}, {"title": "Some external or public functions begin with underscores, such as _initiate, while others do not, such as castVote. Additionally, some internal functions begin with underscores, such as _queueOrRevert, while some do not, such as getChainId. Often, leading underscores are used for internal functions only, to increase the code\u2019s readability. Consider changing function names so that there is a consistent naming style within the Governor Bravo contracts.", "body": "Some external or public functions begin with underscores, such as _initiate, while others do not, such as castVote. Additionally, some internal functions begin with underscores, such as _queueOrRevert, while some do not, such as getChainId. Often, leading underscores are used for internal functions only, to increase the code\u2019s readability. Consider changing function names so that there is a consistent naming style within the Governor Bravo contracts.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#some-external-or-public-functions-begin-with-underscores,-such-as-_initiate,-while-others-do-not,-such-as-castvote.-additionally,-some-internal-functions-begin-with-underscores,-such-as-_queueorrevert,-while-some-do-not,-such-as-getchainid.-often,-leading-underscores-are-used-for-internal-functions-only,-to-increase-the-code\u2019s-readability.-consider-changing-function-names-so-that-there-is-a-consistent-naming-style-within-the-governor-bravo-contracts.", "labels": ["OpenZeppelin"]}, {"title": "To improve readability, lines 105 and 106 of the GovernorBravoDelegate contract should be converted into the equivalent used in line 95 or 79.", "body": "To improve readability, lines 105 and 106 of the GovernorBravoDelegate contract should be converted into the equivalent used in line 95 or 79.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#to-improve-readability,-lines-105-and-106-of-the-governorbravodelegate-contract-should-be-converted-into-the-equivalent-used-in-line-95-or-79.", "labels": ["OpenZeppelin"]}, {"title": "The constant name and the constant MIN_PROPOSAL_THRESHOLD are declared differently than the pure functions quorumVotes and proposalMaxOperations, but they all behave as constants within the code. Consider documenting the discrepancy in declaration style, or changing the declarations of all four to be consistent.", "body": "The constant name and the constant MIN_PROPOSAL_THRESHOLD are declared differently than the pure functions quorumVotes and proposalMaxOperations, but they all behave as constants within the code. Consider documenting the discrepancy in declaration style, or changing the declarations of all four to be consistent.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-constant-name-and-the-constant-min_proposal_threshold-are-declared-differently-than-the-pure-functions-quorumvotes-and-proposalmaxoperations,-but-they-all-behave-as-constants-within-the-code.-consider-documenting-the-discrepancy-in-declaration-style,-or-changing-the-declarations-of-all-four-to-be-consistent.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #7.", "body": "Update: Fixed in pull request #7.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-fixed-in-pull-request-#7.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Misleading revert messages", "body": "[N02] Misleading revert messages", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n02]-misleading-revert-messages", "labels": ["OpenZeppelin"]}, {"title": "The error message returned on line 90 of GovernorBravoDelegate implies that queueing has failed because there is already a proposal with the chosen eta. However, it is possible to queue multiple proposals with the same eta. This require will fail only when the exact same action has already been queued.", "body": "The error message returned on line 90 of GovernorBravoDelegate implies that queueing has failed because there is already a proposal with the chosen eta. However, it is possible to queue multiple proposals with the same eta. This require will fail only when the exact same action has already been queued.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-error-message-returned-on-line-90-of-governorbravodelegate-implies-that-queueing-has-failed-because-there-is-already-a-proposal-with-the-chosen-eta.-however,-it-is-possible-to-queue-multiple-proposals-with-the-same-eta.-this-require-will-fail-only-when-the-exact-same-action-has-already-been-queued.", "labels": ["OpenZeppelin"]}, {"title": "Additionally, the error message returned on line 288 of GovernorBravoDelegate implies only the admin is allowed to call the acceptAdmin function. In actuality, the pendingAdmin role is the only one allowed to call this function. Since pendingAdmin and admin are two distinct roles, this error message should be changed to match this distinction.", "body": "Additionally, the error message returned on line 288 of GovernorBravoDelegate implies only the admin is allowed to call the acceptAdmin function. In actuality, the pendingAdmin role is the only one allowed to call this function. Since pendingAdmin and admin are two distinct roles, this error message should be changed to match this distinction.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#additionally,-the-error-message-returned-on-line-288-of-governorbravodelegate-implies-only-the-admin-is-allowed-to-call-the-acceptadmin-function.-in-actuality,-the-pendingadmin-role-is-the-only-one-allowed-to-call-this-function.-since-pendingadmin-and-admin-are-two-distinct-roles,-this-error-message-should-be-changed-to-match-this-distinction.", "labels": ["OpenZeppelin"]}, {"title": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough. Furthermore, for consistency, consider reusing error messages when extremely similar conditions are checked.", "body": "Error messages are intended to notify users about failing conditions, and should provide enough information so that the appropriate corrections needed to interact with the system can be applied. Uninformative error messages greatly damage the overall user experience, thus lowering the system\u2019s quality. Therefore, consider not only fixing the specific issues mentioned, but also reviewing the entire codebase to make sure every error message is informative and user-friendly enough. Furthermore, for consistency, consider reusing error messages when extremely similar conditions are checked.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#error-messages-are-intended-to-notify-users-about-failing-conditions,-and-should-provide-enough-information-so-that-the-appropriate-corrections-needed-to-interact-with-the-system-can-be-applied.-uninformative-error-messages-greatly-damage-the-overall-user-experience,-thus-lowering-the-system\u2019s-quality.-therefore,-consider-not-only-fixing-the-specific-issues-mentioned,-but-also-reviewing-the-entire-codebase-to-make-sure-every-error-message-is-informative-and-user-friendly-enough.-furthermore,-for-consistency,-consider-reusing-error-messages-when-extremely-similar-conditions-are-checked.", "labels": ["OpenZeppelin"]}, {"title": "Update: Partially fixed in pull request 8. The error message on line 90 of GovernorBravoDelegate has not been changed. Consider updating this message for greater clarity.", "body": "Update: Partially fixed in pull request 8. The error message on line 90 of GovernorBravoDelegate has not been changed. Consider updating this message for greater clarity.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-partially-fixed-in-pull-request-8.-the-error-message-on-line-90-of-governorbravodelegate-has-not-been-changed.-consider-updating-this-message-for-greater-clarity.", "labels": ["OpenZeppelin"]}, {"title": "[N03] Overflow protection unneeded", "body": "[N03] Overflow protection unneeded", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n03]-overflow-protection-unneeded", "labels": ["OpenZeppelin"]}, {"title": "Solidity version 0.8 and above has built-in overflow protection for math. The internal functions add256 and sub256 provide overflow checking functionality. Using solidity 0.8, these are unneeded.", "body": "Solidity version 0.8 and above has built-in overflow protection for math. The internal functions add256 and sub256 provide overflow checking functionality. Using solidity 0.8, these are unneeded.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#solidity-version-0.8-and-above-has-built-in-overflow-protection-for-math.-the-internal-functions-add256-and-sub256-provide-overflow-checking-functionality.-using-solidity-0.8,-these-are-unneeded.", "labels": ["OpenZeppelin"]}, {"title": "Consider upgrading to Solidity 0.8 and removing instances of add256 and sub256. Utilizing built-in checks reduces code size and therefore the surface for error.", "body": "Consider upgrading to Solidity 0.8 and removing instances of add256 and sub256. Utilizing built-in checks reduces code size and therefore the surface for error.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#consider-upgrading-to-solidity-0.8-and-removing-instances-of-add256-and-sub256.-utilizing-built-in-checks-reduces-code-size-and-therefore-the-surface-for-error.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Declare uint as uint256", "body": "[N04] Declare uint as uint256", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n04]-declare-uint-as-uint256", "labels": ["OpenZeppelin"]}, {"title": "In the audited contracts, there is a general use of unsigned integer variables declared as uint.", "body": "In the audited contracts, there is a general use of unsigned integer variables declared as uint.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-the-audited-contracts,-there-is-a-general-use-of-unsigned-integer-variables-declared-as-uint.", "labels": ["OpenZeppelin"]}, {"title": "To favor explicitness, consider replacing all instances of uint to uint256.", "body": "To favor explicitness, consider replacing all instances of uint to uint256.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#to-favor-explicitness,-consider-replacing-all-instances-of-uint-to-uint256.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Upgradeable proxy design can be improved", "body": "[N05] Upgradeable proxy design can be improved", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#[n05]-upgradeable-proxy-design-can-be-improved", "labels": ["OpenZeppelin"]}, {"title": "The new governance implementation has been designed to have the GovernorBravoDelegator acting as a proxy for the GovernorBravoDelegate contract.", "body": "The new governance implementation has been designed to have the GovernorBravoDelegator acting as a proxy for the GovernorBravoDelegate contract.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#the-new-governance-implementation-has-been-designed-to-have-the-governorbravodelegator-acting-as-a-proxy-for-the-governorbravodelegate-contract.", "labels": ["OpenZeppelin"]}, {"title": "In this sense, the GovernorBravoDelegate contract is just the logic implementation layer, and the proxy is in charge of forwarding any call through a delegatecall instruction, and of mantaining the storage of the proxied contract.", "body": "In this sense, the GovernorBravoDelegate contract is just the logic implementation layer, and the proxy is in charge of forwarding any call through a delegatecall instruction, and of mantaining the storage of the proxied contract.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-this-sense,-the-governorbravodelegate-contract-is-just-the-logic-implementation-layer,-and-the-proxy-is-in-charge-of-forwarding-any-call-through-a-delegatecall-instruction,-and-of-mantaining-the-storage-of-the-proxied-contract.", "labels": ["OpenZeppelin"]}, {"title": "Separating storage and logic into two separate contracts is a common pattern to follow when upgradeability of the logic layer is needed, but there are some downsides that must be addressed when implementing it.", "body": "Separating storage and logic into two separate contracts is a common pattern to follow when upgradeability of the logic layer is needed, but there are some downsides that must be addressed when implementing it.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#separating-storage-and-logic-into-two-separate-contracts-is-a-common-pattern-to-follow-when-upgradeability-of-the-logic-layer-is-needed,-but-there-are-some-downsides-that-must-be-addressed-when-implementing-it.", "labels": ["OpenZeppelin"]}, {"title": "Storage collision or function clashing are two of them.", "body": "Storage collision or function clashing are two of them.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#storage-collision-or-function-clashing-are-two-of-them.", "labels": ["OpenZeppelin"]}, {"title": "In the audited contracts, we did not identify any possible storage collisions, but there\u2019s a lack of control against function clashing. Moreover, the GovernorBravoDelegateStorageV1 in the GovernorBravoInterfaces.sol file defines variables of different types in mixed order and this is prone to errors when contract upgrades change the storage layout of the contracts.", "body": "In the audited contracts, we did not identify any possible storage collisions, but there\u2019s a lack of control against function clashing. Moreover, the GovernorBravoDelegateStorageV1 in the GovernorBravoInterfaces.sol file defines variables of different types in mixed order and this is prone to errors when contract upgrades change the storage layout of the contracts.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#in-the-audited-contracts,-we-did-not-identify-any-possible-storage-collisions,-but-there\u2019s-a-lack-of-control-against-function-clashing.-moreover,-the-governorbravodelegatestoragev1-in-the-governorbravointerfaces.sol-file-defines-variables-of-different-types-in-mixed-order-and-this-is-prone-to-errors-when-contract-upgrades-change-the-storage-layout-of-the-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Consider using the OpenZeppelin unstructured storage proxy pattern to improve design robustness and have proper control over possible function clashes and storage collisions. Alternatively, consider documenting how storage collisions and function clashes will be handled in future upgrades, and consider rearranging the declaration order of GovernorBravoDelegateStorageV1 so that it follows some predictable pattern.", "body": "Consider using the OpenZeppelin unstructured storage proxy pattern to improve design robustness and have proper control over possible function clashes and storage collisions. Alternatively, consider documenting how storage collisions and function clashes will be handled in future upgrades, and consider rearranging the declaration order of GovernorBravoDelegateStorageV1 so that it follows some predictable pattern.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#consider-using-the-openzeppelin-unstructured-storage-proxy-pattern-to-improve-design-robustness-and-have-proper-control-over-possible-function-clashes-and-storage-collisions.-alternatively,-consider-documenting-how-storage-collisions-and-function-clashes-will-be-handled-in-future-upgrades,-and-consider-rearranging-the-declaration-order-of-governorbravodelegatestoragev1-so-that-it-follows-some-predictable-pattern.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in pull request #9. Storage variables within GovernorBravoInterfaces are now declared in a predictable order.", "body": "Update: Fixed in pull request #9. Storage variables within GovernorBravoInterfaces are now declared in a predictable order.", "html_url": "https://blog.openzeppelin.com/compound-governor-bravo-audit#update:-fixed-in-pull-request-#9.-storage-variables-within-governorbravointerfaces-are-now-declared-in-a-predictable-order.", "labels": ["OpenZeppelin"]}, {"title": "[N01] Commented out code", "body": "[N01] Commented out code", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n01]-commented-out-code", "labels": ["OpenZeppelin"]}, {"title": "The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.", "body": "The setTimeWeight function contains two lines of commented out code without an explanation. As is, these lines provide little value and may confuse external contributors. Consider either removing these lines or providing an explanation. If they are placeholders for a future implementation, it may be better to track them in a separate document for discussion.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-settimeweight-function-contains-two-lines-of-commented-out-code-without-an-explanation.-as-is,-these-lines-provide-little-value-and-may-confuse-external-contributors.-consider-either-removing-these-lines-or-providing-an-explanation.-if-they-are-placeholders-for-a-future-implementation,-it-may-be-better-to-track-them-in-a-separate-document-for-discussion.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#34.", "body": "Update: Fixed in PR#34.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#34.", "labels": ["OpenZeppelin"]}, {"title": "[N02] Functions return without parameters specified", "body": "[N02] Functions return without parameters specified", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n02]-functions-return-without-parameters-specified", "labels": ["OpenZeppelin"]}, {"title": "delegate and", "body": "delegate and", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#delegate-and", "labels": ["OpenZeppelin"]}, {"title": "delegateBySig functions within", "body": "delegateBySig functions within", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#delegatebysig-functions-within", "labels": ["OpenZeppelin"]}, {"title": "Tribe.sol execute the", "body": "Tribe.sol execute the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#tribe.sol-execute-the", "labels": ["OpenZeppelin"]}, {"title": "_delegate function in", "body": "_delegate function in", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_delegate-function-in", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. In the words of the Fei Team: \u201cWant to minimize changes to forked DAO contracts\u201d.", "body": "Update: Acknowledged. In the words of the Fei Team: \u201cWant to minimize changes to forked DAO contracts\u201d.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-acknowledged.-in-the-words-of-the-fei-team:-\u201cwant-to-minimize-changes-to-forked-dao-contracts\u201d.", "labels": ["OpenZeppelin"]}, {"title": "[N03] GenesisGroup is a token unnecessarily", "body": "[N03] GenesisGroup is a token unnecessarily", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n03]-genesisgroup-is-a-token-unnecessarily", "labels": ["OpenZeppelin"]}, {"title": "GenesisGroup contract is a token, however this token\u2019s use will last a maximum of", "body": "GenesisGroup contract is a token, however this token\u2019s use will last a maximum of", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#genesisgroup-contract-is-a-token,-however-this-token\u2019s-use-will-last-a-maximum-of", "labels": ["OpenZeppelin"]}, {"title": "3 days. The", "body": "3 days. The", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#3-days.-the", "labels": ["OpenZeppelin"]}, {"title": "mintsFGENtokens to users that deposit collateral, and then burns all", "body": "mintsFGENtokens to users that deposit collateral, and then burns all", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#mintsfgentokens-to-users-that-deposit-collateral,-and-then-burns-all", "labels": ["OpenZeppelin"]}, {"title": "redeem them for", "body": "redeem them for", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#redeem-them-for", "labels": ["OpenZeppelin"]}, {"title": "Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.", "body": "Update: Acknowledged. The Fei Team decided to keep the GenesisGroup as a token, since they expect secondary markets to exist to allow users exiting Genesis by selling their FGEN tokens.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-acknowledged.-the-fei-team-decided-to-keep-the-genesisgroup-as-a-token,-since-they-expect-secondary-markets-to-exist-to-allow-users-exiting-genesis-by-selling-their-fgen-tokens.", "labels": ["OpenZeppelin"]}, {"title": "[N04] Improper use of require", "body": "[N04] Improper use of require", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n04]-improper-use-of-require", "labels": ["OpenZeppelin"]}, {"title": "As outlined in the Solidity docs,", "body": "As outlined in the Solidity docs,", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#as-outlined-in-the-solidity-docs,", "labels": ["OpenZeppelin"]}, {"title": "_totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where", "body": "_totalRedeemablePoolTokens and _redeemablePoolTokens. Given that a situation where", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_totalredeemablepooltokens-and-_redeemablepooltokens.-given-that-a-situation-where", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#51.", "body": "Update: Fixed in PR#51.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#51.", "labels": ["OpenZeppelin"]}, {"title": "[N05] Inconsistencies around time", "body": "[N05] Inconsistencies around time", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n05]-inconsistencies-around-time", "labels": ["OpenZeppelin"]}, {"title": "While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.", "body": "While much of the codebase uses timestamps to measure time, some time intervals are measured instead as a number of blocks. In these instances, comments are used to indicate the time interval desired that led to the specified number of blocks, however, these comments use inconsistent methods of estimation.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#while-much-of-the-codebase-uses-timestamps-to-measure-time,-some-time-intervals-are-measured-instead-as-a-number-of-blocks.-in-these-instances,-comments-are-used-to-indicate-the-time-interval-desired-that-led-to-the-specified-number-of-blocks,-however,-these-comments-use-inconsistent-methods-of-estimation.", "labels": ["OpenZeppelin"]}, {"title": "For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.", "body": "For instance, in GovernorAlpha the votingPeriod value, 17280, is accompanied by inline documentation that assumes 15-second block times. In CoreOrchestrator, the INCENTIVE_GROWTH_RATE value has inline documentation that assumes 12-second block times. The whitepaper and other project documentation generally match this inline documentation.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#for-instance,-in-governoralpha-the-votingperiod-value,-17280,-is-accompanied-by-inline-documentation-that-assumes-15-second-block-times.-in-coreorchestrator,-the-incentive_growth_rate-value-has-inline-documentation-that-assumes-12-second-block-times.-the-whitepaper-and-other-project-documentation-generally-match-this-inline-documentation.", "labels": ["OpenZeppelin"]}, {"title": "Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours \u2013 a significant deviation that could result in user confusion.", "body": "Even when a number of blocks is converted to a time interval using a consistent block time assumption, those approximations can deviate from reality. Inconsistent block time assumptions only make things more confusing. Block times can and will be variable, and the actual current block times of the Ethereum network have been closer to ~13s. This means that the actual time intervals observed in production could deviate from the documentation by as much as 13%. For example, the votingPeriod value is documented as being equivalent to approximately three days, when, in reality, it would be closer to two days and fourteen hours \u2013 a significant deviation that could result in user confusion.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#even-when-a-number-of-blocks-is-converted-to-a-time-interval-using-a-consistent-block-time-assumption,-those-approximations-can-deviate-from-reality.-inconsistent-block-time-assumptions-only-make-things-more-confusing.-block-times-can-and-will-be-variable,-and-the-actual-current-block-times-of-the-ethereum-network-have-been-closer-to-~13s.-this-means-that-the-actual-time-intervals-observed-in-production-could-deviate-from-the-documentation-by-as-much-as-13%.-for-example,-the-votingperiod-value-is-documented-as-being-equivalent-to-approximately-three-days,-when,-in-reality,-it-would-be-closer-to-two-days-and-fourteen-hours-\u2013-a-significant-deviation-that-could-result-in-user-confusion.", "labels": ["OpenZeppelin"]}, {"title": "To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.", "body": "To reduce confusion and increase the predictability of time intervals, consider using block timestamps for time intervals where possible. Alternatively, document assumptions about block times clearly and consistently, and be sure to explicitly reflect the variability of the time intervals they represent.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#to-reduce-confusion-and-increase-the-predictability-of-time-intervals,-consider-using-block-timestamps-for-time-intervals-where-possible.-alternatively,-document-assumptions-about-block-times-clearly-and-consistently,-and-be-sure-to-explicitly-reflect-the-variability-of-the-time-intervals-they-represent.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.", "body": "Update: Fixed in PR#50. Now, block times are assumed to be of ~13s.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#50.-now,-block-times-are-assumed-to-be-of-~13s.", "labels": ["OpenZeppelin"]}, {"title": "[N06] Inconsistent coding style", "body": "[N06] Inconsistent coding style", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n06]-inconsistent-coding-style", "labels": ["OpenZeppelin"]}, {"title": "There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.", "body": "There are general inconsistencies and some deviations from the Solidity Style Guide throughout the codebase. Below is a non-exhaustive list of inconsistent coding styles observed.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-are-general-inconsistencies-and-some-deviations-from-the-solidity-style-guide-throughout-the-codebase.-below-is-a-non-exhaustive-list-of-inconsistent-coding-styles-observed.", "labels": ["OpenZeppelin"]}, {"title": "While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:", "body": "While most public function names do not contain an underscore, some begin with one underscore and others begin with two underscores. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#while-most-public-function-names-do-not-contain-an-underscore,-some-begin-with-one-underscore-and-others-begin-with-two-underscores.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The _feiTribeExchangeRate function", "body": "The _feiTribeExchangeRate function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-_feitribeexchangerate-function", "labels": ["OpenZeppelin"]}, {"title": "The __acceptAdmin function", "body": "The __acceptAdmin function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-__acceptadmin-function", "labels": ["OpenZeppelin"]}, {"title": "The __abdicate function", "body": "The __abdicate function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-__abdicate-function", "labels": ["OpenZeppelin"]}, {"title": "Some internal function names start with an underscore, while others do not. For example:", "body": "Some internal function names start with an underscore, while others do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-internal-function-names-start-with-an-underscore,-while-others-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "_writeCheckpoint and safe32 are both internal functions in the Tribe contract.", "body": "_writeCheckpoint and safe32 are both internal functions in the Tribe contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_writecheckpoint-and-safe32-are-both-internal-functions-in-the-tribe-contract.", "labels": ["OpenZeppelin"]}, {"title": "_setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.", "body": "_setBeneficiary and setLockedToken are both internal functions in the LinearTokenTimelock contract.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_setbeneficiary-and-setlockedtoken-are-both-internal-functions-in-the-lineartokentimelock-contract.", "labels": ["OpenZeppelin"]}, {"title": "Some parameters end with an underscore, while most do not. For example:", "body": "Some parameters end with an underscore, while most do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-parameters-end-with-an-underscore,-while-most-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The delay_ parameter in the setDelay function", "body": "The delay_ parameter in the setDelay function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-delay_-parameter-in-the-setdelay-function", "labels": ["OpenZeppelin"]}, {"title": "The pendingAdmin_ parameter in the setPendingAdmin function", "body": "The pendingAdmin_ parameter in the setPendingAdmin function", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-pendingadmin_-parameter-in-the-setpendingadmin-function", "labels": ["OpenZeppelin"]}, {"title": "Some lines of code are very long. For example:", "body": "Some lines of code are very long. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-lines-of-code-are-very-long.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The propose function definition is 139 characters long.", "body": "The propose function definition is 139 characters long.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-propose-function-definition-is-139-characters-long.", "labels": ["OpenZeppelin"]}, {"title": "The getActions function definition is 164 characters long.", "body": "The getActions function definition is 164 characters long.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-getactions-function-definition-is-164-characters-long.", "labels": ["OpenZeppelin"]}, {"title": "Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:", "body": "Some string literals are surrounded by double quotes (\"), while others are surrounded by single quotes ('). For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-string-literals-are-surrounded-by-double-quotes-(\"),-while-others-are-surrounded-by-single-quotes-(').-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The Fei constructor uses double quotes to pass strings to the ERC20 function.", "body": "The Fei constructor uses double quotes to pass strings to the ERC20 function.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-fei-constructor-uses-double-quotes-to-pass-strings-to-the-erc20-function.", "labels": ["OpenZeppelin"]}, {"title": "The Fei constructor uses single quotes to pass a string to the keccak256 function.", "body": "The Fei constructor uses single quotes to pass a string to the keccak256 function.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-fei-constructor-uses-single-quotes-to-pass-a-string-to-the-keccak256-function.", "labels": ["OpenZeppelin"]}, {"title": "There is mixed use of spaces and tabs for indentation. For example:", "body": "There is mixed use of spaces and tabs for indentation. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#there-is-mixed-use-of-spaces-and-tabs-for-indentation.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.", "body": "The incentivize function uses a mixture of spaces and tabs for indentation, sometimes on the same line.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-incentivize-function-uses-a-mixture-of-spaces-and-tabs-for-indentation,-sometimes-on-the-same-line.", "labels": ["OpenZeppelin"]}, {"title": "Some functions use named return variables, while others do not. For example:", "body": "Some functions use named return variables, while others do not. For example:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#some-functions-use-named-return-variables,-while-others-do-not.-for-example:", "labels": ["OpenZeppelin"]}, {"title": "The IDOOrchestrator contract\u2019s init function declares named variables for returned values.", "body": "The IDOOrchestrator contract\u2019s init function declares named variables for returned values.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-idoorchestrator-contract\u2019s-init-function-declares-named-variables-for-returned-values.", "labels": ["OpenZeppelin"]}, {"title": "The ControllerOchestrator contract\u2019s init function does not declare a named variable for the returned value.", "body": "The ControllerOchestrator contract\u2019s init function does not declare a named variable for the returned value.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-controllerochestrator-contract\u2019s-init-function-does-not-declare-a-named-variable-for-the-returned-value.", "labels": ["OpenZeppelin"]}, {"title": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "body": "Consider enforcing a standard coding style, such as that provided by the Solidity Style Guide, to improve the project\u2019s overall legibility. Also consider using a linter like Solhint to define a style and analyze the codebase for style deviations.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#consider-enforcing-a-standard-coding-style,-such-as-that-provided-by-the-solidity-style-guide,-to-improve-the-project\u2019s-overall-legibility.-also-consider-using-a-linter-like-solhint-to-define-a-style-and-analyze-the-codebase-for-style-deviations.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#54.", "body": "Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#54.", "labels": ["OpenZeppelin"]}, {"title": "[N07] Inconsistent error message format", "body": "[N07] Inconsistent error message format", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n07]-inconsistent-error-message-format", "labels": ["OpenZeppelin"]}, {"title": "Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.", "body": "Error messages in the codebase follow different formats. In particular, messages from the dao contracts conform to the format Contract_Name::Function_Name: message, while other messages (like those in the GenesisGroup contract) conform to the format Contract_Name: message. To improve readability and facilitate debugging, consider following a consistent format across all error messages.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#error-messages-in-the-codebase-follow-different-formats.-in-particular,-messages-from-the-dao-contracts-conform-to-the-format-contract_name::function_name:-message,-while-other-messages-(like-those-in-the-genesisgroup-contract)-conform-to-the-format-contract_name:-message.-to-improve-readability-and-facilitate-debugging,-consider-following-a-consistent-format-across-all-error-messages.", "labels": ["OpenZeppelin"]}, {"title": "In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.", "body": "In addition, some error messages reference an incorrect function name, such as those found in the transferFrom function, the _moveDelegates function, and the Timelock constructor. These should be resolved.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#in-addition,-some-error-messages-reference-an-incorrect-function-name,-such-as-those-found-in-the-transferfrom-function,-the-_movedelegates-function,-and-the-timelock-constructor.-these-should-be-resolved.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#47.", "body": "Update: Fixed in PR#47.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#47.", "labels": ["OpenZeppelin"]}, {"title": "[N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle", "body": "[N08] Inconsistent methods for retrieving cumulative price from Uniswap oracle", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n08]-inconsistent-methods-for-retrieving-cumulative-price-from-uniswap-oracle", "labels": ["OpenZeppelin"]}, {"title": "update function in the", "body": "UniswapOracle contract uses the  currentCumulativePrice function of the  _init function in the same contract retrieves the same values using  separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.  Update: Fixed in PR#46.  [N09] Incorrect GovernorAlpha name constant  The GovernorAlpha contract is forked from Compound, and maintains the name constant Compound Governor Alpha. Consider updating this to reflect the FEI protocol using the TRIBE governance token.  Update: Fixed in PR#35.  [N10] Interfaces omit some external functions  Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:  IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.  IFei omits the permit function that is implemented in Fei.  IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.  IPool omits the burnFrom function that is implemented in Pool.  IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.  Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.  Update: Fixed in PR#53.  [N11] Uninitializable global variable in LinearTimelockToken  lockedToken global variable in the  LinearTokenTimelock contract is only initializable by the  setLockedToken function. As is, the  Update: Fixed in PR#39.  [N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec commen", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update-function-in-the", "labels": ["OpenZeppelin"]}, {"title": "UniswapOracle contract uses the", "body": "UniswapOracle contract uses the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#uniswaporacle-contract-uses-the", "labels": ["OpenZeppelin"]}, {"title": "currentCumulativePrice function of the", "body": "currentCumulativePrice function of the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#currentcumulativeprice-function-of-the", "labels": ["OpenZeppelin"]}, {"title": "_init function in the same contract retrieves the same values using", "body": "_init function in the same contract retrieves the same values using", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#_init-function-in-the-same-contract-retrieves-the-same-values-using", "labels": ["OpenZeppelin"]}, {"title": "separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.", "body": "separate individual functions. To improve legibility and facilitate refactoring, consider using a consistent method for retrieving cumulative prices from the Uniswap oracle.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#separate-individual-functions.-to-improve-legibility-and-facilitate-refactoring,-consider-using-a-consistent-method-for-retrieving-cumulative-prices-from-the-uniswap-oracle.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#46.", "body": "Update: Fixed in PR#46.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#46.", "labels": ["OpenZeppelin"]}, {"title": "[N09] Incorrect GovernorAlpha name constant", "body": "[N09] Incorrect GovernorAlpha name constant", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n09]-incorrect-governoralpha-name-constant", "labels": ["OpenZeppelin"]}, {"title": "The GovernorAlpha contract is forked from Compound, and maintains the name constant \u201cCompound Governor Alpha\u201d. Consider updating this to reflect the FEI protocol using the TRIBE governance token.", "body": "The GovernorAlpha contract is forked from Compound, and maintains the name constant \u201cCompound Governor Alpha\u201d. Consider updating this to reflect the FEI protocol using the TRIBE governance token.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#the-governoralpha-contract-is-forked-from-compound,-and-maintains-the-name-constant-\u201ccompound-governor-alpha\u201d.-consider-updating-this-to-reflect-the-fei-protocol-using-the-tribe-governance-token.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#35.", "body": "Update: Fixed in PR#35.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#35.", "labels": ["OpenZeppelin"]}, {"title": "[N10] Interfaces omit some external functions", "body": "[N10] Interfaces omit some external functions", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n10]-interfaces-omit-some-external-functions", "labels": ["OpenZeppelin"]}, {"title": "Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:", "body": "Throughout the codebase there are instances of interface contracts omitting some of the public or external functions that their corresponding implementation contracts define. Some examples include:", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#throughout-the-codebase-there-are-instances-of-interface-contracts-omitting-some-of-the-public-or-external-functions-that-their-corresponding-implementation-contracts-define.-some-examples-include:", "labels": ["OpenZeppelin"]}, {"title": "IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.", "body": "IBondingCurveOracle omits the initialPrice function that is implemented in BondingCurveOracle.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ibondingcurveoracle-omits-the-initialprice-function-that-is-implemented-in-bondingcurveoracle.", "labels": ["OpenZeppelin"]}, {"title": "IFei omits the permit function that is implemented in Fei.", "body": "IFei omits the permit function that is implemented in Fei.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ifei-omits-the-permit-function-that-is-implemented-in-fei.", "labels": ["OpenZeppelin"]}, {"title": "IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.", "body": "IGenesisGroup omits the burnFrom function that is implemented in GenesisGroup.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#igenesisgroup-omits-the-burnfrom-function-that-is-implemented-in-genesisgroup.", "labels": ["OpenZeppelin"]}, {"title": "IPool omits the burnFrom function that is implemented in Pool.", "body": "IPool omits the burnFrom function that is implemented in Pool.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#ipool-omits-the-burnfrom-function-that-is-implemented-in-pool.", "labels": ["OpenZeppelin"]}, {"title": "IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.", "body": "IUniswapPCVController omits the minDistanceForReweight that is implemented in EthUniswapPCVController.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#iuniswappcvcontroller-omits-the-mindistanceforreweight-that-is-implemented-in-ethuniswappcvcontroller.", "labels": ["OpenZeppelin"]}, {"title": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "body": "Incomplete interfaces may introduce confusion for users, developers, and auditors alike. To improve overall code legibility and minimize confusion, consider modifying the interface contracts to reflect all of the public and external functions from their respective implementation contracts.", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#incomplete-interfaces-may-introduce-confusion-for-users,-developers,-and-auditors-alike.-to-improve-overall-code-legibility-and-minimize-confusion,-consider-modifying-the-interface-contracts-to-reflect-all-of-the-public-and-external-functions-from-their-respective-implementation-contracts.", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#53.", "body": "[N22] Test and production constants in the same codebase  The CoreOrchestrator contract defines the TEST_MODE boolean variable which is used to define several constants in the system. This decreases legibility of production code, and makes the systems integral values more error-prone. Consider instead having different environments for production and testing, with different contracts.  Update: Fixed in PR#38. All the test constants were removed from the master branch.  [N23] Unnecessarily small integer sizes  In Solidity, using integers smaller than 256 bits tends to increase gas costs because the Ethereum Virtual Machine must perform additional operations to zero out the unused bits. This can be justified by savings in storage costs in some scenarios, however, that is not generally the case in this codebase. In several contracts, unsigned integers are being unnecessarily sized less than 256 bits. Examples include:  The uint128 variables in the Pool contract  The uint96 variables in the Tribe contract  The uint32 variables in the Timed contract  In some instances, these smaller integer sizes can cause function reverts earlier than necessary. In particular, since the _timestamp and _initTimed functions cast block times to uint32 values, functions using the Timed contract to manage control flow will revert beginning February 7, 2106 at 6:28:16 AM GMT.  Consider using integers of size 256 bits to improve gas efficiency and mitigate function reverts.  Update: Partially fixed in PR#37, PR#44. In the words of the Fei team: We are not fixing the issue in Tribe.sol as this is a forked Compound contract and we wish to keep it as untouched as possible.  [N24] Unnecessary if statement  availableForRelease function fetches the elapsed time since the start timestamp using the  timestamp function inherited from the  Timed contract. It then  checks if this is larger than duration, and if so, caps the value at  timestamp function from the  caps the result to duration, so this  Update: Fixed in PR#8.  [N25] Unnecessary imports  Core.sol imports IFei.sol unnecessarily, because  Fei.sol already imports  Core.sol imports IERC20.sol unnecessarily, because  IFei.sol already imports  Pool.sol imports SafeMathCopy.sol without using it.  BondingCurve.sol imports AccessControl.sol without using it.  EthUniswapPCVController.sol imports IOracle.sol without using it.  UniswapIncentive.sol imports IOracle.sol without using it.  Consider removing redundant and unused imports to improve legibility.  Update: Fixed in PR#45.  [N26] Unreachable, incorrect error message  In the calculateDeviation function in the UniRef contract there is a subtraction with a provided error message argument. This error message is logically unreachable, but it is also incorrect. It currently reads UniRef: price exceeds peg, but should read UniRef: peg exceeds price.  Consider removing or correcting the error message to improve code clarity.  Update: Fixed in PR#37.  [N27] Unnecessary inheritance  The following contracts inherit both ERC20 and ERC20Burnable:  Fei  Pool  GenesisGroup  Update: Fixed in PR#32.  [N28] Use of uint instead of uint256  Across the codebase, there are hundreds of instances of uint, as opposed to uint256. In favor of explicitness, consider replacing all instances of uint with uint256.  Update: Fixed in PR#54.  Conclusions  5 critical and 3 high severity issues were found. Some changes were proposed to follow best practices and reduce the potential attack surface.  Related Posts  ZK Stack VM1.5 Diff Audit  Smart contract Audit. We audited the change to the matter-labs/era-contracts repository between...  Security Audits  L2's  Solidity  Yul  Radiant Riz Audit  Smart contract audit. Audited the radiant-capital/riz repository originally at the v0.0.1-alpha...  Security Audits  Solidity  Across V3 and Oval Incremental Audit  smart contract audit. We audited the across-protocol/contracts repository at commit 95c4f92.  Security Audits  Solidit", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#53.", "labels": ["OpenZeppelin"]}, {"title": "[N11] Uninitializable global variable in LinearTimelockToken", "body": "[N11] Uninitializable global variable in LinearTimelockToken", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n11]-uninitializable-global-variable-in-lineartimelocktoken", "labels": ["OpenZeppelin"]}, {"title": "lockedToken global variable in the", "body": "lockedToken global variable in the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#lockedtoken-global-variable-in-the", "labels": ["OpenZeppelin"]}, {"title": "LinearTokenTimelock contract is only initializable by the", "body": "LinearTokenTimelock contract is only initializable by the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#lineartokentimelock-contract-is-only-initializable-by-the", "labels": ["OpenZeppelin"]}, {"title": "setLockedToken function. As is, the", "body": "setLockedToken function. As is, the", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#setlockedtoken-function.-as-is,-the", "labels": ["OpenZeppelin"]}, {"title": "Update: Fixed in PR#39.", "body": "[N12] Constants not explicitly declared  There are occurrences of literal values being used with unexplained meaning. Some examples include:  The literal value 10000 on line 22 of BondingCurveOrchestrator.sol  The literal value -1 that is often used to represent an approval of infinite tokens in Tribe.sol and throughout the codebase  The literal value 2**112 on line 60 of UniswapOracle.sol  Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain for developers, auditors, and external contributors alike.  Consider defining a constant variable for every magic value used, giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended.  Update: Partially fixed in PR#41. Only the occurrences of magic constants mentioned above were explicitly declared.  [N13] Missing and incomplete event emissions  Several constructors do not emit events after initializing sensitive variables in the system, but when those variables are updated using setter functions, an event is emitted. For example:  The Core contract constructor does not emit the FeiUpdate event.  The OracleRef contract constructor does not emit the OracleUpdate event.  The BondingCurve contract constructor does not emit the ScaleUpdate event.  Some setters, like the setGenesisGroup function, do not emit events. Whereas others, like the setFei function from the same contract, do emit an event.  Consider emitting events for all state changing functions, including those in contract constructors. In addition, consider emitting the old and new values in these XUpdate events to help track changes (e.g. ScaleUpdate(uint256 _oldScale, uint256 _newScale)).  Update: Partially fixed in PR#52. The Fei team elected not to change events to include old update values.  [N14] Naming issues hinder understanding and clarity of the codebase  To favor explicitness and readability, several parts of the contracts may benefit from better naming. Our suggestions are to rename:  state to getProposalState.  releaseWindow to releaseWindowDuration.  timestamp to timeSinceStart.  d and t to duration and timePassed.  dst throughout Tribe.sol to destination.  price0 in the PCVDepositOrchestrator and corresponding interface to isPrice0.  _twfb to _timeWeightedFinalBalance.  threeHalfsRoot to threeHalvesPower or twoThirdsRoot.  twoThirdsRoot to twoThirdsPower or threeHalvesRoot.  calculateDeviation to deviationBelowPeg.  Consider renaming these parts of the contracts to increase overall code clarity.  Update: Fixed in PR#43 and PR#31. Some of the suggestions above were implemented by the Fei team.  [N15] NatSpec comments missing  Many functions do not have NatSpec comments (such as those in the Timelock and LinearTokenTimelock contracts). Furthermore, some functions do not have any comments, for example those in the BondingCurve contract. While many of these functions implement an interface, where the interface does include NatSpec comments, there are several exceptions leaving some code undocumented. In addition, it may improve readability to provide NatSpec comments on the implemented function, rather than on the interface definition. Consider adding NatSpec comments to all public and external functions, and including more comments throughout function implementations.  Update: Partially fixed in PR#56 NatSpec comments were moved from the interfaces to the implementations, but some of these are still incomplete.  [N16] Using now instead of block.timestamp  There are instances in the codebase where now is used rather than block.timestamp to refer to the block time. This term can be misleading and is deprecated in more recent versions of Solidity. This is observed in the following contracts:  Line 55 of Core.sol  Line 123 of GenesisGroup.sol  Line 40 and line 46 of Timed.sol  Line 175 and line 251 of Tribe.sol  Consider using block.timestamp for clarity and to facilitate future upgrades.  Update: Fixed in PR#42.  [N17] Proposals can be canceled in states that are unintuitive  The GovernorAlpha contract is a fork of a Compound contract by the same name. It is responsible for governance proposals, including proposal vote collection, creation, cancellation and execution.  The public cancel function allows a proposal to be canceled only if certain conditions are met. Specifically, if a proposal has already been executed, then it cannot be canceled. However, a proposal that has already been canceled can be canceled again, so too can a proposal thats been defeated or has already expired.  To ensure proposal states align with user expectations, and to avoid any confusion for outside observers, consider also disallowing cancellations for proposals that are canceled, defeated or expired.  Update: Fixed in PR#61. Now, GovernorAlpha proposals can only be cancelled in Active or Pending states.  [N18] Proposal struct storage is inefficie", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#update:-fixed-in-pr#39.", "labels": ["OpenZeppelin"]}, {"title": "[N12] Constants not explicitly declared", "body": "[N12] Constants not explicitly declared", "html_url": "https://blog.openzeppelin.com/fei-protocol-audit#[n12]-constants-not-explicitly-declared", "labels": ["OpenZeppelin"]}]