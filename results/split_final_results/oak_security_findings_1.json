[{"title": "1. Unbounded dictionary records might cause denial of service", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/PegBridge.cdc:86, the records dictionary is used to record existing minting and burning hash identiers as seen in lines 223 and 263. While recording the identiers on-chain are required to prevent replay attacks, this would cause the accounts If the account doesnt hold enough Flow tokens storage capacity to increase limitlessly. proportional to the increased storage capacity, this would cause new transactions to fail as it would put the account over its storage capacity. This issue is also found in contracts/SafeBox.cdc in lines 149 and 185 where it holds the deposit and withdrawal hash identiers.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Adding delay transfer should not be allowed when the contract is paused", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/DelayedTransfer.cdc:73, through the executeDelayXfer function is allowed even if the contract is paused. If a catastrophic adding delay transfers event happens, users may continuously get exploited since new delay transfers can still be added while most other functionalities in the contract are inaccessible.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Public keys are not validated when updating or resetting signers", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/cBridge.cdc:36, the passed signers public keys are directly set without verifying whether the public keys are valid and conform to the hardcoded signature algorithm which is ECDSA_secp256k1. If an invalid public key or a public key with a dierent signature algorithm is passed, the public key construction in lines 61 to 64 would fail, potentially in the causing the whole cBridge contract updateSigners function in lines 157-172. to be unusable. This issue is also present We consider this to be a minor issue since it can only be caused by the admin or existing signers.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Duplicate public keys are not removed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/cBridge.cdc:36, the passed signers public keys are directly set without verifying whether they are duplicates or not. If a public key is twice in the signers dictionary, the signature validation can be replayed and potentially allow the signer to hold more signing power than intended. This issue is also present in the updateSigners function from in lines 157-172. We consider this to be a minor issue since it can only be caused by the admin or existing signers.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Missing logic validations during struct initialization might cause temporary denial of service", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/PegBridge.cdc:52-53, the TokenCfg structs minBurn and maxBurn values are not validated. Specically, the minimum burn amount should be validated to be lower than the maximum burn amount while the maximum burn amount should be validated to be higher than the minimum burn amount if the value is not 0. If the values are initialized incorrectly, the burn function would fail in lines 255-258. This issue is also found present in contracts/SafeBox.cdc from lines 49-50. We consider this to be a minor issue since it can only be caused by the admin.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Sensitive resources can easily be shared and not revoked", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "Throughout the codebase, every admin resource has a createXAdmin method (where X is a placeholder for the resource) that allows the existing resource to create a new admin resource in contracts/SafeBox.cdc:114-116). Due to this, admin resource ownership can be provided to multiple accounts, which increases the attack surface. Admin permissions cannot be revoked in the current implementation, which exacerbates the issue. assigned account another (e.g. that can be to", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Misconguration of chain identier values might lead to replay attack possibility", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/PegBridge.cdc:190 and contracts/SafeBox.cdc:122, the chain identier values use the chID argument, which is supplied by the contract instantiator. That argument is concatenated with the contracts address and name in the next line. Since the chain identier is solely based on what value the contract instantiator provides, this will open up a replay attack possibility if the same chain identier is used across multiple deployments, for example on mainnet and testnet. As a result, this would cause the domainPrefix value to be the same across the mainnet and testnet contracts (assuming the same contract address and name), potentially allowing an attacker to replay mint and withdrawal operations in contracts/PegBridge.cdc:213-214 and contracts/SafeBox.cdc:172-173. We consider this issue to be minor since it would only occur if the contract instantiator instantiated the chain identiers incorrectly.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Token receiving capability may not exist, which leads to failure of deposits", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/SafeBox.cdc:151, the capability for receiving funds gets accessed. There is no validation though to ensure self.account has the public capability stored at tokenCfg.vaultPub. As a result, the deposit operation would fail every time for the specic whitelisted token.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Delay threshold check should use greater than or equal symbol", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Celer/2022-05-14 Audit Report - Celer cBridge Flow v1.0.pdf", "body": "In contracts/PegBridge.cdc:229 and contracts/SafeBox.cdc:191, the if statement check uses the greater than symbol > to determine whether the mint or withdrawal amount is required to be delayed. As any amount that reaches the delay threshold should be delayed, the check should include equality of the amounts.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Non-deterministic iterations can cause consensus failures", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "In several instances of the codebase, iterations are done over maps. Since Go map iterations are non-deterministic, this would cause each validator to produce a dierent app hash, causing a consensus failure and potentially leading to a chain halt. Aected code lines:  x/stakeibc/keeper/unbonding_records.go:101-109 and 147-152  x/stakeibc/keeper/msg_server_rebalance_validators.go:61-63  app/app.go:762 and 849  cmd/strided/root.go:349 This issue has independently been detected by the client during the audit, but it is still present in the commit hash that was used for the audit.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. GetHostZoneFromHostDenom incorrectly uppercases user input, which can be used to mint invalid assets", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "x/stakeibc/keeper/host_zone.go:57, In the GetHostZoneFromHostDenom keeper function automatically uppercases the denom argument in line 59 and compares it against the zones denom which is also uppercased in line 61. As the denom argument is mostly supplied by the user, this would cause an unintended validation bypass. the users input msg.HostDenom is passed as the denom argument to For example, in GetHostZoneFromHostDenom x/stakeibc/keeper/msg_server_liquid_stake.go:22 when the user wants to liquid stake. A user can provide a mixed case argument such as \"aToM\" which will be validated as \"ATOM\" due to the automatic uppercase handling. As a result, the user can mint invalid stAssets such as \"staToM, which is incorrect and not accepted when redeeming the staked assets via RedeemStake.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Computationally heavy operations in BeginBlocker may slow down or stop block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "BeginBlocker and EndBlocker are a way for module developers to add automatic execution of logic to their module. This is a powerful tool that should be used carefully, as complex automatic functions can slow down or even halt the chain. There are two modules within the scope of this audit where the BeginBlocker or EndBlocker contains unbounded loops that can slow or even halt the chain. Both the interchainquery and epochs modules BeginBlocker or EndBlocker functions: contain resource intensive  x/interchainquery/keeper/abci.go:18  x/epochs/keeper/abci.go:14", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. RegisterHostZone does not validate Bech32Prefix which will lead to staked funds being unredeemable if miscongured", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "function RegisterHostZone in The lacking x/stakeibc/keeper/msg_server_register_host_zone.go:15 validations to ensure the msg.Bech32Prefix is valid and not empty. This functionality is the ValidateBasic function for neither performed in RegisterHostZone nor the eld is empty MsgRegisterHostZone. This MsgRedeemStake will error and block all that specic zone since AccAddressFromBech32 will return an error if hostZone.Bech32Prefix is empty. There is no way to update this eld or a hostzone so any funds that get staked to a hostzone will not be redeemable. is a critical check because if redemptions for is We classify this issue as major instead of critical, since only the admins can cause it. Still, it leads to permanently locked funds, that would require a chain upgrade to be resolved. This issue has independently been detected by the client during the audit, but it is still present in the commit hash that was used for the audit.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. RegisterHostZone does not ensure that HostDenom and IbcDenom are unique which may introduce conicts when returning a hostzone from these values", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "function RegisterHostZone in The lacking x/stakeibc/keeper/msg_server_register_host_zone.go:15 validations to ensure the hostzone being registered does not contain duplicate elds with existing hostzones. For example, if msg.HostDenom is the same as an existing hostzone it will eectively invalidate any guarantee that GetHostZoneFromHostDenom provides. GetHostZoneFromHostDenom is used in multiple locations to derive the hostzone from a denom passed in so msg.HostDenom should be unique throughout all hostzones. This is the same case with msg.IbcDenom and GetHostZoneFromIBCDenom. is We classify this issue as major instead of critical, since only the admins can cause it. Still, it leads to permanently locked funds, that would require a chain upgrade to be resolved.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Hard-coded admins increase the potential of unauthorized privileged activity", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "In utils/utils.go:17-21, a hardcoded slice ADMINS is dened to represent the addresses that may perform a privileged activity. This is problematic because it creates a the admins is situation where it compromised. For example, one of the addresses is labeled as a testnet address which likely has private keys that have been shared amongst the development team. If this address were to remain in ADMINS it would present a serious risk to Stride as the address could perform multiple privileged actions. to control access and respond if one of is dicult", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. OnTimeoutPacket method not implemented", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "In x/stakeibc/module_ibc.go:143, OnTimeoutPacket is not implemented and will panic on any timeout. Operations involving token transfers and burns could potentially lead to a state in which a chain updates the state as based on a successful transfer, but ignores the timeout. This can cause balances that arent synchronized between chains, which can ultimately lead to users not being able to redeem their tokens successfully, or even being able to redeem more than what they should.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "8. Misconguring CurrentEpoch and CurrentEpochStartHeight during genesis initialization would cause overow issues", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "In x/epochs/types/genesis.go:51, the genesis initialization parameters are validated via the Validate function to prevent incorrect congurations. There are no validations that verify the value of CurrentEpoch and CurrentEpochStartHeight to not be negative values though. it would cause unintended consequences when converting them into unsigned values using the uint64 function. For example, the epoch number in x/stakeibc/keeper/hooks.go:36 would underow and become a tremendously large value, which is incorrect. they are congured as negative values, If", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Participation rewards congured can be negative", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Stride/2022-09-26 Audit Report - Stride v1.0.pdf", "body": "In x/mint/types/params.go:177-191, there is no validation that makes sure the participation rewards decimal value is not a negative value. The participation rewards value is used in x/mint/keeper/keeper.go:163 when distributing the minted coins via the DistributeMintedCoin keeper function. A miscongured participation rewards value would cause the execution to panic in x/mint/keeper/keeper.go:135 due to a negative coin amount. As a result, hooks that should be executed after an epoch ends (see x/mint/keeper/hooks.go:16) would keep failing.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Queried voting power when executing proposals is set to current height, allowing anyone to execute proposals", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/proposal/dao-proposal-multiple/src/contract.rs:365, the callers voting power is queried at the current block height to ensure they are one of the DAOs members. This implies that any caller can execute a proposal by staking a small number of funds after the proposal ends and calling the execute_execute function.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Users might be unable to claim NFTs if they unstake a large amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-cw721-staked/src/contract.rs:143-158, the execute_unstake function attempts to validate the outstanding NFT claims is not greater than or equal to the congured max claim amount. Since the outstanding claims do not include the current amount of token_ids to claim, a user can unstake a large number of NFTs in one transaction as long the old outstanding claim amount is smaller than the max claim limit. As result, users would be unable to claim NFTs using the execute_claim_nfts function due to an out-of-gas error. a Please see the test_bypass_max_claims test case to reproduce the issue. We classify this issue as major since it can only happen when the user unstakes a large number of NFTs in one transaction, but the user is not able to recover these NFTs.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Duplicate input elds would be overwritten", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/dao-core/src/contract.rs:76-78, the InitialItem key from the msg.initial_items vector is being saved into the ITEMS storage state. If there were duplicate keys, the previous ones would get overwritten, causing only the last value to be stored. the that, in Besides duplicate contracts/dao-core/src/contract.rs:497-500 addresses in the to_add vector. Consequently, the previous SubDao charter would get overwritten, causing the SUBDAO_LIST only to save the last charter value. execute_update_sub_daos_list function does lter not", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. DumpState query does not paginate proposal modules which can result in out of gas errors", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "the query_dump_state In contracts/dao-core/src/contract.rs:665-668, function attempts to fetch all proposal modules stored in the PROPOSAL_MODULES storage. The query will fail if too many stored proposal modules exist due to an out-of-gas error. As a result, the active_proposal_module_count and total_proposal_module_count values cannot be queried, representing the number of active proposal modules and the total number of proposal modules. We classify this issue as minor since only the contract admin can instantiate proposal modules.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Admin can replay migration to overwrite dao_uri and re-enable proposal modules when contract is paused", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "The migrate handler in contracts/dao-core/src/contract.rs:831-879 does not ensure the current contract version is lower than the version to migrate to. This is problematic because the contract admin can abuse the migration function to modify the dao_uri and re-enable all proposal modules when the contract is paused, allowing them to partially bypass the contract state. Ideally, a paused contract should not have its storage state mutable until the expiration ends. Please see the test_replay_migrate test case to reproduce the issue. We classify this issue as minor since only the contract admin can perform migrations.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. DAO has inuence over voting results", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/proposal/dao-proposal-multiple/src/contract.rs:285, the voters voting power is determined by querying the congured DAO contract. Since the total voting power is queried and stored as seen in line 207, updating the DAO contract to a dierent address might cause incorrect voting results. Suppose the voter staked more tokens in the newly updated DAO contract. This would cause the execute_vote function to query the new voting power and compare it against the old total voting power, leading to an incorrect voting result. Besides that, the DAO can also update the only_members_execute boolean which aects the execute_execute function. Suppose the only_members_execute conguration is set to true during the proposal creation time and set to false after the proposal passes. The DAO members would expect only they can execute the proposal. However, since the only_members_execute value is loaded from the conguration directly, anyone can execute the proposal. close Lastly, the close_proposal_on_execution_failure boolean can be updated by the DAO to the execute to close_proposal_on_execution_failure was set to false and the message to execute fails in line 409. The DAO can interfere by updating the conguration to true and re-execute the function, causing the proposal status to be set to ExecutionFailed. automatically. proposals Suppose that fail This issue is also present contract. in the contracts/proposal/dao-proposal-single We classify this issue as minor since only the DAO contract can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Too many proposal modules stored would cause migration to fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "contracts/dao-core/src/contract.rs:837-859 and In contracts/proposal/dao-proposal-single/src/contract.rs:879-919, all stored proposal modules are collected without pagination. This is problematic because if too many proposal modules were stored, the migrate function would fail due to an out-of-gas error, preventing the admin from migrating the contract to the latest version. We classify this issue as minor since only the contract admin can instantiate proposal modules.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Setting AbsoluteCount to zero will always show proposals as active", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-cw20-staked/src/contract.rs:307-315, no validation ensures the count value inside the ActiveThreshold::AbsoluteCount enum is greater than zero. In comparison, the ActiveThreshold::Percentage enum is validated to ensure the percent value is greater than zero in line 213. If the count value is congured to zero, the query_is_active query will always return true despite the total amount of tokens staked being zero. We classify this issue as minor since only the DAO contract can congure active thresholds.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. A counterparty in escrow can always withdraw, resulting in temporary grief", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In the contracts/external/cw-token-swap/src/contract.rs:197, execute_withdraw function allows a counterparty to withdraw the funds deposited in the contract. Since the escrow completion depends on the payment of the last counterparty, whoever deposited rst can always withdraw their (such as frontrunning the other user), causing the transaction never to be completed. funds from the contract", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Active threshold could be set for a very small percentage", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-cw20-staked/src/contract.rs:214-229, the execute_update_active_threshold function allows a DAO to set an active threshold. It validates that the threshold is between 0 to 100, meaning the DAO can set it to a very small percentage (e.g. 2%). This may allow malicious participants to execute an attack on the DAO.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. All implemented electoral schemes are Condorcet-incomplete", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "Both intended electoral systems, ranked choice voting and single-member plurality voting, do not satisfy the Condorcet winner criterion. This means both cannot ensure that the Condorcet winner (the alternative that would win a two-option vote against each of the other options in a plurality vote) wins the vote. A mechanism to pick a Condorcet winner is desirable because it is considered prudent decision-making, particularly regarding budgetary decisions.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. Migration does not update the latest contract name and version", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-staking-denom-staked/src/contract.rs:1 16-118, the migrate handler does not automatically set the latest contract name and version. If the admin migrates the contract, the query_info query in line 100 will still show the old contract name and version.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. Users can unstake zero amounts of funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-native-staked/src/contract.rs:180-197, the execute_unstake function does not validate the amount to be 0. Since the amount is not validated, a valid claim is still created for the user, causing the outstanding claims to be increased in line 182. Consequently, the current outstanding claims will be growing and compared to the MAX_CLAIMS amount, potentially causing the user to be unable to unstake tokens as intended.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. Permissionless proposal creation policy could result in spam proposals", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/proposal/dao-proposal-single/src/contract.rs:164-166, the DAO contract allows dierent congurations. If the pre-propose module is unset and the proposal_creation_policy is set to Anyone, malicious users can spam the DAO with unnecessary proposals.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. dao-voting-staking-denom-staked allows malicious actors to manipulate voting power", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/voting/dao-voting-staking-denom-staked/src/contract.rs:5 8-98, the query_voting_power_at_height and query_total_power_at_height function return the current voting power irrespective of the provided height argument. Normally, the total voting power of a proposal is snapshotted at a specic block height using the TotalPowerAtHeight VotingPowerAtHeight is queried with the proposals start height to get the users staked amount. Since both queries return the height based on the users argument value, this means the user-staked amount can be manipulated. contract. When voting votes, user the in a If the user changed their staked amount (e.g., staked more tokens), their staking power would be changed. However, the total power saved in the proposal still uses the old total staking power value. Due to this, users who vote will be queried with current voting power, not snapshotted power. This allows malicious users to manipulate their voting weight. For example, imagine Alice and Bob each have 500 voting power at block height 10. The stored total voting power in the proposal will be 1000 (500+500=1000). At block height 20, Alice stakes more tokens causing her voting power to be 1200. Alice then votes, and the contract queries Alices voting power at block height 10. However, due to the issue described above, her voting power returned will be 1200 instead of 500, causing Alice to have a higher voting power than intended. We classify this issue as minor because ICS chains do not have a staking module, preventing the usage of this contract. However, this would be an issue if the contract is deployed on a chain with a staking module.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "16. Non-token might be miscongured as a staking asset", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In contracts/staking/cw20-stake/src/contract.rs:79, any address could be congured as a staking token, even contracts do not implement token interfaces. We classify this issue as informational because the contract miscongure an incorrect CW20 token address, even if implemented. instantiator can always the recommendation below is", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Ranked choice voting not implemented", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "The documentation mentions the implementation of ranked choice voting, but it is not implemented.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "18. Multiple choice voting is prone to social engineering attacks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "Multiple choice voting systems, where users can specify options as free text, are prone to social engineering attacks, as users can try to confuse users with odd alternatives. This is particularly problematic in conjunction with Condorcet-incomplete voting schemes, where minority alternatives can win. Users can try to submit duplicate \"No\"-options or introduce \"quasi-No\"-options and split up the \"No\"-voters into smaller subsets such that they do not get a share of votes to prevent any of the other options. An oversimplied example is illustrated below. Question: What kind of horse should we buy? Answers:  Black  Red  We should discuss this again next year  None of the above While both We should discuss this again next year and None of the above are the equivalent of We shouldn't buy a horse now, one of the options Black or Red might win even if the majority of voters do not want to buy a horse, because the No-votes are split.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "19. Iterations over hooks might run out of gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DAO DAO/2023-02-06 Audit Report - DAO DAO 2 v1.0.pdf", "body": "In packages/cw-hooks/src/lib.rs:34-52, gas. iterations over hooks might run out of We classify this issue as informational as only admins can cause it and it is recoverable.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Cache hit counters can be used to crash nodes and halt a chain", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The VM implementation contains a cache to eciently load smart contract instances that are pinned or used repeatedly. For analytical purposes, that cache increments the hit counters hits_pinned_memory_cache, in packages/vm/src/cache.rs whenever an instance is read from it. These hit counters are incremented using integer addition, which can cause panics in the case of integer overows. hits_memory_cache, hits_fs_cache and An attacker can exploit this issue to crash a node and possibly even halt the chain, for example by repeatedly querying an instance from a CosmWasm smart contract. The hit counters currently use the u32 type. To cause an overow, almost 4.3 billion cash hits are required. While this is a huge number, the counters are only reset upon node restart, so there is a real possibility for long-running nodes to suer from such an overow panic. Moreover, an attacker does not need to cause almost 4.3 billion cache hits within one transaction  such an attack can be executed across many blocks. Query nodes are even easier to target, since they can be queried repeatedly with little resource cost by the attacker.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Gas counting in vm backend does not correctly add externally used gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The packages/vm/src/backend.rs:56: GasInfos add_assign method incorrectly sets in externally_used: self.externally_used + other.cost This implies that the externally_used gas of other is not accounted for. An attacker could call external them, potentially blocking block production. functions without paying gas for We classify this issue as minor since the add_assign method is currently only used in test code.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Overow in gas counting might halt block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "and add_asign process_gas_info The in packages/vm/src/backend.rs:55, 56, packages/vm/src/environment.rs:341 and 352, which could potentially allow an attacker to halt block production of the underlying blockchain if the CosmWasm vm is compiled without overflow-checks enabled for the release prole. functions overow might", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Ed25519 batch verication is not benchmarked, might run out of memory and halt block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The do_ed25519_batch_verify function imposes limits to the number of messages, signatures, and public keys per batch in packages/vm/src/imports.rs:291-305, but there currently exists no benchmarking code in the codebase that veries that these limits are reasonable. production of the underlying blockchain might halt. If the limits are too high, validators might run out of memory, and block", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Unlimited WASM table size may be exploited to crash the node", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "of the states memory While in packages/vm/src/wasm_backend/store.rs:82, tables are not. The WebAssembly (see spec https://webassembly.github.io/spec/core/syntax/types.html#table-types). If such a growth of a table can be triggered from smart contracts, it may exhaust the resources of the underlying node, potentially crashing it and stopping block production. can grow indenitely instances are not limited, limited tables they that is if We tried to write a WASM module using WAT that adds new elements in a loop, but apparently, elem sections need to be at the module top level, so adding more entries to the table would linearly increase the WASM blob size. While we have not been able to exploit this issue by adding elements to the table, there may be other ways to make the table size grow indenitely.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Unbounded iteration over WASM imports may slow down block production or stop the chain", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The check_wasm_imports function collects all into a BTreeSet in packages/vm/src/compatibility.rs:152, which uses an unbounded iteration over the imports. This may be exploited to slow down block production, possibly even stopping the chain. the wasm contract imports of We classify this issue as minor since there is an implicit limit to the number of imports through the WASM size limit.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Compilation of wasm code does not specify memory limit and might halt block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The save_wasm function calls compile in packages/vm/src/cache.rs:154 without setting a memory limit. This could cause the node to run out of memory, potentially halting block production of the underlying blockchain if no mechanism for recovery is implemented. We only consider this to be an informational issue since the underlying blockchain should reject wasm code that is too big, and the singlepass compiler used will execute in linear time, preventing JIT-bombs.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Attribute keys starting with underscores lead to panics, causing smart contract runtime errors in debug mode", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "for attributes constructor The in packages/std/src/results/events.rs:71 if an attribute key starts with an underscore _. This will lead to runtime errors for smart contract projects that have code paths that were not extensively tested. An example could be a DeFi protocol that adds an attribute with an underscore under certain conditions, for example an emergency withdrawal. The panic would prevent the emergency withdrawal, putting user funds at risk. debug panics mode in The check in the constructor does also not guarantee that a key does not start with an underscore, since library users could simply manually push attributes with any key. We classify this issue as informational since it only aects code compiled with debug assertions.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Overows could occur if library users do not enable overow-checks, panics abort execution", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "In several places in the codebase, overows are not handled explicitly. This is not a security concern as long as overow-checks are enabled for the release prole, but there is a risk that a library user does not enable overow-checks. Additionally, overow-checks cause overows to panic, which is less user friendly than an overow error message that allows unwinding the operation. A panic in WebAssembly always aborts the execution and does not unwind. Instances of potential overows are: - - - - The nextval function in packages/storage/src/sequence.rs:19. The plus_seconds, plus_nanos, minus_seconds, and minus_nanos methods in packages/std/src/timestamp.rs:37-57. The isqrt method in packages/std/src/math/isqrt.rs:28. The sqrt_with_precision method in packages/std/src/math/decimal.rs:181 and in packages/std/src/math/decimal256.rs:194.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Math method types are inconsistent and not exhaustive", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "In packages/std/src/math, several math types are implemented, such as Decimal, Decimal256, Uint64, Uint128, or Uint256. The API of those math types contains several inconsistencies and functionality diverges or is partially not implemented, even between similar types such as Uint64 and Uint128. These dierences can lead to a decrease in the development experience when using math types of the std package. Examples of these discrepancies are: - - - - - - - - - - - - - - - - Sub and Mul are implemented for Uint128, Uint256 and Uint512, but missing for Uint64. SubAssign and MulAssign are implemented for Uint128, Uint256 and Uint512, but missing for Uint64. wrapping_add, wrapping_sub, wrapping_mul, and wrapping_pow are implemented for Uint64 and Uint128, but missing for Uint256 and Uint512. Mul is implemented for Decimal and Decimal256, but Div is not implemented for them. For Decimal and Decimal256, Div returns a Decimal, while DivAssign returns a Uint128 multily_ratio and full_mul is implemented for Uint64, Uint128 and Uint256 but missing for Uint512. pow is implemented for Uint256 but missing for Uint64, Uint128 and Uint512. checked_pow is implemented for Uint128 and Uint256 but missing for Uint64 and Uint512. saturating_pow is implemented for Uint128, but missing for Uint256 and Uint512. check_div_euclid is implemented for Uint64 and Uint128, but missing for Uint256 and Uint512. Shl is implemented for Uint256, but missing for Uint64, Uint128 and Uint512. ShrAssign is implemented for Uint64, Uint128, Uint256 and Uint512, but ShlAssign is missing for all unsigned integers. checked_shl is implemented for Uint256, but missing for Uint64, Uint128 and Uint512. Inconsistent with other methods, TryFrom<Uint128> for Uint64 is dened in packages/std/src/math/uint128.rs, and not in packages/std/src/math/uint64.rs. Inconsistent with other methods, TryFrom<Uint512> for Uint128 is dened in packages/std/src/math/uint512.rs, and not in packages/std/src/math/uint128.rs. The from_str function results in an error on an empty string in packages/std/src/math/uint256.rs, but not in packages/std/src/math/uint128.rs and packages/std/src/math/uint512.rs, which is inconsistent. - - - - - - - - Inconsistent with other methods, TryFrom<Uint256> for Uint128 is dened in packages/std/src/math/uint256.rs, and not in packages/std/src/math/uint128.rs. In packages/std/src/math/uint128.rs:215, StdError::generic_err is used for parsing errors instead of StdError::parse_err. The new function in packages/std/src/math/uint512.rs is not marked as const, which it is in packages/std/src/math/uint256.rs. Some methods return StdError::generic_err(\"Error parsing whole\") while others return an ParseErr. Some methods return StdError::generic_err(format!(\"Serializing QueryRequest: {}\", serialize_err)) instead of StdError::serialize_err. The wasmer::SerializeError and wasmer::DeserializeError is wrongly transformed into a VmError::cache_err instead of a VmError::serialize_err in packages/vm/src/errors/vm_error.rs:325 and 331. The VmError::cache_err in packages/vm/src/checksum.rs:47 should be a VmError::conversion_err. Some methods use expect, while others use unwrap, which results in panics without messages explaining what went wrong.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Several dependencies are outdated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "There are several dependencies that are not used in their latest version. Some of them contain security vulnerabilities. A subset that might introduce vulnerabilities is: - - - - chrono contains a potential segfault, currently used in version 0.4.19, no safe upgrade available. time contains a potential segfault, currently used in version 0.1.43, upgrade to >= 0.2.23 instead. ed25519-zebra is currently used in version 2.2.0, available in 3.0.0 rand_core is currently used in version 0.5.1 in package cosmwasm-crypto, available in 0.6.3", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Unaudited cryptography library", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The library implementation of ECDSA in crate k256 is unaudited and comes with the following warning in its documentation: Security Warning The elliptic curve arithmetic contained in this crate has never been independently audited! crate This has been designed with the goal of ensuring that secret-dependent operations are performed in constant time (using the subtle crate and constant-time formulas). However, it has not been thoroughly assessed to ensure that generated assembly is constant time on common CPU architectures. USE AT YOUR OWN RISK!", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Ed25519 batch verication succeeds for empty data, which may not be obvious to library users", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The ed25519_batch_verify function in packages/crypto/src/ed25519.rs:65 succeeds if provided with an empty collection of messages, signatures, and public keys. This behavior is correctly documented in line 64. Still, an unsuspecting library user might not be aware of this implementation, which could lead to bugs in dependent codebases.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Consuming gas after performing Ed25519 batch verication is inecient", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "do_ed25519_batch_verify The in packages/vm/src/imports.rs:312-318 after executing the batch verication in line 311. This is inecient since the verication can be skipped if the gas limit is hit. consumes currently function gas", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Missing overow checks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/CosmWasm/2023-03-27 Audit Report - CosmWasm v1.0.pdf", "body": "The workspace manifest Cargo.toml as well as the following packages do not enable overflow-checks for the release prole: packages/profiler/Cargo.toml - packages/crypto/Cargo.toml - packages/derive/Cargo.toml - - packages/schema/Cargo.toml - packages/std/Cargo.toml - packages/storage/Cargo.toml - packages/vm/Cargo.toml", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Attackers can block pool tuning by voting on many dummy pools", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "In the contracts/generator_controller/src/contract.rs:398-416, tune_pools function attempts to process each pools votes in an unbounded iteration. In the case that the number of pools is too many, the execution may run out of gas and fail. An attacker can use this loop to block pool tuning: 1. The attacker creates many addresses and stakes xASTRO for minimum voting power", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Finally, the tune_pools function will attempt to process all child contracts added by the attacker in line 399. The attack will succeed when the function fails due to an out-of-gas error. As a result, the TunePools message will always fail, preventing majority-voted pools from receiving allocation points. Please refer to the test_jam_tuning test case for the attack scenario mentioned above. Recommendation We recommend implementing a whitelist of liquidity pool contracts that can be voted on. Status: Resolved 2. Proposals message order not enforced on IBC execution", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "5. Finally, the tune_pools function will attempt to process all child contracts added by the attacker in line 399. The attack will succeed when the function fails due to an out-of-gas error. As a result, the TunePools message will always fail, preventing majority-voted pools from receiving allocation points. Please refer to the test_jam_tuning test case for the attack scenario mentioned above. Recommendation We recommend implementing a whitelist of liquidity pool contracts that can be voted on. Status: Resolved 2. Proposals message order not enforced on IBC execution", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. KickBlacklistedVoters missing from documentation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "In contracts/generator_controller/src/contract.rs:89-108, controllers ExecuteMsg::KickBlacklistedVoters is not dened. documented. messages execution are the generator the However,", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Unnecessary CW20 sender validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "contracts/assembly/src/contract.rs:170, In contracts receive_cw20 function performs address validation for the sender parameter of the CW20 message. This is unnecessary because the sender parameter comes from info.sender, validated by Cosmos SDK already. assembly the", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Unnecessary conversion to lowercase in addresses", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "The contracts within scope used the addr_validate_to_lower helper function to sanitize addresses. Since CosmWasm 1.0.0, the addr_validate utility also validates address capitalization, hence making it redundant to perform this check manually.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Misleading error messages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-02-14 Audit Report - Astroport Governance Updates v1.0.pdf", "body": "In contracts/assembly/src/contract.rs:680 and 683, the assembly contracts update_ibc_proposal_status function returns Unauthorized errors even for cases that are not related to authorization, which can be misleading for users. This is the case if the proposal.status does not match one of the expected ones in line 671. This also happens if config.ibc_controller is congured to None, the if statement in line 669 will result in an Unauthorized error.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Message verication does not require the supermajority of signers", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/helpers.rs:16-78, In function verify_signatures takes a message and a list of signatures and veries that at least a number equal to signer_threshold of public keys in the SIGNERS map has signed the message. the The signer_threshold is part of the config and can be set by the protocol owner, with the the be more MIN_SIGNER_THRESHOLD. requirement dened being than only two, by as to However, since the threshold does not depend on the number of registered signers, and no majority or supermajority is required for the verication of signatures, is vulnerable to attacks by malicious coalitions of signers which could execute arbitrary messages or front-run honest signers. the protocol Additionally, there is no misbehavior mechanism to allow shermen and third parties to report and punish signers acting maliciously. We classify this issue as minor since signers are assumed to be trusted.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Signers can replay transactions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/execute.rs:316, In the bridge_receive function protects against transaction replay by verifying if the provided transaction_hash is already recorded in the HANDLED_TRANSACTIONS map. However, supplied directly by the signers. the transaction_hash is not computed during the contract execution but Consequently, signers, who are responsible for signing an attestation that includes the hash, could potentially submit any arbitrary string as the hash allowing the same transaction to be executed multiple times. We classify this issue as minor since signers are assumed to be trusted.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Unbounded nested iterations in verify_signature could run out of gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/helpers.rs:16-78, function In verify_signatures takes a message and a list of signatures and veries that the message has been signed by at least a threshold of registered signers. the This is achieved by performing a nested iteration: First through all the public keys in the SIGNERS map, and then through all the decoded_signatures. Inside the loops, each combination of key and signature is veried although only a fraction of these combinations is expected to match. The number of iterations is additionally increased by checking the signatures already veried, against other keys. Consequently, if the number of signers and signatures is large, the execution will run out of gas since there is no upper limit enforced in the contract. We are reporting this issue with minor severity since the cardinality of signers is alterable only by the owner and is expected to be small.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Misconguration of the bridge chain ID could result in stuck tokens", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "In the contracts/neutron-bridge/src/execute.rs:635-642, the protocol owner can update config.bridge_chain_id to an arbitrary chain ID. While this allows the chain ID to be congured in case of chain upgrades that alter the ID, misconguration of the bridge_chain_id could lead to tokens that are unable to be bridged back to the Cosmos Hub as well as the necessity to synchronize signers and the contract to establish consistency between the contract cong and signers attestations.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Disabling tokens can lead to inconsistent contract state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "In contracts/neutron-bridge/src/execute.rs:417-418, the bridge_send function checks whether the ticker and corresponding TokenFactory denomination are disabled. However, when disabling a token, the disable_token function only disables one of them provided as a ticker. Consequently, the user can pass the TokenFactory denomination to the bridge_send function to bypass the aforementioned check. We are reporting this issue as minor because the disable_token function can only be executed by the owner, and the owner can execute it twice on both denoms to mitigate the problem.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. IBC fee excess is accumulated and stuck in the contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/execute.src:450-457, In the total_fee variable is calculated by summing up various standard IBC fees: ack_fee, recv_fee and timeout_fee. The amount of fee tokens passed by the user is validated to be greater than the total_fee variable. However, Neutrons IBC transfer does not typically utilize all the fees  some are refunded when not used. When a relayer submits an Ack message for a particular packet, the module sends the specied amount of ack_fee to the relayer from the escrow address and returns the specied timeout_fee to the contract that issued the original Transfer message. In case the relayer submits a Timeout message, things go the other way around: the relayer is refunded with timeout_fee and the contract gets ack_fee back. Consequently, the IBC fee excess will be accumulated and stuck in the contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Missing validation for public key name identier", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/execute.rs:494-541, In function allows the owner to register a new signer. the add_signer The function ensures that the public_key provided is unique and not already registered, however, it does not verify whether the provided name is already associated with a dierent registered key. Consequently, multiple public keys could be associated with the same name, confusion or misuse in signer identication. leading to", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Lack of validation for the IBC channel", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Asteroid Bridge/2024-06-17 Audit Report - Asteroid Bridge v1.0.pdf", "body": "contracts/neutron-bridge/src/contract.rs:42-49, In function stores the provided bridge_ibc_channel. the instantiate However, no validation ensures that the bridge_ibc_channel identier is a registered and active channel. Consequently, this lack of validation could lead to the acceptance of an invalid or closed channel, which would not allow the forwarding of IBC messages to the Cosmos Hub.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Unbounded iteration allows attackers to attack validators, slowing down or even halting block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "App modules implement logic that needs to iterate through slices in order to nd a specic element with the selected ID. This has the consequence of having unbounded loops with an asymptotic cost of O(n). This is even worse when a loop is done over arrays that contain other arrays. In this case, the asymptotic cost is O(n^2) or O(n^3). Unbounded loops can allow two dierent types of attack: 1. Validator slashing A malicious actor could spam a transaction, that he knows performs an unbounded loop, to a particular node trying to force it to be not able to compute the transaction before the BroadcastTxCommit timeout. This can prevent that node from processing further ABCI messages such that it has to pause and contact peers to get the latest correct blocks. the NewTxTimeoutHeightDecorator will discard all messages with an Also, elapsed heightTimeout. This could be used in a particular event in order to manipulate it. As the validator was not able to sign the block, it implies that this event is decreasing its sign ratio. That could lead the validator to be slashed. 2. Stop or slow down the block production A malicious actor could spam the previous message to a set of validators. If a signicant number of them hit the timeout and halt simultaneously, block production may stop or slow down. Iterations vulnerable to this attack are:  x/asset/keeper/app.go:117  x/asset/keeper/app.go:262  x/asset/keeper/asset.go:160  x/collector/keeper/collector.go:104  x/locker/keeper/msg_server.go:238  x/locker/keeper/msg_server.go:310  x/vault/keeper/vault.go:47  x/vault/keeper/vault.go:57  x/vault/keeper/vault.go:347  x/vault/keeper/vault.go:421  x/vault/keeper/vault.go:441  x/rewards/keeper/keeper.go:86  x/rewards/keeper/keeper.go:156", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Transaction gas price is not related to execution complexity", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "In app/ante.go:47, NewConsumeGasForTxSizeDecorator is calculating the gas cost of a transaction. taking care of This decorator computes the gas cost of a transaction by multiplying the size of transaction in bytes with TxSizeCostPerByte. the Even if this is a good heuristic to estimate the potential transaction cost, thats not enough. Transaction cost should be proportional to the computational complexity of its execution. For instance, a transaction that has an asymptotic complexity of O(1) and that is not doing I/O operations, should not have the same cost as another one that has a O(n) complexity and is executing extensive I/O operations. Messages vulnerable to this attack are:  MsgCreateLockerRequest in x/locker/handler.go:18  MsgCreateRequest in x/vault/handler.go:18  MsgWithdrawRequest in x/vault/handler.go:24  MsgDrawRequest in x/vault/handler.go:27  MsgRepayRequest in x/vault/handler.go:30  MsgCloseRequest in x/vault/handler.go:33  MsgCreateGauge in x/rewards/handler.go:19  MsgMintNewTokensRequest in x/tokenmint/handler.go:21  MsgDepositESM in x/esm/handler.go:18 The current lack of accounting for execution complexity can make it aordable for an attacker to perform DoS spamming with expensive messages that have a small payload.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Vault ID collisions could lead to the loss, tampering or overwriting of existing vault data", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The MsgCreate function, in x/vault/keeper/msg_server.go, creates a new CDP or vault with a unique vaultId. In line 148, an ID is assigned to the newVault, concatenating the apps Shortname and the ExtendedPairs vault counter. However, this formula can lead to collisions, either accidental or intentional, which could cause a loss or tampering of existing vault data. Example:  ShortName1=Test1 and updatedCounter=1, with resulting vaultId=Test11  ShortName2=Test and updatedCounter=11, with resulting vaultId=Test11 It should be noted that this also aects stable vault IDs.", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. Locker ID collisions could lead to the loss, tampering or overwriting of existing locker data", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "Similarly to the vault ID collision issue, lockerIds are subject to collision due to the concatenation formula that is used to derive new userLocker.lockerId, in the function MsgCreateLocker, in x/locker/keeper/msg_server.go:85. This could lead to the loss or overwriting of key locker data, either accidentally or intentionally.", "labels": ["Oak Security", "Severity: High"]}, {"title": "5. Users cannot redeem their collateral assets regardless of the ESM status", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "in if condition x/esm/keeper/msg_server.go:71, The the MsgCollateralRedemption handler, will never be executed, which blocks users from redeeming their collateral assets regardless of the ESM status. If the esmStatus.status is True, the condition in line 68 will be True, returning the ErrCoolOffPeriodRemains. And if the esmStatus.status is False, the condition in line 71 will be also False, preventing the execution of the if-block which contains the collateral redemption logic. in", "labels": ["Oak Security", "Severity: High"]}, {"title": "6. GetPriceForAsset returns price of 2000000 for assets when the market is not found", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The GetPriceForAsset function in x/market/keeper/oracle.go:175 returns a static price of 2000000 for assets when the market is not found. This is problematic because instead of returning an error for this case, the GetPriceForAsset will silently return an incorrect value for the asset's price. This can have unintended consequences that may allow attackers to economically exploit the protocol.", "labels": ["Oak Security", "Severity: High"]}, {"title": "7. Computationally heavy operations in BeginBlocker and EndBlocker may slow down or stop block production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "BeginBlocker and EndBlocker are functions that are executed at the start/end of each block, even if there are no transactions. To not have a negative impact on block production, it should have a light and constant computational footprint. In fact, it is wise to be cautious about adding too much computational weight at the start of each block, as blocks arrive at approximately seven-second intervals. Also, it should be a good practice to make the BeginBlocker/EndBlocker execution independent, or at least with a sub-linear dependency, from the amount of data stored on-chain. A huge workload may slow down the block production, Tendermints proposal timeout is surpassed. in the worst case so much that The codebase implements multiple BeginBlocker/EndBlocker functions that are computationally heavy and/or depend on on-chain state:  x/auction/abci.go:8  x/esm/abci.go:10  x/market/abci.go:10  x/rewards/abci.go:11  x/liquidity/abci.go:12  x/liquidity/abci.go:29", "labels": ["Oak Security", "Severity: High"]}, {"title": "8. Multi-purpose BeginBlocker error handling may disable critical functionality if an error is raised", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The BeginBlocker functions in:  x/rewards/abci.go:11  x/auction/abci.go:8 use an error-handling approach that stops the execution if one of the functions returns an error. This means that if the rst function execution returns an error, the other ones that come after that one will not be executed. While this can be a good approach for interdependent functions, it is not a good design in cases when functions are independent. in example, For DebtActivator and DutchActivator are independent SurplusActivator will deny the execution of the other two. the Rewards modules BeginBlocker, SurplusActivator in functions but an error", "labels": ["Oak Security", "Severity: High"]}, {"title": "9. Error handling during slices loop terminates the execution without executing the logic for all items", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "In  x/auction/keeper/surplus.go:27,  x/auction/keeper/surplus.go:33,  x/auction/keeper/dutch.go:56,  x/auction/keeper/dutch_lend.go:49,  x/auction/keeper/debt.go:26,  x/auction/keeper/debt.go:32, and  x/esm/abci.go:32-35, error handling logic during a slice iteration terminates the execution without iterating through all items. This behavior could lead to incoherent functionality if the loop triggers an error in the initial slice items. information inside the slice and to disabled This has the consequence of not checking all the items after the faulty one, and in the worst case, if the error is raised in the 0 position of the slice, to not check at all liquidation for collateralized positions.", "labels": ["Oak Security", "Severity: High"]}, {"title": "10. An attacker could send MsgRemoveMarketForAssetRequest messages every 20 blocks in order to make the Market module unusable", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "x/market/handler.go:25, In MsgRemoveMarketForAssetRequest. anyone is allowed to send a An attacker could use this transaction to delete all the Market instances saved in the store, making the Market module unusable. The transaction can be executed every 20 blocks, which is the oracle data fetch interval.", "labels": ["Oak Security", "Severity: High"]}, {"title": "11. Permissionless Rewards module Whitelisting process allows attackers to manipulate the Asset Whitelist and App Vault Whitelist", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "x/rewards/handler.go, WhitelistAsset, and RemoveWhitelistAppIdVault RemoveWhitelistAsset, are messages In, WhitelistAppIdVault permissionless. Since those messages are responsible for the management of the Asset Whitelist and App Vault Whitelist, they should be executable only from privileged users or through governance. In fact, having those messages executable by anyone makes the Whitelist process ineective and exposes an attack surface. For example a malicious actor could delete all Assets from the AssetWhitelist and make the module unusable, or could add an Asset to the whitelist that should not be allowed.", "labels": ["Oak Security", "Severity: High"]}, {"title": "12. Gas is not consumed if the transaction returns an error", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The ConsumeGas function calls in lines:  x/liquidity/keeper/pool.go:182,  x/liquidity/keeper/pool.go:255,  x/liquidity/keeper/pool.go:313,  x/liquidity/keeper/swap.go:123,  x/liquidity/keeper/swap.go:233,  x/liquidity/keeper/swap.go:292,  x/liquidity/keeper/swap.go:362,  x/liquidity/keeper/rewards.go:312, and  x/liquidity/keeper/rewards.go:424, are located at the end of the transaction execution and are not called if an error occurs. Consequently, a malicious actor is allowed to spam transactions that trigger an error in the middle of the execution without being charged of the dened gas fees.", "labels": ["Oak Security", "Severity: High"]}, {"title": "13. CosmWasm - State query binding can perform a GRPC call to an arbitrary URL", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "In contracts/governance/src/msg.rs:12, target eld of type String. the InstantiateMsg is expecting a This eld is then used by the contract to perform State queries in  contracts/governance/src/contract.rs:128 and  contracts/governance/src/contract.rs:442 in order to get the state at a particular BlockHeight. The CosmWasm State query binding is resolved in the Cosmos SDK side by the QueryPlugin in app/wasm/query_plugin.go:54 and handled by the QueryState function in x/locker/keeper/locker.go:328. In x/locker/keeper/locker.go:335 the target eld propagated from the CosmWasm contract is used as URL to create a GRPC insecure connection. This mechanism is intended to work to call a Full Node but it has some possible problems:  Every target URL is allowed so an attacker could use this to perform a DOS or to create a botnet using chain nodes to perform a DDOS.  Exposed GRPC port could be not the same in dierent nodes as it can be congured by see https://docs.cosmos.network/master/core/grpc_rest.html#grpc-server, or it could be behind a Load Balancer, Reverse Proxy, Docker network, Ingress, etc. operators, node  It is performing the call with grpc.WithInsecure() so there is no trust to the It MITM GRPC attacks https://grpc.io/docs/guides/auth/#with-server-authentication-ssltls contacted. allows server like  Congurations and security enforcements rules through iptables or ufw or similar softwares on machines where the chain node is hosted could block this type of calls That means that a CosmWasm contract is able to make the chain node perform a GRPC insecure connection to an arbitrary URL by simply using the State query binding.", "labels": ["Oak Security", "Severity: High"]}, {"title": "14. Error raised in BeginBlocker could lead to state corruption", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The modules that raise errors in BeginBlocker which could lead to a state where partial state changes are performed but other intended state changes are not committed. This function logs errors but has no control over the state and no mechanism to revert partial updates. This implies that if an error is raised in the middle of an execution ow, the execution will stop and log the error, but no action will be taken in order to revert state updates that have been done leading to state corruption.", "labels": ["Oak Security", "Severity: High"]}, {"title": "15. CosmWasm - Deposited funds of other denom will be stuck in the contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "In contracts/governance/src/contract.rs:534 in the execute_deposit message, if the voter has made a deposit to the given proposal before, the Coins that were previously added in the rst deposit will be increased with the amount of the new deposit. However, there is no check that info.funds.len == 1, so dierent denoms will be accepted and not accounted for, resulting in these funds remaining permanently stuck in the contract. The same issue occurs if a user only sends one coin of a certain denom to an existing proposal with a dierent denom. After the proposal has passed or been rejected, the execute_refund function in 570 will not return the coins whose denoms are dierent from the original deposit.", "labels": ["Oak Security", "Severity: High"]}, {"title": "16. UpdateAssetsRecords is not enforcing a unique Denom for an Asset", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The UpdateAssetsRecords function in x/asset/keeper/asset.go:189 is not consistently handling the Denom to Id mapping when updating an Asset with a new Denom eld. asset.Denom Since the with DeleteAssetForDenom(ctx, asset.Denom) in line 205 is not deleting the mapping with the old Denom but is instead trying to delete the mapping with the new one. msg.Denom updated 203, line in is This has the consequences of not having a unique Denom for an Asset Id in the Denom to Id mapping.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "17. AddAppRecords may overwrite existing app name entries", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The AddAppRecords function in x/asset/keeper/app.go:208-210 incorrectly performs an app name validation that will allow for the existing app Id to be overwritten in In line 208 the HasAppForName check is passed msg.ShortName SetAppForName. rather than msg.Name, so in eect the name is not checked currently.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "18. MsgAddWhiteListedAsset allow any caller to add an asset id to a lockers whitelist", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The MsgAddWhiteListedAsset function in x/locker/keeper/msg_server.go:327 does not include any permission checks to ensure only authorized addresses are able to add asset Ids to the lockers whitelist. Currently any user may send this message to add asset Ids to the lockers whitelist.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "19. AddAppRecords may accept invalid GenesisToken array", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-12-07 Audit Report - Comdex v1.0.pdf", "body": "The AddAppRecords function in x/asset/keeper/app.go:203 does not perform proper validation on the GenesisToken array before setting it in the store. At a minimum, the function should conrm that the slice of MintGenesisToken does not contain duplicates, and that the Recipient is a valid address. stored invalid An AddAssetInAppRecords CheckIfAssetIsAddedToAppMapping function. GenesisToken messages array during could break the the execution handling of of the", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "1. Double refunds on excess oer assets allow draining pools", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In the contracts/pair_concentrated/src/sudo.rs:238-249, swap_exact_amount_out function computes the excess oer asset amount and refunds it to the sender. This is problematic because the cosmwasmpool module also refunds the excess amount to the sender, resulting in double refunds. an Consequently, call SwapExactAmountOut on the poolmanager module with large token_in_max_amount and low token_out values to drain funds from the pool, causing a loss of funds for liquidity providers. can repeatedly attacker", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Attackers can swap any token and drain funds from pools", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In the contracts/pair_concentrated/src/sudo.rs:78, swap_exact_amount_out function does not validate that token_in_denom is one of the pool assets. This is problematic because users can provide fake or low-value native tokens to swap for other assets in the pool. Consequently, an attacker can create and mint a large amount of a token factory denom and call SwapExactAmountOut on the poolmanager module to trade any token for pool assets, causing a loss of funds for liquidity providers.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Internal price is updated regardless of trade size", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In the contracts/pair_concentrated/src/sudo.rs:165-171, swap_exact_amount_out function updates the internal oracle price with the last price. This is problematic because the price update should only occur if the trade sizes are small, as seen in contracts/pair_concentrated/src/contract.rs:733-745. Consequently, SwapExactAmountOut sudo call, causing an incorrect price to be used. oracle price will be updated incorrectly during a internal the", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. msg.whitelist_code_id eld is ignored during instantiation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In contracts/factory/src/contract.rs:59, the whitelist_code_id is set to zero. This is problematic because msg.whitelist_code_id is provided in the InstantiateMsg struct, but not used. Consequently, specifying msg.whitelist_code_id during contract instantiation will not be reected in the whitelist_code_id conguration. We classify this issue as informational because the whitelist_code_id conguration is not used across the protocol.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Updated conguration values are not emitted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "execute_update_config The in contracts/factory/src/contract.rs:215 emits only the action attribute. For state-changing functions, It is best practice to emit events and attributes to support o-chain event listeners and blockchain indexers. function", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. General code improvements", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In several instances of the codebase, the code quality and readability can be improved:  osmosis-test-tube is outdated and contains dependencies with known vulnerabilities (RUSTSEC-2022-0093, RUSTSEC-2023-0052). Consider updating the package to the latest version.  The auto_stake in not arguments the contracts/pair_concentrated/src/contract.rs:297, in receiver contracts/pair_concentrated/src/contract.rs:510. Consider removing them. removed and removed arguments comment comment was was not  contracts/pair_concentrated/src/contract.rs:601-604 and contracts/factory/src/contract.rs:179-184 lack documentation for the the functions in the codebase. arguments. This is inconsistent with the rest of Consider adding them.  The error in contracts/factory/src/error.rs:44 is not used. Consider removing it.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. before_swap_check validation is not implemented in SwapExactAmountOut and reverse simulation queries", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-29 Audit Report - Astroport on Osmosis v1.0.pdf", "body": "In and contracts/pair_concentrated/src/contract.rs:693 contracts/pair_concentrated/src/queries.rs:228, the before_swap_check function is implemented in the internal_swap (when SwapExactAmountIn is called) and query_simulation functions. The before_swap_check function is used to ensure the oer amount is not zero, and the pool assets are not empty. the validation is not However, swap_exact_amount_out query_reverse_simulation functions. (when implemented on the reverse swap mechanism in the and SwapExactAmountOut called) is Implementing the validation helps to save gas fees as the error will be triggered rst during a reverse simulation query, preventing users from initiating a failed transaction.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Schedules start and end point timestamps are not validated to be in the future", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "assert_vesting_schedules The contracts/tokenomics/vesting/src/contract.rs:240-254 ensures that scheduled end point is past the start point. function dened in the However, there is no check in place that enforces the start point or the endpoint to be in the future. This implies that there may be vesting schedules that instantly vest, which will probably only happen unintentionally. We classify this issue as minor because only the contract owner can create vesting schedules.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Unbounded iteration through schedules can permanently inhibit the execution of transactions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "and In contracts/tokenomics/vesting/src/contract.rs:324 contracts/tokenomics/vesting/src/contract.rs:386, unbounded loops are used to iterate through all the registered schedules. Consequently, if the cardinality of registered schedules is signicant, the execution could run out of gas and revert the transaction. Additionally, since there is no way to remove completed schedules, this could permanently inhibit the execution of transactions. We classify this issue as minor because only the contract owner can create vesting schedules.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Miscongured zero max spread causes swaps to fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "In contracts/tokenomics/maker/src/contract.rs:59, the max_spread value is not validated to be greater than zero. If the max_spread value is miscongured as zero, all swaps will fail due to a MaxSlippageAssertion contract error. This issue is also present during the conguration update phase in line 698. We classify this issue as minor because only the contract owner can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Governance fee percentage is not set to 100 if the staking contract address is not set", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "The documentation in packages/astroport/src/maker.rs:17 states if staking_contract is set to None, the governance_percent value should be equal to 100. that However, this behavior is not enforced during contract instantiation and the UpdateConfig message handling.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. No events are emitted upon successful contract instantiation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "In contracts/tokenomics/maker/src/contract.rs:97, no custom events or attributes are emitted upon successful contract instantiation. This prevents o-chain listeners from indexing parameters congured by the contract instantiator.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Incomplete parameter documentation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "In several instances of the codebase, function comments do not include documentation of all parameters:  contracts/tokenomics/maker/src/contract.rs:106-112 and 614-624  second_receiver_params is not included.  contracts/tokenomics/vesting/src/contract.rs:61-75  The RegisterVestingAccounts, WithdrawFromActiveSchedule, ProposeNewOwner, DropOwnershipProposal, and ClaimOwnership messages are not documented.  contracts/tokenomics/vesting/src/contract.rs:369  The account, receiver, and amount parameters are not documented.  contracts/tokenomics/maker/src/utils.rs:132-143  The bridge_token and factory_contract parameters are not documented.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Outstanding TODO comment", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "In contracts/tokenomics/maker/src/utils.rs:21, a TODO comment is present that questions whether the swap simulation should adjust according to the token's precision. This indicates that the codebase might not be ready for production.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Zero amount withdrawal will always fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "contracts/tokenomics/vesting/src/contract.rs:375, the In withdraw_from_active_schedule function does not validate that to withdraw is not zero. As Cosmos SDK prevents zero-amount native token transfers, specifying zero withdrawal amounts will fail. The resulting transfer error might confuse users. the amount", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Redundant check in calc_schedule_unlocked_amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-04 Audit Report - Astroport Maker and Vesting Contract Updates v1.0.pdf", "body": "calc_schedule_unlocked_amount in The the contracts/tokenomics/vesting/src/contract.rs:349 checks whether time_period is not zero. This check is redundant as new schedules are validated through function enforces the assert_vesting_schedules function in line 246. This implying that end_point.time to be strictly greater time_period is always greater than zero. than start_point.time, function", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Users can steal all LP tokens from the Apollo static strategy", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "the apollo-static strategy Since in contracts/strategies/apollo-static/src/strategy.rs:38 will query the LP token balance of the contract including all previous deposits by other users. All of these deposits will be assigned to the caller, and the user can then extract all that value by immediately withdrawing/zapping out. LP tokens, the query simply holds", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Registering fees in the factory contract does not update the strategys extension reward index", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "the handle_register_fee in In the contracts/apollo-factory/src/contract.rs:586, strategys EXTENSION_TOTAL_COLLECTED_FEES extension_reward_index eld is not adjusted. That leads to an inconsistent state. Additionally, update_strategy is called, even though there were no changes to the strategy. updated, function are but the", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Users are unable to collect rewards after withdrawing/zapping out of strategy", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "In contracts/apollo-factory/src/contract.rs:816, strategies are skipped if a user has no active deposits in a strategy. Users might have withdrawn/zapped out of a strategy, and hence have zero shares, but they might not have collected rewards yet. Such users are unable to collect the condition described above. the rewards from the strategies because of", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Strategies that start with paused rewards can never receive any rewards", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "The rewards_paused eld cannot be updated in the handle_update_strategy function in contracts/apollo-factory/src/contract.rs:516. That means that a strategy that started without rewards can never receive any rewards.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Current block height not used in reward calculation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "the reward In packages/apollo-protocol/src/vault/vaults/anchor.rs:119, info from Anchor deposits is queried. That query uses a block_height of None, which will cause Anchor to return the latest stored values, rather than recalculating them at the current block height.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. APR calculation might panic if staked liquidity value is zero", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "When contracts/strategies/apollo-static/src/strategy.rs:493, might panic when staked_liquidity_value is 0. calculating APR the in contract the", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Price queries do not ensure that price base is not outdated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "In multiple price queries from the oracle contract, the time since last_updated_quote is asserted to be greater than the strategys price_age_limit. However, the time since last_updated_base is not asserted  which might lead to usage of outdated prices. Instances of that issue are found in:  contracts/strategies/apollo-static/src/strategy.rs:433  contracts/strategies/apollo-static/src/strategy.rs:467  contracts/strategies/apollo-static/src/strategy.rs:481  packages/apollo-protocol/src/strategy/strategies/autocompound /reuse.rs:409  packages/apollo-protocol/src/strategy/strategies/autocompound /reuse.rs:465  packages/apollo-protocol/src/strategy/strategies/autocompound /reuse.rs:479  packages/apollo-protocol/src/strategy/strategies/autocompound /reuse.rs:423", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Queried reward and LP token prices in Apollo autocompound strategy are not checked to not be outdated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "the querying When in packages/apollo-protocol/src/strategy/strategies/autocompound/stra tegy.rs:309-325 and in 369-385, a check should be added to ensure these prices are not outdated. reward_token_price lp_token_price and", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Anchor reward rate calculation does not account for overlaps in distribution schedule", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Apollo/2022-03-17 Audit Report - Apollo v1.0.pdf", "body": "rate reward in The not packages/apollo-protocol/src/vault/vaults/anchor.rs:147 account for overlaps in the distribution schedule coming from the anchor cong. The Anchor factory does allow overlaps. In the event of an overlap, the reward rate would be o. calculation rewards Anchor does for", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Attackers can drain funds from the pair by providing worthless assets", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "In contracts/pair_transmuter/src/contract.rs:312-315, the swap function accepts the offer_asset provided by the caller in return for other assets available in the pool. However, no validation ensures that the provided asset is one of the pools supported assets in config.pair_info.asset_infos. This is problematic because attackers can oer any worthless native token in exchange for valuable assets in the pool, thereby proting from the price dierence and causing a loss of funds for liquidity providers. CW20 the assert_sent_native_token_balance function is designed not to Additionally, (see sent validate packages/astroport/src/asset.rs:248). In contrast to the previous scenario, where an attacker supplies worthless native tokens, the attacker can simply specify CW20 tokens as the offer_asset to steal assets directly from the contract without providing actual funds. tokens user the by Please see the test_drain_pool test case in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Pools can support an arbitrary number of assets", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "In contracts/pair_transmuter/src/contract.rs:39-42, the instantiate function ensures that at least two assets are submitted. However, no maximum amount of assets is enforced. If the pool is congured to hold a very large number of assets, subsequent code that iterates over all assets leads to high gas expenses and potentially an out-of-gas error. An example of an iteration can be found in contracts/pair_transmuter/src/contract.rs:184 when withdrawing liquidity. We classify this issue as minor because it can only caused by the contract owner, which is a privileged address. Additionally, the contract is still usable even though the asset iteration fails due to an out-of-gas error. It allows users to provide single-sided liquidity, perform imbalance withdrawals, and explicitly specify the return asset during swaps. Since these features do not require iteration over all pool assets, an out-of-gas error will not occur.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Withdrawing liquidity from a pool with an empty side can lead to panic", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "withdraw_liquidity The in contracts/pair_transmuter/src/contract.rs:165-255 allows users to burn their liquidity pool tokens to withdraw the underlying pool liquidity. function dened However, if the assets vector is not explicitly specied and one of the pools assets is empty, the get_share_in_assets function will in contracts/pair_transmuter/src/utils.rs:50. include a zero-amount return asset Consequently, the transaction will fail when calling BankMsg::Send because Cosmos SDK does not allow zero-amount native token transfers. Please see the test_unbalanced_withdraw test case to reproduce this issue.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Liquidity pool token contracts use the same symbol", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "In contracts/pair_transmuter/src/contract.rs:68, is hardcoded to uLP when instantiating a CW20 liquidity pool token contract. This causes all pair contracts to have the same symbol in their liquidity pool token contract. the token symbol", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Unused elds in ProvideLiquidity and Swap messages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "ProvideLiquidity The in packages/astroport/src/pair.rs:42-51 as a struct with the following elds: assets, slippage_tolerance, auto_stake, and receiver. message dened is However, the slippage_tolerance and auto_stake parameters are disregarded and unused in contracts/pair_transmuter/src/contract.rs:123-125. Similarly, the Swap message is dened in packages/astroport/src/pair.rs:53-59 as a struct with the following elds: offer_asset, ask_asset_info, belief_price, max_spread, and to. However, the belief_price and max_spread parameters are disregarded and unused in contracts/pair_transmuter/src/contract.rs:126-131. Unused parameters mislead users and decrease the user experience. For example, liquidity providers expect tokens to be auto-staked when specifying the auto_stake parameter as true, which is incorrect because the eld is ignored. liquidity pool their", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Pair conguration override due to custom pair types", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "the migrate_pair_configs In contracts/factory/src/migration.rs:45-46, function migrates the OldPairType::Concentrated and OldPairType::Custom state into PairType::Custom. a scenario Assume and OldPairType::Custom(\"concentrated\") is specied. In this case, the concentrated pair type conguration will be overwritten by the custom pair type conguration, as seen in lines 61 and 63. OldPairType::Concentrated where We classify this issue as informational because it can only be caused by the contract owner, which is a privileged role.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Migrated pair congurations can be instantiated by anyone", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-01-30 Audit Report - Astroport Transmuter Pool v1.0.pdf", "body": "contracts/factory/src/migration.rs:56, the migrate_pair_configs In function migrates previous pair congurations and sets the permissioned eld to false. This allows existing pair congurations to be instantiated by anyone, as seen in contracts/factory/src/contract.rs:295-297. We classify this issue as informational because it is a best practice to set default values as restrictive as possible, adhering to the principle of least privilege.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Revoked collateral assets re-activated during contract migration", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "When performing the migration of the collateral oracle contract, legacy collateral information is migrated to the new storage layout. During this process, every collateral is marked with in is_revoked: false The contracts/mirror_collateral_oracle/src/migration.rs:112. consequence of this is that collateral that had previously been revoked is now re-activated.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Incorrect specication of migration poll voting period", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "During the creation of a new migration poll, the voting period is dened incorrectly as that of the default poll cong in line contracts/mirror_gov/src/contract.rs:329. The impact of this would be the reduction in the voting period of migration polls, allowing less time for them to pass with a potential danger of a distributed poll deposit by the protocol.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Collateral oracles cong migration is not performed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "in The contracts/mirror_collateral_oracle/src/migration.rs:49 is unused. This implies that after the migration, the cong will not be decoded properly. migrate_config function", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Admin rights cannot be revoked when claimed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "of current implementation in contract The contracts/admin_manager/src/contract.rs allows an account to claim the contracts admin rights. Upon claiming the admin rights the account becomes the target contracts admin and has the right to perform contract migrations. There is no mechanism to revoke any claimed admin rights. If the third partys account is lost or compromised, there is no way for the protocol to recover, and all locked funds might be lost forever. manager admin the", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Users can grief creation of admin polls", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "Creation of a new admin poll is not possible if the number of existing polls is greater or equal to MAX_POLLS_IN_PROGRESS in contracts/mirror_gov/src/contract.rs:335. The impact of which is prevention of new admin polls being created through continuous adding of new polls. We consider this issue to be minor since it is mitigated by the fact that deposits for failed polls are distributed to stakers. Despite this cost, there is still a possibility of attackers trying to grief admin actions.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Admin and migration poll conguration can be updated in a default poll", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "If the governance cong is updated through a poll, the default_poll_config will be used in contracts/mirror_gov/src/contract.rs:435. This could enable a whale or colluding token holders to alter the conguration of the admin and migration poll types through a default poll. Subsequently, such malicious actors could execute migration and admin actions with signicantly lower poll requirements to extract value from Mirror. We consider this issue minor since the community could observe such polls and intervene by rejecting them.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Admin manager can be updated in governance contract with default poll cong", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "all admin While contracts/mirror_gov/src/contract.rs:373, an update of the admin_manager dened in the contract with the default poll cong. through the current implementation allows or migration congs actions admin imply poll After updating the admin_manager to any other address, normal messages can be used for admin actions, including contract migrations. As in the last issue, we only consider this issue minor since the community could observe such polls and intervene by rejecting them.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Migrations that run out of gas remain executable and may be triggered in the far future", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "The governance contract supports migrations to be run when a poll is executed through the ExecutePoll message. Such execution, which is triggered as a sub-message in contracts/mirror_gov/src/contract.rs:615, does not have a gas limit set. If the migration (or any other message) runs out of gas, the whole ExecutePoll message will revert. As a consequence, the poll will not be changed from PollStatus::Passed to PollStatus::Failed. This implies that polls will stay open for an unlimited time. the status of This can become problematic if Terra decides to increase the gas limit for messages in the future. In such a case outdated migration messages might be triggered, which could lead to an inconsistent state of the contracts. This issue also replies to any other poll running out gas, but is especially devastating with migrations that might change the storage layout.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Addresses for migration in migration polls are not validated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mirror/2022-01-14 Audit Report - Mirror Decentralized Governance v1.0.pdf", "body": "When creating migration polls, addresses for the contracts to be migrated are currently not validated in contracts/mirror_gov/src/contract.rs:409. This could lead to failure of migration executions. message creation prior to", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Liquidity token price source does not work with Osmosis pools", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "In packages/abstract-os/src/objects/price_source.rs:222-226, the liquidity pool token asset must be a CW20 token, or else an error will occur. This is problematic because Osmosis uses native tokens as liquidity pool tokens (e.g., gamm/pool/1), preventing root users from conguring PriceSource::LiquidityToken asset value calculation for Osmosis-based pools.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. API contracts cannot use reply handlers", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "In packages/abstract-api/src/endpoints.rs, is not registered for Abstract APIs. This means the API contracts reply entry point will not be executed even if dened, causing the transaction to revert. the reply entry point We classify this issue as major because it aects the correct functioning of the system.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Installed modules can execute arbitrary Cosmos messages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The proxy contract allows whitelisted modules to execute arbitrary messages through the ExecuteMsg::ModuleAction entry-point handled by the execute_module_action function in contracts/core/proxy/src/commands.rs:19-33. As a result, any ill-intended module could perform high-impact actions on the proxy, such as stealing all funds. Similarly, the execute_ibc_action function in lines 37-63 allows arbitrary execution of Cosmos messages over IBC with a similar impact.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Root users updating module addresses might cause inconsistencies", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "update_module_addresses in function The contracts/core/manager/src/commands.rs:46 allows the caller to update the OS_MODULES map directly. This privileged function is intended for contract-to-contract interaction in which the caller likely performs lookups and validations on the message parameter. For example, the manager contract calls this function internally through the register_module and set_migrate_msgs_and_context functions. In contrast, the root user should not call this function to update the module addresses as it could introduce unintended consequences to their OS, for example, if:  The new address is not whitelisted in the proxy contract using the whitelist_dapp_on_proxy function.  The old address is not removed from the proxy contract using the remove_dapp_from_proxy_msg function.  New modules that require dependencies to work are directly set instead of using the intended install procedure via the install_module function.  Modules are removed without checking their dependents from the DEPENDENTS storage state.  The root user bypasses validation in contracts/core/manager/src/commands.rs:87-89 by directly calling the module factory contract. This can be achieved by updating any dummy name to the module factory contract address via the update_module_addresses function and the install_module functions using the ExecOnModule message to forward the message to the module factory contract to register the module.  Duplicate addresses are provided within the to_add vector which would only cause the last one to be stored. While most of these examples may not cause signicant issues, not automatically removing an old module from the proxy contract would allow it to execute commands via execute_module_action even though the OS_MODULES storage state is modied.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Migration to an older version is not prevented and may lead to state inconsistencies", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "an for multiple contracts in scope does not prevent a contract The migrate entry point migration and version. Currently, older to migrate_module_data functions are only executed when the contract is being migrated to a newer version. In the case that a migration is performed to an older version, no error would be raised, causing the new version of the contract to not be set, and the module data would be silently not migrated to the next version. set_contract_version the  contracts/core/manager/src/contract.rs:34  contracts/core/proxy/src/contract.rs:65  packages/abstract-app/src/endpoints/migrate.rs:41 In addition, the migrate function does not check if the contract name is indeed the same. In case of a mistake when selecting the code ID, the contract instance could be migrated to a dierent contract. We classify this issue as minor since only the root user can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Governance type lacking validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "When the os-factory contract instantiates the manager contract, the governance type is converted to a string. Then it is passed to the os_info as a string. This conversion is made, but the governance type should only support Monarchy and External, which are the two variants in by packages/abstract-os/src/objects/gov_type.rs:9. GovernanceDetails supported enum the set_root_and_gov_type in The contracts/core/manager/src/commands.rs:239 allows this value to be updated directly by the root user as a string. Hence, its value can diverge from the enum variants. function for Similarly, the instantiate function also takes this piece of data as a string instead of an enum without further validation.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. subscriptor_address is not updatable", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "contracts The manager contract implements the subscriptor_address role to suspend most of in function However, the contracts/core/manager/src/commands.rs:407-427 does not allow for this address to be updated. update_info functionality. the is best practice to allow updates of privileged addresses, which is useful It operational changes or if a privileged account is compromised. in case of", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Queries might fail due to unbounded iterations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "In packages/abstract-api/src/endpoints/query.rs:48 and 60-64, all traders and dependencies are returned without pagination. If too many traders or dependencies are the BaseQueryMsg::Traders and BaseQueryMsg::Config registered/installed, queries might fail due to an out-of-gas error.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Add action prevailing over remove action when updating oracles assets", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "oracle package implements in The update_assets packages/abstract-os/src/objects/oracle.rs:47-72, which two vectors: One of the assets to be added to the oracle and one of the assets to be removed. The function rst removes any assets in the to_remove vector and then adds the ones in to_add vector. function accepts the This approach is not recommended since if the same asset is found in both vectors, it will neither be removed nor added, and no error is raised. This implies that in case of a mistake where the owner accidentally sends an asset in both vectors, they will be unaware of that mistake.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Lack of input validations when upgrading modules", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The manager contracts ExecuteMsg::Upgrade entry-point is handled by the in upgrade_modules function does not contracts/core/manager/src/commands.rs:255-277. This thoroughly validate the modules argument vector, which can lead to the following problems: function Firstly, in the case that duplicated modules are provided, two identical migration messages will be forwarded, causing the second migration attempt to fail if the migrate only if newer pattern is in place (as recommended by best practices), causing the whole call to fail. Secondly, the function does not check that the provided vector is empty, allowing for an inecient execution that will forward the Callback message without actual changes. if Thirdly, the whole execution would be short-circuited to the upgrade_self function if one of the modules to upgrade is abstract:manager. This is problematic if other modules need to be migrated along because they will be ignored and potentially cause a partial state mutation. For example, the last module to be migrated is the manager contract, the MIGRATE_CONTEXT storage state will store the previous module_id and old dependencies while the update_module_addresses function will overwrite the old module address to the new one in line 300. Since the migration is never executed for other modules, the root user can only call the ExecOnModule message to the invalid new app address (which should be the old one), and the handle_callback and assert_migrate_requirements functions will execute the same module ID more than once, consuming extra gas. Finally, as the provided modules are not checked to have a migrate function, the forwarded migrate message will fail when a non-migratable module is provided, causing the whole call to revert. We classify this issue as minor because it can only be caused by the root user.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Querying conguration does not return the subscriptors address", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The manager contract implements an entry point to query its conguration. This call managed the contracts/core/manager/src/queries.rs:36-49. handle_config_query function by is in this However, details: subscriptor_address is not retrieved, even though it plays a central role as it is in charge of the contracts suspension. conguration function retrieve does not the full", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Remove duplicate permission check", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "the in In contracts/core/manager/src/commands.rs:233, there is a validation to assert that the caller is the root user. This is unnecessary as the execute_update_admin function performs this check already and is called later in the function. assert_admin function", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Contracts should implement a two-step ownership transfer", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The contracts within the scope of this audit allow the current owner to execute a one-step ownership transfer. While this is common practice, it presents a risk for the ownership of the contract to become lost if the owner transfers ownership to the incorrect address. A two-step ownership transfer will allow the current owner to propose a new owner, and then the account that is proposed as the new owner may call a function that will allow them to claim ownership and actually execute the cong update.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Incorrect comments", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "exec_on_module in The contracts/core/manager/src/commands.rs:167 that seems to be copied from another function. comment incorrect contains function an similar A packages/abstract-os/src/objects/module_version.rs:48-50. set_module_data situation occurs also the in function in", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Insucient validation to hinder o-chain attacks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The manager contract includes three pieces of information that could potentially be used as part of injection or phishing schemes: name, description, and link. These could: traditional web exploits such as script 1. Contain whitespace intended to trick users 2. Contain code that may be executed in a users browser 3. Contain links to external resources that may be malicious 4. Contain insecure links", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "16. Overow checks not enabled for release prole", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "None of the packages and contracts enabled overflow-checks for the release prole. While enabled implicitly through the workspace manifest, future refactoring might break this assumption.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Misleading message names", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The SuspendOs and EnableIBC functions in the manager contract are both potentially misleading function names. Based on their names, the functions seem declarative of one specic action, but each of these functions actually supports enabling and disabling functionality. For example, a call to EnableIBC with a status of false actually disables the IBC functionality.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "18. Sudo messages are not exported", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "and In packages/abstract-api/src/endpoints.rs packages/abstract-app/src/endpoints.rs, sudo messages are not exported as valid entry points. If governance decides to vote and execute arbitrary messages on the API or app contracts, they will fail.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "19. Governance type implementation diverges from documentation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Abstract/2023-05-09 Audit Report - Abstract Module Bases, Proxy and Manager Contracts v1.0.pdf", "body": "The governance documentation page lists three governance types: monarchy, multisig, and in token. packages/abstract-os/src/objects/gov_type.rs:9-22 only implements two governance types: monarchy and multisig. GovernanceDetails However, enum the", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Stakers can steal funds by providing duplicate assets", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "In the contracts/lockdrop/src/entry/execute.rs:315-349, try_claim_rewards and try_claim_all_rewards functions implement the optional assets parameter if the staker wants to withdraw specic assets. The issue is that if duplicate assets are provided, stakers can withdraw more rewards than intended due to the loops in lines 1362, 1493, 1658, and 1810. Consequently, rewards from other stakers will be paid out, triggering an insucient balance error when other stakers unlock their staked eclipASTRO and liquidity pool tokens, causing a loss of funds.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Rewards are not recorded by the global index, causing a loss of rewards for stakers", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "contracts/lockdrop/src/entry/execute.rs:1593-1604, In the the _claim_all_single_sided_rewards SINGLE_STAKING_REWARD_WEIGHTS state if the reward duration does not match the specied durations. This is problematic because when the rewards are claimed from the index must be increased accordingly to staking contract in lines 1571-1582, the global distribute the rewards to the stakers. An example of a correct implementation can be found in contracts/lockdrop/src/entry/execute.rs:1345-1352. function update does not Consequently, the withdrawn rewards are not distributed to the stakers, causing a loss of rewards.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Incorrect penalty amount possible", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "In contracts/lockdrop/src/entry/execute.rs:2046, the _unlock_lp_lockup function computes the penalty amount to be half of the withdrawn amount. This is incorrect because the penalty amount should be computed with the early_unlock_penalty_bps value dened in packages/equinox_msg/src/lockdrop.rs:231. the contract If instantiator congured a dierent Some(msg.lock_configs) value in contracts/lockdrop/src/entry/instantiate.rs:47, the penalty amount will be incorrect. We classify this issue as minor because it can only be caused by the contract instantiator, which is a privileged role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Contract ownership cannot be transferred", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "The contract within the scope of this audit does not expose any entry points for the owner to transfer ownership. This is problematic because if the contract owner is compromised, there is no way to recover.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Missing conguration validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "The lockdrop contract does not perform validation on several of its conguration elds in the following locations:  instantiation contracts/lockdrop/src/entry/instantiate.rs:18-70  try_update_config contracts/lockdrop/src/entry/execute.rs:38-54  try_update_reward_distribution_config contracts/lockdrop/src/entry/execute.rs:56-78 in in in The aected elds are the following:  The addresses are not validated using addr_validate to ensure the addresses are in the correct format:  dao_treasury_address  eclipastro_token  converter  single_sided_staking  lp_staking  astro_staking  The eclip and bclip assets may be native or CW20 tokens from the AssetInfo enum:  If they are native assets, the denom should be validated with BankQuery::Supply to ensure the supply is larger than zero, meaning the denom exists.  If they are CW20 token addresses, addr_validate should be called on the address.  The lock_configs vector holds individual lock congurations that consist of duration, multiplier, and early_unlock_penalty elds:  The lock_configs vector should be validated to ensure no lock congurations use the same duration eld. Entries with repeated durations make elements dierent than the rst to be unreachable when performing value matching or duplicate entries in storage pieces to be modied several times when loading data based on the duration key by iterating through the congs.  The deposit_window and withdrawal_window elds should be validated to contain a minimum duration. For example, the protocol will not work properly if the elds are miscongured as zero. We classify this issue as minor because it can only be caused by the contract owner, who is a privileged entity.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Incorrect and misleading events emitted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Eclipse Fi/2024-07-30 Audit Report - Eclipse Equinox Lockdrop Contract v1.0.pdf", "body": "The following instances illustrate incorrect or misleading events emitted:  The migrate function in contracts/lockdrop/src/contract.rs:132 emits the contract name as new_contract_name. This is misleading because the contract the migration due to the validation in name does not change throughout contracts/lockdrop/src/contract.rs:113-117. Consider modifying the attribute key to contract_name to prevent confusion.  In contracts/lockdrop/src/entry/execute.rs:1220, amount attribute is emitted incorrectly as eclipastro_amount_to_deposit. This is incorrect because the xASTRO amount value will be reected as the eclipASTRO deposit amount. the Consider modifying the Uint128::from(2u128) contracts/lockdrop/src/entry/execute.rs:1046. attribute value emit to xastro_amount / following  In contracts/lockdrop/src/entry/execute.rs:1230, amount attribute is emitted incorrectly as eclipastro_amount_to_deposit. This is incorrect because the xASTRO amount value will be reected as the eclipASTRO deposit amount. the Consider modifying the attribute value to emit xastro_amount_to_deposit.  In contracts/lockdrop/src/entry/execute.rs:261, the action emitted is to convert ASTRO to xASTRO. This is incorrect because the action is converting ASTRO to eclipASTRO. Consider modifying the attribute value to convert ASTRO to eclipASTRO.  In contracts/lockdrop/src/entry/execute.rs:50, new_timelock_staking. This the attribute key is incorrect because the updated is emitted as conguration is the DAO treasury address. Consider modifying the attribute key to new_dao_treasury_address.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Attackers can cause a consensus failure by sending coins through IBC", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "in x/tariff/keeper/allocation.go:30 During the execution of the BeginBlocker, a panic occurs in the AllocateTokens the function SendCoinsFromModuleToAccount function returns an error. This error can be caused if a zero-amount coin is passed to the SendCoinsFromModuleToAccount function. Currently, there is no check in the AllocateTokens function that prevents a coin with a zero amount from being added to coins. if An unsuspecting user or an attacker could cause such a panic by sending a coin with an amount in the [10_000, 19_999] range through IBC. Since the scale factor is 10_000 and the result is truncated, this would cause the sending of coins with a zero amount using the SendCoinsFromModuleToAccount function, which would cause a panic as described above. Consequently, the chain will be permanently halted since the error is not recoverable without pruning the state. A test case able to reproduce this issue can be found in Appendix 1.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Panic in SendCoinsFromModuleToAccount causes chain to halt", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "When the BeginBlocker is executed, AllocateTokens function dened in x/tariff/keeper/allocation.go:30. there is a possibility of a panic in the This panic occurs when the SendCoinsFromModuleToAccount method of bankKeeper encounters an error. One such error can arise if the recipient's address is listed in the Bank modules blacklist. The purpose of blacklisting is to prevent users from sending funds to module accounts or to proactively block specic malicious accounts as determined by the governance. An attacker could forge a message to send coins to these blacklisted accounts, causing a panic that halts the chain.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Fee will round to zero for small fees or amounts", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "The SendPacket function in x/tariff/keeper/keeper.go:81-82 introduces a rounding issue that can occur when the bpsFee or the fullAmount take small values. The rounding will be in favor of the user and will round down to 0. using example, For in docs/modules/tariff.md, amounts under 10000uDenom will have a fee value that rounds down to 0. TransferFeeBps from the value docs the of", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. A large number of DistributionEntities could slow down and even halt the chain", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "The AllocateTokens function dened in x/tariff/keeper/allocation.go:7-33 is responsible for distributing fees to DistributionEntities during the BeginBlocker. Since it performs an unbounded loop through all the registered DistributionEntities, it could cause the BeginBlocker execution to take more time than expected. This could slow down the chain or, in the worst case, halt the node because Tendermints timeouts are hit. classify issue We DistributionEntities. this as informational since only governance can register", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Remove unused functions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "There are some instances of unused functions in the codebase:  The String function in x/tariff/types/params.go:139.  The GetAccount function in x/tariff/types/expected_keeper.go:11.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Use of magic numbers decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2023-07-08 Audit Report - Noble Tariff Module v1.0.pdf", "body": "In the codebase, hard-coded number literals without context or a description are used. Using such magic numbers goes against best practices as they reduce code readability and maintenance as developers are unable to easily understand their use and may make inconsistent changes across the codebase. In x/tariff/types/params.go:85, transferFeeBPS is greater than a hard-coded value of 10000. there is a validation check if the value of In x/tariff/keeper/keeper.go:81, the values 4 and 1 are hard-coded.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Missing transaction revert could lead to loss of funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "In evm/src/dexspan/DexSpan.sol:421-437, the messageHandler function should transfer funds to the recipient and, if isInstruction is set to true, it initiates a call to the recipient. However, it does not check the execFlag and does not roll back the current state if the call fails. As a consequence, this could potentially result in the loss of funds within the recipient contract.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Contract upgradability is not properly implemented", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The DexSpan contract is Initializable and intended for upgrades, using an initializer function instead of a constructor. However, it implements a constructor. As highlighted in the Open Zeppelin documentation on Writing Upgradeable Contracts, this misuse of functions would make the contract not upgradeable.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. The UniswapV2s skim address is hardcoded which may lead to a loss of funds on other chains", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The UniswapV2s skim contract address is hardcoded in the constant skimAddress in and evm/src/dexspan/DexSpan.sol:76 evm/src/dexspan/DexSpanView.sol:45. However, since the skim contract address may vary on dierent chains, the hardcoded address may result in a loss of funds on another chain where the address does not belong to Uniswap.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Maximum approval on third-party components may lead to drain of funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The _swapOnOneInch, _swapOnParaswap, and _swapOnUniswapV3 functions dened evm/src/dexspan/DexSpan.sol:593-615, respectively and evm/src/dexspan/DexSpan.sol:617-643, evm/src/dexspan/DexSpan.sol:564-591 allow swapping tokens on dierent DEXs. in However, they do not limit token approvals appropriately, by using a type(uint256).max approval to the addresses of those protocols each time they are invoked. As a result, this could lead to a drain of funds if there is a bug or malicious implementation in the allowed contracts.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. DEX swap functions enable users to perform arbitrary calls", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The functions _swapOnOneInch, _swapOnParaswap and _swapOnUniswapV3 dened evm/src/dexspan/DexSpan.sol:593-615, in evm/src/dexspan/DexSpan.sol:617-643, and respectively, allow swapping tokens on evm/src/dexspan/DexSpan.sol:564-591, dierent DEXs. However, since these functions rely on unveried user input _data to call any given function of the address mapped at the input-provided flag, users can call arbitrary functions to let the transaction succeed even if no swap is performed. Moreover, in the case of a multihop swap, parameter calculations occur dynamically during the process, making it challenging for users to dene the correct parameters in the _data eld. This might lead to a loss of funds and leftover funds stuck in the contract. We classify this issue as major instead of critical since the frontend is assumed to correctly and safely construct messages.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Deposits in native currency always revert", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The swapAndDeposit function allows users to deposit native currency or swap tokens to native currency and deposit them to the asset forwarder contract. Then it calls the _swapMultiInternal function. If there is a swap whose nal token is the native currency, the contract will withdraw the funds from the native wrapper contract. However, it does not transfer funds when calling the deposit function, as this function only approves normal ERC20 contracts. Consequently, since the asset forwarder checks the msg.value, such transaction always revert.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. Balance retrieval logic enables attackers to drain contract funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "evm/src/dexspan/DexSpan.sol:352, In the universalBalanceOf(address(this)) function should fetch the balances used for computing transfers. 465, 452, and However, it does not return correct results when the contract holds assets. As a consequence, this can be exploited by attackers to steal the contracts balance by triggering swaps with the isWrapper parameter set to false. We classify this issue as major because the contract should not hold a balance, and this can only arise from incorrect usage, such as in the scenario mentioned where DEX swap functions enable users to perform arbitrary calls.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Missing emission of events for conguration changes", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The functions setAssetForwarder, setAssetBridge, setFlagToFactoryAdress, and setFactorySetter setWNativeAddresses in evm/src/dexspan/DexSpan.sol:242 should emit events to ensure proper tracking and integration with o-chain bridge components like the forwarder. evm/src/dexspan/DexSpan.sol:215-240 in However, they do not emit any events, leading to issues with o-chain bridge components. We classify this issue as minor since only admins can execute the aforementioned functions.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Missing addresses validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "In the following locations, addresses in function arguments are not validated:  In evm/src/dexspan/DexSpan.sol:204-214, assetForwarderAddress, native, and wrappedNative are not validated.  In evm/src/dexspan/DexSpan.sol:215-219, _forwarder is not validated.  In evm/src/dexspan/DexSpan.sol:221-225, _assetBridge is not validated.  In evm/src/dexspan/DexSpan.sol:227-234, _factoryAddress is not validated.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Lack of contract ownership transfer functionality", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "In evm/src/dexspan/DexSpan.sol, the contract should provide a mechanism to update its owner. Without such functionality, in case of issues with key management or a compromised owner, it is not possible to update the contract owner.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Anomalies in hexadecimal ags interval width can lead the transaction to revert", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "In evm/src/dexspan/DexSpan.sol:527-552, ags are dened as hexadecimal intervals. However, the width of the interval is inconsistent and does not include some values. Specically, the rst interval is [0x001, 0x03E9), the second is (0x03E9, 0x07D1), the third is (0x07D1, 0x0BB9), and the last one is [0x0BB9, 0x0FA1). Consequently, the second and third intervals are comparatively smaller, and render the ags 0x03E9 and 0x07D1 unusable. The global state variable mapping flagToAddress stores the address to swap with an external protocol related to the uint256 dened ag. The address is then retrieved in: 1. evm/src/dexspan/DexSpan.sol:573 _swapOnUniswapV3 2. evm/src/dexspan/DexSpan.sol:602 _swapOnOneInch 3. evm/src/dexspan/DexSpan.sol:626 _swapOnParaswap 4. evm/src/dexspan/DexSpan.sol:655 _swapOnExchangeInternal So it is possible to use a ag on a valid range that does not correspond to any real address, as the mapping only assigns one integer per address. This could lead to success on the range validation but reverts when trying to obtain the address. This code inconsistency would require assigning all individual integers ranges per corresponding address.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. The swap function accepts ETH even if not dened in the token swap array leading to funds stuck in the contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "evm/src/dexspan/DexSpan.sol:439-449, In the _swapMultiInternal function, if the user-dened tokens array does not contain ETH in the rst position, and the transaction's msg.amount is greater than 0, the transaction should revert. execution during the of However, since there is no check in place, the transaction will not revert and excess ETH funds will be stuck in the contract. We classify this issue as minor since the frontend is assumed to correctly construct messages.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. The assetBridge and assetForwarder could drain funds from the contract by sending a faulty swap message", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "In evm/src/dexspan/DexSpan.sol:404-420, both the assetForwarder and the assetBridge addresses have the potential to siphon funds from the contract by invoking the messageHandler function with a failing swap message. In fact, in the event of a swap failure, the _amount is transferred to the recipient without any validation or safeguards in place. We classify this issue as minor since it can only be executed from the assetBridge and assetForwarder trusted addresses.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. Insecure non-production contracts in the codebase", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-05-10 Audit Report - Router DexSpan v1.0.pdf", "body": "The evm/src/dexspan/DAI.sol and evm/src/dexspan/REP.sol contracts contain contracts for tokens with minimal specications and a permissionless mint functionality. We classify this issue as minor since these contracts are classied as testing/non-production code.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Lack of deadline parameter exposes user to risk of price volatility", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report -  Braintrust Uniswap Integration.pdf", "body": "The deadline parameter for the ExactInputSingleParams call to the Uniswap router is set to block.timestamp. This means that no deadline is set, implying that depending on gas provided by the frontend and network congestion, a long time might pass before the swap is executed, exposing the user to the risk of price changes. This is mitigated by carefully choosing the amountOutMinimum. However, for the given use case of the contract acting as a simple wrapper for o-chain code, passing on a front-end dened deadline value can help to protect users from misconguring this value.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Version pragma allows for versions with security vulnerabilities", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report -  Braintrust Uniswap Integration.pdf", "body": "The codebase allows any Solidity compiler version from 0.8 to less than 0.9. A number of important compiler bugs have recently been xed. In particular, version 0.8.4 xed important security issues.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "3. Outdated comment", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report -  Braintrust Uniswap Integration.pdf", "body": "The comment in line 26 and 27 does not correspond to the current implementation.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Contract does not implement slippage control", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report -  Braintrust Uniswap Integration.pdf", "body": "The contract is designed to accept an amountOutMin parameter that may be calculated o-chain and passed to the contract. While not a security concern, this architecture puts the responsibility of correct parameter choices on the frontend/user.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. The invariant checking the last stream ID will break over time, potentially causing the chain to halt", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "LastStreamIdInvariant The in dymension:x/streamer/keeper/invariants.go enforces the invariant that the ID of the last stream in the streams array must match the last used stream ID retrieved from the GetLastStreamID function. function However, the streams array retrieved via the GetStreams function is sorted by the storage key composed of either the upcoming, active, or nished prex and the stream ID, and not strictly by the stream ID itself. Specically, the order of streams in the KV storage is as follows: 1. Upcoming stream", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Finished streams Over time, as streams will be moved from their initial upcoming state into other states (i.e., active or nished), possibly out of order, depending on their start time, the last stream in the streams array will not be equal to the last added stream. Consequently, this invariant will error and cause the chain to halt. A test case reproducing the issue is provided in Appendix 1. We classify this issue as critical since it could cause a chain halt if validators have enabled invariant checks in production. Recommendation We recommend sorting the streams in ascending order by their Id. Status: Resolved 2. Unbounded loop in PowApprox can be exploited to halt the chain", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "3. Finished streams Over time, as streams will be moved from their initial upcoming state into other states (i.e., active or nished), possibly out of order, depending on their start time, the last stream in the streams array will not be equal to the last added stream. Consequently, this invariant will error and cause the chain to halt. A test case reproducing the issue is provided in Appendix 1. We classify this issue as critical since it could cause a chain halt if validators have enabled invariant checks in production. Recommendation We recommend sorting the streams in ascending order by their Id. Status: Resolved 2. Unbounded loop in PowApprox can be exploited to halt the chain", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. Directly sending funds to the txfees module can result in a denial-of-service", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The ModuleAccountAddrs function in dymension:app/app.go:936-946 returns a map of all module account addresses and a boolean indicating if the module account is allowed to receive funds through direct and explicit actions, such as MsgSend or SendCoinsFromModuleToAccount bank messages. However, in line 944, the txfees Cosmos SDK module is explicitly allowed to receive funds. This opens up a grieng possibility in the txfees module's AfterEpochEnd hook function in dymension-osmosis:x/txfees/keeper/hooks.go:34-82 that is executed after an epoch ends. Specically, the AfterEpochEnd function retrieves all its module account's coin balances in line 43 via the GetAllBalances function and subsequently iterates over them. By sending the a lot of dierent coin denoms via ICS-20 transfers to the txfees module, AfterEpochEnd function will consume a lot of computational resources, potentially resulting in a denial-of-service (DoS). As the Dymension chain does not have a tokenfactory module to create new tokens easily, the attacker would need to create numerous tokens on other IBC-connected chains and transfer them to the Dymension chain, which makes the attack more dicult to execute. Thus we classify this issue as major instead of critical.", "labels": ["Oak Security", "Severity: High"]}, {"title": "5. EVM contract addresses squatting via the vesting module resulting in non-functioning contracts and inaccessible funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "During the Dymension app's initialization in dymension:app/app.go:707, the vesting module MsgCreateVestingAccount, MsgCreatePermanentLockedAccount, or MsgCreatePeriodicVestingAccount messages, anyone can create a new vesting account for a specic account. enabled. using the By is However, as the address of an EVM contract deployed via the CREATE or CREATE2 opcodes is deterministic and predictable, an attacker can front-run the contract deployment and create a vesting account for this address. As a result, the account is internally not stored as an EthAccountI type but as a VestingAccount type, which prevents storing the contract's code, thus rendering the contract non-functioning and any funds sent to the contract address inaccessible. This issue has been independently reported by a third party during the audit.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. CreateStream does not prevent startTime in the past", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The CreateStream function in dymension:x/streamer/keeper/keeper.go:76 does not validate that the startTime of the new stream being created is not in the past. Allowing for the creation of a stream that has a start time in the past will have unintended consequences on the streams distribution. While it is likely that this validation was not added since stream creation proposals may make it dicult estimating an appropriate stream start time, it is best practice to have the code enforce this validation to ensure that the streams function properly.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Non-sequential stream creation during InitGenesis will cause invariant failure", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "InitGenesis During dymension:x/streamer/keeper/genesis.go:19, genstate.Streams is not validated to be sequential. A non-sequential list will cause the LastStreamIdInvariant invariant to fail. in", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Queries to disabled modules are not prevented", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The initial version of Dymension is intended to be released with the RollApp-associated modules and functionality disabled. While the modules prevent direct calls and message handling, they expose their querying endpoints. This may provide query responses that are misleading and impact the user experience.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Inadequate validation of weights in DistrInfo creation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "In dymension:x/streamer/types/distr_info.go:24, the Validate function does not check if weights are positive or the resulting total weight is zero. As a result, it may be the case that there are negative weights in DistrRecords or that no distribution records are specied, preventing reward distribution to gauges in the DistributeByWeights function in dymension:x/streamer/keeper/distribute.go:21.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. CLI commands for updating and replacing stream distributions are not registered", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The getGovProposalHandlers function in dymension:app/app.go:181-197 returns a list of governance proposal handlers for registering as CLI child commands that are mounted under the governance CLI. the However, and ReplaceStreamDistributionProposal proposals are missing and thus not registered as CLI child commands, preventing users from submitting these proposals via the CLI. UpdateStreamDistributionProposal handlers the for", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Errors during stream distribution prevent the processing of other streams", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "DistributeByWeights in The dymension:x/streamer/keeper/distribute.go allocates and distributes funds to gauges based on the specied weights. In lines 16-18, it is checked that the coins to allocate are not empty. Otherwise, an error is returned. Similarly, the total weight of the distribution is checked in lines 20-22 to be non-zero. function However, such an error is propagated all the way up to the AfterEpochEnd hook in dymension:x/streamer/keeper/hooks.go:62 and thus prevents processing other streams.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. A stream is incorrectly considered active after it has nished", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "IsActiveStream in The dymension:x/streamer/types/stream.go:29-34 returns true if the stream is in an active state during the provided curTime. However, the condition in line 30 is incorrect and will always determine the stream to be active if curTime is after the stream's StartTime and not equal to the current block time. function This is due to the && operator having higher precedence than || and thus resulting in the condition that checks if the current time is equal to the stream StartTime and if all epochs are processed, evaluating to false in case the current block time does not match the start time of the stream. Consequently, a nished stream can be updated and replaced via a governance proposal which results in an incorrect state in InitGenesis. this issue function Similarly, dymension-osmosis:x/incentives/types/gauge.go:43. Please note that issue has been identied and xed upstream by the Osmosis team in PR-4306. IsActiveGauge observed also the in is in this", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. Rewards can be added to a nished gauge resulting in inaccessible funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The does dymension-osmosis:x/incentives/keeper/gauge.go:146-162 determine if the gauge is already nished and allows adding rewards without erroring. AddToGaugeRewards function in not this function As in the x/streamer/keeper/distribute.go:47 to distribute the stream's funds to gauges, funds may be added to a gauge that is already nished, rendering the funds inaccessible. DistributeByWeights used within function is Due to this issue being mainly caused by misconguration of the stream distribution, we classify it as minor. Please note that this issue has been identied and xed upstream by the Osmosis team in PR-6445.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. Missing message registration for Amino codec", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "RegisterCodec The dymension-osmosis:x/lockup/types/codec.go are missing to register MsgExtendLockup and MsgForceUnlock messages for the Amino codec. RegisterInterfaces functions and in the", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. Errors during fee swaps may result in an erroneous state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "After an epoch ends, dymension-osmosis:x/txfees/keeper/hooks.go swaps all transaction fees to DYM and burns them. the AfterEpochEnd function of the txfees module in received non-DYM However, if the RouteExactAmountIn function called in line 67 internally errors, and due to using continue in this error case, the state machine is not reset, and the next fee coin is processed, resulting in a potentially erroneous state.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "16. CLI long descriptions are lacking detail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The stream queries in dymension:x/streamer/client/cli/query.go do not provide detailed long descriptions. Long descriptions improve the user experience of the CLI and should contain all relevant details of the query command and its usage. Currently, most of the queries In the le only provide a short description.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Gauge sorting validation may lead to unnecessary errors", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "validateGauges in The dymension:x/streamer/keeper/distr_info.go:41 performs a validation to ensure the gauges are supplied in sorted order. This validation may be problematic as it may cause valid proposals to be rejected unnecessarily, as gauges could be sorted by the function. function", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "18. Potential key collision due to KeyIndexSeparator", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "The streamer module utilizes a specic encoding scheme for processing keys, as dened in use of dymension:x/streamer/types/keys.go. KeyIndexSeparator, KeyPrefixStreams, and various other key prexes. includes scheme This the for key a potential There is implementation of KeyIndexSeparator set to 0x07. This byte is added after each prex key. The dened key prexes include KeyPrefixStreams = 0x04, KeyPrefixUpcomingStreams = 0x0400, and KeyPrefixFinishedStreams = 0x0402. collision due to the current KeyPrefixActiveStreams 0x0401, = While this does not cause any issues in the current implementation, the existence of a new lead to a key collision because key prex KeyPrefixNewStreams set to 0x0407 will combineKeys(KeyPrefixStreams, and combineKeys(KeyPrefixNewStream, ID2) equal to 0x0407 and 0x040707 start with the same bytes. ID1)", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "19. Add a new invariant to validate stream distribution records", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "In dymension:x/streamer/keeper/invariants, no invariant currently checks that the sum of records weights is equal to the total weight of distribution and all the weights are greater than 0.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "20. The correct content type is not set", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "In   dymension:app/healthcheck.go:47, application/json type is not set, so HTTP resources for error and normal responses will have dierent content types.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "21. Incentives module genesis state validation does not validate Params eld", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "in The dymension-osmosis:x/incentives/types/genesis.go:42-47, called during the Validate function genesis state validation, misses validation of the genesis state's Params, ensuring that the DistrEpochIdentifier is valid. Please note that this issue has been identied and xed upstream by the Osmosis team in PR-6529.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "22. General code improvements", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dymension/2024-03-08 Audit Report - Dymension Point 0D v1.0.pdf", "body": "In several instances of the codebase, the code quality and readability can be improved:  In dymension:x/streamer/keeper/genesis_test.go:30, there is an ineectual assignment to err that leads to ignoring the error.  In dymension:cmd/dymd/main.go:16-18, type switch on errors fails on wrapped errors.  Remove unused functions dymension:cmd/dymd/cmd/inspect_tendermint.go:19, dymension:x/streamer/types/keys.go:44).  Remove unused dymension:x/streamer/types/errors.go:9,11,15,16). errors  Remove unused and dymension:x/streamer/types/genesis.go:6, dymension:x/streamer/types/events.go:9, dymension:x/streamer/client/proposal_handler.go:11). constants variables (e.g., (e.g., (e.g.,  Mark unused parameters using _ or remove them (e.g., dymension:cmd/dymd/cmd/inspect.go:32, x/streamer/types/codec.go:18).  In dymension:app/healthcheck.go:66, the error is not checked and ignored.  dymension:proto/dymension/streamer/gov_distribution.proto contains useful comments, but they are hard to nd. Moving the comments to another place close to implementation would be helpful. of StreamsInvariant invariant name the in  The dymension:x/streamer/keeper/invariants.go:65 can be improved.  In dymension:app/ante/ante_options.go:30-47, there is no validation that IBCKeeper, FeegrantKeeper, and ExtensionOptionChecker are not nil.  dymension:x/streamer/types/distr_info.go uses a deprecated types/math.go package.  sdkerrors.Register deprecated, functionality cosmossdk.io/errors. used in x/streamer/types/errors.go:9-19 is to package moved been that has of  In x/streamer/client/cli/tx_create_stream.go:86-87 govcli.FlagTitle and govcli.FlagDescriptionis are deprecated. They are only used for v1beta1 legacy proposals.  Remove todos and dymension:x/streamer/client/cli/utils.go:12, dymension:app/params/config.go:62, dymension:x/streamer/keeper/keeper.go:60). create issues instead (e.g.,", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Events emitted from the EVM gateway and voyager contracts are potentially processed out of order, resulting in events being skipped and not sent to Router Chain", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "The respectively. Subsequently, events are sent Emitted events from the gateway and voyager contracts on supported EVM chains, such as iSend and iReceive, are listened to by the EvmGatewayEventProcessor, and to Router EvmVoyagerEventProcessor, in Chain. and listener/evm/gatewayeventprocessor/gatewayeventprocessor.go:52 listener/evm/voyagereventprocessor/voyagereventprocessor.go:52 queries the events emitted within the specied block range by the source chain and sends them to Router Chain. Router Chain expects the events to be submitted in sequence, i.e., the events must be ordered by the EventNonce. This monotonically increasing number is incremented for each event emitted from the gateway and voyager contracts. ProcessInboundEvents function the various events, split up in individual arrays per event by using Internally, sequentially SortAndTransformInboundEventsByEventNonce gatewayeventprocessor.go:228-337 SortAndTransformVoyagerEventsByEventNonce voyagereventprocessor.go:189-281. the merge sort algorithm, implemented function type, are sorted the in in and in function in sequence by comparing the EventNonce of Specically, a for loop is implemented, which iterates n times, where n is the number of events. In each iteration, the loop iterates over all individual event arrays to nd the next the current event with the event to is lastProcessedEventNonce lastProcessedEventNonce + 1, the event is included in the msgs array, containing the sorted events. Otherwise, the event is considered to have already been processed and the lastProcessedEventNonce variable is updated with the skipped. Afterward, EventNonce of the current event. EventNonce variable. equal the If To ensure the merge sort algorithm's correct the event arrays, e.g., iSendEvents or iReceiveEvents, must be sorted by the EventNonce. Otherwise, events will be incorrectly skipped and not processed. functioning, However, contrary to the event listeners for the NEAR and TRON chains, the EVM gateway and voyager listener do not explicitly sort the individual event arrays by the EventNonce. Instead, the events are queried from the source EVM chain by the underlying eth_getLogs RPC call, which does not guarantee that the events are returned in order. Consequently, the events are not sorted by the EventNonce, and the merge sort algorithm does not work as intended, resulting in events being skipped and not sent to Router Chain.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Inbound and outbound CROSSTALK requests originating from non-Cosmos chains are ignored and not able to be relayed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "function implemented Inbound and outbound requests are processed and conrmed by orchestrators within the and Start attester/outbound/outbound.go:43, respectively. The requests are queried in batches of 50 from Router Chain RPC until all available requests are retrieved. Subsequently, the requests are iterated and processed individually. Before conrming a request, i.e., signing the request data with the orchestrator's private key and sending it to Router Chain, the request is validated. attester/inbound/inbound.go:43 in Validation includes checking if the request requires relaying to a destination chain and if the request is ready for execution on the destination chain. Furthermore, special validation is in inbound.go:76 and outbound.go:77. performed for CROSSTALK requests Specically, if the request's workow type is of type CROSSTALK and the validation type is not IBC_VALIDATION, the request is ltered out and not processed. Consequently, only CROSSTALK requests originating from a Cosmos chain are processed, and requests from other chain types, e.g., EVM or NEAR, are ignored and not processed, resulting in the inability to relay such CROSSTALK requests to a destination chain.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Transaction origin is hardcoded as an empty string when transforming an iSend event", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "In listener/near/gatewayeventprocessor/tranformer.go:76, the transaction origin is hardcoded as an empty string when creating a cross-chain request. This is incorrect the transaction. because the transaction origin should record the original sender of Consequently, the orchestrator will submit an empty transaction origin when transforming an iSend event in the NEAR network via the gateway contract, causing Router Chain to be unable to parse it.", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. A potential unconrmed block is processed in the NEAR event listener", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "listener/near/gatewayeventprocessor/querier.go:75 and In the listener/near/voyagereventprocessor/querier.go:75, and QueryEventsFromGatewayContract QueryEventsFromVoyagerContract function computes the number of blocks as (endBlock - startBlock + 1). This is problematic because one extra block will be processed after the end block, which is unconrmed. An unconrmed block can be replaced if block reorganization happens. If this happens, the orchestrator will process the unconrmed blocks event instead of the conrmed block, leading to incorrectly processed events.", "labels": ["Oak Security", "Severity: High"]}, {"title": "5. Suboptimal processing of attestations leading to missing attestations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "In attester/inbound/inbound.go:49, attester/outbound/outbound.go:49, and attester/valset/valset.go:50, a loop is used to continuously poll for new CrosschainRequest, crosschainRequests, valsetRequests, and to provide attestations. The process involves querying all available requests until the pagination key, nextKey, becomes empty. Subsequently, requests are processed and queued for dispatching to Router Chain. After completion, the code enters a 10-second sleep period before resuming polling. CrosschainAckRequest, i.e., However, the nextKey variable is redeclared, leading to the following problems: 1. Increased load on Router Chain: The redeclaration of the nextKey variable (var nextKey []byte) causes unnecessary and repeated queries from the beginning each time polling resumes. This results in an increased load on Router Chain, which is suboptimal, particularly when all orchestrators run the same code. 2. Risk of missing attestations: The lack of persistence in the nextKey value between sleep cycles introduces the potential risk of missing attestations. This occurs because it takes time to query that the request has already been processed. 3. High memory usage for the orchestrator and potentially causing out-of-memory issues due to keeping a large number of requests in memory.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Risk of liveness slashing due to inconsistent chain congurations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "In config/config.go:163, the current conguration setup permits inconsistent chain congurations, which can potentially lead to slashing for liveness violations. This risk arises from the fact that local congurations can override the congurations fetched from Router Chain. Only congurations loaded from the JSON le are appended to ChainSpecs. Consider a scenario where the orchestrator listens and processes all currently enabled chains, and Router Chain adds a new chain. In this case, the orchestrator should update their local JSON conguration le to process the new chain. Otherwise, the validator can be slashed due to liveness slashing rules. The inconsistency in chain congurations, where the orchestrator's local conguration diers from that of Router Chain, introduces the risk of violating liveness slashing rules. To address it is essential to ensure that the orchestrator's this issue and mitigate the risk of slashing, conguration aligns with Router Chain's congurations, particularly in cases where attestation responsibilities are concerned. This alignment will help maintain the integrity and security of the system.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. Unhandled errors in the codebase", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Router/2024-04-30 Audit Report - Router Orchestrator v1.0.pdf", "body": "In several instances of the codebase, functions that return an error are not checked nor handled properly. For example, some errors are printed out but not propagated to the caller. The following instances of unhandled errors have been found:  attester/inbound/inbound.go:86  attester/outbound/outbound.go:164  attester/valset/valset.go:80  cmd/router-orchestrator/main.go:44, 77, 83, 102, 106, 299, 302  config/config.go:158, 217, 220  health/health.go:41, 47, 51  listener/evm/gatewayeventprocessor/tranformer.go:150, 154, 159  listener/evm/voyagereventprocessor/tranformer.go:19, 26, 60, 67, 101, 108, 138, 145, 175, 182  listener/gatewaylistener.go:44, 59, 76, 81, 83  listener/near/gatewayeventprocessor/querier.go:93, 104, 115, 126,  listener/near/gatewayeventprocessor/tranformer.go:26, 86, 90, 94  listener/near/voyagereventprocessor/querier.go:93, 104, 115, 126,  listener/near/voyagereventprocessor/tranformer.go:17, 18, 54, 55  listener/tron/gatewayeventprocessor/gatewayeventprocessor.go:  listener/tron/gatewayeventprocessor/querier.go:118  listener/tron/gatewayeventprocessor/tranformer.go:44, 57, 59, 60, 124, 134-137, 174, 187, 188, 190, 191, 243, 244, 265, 292  listener/tron/initializer/initializer.go:24  listener/tron/initializer/voyagerlistener.go:22  listener/tron/voyagereventprocessor/tranformer.go:17, 18, 23, 55, 56, 92, 147, 148  listener/voyagerlistener.go:43, 57, 75, 80, 82  store/store.go:32-35  types/mqsender.go:59, 70, 96, 106 Consequently, this would cause silent failures as errors are not raised to notify users.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "1. Pending TODO comment indicates that a function is not needed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-27 Audit Report - Astroport LP Token Balance Tracking v1.0.pdf", "body": "The decimal2decimal256 function was moved out of into packages/astroport/src/lib.rs:72-78, where a TODO comment was included the function was no longer necessary. Keeping unused code reduces stating that maintainability. the pair contract", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "2. Inconsistent usage of query_pools function", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-27 Audit Report - Astroport LP Token Balance Tracking v1.0.pdf", "body": "instances of the pair contract, the In several lines query_pools contracts/pair/src/contract.rs:334 and 633 use &env.contract.address, while lines 778, 940, and 989 use &config.pair_info.contract_addr. the contract_addr argument example, inconsistently. function used For for is", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "3. Factory address cannot be queried", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-27 Audit Report - Astroport LP Token Balance Tracking v1.0.pdf", "body": "the query_config function In contracts/pair/src/contract.rs:1064-1073, does not include config.factory_addr in the ConfigResponse struct. Consequently, users cannot query the factory address from the pair contracts queries.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Misleading owner during cong query", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-04-27 Audit Report - Astroport LP Token Balance Tracking v1.0.pdf", "body": "The owner value is set to None in contracts/pair/src/contract.rs:1071. Users may interpret this as the contract not being subject to any updates, as no contract owner exists. call XYKPoolUpdateParams::EnableAssetBalancesTracking, which enables asset tracking in the pool. misleading though, factory owner This can the as is", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Fees held by spot vault are locked forever", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "During the instantiation of a spot vault contract the fee_recipient is dened as the contract itself, see contracts/ninja-vault-spot/src/contract.rs:31. However, there is no function that allows the fees accrued to be withdrawn, eectively locking the funds forever.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Inventory imbalance under certain parameter constellations will disable the risk management framework", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "In order to conduct risk management, the team modeled a reservation price that is dierent from the current mid-market price to be the center of the orders. To account for changes in volatilities, the orders price is a function of the volatility. However, for every imbalance ratio there exists a parameter combination of reservation_price_sensitivity_ratio and reservation_spread_sensitivity_ratio such that the proposed head and tail can be set to market price, by supplying liquidity or withdrawing liquidity, irrespective of the state of volatility. Specically contracts/ninja-vault-spot/src/mm_bot/order_management.rs:17, variable proposed_buy_head can be equal to in the _  +     where  = __  ___     ___ can be zero if: ___    2  ___ (i.e. states of high volatility and trending price behavior) An attacker with access to signicant liquidity could leverage this property during market turmoil to disable the risk management framework, as described above, pushing the vault to an imbalance such that  = 0 .", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Price threshold for price invalidity is prone to manipulation and might lead to full loss of users funds in case of a breakdown of a market or an asset", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "In contracts/ninja-vault-derivatives/src/mm_bot/bot.rs:40 a 30% interval is used to render the mark price as invalid. If the new price is out of this interval, the logic in contracts/ninja-vault-derivatives/src/mm_bot/risk_management/oracl e.rs closes positions if protable, or leaves them open and stops all trading activities if not protable. Although this is meant to be a protection against erroneous or manipulated prices, its ecacy is low as an attacker that is capable of manipulating the price by 30%, will also be able to manipulate the price by 29% in one block and 2% in the next or simply manipulate the price by 29.99%. In case of a non-manipulated change by 30% and a continuing trend in the same direction, a losing position will never close  leading to a  full loss of funds for users. There is a way to recover if an admin updates the last_valid_mark_price in in this is an contracts/ninja-vault-derivatives/src/config.rs:91. However, inadequate risk management for an automated trading system with multiple vaults running simultaneously 24/7. In addition, it goes against best practices that admins can update prices as enabled. tool", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Updating Ninja token address may cause state conicts", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "The owner of the master contract has the ability to update the address of the Ninja token stored in the contracts cong. Altering the Ninja token address could have the eect of causing a state conict in other contracts that use the address stored within the master contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Vault contract invocations should be prevented prior to registration with master contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "Vault contracts are designed to be deployed and instantiated from their owner and then successfully initialized from the ninja-master executing the RegisterForMaster transaction. This message execution sets the subaccount_id and instantiates the CW20 contract responsible for managing the vaults lp_tokens. Before this initialization, the vault is not ready to be used and user space transactions and queries should return a meaningful error message.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Large order_density could lead to the execution running out of gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Injective/2023-01-20 Audit Report - Ninja v1.0.pdf", "body": "In contracts/ninja-master/src/contract.rs:111-136, the following functions  get_is_authorized_order_data,  get_is_authorized_spot_order, and  get_is_authorized_derivative_order perform an unbounded iteration through orders. Since the length of the vector is related to order_density and this parameter has not an upper bound, a large value assigned to it could lead the execution to run out of gas. analogous An contracts/ninja-master/src/contract.rs:336-375 synthetic_trade.user_trades. problem also occurs in with", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Separation of ash loan payback verication into separate contract could allow administrator to steal funds and introduces misconguration risks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "The stablecoin-vault relies on the amount being lent in a ash loan to be tracked in the separate profit-check contract, which then checks that the amount has been repaid in full. This means that the actual ashloan functionality and the repay check are implemented in two dierent admin-congured contracts. As a result, a compromised admin could congure the profit-check address in the stablecoin-vault contract to point to a custom version that does not require full ash loan repayment for its own loans and use the ashloan function to extract user funds from the vault. In addition, having two independent contracts in a 1-to-1 that have to be congured separately with the corresponding address pointers to each other is error-prone and could lead to accidental misconguration.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Systemic dependence on Anchor may impede the ability to stabilize the UST peg via arbitrage during bank run cycle", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "The litepaper explains how bank run cycles can be a threat to the UST peg. If systemic risks materialize in the form of an event that has an impact on the whole Terra ecosystem, this will likely impact Anchor as well. In addition, a malfunction of Anchor or a bank run on Anchor might trigger substantial corrections in the Terra ecosystem. The fact that only a xed amount of UST  i.e. the stable_cap  is meant to remain in the vault will decrease the ratio of UST/aUST in the vault with increasing liquidity in the vault. With a growing amount of liquidity in the vault, the ability to stabilize the UST peg via arbitrage will depend more and more on Anchor being seamlessly working, which is not guaranteed during a bank run cycle. there Moreover, setting contracts/stablecoin-vault/src/contract.rs:770 meaning that the value could be set unrealistic values accidentally. validation when no is the via stable in set_stable_cap, cap", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Fixed fee buer might lead to failure of large ash loans", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In contracts/stablecoin-vault/src/contract.rs:37, FEE_BUFFER is set to a constant value. The buer is used in line 268 to assure that the contract has enough liquidity to pay taxes and fees. The messages for the fees and taxes are then created in lines 295 and 299 as functions of the amount and fees/taxes. If fees and taxes exceed the buer, large ash loans might fail because they will not be protable.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Flash loan and treasury related messages could run out of gas due to too many whitelisted contracts, assets or dapps", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In contracts/stablecoin-vault/src/contract.rs:244 the handle_flashloan function might run out of gas if the number of whitelisted_contracts gets very large. As this is unlikely and can only happen through governance motions this is only a minor issue. Similarly, in contracts/treasury/treasury/src/contract.rs an unlimited number if the of assets might cause executions of dapp-messages to fail by running out of gas, transactins uses the query compute_total_value. Lastly, in contracts/treasury/treasury/src/contract.rs:160, the removal of a dapp might fail if there are too many dapps and the message runs out of gas. This might not be a big issue, since the hite Whale architecture gure indicates that dapps will be limited.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Unvalidated and too high fee parameters might cause errors in production", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In contracts/stablecoin-vault/src/contract.rs:838-856 all fees in set_fee can be set to values equal to or larger than 1. These can cause errors, e.g. in line 428, where Decimal::from_ratio(amount - treasury_fee, total_share) causing the withdrawal functionality to fail. Similarly, we highlight for informational purposes, that the validation of new_fee.share > Decimal::one() in contracts/treasury/dapps/vault/src/commands.rs:293 allows for a fee equal to 1, which would trigger inecient messages.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Anchor exchange rate might be out of date and as a consequence transactions might fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In the contracts/stablecoin-vault/src/contract.rs:271 query_aust_exchange_rate functionality is used in the simplied form without the current block height as an input parameter. Anchor in this case uses stored values to calculate the exchange rate, which might be out of date. This implies that there may be imprecisions in the Anchor withdrawal message below in lines 451-454 and 655, which could lead to a failure in execution.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Denomination check is incomplete", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In packages/white_whale/src/denom.rs the length (size of the String) of a denomination is checked to be smaller than or equal to ve in order to determine whether a given token is a native token. This might fail because a coins Denom can have between 2 and 127 characters.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Zero amounts being sent in messages will fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "In contracts/treasury/dapps/terraswap/src/commands.rs:133, 120 and 172, zero amounts might be sent. These messages will always fail since zero transfers revert.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Canonical address transformations are inecient", "html_url": "https://github.com/oak-security/audit-reports/tree/master/WhiteWhale/Audit Report - White Whale.pdf", "body": "While previously recommended as a best practice, usage of canonical addresses is no longer encouraged. The background is that canonical addresses are no longer stored in a canonical format, so the transformation just adds overhead without much benet. Additionally, the codebase is more complicated with address transformations.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Attackers can steal funds by being the rst depositor of the pool", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:824-827, the _mint function computes the mint amount to the caller by dividing the sent amount by the exchange rate. After listing a new token, the mint action is enabled, as seen in logics/impls/controller/mod.rs:707 and line 1091. This is problematic because if the attacker is the rst depositor, an attacker can manipulate the exchange rate by sending a large amount of funds to the contract. This allows the attacker to borrow a larger amount of funds without actually depositing the required collateral amount. Another attack scenario is that when a victim makes a deposit, the attacker can front-run the transaction and inate the exchange rate to be larger than the sent deposit amount, causing the nal mint amount to round down to zero. Consequently, the victims deposit will be stolen by the attacker. Please refer to the rst depositor attack and inate exchange rate test cases in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Attackers can increase users' debt by repaying a loan on their behalf", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "in tokens The protocol allows users to repay loans on behalf of somebody else. A user can spend their debt own in order logics/impls/pool/mod.rs:1024-1028, the _repay_borrow function does not handle the logic responsible for the repaid amount correctly. Specically, if the user provides a repay_amount that is bigger than the debt but less than u128::MAX, the protocol will attempt to decrease the debt by the provided value and not by the total debt. user. However, another repay the to of Consequently, in logics/impls/pool/mod.rs:927-931 will cause the borrows_scaled variable to _increase_debt function the overow. Such an operation will result u128::MAX. in the victim's debt becoming a value close to Please refer to the repay on behalf overow test case in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Unauthorized pool liquidation threshold modication", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "The set_liquidation_threshold function in logics/impls/pool/mod.rs:505 does not implement any sort of access control. This is problematic because it allows overwriting a pools liquidation threshold, which can determine whether a particular loan will be liquidated or not. Consequently, a malicious user can manipulate this value to trigger liquidations for other users (e.g., lower than the controller contracts collateral factor value) or to prevent their own loans from being liquidated by setting it over a 100% value. Please refer to the unprotected liquidation threshold setter test case in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. Unauthorized price oracle congurations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/price_oracle.rs:56, the _set_fixed_price function lacks authorization to ensure that the caller holds the appropriate role. Currently, this allows any to congure prices for a pools underlying assets. Such a conguration can be user manipulated to set an excessively high value, enabling the user to take out uncollateralized loans, which poses a signicant risk to the protocols solvency. Please refer to the Unauthorized oracle price manipulation test case in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "5. Unnecessary underlying token conversion causes a loss of funds for the sender", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:771, the _transfer_tokens function converts the pool tokens into underlying tokens denominations before processing the transfer request. However, the implementation is awed. When the _transfer_from_to function is called in lines 781 and 792, it actually transfers the pool token denoms, not the underlying token denoms. The _transfer_from_to function is programmed to mutate the storage state and directly modify the sender and recipients balances. Since the pool contract does not have the privilege to modify balances in the underlying token contract, the funds transacted should remain as pool token denom. Consequently, the recipient will receive more pool tokens than intended due to the exchange rate multiplication, causing a potential loss of funds for the sender.", "labels": ["Oak Security", "Severity: High"]}, {"title": "6. Incorrect token denominations result in inaccurate amounts transacted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "The codebase contains several instances where transactions are inaccurately processed due to incorrect denominations. In logics/impls/weth_gateway.rs:108, the withdraw_eth function of the WETH incorrectly uses the underlying token denomination when calling the gateway contract PoolRef::transfer_from function with the amount_to_withdraw parameter. This approach conicts with the expectation of the pool contract's transfer_from function at contracts/pool/lib.rs:286, which requires the value to be in the form of pool token denom, not underlying token denom. in logics/impls/controller/mod.rs:980, Similarly, the _transfer_allowed function in the controller contract incorrectly uses pool token denomination while calling the _redeem_allowed function. The _redeem_allowed function expects the amount in the the underlying This in ControllerRef::transfer_allowed logics/impls/pool/mod.rs:763 with the amount denominated in pool tokens instead of the underlying token denomination. misalignment function denomination. occurs called token when is", "labels": ["Oak Security", "Severity: High"]}, {"title": "7. Delegate allowance is not decreased after consumption", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:319-325, the delegated_allowed modier is used to verify that the user, who is granted an allowance by the owner, has sucient allowance when calling the borrow_for function on the owners behalf. However, the allowance is not decreased after consumption. Suppose the owner approves the user for an allowance of 100 pool tokens. In that case, the user can repeatedly call the borrow_for function with 100 pool tokens each time, allowing them to bypass the initial allowance amount granted by the owner.", "labels": ["Oak Security", "Severity: High"]}, {"title": "8. Unauthorized delegate allowance modications", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "the increase_delegate_allowance In logics/impls/pool/mod.rs:513-539, and decrease_delegate_allowance functions lack authorization checks, allowing any user to modify the allowance amounts set between an owner and a delegatee. This is problematic because an attacker can exploit these functions to increase a victim's allowance in favor of themselves. Subsequently, the attacker invokes the borrow_for function to withdraw funds from the victims account and leave them responsible for the resulting loans. Please refer reproduce this issue. to the Unprotected allowance modication test case in the appendix to", "labels": ["Oak Security", "Severity: High"]}, {"title": "9. Disabled collateral assets can be liquidated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logic/impls/pool/mod.rs:799, the _transfer_tokens function calls the _set_use_reserve_as_collateral function when transferring funds to the recipient. The _set_use_reserve_as_collateral function automatically enables the recipients assets as collateral, allowing the asset to be liquidated in case of extreme market conditions. This is problematic because if the recipient is both a lender and borrower who does not intend to use part of the assets as collateral, malicious users can bypass this restriction so the asset can be liquidated, potentially causing a loss of funds for the recipient.", "labels": ["Oak Security", "Severity: High"]}, {"title": "10. Native funds owned by the WETH gateway contract can be stolen", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "logics/impls/weth_gateway.rs:93 In the withdraw_eth and borrow_eth functions accept a pool parameter and an amount parameter. Both functions will interact with the specied pool contract to withdraw or borrow WETH, unwrap into native funds, and transfer them to the caller. and 141, However, if the provided pool address is not a legitimate pool supported by the controller contract, no actual WETH gets transferred to the WETH gateway contract, and the WETHRef::withdraw function would instead withdraw funds that belong to the WETH gateway contract and send them to the attacker. An attacker can achieve this by specifying the pool parameter to a fake contract, which is programmed to return Result<Ok()> when the and PoolRef::borrow_for functions call it. PoolRef::redeem_underlying, PoolRef::transfer_from, Consequently, attackers can steal WETH tokens owned by the WETH gateway contract, causing a loss of funds. Please refer to the Steal WETH test case in the appendix to reproduce the issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "11. Disabled collaterals can be seized during liquidation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "Borrowers in the protocol can enable or disable assets as collateral using the set_use_reserve_as_collateral function in logics/traits/pool.rs:168. When an asset is enabled as collateral, it contributes to the computation of account health and liquidation thresholds, as seen in logics/impls/pool/mod.rs:593. this setting In However, logics/impls/pool/mod.rs:1151, the _seize function responsible for transferring a borrower's collateral to a liquidator does not validate whether the seized asset is enabled as collateral. liquidations. respected during not is Consequently, a liquidator can liquidate assets the borrower has specically disabled as collateral, causing an unexpected loss of funds scenario.", "labels": ["Oak Security", "Severity: High"]}, {"title": "12. Accruing interest does not update total borrows and reserves", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:684, the _accrue_interest_at function calls the _get_interest_at function internally to calculate the latest interest output. However, only the accrual block timestamp and borrow index are updated in lines 692 and 693, while the total borrows (out.total_borrows) and reserves (out.total_reserves) are not, resulting in the total borrows and total reserves remain the same. Consequently, lenders will not be rewarded with accrued interest, and borrowers can borrow with base interest rates instead of dynamic interest that is calculated based on the total borrows and total reserves, which leads to a malfunction in the protocol.", "labels": ["Oak Security", "Severity: High"]}, {"title": "13. Interest not accrued before rate computations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/flashloan_gateway.rs:79, the transfer_underlying function transfers underlying tokens during a ash loan initiation. However, the pool contracts interest was not accrued before this transfer, leading to incorrect interest computation with fewer underlying funds in lines 108 and 118. As a result, the total amounts used for computing borrow, supply, and exchange rates is inaccurately calculated. For example, the borrowing rate computed in logics/impls/interest_rate_model.rs:98 will have an articially high utilization rate, causing an excessive increase in the borrowing rate in line 113. the Moreover, get_account_snapshot function does not accrue the pool contracts interest before logics/impls/controller/mod.rs:1379, in retrieval of a users balance, borrowed amount, and exchange rate, resulting in the latest borrow index being unapplied and leading to incorrect account collateral data. Additionally, in logics/impls/pool/mod.rs:742, the function _transfer_tokens does not accrue interest before invoking the transfer_allowed function on the controller contract. This causes validations to be performed based on outdated interest rates, impacting the senders debt and exchange rate accuracy. The same issue aects the _validate_set_use_reserve_as_collateral function in the get_account_snapshot logics/impls/pool/mod.rs:1352, which function the outdated balance_decrease_allowed function in line 1381 operates with incorrect user debt and exchange rate data. uses interest Consequently, relies rate. that on an We classify this issue as major because the caller can manually update rates by calling the accrue_interest function in logics/traits/pool.rs:42 before executing the abovementioned functions.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "14. Flash loans can be initiated without paying fee premiums", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "The flashloan function from logics/impls/flashloan_gateway.rs:54 does not verify if the assets vector contains only unique values, allowing lending of the same asset multiple times in the same transaction call. Since the function calculates premium using integer division in line 76, the premium will be zero if the borrowed amount multiplied by flashloan_premium_total is less than 10000. This allows a ash loan to be executed without needing to pay the premium fees. An attacker can divide the amount they want to loan into smaller chunks in the assets vector so that the premium computed with each chunk is zero. Please refer to the free ashloans test case in the appendix to reproduce the issue.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "15. The manager contract does not implement required entry points to call the controller and pool contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "logics/impls/controller/mod.rs:551 In the set_seize_guardian_paused and set_transfer_guardian_paused functions can only be called by the manager contract. However, there are no entry points implemented in the contracts/manager/lib.rs:91 that allow privileged roles to call the functions. 558, and the and contracts Consequently, transfer_guardian_paused cannot be updated by the privileged roles, preventing them from blocking seize and transfer actions. seize_guardian_paused controller also issue in This set_incentives_controller function, which ensures the caller contract. However, there is no entry point in the manager contract to call this. logics/impls/pool/mod.rs:552 exists the in is the manager", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "16. Unimplemented functions in the pool contract cannot be called", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "pool contract in contracts/pool/lib.rs:154-167 is overriding the The set_controller, add_reserves, and set_interest_rate_model functions. All of them are set to return a NotImplemented error variant. all However, in have logics/impls/pool/mod.rs:459, 478 and 489. Consequently, they will fail although the underlying implementation is available. implementation functions default three a", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "17. Overow checks are disabled", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In several instances of the codebase, overow checks are disabled:  contracts/controller/Cargo.toml:32  contracts/default_interest_rate_model/Cargo.toml:32  contracts/flashloan_gateway/Cargo.toml:32  contracts/lens/Cargo.toml:29  contracts/manager/Cargo.toml:31  contracts/pool/Cargo.toml:32  contracts/price_oracle/Cargo.toml:29  contracts/weth_gateway/Cargo.toml:32  logics/Cargo.toml:43 This allows an overow issue to occur during arithmetic operations. Overows are typically undesirable and can lead to signicant issues. Therefore, it is essential to prevent them by enabling compiler-level overow checks. For example, the root cause of Attackers can increase users' debt by repaying a loan on their behalf is an overow error that occurs when the repaid amount, which is larger, is subtracted from the lesser debt value, which can be prevented by enabling overow checks.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "18. Protocol reserves are incorrectly scaled with borrow index", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:1184, 1248, and 1277, total reserves are scaled and descaled with the borrowing index. When the debt interest is accrued, the protocol reserves also increase because the new index used to descale is larger than the previous one that scales it. The scaling approach is problematic because the reserves remain in the controller contract and are not lent to borrowers. Hence, the reserves should not be subject to interest gains associated with the borrowing index. Consequently, the _reduce_reserves function will unknowingly withdraw more funds than intended, aecting all pool token holders to receive fewer underlying tokens.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "19. Double deduction of protocol seized tokens", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Starlay/2024-03-06 Audit Report - Starlay Protocol Wasm v1.0.pdf", "body": "In logics/impls/pool/mod.rs:1190, the _seize function deducts the total supply of pool tokens by the amount seized by the protocol. This is problematic because the pool token supply amount is eectively reduced twice: rst, by the manual reduction in line 1190, and second, by the _burn_from and _mint_to functions in lines 1191 and 1192 that adjust the supply. For example, consider a scenario where the borrowers 1000 seized tokens are divided as 972 tokens for the liquidator and 28 for the protocol. After reducing the borrowers balance and increasing the liquidators balance, the total supply should be 927 (1000-1000+972), which already covers the protocol-seized amount. However, due to line 1190, the total supply is reduced to 944 (1000-1000+972-28), which is incorrect. Consequently, a double deduction of protocol-seized tokens will occur, causing the last user to fail to redeem their pool tokens for underlying funds due to an overow error.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "1. Excess bytes in the encoding of None do not trigger errors", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "The deserialize function, dened in ssz-rs/src/union.rs:45, deserialization of the inner value after determining the input as Some. invokes the process a lead This DeserializeError::AdditionalInput error if the encoding contains more bytes than required for deserializing the inner value. occurrence potentially can the to of However, the code does not inspect any bytes of the encoding beyond the initial byte when handling the None case. As a consequence, if an encoding of None includes redundant bytes, the code will not throw an error.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. is_zero method from the SSZ specication is not implemented", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "The SSZ specication denes an is_zero method that returns true if the argument is a default value. relevant The at https://github.com/ethereum/consensus-specs/blob/fa09d896484bbe240334fa21aa454bafe 5842e/ssz/simple-serialize.md#is_zero. specication found can be", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. debug_assert_eq! macro checks are not performed in production code", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "the In ssz-rs/src/ser.rs, parameters are validated using the debug_assert_eq! macro. serialize_composite_from_components function, dened in This macro will be ignored by the compiler in release mode, i.e. after switching to production. This is because the compiler optimizes the code in release mode, which results for example in the omission of most of the debugging and error-logging functions.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Overow checks not enabled for release prole", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "The ssz_rs and ssz_rs_derive crates do not enable overflow-checks in the Cargo.toml release prole. Consequently, the entire codebase does not have implemented protection against overow or underow.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Vectors and arrays of dierent lengths have the same root hash", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "The hash_tree_root method of the Merkleized trait, dened for vectors in vector.rs:264-264 and for arrays in array.rs:77-91, returns the same Merkle root for values of dierent sizes. It is important to note that, according to SSZ specication, those types are statically sized, meaning that vectors and arrays of dierent lengths represent dierent types. Therefore, it is possible for dierent types to have the same Merkle roots and encodings, as SSZ encodings are not self-contained and require a specic scheme for proper deserialization. However, it is crucial to emphasize this in the user documentation, as incorrect assumptions about Merkle roots could potentially be exploited by library consumers. A further observation regarding Merkle roots is that vectors clusterize by their Merkle roots. We n>::try_from(vec![0; n]).hash_tree_root() as M(n). In this context, the following equalities hold true: Vector::<u8, expression denote can the M(1) = M(2) =  = M(32), M(33) = M(34) =  = M(64),  The same observation applies to arrays where: M(1) = M(2) =  = M(32) A test case is provided in Appendix.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Redundant mutable reference in Merkleized interface", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "In the hash_tree_root function, dened in ssz-rs/src/merkleized/mod.rs, the only parameter, self, is declared as mutable reference. However, mutability is not utilized anywhere. Therefore, it is safe to remove the mutability from the parameter declaration.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Duplicate length validation of a xed serialized composite", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "length, When deserializing Array, List, and Vector objects, depending on whether they have a xed or within variable two either deserialize_homogeneous_composite or deserialize_variable_homogeneous_composite deserialize_fixed_homogeneous_composite. functions called one of is  deserialize_fixed_homogeneous_composite is called when the type is xed, and the corresponding deserialize functions have already validated the length of the object to be a multiple of the default value of that type obtained using T::size_hint. An example for the Array type is the validation performed in ssz-rs/src/array.rs:51-65. the deserialize_fixed_homogeneous_composite function in lines Nevertheless, 71-78 validates whether the modulo of the length of the deserialized object and the default size for its type is dierent from zero. Since in the previous step, this size was multiplied by N, there is no possibility that the modulo will be dierent from zero. This validation is therefore therefore redundant, and can be removed for eciency of the codebase.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Misleading error name", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "serialize_composite_from_components in The ssz-rs/src/ser.rs:58 veries that the sum of the lengths of variable and constant elements does not exceed the MAXIMUM_LENGTH value, which is dened as the maximum range of u32. A MaximumEncodedLengthExceeded error is returned when the sum is in the case of greater than or equal to MAXIMUM_LENGTH. This is misleading, because, equality, the value is not exceeded. function dened", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Duplicated code decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "Code duplicates make it more dicult to maintain, review, and reason about the code. The code in list.rs:210-214 and vector.rs:230-234 is duplicated.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Duplicated ValidationState validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "The SimpleSerialize trait implements the derive function, which performs actions on the passed input. One of these actions is the validation of input.data, carried out in ssz-rs-derive/src/lib.rs:548. This function returns ValidationState::Validated if the validation is successful and panics otherwise. Consequently, after this action, there is no technical possibility that the state of input.data will in that implies ssz-rs-derive/src/lib.rs:550-553 is redundant. Unvalidated. performed validation This still the be", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Use of magic numbers decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/ssz-rs/2023-09-28 Audit Report - ssz-rs v1.0.pdf", "body": "In the codebase, hard-coded number literals without context or a description are used. Using such magic numbers goes against best practices as they reduce code readability and maintenance as developers are unable to easily understand their use and may make inconsistent changes across the codebase. Instances of magic numbers have been found in:  ssz-rs/src/uint.rs:18  ssz-rs/src/uint.rs:25  ssz-rs/src/uint.rs:31  ssz-rs/src/list.rs:219", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Removing merchant does not remove associated deposit addresses", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "the In the contracts/wbtc-controller/src/auth/merchant.rs:45-66, remove_merchant function does not remove the merchants associated deposit addresses and from MERCHANT_DEPOSIT_ADDRESS storage. When a merchant is removed, they should no longer have the associated roles assigned. However, the GetCustodianDepositAddress and GetMerchantDepositAddress queries will show that the removed merchant still has a valid deposit address on the Bitcoin blockchain. CUSTODIAN_DEPOSIT_ADDRESS_PER_MERCHANT", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Approving mint requests does not ensure the requestor still holds the merchant role", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "In contracts/wbtc-controller/src/contract.rs:149-189, when approving a pending mint request, no validation ensures that the requester still holds the merchant role. For example, consider a scenario where the member manager revokes the merchant role post the issuance of a mint request. The mint requester, no longer holding the merchant role, should not be permitted to receive WBTC. However, due to a lack of validation when the custodian approves the mint request, the requester can still receive WBTC even though they no longer hold the merchant role. We classify this issue as minor because the custodian is considered a privileged and trusted role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Incorrect governor attribute value emitted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "In contracts/wbtc-controller/src/contract.rs:58, the governor attribute value is emitted as info.sender. This is incorrect because the governor's address is set to msg.governor, causing o-chain event listeners and blockchain indexers to record incorrect data.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Merchant deposit addresses are not ensured to be unique", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "In contracts/wbtc-controller/src/tokenfactory/deposit_address.rs:67-9 1, the set_custodian_deposit_address function does not ensure that the provided deposit_address is unique across merchants. This could lead to a custodian mistakenly assigning the same deposit_address to multiple merchants. A malicious merchant could exploit this if the custodian unsuspectingly assigns an existing address to the malicious merchant. The malicious merchant could then issue duplicate mint requests with a transaction identier of the duplicate address. Assume the custodian sets the same deposit address for two merchants. The rst merchant sends BTC to the deposit address. The second merchant did not make a deposit, but they took the rst merchant's transaction identier and issued a mint request for themselves. Since the deposit address for the second merchant matches the transaction identiers receiver address, the custodian might approve this deceptive mint request. We classify this issue as minor because it requires a misconguration by the custodian, which is a privileged and trusted role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Separation of privileged addresses is not enforced", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "While extensive eort has been made to dene privileged access roles within the protocol, privilege separation of these roles is not properly enforced. Currently, no validation exists to enforce that these privileges are designated to unique addresses. In the unlikely case of a compromised account, privilege sharing will have severe implications. While this measure cannot prevent account compromise, it can limit the impact and serve as an additional layer of security for the protocol. Another step that can be taken to reduce the impact of a compromised account is to implement timelocks to prevent frequent updates of addresses.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Attributes are not properly emitted during contract instantiation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "instantiation process, During the contract the initialize_governor function in contracts/wbtc-controller/src/auth/governor.rs:16 returns attributes, but they in contracts/wbtc-controller/src/contract.rs:44. function calling used are not the by Consequently, the attributes will not be properly emitted during instantiation.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. GetMintRequestsCount and GetBurnRequestsCount query fails when there are no mint or burn requests", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "In the contracts/wbtc-controller/src/tokenfactory/nonce.rs:30-33, custom get function returns the stored nonce value in the storage using the load function. the Since the load function fails when there is no previously stored value, GetMintRequestsCount and GetBurnRequestsCount queries will fail when no mint or burn requests are issued.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Contracts should implement a two-step ownership transfer", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "The contracts within the scope of this audit allow the current owner to execute a one-step ownership transfer. While this is common practice, it presents a risk for the ownership of the contract to become lost if the owner transfers ownership to the incorrect address. A two-step ownership transfer will allow the current owner to propose a new owner, and then the account that is proposed as the new owner may call a function that will allow them to claim ownership and actually execute the cong update.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Typographical error aects codebase readability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "In contracts/wbtc-controller/src/tokenfactory/deposit_address.rs:12, be the DepositAddressManager. DepositAddressMananger wrongly occurs, should which typed While the typography error doesnt aect the code functionality, it increases the chances of introducing mistakes that can be easily avoided.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Storage entries spread across multiple les increase the chances of storage key collision", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Osmosis Labs/2023-08-18 Audit Report - CosmWasm WBTC v1.0.pdf", "body": "The contract contains multiple storage entries that are dened in separate les. While this does not aect increases the likelihood of accidental storage key collisions. One common pattern is consolidating all storage entries into a single le, increasing code readability and reducing the likelihood of storage key collisions. the code quality, it", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Attackers can manipulate the proposal outcome by transferring voting powers", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "When voting on proposals in gov:contracts/assembly/src/utils.rs:29-32, the calc_voting_power function queries the BuilderUnlockQueryMsg::Allocation message to compute the callers voting power. An issue occurs when voters transfer their allocations to other voters with the ProposeNewReceiver and ClaimReceiver messages after voting on a proposal, which also transfers the voting power. This is problematic because new voters can vote on the proposal with the transferred voting power, eectively allowing duplicate voting with the same voting power, inating total votes, and allowing manipulation of the outcome. For example, the attacker can submit a malicious proposal and vote with their rst address. After transferring the voting power to a second address, the attacker votes again. This step can be repeatedly executed with new addresses until the proposal passes. The impact can be signicant as the proposal may contain arbitrary messages, such as transferring all funds or contract migration admin privileges to the attackers address, potentially causing a loss of funds for other users or the protocol. Please refer to the test_manipulate_governance_proposal test case in the appendix to reproduce the issue.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Attackers can bypass self-migration validation to control assembly contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In gov:contracts/assembly/src/contract.rs:397-403, the check_messages function ensures the supplied Cosmos message does not perform a self-contract migration by validating that the migrated address is not equal to the assembly contracts address. This validation is crucial because unauthorized migrations enable attackers to manipulate the CheckMessagesPassed message to not return an error in line 129, forcing the transaction to succeed and allowing them to control the assembly contract and hence the rest of the protocol. We found three ways to bypass the validation, as illustrated below. Firstly, attackers can bypass the existing validation with an uppercase version of the assembly contracts address. Bech32 addresses are case-insensitive, so both uppercase and lowercase addresses resolve to the assembly contract, eectively rendering the validation useless. Secondly, attackers can use the WasmMsg::UpdateAdmin message to circumvent the validation. The UpdateAdmin message transfers the assembly contracts migration admin to the malicious contract, and the latter WasmMsg::Execute message calls the malicious contract to dispatch a WasmMsg::Migrate message to migrate the assembly contract into the attackers chosen code ID. Lastly, attackers can abuse the authz modules MsgGrant to grant the attackers contract migration permission. This attack can be achieved using CosmosMsg::Stargate to enable migration privilege on the attackers contract and dispatching MsgExec to trigger the migration, allowing the attacker to take complete control of the assembly contract.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. IBC transfers can be grieved, preventing old ASTRO tokens from being burned", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In core1:contracts/periphery/astro_converter/src/contract.rs:152, the ibc_transfer_for_burning function allows anyone to dispatch an IBC message to transfer the old ASTRO tokens to the Terra chain. Ideally, the client will call the entry point with a rational timeout value so the tokens can be bridged without any issues. Since this message is permissionless, an attacker can grieve legitimate transactions by front-running the call with a low timeout value, causing the transaction to fail due to insucient funds in the contract. Eventually, the IBC transaction will fail because the timeout will exceed rst before sucient time has passed for the packet to be relayed. is issue This core1:contracts/periphery/astro_converter_neutron/src/contract.rs: 59. If the fees are sent to the contract before the TransferForBurning message call, the attacker can repeatedly call the function with a low timeout value to purposely cause the failure of the IBC transaction, forcing the contract to incur the timeout_fee charged by the Neutron chain. present also in Although there is no prot motive for the attacker, we classify this issue as major because it can cause a loss of fees and disrupt normal protocol operations.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Updating xASTRO denom prevents proposals from being ended", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "The assembly contract allows modifying the xastro_denom native token in gov:contracts/assembly/src/contract.rs:438. the native token is updated while there are ongoing proposals, the end_proposal function might fail in line 332, as the new denom will be used instead of the actual denom sent in line 166 and the contract may not hold sucient funds to execute the proposal. If We classify this issue as minor because the client can recover from it by sending funds of the new denom directly to the contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Querying total supply for denom validation is inaccurate", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In core2:contracts/tokenomics/staking/src/contract.rs:61, the total supply of msg.deposit_token_denom is queried as part of the native token denom validation. If the provided token is not a native token denom, the transaction should revert. However, this assumption is incorrect because if the token is not a valid denom, the query will not error and instead return a zero value. Consequently, the contract will fail to work as intended due to an invalid denom, which requires a new deployment from the contract instantiator. Please refer to the test_denom_validation test case in the appendix to reproduce the issue.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Tracked denom is not validated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In core2:contracts/periphery/tokenfactory_tracker/src/contract.rs:26, the tokenfactory_tracker contract does not validate tracked_denom (native token) upon instantiation. If the provided denom is invalid, the sudo messages will fail to work as intended, requiring a new contract deployment from the contract instantiator.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Dierent output when timestamp is provided as None and Some(env.block.time.seconds())", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "core2:contracts/tokenomics/staking/src/contract.rs:366-395, In the to specify an optional BalanceAt and TotalSupplyAt queries allow the caller timestamp parameter to query the balance. If the timestamp is provided as None, it calls query_balance and query_supply functions that retrieve the balance for the current timestamp. On the other hand, it queries the balance from the tracker contract instead. if the timestamp is provided as Some(_), However, an inconsistency occurs between the timestamp parameter being provided as None and Some(env.block.time.seconds()). Although both parameters resolve to the current timestamp, the output will be dierent because None queries the latest value from the bank module. In contrast, Some(env.block.time.seconds()) loads the last recorded value from the SnapshotMap storage, causing the results to dier even though the provided parameter represents the current timestamp. This may Some(env.block.time.seconds()) interchangeably. third-party confuse users or applications that use None and Please refer to the test_different_query_results test case in the appendix to reproduce the issue.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. old_astro_denom and outpost_burn_params validation logic can be improved", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "upon instantiation. In core1:contracts/periphery/astro_converter/src/contract.rs:34, the astro_converter contract sets the old_astro_info and outpost_burn_params in parameters core1:packages/astroport/src/astro_converter.rs:17, the old_astro_denom is expected to be a native IBC-compatible token that uses outpost_burn_params, or a CW20 token that does not require outpost_burn_params to be set. This is crucial to ensure that the old_astro_denom can be burned or bridged correctly as part of the migration from Terra to the Neutron chain. According comment the to if However, this validation does not cover other conguration possibilities. For example, old_astro_denom is a CW20 token, the outpost_burn_params must be set to None. Additionally, the transaction should revert because the tokens cannot be burned or bridged, which likely means that a conguration mistake has occurred and may require a redeployment. the old_astro_info is a native denom but not IBC-compatible, if", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Lack of events emitted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In gov:contracts/assembly/src/contract.rs:499, the update_config function does not emit information regarding which storage states were updated. It is best practice to emit events and attributes to improve the usability of the contracts and to support o-chain event listeners and blockchain indexers.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Unused error messages in the codebase", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In several instances across the codebase, multiple Errors are dened but not used. This reduces the code readability and maintainability in the codebase.  gov:contracts/assembly/src/error.rs  ProposalNotCompleted  ProposalNotInDelayPeriod  MigrationError  InvalidChannel  InvalidGeneratorController  InvalidHub  InvalidProposalMessages  InvalidVotingPower  core1:contracts/pair_astro_converter/src/error.rs  Unauthorized  InvalidCw20Token", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. CONFIG storage state is not exposed through smart queries", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In core2:contracts/periphery/tokenfactory_tracker/src/query.rs:10, the query entry point does not expose the CONFIG storage state value through smart queries. This forces third-party contracts and nodes to perform a raw query to read the stored value, which is error-prone and decreases user experience.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Inconsistency between comment and implementation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "the gov:packages/astroport-governance/src/assembly.rs:16-17, In comment mentions that the DELAY_INTERVAL constants range value is between 0.5 to 2 days. However, the implementation itself ranges from 0.5 to 1 days, which is inconsistent with the comment.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Expired proposals remain as Passed status", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In the gov:contracts/assembly/src/contract.rs:354-356, execute_proposal function reverts with an ExecuteProposalExpired error if the current height exceeds the proposal expiration block. While the logic is correct, the expired proposal will always remain in Passed status, which is misleading because passed proposals should be executable.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. ExecuteFromMultisig authorization check can be bypassed if the satellites contract migration admin is the satellite contract itself", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "In contracts/satellite/src/contract.rs:169-178, the exec_from_multisig function checks that the caller is the satellite contract's migration admin before dispatching Cosmos messages. Suppose the contract migration admin is the satellite contract itself. In this case, an attacker can bypass the authorization check by dispatching a CheckMessages message (see line 157) to perform a self-call into the ExecuteFromMultisig entry point. This bypasses the validation because the caller will be the satellite contract, satisfying the requirement in line 174. Consequently, the attacker can migrate the contract into a malicious code ID to prevent erroring in the CheckMessagesPassed message, ultimately taking control of the satellite contract. We classify this issue as minor because it can only be caused if the satellite contracts migration admin is the contract itself (e.g., future development that changes the architecture design). According to the client, the migration admin is the builders 2 out of 3 multisig contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. Centralization concerns from ExecuteFromMultisig", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-05-22 Audit Report - Astroport Hub Neutron Migration v1.0.pdf", "body": "assembly The in an contracts/assembly/src/contract.rs:578-594, which allows the admin address to execute arbitrary CosmosMsg messages through the contract. ExecuteFromMultisig endpoint includes contract This feature allows a centralized entity, or an attacker in case of a compromise, to interact with other contracts of the protocol that implement assembly-only access controls. This allows the entity, for instance, to move any funds held in the target contract. This issue has been classied as informational as the admin address is supposed to be a 2 out of 3 multisig controlled by the client, which is assumed to be trusted.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. UpdateExchangeRate message leads to delegation of incorrect amount of funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The execute_update_exchange_rate function tries to delegate more than it should, as it doesnt take into account the protocol_fee that needs to be accrued in case it is not zero. This causes ExecuteMsg::UpdateExchangeRate to error if the contract balance is less than the amount to be delegated plus the protocol fee. variable claimed_rewards in The the contracts/prism_hub/src/autho_compounding.rs:87, in the protocol_fee the message contracts/prism_hub/src/autho_compounding.rs:66. Therefore, moving fee funds will be executed rst and then the delegation message will try to delegate an amount bigger than the actual balance, as protocol_fee has already been transferred. used includes fee_collector transferred incorrectly previously since it that to is is A proof of concept test case for this security issue can be found at Appendix 1.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. State update not stored", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The execute_update_global function uses the incorrect instance of the loaded STATE to update the principle_balance_before_exchange_update element of the struct. it could Although at dramatically aect future features as an outdated value would result in incorrect results when used as part of calculations. the code base does not make use of this element, the moment of changing Instead in contracts/prism_hub/src/contract.rs:213, the code changes the value that is loaded Consequently, principle_balance_before_exchange_update will never be updated. last_state stored. never value initial state but the the of in Please note that we consider this issue to be a minor issue since the aected variable is not used. In a future release, this issue might have critical consequences.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Custom access control implementation is error-prone and decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract implements custom access controls, which introduce a few issues: The transfer of the creator role to a dierent account is implemented in a one-step fashion without conrmation from the receiving party. This could potentially cause a loss of access to the role in case a mistake is made during the role transfer. In addition, the Access Control logic that enforces these restrictions is duplicated across the handlers of each function, which negatively impacts the code's readability and maintainability, as it is error-prone.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Lack of conguration parameter validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract lacks validation steps on most conguration parameters upon instantiation or update. Although the values are supplied by the owner, the well-functioning of the protocol if an unexpected value were to be assigned by mistake or if a rate parameter were assigned a value outside of the 0 to 1 range. For example, a fee rate of 1 this could aect will not make the protocol usable, while a fee rate greater than 1 will lead to the protocol losing value. The following lines are aected:  contracts/prism_hub/src/config.rs:35-40  contracts/prism_hub/src/contract.rs:70-75", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. uluna coin denom is used instead of underlying_coin_denom", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract denes in the Parameters struct the underlying_coin_denom eld. This parameter represents the denom of the coin that is delegated by the contract to validators. However in lines:  contracts/prism_hub/src/autho_compounding.rs:68  contracts/prism_hub/src/autho_compounding.rs:89  contracts/prism_hub/src/contract.rs:44 instead of using the correct denom saved in the store, uluna is hardcoded. This implies that the contract will work on chains with a uluna denom, such as Terra.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Pseudorandom validator selection can be predicted and gamed by validators", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "In order to fairly select a validator during auto compounding, unbonding, and validator delisting, the protocol is using XorShiftRng with the current block height as a seed to generate a pseudo-random index. This calculation at a certain block height is easy to predict. Validators could use this information to try to execute a specic transaction at a specic block height in order to be selected, in case of auto compounding, or not be selected in case of unbonding and validator delisting.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. WithdrawUnbonded transaction requires the execution of multiple unbounded loops", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "In execute_withdraw_unbonded function running multiple unbounded loops. contracts/prism_hub/src/unbond.rs:146, the handles WithdrawUnbonded messages In line 168 the process_withdraw_rate function executes two unbounded loops over all not processed yet UnbondHistory. In line 170 the get_finished_amount function executes an unbounded loop over the user unbounding waitlist. In line 180 and 181 the get_unbond_batches and remove_unbond_wait_list functions execute an unbounded loop over the user unbonding waitlist. This implies that under specic conditions, for example if the user has a lot of pending batches to unbond in the whitelist or if the user is another contract that does a big number of operations, the execution can run out of gas and the user would not be able to withdraw their funds. We consider this issue to only be of minor severity since it is unlikely to occur in the short to mid-term.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Updating token_contract will aect previously bonded funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The contracts/prism_hub/src/config.rs:74. update admin can the token_contract parameter in As the entire protocol state relies on information that depends on that parameter or queries using that parameter, any update will aect users that have their funds previously bonded by not allowing them to unbond. We classify this issue as minor since only the owner can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Outdated and unmaintained dependencies in use", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract uses outdated versions of multiple libraries, version that publicly known vulnerabilities CVE-2021-32810 and CVE-2020-35880. including a cosmwasm-vm In addition, two libraries were aected by lacks some important upgrades. Although bigint is not maintained and therefore there is no x available, crossbeam-deque aected by CVE-2021-32810 has an ocial patch ready. Further details can be found in Appendix 2.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Custom functionality for checking additional funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract makes use of custom functionality to check for additional funds being sent in and contracts/prism_hub/src/bond.rs:35-47 contracts/prism_hub/src/contract.rs:39-45. Although not a security issue, well-known community-driven libraries are recommended for this kind of feature.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Canonical address transformations are inecient", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "While previously recommended as a best practice, usage of canonical addresses for storage is no longer encouraged. The background is that canonical addresses are no longer stored in a canonical format, so the transformation just adds overhead without much benet. Additionally, the codebase is more complicated with address transformations.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Missing tax deductions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "While Terras tax rate has been set to zero, the tax mechanism is still implemented and the rate might be increased again in the future. It is still best practice to include functionality to deduct taxes. A non-zero tax rate could be reinstated via a governance proposal due to circumstances where the expected income from the tax rewards increases signicantly. In this situation, stablecoin transactions on Terra would expand to a state where a meaningful portion of the staking rewards income is derived from tax rewards rather than the vast majority coming from swap fees. We consider this to only be a minor issue since the contract owner can recover from tax mismatches by simply sending funds back to the contract. Additionally, the likelihood of the Terra team to increase taxes again is low. See this discussion for more details about the tax rate changes on Terra.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Typographical errors", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "In contracts/prism_hub/src/contract.rs:51 and other places, the wrongly typed porotcol_fee_collector occurs, which should be protocol_fee_collector. The same misspelling will also introduce a cascading eect when other protocols query the config. In addition, in contracts/prism_hub/src/config.rs:139, the conguration is loaded for a function named token, which is potentially another typo.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Duplicated code can negatively impact maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "read_validators in The contracts/prism_hub/src/state.rs:176 and 20 are performing the same logic. Additionally, all validators are valid in the Prism Auto Compounding cAsset protocol. Code duplication increases code complexity and can negatively impact maintainability. read_valid_validators functions and", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Unused code", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "Multiple instances of unused code exist in the codebase, including variables and functions that are only used within tests, but not in the actual contract. Unused code aects the overall code readability, and might confuse users since it is suggestive of any features that are currently not being implemented. The following list includes the aected lines:  contracts/prism_hub/src/state.rs:10, 53-63  contracts/prism_hub/src/contract.rs:36, 37, 58  contracts/prism_hub/src/hub.rs:160, 163  The UnbondHistory struct includes elements that are not in use. batch_id is not used as it is the actual key in the history storage instance. Similarly, applied_exchange_rate and withdraw_rate seem to reect the same value here, however, applied_exchange_rate is only used inside tests and not the actual contract.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "16. Comment contradicts implementation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract includes comments describing the required privileges for each function for assigned execution message. comment handler The an as of a execute_register_validator in contracts/prism_hub/src/config.rs:96 states that the functionality is callable only by the creator. However, this diers from the implementation as the Hub contract itself is whitelisted too, given that this message is sent by the contract upon instantiation.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Lack of address validation upon querying", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "The Hub contract doesnt validate the input address of the query_unbond_requests function. Although not being a security risk, it may lead to a lowered user experience if incomplete or invalid addresses are provided and no address validation error is returned.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "18. Ineciency in querying a specic validator", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "In contract/prism_hub/src/config.rs:112, the execution is querying the list of all validators in order to check if the provided one is part of the list. Instead of executing query_all_validators and then iterating through the list in order to nd the required one, which has a O(n) complexity, query_validator could be used to directly query the required one.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "19. Lack of pausing mechanism", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Prism/2022-11-04 Audit Report - Prism Auto Compounding cAsset v1.0.pdf", "body": "Currently when the smart contract is deployed, if there is any catastrophic security loophole being discovered there is no quick way to limit its functionality and restrict the potential impact of the vulnerability while the team carries out an investigation/working on an upgrade.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Attacker can extract all Sigma tokens from the factory contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "claim_deposit The in contracts/sigma_factory/src/contract.rs:363 allows an attacker to extract all Sigma tokens from the factory contract. Currently, any address with an unlocked deposit can perform this attack. There is no step in the function where entries are removed from CREATOR_TO_UNLOCK and the deposit redemption is not recorded anywhere. function The following is a potential attack scenario: 1. The attacker creates an option", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. The attacker can repeatedly call claim_deposit and will continue to receive config.deposit_amount each transaction until the factory contract has no Sigma tokens left. Recommendation We recommend removing the CREATOR_TO_UNLOCK map entries after they are utilized in claim_deposit. In addition, we recommend storing the amount the user deposited and only returning it rather than returning config.deposit_amount. This amount can be decremented or set to zero after the user has claimed their deposit. Status: Resolved 2. Logic error prevents the redemption of aUST", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "3. The attacker can repeatedly call claim_deposit and will continue to receive config.deposit_amount each transaction until the factory contract has no Sigma tokens left. Recommendation We recommend removing the CREATOR_TO_UNLOCK map entries after they are utilized in claim_deposit. In addition, we recommend storing the amount the user deposited and only returning it rather than returning config.deposit_amount. This amount can be decremented or set to zero after the user has claimed their deposit. Status: Resolved 2. Logic error prevents the redemption of aUST", "labels": ["Oak Security", "Severity: High"]}, {"title": "4. Settlement of stage 4 might run out of gas if too many depositing addresses exist", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "In contracts/sigma_vault/src/contract.rs:996-1017, the deposits may run out of gas if the vector has many entries. Many entries might occur if an attacker would create many addresses to prevent the settlement of puts. This would result in the vault no longer being able to settle puts. There is currently no way to recover from this issue. iterations over", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Depositors may receive dierent amount than original deposit", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "claim_deposit The in contracts/sigma_factory/src/contract.rs:383 allows the depositor to claim their deposit after it has reached its unlock_timestamp. The deposit is sent back in a CW20 transfer message in lines 379-386. This message amount sends the current config.deposit_amount (an updatable value) to the depositor. This is problematic if the deposit_amount at from the deposit_amount at the time of the claim. the option was created is dierent the time that function The value of deposit_amount is updatable in line 323 by the gov contract or the owner. If this value is changed in the period of time after the option has been created but before the deposit is claimed it will cause the user to receive a dierent amount than they originally deposited when they created the option.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Updatable option conguration parameters may impact the exercisability of options that are in the money", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "The update_config function in contracts/sigma_option/src/contract.rs:122 allows config.owner to update the options parameters. There is currently no safeguard to ensure that these parameters cannot be updated on live options. Allowing for these parameters to be updated is very problematic. For example, if the owner were to change config.call_or_put, it would aect the exercisability of previously minted shares. This could be done accidentally or intentionally. In a situation where the owner is compromised, the attacker could change parameters to ensure that no users can exercise their options. There does not appear to be a reason why the option parameters would need to be updated once they are initially set, and removing this functionality completely would eliminate this possibility completely. The following parameters should not be updatable after they have been originally set:  underlying_asset  denomination  call_or_put  american_or_european  strike_price  expiration_time  exercisable_token  obligation_token", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. Excess funds sent while exercising via vault contract will be lost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "In both contracts/sigma_vault/src/contract.rs:570 and 582, if the user sends more funds than the exercisable units balance of the vault then they will eectively remain in the contract and not be returned back to the sender. This may result in the caller receiving less value than they have sent to the vault contract. In lines 570 and 582 there are validations to ensure that the units_sent or funds_sent are less than exercisable_units, and it will return an error if the funds are insucient. This check does not account for a situation where the caller sends funds in excess of the amount of exercisable_units. After this step, the function uses exercisable_units directly in all of the remaining messages and calculations and disregards the actual amount sent by the caller. This will result in the excess funds remaining in the vault contract and the caller will receive less value than they sent.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "8. Missing tax deductions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "While Terras tax rate has been set to zero, the tax mechanism is still implemented and the rate might be increased again in the future. It is still best practice to include functionality to deduct taxes. A non-zero rate could be reinstated via a governance proposal due to circumstances where the expected income from the tax rewards increases signicantly. In this situation, stablecoin transactions on Terra would expand to a state where a meaningful portion of the staking rewards income is derived from tax rewards rather than the vast majority coming from swap fees. We consider this to only be a minor issue since the contract owner can recover from tax mismatches by simply sending funds back to the contract. Additionally, the likelihood of the Terra team to increase taxes again is low. See https://agora.terra.money/t/proposal-to-reduce-the-terra-tax-rate-to-zero/3524 for more detail around the tax rate discussion.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. treasury_take, percent and fee should be validated to ensure they fall within an expected range of values", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "In multiple occurrences values are set or updated without validations to ensure that they fall within an expected range. These are: 1. config.treasury_take in the update_config function and the instantiate function in contracts/sigma_collector/src/contract.rs:155. 2. percent in the ExecuteMsg::Convert handling in contracts/sigma_collector/src/contract.rs:84. 3. config.fee in the update_config function and the instantiate function in contracts/sigma_factory/src/contract.rs:338 and contracts/sigma_factory/src/contract.rs:49, a misconguration could cause an error in contracts/sigma_option/src/contract.rs:574.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Miscongured distribution schedule cong can cause panics in LP staking contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "a In contracts/sigma_lp_staking/src/contract.rs:35 distribution_schedule may be stored with a start time that is greater than the end time. This would cause contracts/sigma_lp_staking/src/contract.rs:331 to panic. For informational purposes, we also highlight that it is possible to supply a schedule with gaps and overlaps. Such gaps and overlaps do not cause errors, but might not be intended.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Subtraction may cause wrap around underow", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "are multiple There in instances contracts/sigma_xsig_reward/src/xsig.rs that may cause an underow if not handled properly. It is best practice to perform checked subtraction to return None or to use saturating subtraction to keep the result at the numeric bounds, rather than wrapping around during an underow. subtractions of This is important because Rust behaves dierently in debug mode and release mode. In debug mode, Rust adds built-in checks for overow/underow and panics when an overow/underow occurs at runtime. However, in release or optimization mode, Rust silently ignores this behavior by default and computes twos complement wrapping. The following are occurrences of unchecked subtraction:  contracts/sigma_xsig_reward/src/xsig.rs:30  contracts/sigma_xsig_reward/src/xsig.rs:31  contracts/sigma_xsig_reward/src/xsig.rs:32  contracts/sigma_xsig_reward/src/xsig.rs:68  contracts/sigma_xsig_reward/src/xsig.rs:69", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. Extra funds sent may be lost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "There are multiple instances in the contracts where native funds are improperly handled which may lead to a loss of funds. The current implementation does not account for a situation where the caller sends multiple funds. info.funds is a vector of Coin, but the current implementation only accounts for the specic denom used by the contract. It is best practice to provide an error if funds are sent that the contract does not handle. The following are instances of where funds are handled in this manner:  contracts/sigma_option/src/contract.rs:319  contracts/sigma_option/src/contract.rs:358  contracts/sigma_vault/src/contract.rs:563  contracts/sigma_vault/src/contract.rs:576  contracts/sigma_vault/src/contract.rs:1309  contracts/sigma_vault/src/contract.rs:1379  contracts/sigma_vault/src/contract.rs:1386", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. distribute function allows collector to send any asset", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "The distribute function in contracts/sigma_collector/src/contract.rs:205 allows the caller to specify any asset while this function appears to be intended to only handle Sig distributions. This can be problematic if the caller species an asset that is not Sig.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. CREATOR_TO_UNLOCK may cause an out of gas error", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "The CREATOR_TO_UNLOCK maps elements are never removed in the factory contract. This may cause an out of gas error in query_deposits. It is best practice to delete map entries once they have been used and are no longer necessary and also to limit the maximum number of entries to a map.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. Iterations over several maps may cause out of gas errors", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "Iterations over several maps that are used in the factory contract might run out of gas and cause errors. These are: 1. tickers_by_option_info in contracts/sigma_factory/src/contract.rs:447 2. expiries_by_option_info in contracts/sigma_factory/src/contract.rs:465 3. strikes_by_option_info in contracts/sigma_factory/src/contract.rs:484 Out of gas errors can happen because those maps are unbounded. Since the initial amount of options is limited by the maximum expiry of three years it will not happen at launch and therefore this is only a minor issue. However, as options accumulate over the years this might become a serious problem for the protocol.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "16. Oracles for low liquidity assets might be prone to manipulation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "Traditional options with physical delivery do not require to be in the money to be exercised. In some cases, settling an option out of the money or near the money can be economically benecial  e.g. if an equivalent order would have a large price impact on the markets. The use of oracles makes sure that options are not executed at a loss. However, if the oracle price is manipulated the oracle can stop users from executing options in the money.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Canonical address transformations are inecient", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "Usage of canonical addresses for storage is no longer recommended as a best practice. The reason is that canonical addresses are no longer stored in a canonical format, so the transformation just adds overhead without much benet. Additionally, the codebase is more complicated with address transformations.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "18. Unnecessary use of less than or equal to", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Sigma/2022-05-03 Audit Report - Sigma v1.0.pdf", "body": "receive_cw20 in The contracts/sigma_xsig_reward/src/contract.rs:126 checks if the amount sent is less than or equal to zero. This can be changed to check only if the amount is equal to zero before returning the error. function", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Price timestamp scale discrepancies could disable market operations for assets using the Ojo oracle", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "In contracts/price-oracle/src/query.rs:129-136, when retrieving prices from Ojo oracles, the ReferenceData response returns last_updated_base and last_updated_quote timestamps in seconds, as specied in the documentation here. However, the query_ojo_price function utilizes Timestamp::from_nanos, causing timestamps to be incorrectly scaled and stored, as they have not been converted to nanoseconds when storing the values. the Consequently, in a contracts/market/src/utility.rs:420-444, MoneyMarketError::PriceTooOld error leading to the impossibility of querying prices for assets that are using Ojo. function will dened return query_prices This would make Market like ExecuteMsg::Borrow and ExecuteMsg::WithdrawCollateral revert when targeting assets with an Ojo price oracle, potentially locking user funds. contract messages", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Price oracle contract allows owner and bots to overwrite prices submitted in the same block leading to race conditions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "The price oracle contract allows Owner and Bots to publish asset prices using the in execute_update_prices contracts/price_oracle/src/contract.rs:56-77. function dened However, since multiple Bots can submit their price in the same block and the oracle contract stores only one price for each asset, race conditions are possible where the latest transaction overwrites all the other submitted data. Consequently, it might lead to users potentially fetching dierent prices within the same block, depending on the order of transactions which validators could manipulate to take prot.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. No asset removal possible", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "There is no functionality implemented to remove assets. If tokens turn malicious or regulators require the delisting of a certain asset, the lack of asset removal functionality might have a negative impact on the reputation of the protocol and aect uninformed users.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Missing address deduplication", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "In packages/neptune-money-market/src/config.rs:121-137, the set_config function allows the Owner to update the contracts conguration. However, no deduplication is performed when storing addresses provided in msg.vecs. Consequently, the same address may be stored multiple times, leading to ineciencies when iterating the vector.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Oracle centralization issue", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "In contracts/price-oracle/src/contract.rs:114-121, when executing the executing_update_prices function, Owner and Bots are able to set arbitrary prices for OracleAssetDetails::Regular oracles. This introduces a centralization concern, as bots and owners can set prices without any validation, price aggregation or Time-Weighted Average Price (TWAP) mechanism. Malicious bots can hence easily manipulate prices to their advantage. Additionally, since there is no validation in place for the provided price_info, it allows setting a price of 0 or a confidence level of 0, leading to liquidations or undercollaterized loans. We classify this issue as minor since the owner and bots are trusted entities.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Asset update function can be used for price updates", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Neptune/2024-01-09 Audit Report - Neptune Updates v1.0.pdf", "body": "there is a dedicated function executing_update_prices in For updating prices, function contracts/price-oracle/src/contract.rs:114-121. However, execute_update_asset in line 142 can also be used to update the prices of existing assets. the future two roles where one is only Because of this, it will not be possible to completely separate these two tasks: If there are in the (via execute_update_asset) and the other role is only allowed to update the prices of existing assets, the one that is allowed to add new assets can also update prices. Therefore, a complete separation of concerns cannot be achieved, violating the principle of least privilege. allowed to add new assets", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Wrong reservation assignment could lead to incorrect receiver for NFT", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "In contracts/contracts/stardust-nft-distribution/src/contract.rs:222, the senders address is assigned to the reservation. Since the contract owner and operator are able to create reservations on behalf of users, this might lead to the contract owner or operator receiving the NFT, rather than the reservation owner, even though the reservation owner paid for the NFT. This could lead to lost NFTs, for example, if the owner or operator is a smart contract such as a governance contract that cannot transfer NFTs.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Missing check for makers ability to cover the maker fee leads to incorrect validation query result", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "query_validate in The not contracts/contracts/stardust-settlement/src/queries.rs:9 validate whether the maker has enough stardust balance to cover the maker fee charged in when contracts/contracts/stardust-settlement/src/order.rs:117 checking if an order is suciently capitalized. This will lead to undercapitalized orders being returned as valid, which is incorrect. function does", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. NFT ownership is not cleared when NFTs are withdrawn, which leads to inconsistent state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "The settlement contract does not clear the stored NFT_OWNER for an NFT when a user sends the Withdraw message. NFT ownership is only updated on deposit in the in deposit_balance contracts/contracts/stardust-settlement/src/state.rs:70, but not cleared in in leads to contracts/contracts/stardust-settlement/src/state.rs:80. That an inconsistent state. withdraw_balance function function the", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Setting royalties in settlement contract fails for CW1155 tokens", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "of the part settlement in As contracts/contracts/stardust-settlement/src/royalties.rs:22, the minter of the token is queried. That query uses the CW721 contracts Minter query, which does not exist for CW1155 tokens. Consequently, royalty fees can only be set for CW721 tokens, not for CW1155 tokens. set_royalty contracts function", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Submit execution plan will fail due to message sent to wrong contract", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "the In contracts/contracts/stardust-settlement/src/execution.rs:131, ValidateAndTransferExecutorBalance message is sent to the executor contract, but the executor contract does not accept that message.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Missing check for ability to execute an order leads to misleading validation query result", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "query_validate in The the contracts/contracts/stardust-settlement/src/queries.rs:10 validate_into_info function with None as the last argument. That leads to a skip of validation whether a particular account can actually execute the order. This implies a misleading query result since a successfully validated order might fail validation during execution. function calls", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Querier contracts order update returns a misleading taker asset lled value", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "the querier In contracts/contracts/stardust-querier/src/contract.rs:132, taker_asset_filled is set to a value of 0 for orders   that are undercapitalized, lled or cancelled. A 0 ll value is inconsistent. OrderUpdate contracts logic in", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Closing an English auction leaves the maker order open", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "the in In function contracts/contracts/stardust-auction/src/contract.rs:132, the maker order is not closed when closing the English auction. That leaves dangling maker orders, leading to an inconsistent state. close_english_auction", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Treating Luna as a special case for tax calculation may lead to problems with Terra protocol updates", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "In contracts/packages/stardust_protocol/src/asset.rs:35 Luna is treated as a special case for tax calculations, with a hard-coded zero value. However, this might lead to inconsistencies if Terra changes Luna tax policy in a future protocol update. In such a case, the contract would pay the tax, leading to any user funds being spent.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Approve and transfer pattern implies a bad user experience and might introduce security issues", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "In several places in the codebase, the protocol relies on the approve and transfer pattern. It is generally better to use CW20 receive hooks, as they provide a better user experience (they do not require a separate approval and do not require revocation), are more gas ecient, and are usually more secure since approvals have often a disproportionate size and no expiry.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Relayer fees are skipped if either taker or maker fee is zero", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "in The contracts/contracts/stardust-settlement/src/order.rs:94 contains the logical or || operator instead of the logical and && operator. This leads to no fees are being charged if either the maker or the taker fee is zero statement if", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. Missing input validation of order infos and ll amounts in order execution might confuse users", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "execute_orders in The not contracts/contracts/stardust-settlement/src/order.rs:149 validate whether two arrays order_infos and fill_amounts are of equal length. If they are not, any excess elements will be ignored. That might be unexpected for users. function does", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. Overow checks not enabled for release prole in all packages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Random Earth/2021-12-10 Audit Report - Random Earth v1.1.pdf", "body": "in the workspace level contracts/Cargo.toml, some packages do not While set explicitly enable overow checks. This is not a security concern in the current version of the contracts since the checks are enabled from the workspace to all packages, but future refactoring might leave some packages vulnerable to over- or underows. Packages that currently dont have overow checks enabled are:  contracts/contracts/stardust-settlement/Cargo.toml  contracts/contracts/stardust-auction/Cargo.toml  contracts/contracts/stardust-executor/Cargo.toml  contracts/contracts/stardust-nft-distribution/Cargo.toml  contracts/contracts/stardust-querier/Cargo.toml  contracts/contracts/stardust-registry/Cargo.toml", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Locked funds will be inaccessible if lockdrop incentives have not been set by the end of the withdrawal window", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "is and DelegateAstroToAuction that can be executed after During ClaimRewardsAndOptionallyUnlock message handlers the withdrawal window, a users in total_astro_rewards contracts/lockdrop/src/contract.rs:827 and 910. That calculation is done in the update_user_lockup_positions_and_calc_rewards function, which contains an assertion that config.lockdrop_incentives is set and will panic otherwise in 1735. Lockdrop incentives can only be set by sending the IncreaseAstroIncentives message, which will fail after the end of the withdrawal window though. By the time this panic occurs, there is no way to recover from it, which would render any locked funds inaccessible in the lockdrop contract. calculated The same issue exists in the query_lockup_info function in line 1592. in been minted contracts/auction/src/contract.rs:618. Likewise, the auction contract contains the same mechanism  during the ClaimRewards message handler, a users auction_incentive_amount is calculated after LP shares The have update_user_incentives_and_lp_share function that performs the calculation contains an assertion that the astro_incentive_amount is set and will return an error otherwise the by fail after the LP shares have been IncreaseAstroIncentives message, which will minted. By the time this panic occurs, there is no way to recover from it, which implies that any contributed Astro and UST tokens are locked inaccessible in the contract. incentives sending These 717. only can set be in We only classify this issue as major since it can only be caused by oversight of the contract owner.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Unlocking funds may fail if a user has too many lockup positions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "all over lockup iterations update_user_lockup_positions_and_calc_rewards contains The unbounded in contracts/lockdrop/src/contract.rs:1703 and 1707. These iterations could run out of gas if a user submits many lockups for dierent pools and durations. Since the update_user_lockup_positions_and_calc_rewards function will be called when a user sends a DelegateAstroToAuction or ClaimRewardsAndOptionallyUnlock message, the user will be unable to unlock funds. There is currently no way to recover from this issue. function a positions user by The same issue exists in the query_user_info handler in lines 1453 and 1457. We only classify this issue as major since it is unlikely that users submit enough lockup positions to cause out of gas issues.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. In the event of a compromised or lost owner key funds will be locked in the contracts forever", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "The only way to retrieve delegated funds from the auction contract after the withdrawal window is closed is through an InitPool message sent from the contract owner. In the event that the owner key is compromised or control over it is lost, delegated funds will be stuck in the auction contract forever. If an attacker gains access to the key, they could extort compensation for releasing the funds. the auction contracts InitPool message also sends the EnableClaims Likewise, in message to the lockdrop contract. That message enables claims by users contracts/lockdrop/src/contract.rs:436-442. As before, a compromised or lost owner key implies that funds will be locked in the lockdrop contract forever. same mechanism in claims The contracts/airdrop/src/contract.rs:197. The issue is less problematic here, since only airdropped funds are in the contract, but still, claims will be impossible if the owner key is compromised or lost contract, enables airdrop the in Even though a compromised owner account could have other severe consequences, this issue has been added due to the high value that will probably be locked in these contracts. We still classify this issue only as minor since proper management of the owner account is assumed. The operational security of Astroport, which includes proper key management, has not been in scope of this audit though.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Liquidity migration might be prevented by target contracts", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "The MigrateLiquidity message of the lockdrop contract triggers a withdrawal of funds from TerraSwap in contracts/lockdrop/src/contract.rs:505. In theory, the target contracts message handler could be upgraded such that the call would always revert. In that case, funds would be stuck in the lockdrop contract, with no way for liquidity migration and no way for users to withdraw their funds.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Issues in generator or downstream reward contracts may lead to users being unable to unlock LP tokens", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "In the lockdrop contracts ClaimRewardsAndOptionallyUnlock message handler in contracts/lockdrop/src/contract.rs:948-954 the generator contract is queried to check pending token/reward balances. Any misconguration/issue with the generator or proxy rewards contracts (which could be caused by a downstream issue in another protocol such as Anchor or Mirror) might make this query fail, which would prevent a user from ever unlocking their LP tokens. We classify this issue as minor since a misconguration is unlikely.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Auction contract may enable claims while withdrawal window of lockdrop contract is still open which could lead to an incorrect state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "The auction contract can enable claims by sending the EnableClaims message at any time, is still open, a user calling the even before the withdrawal window is closed. to will handle_claim_rewards_and_unlock_for_lockup total_astro_rewards being set at contracts/lockdrop/src/contract.rs:910, which might not use nal values. The owner could still update a pool, which might impact the state.total_incentives_share total_astro_rewards calculation. function change would result lead and the of If it", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Staked Astroport LP will become unclaimable if generator contract is updated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "lockdrop contracts The in contracts/lockdrop/src/contract.rs:270-273, currently enables the generator contract address to be updated. Changing the generator contract address would make any staked Astroport LP at the time unclaimable after the change. This would eectively reduce all users balances. handle_update_config function The same issue exists in the auction contracts handle_update_config function in contracts/auction/src/contract.rs:200-204.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Lack of validation on incentives share value can lead to locked funds becoming inaccessible", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "are rewards When users try to delegate Astro rewards or claim rewards and optionally unlock funds, their Astro the calculated function update_user_lockup_positions_and_calc_rewards internally calls calculate_astro_incentives_for_lockup, which will panic in contracts/lockdrop/src/contract.rs:1666 if total_incentives_share is zero. This cannot be recovered from, since pools can neither be added nor updated after the withdrawal window is closed. Consequently, any funds in the lockdrop contract will become inaccessible. function. That in We only classify this issue as minor since it is caused by a misconguration by the owner.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Updating the Astro token address may lead to an inconsistent state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2021-12-23 Audit Report - Astroport Periphery v1.0.pdf", "body": "The lockdrops handle_update_config function currently enables the Astro token address in to contracts/lockdrop/src/contract.rs:253-256. Changing the Astro token address after users have called DelegateAstroToAuction may lead to an inconsistent astro_token updated be state between the stored values in the lockdrop contract and the balances in the Astro token contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Access nodes are not ltered when approving or setting default node", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/DelegatorManager.cdc:957 and 984, the admin can initialize an approved list of node operators or set a default node to stake using the initApprovedNodeIDList and setDefaultNodeIDToStake functions. However, no validation ensures the initialized or selected nodes are not access nodes. nodes access be Since cadence/contracts/standard/emulator/FlowIDTableStaking.cdc:1183-11 86, misconguring an access node as the default staking node prevents users from staking FLOW tokens and redeeming FLOW tokens instantly from the liquid staking contract. delegated cannot seen as to in This could happen when the admin calls setDefaultNodeIDToStake with an access node as the nodeID argument or during the advancing epoch phase in the filterApprovedNodeListOnEpochStart function at line 633. We consider this a minor issue since only the admin can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Migrate function does not enforce minimum staking amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/LiquidStaking.cdc:185, the migrate function does not check whether the delegated tokens are greater than or equal to the minimum staking amount. Unlike the stake functions precondition check in line 60, the validation is not enforced in the migrate function.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Minimum staking amount and staking cap are not validated against each other", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/LiquidStakingConfig.cdc:100-108, the admin can set the minimum staking amount and staking cap for the liquid staking protocol. Since the minimum staking amount is expected to be lower than the staking cap and vice versa, misconguring the values would prevent users from staking their FLOW tokens due to cadence/contracts/LiquidStaking.cdc:60 and 62. there should be a precondition check to ensure the updated values are higher/lower than the other. Ideally, We consider this a minor issue since only the admin can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Trust dependency on admin keys", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/stFlowToken.cdc:121, the mintTokens functions access modier is set to access(account). Theoretically, the account owner can mint as many stFlow tokens as required by deploying a new contract that calls the mintTokens function or performing a contract upgrade that modies the access modier access(all) keywords. into pub or The possibility of the admin is malicious or the private key is compromised. With that said, both deploy and update contract actions will emit events that o-chain listeners can fetch, which are easily trackable and monitorable with tools. this happening is that", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Incorrect event emitted when admin modies isMigratingPaused conguration", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "the cadence/contracts/LiquidStakingConfig.cdc:137, In the emitted ConfigStakingPause isMigratingPaused conguration. This is incorrect, as the ConfigMigratingPause event should be emitted instead. updates admin event when the is", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Supply start index higher than the end index causes collectDelegatorsOnEpochStart to perform empty execution", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/DelegatorManager.cdc:503, the while loop attempts to collect all delegators to the next epoch based on the provided start and end index. If the start indexs value is supplied higher than the end index, the loop will not execute, causing the collectDelegatorsOnEpochStart function to collect zero delegators.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. initApprovedNodeIDList gas consumption can be reduced", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In cadence/contracts/DelegatorManager.cdc:962-964, the for loop attempts to insert the approvedNodeIDList dictionary with the nodeIDs argument key and value. This causes unnecessary gas consumption as the values can be set directly.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Distributing tokens to the same node operator yield no dierence", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In the cadence/contracts/DelegatorManager.cdc:826, transferCommittedTokens function allows a strategy bot to transfer committed tokens from one delegator to another. Since no validation ensures that fromNodeID and toNodeID are not the same node operator, the result of the execution would yield no dierence.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Typographic errors and duplicate comments found in codebase", "html_url": "https://github.com/oak-security/audit-reports/tree/master/IncrementFi/Audit Report - IncrementFi Liquid Staking.pdf", "body": "In several instances of the codebase, typographical errors were found along with duplicate code comments.  cadence/contracts/DelegatorManager.cdc:125 contains an additional protocol word at the end of the sentence  cadence/contracts/LiquidStakingConfig.cdc:13 contains a typographical error of minimum This aects the readability of the contracts.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "2. WithdrawLiquidity assets parameter is always expected to be empty", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2024-07-02 Audit Report - Astroport Tokenfactory LP Tokens v1.0.pdf", "body": "The WithdrawLiquidity message has been newly added to each pair. Previously, it was part of the periphery/liquidity_manager contract, which has been removed from the source code. For each pairs WithdrawLiquidity message, the assets parameter is expected, which is a vector of Asset objects. This parameter is mandatory. However, for example in contracts/pair/src/contract.rs:545 it is checked whether assets are empty. If so, the logic continues to execute the function. Otherwise, an error is returned. This is unintuitive because the user must send an empty vector each time to withdraw his liquidity, which is not a good practice and may lead to incorrect calls of the WithdrawLiquidity message.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Missing principal token maximum supply validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Zodiac Protocol/2024-03-22 Audit Report - Zodiac Protocol Core Extension v1.0.pdf", "body": "The osmo_bal_lockup_vault contract does not perform validation before storing input data in the principal_token_max_supply conguration eld. If a privileged user would by mistake or intentionally provide a very small or zero number, the contract would become unusable in practice. lack The contracts/osmosis/zodiac_osmo_bal_vault/src/contract.rs:97 conguration update in lines 647-649. validation during exists both of instantiation in and", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Unimplemented state migration for GENESIS_POOL_STATE and principal_token_max_supply", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Zodiac Protocol/2024-03-22 Audit Report - Zodiac Protocol Core Extension v1.0.pdf", "body": "In contracts/osmosis/zodiac_osmo_bal_vault/src/state.rs:17 and 41, the GENESIS_POOL_STATE and principal_token_max_supply states are introduced to support deposit limit and pool state snapshot. However, in contracts/osmosis/zodiac_osmo_bal_vault/src/contract.rs:50 does not perform any state migration to support them. migration handler the Consequently, migrating the old zodiac_osmo_bal_vault contract to the current version will cause the contract to fail to work correctly due to serialization and deserialization storage errors. We classify this as a minor issue since it could impact existing deployments of previous versions of this contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Incoherence in TrackBeforeSend and BlockBeforeSend response attributes", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Zodiac Protocol/2024-03-22 Audit Report - Zodiac Protocol Core Extension v1.0.pdf", "body": "In the contracts/osmosis/zodiac_osmo_bal_vault/src/contract.rs:195, Response generated for the TrackBeforeSend hook should be consistent with the one generated in the BlockBeforeSend hook. However, \"no-op\") attribute. the one returned in the TrackBeforeSend is missing the (\"action\",", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Usage of deprecated to_binary function", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Zodiac Protocol/2024-03-22 Audit Report - Zodiac Protocol Core Extension v1.0.pdf", "body": "In contracts/osmosis/zodiac_osmo_factory/src/testing/integration.rs:1 4, packages/zodiac/src/utils.rs:170 and 176, the to_binary function is used to serialize data structures to JSON bytes. As the function is currently deprecated, its usage is not encouraged.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Usage of magic numbers decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Zodiac Protocol/2024-03-22 Audit Report - Zodiac Protocol Core Extension v1.0.pdf", "body": "Throughout the codebase, hard-coded number literals are used. Using such magic numbers goes against best practices as they reduce code readability and maintenance as developers are unable to easily understand their use and may make inconsistent changes across the codebase. A comprehensive list of hard-coded number literals has not been included in this report as many instances of 10000u32, 2, and 1 can be found in the contracts within scope.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Missing tax deduction in collectors swap, LLI farmings mint and the treasurys spend function will drain contracts funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Levana/2022-01-13 Audit Report - Levana Stage 1 - v1.0.pdf", "body": "The collector contracts swap function can deal with native and cw20 tokens. However, in the case of in take contracts/levana-collector/src/contract.rs:285. into account code does token, native taxes not the a Similarly, contracts/levana-lli-farming/src/contract.rs:353. farming contracts mint_lli function does not deduct the LLI taxes in Likewise, contracts/levana-treasury/src/contract.rs:62. taxes are not accounted for in the treasury contracts spend function in Failure to deduct taxes will mean that the contracts funds are slowly drained.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. A website viewed with the wallets' web browser can place arbitrary information in browser and wallet activity history", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The in-app browser allows a web page to send messages back to the application. A web-page can set any host, title url, and origin values which are later displayed in the browser and wallet activities histories. Moreover, a web page can set any arbitrary URL for its own entry in the browser history. This functionality opens possibilities for phishing attacks  a user might unknowingly navigate to a malicious URL by clicking on entries in the browser history. Additionally, the arbitrary URL set by a web page will be displayed in the wallet activities history if the web page has initiated web3 wallet transactions.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. The browser shows secure green lock icon next to URL even when the actual protocol is clear-text HTTP", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The in-app Browser always shows a green lock icon next to the URL being visited even if the is insecure HTTP. This can mislead users into thinking that a connection is used protocol encrypted, although it this issue for example through man-in-the-middle attacks or redirects to unencrypted versions of the site without the user noticing. is not. Attackers can exploit", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. It is possible to delete the wallet without providing a correct PIN", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "If an incorrect PIN is entered ten times, the application provides an option to delete the old wallet and create a new one. Since the wallet application does not require that access to a mobile device is secured by a PIN or biometric measures, a malicious actor can simply delete the wallet on a device.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Sensitive data may be logged", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The app uses Sentry for error tracking without any ltering of sensitive information. Because of that, sensitive data may be sent to external servers. If an attacker manages to get access to such a server (e.g., by compromising team members or vulnerabilities in the server), they may be able to access this data. Such attacks have happened in the past. In Cypher Wallets codebase, this could for instance happen to API tokens (in src/core/card.ts:15) or keystore information (in src/core/Keychain.tsx:107) which is included in a captured exception.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Insucient ENS name validation enables social engineering attacks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "Generally, it is a good idea to only allow ASCII-characters for ENS names because the same human-readable name may have multiple valid UTF-8 encodings. Attackers can abuse this to trick users into sending funds to unintended ENS names that they have registered. The following regex pattern is used in src/core/util.tsx to validate ENS names: /[-a-zA-Z0-9@:%._\\+~#=]{1,256 }\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/ig This pattern matches on partial strings in the middle and does not require that the whole checked string adheres to it. isValidEns will therefore return true if the string contains some non-ASCII characters in the beginning, as long as there is at least one ASCII character before the dot.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Sign-in requires signing an arbitrary message", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "When using the Cypher Wallet the rst time, a sign-in to the CypherD API server is performed in the background. This sign-in requires signing a message fetched from the CypherD API server in src/core/globalContext.tsx:153. This is a security measure to ensure that the current user controls the wallet's public address. However, signing arbitrary messages can be harmful. For example, they can be used to steal funds from the user or perform malicious actions in the event of a compromised server. This issue is also observed in the following locations: - - src/containers/DebitCard/aptoCard.tsx:59 src/containers/InfoScreen/legalAgreement.tsx:44", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. Outdated use of Facebook Conceal as the default secure storage option on Android", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The _setInternetCredentialsOptions function in src/core/Keychain.tsx:92 uses Facebook Conceal as the storage for the cipher. However, for Android API level 23+, the Android Keystore is the recommended storage option. Moreover, Shared Preferences together with the plain-text decryption key. in the case of Android before API level 23, an encrypted ciphertext is stored in", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "8. Injected JavaScript is not veried", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The WebView that is used in src/components/WebScreen.tsx injects the content of a JavaScript le that is loaded from the server public.cypherd.io before loading the content. However, this code is not veried in any way. An attacker that manages to control the server that is responsible for public.cypherd.io can therefore distribute malicious JavaScript that is executed before every page load.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "9. Known vulnerabilities in dependencies", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "There are NPM packages with known vulnerabilities (which are shown when running npm audit). The output of npm audit indicates that 56 vulnerabilities were found in the audited packages. Of these vulnerabilities, 1 is rated as low, 14 are rated as moderate, 33 are rated as high, and 8 are rated as critical.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "10. The browser leaks wallet addresses to visited websites", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The in-app browser allows a web page to send messages back to the application. A web page can request user wallet addresses and this information will be provided to the web page automatically without user consent.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Users cannot set a PIN if biometrics are enabled", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The app only requires a PIN if logging in with biometric data is not activated on the device. This may be insucient for some use cases. For instance, a user that regularly shares their device may still want to set a PIN, even if they authenticate with their ngerprint or face scan.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. The Ethereum address of a user is sent to external platforms", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The Ethereum address of a user is passed as the user ID to Intercom through the Intercom.registerIdentifiedUser function. While this may make the handling of support requests easier, a user might not want to be associated with their Ethereum address, as this can result in a loss of anonymity.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. Hard-coded Cosmos gas prices", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "the gas price for every supported chain is In src/constants/cosmosConfig.ts, hard-coded. This can lead to too high or too low gas prices. In the rst case, a user unnecessarily pays too much for a transaction. With too low gas prices, the transaction can be delayed and may fail.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. No pagination is used when querying APIs with a limit", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "a of limit with The conguration in the le src/core/globalContext.tsx contains multiple API endpoints is initialGlobalState.rpcEndpoints.COSMOS.otherUrls.balance. Besides the balances key, this endpoint contains a key pagination that contains the next URL to query if the result is larger than the limit. However, this key is ignored and only the key balances is used in src/core/cosmosStaking.tsx. In rare edge cases where the queried address has a non-zero balance for over 1,000 coins, it can happen that the desired balance is not found because only the rst 1,000 results are considered. endpoint 1,000. such One", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. The seed phrase is shared insecurely between view navigations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "src/containers/Options/SecurityPrivacy.tsx:58 and In src/containers/OnBoarding/confirmSeedPhrase.tsx:16, the loaded recovery seed phrase is passed as a navigation parameter to the next screen view via the navigate function. This imposes a potential security issue, as the seed phrase is passed unencrypted to the next screen view and could be logged by an integrated tracking plugin (e.g., Sentry or Intercom).", "labels": ["Oak Security", "Severity: Low"]}, {"title": "16. PIN code length is limited to 4 digits", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "A PIN code is used to protect the wallet from unauthorized access on Android devices and as a fallback on iOS devices in case biometric authentication is unavailable. Setting a PIN code is implemented in src/containers/PinAuthetication/setPin.tsx:34. However, the PIN code length is limited to four digits, which is considered weak.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "17. Small entered token fractions are incorrectly parsed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "Entering token fractions with a very small USD value leads to displaying an inated USD value due to the internal representation in scientic notation. For example, entering 0.00000001 MATIC tokens with a USD value of 1.2313863e-7 USD in the send token view incorrectly shows a USD value of 1.23 USD.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "18. Number formatting is not using the users locale", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "The Cypher Wallet does not use the decimal separator of the users current locale when entering numbers. This currently prevents entering numbers with a decimal separator other than a dot (e.g., German users may enter 1,5 instead of 1.5) and may lead to confusion. Besides misleading display issues, mobile device keyboards may have a xed decimal separator, and users might not be able to type the required decimal separator.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "19. Static retry delay of 100ms for failed API HTTP requests", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Cypher Wallet/2023-05-19 Audit Report - Cypher Wallet v1.2.pdf", "body": "In src/core/Http.tsx, the axios library is congured with the axios-retry plugin to retry failed HTTP requests with a static delay of 100 milliseconds and a maximum of 5 retries. If the request fails, this could lead to a large number of requests in a short period of time, as well as insucient time for the server to recover.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Lack of stream status validation can be exploited to drain contract funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contracts finalize_stream function does not validate that the current streams status is not Status::Finalized. An attacker could exploit this by repeatedly calling the finalize_stream function to trigger Bankmsg::Send messages using the streams treasury as the beneciary. This results in transfers of both the creation denom and creators_revenue, drainting the contracts funds. A proof of concept test case can be found in the test case Faulty stream state validation lead to draining of funds in the appendix.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Stream status not saved after update allows contract funds being drained", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contracts finalize_stream function does save the new stream status after updating it in src/contract.rs:618-620. Consequently, the status will remain the same when calling the finalize_stream function again. Similarly to the issue Lack of stream state validation lead to draining of funds, this can be exploited by repeatedly calling finalize_stream to trigger Bankmsg::Send messages, which drains the contracts funds. The same proof of concept test case Faulty stream state validation lead to draining of funds in the appendix applies here.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Updating stream_creation_fee or stream_creation_denom will cause ongoing streams to error when nalized or canceled", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "constructed In the execute_finalize_stream and sudo_cancel_stream functions, the BankMsg is and config.stream_creation_denom. Both config values are only checked during stream creation, and any changes to these values after creation will impact streams that have not been nalized. This can cause inconsistent states and errors if the contract does not hold a sucient balance or the right denom to pay the fees. config.stream_creation_fee with suppose there are two non-nalized streams and the value of For example, config.stream_creation_fee is increased. Now the rst stream to nalize would spend a larger amount on fees than was contributed during the stream creation. This will result in the rst streams balance being too low to nalize the second stream. The functions in src/contract.rs:645 and src/killswitch.rs:272 send a and BankMsg config.stream_creation_denom. config.stream_creation_fee using", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Lack of conguration parameter validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract does not validate several conguration parameters upon instantiation in src/contract.rs:32-45 and in the sudo_update_config function in lines 794-803. The following parameters should be carefully reviewed:  stream_creation_denom: creation as it will fail to match. Incorrect casing of the denom could block stream  stream_creation_fee: If set to zero, it will render the mechanism ineective and may allow spamming/grieng.  exit_fee_percent: If set to a value greater than one, line 630 will underow and streams can never be nalized.  accepted_in_denom: Incorrect casing of the denom could block stream creation as it will fail to match. In addition, operational issues if the account gets compromised or the organization requires a change. it should be noted that protocol_admin is not updatable. This could cause Although some of the consequences outlined above could have a major impact on users, privileged functions are operated by informed users which are less prone to errors. Therefore, we classify this issue as minor.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Exit fee percent validation diers from documentation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "included the following comment about exit_fee_percent The streamwap contract validation in src/contract.rs:31: exit fee percent can not be higher than 1 and must be greater than 0. Instead, the implementation allows the value to be less than one and greater than or equal to zero.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Stream creation parameters lack validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The creation of a stream in src/contract.rs:188 is lacking validation, which may lead to unintended consequences for stream creators. Firstly, there should be a validation to ensure that out_denom is not the same as in_denom. Secondly, out_supply should be validated to ensure it is not 0. While fund amount cannot be 0 in Cosmos SDK messages, if out_denom == config.stream_creation_denom the amount of out_supply specied in line 164 could be 0 and still pass the validation.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Stream actions performed at streams end time may introduce unintended consequences", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract allows for the following messages to be executed at the streams end_time:  ExecuteMsg::Subscribe,  ExecuteMsg::Withdraw,  ExecuteMsg::ExitStream, and  ExecuteMsg::PauseStream. This is problematic since it can lead to inconsistent states. in the current For example, the end_time blocktime. This could introduce a scenario similar to the one described in the Unspent tokens could be locked in the contract upon exit nding. implementation, a caller can subscribe at Although no clear exploitation path have been identied, the current implementation is error-prone.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Lack of best-eort validation on stream name and URL", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract does not perform any validation on the name and url elds of newly created streams in src/contract.rs:189 and 190. Although this does not have direct security related implications, these elds could be used to orchestrate phishing campaigns against unsuspecting users. Also, the name eld could be deliberately set by an attacker to confuse users, for example by setting it as an empty or very lengthy string.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Unspent tokens could be locked in the contract upon exit", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The documentation on the execute_exit_stream function reads that it should withdraw purchased tokens to his account, and claim unspent tokens. However, the implementation only withdraws the users purchased tokens but does not check for and claim any unspent tokens. The potential impact could be considered to be major or even critical, given that a users tokens could get locked forever in the contract, but no scenario was found where the in_token amount could be greater than zero when exiting a stream. We have raised this issue as informational as, although not having found a clear exploitation path, potential edge cases may arise with future updates to the contract.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Lack of action along executed messages event attributes", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract is lacking additional event attributes labeled as action on some of its entry points responses. The functions in the following lines were aected:  src/contract.rs:59  src/killswitch.rs:167, 201, 235, and 278 Although not a security issue, some o-chain components may rely on this kind of information being broadcasted upon successful execution of a contracts message handler.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Optimization possible on multiple code paths", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract currently contains minor ineciencies. While none of these issues pose a security concern, they should be addressed to further optimize the codebase. For example, when a user attempts to withdraw an amount of zero. The following functionalities can be reviewed for inecient code paths:  In src/contract.rs:266-273, updates on out_remaining and dist_index could be included in the if statement inline 276, as both will be left unchanged when the new_distribute_balance is zero. the  In src/contract.rs:295, it is inecient to include the case where the numerator is zero.  In src/contract.rs:499-501, the code never executes, as line 497 already uses info.sender to load the position. Therefore, position.owner will always be equal to info.sender.  In src/contract.rs:554, it is inecient to raise an error if withdraw_amount is equal to zero.  In src/killswitch.rs:46, it is inecient to raise an error if withdraw_amount is equal to zero.  In src/killswitch.rs:256, the assignment is redundant as the variable was already updated and saved to storage in lines 256-254.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Custom access controls implementation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract implements custom access controls. Although no instances of broken controls or bypasses have been found, using a single assert function to validate readability and controls maintainability. risks while improving the codebases reduces potential", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Misleading error messages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "The streamswap contract includes several custom errors in src/error.rs:38, 44, 77, and 104 that raise misleading or non-meaningful information to the user. In addition, descriptive of the actual situation. the NoFundsSent custom error raised in src/contract.rs:184 is not", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Overow checks not enabled for release prole", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "contracts/pf-dca/Cargo.toml does not enable overflow-checks for the release prole. While enabled implicitly through the workspace manifest, a future refactoring might break this assumption.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Additional funds sent to the contract are lost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Streamswap/2023-03-16 Audit Report - Streamswap v1.1.pdf", "body": "the transaction includes In src/contract.rs:160-187, during stream creation, checks are performed that ensure two Coins with the expected out_denom and that stream_creation_denom eld (one Coin with stream_creation_denom eld if both out_denom and stream_creation_denom are the same). This validation does not ensure that no other native tokens are sent though, and any additional native tokens are not returned to the user, so they will be stuck in the contract forever. While blockchains generally do not protect users from sending funds to wrong accounts, reverting extra funds increases the user experience.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Pools with big but dierent token amounts allow attackers to extract free value with minimal cost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "For big amounts of tokens in the oer and ask pools with dierent token values, the calc_out_given_in function in contracts/terraswap_pair/src/math.rs:11 applies rounding, which opens a way for an attacker to extract value from a pool with a very small cost. imagine a pool with 5_000_000_000_000 A tokens, and a pool with As an example, 1_000_000_000 B tokens, with both weights set to 1 for simplicity. If a user now sends 1 B token, we expect the user to get 5_000 A tokens back. When a user sends 1 A token, we expect the user to get 0 B tokens back (actually 0.0002, but since we are dealing with integers here, the remainder will be dropped). The current implementation incorrectly returns 1 B token though. Imagine further that the value of 1 B token is 5_000 USD, and the value of 1 A token is 1 USD, an attacker can now get a risk free return of around 4_999 USD (minus transaction fees) per transaction. If the attacker repeats this attack, they will be able to drain the pool. Even worse, whenever the attacker shifts the balance enough, other arbitrageurs will be able to extract value by bringing the pool back to the 5_000 to 1 ratio, allowing the attacker to repeat the attack from where they started. Here is a failing test case demonstrating the example: #[test] fn compute_swap_rounding() { let offer_pool = Uint128::from(5_000_000_000_000_u128); let offer_weight = FixedFloat::from_num(1); let ask_pool = Uint128::from( ); let ask_weight = FixedFloat::from_num(1); let offer_amount = Uint128::from(1_u128); let return_amount = Uint128::from(0_u128); let spread_amount = Uint128::from(0_u128); let commission_amount = Uint128::from(0_u128); assert_eq!( compute_swap(offer_pool, offer_weight, ask_pool, ask_weight, offer_amount), Ok((return_amount, spread_amount, commission_amount)) ); }", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Duplicate storage in two contracts could lead to inconsistencies", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "i. e. asset_infos, Both factory and pair contracts store the information about pairs, in contract_addr, and in contracts/terraswap_factory/src/state.rs:19 contracts/terraswap_pair/src/state.rs:4. This duplicate storage might lead to inconsistencies between the two contract states. liquidity_token, start_time end_time, and", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Migration of the pair contract is disabled", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "In the Instantiate message for the pair contract, the admin eld is set to None in contracts/terraswap_factory/src/contract.rs:149. This that pair contracts cannot be migrated. implies", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. A pairs asset infos are no longer stored sorted which might break other contracts", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "of the In the last version of TerraSwap LBP, the asset_infos stored in the FactoryPairInfo struct in is no contracts/terraswap_factory/src/contract.rs:139 were sorted. That longer the case. That change is not a problem for the audited contracts, since they use a pair_key helper function that generates a key based on the sorted asset_infos. This change, however, might break other contracts that depend on the previous design of stored sorted asset_infos. contract factory", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Unnecessary sub-messages introduce complexity", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "Most contract interactions in the codebase are utilizing sub-messages, which have been introduced to Terra with the Columbus-5 upgrade. Sub-messages have been added to allow processing of the result of a call, for example, to handle errors. If the result of a call is not processed, regular messages should be used. There is no security concern in the usage of sub-messages, since they currently use the ReplyOn::Never value which causes a failure to propagate to the caller. Unnecessary usage of sub-messages can be found in:  contracts/terraswap_factory/src/contract.rs:33, 145 and 172  contracts/terraswap_pair/src/contract.rs:73, 101, 259, 307, 360, 370, 381 and 492  contracts/terraswap_router/src/contract.rs:117 and 141  contracts/terraswap_router/src/operations.rs:45, 59 and 97", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Contract name is not unique", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "In contracts/terraswap_token/src/contract.rs:16, the contract name from the CW20 base contract is used in the following string declaration: const CONTRACT_NAME: &str = \"crates.io:cw20-base\";", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Pair contract registration message in factory can be replaced with sub-message reply", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "In contracts/terraswap_factory/src/contract.rs:156, a hook pattern is used to register the newly created pairs contract address in the factory. That pattern requires an exposed Register message type in the factory contract. Sub-messages have been introduced with the Columbus 5 upgrade of Terra to allow the processing of a reply without the need to expose a public message handler.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Post initialize message in pair contract can be replaced with sub-message reply", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Terra Liquidity Bootstrapping Pool/2021-12-23 Audit Report - Terra Liquidity Bootstrapping Pool v1.0.pdf", "body": "In contracts/terraswap_pair/src/contract.rs:86, a hook pattern is used to set the newly created liquidity token contract address in the pair contracts cong. That pattern requires an exposed PostInitialize message type in the pair contract.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. The moving average time limit can be incorrectly set to zero", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "In contracts/pair_concentrated/src/const.rs:49, the boundaries of the moving average time limit are dened as an including range between zero seconds and a week. since is However, contracts/pair_concentrated/src/state.rs:304 and it can be set to zero, could cause a division by zero error. ma_half_time denominator used the as in it", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Factory contracts ownership transfer freezes pair contracts", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "During the handling of ExecuteMsg, the migration_check function dened in contracts/pair_concentrated/src/contract.rs:215-218 ensures that there is no pending ownership transfer in the factory contract. When the factorys new owner accepts their role by executing the ClaimOwnership message, all registered pairs are added to the PAIRS_TO_MIGRATE vector. When a pair is in this vector, the migration_check function returns an error and all the pair operations are disabled. The factorys new owner can then reactivate pairs by executing the MarkAsMigrated message. This implies that all pair operations will fail while even just one pair is not yet migrated. Such a situation may be caused by a migration issue or a compromise of the factory contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Unnecessary nested loops when initializing cumulative prices", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "When instantiating the contract, the cumulative price vector is initialized with default values in contracts/pair_concentrated/src/contract.rs:80-84. Within two nested loops, it is then veried that assets are not duplicated before pushing them to the relevant vector. As there can only be two assets, the usage of nested loops is unnecessary, increases code complexity, and reduces readability.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Incorrect error message for CW20 token swap", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "a Swap in operation When contracts/pair_concentrated/src/contract.rs:243-245, offer_asset is validated to not be a CW20 token. If it is, an incorrect ContractError::Unauthorized error is returned. performed is This provides a poor user experience as it may be dicult for users to identify the source of the error when executing a swap transaction with a non-native asset.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Unsafe math usage could lead to division by zero error", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "The query_compute_d function is used to compute the current pool D value by invoking Calc_d and newton_d functions. However, if the pool has no liquidity yet (i. e. before the rst use of provide_liquidity), a division in contracts/pair_concentrated/math/math-decimal.rs:65. occur error zero can by A test case showcasing this issue is provided in the Appendix.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Unclear error message for a single-sided initial deposit", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "The contract does not allow the rst deposit to be a single-sided one by returning an in only InvalidZeroAmount contracts/pair_concentrated/src/contract.rs:414-415. provided asset error one is if However, understanding why their liquidity provision is not successful. this error message is not self explanatory and may prevent a user from", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Unnecessary tax deductions are performed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "performing When packages/astroport/src/asset.rs:92. tokens native transfers tax deductions are performed in However, calculations. the function to compute tax always returns zero instead of performing actual", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Validation can be performed earlier", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "there is a check that In contracts/pair_concentrated/src/contract.rs:59, prevents the code from running if the amount of assets provided in msg.msg_info is dierent waom two. Since this information is always available, check_asset_infos and potentially abort the execution early to save resources. this check can be done before calling in contracts/pair_concentrated/src/contract.rs:377, the check for Similarly, invalid number of assets can be done before querying the pools and running check_assets.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Mismatch between comments and code", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "In contracts/pair_concentrated/src/state.rs:261, the get_amp_gamma function state that the parameters stored in the future parameters will be returned in case the block time is greater than the value in self.future_time. the comments for However, parameters are also returned if the block time is equal to the self.future_time. contracts/pair_concentrated/src/state.rs:264, in the future", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "10. Arithmetic operations can be optimized", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "In contracts/pair_concentrated/src/utils.rs:291, in order to get the index of ask_ind, a subtraction is performed. Given that ask_ind can be either 0 or 1, this is not the most ecient way to compute a bit ip. In contracts/pair_concentrated/src/utils.rs:415, a sum of two dierences is calculated to get to the the deviation, which is dened as the sum of the distances between the value of two deposits and the average deposit value. Given that there are only two elements, this computation is not ecient.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Duplicated fee address checks during Swap", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Astroport/2023-03-16 Audit Report - Astroport Concentrated Liquidity Pool v1.0.pdf", "body": "During the handling of Swap messages, fee_address is provided. there are multiple checks to ensure that the In contracts/pair_concentrated/src/contract.rs:747, an explicit check is made but it is not required since the check in line 748 depends on the logic in line 702 that already validated the existence of the fee address.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. addr with a length that is not a multiple of 0x20 may lead to incorrect results", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "contracts/v0.8/PrecompilesAPI.sol:33, In the resolveAddress function, the provided addr length should be a multiple of 0x20, but a user can provide any arbitrary length of bytes as input and there is a possibility that the user will receive incorrect output because the current code does not validate the length of the provided addr param. execution of during the", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Address lookup via PrecompilesAPI.lookupAddress fails due to incorrect memory access", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "PrecompilesAPI.lookupAddress The in contracts/v0.8/PrecompilesAPI.sol uses Yul to call the lookup_address FEVM precompile. However, accessed by using mload(actor_id) instead of using a xed length of 32 bytes. mload loads a word from memory at the given address. actor_id is a static variable of the type uint64, not a memory pointer. This leads to incorrect memory access. the actor_id length is incorrectly function library The same issue is present in the PrecompilesAPI.getActorType function in line 73.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Hardcoded outputSize results in data loss during a delegatecall", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "contracts/v0.8/utils/Actor.sol:87, In MAX_RAW_RESPONSE_SIZE parameter is used to restrict the outputSize of the delegatecall Yul instruction, while FVM actors can return data sizes greater than 0x300. Due to the hardcoded output length, the return data is truncated, resulting in unexpected behavior of the call function. the", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Hardcoded GAS_LIMIT used to call precompiles may lead to gas exhaustion", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "The library uses a GAS_LIMIT constant to specify the maximum amount of gas a precompile can consume. The actual gas consumption depends on the actual FEVM implementation, which may change over time. This makes it impossible to predict the Actor.call precompile execution gas cost, and hence with a hardcoded GAS_LIMIT, the precompile call could run out of gas.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Missing sanity check for codec value", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "According to the comment in contracts/v0.8/utils/Actor.sol:49, codec should always be cbor. However, the user can provide any codec, while the Solidity code assumes it to be cbor. Without validation of the codec parameter, there is potential for incorrect results if the FEVM returns a response that is encoded with a dierent codec than cbor.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Calling the actor precompile conceals the revert reason", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Filecoin Foundation/2023-03-09 Audit Report - Filecoin FEVM Solidity Library v1.1.pdf", "body": "The Actor library in contracts/v0.8/utils/Actor.sol performs a delegatecall to the actor precompile. However, in the event of a revert, the revert reason is suppressed and not returned. This could negatively impact the developer and user experience.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Meta transactions can be replayed across contracts and networks", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "Currently, the implementation of meta transactions does not verify the contract and network of the transaction. As a result of this, it is possible to replay a meta transaction in dierent contracts such as Alice Terra tokens for UST and EUT and networks such as testnet or mainnet. That could lead to double-spending.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Execute deposit stable function uses relayers funds instead of users funds", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "When a user attempts to deposit funds into Anchor protocol, the request originates from execute_relay into execute_deposit_stable due to meta transactions. In relay.rs:63-65, the relayer attempts to execute the request as the user via mutating info.sender which then executes the message in line 81. as When the operation continues to execute_deposit_stable, the request will see Since funds. info.funds info.sender execute_deposit_stable determines the fund amount via checking info.funds (execute.rs:94-99), this would cause the relayers funds to be deposited into Anchor instead of the users funds. user while relayers are the", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Anchor exchange rate used might be out of date due to missing block height argument", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "The Anchor exchange rate is queried from the Anchor contracts, through the utility function in compute_exchange_rate contracts/alice_terra_token/src/utils.rs. However, no block height argument is supplied. Without the block height argument, Anchor returns a raw exchange rate from stored values without accruing interest since the last update, which means an outdated exchange rate is returned. Using this value could lead to slightly incorrect calculations. dened", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Missing validation during instantiate phase allows fee_ratio to be over 100%", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "fee_ratio is the percentage of fees Alice protocol would receive from user yields. During the instantiation phase (alice_terra_token/src/contract.rs:50) and migration phase (contract.rs:141) ,  there is no validation to ensure the ratio should be 0-100%.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Sent tokens other than in stable denom are lost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "During execute_deposit_stable and execute_deposit_stable_authorized, the users uusd funds are processed and deposited to Anchor protocol. If the user deposited additional tokens (other than uusd), the funds would get stuck in the contract after the operation succeeds.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Querying registered contracts in Overseer is unbounded", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "RegisteredContracts in The alice_overseer/src/contract.rs, which could cause calling transactions to run out of gas. Even if it is unlikely that there would be enough registered contracts to make the query out of gas, since registered contracts cannot be removed an out-of-gas situation could be irreversible. unbounded message query is", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. execute_redeem_stable returned amount might be dierent from actual amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "The execute_redeem_stable function requests a stable denom amount and then returns a calculated amount to the user. The returned value may be dierent from the actual returned amount due to possible slashing penalties, fees, taxes etc.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. aTerra exchange rate is queried twice during execute_redeem_stable", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Alice/Audit Report - Alice.pdf", "body": "functions The and query_aterra_exchange_rate both query aTerra exchange rate individually. During execute_redeem_stable, both functions are used to retrieve the aTerra exchange rate in alice_terra_token/src/execute.rs:163 and 165 which is inecient. compute_and_update_exchange_rate", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Vault deposits are not aected by delisted coins", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "In contracts/credit-manager/src/health.rs:160, when a coin is delisted, the LTV is set to zero. However, vault deposits of the delisted coin are not aected, as seen in lines 100-128. Consequently, users can maintain the collateral value of coins deposited prior to delisting. They could even time an attack based on the previous LTV by frontrunning the delist transaction or entering a vault when an announcement to delist a specic coin is published. For example, suppose ATOM is to be delisted by the Mars team. A borrower notices it and enters a locked vault that accepts ATOM as a base deposit. Despite ATOM being delisted, the borrowers collateral in the form of vault tokens still contributes to the overall LTV. The borrower can execute the RequestVaultUnlock message to convert the vault tokens back to ATOM, contributing to the total collateral value using the red banks LTV. Additionally, the client also identied that delisted vaults still contribute to the total collateral value. We classify this issue as major because this aects the correct functioning of the overall system.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. account-nfts contract UpdateConfig message cannot be executed after the minter role is transferred to credit-manager", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "The comment in contracts/account-nft/src/msg/instantiate.rs:22-24 states that the minter role will be transferred to the credit-manager contract. However, the the account-nfts credit-manager contract has no message dened to call UpdateConfig, and that implies proposed_new_minter conguration values can no longer be updated once the ownership has been transferred. max_value_for_burn which the We classify this issue as major because this aects the correct functioning of the overall system.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Allowing deposit or duplicate vault tokens may cause unexpected outcomes", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "In the contracts/credit-manager/src/vault/utils.rs:92-101, rover_vault_balance_value function queries the balance of vault tokens to calculate the tokens value. However, there is no validation to ensure the contract owner does not congure the vault token as allowed coins or that the congured vaults do not contain duplicate token denoms. This is problematic because either of the above would cause the queried balance to include user deposits or other vault balances, causing the following functions to return a greater amount than expected:  vault_utilization_in_deposit_cap_denom  query_all_total_vault_coin_balances  query_total_vault_coin_balance  assert_deposit_is_under_cap As a result, the rst three functions would return incorrect information to users, while the last function would potentially cause a denial of service due to an AboveVaultDepositCap error when users try to deposit into vaults. Please see the test_duplicate_vault_tokens test case to reproduce this issue. We classify this issue as minor because only the contract owner can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. Transactions including ProvideLiquidity or WithdrawLiquidity actions may run out of gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "In contracts/credit-manager/src/zap.rs:16 and 55, the provide_liquidity and withdraw_liquidity functions could trigger a large number of sub-messages that may consume the transactions entire gas. Those actions send a message to the zapper contract in order to execute a trade on osmosis and then return liquidity pool tokens and remainder coins to the recipient. To achieve this, they have to send a sub-message to osmosis for the trade and (n+1) ReturnCoin sub-messages - where n is the number of coins. Additionally, for each of the sub-messages, a Bank message is created. Since ProvideLiquidity and WithdrawLiquidity actions are only a part of the transaction, the transaction will also include AssertOneVaultPositionOnly and AssertBelowMaxLTV callbacks, which may consume an excessive amount of gas.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "5. Coin whitelist update may run out of gas", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "the UpdateConfig In contracts/credit-manager/src/update_config.rs:45, message handler clears all the ALLOWED_COINS map entries and then inserts all new coins provided in the message into the map. Since this operation requires iterating on both the stored and the proposed whitelists in order to perform the update, the execution may run out of gas if the number of elements in the whitelist is signicant.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "6. Use of magic numbers decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "Throughout the codebase, hard-coded number literals without context or a description are used. Using such magic numbers goes against best practices as they reduce code readability and maintenance as developers are unable to easily understand their use and may make inconsistent changes across the codebase. Instances of magic numbers are listed below:  contracts/zapper/base/src/contract.rs:113  contracts/zapper/base/src/contract.rs:159  contracts/account-nft/src/contract.rs:36", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. Dependency on unreleased node version", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "The current codebase includes a x for spot price queries from Osmosis GAMMs in packages/chains/src/helpers.rs:73-76. However, at the time of writing, the x made in the node client is still unreleased. We classify this issue as informational as it is not expected that these contracts will be deployed prior to the x being released.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "8. Proposed new minter cannot be removed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "there are no handlers In contracts/account-nft/src/contract.rs:67-77, exposed to remove the proposed_new_minter from the contract storage. This is problematic because if the pending minter does not intend to accept the role, the current minter cannot set the value back to None. We classify this issue as informational because the contract minter can still overwrite the minter back to the current contract addresses, which is equivalent to an empty proposed new minter.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "9. Withdrawing liquidity requires the coin to be whitelisted", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Mars/2023-02-03 Audit Report - Mars Rover Updates v1.0.pdf", "body": "In contracts/credit-manager/src/zap.rs:61 and 79, the liquidity pool token and withdrawn liquidity are validated to be whitelisted. In the delisting logic pull request, one of the changes allows the withdrawal of assets that are not included in the whitelisted assets. However, this is not applied when withdrawing liquidity tokens.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Signatures can be replayed across dierent chains, networks, and contract addresses", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:247-254, the weighted_batch_vote function constructs the message for signature verication without including the chain ID and the contract address. This is problematic because signatures that are intended for dierent chains or contracts can be replayed, potentially bypassing the backend servers signature validation. The impact of the issue depends on what signatures can be replayed. Fundamentally, the following bypasses can happen:  A user can vote and donate to round IDs they are not allowed to.  A user can vote and donate to projects they are not allowed to.  A user can donate a dierent amount to projects they are not allowed to.  A user can vote with a larger vcDORA amount they should not because they did not stake the required amount of DORA tokens. To x this issue, the chain ID and the contract address need to be included to ensure signatures cannot be replayed across dierent blockchains and deployments. Adding the chain ID to the signed message prevents replaying across dierent blockchains, as well as across testnets and mainnet. During the development phase, test messages may be created for the testnet to verify the signature validation works as expected. Without a chain ID added to the message, these messages can be replayed on the mainnet. For example, a signed message with a large vcDORA value used on the testnet can be replayed to the mainnet to manipulate voting results. Additionally, the missing chain ID from signed messages could also cause issues when dierent chains use the same Bech32 prex, such as Terra and Terra Classic. Since both chains use the same prex, a signature that is intended for the former chain can be replayed on the latter chain. This can also aect future chains that go through a hard fork and end up with the same Bech32 prex. Including the contract address as part of the signed message prevents replaying across dierent contracts. If two or more versions of the contracts are deployed, a signature over a message without the contract address can be replayed on another contract.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Signatures can be replayed within one hour before expiration", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:257, the weighted_batch_vote function validates the signature is not expired as long the timestamp has not exceeded an hour. This is problematic because the signature can be replayed multiple times within the one-hour period. Consequently, voters can repeatedly donate the same amount of funds to their projects after the backend server signs the message, manipulating the voting results. We classify this issue as major because replaying a signature requires voters to donate funds to the protocol.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Quadratic funding taxation is not incentive-compatible", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In mechanism design and game theory, the incentive-compatible (IC) mechanism is one that guarantees every participant can achieve the best outcome for themselves by acting according to their true preferences, such as voting for their preferred projects However, the documented Grant Funding Distribution Algorithm (Progressive Tax V2) is not incentive-compatible. This becomes evident by studying two exemplary scenarios involving four projects with distinct values, all of which are far from the mean:  Project #1: the top project.  Project #2: above average.  Project #3: below average.  Project #4: least number of votes. In the rst scenario, no redistribution occurs because the gap is exactly the desired gap. Based on the documentation, if s is greater than 1, then V_max / V_min is already smaller than R, meaning the results will not change. In the second scenario, let's assume it continues from the rst scenario, and the top project receives a marginally small contribution. As documented, this can cause a signicant shift of all projects, including the middle ones, towards the mean/average. Consequently, voters who favor the third or fourth projects will be better o voting for the rst project to trigger a redistribution, thereby manipulating the results instead of voting for their real preferences. Conversely, voters who favor the top and second projects can vote for the project with the least votes to prevent redistribution from taxation. Both cases demonstrate that the voters are not voting for their actual preferred projects. the redistribution is computed o-chain after the admin withdraws the Furthermore, donations. This means voters are incentivized to wait until the last seconds before admin withdrawal because the optimal strategy depends on the votes of all other voters.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Incorrect voting calculation due to hardcoded decimals", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:278, the weighted_batch_vote function declares a hardcoded DECIMALS value of 18, representing the decimals of INJ token and later divided in line 281 as part of the vote calculation. This is problematic because the decimal values will be incorrect for other tokens, such as IBC tokens and token factory denoms. if one of these tokens is selected for the round (see line 149), the vote Consequently, calculation will be incorrect. Moreover, due to the nature of integer division, the votes can round to zero. We classify this issue as minor because it can only be caused by the admins, which is a privileged role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Rounds can be arbitrarily ended by the admins", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "The end_round function in src/contract.rs:371-397 allows admins to update a round to the RoundStatus::Finished status. However, no conditions are being enforced before ending the round. Consequently, admins can maliciously close a round when the votes are in favor of their preferred option or accidentally end a round earlier than intended. We classify this issue as minor because it can only be caused by an admin, which is a privileged role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Lack of input validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In several instances of the codebase, validations are not performed suciently:  In src/contract.rs:45, the admins vector is not validated to have at least one entry. If the vector is empty, there will be no admins controlling the contract, locking the main functionalities of the protocol and rendering it unusable. Consider returning an error if the vector is empty.  In src/contract.rs:149, the donation_denom string is not validated as an existing native token. This would cause the weighted_batch_vote function to fail in line 325, preventing users from voting on projects. Consider querying the total supply of the denom to ensure it exists.  In src/contract.rs:150, misconguring a voting_unit of zero causes all votes computed to become zero regardless of the donation amount, as seen in line 281. Consider returning an error if the value is zero.  In src/contract.rs:156 and 415, the public key is not validated to have a length of 65, which causes the public key comparison validation to fail in line 262. Consider validating pubkey.len() to be 65.  In src/contract.rs:270, no validation ensures the project_ids and amounts vectors have equal lengths and are not empty, which causes an out-of-bounds and InvalidAmount error, respectively. Consider returning an error early if this is the case.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Empty public keys congured allow users to inate the vcDORA amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:243, the weighted_batch_vote function validates the vcDORA amount signed by the backend server if the round.pubkey length is not zero. This validation is important because the vcDORA amount represents the governance credit issued to DORA token stakers, which is computed and veried as part of the message signature in line 261. In this case, the signature The issue occurs when the round.pubkey is set to zero. validation will not be performed, allowing voters to specify a large value of vcDORA to inate the area_diff calculation in line 312, ultimately aecting the quadratic funding result computed o-chain. Consequently, voters can manipulate voting results. This can happen due to a misconguration or ill-intended admin that sets the public key to an empty value because there is no proper validation in place, as detailed in the Lack of input validation issue. We classify this issue as minor because it can only be caused by an admin, which is a privileged role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. Updating the public key for completed voting rounds causes incorrect state", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:415, the set_pubkey function updates the public key for a voting round. However, no validation ensures the voting round is RoundStatus::Voting. If the admin updates the public key to a dierent value for RoundStatus::Finished and RoundStatus::Withdrawn, users who query the voting rounds (see line 72) will be misled that the new public key is used during the actual voting period, which is incorrect. We classify this issue as minor because it can only be caused by an admin, which is a privileged role.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Contracts should implement dierent admin roles and admin removals", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "The contracts within the scope of this audit allow multiple admins that can add more admins, and all admins have the same privileges. It is best practice to separate admin functionality into dierent roles with limited privileges. Additionally, there is no entry point to remove admins. Consequently, there is a risk that old admin accounts get compromised when an admin is no longer on duty for the protocol, potentially leading to a loss of funds.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. No entry point for banning projects", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "the   ProjectStatus enum implements the OK and Banned In src/state.rs:15, variants. However, there is no entry point for the admins to update the project status to Banned. The weighted_batch_vote function also does not ensure the project is not banned when voting. Consequently, projects that are found malicious cannot be banned and can still be voted on as well as donated to.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Zero votes round cannot be marked as withdrawn", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:450, the withdraw function tries to distribute all donation funds to the admin for a specic round. An edge case is that the round.total_amounts variable will be zero, causing the transaction to fail because Cosmos SDK does not allow zero-amount native token transfers. there are no donations, if Consequently, the voting round cannot be updated to RoundStatus::Withdrawn status, causing it to always remain at RoundStatus::Finished status.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. Centralization risk when withdrawing project donations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:449, the withdraw function distributes the donations of funded projects to the admin. This is a centralization risk, particularly because there can be multiple admins that cannot be removed. It is best practice to send funds either to a custodian contract or to the project owner's address directly.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Usage of magic numbers decreases maintainability", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "Throughout the codebase, hard-coded number literals without context or a description are used. Using such magic numbers goes against best practices as they reduce code readability and maintenance as developers cannot understand their use easily and may make inconsistent changes across the codebase. Instances of magic numbers are listed below:  src/contract.rs:257, 266, 308-309, 312  src/helper.rs:14, 20", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Overpaying funds will cause donations to fail", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/contract.rs:325-333, the weighted_batch_vote function ensures the voters supply the exact amount of funds according to their votes. Otherwise, the transaction will revert with an error. This may decrease the user experience.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Authorization check can be modularized into a function", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "contracts within as The src/contract.rs:106-110. Although no issues with access control have been found, using a single assert function to validate authorization reduces potential risks while improving the codebases readability and maintainability. custom access implement controls, scope such", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "16. Limitations on base two logarithm implementation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "In src/helper.rs:2-25, the log2_u64_with_decimal function implements a custom version of a base two logarithm. However, there are issues with its current implementation:  The function returns 0 for the base 0 logarithm, which is incorrect because the result run reproduce please value. this, To should an log2_u64_with_decimal(0). undened be  The function does not correctly handle all values of u64. An overow error will trigger during multiplication if a large value is provided. To reproduce this error, please run log2_u64_with_decimal(7259549383510990226).", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "17. Small donations will not increase user votes due to rounding", "html_url": "https://github.com/oak-security/audit-reports/tree/master/DoraHacks/2024-03-04 Audit Report - DoraHacks Quadratic Grant Injective v1.0.pdf", "body": "the weighted_batch_vote function computes votes by In src/contract.rs:281, multiplying the donation amount by the voting unit and dividing the result by the decimal values. The voting unit is used to limit the minimum unit allowed for voting. However, if the user donates less than the minimum voting amount, the votes computed will be zero due to rounding, causing a zero increase in the project and user votes.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Setting total supply incorrectly when registering a beta invitation will lead to failures when claiming and distributing tokens", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:203-209 of the beta-game-launcher repository, the total supply value is not validated to be higher than the total required amount as seen in lines 398-407 and lines 526-535. If the total supply value is set to be lower than required, it would cause claim, token_distribute, or both to fail due to minting capacity reaching the maximum. This will cause users to be unable to claim their shares of game and fan tokens. Likewise, the admin would be unable to distribute main and game tokens to recipients, causing a loss of funds for the users and recipients.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Updating main token address may cause state inconsistency", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:146-148 of the beta-game-launcher repository, the address of the main token can be updated to a dierent value. If the main token address is updated while the contract has an existing config.main_token value, it would cause an inconsistency between the contracts state and the actual token balance held in the contract. As a result, this would cause a series of problems such as users being unable to withdraw their tokens due to insucient contract balance.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Decimals are not accounted for in calculation of main_token_amount", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "the beta-game-launcher repository, In contract/src/execute.rs:300 of the buy_amount is multiplied by the invitation_price to ensure that sucient main_token and main_token is invitation_price can have dierent numbers of decimal places, the calculation may be performed incorrectly. This could lead to a user being able to purchase at a lower price than expected. supplied. However, the game_token, as", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. Equal value of sold amount and soft cap causes inconsistent evaluation of condition", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:371-373 of the beta-game-launcher repository, the claim function would evaluate passed as true only if the sold amount is higher than the soft cap value. This is inconsistent with the token_distribute functionality as seen in lines 508-510 since the execution would continue if the sold amount is equal to or greater than the soft cap value. In an edge case where both the sold amount and the soft cap value are equal, the claim function would determine the invitation as a failure but the token_distribute function would determine the invitation as a success. In a worst-case scenario, the users funds would be incorrectly distributed to the recipients which might cause slow users unable to have their funds refunded back due to insucient balance held in the contract.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Missing validation on main_token_distributions during update cong", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:154-156 of the beta-game-launcher repository, the distribution values in main_token_distributions are not validated as seen in lines 27-36. This means that theres a possibility that the sum of the distribution rate can be over 100%, potentially causing the token_distribute function in lines 515-524 to either distribute more funds than intended or fail due to insucient funds. We consider this to be a minor issue since it can only be caused by the owner.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. Duplicate accounts creation would inate token total supply", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In src/contract.rs:63-71 of the cw20 repository, duplicate accounts are not veried when creating initial accounts during the contract instantiation phase. If the same account address is passed twice in create_accounts, the accounts balance would be overwritten via BALANCES.save but total_supply would still record the balance amount of both. As a result, the tokens total supply would be inated. We consider this to be a minor issue since it can only be caused by the owner.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "7. Owner and main_token addresses are not validated during instantiation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:20 of the beta-game-launcher repository, during the handling of the Instantiate message, owner and main_token addresses are not validated. This may cause the contract to be initialized with invalid values. This issue is also present during the cong update phase in lines 146-152.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "8. cw20 is based on a legacy version of the CW20 standard", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In the cw20 repository there is a legacy implementation of cw20 token. As stated in that implementation repository :1 This contract is modied for the purpose of migration from a Columbus-4 cw20 token contract to Columbus-5. Using the ocial version of cw20 is strongly recommended for other usages Unlike the latest version, the legacy version does not support the marketing eld which is required in contract/src/execute.rs in lines 254-277. As a result, using the legacy version of CW20 token code id would cause register_beta_invitation functionality to fail due to the dierences between the latest CW20 contract token interface and the one used in this contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Incorrect contract name in cw20", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In src/contract.rs:21 of the cw20 contract, the CONTRACT_NAME is set equal to crates.io:cw20-base. This is the template contract name of the CW20 contract.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Centralization of NFT unlocking", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs:95-98 of the lock-nft repository, only the owner of the contract can unlock users NFTs and return them back to them. If the owner key is compromised, the remaining locked NFTs in the contract will be inaccessible.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "11. Admin operations implement custom logic", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In all contracts there is the concept of Admin, which is an account that has exclusive permissions to execute some messages. As there is already a battle-tested implementation of this that takes care of validation and its ready out of the box, it should be better to use that one instead of using custom logic.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "12. No error message for query of non-existent token", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/query.rs:28-35 of the lock-nft repository, users can query the owner of a token using an nft_address and token_id as the key. In the case that there is no token with such a key an empty string is returned as the owner. This leads to a worsened user experience as incorrect queries cannot be easily diagnosed.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "13. Overow checks not enabled for release prole", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "The following packages and contracts do not enable overflow-checks for the release prole:  lock-nft/contract/cargo.toml  beta-game-launcher/contract/cargo.toml While enabled implicitly through the workspace manifest, a future refactoring might break this assumption.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "14. Canonical address transformations are inecient", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "While previously recommended as a best practice, usage of canonical addresses for storage is no longer encouraged. The background is that canonical addresses are no longer stored in a canonical Additionally, the codebase is more complicated with address transformations. format, so the transformation just adds overhead without much benet.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "15. Typographical errors found in codebase", "html_url": "https://github.com/oak-security/audit-reports/tree/master/C2X/2022-05-09 Audit Report - C2X v1.0.pdf", "body": "In contract/src/execute.rs of the beta-game-launcher repository, there were several typographical errors found in lines 35-301. Specically, the word queal should be replaced with equal while the word worng should be replaced with wrong.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Excess liquidity pool tokens are never refunded to the user", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/vault/src/contract.rs:1084, excess liquidity pool tokens are refunded to the caller. However, the recipient should be cw20_msg.sender instead of info.sender, which represents the liquidity pool token itself instead of the original sender. Consequently, excess tokens will be transferred to the liquidity token itself, causing a loss of funds for the sender.", "labels": ["Oak Security", "Severity: High"]}, {"title": "2. Malicious users can prevent stakers from withdrawing LP tokens and rewards", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "add_reward_schedule The in contracts/multi_staking/src/contract.rs:183 allows any user to add a rewards schedule with any asset. This is problematic because a user may add a malicious token contract that returns an error when its Transfer message is invoked, eectively blocking users from being able to withdraw their funds. function In addition, this function also presents the opportunity for anyone to increase the size of LP_GLOBAL_STATE and REWARD_SCHEDULES to the point where they will return out-of-gas errors. For example, an attacker can create many CW20 tokens and send them as reward assets, causing iterations to fail due to the execution limit. Iterations that will fail can be found in the following locations:  contracts/multi_staking/src/contract.rs:295  contracts/multi_staking/src/contract.rs:357  contracts/multi_staking/src/contract.rs:403  contracts/multi_staking/src/contract.rs:570  contracts/multi_staking/src/contract.rs:615 We classify this issue as critical because both attacks would prevent users from withdrawing their liquidity pool tokens and rewards.", "labels": ["Oak Security", "Severity: High"]}, {"title": "3. Numerical non-convergence might lead to erroneous computations", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "the non-convergence in of The contracts/stable_5pool/src/math.rs:45-70 is not handled. A loop carries out up to 32 iterations over an approximating function, and after the iterations, the computations are carried out with the last approximating value. Consequently, the value might not be at the desired precision, which might cause erroneous computations. Furthermore, this computation is a sub-computation of another solver (calc_y in line 83), which might also lead to a situation where two approximated values of a proposed d lead to the same value in y and an erroneous convergence of calc_y. solver", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "4. AfterJoinResponse does not return fee value", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "The in contracts/vault/src/contract.rs:749-775 includes logic to handle a fee returned execute_join_pool function in the AfterJoinResponse. Each of the current pools returns None for this value during OnJoinPool, so currently, the logic is unused. This will result in the collected fees not being sent to the protocol fee collector or the developer fee collector.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "5. Funds in the keeper contract cannot be withdrawn", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/keeper/src/contract.rs:70-81, there is no functionality for the vault owner to withdraw funds from the keeper contract. Funds will be sent to the keeper contract as part of the protocol fees. This means that the vault owner cannot withdraw collected protocol fees.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "6. Owner address is not validated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/keeper/src/contract.rs:45, msg.owner is not validated before it is saved. If the address is incorrectly set and that goes unnoticed, it could result in a loss of funds once the keeper contract begins to receive funds.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "7. Duplicate scaling factors cause ineective updates", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/pools/stable_pool/src/contract.rs:74-88, the provided scaling factors are validated to ensure the asset information exists in the pool. However, no validation is performed to ensure duplicate assets are not provided. This is problematic because the update_scaling_factor function can only update the rst index, as seen in line 287. In contrast, the scaling_factors function returns the last value (see a is the old scaling contracts/pools/stable_pool/src/state.rs:57). As a result, factor the used StablePoolUpdateParams::UpdateScalingFactor message. duplicated updated despite being asset there still will via be if Please see the test_ineffective_scaling_factor_update test case to reproduce the issue. We classify this issue as major since it prevents the scaling factor manager from updating the congurations correctly.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "8. Consider validating burn shares are greater than zero", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/stable_5pool/src/contract.rs:603-621, errors that occur inside the imbalanced_withdraw function are silenced, causing the shares to burn to become the a message zero. imbalanced_withdraw functionality to withdraw funds from the pool without burning the required tokens. attacker causes inside errors send that can An Due to the fact that no validation exists to ensure that the burn amount is not zero, attackers cannot exploit this like the previous issue due to the inability to burn 0 liquidity pool tokens in contracts/vault/src/contract.rs:1073. However, a code refactor might change this, such as adding an if statement only to burn shares if its higher than zero. Please see the burn_funds_free_asset test case in the appendix to reproduce this issue.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "9. Users may receive unexpected mint amounts because the lp_to_mint parameter is unused", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "The execute_join_pool function in contracts/vault/src/contract.rs:694 provides the optional parameter of lp_to_mint, which allows the caller to specify the amount of LP tokens they want to get against their provided assets. This value is silently the weighted pool's ignored types. for in query_on_join_pool contracts/weighted_pool/src/contract.rs:381 ignores the _mint_amount parameter entirely and performs no checks to validate that it is met. existing pool example, function For the all This issue is found in all of the following pool types:  stable5 - query_on_join_pool - contracts/stable_5pool/src/contract.rs:392  weighted - query_on_join_pool - contracts/weighted_pool/src/contract.rs:381 The lp_to_mint is currently an unused parameter that should either be removed or enforced. The current implementation can result in the user receiving an amount of LP tokens that were not expected.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "10. Consider verifying the developers address to be valid", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/vault/src/contract.rs:81-82, the developers address inside the fee info is not checked to be a valid address. This is problematic because the developers address is used to update the pools conguration in line 329. Other than that, executions that send the fee to the developer would fail due to an invalid address specied. We classify this issue as minor since only the admin can cause it.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "11. Users can send more liquidity pool tokens than specied", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/vault/src:228, the second condition veries that the specied burn amount must be higher than the actual amount transferred. This is problematic because if a user sent extra liquidity pool tokens, the tokens would be stuck in the contract. For example, Alice can send 500 tokens but may only specify the burn amount as 300. As a result, 200 tokens are not refunded back to Alice due to the refund amount being determined by the burn_amount. We classify this as a minor issue since it can only be caused by user misconguration.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "12. Users can miscongure weighted pool conguration", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "During the contract initialization process for the weighted pool, no validation ensures the provided WeightedParams in contracts/weighted_pool/src/contract.rs:66 is valid with the asset information. The current implementation allows users to congure duplicate weighted assets, which causes incorrect nal weights. Other than that, the contract accepts a zero weight amount, causing a division by zero panic in contracts/weighted_pool/src/utils.rs:196.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "13. Excess native funds sent are lost", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "The execute_join_pool function in contracts/vault/src/contract.rs:820 calls the find_sent_native_token_balance function to get the amount of a specied denom if the pool being joined includes native funds. This check ensures that info.funds contains the specied denom, but the execute_join_pool function should also ensure that info.funds does not contain any unexpected denoms. Otherwise those excess funds would be lost.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "14. Owner address validation is not performed", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "The instantiate function in contracts/multi_staking/src/contract.rs:43 does not validate msg.owner. An address validation should occur before an address value is stored in the contracts cong. If this eld were improperly set to an invalid address, then the contract would lose all of its owner functionality. Similarly, in is contracts/multi_staking/src/contract.rs:255 before the value is passed to the bond function. beneficiary validated not", "labels": ["Oak Security", "Severity: Low"]}, {"title": "15. Multihop swap lacking multiswap_request validation", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "execute_multihop_swap in The contracts/router/src/contract.rs:117 does not perform any validation or pre-processing on the user-supplied vector of HopSwapRequest. The user-supplied least minimal validation before the swapping callback multiswap routes should have at sequence is initiated. function", "labels": ["Oak Security", "Severity: Low"]}, {"title": "16. Ended reward schedules consume unnecessary computation power", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/multi_staking/src/contract.rs:295-301, the compute_reward function takes all reward schedules and skips the ones that have ended. This causes unnecessary gas consumption as ended reward schedules do not need to be processed. Suppose a scenario where the number of nished reward schedules grows too large such that an out-of-gas error would occur in the compute_reward function, preventing users from withdrawing liquidity pool tokens and rewards.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "17. UnclaimedRewards query returns incorrect value", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "the last_distributed In contracts/multi_staking/src/contract.rs:628, value defaults to the supplied block_time value if the ASSET_LP_REWARD_STATE does not exist. This is incorrect because the update_staking_rewards function defaults the value to zero, as seen in contracts/multi_staking/src/contract.rs:467. Consequently, the UnclaimedRewards query will return a lower unclaimed rewards value than it should. Please see the test_incorrect_query_unclaimed_rewards test case in the appendix to reproduce this issue. We classify this issue as minor since it only aects the UnclaimedRewards query return value.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "18. Removing and adding LP tokens might run out of gas if too many tokens are registered", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/multi_staking/src/contract.rs:144-180, the allow_lp_token and remove_lp_token_from_allowed_list functions might run out of gas if too many LP tokens are registered. As a consequence, removing and adding LP tokens will become impossible. Only a migration of the contract allows recovery from this issue. We classify this issue as minor since it can only be caused by an admin.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "19. Unlocking liquidity pool tokens too frequently will prevent users from claiming them", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Dexter/2023-03-15 Audit Report - Dexter v1.0.pdf", "body": "In contracts/multi_staking/src/contract.rs:499-515, the unlock function iterates over all users unlocking positions and lters them. If a user requests to unbond their liquidity pool tokens too many times, the USER_LP_TOKEN_LOCKS for the specic user will grow too large to be processed, causing an out-of-gas error eventually. We classify this issue as minor because it is unlikely that users will unbond their liquidity pool tokens to an amount high enough to cause computation limit issues.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Sequence is not reset when establishing a new channel", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "packages/polytone/src/callback.rs:90-117, In request_callback function reads the latest value stored in the SEQ storage and saves it as the callback for the incoming packet sequence. However, the SEQ storage does not reset the sequence back to 1 when the old channel is closed via ibc_channel_close. the Suppose the old channel is closed and a new channel is established. The packet sequence will start as 1. Since the SEQ storage records the old channel's sequence value, the CALLBACKS storage will save the pending callback with an incorrect seq value. As a result, pending callbacks will never be executed properly by the intended receiver, causing CALLBACKS not to be handled and LOCAL_TO_REMOTE_ACCOUNT not to save the request initializer's remote proxy contract address.", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "2. Controllers could instantiate proxies and execute messages on the receiver chain on behalf of other users without their consent", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "on_behalf_of The contracts/note/src/msg.rs:61 allows messages on the receiver chain on behalf of other users. attribute the of Execute struct controlled note contracts dened in to execute However, this is possible without the targeted user's consent allowing the controller account to impersonate unaware users on the controlled chains. While this cannot directly aect targeted users and their funds, controller compromise their reputation. it could allow a malicious to perform phishing and fraud campaigns or impersonate users in order to", "labels": ["Oak Security", "Severity: Medium"]}, {"title": "3. Encoding extensions are not enforced during handshake", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "The Polytone protocol denes encoding extensions in order to ensure that connected chains exchange data with an agreed format. To do so, in packages/polytone/src/handshake/note.rs:35, the protocol requires that the voice contracts extensions are a subset of the note contracts. However, encodings, contracts/note/src/ibc.rs:26 and 41. the implementation, the exchanges instead of exchanging the underlying chain-supported in hardcoded JSON-CosmosMsg dened string This would cause the mentioned validation check during the handshake to succeed without actually enforcing the extensions subset requirement.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "4. The proxy contract does not return the correct index of an errored message", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "In contracts/proxy/src/contract.rs:78, returns an error containing the index of the errored message. the proxy contracts reply handler However, it returns the cardinality of submitted messages instead of the actual index. This would cause the propagation of an error with incorrect information leading to potentially wrong actions in the callback.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. PROXY_CODE_ID and BLOCK_MAX_GAS are not validated", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "When instantiating the note and voice contracts, no validations are performed to validate the PROXY_CODE_ID and BLOCK_MAX_GAS values. This is problematic because misconguring the PROXY_CODE_ID to zero would cause the proxy instantiation to fail in contracts/voice/src/contract.rs:93. As for BLOCK_MAX_GAS value, it should be validated to be higher than ACK_GAS_NEEDED and ERR_GAS_NEEDED to prevent underows in contracts/voice/src/ibc.rs:102 and contracts/note/src/ibc.rs:102 and 123. classify We MigrateMsg::WithUpdate message to recover from these situations. as minor because the contract issue this admin can use the", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. The note contract cannot handle more than 2^64-1 messages", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Polytone/2023-06-05 Audit Report - Polytone v1.0.pdf", "body": "In packages/polytone/src/callback.rs:97, incremented and saved. the message sequence SEQ is However, since it is stored as a u64, the increment will overow, and panic because of the overflow-check in place in the Cargo.toml, after the execution of 2^64-1 messages. This would prevent users from interacting with the contract and consequently lose access to their proxy accounts in the controlled chain.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "1. Tight coupling of the Mint and Burn MsgServer and Keeper functions", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2024-01-17 Audit Report - Noble tokenfactory Changes and fiattokenfactory v1.0.pdf", "body": "and Mint Burn The and in keeper/msg_server_burn.go in both the tokenfactory and fiattokenfactory modules were refactored by extracting the logic from the MsgServer functions to separate Keeper functions to expose them to other Cosmos SDK modules within the same chain. keeper/msg_server_mint.go functions The original MsgServer function signatures have been reused. Specically, the MsgMint and MsgBurn message types are used as parameters. Moreover, the keeper functions return the same response types as the MsgServer functions. it is considered best practice to keep the MsgServer and Keeper functions However, decoupled by using explicit function parameters and appropriate return types. This allows for more exibility in the future, for example, if the MsgMint message or MsgMintResponse return type needs to be refactored.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "2. Misleading simulation package import identier for the fiattokenfactory module", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Noble/2024-01-17 Audit Report - Noble tokenfactory Changes and fiattokenfactory v1.0.pdf", "body": "In x/fiattokenfactory/module_simulation.go:15, the simulation package is imported from the fiattokenfactory module with the tokenfactorysimulation identier. However, this identier is misleading, as the simulation package is not part of the tokenfactory module but rather the fiattokenfactory module.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Decimal places inconsistency between deposit and withdrawals", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "Amounts are interpreted dierently in deposit and withdrawal operations. The underlying token contract uses 18 decimal places. However, deposit and withdrawal requests use 0 and 18 decimal places for the amounts specied. This may lead to confusion for integrators which may cause bugs. In addition, the total amount is limited to 50 digits, whilst the underlying token contract technically allows for 78 digit numbers (in decimal representation). This is unlikely to cause any issue in practice since such large numbers will not occur.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "2. Number of blocks required for deposits to be conrmed is relatively small", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "The smart contract integration conrms events through event ltering transfer events. The constant REQUIRED_NUMBER_OF_BLOCK_CONFIRMATIONS is used to congure a limit of block conrmations that need to have occurred before such a deposit is considered conrmed. By default this is set to 6 block conrmations, This number is relatively small and corresponds to the number of conrmations usually used in Bitcoin. In Ethereum higher numbers are usually recommended, due to the lower block time. Major exchanges require 20 or even 50 blocks.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "3. Ethereum address elds can be longer than required", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "The character limit specied for Ethereum addresses in ethereum/models is 200 characters. However, an Ethereum address expressed as a string in its standard format is 42 characters long (including leading 0x). Whilst this is not a security list, allowing the API to store and receive longer addresses could cause confusion or make the system more error-prone by allowing extra data to be received.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "4. Leaked API keys in source code", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "Several les are found to contain API keys and secrets, namely: - - - - .gitlab/gitlab_runner/runner1-cong/cong-template.toml avbox/app/routes.py backend/cong/settings/common.py backend/cong/settings/dev.py Depending on the API key usage and validity, a malicious user can abuse a leaked API key to cause damage to the overall project.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "5. Websocket connection can be initiated by anyone", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "When initiating a WebSocket connection, there is no CSRF protection implemented. A malicious user can start a WebSocket connection and send arbitrary WebSocket messages as the victim. The impact of this issue depends on the implementation of the WebSocket itself. This is unlikely to be exploited since the SameSite Cookies which are set to Lax are preventing it. However, theres still a risk for users that use outdated browsers.", "labels": ["Oak Security", "Severity: Low"]}, {"title": "6. backend/apps/common/zoom/client.py: Meeting duration always calculated as zero", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "In line 61 the following expression is used to calculate a meeting duration: duration = event.time_slot.end_time - event.time_slot.end_time This will always result in zero.", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "7. backend/apps/pages/views.py: context key INVOICE_STATUS set twice", "html_url": "https://github.com/oak-security/audit-reports/tree/master/BrainTrust/Audit Report - BrainTrust Application.pdf", "body": "The eld is set twice (line 157 and line 188).", "labels": ["Oak Security", "Severity: Informational"]}, {"title": "1. Gas is not consumed if the transaction returns an error", "html_url": "https://github.com/oak-security/audit-reports/tree/master/Comdex/2022-11-23 Audit Report - Comdex Lend and Liquidation Modules v1.0.pdf", "body": "The ConsumeGas function is used in the lend module to increase the GasMeters consumed gas by a set amount. Within the Comdex appchain, these amounts are pre-dened based on anticipated values. This method is problematic because gas is only consumed after successful execution and not in the event of an error. Even if the function returns an error, computation still occurs and gas should be consumed. The ConsumeGas function is called in lines:  x/lend/keeper/msg_server.go:30  x/lend/keeper/msg_server.go:44  x/lend/keeper/msg_server.go:58  x/lend/keeper/msg_server.go:72  x/lend/keeper/msg_server.go:84  x/lend/keeper/msg_server.go:96  x/lend/keeper/msg_server.go:108  x/lend/keeper/msg_server.go:121  x/lend/keeper/msg_server.go:135  x/lend/keeper/msg_server.go:147  x/lend/keeper/msg_server.go:176  x/lend/keeper/msg_server.go:190 In these occurrences, the predened gas amount is not consumed in the event of an error because the ConsumeGas invocations are located at the end of the transaction execution. Consequently, a malicious actor is able to spam transactions that trigger errors in the middle of the execution without being charged the dened gas fees.", "labels": ["Oak Security", "Severity: High"]}]