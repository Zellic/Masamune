[{"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/50", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor disputed", "old-submission-method"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/47", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-09-party-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/28", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor acknowledged", "edited-by-warden"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/22", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor acknowledged", "edited-by-warden"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/19", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor acknowledged"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "ETH locked forever, users are forced to buy because they cannot withdraw", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/15", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "sponsor disputed", "edited-by-warden"], "target": "2022-09-party-findings", "body": "ETH locked forever, users are forced to buy because they cannot withdraw"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/14", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor acknowledged"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/12", "labels": ["bug", "G (Gas Optimization)", "sponsor acknowledged"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/8", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor disputed"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/6", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor disputed"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/4", "labels": ["bug", "low quality report", "QA (Quality Assurance)", "sponsor disputed", "edited-by-warden"], "target": "2022-09-party-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/3", "labels": ["bug", "G (Gas Optimization)", "low quality report", "sponsor disputed", "edited-by-warden"], "target": "2022-09-party-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-09-party-findings/issues/1", "labels": [], "target": "2022-09-party-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/280", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/279", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/272", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/269", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/266", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/265", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/263", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/262", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/261", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/260", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/259", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/258", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/257", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/255", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/254", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/252", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/251", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/248", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/247", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/245", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/238", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/237", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/236", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "RariMerkleRedeemer's signAndClaim lacks hasNotSigned modifier", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/233", "labels": ["bug", "disagree with severity", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "RariMerkleRedeemer's signAndClaim lacks hasNotSigned modifier"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/225", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "Forcing users to receive all tokens could cause issues with future redemption", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/224", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-tribe-findings", "body": "Forcing users to receive all tokens could cause issues with future redemption"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/222", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/221", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/220", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/219", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/216", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "In TribeRedeemer.sol, _tokensReceived array can have duplicate token as it is array. This can happen by user input error while deploying the contract.", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-tribe-findings", "body": "In TribeRedeemer.sol, _tokensReceived array can have duplicate token as it is array. This can happen by user input error while deploying the contract."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/209", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/206", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/204", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/200", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/199", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/196", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/191", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/185", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/180", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/173", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/171", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/164", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/159", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/156", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "A malicious user can send tokens to the TribeRedeemer contract to make the redeem function work, and other users may lose assets as a result", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/145", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-09-tribe-findings", "body": "A malicious user can send tokens to the TribeRedeemer contract to make the redeem function work, and other users may lose assets as a result"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/139", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/138", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/135", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/128", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/126", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/124", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/122", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/121", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/119", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "TribeRedeemer will start redeeming incorrectly if someone transfer redeem tokens directly to it", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/114", "labels": ["bug", "2 (Med Risk)", "sponsor disputed"], "target": "2022-09-tribe-findings", "body": "TribeRedeemer will start redeeming incorrectly if someone transfer redeem tokens directly to it"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/112", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/108", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "In RariMerkleRedeemer, function signAndClaim() doesn't have hasNotSigned and has different behavior than sign() and signAndClaimAndRedeem() ", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/107", "labels": ["bug", "duplicate", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-09-tribe-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/RariMerkleRedeemer.sol#L88-L98 https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/RariMerkleRedeemer.sol#L108-L118 https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/RariMerkleRedeemer.sol#L48-L50   # Vulnerability details  ## Impact All three functions `signAndClaim()`, `sign()` and `signAndClaimAndRedeem()` are signing but `signAndClaim()` has different modifier than the other two. function `signAndClaim()` doesn't have `hasNotSigned` modifier and it's callable even when the users already signed. this different access level and behavior can cause other security issues. for example here it's possible for user to run sign multiple times.  ## Proof of Concept This is `signAndClaim()`, `sign()` and `signAndClaimAndRedeem()` codes in `RariMerkleRedeemer`: ```     function sign(bytes calldata signature) external override hasNotSigned nonReentrant {         _sign(signature);     }      function signAndClaim(         bytes calldata signature,         address[] calldata cTokens,         uint256[] calldata amounts,         bytes32[][] calldata merkleProofs     ) external override nonReentrant {         // both sign and claim/multiclaim will revert on invalid signatures/proofs         _sign(signature);         _multiClaim(cTokens, amounts, merkleProofs);     }      function signAndClaimAndRedeem(         bytes calldata signature,         address[] calldata cTokens,         uint256[] calldata amountsToClaim,         uint256[] calldata amountsToRedeem,         bytes32[][] calldata merkleProofs     ) external override hasNotSigned nonReentrant {         _sign(signature);         _multiClaim(cTokens, amountsToClaim, merkleProofs);         _multiRedeem(cTokens, amountsToRedeem);     } ``` As you can see `signAndClaimAndRedeem()` and `sign()` has `hasNotSigned ` modifier but `signAndClaim` doesn't have that modifier.  ## Tools Used VIM  ## Recommended Mitigation Steps add same modifier for `signAndClaimAndRedeem()` too."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/104", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/103", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/101", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/92", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/84", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/79", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/78", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/76", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/74", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/73", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/58", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/53", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "Missing `hasNotSigned` modifier in `signAndClaim`", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/51", "labels": ["bug", "disagree with severity", "high quality report", "primary issue", "QA (Quality Assurance)", "sponsor confirmed", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/RariMerkleRedeemer.sol#L93   # Vulnerability details  ## Impact [This](https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/MultiMerkleRedeemer.sol#L41) comment and existence of the [`testCannotSignTwice`](https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/test/integration/shutdown/fuse/rariMerkleRedeemer.t.sol#L453) test case makes it clear that intended behavior of the protocol is to prevent users from submitting a signature of `MESSAGE_HASH` twice.  However, any user can circumvent this and overwrite once provided signature with another valid one.  ## Proof of Concept Add the following test case to [this file](https://github.com/code-423n4/2022-09-tribe/blob/main/contracts/test/integration/shutdown/fuse/rariMerkleRedeemer.t.sol) and run integration tests:  ```     function testCanSignTwice() public {         vm.startPrank(addresses[0]);          IERC20(cToken0).approve(address(redeemer), 100_000_000e18);         (uint8 v0, bytes32 r0, bytes32 s0) = vm.sign(keys[0], redeemer.MESSAGE_HASH());          bytes memory signature0 = bytes.concat(r0, s0, bytes1(v0));          redeemer.sign(signature0);          address[] memory cTokens;         uint256[] memory amounts;         bytes32[][] memory merkleProofs;          // vm.expectRevert(\"User has already signed\");         redeemer.signAndClaim(signature0, cTokens, amounts, merkleProofs);          vm.stopPrank();     } ``` As we can see, `signAndClaim` doesn't revert despite non-zero `userSignatures[msg.sender]` because of the missing `hasNotSigned` modifier. Moreover, when arguments passed to `redeemer.signAndClaim` are a signature and empty lists, then this function effectively behaves just like `_sign`.   ## Tools Used Foundry  ## Recommended Mitigation Steps Add missing `hasNotSigned` modifier to the `redeemer.signAndClaim`  function."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/49", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/48", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/45", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/44", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/43", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/41", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/39", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/32", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/31", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "missing  hasNotSigned modifier", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/27", "labels": ["bug", "duplicate", "disagree with severity", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-09-tribe-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-tribe/blob/769b0586b4975270b669d7d1581aa5672d6999d5/contracts/shutdown/fuse/RariMerkleRedeemer.sol#L88   # Vulnerability details  ## Impact signing more than once  ## Proof of Concept Other sign functions has hasSigned modifier  ## Tools Used  ## Recommended Mitigation Steps function signAndClaim(         bytes calldata signature,         address[] calldata cTokens,         uint256[] calldata amounts,         bytes32[][] calldata merkleProofs     ) external override **hasSigned** nonReentrant  "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/26", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/22", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/21", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/20", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/14", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/8", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/7", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/6", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/3", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-tribe-findings", "body": "QA Report"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-09-tribe-findings/issues/1", "labels": [], "target": "2022-09-tribe-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/507", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/502", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/500", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/497", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/492", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/489", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/488", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/486", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "`timewindow` can be changed unexpectedly that blocks users from calling `deposit` function", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/483", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "`timewindow` can be changed unexpectedly that blocks users from calling `deposit` function"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/478", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/474", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/472", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/470", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/468", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/466", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/463", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/454", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/452", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/451", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "User fund lost because they can't withdraw() their funds before epoch startTime and they have to stuck in positions that become unprofitable even when epoch is not started", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/447", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "User fund lost because they can't withdraw() their funds before epoch startTime and they have to stuck in positions that become unprofitable even when epoch is not started"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/443", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/442", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/437", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/436", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/435", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Griefing attack on the Vaults is possible, withdrawing the winning side stakes", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/434", "labels": ["bug", "3 (High Risk)", "high quality report", "sponsor confirmed", "old-submission-method", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/SemiFungibleVault.sol#L110-L119 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203-L218   # Vulnerability details  *Anyone* can withdraw to `receiver` once the `receiver` is `isApprovedForAll(owner, receiver)`. The funds will be sent to `receiver`, but it will happen whenever an arbitrary `msg.sender` wants. The only precondition is the presence of any approvals.  This can be easily used to sabotage the system as a whole. Say there are two depositors in the hedge Vault, Bob and David, both trust each other and approved each other. Mike the attacker observing the coming end of epoch where no depeg happened, calls the withdraw() for both Bob and David in the last block of the epoch. Mike gained nothing, while both Bob and David lost the payoff that was guaranteed for them at this point.  Setting the severity to be high as this can be routinely used to sabotage the y2k users, both risk and hedge, depriving them from the payouts whenever they happen to be on the winning side. Usual attackers here can be the users from the another side, risk users attacking hedge vault, and vice versa.  ## Proof of Concept  isApprovedForAll() in withdrawal functions checks the `receiver` to be approved, not the caller.  SemiFungibleVault's withdraw:  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/SemiFungibleVault.sol#L110-L119  ```solidity     function withdraw(         uint256 id,         uint256 assets,         address receiver,         address owner     ) external virtual returns (uint256 shares) {         require(             msg.sender == owner || isApprovedForAll(owner, receiver),             \"Only owner can withdraw, or owner has approved receiver for all\"         ); ```  Vault's withdraw:  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203-L218  ```solidity     function withdraw(         uint256 id,         uint256 assets,         address receiver,         address owner     )         external         override         epochHasEnded(id)         marketExists(id)         returns (uint256 shares)     {         if(             msg.sender != owner &&             isApprovedForAll(owner, receiver) == false)             revert OwnerDidNotAuthorize(msg.sender, owner); ```  This way anyone at any time can run withdraw from the Vaults whenever owner has some address approved.  ## Recommended Mitigation Steps  Consider changing the approval requirement to be for the caller, not receiver:  SemiFungibleVault's withdraw:  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/SemiFungibleVault.sol#L110-L119  ```solidity     function withdraw(         uint256 id,         uint256 assets,         address receiver,         address owner     ) external virtual returns (uint256 shares) {         require( -           msg.sender == owner || isApprovedForAll(owner, receiver), +           msg.sender == owner || isApprovedForAll(owner, msg.sender),             \"Only owner can withdraw, or owner has approved receiver for all\"         ); ```  Vault's withdraw:  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203-L218  ```solidity     function withdraw(         uint256 id,         uint256 assets,         address receiver,         address owner     )         external         override         epochHasEnded(id)         marketExists(id)         returns (uint256 shares)     {         if(             msg.sender != owner && -           isApprovedForAll(owner, receiver) == false) +           isApprovedForAll(owner, msg.sender) == false)             revert OwnerDidNotAuthorize(msg.sender, owner); ```  "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/429", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/428", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/426", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Data returned by Oracles don't correctly represent their underlying meanings", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/425", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Data returned by Oracles don't correctly represent their underlying meanings"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/418", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/417", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/415", "labels": ["bug", "QA (Quality Assurance)", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "`ethValue` should be reasonable to avoid overflow in FuzzTest", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/412", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "`ethValue` should be reasonable to avoid overflow in FuzzTest"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/407", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/406", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/397", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/395", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/392", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/390", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/388", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "High centralisation risk in the protocol", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/381", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-y2k-finance-findings", "body": "High centralisation risk in the protocol"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/380", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "It is possible that receiver and treasury can receive nothing when calling `withdraw` function due to division being performed before multiplication", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/378", "labels": ["bug", "2 (Med Risk)", "high quality report", "resolved", "sponsor confirmed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Vault.sol#L378-L426 https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Vault.sol#L203-L234   # Vulnerability details  ## Impact In the following `beforeWithdraw` function, `entitledAmount = amount.divWadDown(idFinalTVL[id]).mulDivDown(idClaimTVL[id], 1 ether)` can be executed in several places. Because it uses division before multiplication, it is possible that `entitledAmount` is calculated to be 0. As the `withdraw` function shows below, when `entitledAmount` is 0, the receiver and treasury both receive 0. As a result, calling `withdraw` with a positive `assets` input can still result in transferring nothing to the receiver and treasury.  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Vault.sol#L378-L426 ```solidity     function beforeWithdraw(uint256 id, uint256 amount)         public         view         returns (uint256 entitledAmount)     {         // in case the risk wins aka no depeg event         // risk users can withdraw the hedge (that is paid by the hedge buyers) and risk; withdraw = (risk + hedge)         // hedge pay for each hedge seller = ( risk / tvl before the hedge payouts ) * tvl in hedge pool         // in case there is a depeg event, the risk users can only withdraw the hedge         if (             keccak256(abi.encodePacked(symbol)) ==             keccak256(abi.encodePacked(\"rY2K\"))         ) {             if (!idDepegged[id]) {                 //depeg event did not happen                 /*                 entitledAmount =                     (amount / idFinalTVL[id]) *                     idClaimTVL[id] +                     amount;                 */                 entitledAmount =                     amount.divWadDown(idFinalTVL[id]).mulDivDown(                         idClaimTVL[id],                         1 ether                     ) +                     amount;             } else {                 //depeg event did happen                 entitledAmount = amount.divWadDown(idFinalTVL[id]).mulDivDown(                     idClaimTVL[id],                     1 ether                 );             }         }         // in case the hedge wins aka depegging         // hedge users pay the hedge to risk users anyway,         // hedge guy can withdraw risk (that is transfered from the risk pool),         // withdraw = % tvl that hedge buyer owns         // otherwise hedge users cannot withdraw any Eth         else {             entitledAmount = amount.divWadDown(idFinalTVL[id]).mulDivDown(                 idClaimTVL[id],                 1 ether             );         }          return entitledAmount;     } ```  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Vault.sol#L203-L234 ```solidity     function withdraw(         uint256 id,         uint256 assets,         address receiver,         address owner     )         external         override         epochHasEnded(id)         marketExists(id)         returns (uint256 shares)     {         if(             msg.sender != owner &&             isApprovedForAll(owner, receiver) == false)             revert OwnerDidNotAuthorize(msg.sender, owner);          shares = previewWithdraw(id, assets); // No need to check for rounding error, previewWithdraw rounds up.          uint256 entitledShares = beforeWithdraw(id, shares);         _burn(owner, id, shares);          //Taking fee from the amount         uint256 feeValue = calculateWithdrawalFeeValue(entitledShares, id);         entitledShares = entitledShares - feeValue;         asset.transfer(treasury, feeValue);          emit Withdraw(msg.sender, receiver, owner, id, assets, entitledShares);         asset.transfer(receiver, entitledShares);          return entitledShares;     } ```  ## Proof of Concept Please append the following test in `test\\AssertTest.t.sol`. This test will pass to demonstrate the described scenario.  ```solidity     function testReceiveZeroDueToDivBeingPerformedBeforeMul() public {         vm.deal(alice, 1e24);         vm.deal(chad, 1e24);          vm.startPrank(admin);         FakeOracle fakeOracle = new FakeOracle(oracleFRAX, STRIKE_PRICE_FAKE_ORACLE);         vaultFactory.createNewMarket(FEE, tokenFRAX, DEPEG_AAA, beginEpoch, endEpoch, address(fakeOracle), \"y2kFRAX_99*\");         vm.stopPrank();          address hedge = vaultFactory.getVaults(1)[0];         address risk = vaultFactory.getVaults(1)[1];                  Vault vHedge = Vault(hedge);         Vault vRisk = Vault(risk);          // alice deposits 1e24 in hedge vault         vm.startPrank(alice);         ERC20(WETH).approve(hedge, 1e24);         vHedge.depositETH{value: 1e24}(endEpoch, alice);         vm.stopPrank();          // chad deposits 1e24 in risk vault         vm.startPrank(chad);         ERC20(WETH).approve(risk, 1e24);         vRisk.depositETH{value: 1e24}(endEpoch, chad);         vm.stopPrank();          vm.warp(beginEpoch + 10 days);          // depeg occurs         controller.triggerDepeg(SINGLE_MARKET_INDEX, endEpoch);          vm.startPrank(chad);          // chad withdraws 1e5 from risk vault         vRisk.withdraw(endEpoch, 1e5, chad, chad);          // the amount to chad is 0 because division is performed before multiplication         uint256 entitledShares = vRisk.beforeWithdraw(endEpoch, 1e5);          // chad receives nothing         assertEq(entitledShares, 0);         assertEq(ERC20(WETH).balanceOf(chad), 0);          // the amount to chad would be positive when multiplication is performed before division         uint256 entitledShares2 = (1e5 * vRisk.idClaimTVL(endEpoch)) / vRisk.idFinalTVL(endEpoch);         assertTrue(entitledShares2 > entitledShares);          vm.stopPrank();     } ```  ## Tools Used VSCode  ## Recommended Mitigation Steps `entitledAmount = amount.divWadDown(idFinalTVL[id]).mulDivDown(idClaimTVL[id], 1 ether)` in the `beforeWithdraw` function can be updated to the following code. ```solidity     entitledAmount = (amount * idClaimTVL[id]) / idFinalTVL[id] ```"}, {"title": "Unbounded Loop can lead to DOS due to epochs array.", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/372", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "Unbounded Loop can lead to DOS due to epochs array."}, {"title": "Vault.sol#L152 : null address verification for \"receiver\" is missed in \"function deposit\"", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/369", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "Vault.sol#L152 : null address verification for \"receiver\" is missed in \"function deposit\""}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/368", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/361", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/356", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/355", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/354", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/347", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/345", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/342", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/340", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/338", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "`tvl` used in the emitted `DepegInsurance` `event` is created incorrectly when calling `triggerEndEpoch`", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/336", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L198-L248 https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L59-L64   # Vulnerability details  ## Impact When calling the following `triggerEndEpoch` function, `tvl`, which is a `VaultTVL` type, is created as a part of the emitted `DepegInsurance` `event` after `idClaimTVL` and `idFinalTVL` are already updated for both the hedge and risk vaults. However, comparing to the fields of the `VaultTVL` `struct` definition below, `insrVault.idClaimTVL(epochEnd)` is incorrectly used as `RISK_finalTVL` and `riskVault.idFinalTVL(epochEnd)` is incorrectly used as `INSR_claimTVL` because `insrVault.setClaimTVL(epochEnd, 0)` has been executed, which does not occur when calling the `triggerDepeg` function. Because of the incorrect `tvl` used in the emitted `DepegInsurance` `event`, the frontend can display misleading information that confuse users, and debugging with incorrect data will be hard for developers.  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L198-L248 ```solidity     function triggerEndEpoch(uint256 marketIndex, uint256 epochEnd) public {         if(             vaultFactory.getVaults(marketIndex).length != VAULTS_LENGTH)                 revert MarketDoesNotExist(marketIndex);         if(             block.timestamp < epochEnd)             revert EpochNotExpired();          address[] memory vaultsAddress = vaultFactory.getVaults(marketIndex);          Vault insrVault = Vault(vaultsAddress[0]);         Vault riskVault = Vault(vaultsAddress[1]);          if(insrVault.idExists(epochEnd) == false || riskVault.idExists(epochEnd) == false)             revert EpochNotExist();          //require this function cannot be called twice in the same epoch for the same vault         if(insrVault.idFinalTVL(epochEnd) != 0)             revert NotZeroTVL();         if(riskVault.idFinalTVL(epochEnd) != 0)              revert NotZeroTVL();          insrVault.endEpoch(epochEnd, false);         riskVault.endEpoch(epochEnd, false);          insrVault.setClaimTVL(epochEnd, 0);         riskVault.setClaimTVL(epochEnd, insrVault.idFinalTVL(epochEnd));         insrVault.sendTokens(epochEnd, address(riskVault));          VaultTVL memory tvl = VaultTVL(             riskVault.idClaimTVL(epochEnd),             insrVault.idClaimTVL(epochEnd),             riskVault.idFinalTVL(epochEnd),             insrVault.idFinalTVL(epochEnd)         );          emit DepegInsurance(             keccak256(                 abi.encodePacked(                     marketIndex,                     insrVault.idEpochBegin(epochEnd),                     epochEnd                 )             ),             tvl,             false,             epochEnd,             block.timestamp,             getLatestPrice(insrVault.tokenInsured())         );     } ```  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L59-L64 ```solidity     struct VaultTVL {         uint256 RISK_claimTVL;         uint256 RISK_finalTVL;         uint256 INSR_claimTVL;         uint256 INSR_finalTVL;     } ```  ## Proof of Concept Please append the following test in `test\\AssertTest.t.sol`. This test will pass to demonstrate the described scenario.  ```solidity     function testCallingtriggerEndEpochCreatesIncorrectVaultTVL() public{         testDeposit();          address hedge = vaultFactory.getVaults(1)[0];         address risk = vaultFactory.getVaults(1)[1];          Vault vHedge = Vault(hedge);         Vault vRisk = Vault(risk);          vm.warp(endEpoch + 1 days);          controller.triggerEndEpoch(SINGLE_MARKET_INDEX, endEpoch);          /* VaultTVL struct has the following structure              struct VaultTVL {                 uint256 RISK_claimTVL;                 uint256 RISK_finalTVL;                 uint256 INSR_claimTVL;                 uint256 INSR_finalTVL;             }          */          /* in controller.triggerEndEpoch, VaultTVL is created as follows after idClaimTVL and idFinalTVL for both vaults are already updated              VaultTVL memory tvl = VaultTVL(                 riskVault.idClaimTVL(epochEnd),                 insrVault.idClaimTVL(epochEnd),                 riskVault.idFinalTVL(epochEnd),                 insrVault.idFinalTVL(epochEnd)             );          */          // insrVault.idClaimTVL(epochEnd), which is vHedge.idClaimTVL(endEpoch), does not correspond to RISK_finalTVL, which should be vRisk.idFinalTVL(endEpoch)         assertTrue(vRisk.idFinalTVL(endEpoch) != vHedge.idClaimTVL(endEpoch));          // riskVault.idFinalTVL(epochEnd), which is vRisk.idFinalTVL(endEpoch), does not correspond to INSR_claimTVL, which should be vHedge.idClaimTVL(endEpoch)          assertTrue(vHedge.idClaimTVL(endEpoch) != vRisk.idFinalTVL(endEpoch));     } ```  ## Tools Used VSCode  ## Recommended Mitigation Steps https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L227-L232 can be updated to the following code. ```solidity         VaultTVL memory tvl = VaultTVL(             riskVault.idClaimTVL(epochEnd),             riskVault.idFinalTVL(epochEnd),             insrVault.idClaimTVL(epochEnd),             insrVault.idFinalTVL(epochEnd)         ); ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/333", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/327", "labels": ["bug", "G (Gas Optimization)", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "LOSS OF PRECISION RESULTING IN WRONG VALUE FOR PRICE RATIO", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/323", "labels": ["bug", "3 (High Risk)", "sponsor acknowledged", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "LOSS OF PRECISION RESULTING IN WRONG VALUE FOR PRICE RATIO"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/321", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/318", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Users who deposit in one vault can lose all deposits and receive nothing when counterparty vault has no deposits", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/312", "labels": ["bug", "3 (High Risk)", "edited-by-warden", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Users who deposit in one vault can lose all deposits and receive nothing when counterparty vault has no deposits"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/309", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/304", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/294", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/288", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Sensitivity to rapid price change", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/287", "labels": ["QA (Quality Assurance)", "sponsor disputed", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Sensitivity to rapid price change"}, {"title": "A design flaw in the case of using 2 oracles (aka PegOracle)", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/283", "labels": ["bug", "3 (High Risk)", "sponsor disputed", "old-submission-method", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "A design flaw in the case of using 2 oracles (aka PegOracle)"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/282", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/280", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/279", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "End epoch cannot be triggered preventing winners to withdraw", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/278", "labels": ["bug", "3 (High Risk)", "high quality report", "sponsor confirmed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L246 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L261 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L277-L286 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203   # Vulnerability details  ## Impact At the end of an epoch, the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198) is called to trigger 'epoch end without depeg event', making risk users the winners and entitling them to [withdraw](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203) (risk + hedge) from the vault. In the case of the Arbitrum sequencer going down or restarting, there is a [grace period of one hour](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L285) before the [getLatestPrice()](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L261) returns to execute without reverting. This means that the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198) cannot complete during this time, because it calls the [getLatestPrice()](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L261).  Making this high-priority because unless the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198) completes: - winners cannot [withdraw](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203) althought the epoch is over; - during this time the strike price might be reached causing a depeg event at all effects turning the table for the winners; - the [getLatestPrice()](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L261) is not functional to the completion of the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198), nor to the [withdraw](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203), but only informative used to initialize the event object emitted [at the very end of the triggerEndEpoch function](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L246).  First two points each constitute independent jsutification, thrid point reinforces the first 2 points.   ## Proof of Concept  ### triggerEndEpoch reverts if arbiter down or restarted less than eq GRACE_PERIOD_TIME ago (1hr)  File: [Controller.sol:L246](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L246)  Revert if getLatestPrice reverts.  ```solidity function triggerEndEpoch(uint256 marketIndex, uint256 epochEnd) public {          < ... omitted ... >      emit DepegInsurance(         keccak256(             abi.encodePacked(                 marketIndex,                 insrVault.idEpochBegin(epochEnd),                 epochEnd             )         ),         tvl,         false,         epochEnd,         block.timestamp,         getLatestPrice(insrVault.tokenInsured()) // @audit getLatestPrice reverts while sequencer unavailable or during grace period     ); } ```  File: [Controller.sol:L277-L286](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L277-L286)  Revert if sequencer down or grace period after restart not over.  ```solidity function getLatestPrice(address _token)     public     view     returns (int256 nowPrice) {     < ... omitted ... >      bool isSequencerUp = answer == 0;     if (!isSequencerUp) {         revert SequencerDown();     }      // Make sure the grace period has passed after the sequencer is back up.     uint256 timeSinceUp = block.timestamp - startedAt;     if (timeSinceUp <= GRACE_PERIOD_TIME) { // @audit 1 hour         revert GracePeriodNotOver();     }      < ... omitted ... > } ```  ### withdraw fails if triggerEndEpoch did not execute successfully  File: [Vault.sol:L203](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Vault.sol#L203)  Can execute if block.timestamp > epochEnd, but fails if trigger did not execute. Winners cannot withdraw.  ```solidity function withdraw(     uint256 id,     uint256 assets,     address receiver,     address owner )     external     override     epochHasEnded(id) // @audit same as require((block.timestamp > id) || idDepegged[id]), hence independent from triggers.     marketExists(id)     returns (uint256 shares) {     < ... omitted ... >      uint256 entitledShares = beforeWithdraw(id, shares); // @audit ratio is idClaimTVL[id]/ifFinalTVL[id], hence zero unless triggers executed          < ... omitted ... >      emit Withdraw(msg.sender, receiver, owner, id, assets, entitledShares);     asset.transfer(receiver, entitledShares);      return entitledShares; } ```  ## Tools Used n/a  ## Recommended Mitigation Steps  The latest price is retrieved at the very end of the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198) for the only purpose of initializing the DepegInsurance event.  Since it is used for informational purpose (logging / offchain logging) and not for functional purpose to the [triggerEndEpoch(...)](https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L198) execution, it can be relaxed.   Depending on how the event is used, when getLatestPrice() is called for informative/logging purpose only, there could be few alternatives: - log a 0 when SequencerDown or GRACE_PERIOD_TIME not passed - log a 0 when SequencerDown and ignore GRACE_PERIOD_TIME  Once events are logged off-chain, some post processing may be used to correct/update the values with accurate data."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/276", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Immutable address owner is risky", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/274", "labels": ["bug", "QA (Quality Assurance)", "sponsor confirmed", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code   https://github.com/code-423n4/2022-09-y2k-finance/blob/bca5080635370424a9fe21fe1aded98345d1f723/src/VaultFactory.sol#L157 https://github.com/code-423n4/2022-09-y2k-finance/blob/bca5080635370424a9fe21fe1aded98345d1f723/src/VaultFactory.sol#L163-L374   # Vulnerability details  # Immutable address owner is risky in `VaultFactory.sol` ### Impact The following contracts and functions, allow admins to interact with core functions such as:  `VaultFactory.sol` functions for:   - createNewMarket   - deployMoreAssets   - setController   - changeTreasury   - changeTimewindow   - changeController   - changeOracle  Given that `admin` is immutable it's very risky because it is irrecoverable from any mistakes  Scenario: If an incorrect address, e.g. for which the private key is not known, is used accidentally then it prevents the use of all the `onlyAdmin()` functions forever, which includes the changing of various critical addresses and parameters. This use of incorrect address may not even be immediately apparent given that these functions are probably not used immediately.   When noticed, due to a failing `onlyAdmin()` function call, it will force the redeployment of these contracts and require appropriate changes and notifications for switching from the old to new address. This will diminish trust in the protocol and incur a significant reputational damage.  ### Github Permalinks https://github.com/code-423n4/2022-09-y2k-finance/blob/bca5080635370424a9fe21fe1aded98345d1f723/src/VaultFactory.sol#L157  - Admin functions affected https://github.com/code-423n4/2022-09-y2k-finance/blob/bca5080635370424a9fe21fe1aded98345d1f723/src/VaultFactory.sol#L163-L374  ### Recommended steps Recommend remove immutable from admin address. Also taking care while deploying the contract / emitting an event when assigning _admin so in case it is wrongly deployed, it can be redeployed earlier. Finally adding a 2 steps transfer from admin for cases when admin needs to be migrate to another address.    "}, {"title": "function changeController() has rug potential as admin can unilaterally withdraw all user funds from both risk and insure vaults", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/269", "labels": ["bug", "2 (Med Risk)", "edited-by-warden", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "function changeController() has rug potential as admin can unilaterally withdraw all user funds from both risk and insure vaults"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/266", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/261", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/257", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "getLatestPrice() in Controller don't support tokens or prices with more than 18 precision", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/253", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "getLatestPrice() in Controller don't support tokens or prices with more than 18 precision"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/250", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/242", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/239", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "StakingRewards: Significant loss of precision possible", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/225", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards: Significant loss of precision possible"}, {"title": "Fee-on-Transfer tokens cause problems in multiple places", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/221", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Fee-on-Transfer tokens cause problems in multiple places"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/212", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/211", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/208", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/206", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/205", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/204", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/203", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/201", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Incorrect handling of pricefeed.decimals()", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/195", "labels": ["bug", "3 (High Risk)", "high quality report", "resolved", "sponsor confirmed", "edited-by-warden", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/oracles/PegOracle.sol#L46-L83 https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/src/Controller.sol#L299-L300   # Vulnerability details  ## Impact Wrong maths for handling pricefeed decimals. This code will only work for pricefeeds of 8 decimals, any others give wrong/incorrect data. The maths used can be shown in three lines:  ```solidity nowPrice = (price1 * 10000) / price2; nowPrice = nowPrice * int256(10**(18 - priceFeed1.decimals())); return nowPrice / 1000000; ```  Line1: adds 4 decimals Line2: adds (18 - d) decimals, (where d = pricefeed.decimals()) Line3:  removes 6 decimals  Total: adds (16 - d) decimals  when d=8, the contract correctly returns an 8 decimal number. However, when d = 6, the function will return a 10 decimal number. This is further raised by (18-d = 12) decimals when checking for depeg event, leading to a 22 decimal number which is 4 orders of magnitude incorrect.  if d=18, (like usd-eth pricefeeds) contract fails / returns 0.  All chainlink contracts which give price in eth, operate with 18 decimals. So this can cripple the system if added later.  ## Proof of Concept Running the test  AssertTest.t.sol:testPegOracleMarketCreation and changing the line on  https://github.com/code-423n4/2022-09-y2k-finance/blob/2175c044af98509261e4147edeb48e1036773771/test/AssertTest.t.sol#L30  to ```solidity PegOracle pegOracle3 = new PegOracle(             0xB1552C5e96B312d0Bf8b554186F846C40614a540,  //usd-eth contract address             btcEthOracle         ); ``` gives this output  ``` oracle3price1: 1085903802394919427                                                                                                                                                                                oracle3price2: 13753840915281064000                                                                                                                                                                               oracle3price1 / oracle3price2: 0 ```  returning an oracle value of 0. Simulating with a mock price feed of 6 decimals gives results 4 orders of magnitude off.  ## Tools Used Foundry, vs-code  ## Recommended Mitigation Steps Since only the price ratio is calculated, there is no point in increasing the decimal by (18-d) in the second line. Proposed solution: ```solidity nowPrice = (price1 * 10000) / price2; nowPrice = nowPrice * int256(10**(priceFeed1.decimals())) * 100; return nowPrice / 1000000; ``` This returns results in d decimals, no matter the value of d. "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/185", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/184", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/178", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/176", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/175", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/166", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/165", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/163", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/162", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/158", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/156", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/149", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/145", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/144", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/134", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/133", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/132", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/123", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/121", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/117", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/116", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/113", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/110", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/108", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/106", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/103", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Oracle is tracked per token instead of per pair, leading to surprise results", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/100", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Oracle is tracked per token instead of per pair, leading to surprise results"}, {"title": "Rewards are not rolled over", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/93", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Rewards are not rolled over"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/91", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "`Vault:deposit` should transfer the amount `assets` and not `shares`.", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/78", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "`Vault:deposit` should transfer the amount `assets` and not `shares`."}, {"title": "Depeg event can happen at incorrect price", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/69", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L96   # Vulnerability details  ## Impact Depeg event can still happen when the price of a pegged asset is equal to the strike price of a Vault which is incorrect.   This docs clearly mentions:  \"When the price of a pegged asset is below the strike price of a Vault, a Keeper(could be anyone) will trigger the depeg event and both Vaults(hedge and risk) will swap their total assets with the other party.\" - https://code4rena.com/contests/2022-09-y2k-finance-contest  ## Proof of Concept  1. Assume strike price of vault is 1 and current price of pegged asset is also 1  2. User calls [triggerDepeg](https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L148) function which calls isDisaster modifier to check the depeg eligibility  3. Now lets see [isDisaster](https://github.com/code-423n4/2022-09-y2k-finance/blob/main/src/Controller.sol#L83) modifier  ``` modifier isDisaster(uint256 marketIndex, uint256 epochEnd) {         address[] memory vaultsAddress = vaultFactory.getVaults(marketIndex);         if(             vaultsAddress.length != VAULTS_LENGTH             )             revert MarketDoesNotExist(marketIndex);          address vaultAddress = vaultsAddress[0];         Vault vault = Vault(vaultAddress);          if(vault.idExists(epochEnd) == false)             revert EpochNotExist();          if(             vault.strikePrice() < getLatestPrice(vault.tokenInsured())             )             revert PriceNotAtStrikePrice(getLatestPrice(vault.tokenInsured()));          if(             vault.idEpochBegin(epochEnd) > block.timestamp)             revert EpochNotStarted();          if(             block.timestamp > epochEnd             )             revert EpochExpired();         _;     } ```  4. Assume block.timestamp is at correct timestamp (between idEpochBegin and epochEnd), so none of revert execute. Lets look into the interesting one at  ```         if(             vault.strikePrice() < getLatestPrice(vault.tokenInsured())             )             revert PriceNotAtStrikePrice(getLatestPrice(vault.tokenInsured())); ```  5. Since in our case price of vault=price of pegged asset so if condition does not execute and finally isDisaster completes without any revert meaning go ahead of depeg  6. But this is incorrect since price is still not below strike price and is just equal  ## Recommended Mitigation Steps Change the isDisaster modifier to revert when price of a pegged asset is equal to the strike price of a Vault  ``` if(             vault.strikePrice() <= getLatestPrice(vault.tokenInsured())             )             revert PriceNotAtStrikePrice(getLatestPrice(vault.tokenInsured())); ```"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/68", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/67", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "It's possible to change for Vault and lost control on it", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/66", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "It's possible to change for Vault and lost control on it"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/62", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Different Oracle issues can return outdated prices", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/61", "labels": ["bug", "2 (Med Risk)", "resolved", "sponsor confirmed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/oracles/PegOracle.sol#L63 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/Controller.sol#L308 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/oracles/PegOracle.sol#L126   # Vulnerability details  ## Impact Different problems have been found with the use of the oracle that can incur economic losses when the oracle is not consumed in a completely safe way.  ## Proof of Concept  Thre problems found are:  - The `timeStamp` check is not correct since in both cases it is done against 0, which would mean that a date of 2 years ago would be valid, so old prices can be taken.  ```javascript     function getLatestPrice(address _token)         public         view         returns (int256 nowPrice)     {         ...         if(timeStamp == 0)             revert TimestampZero();         return price;     } ```  - Oracle price 1 can be outdated:  The `latestRoundData` method of the `PegOracle` contract calls `priceFeed1.latestRoundData();` directly, but does not perform the necessary round or timestamp checks, and delegates them to the caller, but these checks are performed on price2 because it calls `getOracle2_Price` in this case, this inconsistency between how it take the price1 and price2 behaves favors human errors when consuming the oracle.  ## Recommended Mitigation Steps  For the timestamp issue, it should be checked like this:  ```diff +   uint constant observationFrequency = 1 hours;      function getLatestPrice(address _token)         public         view         returns (int256 nowPrice)     {         ...         (             uint80 roundID,             int256 price,             ,             uint256 timeStamp,             uint80 answeredInRound         ) = priceFeed.latestRoundData();          uint256 decimals = 10**(18-(priceFeed.decimals()));         price = price * int256(decimals);          if(price <= 0)             revert OraclePriceZero();          if(answeredInRound < roundID)             revert RoundIDOutdated();  -       if(timeStamp == 0) +       if(timeStamp < block.timestamp - uint256(observationFrequency))             revert TimestampZero();          return price;     } ```   "}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/58", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "After the vault expires, users may still receive rewards through the StakingRewards contract", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/57", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "After the vault expires, users may still receive rewards through the StakingRewards contract"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/56", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "StakingRewards reward rate can be dragged out and diluted", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/52", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards reward rate can be dragged out and diluted"}, {"title": "StakingRewards.setRewardsDuration allows setting near zero or enormous rewardsDuration, which breaks reward logic", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/51", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards.setRewardsDuration allows setting near zero or enormous rewardsDuration, which breaks reward logic"}, {"title": "StakingRewards.sol#notifyRewardAmount() Improper reward balance checks can make some users unable to withdraw their rewards", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/50", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards.sol#notifyRewardAmount() Improper reward balance checks can make some users unable to withdraw their rewards"}, {"title": "StakingRewards: recoverERC20() can be used as a backdoor by the owner to retrieve rewardsToken", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/49", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "edited-by-warden", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards: recoverERC20() can be used as a backdoor by the owner to retrieve rewardsToken"}, {"title": "Vault.sol is not EIP-4626 compliant ", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/47", "labels": ["bug", "3 (High Risk)", "high quality report", "resolved", "sponsor confirmed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/Vault.sol#L244-L252 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/SemiFungibleVault.sol#L205-L213 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/SemiFungibleVault.sol#L237-L239 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/SemiFungibleVault.sol#L244-L246 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/SemiFungibleVault.sol#L251-L258 https://github.com/code-423n4/2022-09-y2k-finance/blob/ac3e86f07bc2f1f51148d2265cc897e8b494adf7/src/SemiFungibleVault.sol#L263-L270   # Vulnerability details  ## Impact  Other protocols that integrate with Y2K may wrongly assume that the functions are EIP-4626 compliant. Thus, it might cause integration problems in the future that can lead to wide range of issues for both parties.   ## Proof of Concept  All official EIP-4626 requirements can be found on it's [official page](https://eips.ethereum.org/EIPS/eip-4626#methods). Non-compliant functions are listed below along with the reason they are not compliant:  The following functions are missing but should be present: 1. mint(uint256, address) returns (uint256) 2. redeem(uint256, address, address) returns (uint256)  The following functions are non-compliant because they don't account for withdraw and deposit locking: 1. maxDeposit 2. maxMint 3. maxWithdraw 4. maxRedeem  All of the above functions should return 0 when their respective functions are disabled (i.e. maxDeposit should return 0 when deposits are disabled)  previewDeposit is not compliant because it must account for fees which it does not  totalAssets is not compliant because it does not always return the underlying managed by the vault because it fails to include the assets paid out during a depeg or the end of the epoch.  ## Tools Used  ## Recommended Mitigation Steps  All functions listed above should be modified to meet the specifications of EIP-4626"}, {"title": "Risk users are required to payout if the price of the pegged asset goes higher than underlying", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/45", "labels": ["bug", "3 (High Risk)", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Risk users are required to payout if the price of the pegged asset goes higher than underlying"}, {"title": "Fees are taken on risk collateral", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/44", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "edited-by-warden", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "Fees are taken on risk collateral"}, {"title": "StakingRewards.sol#stake is intended to be pausable but isn't", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/38", "labels": ["bug", "2 (Med Risk)", "sponsor disputed", "selected-for-report"], "target": "2022-09-y2k-finance-findings", "body": "StakingRewards.sol#stake is intended to be pausable but isn't"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/36", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/30", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/29", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/28", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/25", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/17", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/16", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/15", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/14", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/11", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/10", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/8", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/5", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/4", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-y2k-finance-findings", "body": "Gas Optimizations"}, {"title": "Agreements & Disclosures", "html_url": "https://github.com/code-423n4/2022-09-y2k-finance-findings/issues/1", "labels": [], "target": "2022-09-y2k-finance-findings", "body": "Agreements & Disclosures"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/497", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/496", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/495", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/493", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/492", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/491", "labels": ["bug", "G (Gas Optimization)", "high quality report"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/489", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/488", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/487", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/485", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/484", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/483", "labels": ["bug", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/482", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/481", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/479", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Loss of vested amounts", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/475", "labels": ["bug", "3 (High Risk)", "sponsor confirmed", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L418 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L147-L151 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L364   # Vulnerability details  ## Impact  Vesting is a legal term that means the point in time where property is earned or gained by some person. The VTVLVesting contract defines: - a start time (Claim::startTimestamp) and an end time (Claim::endTimestamp) at which vesting starts and ends for a entitled user - the calculated points in time when the fractions of the total amount are released and therefore can be withdrawn (which are defined by Claim::releaseIntervalSecs). The entitled user can either withdraw after each interval elapses, or after the whole vesting period is over or any variant of the two options.  The administrator of the contract can revoke the claim for a user at any time, which for vesting assets is expected. For example an employee with a vesting stock allocation of 1000 shares vesting at each quarter over a period of 4 years, may resign after 2 years and therefore the only half of the shares would be vested and therefore sold by the employee. The employee can either sell them at each quarter, or before, or after resigning, in any case the half of the shares have vested and are by legal right owned by the employee.  The VTVLContract revoke has the following defects: - it ignores the amount already vested and now yet withdrawn - if called, say half-way the total period, just after claimer withdraws the already vested amount, it revokes only the right to vest the remaining part in future. - if called, say half-way the total period, right before the claimer withdraws the already vested amount, it revokes both the already vested amount and the right to vest the remaining part in future.  Raising as high impact because it actually causes: - loss of already vested amounts of a user with a valid claim that has already righteously vested a part but not withdrawn - different outcomes depending on the order in which withdraw and revokeClaim functions are called which means that one of the two behavoiurs is certainly in conflict with the other causing a loss on one of the two sides, contract or claimer (by definition of Vesting rights, the claimer). - lack of trust by the potential claimers/users whch can be at any time deprived of righteously vested amounts.  ## Proof of Concept  The following two tests prove the behaviour difference when the order by which revokeClaim vs withdraw are called, whch shows that the vesting right is not guaranteed.  ```solidity   // NOTE: USES ORIGINAL REVOKE BEHAVIOUR   it('sample revoke use case USER LOSE: employee withdraw immediately after resignation', async () => {     const {tokenContract, vestingContract} = await createPrefundedVestingContract({tokenName, tokenSymbol, initialSupplyTokens});      const startTimestamp = await getLastBlockTs() + 100;     const endTimestamp = startTimestamp + 2000;     const terminationTimestamp = startTimestamp + 1000 + 50; // half-way vesting, plus half release interval which shall be discarded     const releaseIntervalSecs = 100;      await vestingContract.createClaim(owner2.address, startTimestamp, endTimestamp, cliffReleaseTimestamp, releaseIntervalSecs, linearVestAmount, cliffAmount);      // move clock to termination timestamp (half-way the vesting period plus a bit, but less than release interval seconds)     await ethers.provider.send(\"evm_mine\", [terminationTimestamp]);          let availableAmt = await vestingContract.claimableAmount(owner2.address)     // revoke the claim preserving the \"already vested but not yet withdrawn amount\"     await (await vestingContract.revokeClaim(owner2.address)).wait();          let userBalanceBefore = await tokenContract.balanceOf(owner2.address);     await expect(vestingContract.connect(owner2).withdraw()).to.be.revertedWith('NO_ACTIVE_CLAIM');     let userBalanceAfter = await tokenContract.balanceOf(owner2.address);      // move the clock to the programmed end of vesting period     await ethers.provider.send(\"evm_mine\", [endTimestamp]);      // cliffTimestamp < startTimestamp < terminationTimestamp, hence expected cliffAmount + (1/2 * anlinearVestAmount)     let expectedVestedAmount = cliffAmount.add(linearVestAmount.div(2));      // RESIGNING EMPLOYEE LOSES HIS VESTED AMOUNT BECAUSE OF WITHDRAWING IMMEDIATELY AFTER RESIGNATION     expect(userBalanceAfter.sub(userBalanceBefore)).to.be.equal(0);     // VTVLVesting CONTRACT TOOK ALREADY VESTED AMOUNT FROM OWNER2     expect(await vestingContract.finalClaimableAmount(owner2.address)).to.be.equal(0);   });    // NOTE: USES ORIGINAL REVOKE BEHAVIOUR   it('sample revoke use case USER WIN: employee withdraw immediately before resignation', async () => {     const {tokenContract, vestingContract} = await createPrefundedVestingContract({tokenName, tokenSymbol, initialSupplyTokens});      const startTimestamp = await getLastBlockTs() + 100;     const endTimestamp = startTimestamp + 2000;     const terminationTimestamp = startTimestamp + 1000 + 50; // half-way vesting, plus half release interval which shall be discarded     const releaseIntervalSecs = 100;      await vestingContract.createClaim(owner2.address, startTimestamp, endTimestamp, cliffReleaseTimestamp, releaseIntervalSecs, linearVestAmount, cliffAmount);      // move clock to termination timestamp (half-way the vesting period plus a bit, but less than release interval seconds)     await ethers.provider.send(\"evm_mine\", [terminationTimestamp]);      let userBalanceBefore = await tokenContract.balanceOf(owner2.address);     await (await vestingContract.connect(owner2).withdraw()).wait();     let userBalanceAfter = await tokenContract.balanceOf(owner2.address);      // revoke the claim preserving the \"already vested but not yet withdrawn amount\"     await (await vestingContract.revokeClaim(owner2.address)).wait();          // move the clock to the programmed end of vesting period     await ethers.provider.send(\"evm_mine\", [endTimestamp]);      console.log(userBalanceAfter.sub(userBalanceBefore));     // RESIGNING EMPLOYEE RECEIVES HIS VESTED AMOUNT BY WITHDRAWING IMMEDIATELY BEFORE RESIGNATION     expect(userBalanceAfter.sub(userBalanceBefore)).to.be.greaterThan(0);     expect(await vestingContract.finalClaimableAmount(owner2.address)).to.be.equal(0);   }); ```solidity  ## Tools Used  n/a  ## Recommended Mitigation Steps  Below are, in order, a test and a diff/patch for a proposed fix. The proposed fix is just an idea at how to fix, or in other words, a way to preserve the already vested amount when claim is revoked.  The diff/patch add a deactivationTimestamp to claim, and a new revokeClaimProper that shall replace the revokeClaim function to correct the behaviour. The deactivationTimestamp is used to track the deactivation time for the claim in order to preserve the amount vested so far and allow the user to withdraw the amount righteously earned so far. The _baseVestedAmount and hasActiveClaim have been updated to do proper math when isActive is false but deactivationTimestamp is greater than 0.  The finalVestedAmount has been update to show the \"what would be\" amount if the vesting would have reached the claim endTimestamp while the finalClaimableAmount takes into consideration the deactivationTimestamp if the claim has been revoked.  The test shows that the already vested amount (cliff + half way linear vesting) is preserved.  ```solidity diff --git a/contracts/VTVLVesting.sol b/contracts/VTVLVesting.sol index 133f19f..7ab955c 100644 --- a/contracts/VTVLVesting.sol +++ b/contracts/VTVLVesting.sol @@ -34,6 +34,7 @@ contract VTVLVesting is Context, AccessProtected {          // Gives us a range from 1 Jan 1970 (Unix epoch) up to approximately 35 thousand years from then (2^40 / (365 * 24 * 60 * 60) ~= 35k)          uint40 startTimestamp; // When does the vesting start (40 bits is enough for TS)          uint40 endTimestamp; // When does the vesting end - the vesting goes linearly between the start and end timestamps +        uint40 deactivationTimestamp;          uint40 cliffReleaseTimestamp; // At which timestamp is the cliffAmount released. This must be <= startTimestamp          uint40 releaseIntervalSecs; // Every how many seconds does the vested amount increase.            @@ -108,7 +109,7 @@ contract VTVLVesting is Context, AccessProtected {            // We however still need the active check, since (due to the name of the function)          // we want to only allow active claims -        require(_claim.isActive == true, \"NO_ACTIVE_CLAIM\"); +        require(_claim.isActive == true || _claim.deactivationTimestamp > 0, \"NO_ACTIVE_CLAIM\");            // Save gas, omit further checks          // require(_claim.linearVestAmount + _claim.cliffAmount > 0, \"INVALID_VESTED_AMOUNT\"); @@ -144,20 +145,20 @@ contract VTVLVesting is Context, AccessProtected {      @param _claim The claim in question      @param _referenceTs Timestamp for which we're calculating       */ -    function _baseVestedAmount(Claim memory _claim, uint40 _referenceTs) internal pure returns (uint112) { +    function _baseVestedAmount(Claim memory _claim, uint40 _referenceTs, uint40 vestEndTimestamp) internal pure returns (uint112) {          uint112 vestAmt = 0; -         -        // the condition to have anything vested is to be active -        if(_claim.isActive) { +             +        if(_claim.isActive || _claim.deactivationTimestamp > 0) {              // no point of looking past the endTimestamp as nothing should vest afterwards              // So if we're past the end, just get the ref frame back to the end -            if(_referenceTs > _claim.endTimestamp) { -                _referenceTs = _claim.endTimestamp; +            if(_referenceTs > vestEndTimestamp) { +                _referenceTs = vestEndTimestamp;              }                // If we're past the cliffReleaseTimestamp, we release the cliffAmount              // We don't check here that cliffReleaseTimestamp is after the startTimestamp  -            if(_referenceTs >= _claim.cliffReleaseTimestamp) { // @audit is _claim.require(cliffReleaseTimestamp < _claim.endTimestamp) ? +            if(_referenceTs >= _claim.cliffReleaseTimestamp) {  // @audit note  cliffReleaseTimestamp cannot? be zero without cliffamoutn being zero +                // @audit NOTE: (cliffReleaseTimestamp is always <= _startTimestamp <= endTimestamp, or 0 if no vesting)                  vestAmt += _claim.cliffAmount;              }   @@ -195,7 +196,8 @@ contract VTVLVesting is Context, AccessProtected {      */      function vestedAmount(address _recipient, uint40 _referenceTs) public view returns (uint112) {          Claim storage _claim = claims[_recipient]; -        return _baseVestedAmount(_claim, _referenceTs); +        uint40 vestEndTimestamp = _claim.isActive ? _claim.endTimestamp : _claim.deactivationTimestamp; +        return _baseVestedAmount(_claim, _referenceTs, vestEndTimestamp);      }        /** @@ -205,7 +207,18 @@ contract VTVLVesting is Context, AccessProtected {       */      function finalVestedAmount(address _recipient) public view returns (uint112) {          Claim storage _claim = claims[_recipient]; -        return _baseVestedAmount(_claim, _claim.endTimestamp); +        return _baseVestedAmount(_claim, _claim.endTimestamp, _claim.endTimestamp); +    } + +    /** +    @notice Calculates how much wil be possible to claim at the end of vesting date, by subtracting the already withdrawn +            amount from the vestedAmount at this moment. Vesting date is either the end timestamp or the deactivation timestamp. +    @param _recipient - The address for whom we're calculating +    */ +    function finalClaimableAmount(address _recipient) external view returns (uint112) { +        Claim storage _claim = claims[_recipient]; +        uint40 vestEndTimestamp = _claim.isActive ? _claim.endTimestamp : _claim.deactivationTimestamp; +        return _baseVestedAmount(_claim, vestEndTimestamp, vestEndTimestamp) - _claim.amountWithdrawn;      }            /** @@ -214,7 +227,8 @@ contract VTVLVesting is Context, AccessProtected {      */      function claimableAmount(address _recipient) external view returns (uint112) {          Claim storage _claim = claims[_recipient]; -        return _baseVestedAmount(_claim, uint40(block.timestamp)) - _claim.amountWithdrawn; +        uint40 vestEndTimestamp = _claim.isActive ? _claim.endTimestamp : _claim.deactivationTimestamp; +        return _baseVestedAmount(_claim, uint40(block.timestamp), vestEndTimestamp) - _claim.amountWithdrawn;      }            /**  @@ -280,6 +294,7 @@ contract VTVLVesting is Context, AccessProtected {          Claim memory _claim = Claim({              startTimestamp: _startTimestamp,              endTimestamp: _endTimestamp, +            deactivationTimestamp: 0,              cliffReleaseTimestamp: _cliffReleaseTimestamp,              releaseIntervalSecs: _releaseIntervalSecs,              cliffAmount: _cliffAmount, @@ -436,6 +451,30 @@ contract VTVLVesting is Context, AccessProtected {          emit ClaimRevoked(_recipient, amountRemaining, uint40(block.timestamp), _claim);      }   +    function revokeClaimProper(address _recipient) external onlyAdmin hasActiveClaim(_recipient) { +        // Fetch the claim +        Claim storage _claim = claims[_recipient]; +        // Calculate what the claim should finally vest to +        uint112 finalVestAmt = finalVestedAmount(_recipient); + +        // No point in revoking something that has been fully consumed +        // so require that there be unconsumed amount +        require( _claim.amountWithdrawn < finalVestAmt, \"NO_UNVESTED_AMOUNT\"); + +        _claim.isActive = false; +        _claim.deactivationTimestamp = uint40(block.timestamp); + +        uint112 vestedSoFarAmt = vestedAmount(_recipient, uint40(block.timestamp)); +        // The amount that is \"reclaimed\" is equal to the total allocation less what was already +        // vested without the part that was already withdrawn. +        uint112 amountRemaining = finalVestAmt - (vestedSoFarAmt - _claim.amountWithdrawn); + +        numTokensReservedForVesting -= amountRemaining; // Reduces the allocation + +        // Tell everyone a claim has been revoked. +        emit ClaimRevoked(_recipient, amountRemaining, uint40(block.timestamp), _claim); +    } +      /**      @notice Withdraw a token which isn't controlled by the vesting contract.      @dev This contract controls/vests token at \"tokenAddress\". However, someone might send a different token.   ```"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/471", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/470", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/468", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/467", "labels": ["bug", "low quality report", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/466", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/465", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/461", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/459", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/457", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "_releaseIntervalSecs is not validated", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/448", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-09-vtvl-findings", "body": "_releaseIntervalSecs is not validated"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/446", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/445", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/443", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/442", "labels": ["bug", "high quality report", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/441", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/440", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/439", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/438", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/437", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/436", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/435", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/432", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Two address tokens can be withdrawn by the admin even if they are vested", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/429", "labels": ["bug", "2 (Med Risk)", "sponsor acknowledged"], "target": "2022-09-vtvl-findings", "body": "Two address tokens can be withdrawn by the admin even if they are vested"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/425", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/423", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": " Dangerous access control design of admin", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/422", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": " Dangerous access control design of admin"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/421", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/415", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/414", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/412", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/410", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/409", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/408", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/407", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/405", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "The Deployer can be unset as the admin of the contract", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/401", "labels": ["bug", "enhancement", "QA (Quality Assurance)", "sponsor disputed"], "target": "2022-09-vtvl-findings", "body": "The Deployer can be unset as the admin of the contract"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/399", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "ERC721 tokens can be possibly trapped in the `VTVLVesting` contract", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/398", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "ERC721 tokens can be possibly trapped in the `VTVLVesting` contract"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/397", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/395", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/394", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/391", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/389", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/388", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/387", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/386", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/385", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/383", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/382", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/380", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/378", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/377", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/376", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/375", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/370", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/367", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/366", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/364", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/363", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Admin roles might be lost forever", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/361", "labels": ["bug", "duplicate", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Admin roles might be lost forever"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/359", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/358", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/357", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/356", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/355", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/354", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/353", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/352", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/351", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/349", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "setAdmin should be a two-step process. Potential locking of critical contract's functions", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/348", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "setAdmin should be a two-step process. Potential locking of critical contract's functions"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/347", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/346", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/345", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/344", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/341", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/340", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/339", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/337", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/336", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/332", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/331", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/330", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/329", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/328", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Admin can revoke admin rights of every other admin, including himself.", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/327", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Admin can revoke admin rights of every other admin, including himself."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/326", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/325", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/324", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/323", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/321", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/320", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/318", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/317", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/314", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/313", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/312", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/311", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Contract admin lockout due to admin disabling himself", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/310", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Contract admin lockout due to admin disabling himself"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/309", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/308", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/306", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/305", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/304", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/303", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/302", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/301", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/300", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/299", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "If ```_linearVestAmount``` is set to 0 claimants will not be able to claim. ", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/295", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "If ```_linearVestAmount``` is set to 0 claimants will not be able to claim. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/294", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/293", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Vesting Schedule Start and End Time can be Set in The Past ", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/292", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-09-vtvl-findings", "body": "Vesting Schedule Start and End Time can be Set in The Past "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/284", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/282", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/281", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/279", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Variable balance token causing fund lock and loss", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/278", "labels": ["bug", "enhancement", "2 (Med Risk)", "sponsor confirmed", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L295 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L388   # Vulnerability details  ## Impact  Some ERC20 token's balance could change, one example is stETH. The balance could become insufficient at the time of `withdraw()`. User's fund will be locked due to DoS. The way to take the fund out is to send more token into the contract, causing fund loss to the protocol. And there is no guarantee that until the end time the balance would stay above the needed amount, the lock and loss issue persist.    ## Proof of Concept  For stETH like tokens, the `balanceOf()` value might go up or down, even without transfer. ```solidity // stETH     function balanceOf(address who) external override view returns (uint256) {         return _shareBalances[who].div(_sharesPerToken);     } ```  In `VTVLVesting`, the `require` check for the spot `balanceOf()` value will pass, but it is possible that as time goes on, the value become smaller and fail the transfer. As a result, the `withdraw()` call will revert, causing DoS, and lock user's fund. ```solidity // contracts/VTVLVesting.sol     function _createClaimUnchecked() private  hasNoClaim(_recipient) {         // ...         require(tokenAddress.balanceOf(address(this)) >= numTokensReservedForVesting + allocatedAmount, \"INSUFFICIENT_BALANCE\");         // ...     }      function withdraw() hasActiveClaim(_msgSender()) external {         // ...         tokenAddress.safeTransfer(_msgSender(), amountRemaining);         // ...     } ```   #### Reference https://etherscan.io/address/0x312ca0592a39a5fa5c87bb4f1da7b77544a91b87#code   ## Tools Used Manual analysis.  ## Recommended Mitigation Steps  Disallow such kind of variable balance token."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/277", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/276", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/274", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/273", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/272", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/270", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/269", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/268", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/266", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/263", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/262", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/260", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/259", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Claim number value should be checked in the createClaimsBatch function.", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/258", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Claim number value should be checked in the createClaimsBatch function."}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/257", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Contracts admin privileged functions would revert if all Admins are unset", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/255", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Contracts admin privileged functions would revert if all Admins are unset"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/254", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/253", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/252", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/251", "labels": ["bug", "QA (Quality Assurance)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/249", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/248", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/246", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/242", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/240", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/234", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/227", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/223", "labels": ["bug", "G (Gas Optimization)", "old-submission-method"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/217", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/216", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/215", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/213", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/212", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/211", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/210", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "USE OF SOLIDITY VERSION 0.8.14 WHICH HAS  KNOWN ISSUES APPLICABLE TO vtvl", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/207", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "USE OF SOLIDITY VERSION 0.8.14 WHICH HAS  KNOWN ISSUES APPLICABLE TO vtvl"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/205", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/204", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/203", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/202", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/201", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/199", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/198", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/196", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/193", "labels": ["bug", "QA (Quality Assurance)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Tokens with lower number of decimals can result in postponed linear vesting for user", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/191", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "sponsor acknowledged"], "target": "2022-09-vtvl-findings", "body": "Tokens with lower number of decimals can result in postponed linear vesting for user"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/189", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/188", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/185", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/183", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/182", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/181", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/180", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/178", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/177", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/176", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/174", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/173", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Tracking of vestingRecipients array does not remove recipient when revoking claim", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/171", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Tracking of vestingRecipients array does not remove recipient when revoking claim"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/170", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/168", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/167", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Admins can create a situation where there are no admins by stripping them of their authority.", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/165", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "Admins can create a situation where there are no admins by stripping them of their authority."}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/161", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/160", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/158", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/152", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/151", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/150", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/147", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/146", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/143", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/142", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/141", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "not able to create claim", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/140", "labels": ["bug", "2 (Med Risk)", "disagree with severity", "flag for judge", "sponsor acknowledged"], "target": "2022-09-vtvl-findings", "body": "not able to create claim"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/136", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/134", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/133", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/132", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/131", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/130", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "possible DoS on vestingRecipients due to lack of disposal mechanism", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/128", "labels": ["bug", "enhancement", "2 (Med Risk)", "sponsor confirmed"], "target": "2022-09-vtvl-findings", "body": "# Lines of code  https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L224 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L245 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L302 https://github.com/code-423n4/2022-09-vtvl/blob/f68b7f3e61dad0d873b5b5a1e8126b839afeab5f/contracts/VTVLVesting.sol#L317   # Vulnerability details  ## Impact - L224/245/302/317 - When the smart contracts start to be used, the variable in storage vestingRecipients will start to be filled with addresses, as there is no mechanism to eliminate elements, this will cause the allVestingRecipients() function to generate a DoS yes has many addressess.   ## Recommended Mitigation Steps In the withdraw() function you could remove the element from vestingRecipients that no longer has vesting. This would make the variable not grow without reducing elements. "}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/127", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/126", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/120", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/119", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/118", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/117", "labels": ["bug", "G (Gas Optimization)"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "QA Report", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/116", "labels": ["bug", "QA (Quality Assurance)"], "target": "2022-09-vtvl-findings", "body": "QA Report"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/115", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/114", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}, {"title": "Gas Optimizations", "html_url": "https://github.com/code-423n4/2022-09-vtvl-findings/issues/112", "labels": ["bug", "G (Gas Optimization)", "edited-by-warden"], "target": "2022-09-vtvl-findings", "body": "Gas Optimizations"}]