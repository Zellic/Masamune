[
    {
        "title": "3.1 The claimReceiverContract variable is not fully validated",
        "target": " EarlyAdopterPool",
        "category": " Coding Mistakes",
        "severity": " High",
        "likelihood": " Low ",
        "impact": " Medium ",
        "bodyDescription": "When the user is claiming funds through the claim() function, all of the user's de- posited funds are sent to the claimReceiverContract, which is set by the owner. This is a storage variable that is set using the setClaimReceiverContract() function.  Within the setClaimReceiverContract() function, the only validation done on the ad- dress of the contract is to ensure that it is not address(0). This validation is not enough, as it is possible for the owner to set the address to a contract that is not able to transfer out any ETH or ERC20 tokens that it receives. In this instance, the user's funds would be lost forever. ",
        "bodyImpact": "There is a risk that user funds may become permanently locked either by accident or as a result of deliberate actions taken by a malicious owner. ",
        "bodyRecommendations": "See Ethereum Improvement Proposal EIP-165 for a way to determine whether a con- tract implements a certain interface. This will prevent the owner from making a mis- take, but it will not prevent a malicious owner from locking user funds forever.  Alternatively, consider not allowing this contract address to bemodified by the owner. It should be made immutable. If the receiver contract's implementation needs to change in the future, consider using a proxy pattern to do that. ",
        "remediation": "Gadze Finance SEZC acknowledged this finding and stated that they understand the risk, but have mitigated it by ensuring that multiple parties are involved when setting the receiver contract. Their official response is produced below.  Zellic 9 Gadze Finance SEZC  https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified   The receiver contract has not been set yet andwill be set throughmultiple parties being involved with the decision, we do understand the risk however, we have mitigated this with multiple parties being involved. We do understand it only takes 1 address to make the call and this is a risk.  Zellic 10 Gadze Finance SEZC   "
    },
    {
        "title": "3.2 Using values from emitted events may not be fully accurate",
        "target": " EarlyAdopterPool",
        "category": " Coding Mistakes",
        "severity": " Informational",
        "likelihood": " N/A ",
        "impact": " Informational ",
        "bodyDescription": "The getContractTVL() function uses the contract's balance of ERC20 tokens and Ether to determine the TVL of the pool.  function getContractTVL() public view returns (uint256 tvl) { tvl = (rETHInstance.balanceOf(address(this)) +  wstETHInstance.balanceOf(address(this)) + sfrxETHInstance.balanceOf(address(this)) + cbETHInstance.balanceOf(address(this)) + address(this).balance);  }  This function is then used when emitting events related to TVL. ",
        "bodyImpact": "The issue is that the balance of the ERC20 tokens in the contract, aswell as the balance of Ether in the contract, can be manipulated by any user by sending tokens / Ether di- rectly to the contract (as opposed to going through the deposit() function). Therefore, depending on the TVL values returned from this function (and, by extension, emitted through the events such as ERC20TVLUpdated) may be inaccurate.  Without knowing how the values emitted through these events are used off chain, it is impossible to determine the impact. ",
        "bodyRecommendations": "Consider tracking the balance of tokens and Ether in the contract separately through storage variables. This will prevent directly transferred tokens and Ether from being counted towards the TVL.  Otherwise, ensure that the values emitted by TVL-related events are not used for critical operations off chain.  Zellic 11 Gadze Finance SEZC   ",
        "remediation": "Gadze Finance SEZC acknowledged this finding and stated that they want to include any funds sent to the contract to be included in the TVL. Their official response is produced below.  We understand the issue revolving an inaccurate TVL due to the contract being able to receive funds through direct transfers, however, we would still like to include any funds sent to the contract in our total value locked.  Zellic 12 Gadze Finance SEZC   "
    },
    {
        "title": "3.3 Magic numbers should be replaced with immutable con-",
        "target": " EarlyAdopterPool",
        "category": " Coding Mistakes",
        "severity": " Informational",
        "likelihood": " N/A ",
        "impact": " Informational ",
        "bodyDescription": "There are a number of places in the codewheremagic numbers are used. For brevity's sake, the following is a list of line numbers where magic numbers are being used:  * 187 * 218 * 225 to 228 * 233 to 235 ",
        "bodyImpact": "The use of magic numbers makes the code confusing, both for the developers in the future and for auditors. ",
        "bodyRecommendations": "Consider replacing magic numbers with immutable constants.  In instances where the magic number is used as a flag to determine which branch a function should take, consider using either an enum or separating the logic out into multiple functions. ",
        "remediation": "Gadze Finance SEZC acknowledged this finding and stated that they are not worried about this issue. The findingwas partially remediatedby refactoring theway themagic numbers are used in commit ebd3f11a. Their official response is produced below.  The magic numbers have either been marked immutable or removed and sim- plified. It was often the use of the numbers to simplify large numbers for the reader.  Zellic 13 Gadze Finance SEZC  https://en.wikipedia.org/wiki/Magic_number_(programming) https://github.com/GadzeFinance/dappContracts/commit/ebd3f11af54be37d2510349e304965e3a2936e4d  "
    },
    {
        "title": "3.4 Use the correct function modifiers",
        "target": " EarlyAdopterPool",
        "category": " Coding Mistakes",
        "severity": " Informational",
        "likelihood": " N/A ",
        "impact": " Informational ",
        "bodyDescription": "The withdraw() function is marked as payable. This is incorrect as it does not make use of any ETH that it might (accidentally or otherwise) receive.  The withdraw() and claim() functions are marked as public, although they are not used anywhere else in the contract. ",
        "bodyImpact": "Functions that are marked as payable expect that ETHmay be received. If the function does not account for this, then users may accidentally send ETH when invoking these functions, leading to a loss of funds.  Functions that are only called externally should be marked as external. ",
        "bodyRecommendations": "Remove the payablemodifier from the withdraw() function.  Replace the publicmodifier with the externalmodifier in the withdraw() and claim() functions. ",
        "remediation": "Gadze Finance SEZC acknowledged and partially remediated this finding by removing the payablemodifier from the withdraw() function in commit b7be224c.  Zellic 14 Gadze Finance SEZC  https://github.com/GadzeFinance/dappContracts/commit/b7be224c0a11921de89f32444f6dc31fbdb7c3ed  "
    },
    {
        "title": "3.5 Use safe ERC20 functions",
        "target": " EarlyAdopterPool",
        "category": " Coding Mistakes",
        "severity": " Informational",
        "likelihood": " N/A ",
        "impact": " Informational ",
        "bodyDescription": "This contract makes use of the ERC20 transfer() and transferFrom() functions. Not all ERC20 tokens adhere to the standard definition of these functions. ",
        "bodyImpact": "The tokens that are used in this contract (rETH, wstETH, sfrxETH, cbETH) all adhere to the ERC20 token standard, so there is no impact. However, the cbETH token contract specifically uses a proxy pattern, which means that the contract is upgradable. If it were ever to upgrade to a new implementation where the transfer() or transferFro m() functions did not adhere to the standard anymore, then the contract would stop functioning. ",
        "bodyRecommendations": "Consider replacing the use of transfer() and transferFrom() with the safe ERC20 safeTransfer() and safeTransferFrom() functions. ",
        "remediation": "Gadze Finance SEZC acknowledged this issue and contacted the Coinbase team to en- sure there were no planned upgrades to the cbETH token contract that would change the transfer() and transferFrom() function definitions. TheCoinbase teamconfirmed that this was the case. Their official response is produced below.  The ERC20 tokens being used with transfers have been checked by the team and they all follow the same patterns. Due to these being the only tokens used, with no option to add others, we are happy with the implementation.  Zellic 15 Gadze Finance SEZC   "
    },
    {
        "title": "3.6 Unused variables should be removed",
        "* Target": " EarlyAdopterPool",
        "* Category": " Coding Mistakes",
        "* Likelihood": " N/A ",
        "* Severity": " Informational",
        "* Impact": " Informational ",
        "Description": "The following storage variables are not used anywhere in the contract:  1. SCALE  2. multiplierCoefficient  In the calculateUserPoints() function, the numberOfMultiplierMilestones variable is initialized but not used:  function calculateUserPoints(address _user) public view returns (uint256) { /) [ ...)) ]  /)Variable to store how many milestones (3 days) the user deposit lasted uint256 numberOfMultiplierMilestones = lengthOfDeposit / 259200;  if (numberOfMultiplierMilestones > 10) { numberOfMultiplierMilestones = 10;  }  /) [ ...)) ] } ",
        "Impact": "Unused variables introduce unnecessary complexity to the code andmay lead to pro- grammer error in the future. ",
        "Recommendations": "Remove the variables unless there are plans to use them in the future.  Zellic 16 Gadze Finance SEZC   ",
        "Remediation": "The SCALE variable was removed in commit 8d080521  The multiplierCoefficient variable was removed in commit 1e5e61bc  The numberOfMultiplierMilestones variable was removed in commit f23285b7  Zellic 17 Gadze Finance SEZC  https://github.com/GadzeFinance/dappContracts/commit/8d080521196202e9774dc03f7e674a6b8d2b2b57 https://github.com/GadzeFinance/dappContracts/commit/1e5e61bcb3529da01649e60025ebe76cd759e626 https://github.com/GadzeFinance/dappContracts/commit/f23285b73f5e89903b7d0afafcc5d567633f8ecf   4 Threat Model  This provides a full threat model description for various functions. As time permitted, we analyzed each function in the smart contracts and created a written threat model for some critical functions. A threat model documents a given function's externally controllable inputs and how an attacker could leverage each input to cause harm.  Not all functions in the audit scope may have been modeled. The absence of a threat model in this section does not necessarily suggest that a function is safe.  4.1 Module: EarlyAdopterPool.sol  Function: claim()  Used to claim user funds.  Branches and code coverage (including function calls)  Intended branches  * Allows user to claim rewarded funds successfully. 4# Test coverage  Negative behavior  * Should fail if claiming is not open. 4# Negative test  * Should fail if the claimReceiverContract is not set. 4# Negative test  * Should fail if the claimDeadline has been reached. 4# Negative test  * Should fail if the user has not deposited anything. # Negative test  Function: depositEther()  Used to deposit Ether into the contract.  Branches and code coverage (including function calls)  Intended branches  Zellic 18 Gadze Finance SEZC    * User is able to deposit Ether successfully. 4# Test coverage  * The correct events are successfully emitted.  Negative behavior  * Deposit should fail if claiming is open (i.e., depositing is closed). # Negative test  Function: deposit(address _erc20Contract, uint256 _amount)  Used to deposit ERC20 tokens into the contract.  Inputs  * _erc20Contract - Control: Fully controlled.  - Constraints: Must be one of thewhitelisted tokens (rETH, sfrxETH,wstETH, cbETH).  - Impact: This is the token that is transferred out of the user's wallet to this contract.  * _amount - Control: Fully controlled.  - Constraints: Must be between minDeposit (0.1 Ether) and maxDeposit (100 Ether).  - Impact: This is the amount of tokens transferred out of the user's wallet to this contract.  Branches and code coverage (including function calls)  Intended branches  * User is successfully able to deposit all four tokens into the contract. 4# Test coverage  * The correct events are successfully emitted. 4# Test coverage  Negative behavior  * Deposit should fail if the user provides an unsupported token contract address. # Negative test  * Deposit should fail if claiming is open (i.e., depositing is closed). # Negative test  Zellic 19 Gadze Finance SEZC    Function call analysis  * deposit -> _erc20Contract.transferFrom(msg.sender, address(this), _amount ) - What is controllable?: _amount. - If return value controllable, how is it used and how can it go wrong?: N/A.  - What happens if it reverts, reenters, or does other unusual control flow?: If it reverts, nothing happens. If it reenters, no harm can be done as the checks-effects-interactions pattern is used.  Function: setClaimReceiverContract(address _receiverContract)  Sets the contract that will receive claimed funds.  Inputs  * _receiverContract - Control: Fully controlled.  - Constraints: Cannot be address(0). - Impact: User funds are transferred to this contractwhen funds are claimed.  Branches and code coverage (including function calls)  Intended branches  * The claim receiver contract address is set successfully. 4# Test coverage  * The required events are emitted. # Test coverage  Negative behavior  * Should fail if not called by the owner. 4# Negative test  * Should fail if the address of the contract is address(0). 4# Negative test  Function: setClaimingOpen(uint256 _claimDeadline)  Sets claiming to open with a specified _claimDeadline.  Inputs  * _claimDeadline  Zellic 20 Gadze Finance SEZC    - Control: Fully controlled.  - Constraints: N/A.  - Impact: Claiming will close when this deadline is reached.  Branches and code coverage (including function calls)  Intended branches  * Should open claiming and set the deadline successfully. # Test coverage  * Should emit the required events successfully. # Test coverage  Negative behavior  * Should fail if not called by the contract owner. 4# Negative test  Function: withdraw()  Used to withdraw all funds the user may have deposited into this contract.  Branches and code coverage (including function calls)  Intended branches  * User is able to withdraw funds successfully. 4# Test coverage  Zellic 21 Gadze Finance SEZC    5 Audit Results  At the time of our audit, the code was not deployed to mainnet EVM.  During our audit, we discovered six findings. Of these, one was of medium risk and five were suggestions (informational). Gadze Finance SEZC acknowledged all findings and implemented fixes for some of them.  5.1 Disclaimers  This assessment does not provide any warranties about finding all possible issues within its scope; in other words, the evaluation results do not guarantee the absence of any subsequent issues. Zellic, of course, also cannot make guarantees about any additional code added to the assessed project after the audit version of our assess- ment. Furthermore, because a single assessment can never be considered compre- hensive, we always recommendmultiple independent assessments pairedwith a bug bounty program.  For each finding, Zellic provides a recommended solution. All code in these recom- mendations are intended to convey how an issue may be resolved (i.e., the idea), but they may not be tested or functional code.  Finally, the contents of this assessment report are for informational purposes only; do not construe any information in this report as legal, tax, investment, or financial advice. Nothing contained in this report constitutes a solicitation or endorsement of a project by Zellic.  Zellic 22 Gadze Finance SEZC   \tAbout Zellic \tExecutive Summary \tGoals of the Assessment \tNon-goals and Limitations \tResults  \tIntroduction \tAbout EtherFi \tMethodology \tScope \tProject Overview \tProject Timeline  \tDetailed Findings \tThe claimReceiverContract variable is not fully validated \tUsing values from emitted events may not be fully accurate \tMagic numbers should be replaced with immutable constants \tUse the correct function modifiers \tUse safe ERC20 functions \tUnused variables should be removed  \tThreat Model \tModule: EarlyAdopterPool.sol  \tAudit Results \tDisclaimers  "
    }
]