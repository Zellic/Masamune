[
    {
        "title": "3.1 Same token swap is allowed",
        "target": " DfynRFQ",
        "category": " Business Logic",
        "severity": " Low",
        "likelihood": " Medium ",
        "impact": " Low ",
        "bodyDescription": "A user might mistakenly perform a same-token swap via the protocol, since there are no restrictions against that. ",
        "bodyImpact": "In function _swap() there are no checks whatsoever for whether the tokens[0] and tokens[1] are identical.  function _swap( address custodian, address[] calldata tokens, uint256[] calldata amounts, uint64 deadline, bytes calldata signature  ) internal onlyWhitelisted(custodian) returns (bool) { Swap memory swap = Swap({  user: msg.sender, custodian: custodian, token0: tokens[0], token1: tokens[1], amount0: amounts[0], amount1: amounts[1], deadline: deadline, nonce: nonces[msg.sender], chainId: chainId  });  require(block.timestamp < swap.deadline, \"Expired Order\"); require(verify(swap, signature), \"Invalid Signer\"); require(swap.amount1 > 0 &) swap.amount0 > 0, \"amount !) 0\");  Zellic 8 Router Protocol    This can lead to loss of the gas cost used in the transaction, as well as the tokens lost to protocol fees, all due to an undesireable action performed by the user in the first place. ",
        "bodyRecommendations": "We recommend adding an additional check when performing a swap, such that the tokens on either side of the swap are not the same.  function _swap( address custodian, address[] calldata tokens, uint256[] calldata amounts, uint64 deadline, bytes calldata signature  ) internal onlyWhitelisted(custodian) returns (bool) { require(tokens[0] !) tokens[1], \"Same token swap is disallowed\"); Swap memory swap = Swap({  user: msg.sender, custodian: custodian, token0: tokens[0], token1: tokens[1], amount0: amounts[0], amount1: amounts[1], deadline: deadline, nonce: nonces[msg.sender], chainId: chainId  });  require(block.timestamp < swap.deadline, \"Expired Order\"); require(verify(swap, signature), \"Invalid Signer\"); require(swap.amount1 > 0 &) swap.amount0 > 0, \"amount !) 0\"); ",
        "remediation": "This issue has been acknowledgedby theRouter teamandmitigated in commit 3be1183.  Zellic 9 Router Protocol  https://github.com/dfyn/dfyn-RFQ/commit/3be118395f415372c77a1f7a34f6174d80dbf1f0  "
    },
    {
        "title": "3.2 DfynRFQ provides a function to renounce ownership",
        "target": " DfynRFQ ",
        "category": " Business Logic",
        "severity": " Informational",
        "likelihood": " N/A ",
        "impact": " Informational ",
        "bodyDescription": "The DfynRFQ contract implements Ownable functionality, which provides a method named renounceOwnership that removes the current owner. This is likely not a de- sired feature. ",
        "bodyImpact": "If renounceOwnershipwere called, the contract would be left without an owner. ",
        "bodyRecommendations": "Override the renounceOwnership function:  function renounceOwnership() public override onlyOwner{ revert(\"This feature is not available.\");  } ",
        "remediation": "This issue has been mitigated by the Router team in commit 3be1183.  Zellic 10 Router Protocol  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol#L61 https://github.com/dfyn/dfyn-RFQ/commit/3be118395f415372c77a1f7a34f6174d80dbf1f0  "
    },
    {
        "title": "3.3 msg.sender.transfer() function usage",
        "* Target": " DfynRFQ ",
        "* Category": " Business Logic",
        "* Likelihood": " N/A ",
        "* Severity": " Informational",
        "* Impact": " Informational ",
        "Description": "The swapTokenToNative calls the transfer function to send requested ether amount to msg.sender account. ",
        "Impact": "The transfer function uses a hardcoded amount of GAS and will fail if GAS costs in- crease in the future. ",
        "Recommendations": "Consider using msg.sender.call.value(value)(\"\") function:  (bool success, ) = msg.sender.call.value(amounts[1].sub(feeAmount))(\"\"); require(success, \"Transfer failed.\"); ",
        "Remediation": "This issue has been mitigated by the Router team in commit 3be1183.  Zellic 11 Router Protocol  https://consensys.github.io/smart-contract-best-practices/development-recommendations/general/external-calls/#dont-use-transfer-or-send https://github.com/dfyn/dfyn-RFQ/commit/3be118395f415372c77a1f7a34f6174d80dbf1f0   4 Discussion  The purpose of this section is to document miscellaneous observations that we made during the assessment.  4.1 Array indexes may be out of bounds  In the case of the tokens and amounts array used in the _swap() function, no check on their length is performed. There are no restrictions in regards to verifying whether their lengths are equal, as is to be expected.  Due to the nature of how the protocol was built, we recommend checking that their lengths are equal to one another as well as checking that the length of one of them is equal to 2.  function _swap( address custodian, address[] calldata tokens, uint256[] calldata amounts, uint64 deadline, bytes calldata signature  ) internal onlyWhitelisted(custodian) returns (bool) { require(tokens.length =) amounts.length, \"Array size mismatch\"); require(tokens.length =) 2, \"Array with inadequate size\"); /) ...))  This issue has been properly resolved in commit 3be1183.  4.2 Gas optimization in reused operation  In swapTokenToNative() the amounts[1].sub(feeAmount) call is used three times, per- forming unnecessary function calls and subsequent operations. In such cases, we recommend caching the operation that is to be reused and using the cached value instead.  /)...)) uint256 amount_after_fee = amounts[1].sub(feeAmount);  Zellic 12 Router Protocol  https://github.com/dfyn/dfyn-RFQ/commit/3be118395f415372c77a1f7a34f6174d80dbf1f0   IERC20(tokens[1]).safeTransferFrom(custodian, address(this), amount_after_fee); IWETH(WETH).withdraw(amount_after_fee); payable(msg.sender).transfer(amount_after_fee); /)...))  This issue has been addressed in commit 3be1183.  4.3 Unnecessary safeMath functions call  The safeMath library starting from the 0.8.0 version of solidity does not implement additional checks for mathematical operations.  function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b;  } function sub(uint256 a, uint256 b) internal pure returns (uint256) {  return a - b; } function mul(uint256 a, uint256 b) internal pure returns (uint256) {  return a * b; } function div(uint256 a, uint256 b) internal pure returns (uint256) {  return a / b; }  You can avoid importing unnecessary library code as well as unnecessary calls to these functions to optimize the amount of gas used.  Zellic 13 Router Protocol  https://github.com/dfyn/dfyn-RFQ/commit/3be118395f415372c77a1f7a34f6174d80dbf1f0 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol#L93   5 Audit Results  At the time of our audit, the code was not deployed to mainnet.  During our audit, we discovered four findings. Of these, 1 was of low risk and 2 were suggestions (Informational). Router Protocol acknowledged all findings and imple- mented fixes.  5.1 Disclaimers  This assessment does not provide any warranties about finding all possible issues within its scope; in other words, the evaluation results do not guarantee the absence of any subsequent issues. Zellic, of course, also cannot make guarantees about any additional code added to the assessed project after the audit version of our assess- ment. Furthermore, because a single assessment can never be considered compre- hensive, we always recommendmultiple independent assessments pairedwith a bug bounty program.  For each finding, Zellic provides a recommended solution. All code in these recom- mendations are intended to convey how an issue may be resolved (i.e., the idea), but they may not be tested or functional code.  Finally, the contents of this assessment report are for informational purposes only; do not construe any information in this report as legal, tax, investment, or financial advice. Nothing contained in this report constitutes a solicitation or endorsement of a project by Zellic.  Zellic 14 Router Protocol   \tAbout Zellic \tExecutive Summary \tIntroduction \tAbout DfynRFQ \tMethodology \tScope \tProject Overview \tProject Timeline  \tDetailed Findings \tSame token swap is allowed \tDfynRFQ provides a function to renounce ownership \tmsg.sender.transfer() function usage  \tDiscussion \tArray indexes may be out of bounds \tGas optimization in reused operation \tUnnecessary safeMath functions call  \tAudit Results \tDisclaimers  "
    }
]