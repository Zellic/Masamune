[
    {
        "title": "3.1 Lack of validation",
        "target": " ConcentratedLiquidityPoolManager, ConcentratedLiquidityPool, Concen- tratedLiquidityPoolStaker ",
        "category": " Business Logic",
        "severity": " Low",
        "likelihood": " Low ",
        "impact": " Low  Descriptions  Below are the listings of each area missing a check:  1. ConcentratedLiquidityPoolManager.sol  * burn() - verify the existence of the position by checking position.liquid ity !) 0.  2. ConcentratedLiquidityPool.sol  * mint() - check that the contract balance for token0 and token1 is the same or greater after an external mintCallback call to an untrusted contract, even if the amount0Actual and amount1Actual values are zero.  * burn() - check that lower is less than upper. * swap() - check that the inAmount is not equal to zero. * _updateReserves - check that the reserve1 and reserve0 are no less than  amountOut.  3. ConcentratedLiquidityPoolStaker  * claimRewards() - verify the existence of the position by checking positio n.liquidity !) 0.  4. Ticks.sol  * cross() - add a check or remove the unchecked block wrapping currentLi quidity -= ticks[nextTickToCross].liquidity to prevent underflow. ",
        "bodyImpact": "Code maturity is very important in high-assurance projects. Checks help safeguard against unfortunate situations that might occur, help reduce the risk of lost funds as a  Zellic 9 SushiSwap    result of a swap or burn of tokens, and improveUX. Adding extra reverts can help clar- ify the internal mechanisms and reduce potential bugs that future developers might introduce while building on this project.  Below are example of when the lack of checks can lead to incorrect behavior of the contract.  Inside the Ticks.cross function, there are no checks that currentLiquidity is less then ticks[nextTickToCross].liquidity. Due to this lack of check during the swap, an un- derflow may occur in the case currentLiquidity =) 0 and Ticks.cross functions will be called to update the currentLiquidity value.  function cross( mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks, int24 nextTickToCross, uint160 secondsGrowthGlobal, uint256 currentLiquidity, ...)) ) internal returns (uint256, int24) {  ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;  if (zeroForOne) { unchecked {  if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) { currentLiquidity -= ticks[nextTickToCross].liquidity;  } else { ...))  } }  ...)) ",
        "bodyRecommendations": "We recommend adding the requisite checks/reverts to the areas above and adding documentation to clarify reverts. ",
        "remediation": "SushiSwap acknowledged this finding. The issue from first point has been fixed in commit 557fdf0e. The issue from third point has been fixed in commit 3df8346c.  Zellic 10 SushiSwap  https://github.com/mshakeg/trident/commit/557fdf0e84868a95a04ac8d5626685d157387929 https://github.com/mshakeg/trident/commit/3df8346ce309af421262cdc37ca53908739e5b30  "
    },
    {
        "title": "3.2 Centralization risks",
        "* Target": " MasterDeployer, ConcentratedLiquidityPool",
        "* Category": " Business Logic",
        "* Likelihood": " N/A ",
        "* Severity": " Informational",
        "* Impact": " Informational  Descriptions  There are a few centralization risks worth consideration.  1. The Owner may set the barFee in the value of 100% of the provider's liquidity fee.  2. TheOwner canwhitelist an unreliable factory contract address or delete a trusted one. ",
        "Impact": "If the private key is compromised, an attacker can get the entire amount of fee from the swaps. ",
        "Recommendations": "Use a multi-signature address wallet; this would prevent an attacker from causing economic damage if a private key were compromised. ",
        "Remediation": "SushiSwap acknowledged this finding.  Zellic 14 SushiSwap  https://github.com/mshakeg/trident/commit/2b11bb3371a877e62d76e7086aa8ba52c15887c6   5 Audit Results  At the time of our audit, the code was not deployed to mainnet EVM.  During our audit, we discovered two findings. Of these, onewas low risk and onewas a suggestion (informational). SushiSwap acknowledged all findings and implemented fixes.  5.1 Disclaimers  This assessment does not provide any warranties about finding all possible issues within its scope; in other words, the evaluation results do not guarantee the absence of any subsequent issues. Zellic, of course, also cannot make guarantees about any additional code added to the assessed project after the audit version of our assess- ment. Furthermore, because a single assessment can never be considered compre- hensive, we always recommendmultiple independent assessments pairedwith a bug bounty program.  For each finding, Zellic provides a recommended solution. All code in these recom- mendations are intended to convey how an issue may be resolved (i.e., the idea), but they may not be tested or functional code.  Finally, the contents of this assessment report are for informational purposes only; do not construe any information in this report as legal, tax, investment, or financial advice. Nothing contained in this report constitutes a solicitation or endorsement of a project by Zellic.  Zellic 15 SushiSwap   \tAbout Zellic \tExecutive Summary \tIntroduction \tAbout Trident Concentrated Liquidity Pool \tMethodology \tScope \tProject Overview \tProject Timeline  \tDetailed Findings \tLack of validation \tCentralization risks  \tDiscussion \tChecks-effects-interactions pattern \tIncreasing test suite code coverage \tTension between security and gas optimization  \tAudit Results \tDisclaimers  "
    }
]