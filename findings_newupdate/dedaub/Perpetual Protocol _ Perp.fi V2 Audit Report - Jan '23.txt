M1 Normal protocol function depends on the timely updates of the price feeds and of the associated PriceFeedDispatcher STATUS OPEN The PriceFeedDispatcher contract, which by default uses a Chainlink price feed (contract ChainlinkPriceFeedV3), might dispatch to the internal Uniswap 
V3 vAMM price feed if the underlying Chainlink price feed has timed-out, i.e., has not been successfully updated for a period of time. Thus, the Chainlink price feed and consequently the PriceFeedDispatcher contracts methods that update the current price have to be successfully called at regular time intervals not only to eectively keep track of the asset prices but also of the status of the Chainlink price feed used by the PriceFeedDispatcher to timely switch to the fallback Uniswap oracle. Lets consider the following concrete scenario for beer clarity: a Chainlink oracle that is consulted by a certain Chainlink price feed of the Perpetual protocol is not functioning properly leading to the price geing timed-out. However, the PriceFeedDispatcher using the aforementioned Chainlink price feed is not called to update or get the price during the time-out period. In that case the status of the dispatcher never changes to Uniswap and is as if the timeout never happened. 0 The current design of the Chainlink price feeds and the PriceFeedDispatcher contracts requires the owners/operators and/or users to run o-chain bots that are programmed to call the update/query methods of the aforementioned contracts at the right intervals to ensure the normal function of the protocol. However, such o-chain solutions cannot be trusted even for events that might be rare, such as a Chainlink oracle reporting the wrong price for a prolonged period of time. We believe that there should be a fallback (implemented on-chain) that ensures the normal function of the protocol even if the state of the price feeds and dispatchers is not timely updated, be it due to o-chain bot malfunction or absence of market participants (and therefore sparse contract calls/updates). M2 Chainlink deviation checks do not take time into account OPEN ChainlinkPriceFeedV3 ensures that every change in the Chainlink price is not larger by a certain fraction of the old price. However, this check only takes into account the dierence in price, and not the time that it took for this dierence to occur. function _isOutlier(uint256 price) internal view returns (bool) { uint256 diff = _lastValidPrice >= price ? _lastValidPrice - price : price - _lastValidPrice; uint256 deviationRatio = diff.mul(_ONE_HUNDRED_PERCENT_RATIO).div(_lastValidPrice); return deviationRatio >= _maxOutlierDeviationRatio; } Time is only implicitly taken into account by the frequency of updates: if they are regular then this is not an issue, however, too frequent or infrequent updates could potentially be problematic:  Assuming that an adversary can control the Chainlink updates and wishes to produce a huge change without triggering the deviation check. This could be achieved by applying a change of the maximum allowed ratio but in every 0 single block. The overall dierence can be large without any individual update exceeding the limit.  Inversely, assume that a token is volatile and its price is rapidly increasing. An adversary might wish to prevent the oracle from registering the increase in price; this could be achieved by preventing the update transactions from executing, using some DoS technique (e.g., DoS on the nodes sending such transactions). If the price gradually increases above the maximum ratio over a period of time, but no update happens during that period, then the next update will trigger the deviation limit, further preventing the price from updating. For the above reasons we recommend that the deviation checks take time into account. LOW SEVERITY: ID Description ClearingHouse::quitMarket is not guarded against 
L1 reentrancy STATUS OPEN The function ClearingHouse::quitMarket is not guarded against reentrancy. Even though there is no such threat in the current version of the codebase, we would suggest adding reentrancy guards (as it is done for all functionality that is oered by the ClearingHouse contract) as a precaution measure, in case a reentrancy is made possible by future code changes. No StatusUpdated event emied in PriceFeedDispatcher OPEN constructor 
L2 0 There is no StatusUpdated event emied in the PriceFeedDispatcher constructor even though the _chainlinkPriceFeed
V3 storage variable is set. The status storage variable is also technically set for the rst time. 0 OTHER/ ADVISORY ISSUES: This section details issues that are not thought to directly aect the functionality of the project, but we recommend considering them. 
V3 storage variable is set. The status storage variable is also technically set for the rst time. 0 OTHER/ ADVISORY ISSUES: This section details issues that are not thought to directly aect the functionality of the project, but we recommend considering them. A1 PriceFeedUpdater does not allow adding/removing feeds INFO The PriceFeedUpdated contract does not support addition and removal of price feeds, meaning that the whole contract should be redeployed in case this is a need. A2 Storage variables can be made immutable INFO There exist a couple of storage variables that are set in the constructor and cannot be modied afterwards. These variables can be declared immutable:  UniswapV3PriceFeed::pool  PriceFeedDispatcher::_chainlinkPriceFeedV3 A3 Compiler known issues INFO The contracts were compiled with the Solidity compiler v0.7.6 which, at the time of writing, has a few known bugs. We inspected the bugs listed for this version and concluded that the subject code is unaected. 0 CENTRALIZATION ASPECTS It is often desirable for DeFi protocols to assume no trust in a central authority, including the protocols owner. Even if the owner is reputable, users are more likely to engage with a protocol that guarantees no catastrophic failure even in the case the owner gets hacked/compromised. We list issues of this kind below. (These issues should be considered in the context of usage/deployment, as they are not uncommon. Several high-prole, high-value protocols have signicant centralization threats.) As already mentioned in issue M1, the normal function of the protocol depends on the timely updates of the Chainlink price feeds and of the associated PriceFeedDispatcher contracts. These updates are performed by o-chain bots, which cannot be fully trusted. 0 
