4. Token management diﬃculties caused by the addition of arbitrary tokens 
5. Initialization functions can be front-run 
6. Circuit crashes when invalid blocks are generated by the operator 
7. Saving large JSON integers could result in interoperability issues 1 2 3 5 6 7 8 9 10 12 13 13 16 19 20 20 23 25 27 
8. Lack of contract existence check on delegatecall will result in unexpected behavior 29 
9. Numerical comparison gadget does not support very large numbers 
10. Solidity compiler optimizations can be problematic 
11. Circuits rely on undeﬁned behavior in libﬀ A. Vulnerability Categories B. Code Maturity Categories C. Token Integration Checklist D. Code Quality Recommendations E. Fix Log Executive Summary Engagement Overview DeGate engaged to review the security of its smart contracts. From February 7 to February 22, 2022, a team of three consultants conducted a security review of the client-provided source code, with six person-weeks of eﬀort. On March 7, 2022, we started an additional week of review focused on the circuits and gadgets built using ethsnarks . Details of the project’s timeline, test targets, and coverage are provided in subsequent sections of this report. Project Scope Our testing eﬀorts were focused on the identiﬁcation of ﬂaws that could result in a compromise of conﬁdentiality, integrity, or availability of the target system. We conducted this audit with partial knowledge of the target system, including access to the circuit source code, smart contract source code, and documentation. We performed automated analysis and a manual review of the code, in addition to running system elements. Summary of Findings The audit uncovered signiﬁcant ﬂaws that could impact system conﬁdentiality, integrity, or availability. These include incorrect ERC20 token handling, undeﬁned behavior in circuits, and unclear gadget limitations. This report includes the ﬁndings of a December 2021 audit of the DeGate protocol. A summary of the ﬁndings of both audits is provided below. EXPOSURE ANALYSIS CATEGORY BREAKDOWN Severity High Medium Low Informational Undetermined Count Category Count Conﬁguration Data Validation Cryptography Undeﬁned Behavior Project Summary Contact Information The following managers were associated with this project: Dan Guido , Account Manager dan@trailofbits.com Sam Greenup , Project Manager sam.greenup@trailofbits.com The following engineers were associated with this project: Shaun Mirani , Consultant shaun.mirani@trailofbits.com Devashish Tomar , Consultant devashish.tomar@trailofbits.com Will Song , Consultant will.song@trailofbits.com Project Timeline The signiﬁcant events and milestones of the project are listed below. Date Event February 7, 2022 Pre-project kickoﬀ call February 11, 2022 Delivery of status report February 22, 2022 Delivery of ﬁnal report; report readout meeting March 30, Project Goals The engagement was scoped to provide a security assessment of the DeGate smart contracts. Speciﬁcally, we sought to answer the following non-exhaustive list of questions: ● ● ● ● ● ● ● ● ● ● ● Do the system components have appropriate access controls? Is it possible to manipulate the system by front-running transactions? Is it possible for participants to steal or lose tokens or shares? Are there any circumstances under which arithmetic errors could aﬀect the system? Are any of the system components vulnerable to denial-of-service attacks, and could any be used in phishing? Does the exchange bookkeeping arithmetic hold? Are critical events logged? Are the oﬀ-chain computations that use circuits implemented correctly? Is each circuit variable in generate_r1cs_constraints properly constrained? Does every circuit and gadget correctly implement the corresponding zero-knowledge statement? Do the circuits use the low-level gadgets correctly and safely? Project Targets The engagement involved a review and testing of the following target. DeGate Protocol Repository https://github.com/degatedev/degate-protocols Version 7d5e66a1e22d7657c888463256e0175119745621 Type Decentralized Exchange Platforms Solidity, C++ Project Coverage This section provides an overview of the analysis coverage of the review, as determined by our high-level engagement goals. Our approaches and their results include the following: ● ● ● ● ● ● A review of the addition and handling of ERC20 tokens revealed several issues that could aﬀect the DeGate exchange’s behavior and users; these include a failure to ensure that tokens are registered to the appropriate list (i.e., the normal or reserved list) ( TOB-DeGate-1 ) and the incorrect handling of non-standard tokens ( TOB-DeGate-4 ). Analysis of the circuits revealed undeﬁned behavior ( TOB-DeGate-11 ), interoperability issues caused by the use of JSON integers ( TOB-DeGate-7 ), and gadget limitations ( TOB-DeGate-9 ). Detailed analysis of the circuits’ correctness yielded a ﬁnding regarding the range checks of a gadget used in fee calculations ( TOB-DeGate-2 ). A manual review of the processing of block deposits and withdrawals enabled us to assess the ways in which assets ﬂow into the DeGate protocol and users interact on-chain; we did not ﬁnd any issues. Validation of the external interactions did not reveal any reentrancy risks. A review of the functions for front-running opportunities did not reveal any critical concerns, although a user could front-run a call to an initialization function to disrupt a contract’s deployment ( TOB-DeGate-5 ). A review of the issues discovered in our previous DeGate audit determined that several circuit and smart contract issues remain unresolved ( TOB-DeGate-4 , TOB-DeGate-5 , TOB-DeGate-6 , TOB-DeGate-7 , TOB-DeGate-8 , TOB-DeGate-9 , TOB-DeGate-10 , and TOB-DeGate-11 ). Coverage Limitations Because of the time-boxed nature of testing work, it is common to encounter coverage limitations. During this project, we were unable to perform comprehensive testing of certain system elements, which may warrant further review. The following is a summary of the coverage limitations of the engagement . ● We performed a limited review of the base cryptography used by the poseidon and ethsnarks circuits and their dependencies as well as the user / validator key management system. ● The operator codebase was out of scope. Codebase Maturity Evaluation uses a traﬃc-light protocol to provide each client with a clear understanding of the areas in which its codebase is mature, immature, or underdeveloped. Deﬁciencies identiﬁed here often stem from root causes within the software development life cycle that should be addressed through standardization measures (e.g., the use of common libraries, functions, or frameworks) or training and awareness programs. Category Summary Arithmetic Auditing Authentication / Access Controls Complexity Management Decentralization Result Satisfactory Satisfactory The codebase generally uses SafeMath functions to perform calculations, and we did not identify any potential overﬂows in places in which those functions are not used. Most of the functions emit events where appropriate. The events emitted by the code are suﬃcient for monitoring on-chain activity. However, we did not have access to an incident response plan or information on the use of oﬀ-chain components in behavior monitoring. We did not identify any serious access control issues. Satisfactory Moderate Moderate Many of the system’s functionalities, especially the block-processing functionalities, are broken up into multiple functions. This makes the code less readable and more diﬃcult to modify. Although the block submission process is centralized and the owner has the ability to shut down the exchange, users can force certain actions. For example, if a user’s deposit into the ExchangeV3 contract is never picked up by a validator and included in a block, the user can recover the funds by submitting an on-chain transaction. There is a similar mechanism for withdrawals: by executing a withdrawal that will not be timely picked up by a validator, a user could force ExchangeV3 to enter withdrawal mode, preventing the validator from submitting more blocks and allowing users to withdraw their funds. Documentation The protocol is a fork of Loopring v3.6.1 and therefore has a signiﬁcant amount of documentation. DeGate also provided documentation regarding changes to the original code; however, that documentation does not identify all of the changes or all of the features that were added or removed. Weak Front-Running Resistance We found one issue related to front-running ( TOB-DeGate-5 ). However, time constraints prevented us from exhaustively checking the protocol for front-running and unintended arbitrage opportunities. Further Investigation Required Low-Level Manipulation A substantial amount of assembly is used throughout the math and utility libraries (e.g., Poseidon ); however, time constraints prevented us from testing or verifying the libraries. Further Investigation Required Testing and Veriﬁcation We identiﬁed some failing unit tests. Certain of these tests fail because they rely on parts of the original Loopring code that have been removed by the DeGate team; other test cases were not properly set up or fail for other reasons. Weak Upgradeability Contracts including ExchangeV3 and DefaultDepositContract support proxy patterns for upgrades. DefaultDepositContract is used with a proxy pattern in some tests ( testExchangeUtil.ts ); however, during our ﬁrst call, the DeGate team expressed that it intends to remove this feature. For the time being, though, it is possible to make certain of the contracts upgradeable. Further Investigation Required Summary of Findings The table below summarizes the ﬁndings of the review, including type and severity details. ID Title Type Severity 1 Lax boundaries between normalTokens and reservedTokens arrays Undeﬁned Behavior Medium 2 Missing range checks in MulDivGadget Cryptography High 3 Poor code management practices Undeﬁned Behavior Informational 4 Token management diﬃculties caused by the addition of arbitrary tokens Data Validation High 5 Initialization functions can be front-run Conﬁguration Low
5. Initialization functions can be front-run 
6. Circuit crashes when invalid blocks are generated by the operator 
7. Saving large JSON integers could result in interoperability issues 1 2 3 5 6 7 8 9 10 12 13 13 16 19 20 20 23 25 27 
8. Lack of contract existence check on delegatecall will result in unexpected behavior 29 
9. Numerical comparison gadget does not support very large numbers 
10. Solidity compiler optimizations can be problematic 11. Circuits rely on undeﬁned behavior in libﬀ A. Vulnerability Categories B. Code Maturity Categories C. Token Integration Checklist D. Code Quality Recommendations E. Fix Log Executive Summary Engagement Overview DeGate engaged to review the security of its smart contracts. From February 7 to February 22, 2022, a team of three consultants conducted a security review of the client-provided source code, with six person-weeks of eﬀort. On March 7, 2022, we started an additional week of review focused on the circuits and gadgets built using ethsnarks . Details of the project’s timeline, test targets, and coverage are provided in subsequent sections of this report. Project Scope Our testing eﬀorts were focused on the identiﬁcation of ﬂaws that could result in a compromise of conﬁdentiality, integrity, or availability of the target system. We conducted this audit with partial knowledge of the target system, including access to the circuit source code, smart contract source code, and documentation. We performed automated analysis and a manual review of the code, in addition to running system elements. Summary of Findings The audit uncovered signiﬁcant ﬂaws that could impact system conﬁdentiality, integrity, or availability. These include incorrect ERC20 token handling, undeﬁned behavior in circuits, and unclear gadget limitations. This report includes the ﬁndings of a December 2021 audit of the DeGate protocol. A summary of the ﬁndings of both audits is provided below. EXPOSURE ANALYSIS CATEGORY BREAKDOWN Severity High Medium Low Informational Undetermined Count Category Count Conﬁguration Data Validation Cryptography Undeﬁned Behavior Project Summary Contact Information The following managers were associated with this project: Dan Guido , Account Manager dan@trailofbits.com Sam Greenup , Project Manager sam.greenup@trailofbits.com The following engineers were associated with this project: Shaun Mirani , Consultant shaun.mirani@trailofbits.com Devashish Tomar , Consultant devashish.tomar@trailofbits.com Will Song , Consultant will.song@trailofbits.com Project Timeline The signiﬁcant events and milestones of the project are listed below. Date Event February 7, 2022 Pre-project kickoﬀ call February 11, 2022 Delivery of status report February 22, 2022 Delivery of ﬁnal report; report readout meeting March 30, Project Goals The engagement was scoped to provide a security assessment of the DeGate smart contracts. Speciﬁcally, we sought to answer the following non-exhaustive list of questions: ● ● ● ● ● ● ● ● ● ● ● Do the system components have appropriate access controls? Is it possible to manipulate the system by front-running transactions? Is it possible for participants to steal or lose tokens or shares? Are there any circumstances under which arithmetic errors could aﬀect the system? Are any of the system components vulnerable to denial-of-service attacks, and could any be used in phishing? Does the exchange bookkeeping arithmetic hold? Are critical events logged? Are the oﬀ-chain computations that use circuits implemented correctly? Is each circuit variable in generate_r1cs_constraints properly constrained? Does every circuit and gadget correctly implement the corresponding zero-knowledge statement? Do the circuits use the low-level gadgets correctly and safely? Project Targets The engagement involved a review and testing of the following target. DeGate Protocol Repository https://github.com/degatedev/degate-protocols Version 7d5e66a1e22d7657c888463256e0175119745621 Type Decentralized Exchange Platforms Solidity, C++ Project Coverage This section provides an overview of the analysis coverage of the review, as determined by our high-level engagement goals. Our approaches and their results include the following: ● ● ● ● ● ● A review of the addition and handling of ERC20 tokens revealed several issues that could aﬀect the DeGate exchange’s behavior and users; these include a failure to ensure that tokens are registered to the appropriate list (i.e., the normal or reserved list) ( TOB-DeGate-1 ) and the incorrect handling of non-standard tokens ( TOB-DeGate-4 ). Analysis of the circuits revealed undeﬁned behavior ( TOB-DeGate-11 ), interoperability issues caused by the use of JSON integers ( TOB-DeGate-7 ), and gadget limitations ( TOB-DeGate-9 ). Detailed analysis of the circuits’ correctness yielded a ﬁnding regarding the range checks of a gadget used in fee calculations ( TOB-DeGate-2 ). A manual review of the processing of block deposits and withdrawals enabled us to assess the ways in which assets ﬂow into the DeGate protocol and users interact on-chain; we did not ﬁnd any issues. Validation of the external interactions did not reveal any reentrancy risks. A review of the functions for front-running opportunities did not reveal any critical concerns, although a user could front-run a call to an initialization function to disrupt a contract’s deployment ( TOB-DeGate-5 ). A review of the issues discovered in our previous DeGate audit determined that several circuit and smart contract issues remain unresolved ( TOB-DeGate-4 , TOB-DeGate-5 , TOB-DeGate-6 , TOB-DeGate-7 , TOB-DeGate-8 , TOB-DeGate-9 , TOB-DeGate-10 , and TOB-DeGate-11 ). Coverage Limitations Because of the time-boxed nature of testing work, it is common to encounter coverage limitations. During this project, we were unable to perform comprehensive testing of certain system elements, which may warrant further review. The following is a summary of the coverage limitations of the engagement . ● We performed a limited review of the base cryptography used by the poseidon and ethsnarks circuits and their dependencies as well as the user / validator key management system. ● The operator codebase was out of scope. Codebase Maturity Evaluation uses a traﬃc-light protocol to provide each client with a clear understanding of the areas in which its codebase is mature, immature, or underdeveloped. Deﬁciencies identiﬁed here often stem from root causes within the software development life cycle that should be addressed through standardization measures (e.g., the use of common libraries, functions, or frameworks) or training and awareness programs. Category Summary Arithmetic Auditing Authentication / Access Controls Complexity Management Decentralization Result Satisfactory Satisfactory The codebase generally uses SafeMath functions to perform calculations, and we did not identify any potential overﬂows in places in which those functions are not used. Most of the functions emit events where appropriate. The events emitted by the code are suﬃcient for monitoring on-chain activity. However, we did not have access to an incident response plan or information on the use of oﬀ-chain components in behavior monitoring. We did not identify any serious access control issues. Satisfactory Moderate Moderate Many of the system’s functionalities, especially the block-processing functionalities, are broken up into multiple functions. This makes the code less readable and more diﬃcult to modify. Although the block submission process is centralized and the owner has the ability to shut down the exchange, users can force certain actions. For example, if a user’s deposit into the ExchangeV3 contract is never picked up by a validator and included in a block, the user can recover the funds by submitting an on-chain transaction. There is a similar mechanism for withdrawals: by executing a withdrawal that will not be timely picked up by a validator, a user could force ExchangeV3 to enter withdrawal mode, preventing the validator from submitting more blocks and allowing users to withdraw their funds. Documentation The protocol is a fork of Loopring v3.6.1 and therefore has a signiﬁcant amount of documentation. DeGate also provided documentation regarding changes to the original code; however, that documentation does not identify all of the changes or all of the features that were added or removed. Weak Front-Running Resistance We found one issue related to front-running ( TOB-DeGate-5 ). However, time constraints prevented us from exhaustively checking the protocol for front-running and unintended arbitrage opportunities. Further Investigation Required Low-Level Manipulation A substantial amount of assembly is used throughout the math and utility libraries (e.g., Poseidon ); however, time constraints prevented us from testing or verifying the libraries. Further Investigation Required Testing and Veriﬁcation We identiﬁed some failing unit tests. Certain of these tests fail because they rely on parts of the original Loopring code that have been removed by the DeGate team; other test cases were not properly set up or fail for other reasons. Weak Upgradeability Contracts including ExchangeV3 and DefaultDepositContract support proxy patterns for upgrades. DefaultDepositContract is used with a proxy pattern in some tests ( testExchangeUtil.ts ); however, during our ﬁrst call, the DeGate team expressed that it intends to remove this feature. For the time being, though, it is possible to make certain of the contracts upgradeable. Further Investigation Required Summary of Findings The table below summarizes the ﬁndings of the review, including type and severity details. ID Title Type Severity 1 Lax boundaries between normalTokens and reservedTokens arrays Undeﬁned Behavior Medium 2 Missing range checks in MulDivGadget Cryptography High 3 Poor code management practices Undeﬁned Behavior Informational 4 Token management diﬃculties caused by the addition of arbitrary tokens Data Validation High 5 Initialization functions can be front-run Conﬁguration Low
 
