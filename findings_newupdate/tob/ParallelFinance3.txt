1. Missing negative tests for several assertions Severity: Informational Diﬃculty: High Type: Testing Finding ID: TOB-PARASPACE-1 Target: test-suites Description The Paraspace protocol consists of numerous interacting components, and each operation is validated by checks that are widely dispersed throughout the codebase. Therefore, a robust suite of negative test cases is necessary to prevent vulnerabilities from being introduced if developers unwittingly remove or alter checks during development. However, a number of checks are present in the codebase without corresponding test cases. For example, the health factor check in the FlashClaimLogic contract is required in order to prevent users from extracting collateralized value from NFTs during ﬂash claims, but there is no unit test to ensure this behavior. Commenting out the lines in ﬁgure 1.1 does not cause any test to fail. require( 86 87 88 89 ); healthFactor > DataTypes.HEALTH_FACTOR_LIQUIDATION_THRESHOLD, Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD Figure 1.1: FlashClaimLogic.sol#86–89 A test that captures the desired behavior could, for example, initiate a ﬂash claim of a BAYC NFT that is tied to collateralized staked APE (sAPE) and then withdraw the APE directly from the ApeCoinStaking contract, causing the account’s health factor to fall below 1. As another example, removing the following lines from the withdrawApeCoin function in the PoolApeStaking contract demonstrates that no negative test validates this function’s logic. require( 73 74 75 76 ); nToken.ownerOf(_nfts[index].tokenId) == msg.sender, Errors.NOT_THE_OWNER Figure 1.2: PoolApeStaking.sol#73– Exploit Scenario Alice, a Paraspace developer, refactors the FlashClaimLogic contract and mistakenly omits the health factor check. Expecting the test suite to catch such errors, she commits the code, and the new version of the Paraspace contracts becomes vulnerable to undercollateralization attacks. Recommendations Short term, for each require statement in the codebase, ensure that at least one unit test fails when the assertion is removed. Long term, consider requiring that Paraspace developers ensure a minimum amount of unit test code coverage when they submit new pull requests to the Paraspace contracts, and that they provide justiﬁcation for uncovered conditions. 2. Use of a magic constant with unclear meaning for the sAPE unstaking incentive Severity: Informational Diﬃculty: High Type: Conﬁguration Finding ID: TOB-PARASPACE-2 Target: contracts/protocol/tokenization/NTokenApeStaking.sol Description If a Paraspace user has a low health factor and is eligible for liquidation, other users may forcibly unstake any sAPE owned by the undercollateralized user and claim a fraction of the unstaked coins as a reward. The percentage of unstaked claims that is awarded is deﬁned inline without a comment, as shown in ﬁgure 2.1: 130 131 132 133 134 } function initializeStakingData() internal { ApeStakingLogic.APEStakingParameter storage dataStorage = apeStakingDataStorage(); ApeStakingLogic.executeSetUnstakeApeIncentive(dataStorage, 30); Figure 2.1: NTokenApeStaking.sol#130–134 Because this value is not marked explicitly as a constant in a prominent location and does not have a comment explaining its meaning, users may misunderstand its nature. Exploit Scenario Bob, a Paraspace user, reads the NTokenApeStaking contract and sees that the unstaking incentive is set to 30. He misinterprets the value, believing it represents a percentage rather than 1/100th of a percent, and spends undue resources liquidating small sAPE positions. Recommendations Short term, move the constant to the top of the ﬁle and add an explanatory comment. Long term, add user-facing documentation detailing all current incentive rates and similar parameters.
 
