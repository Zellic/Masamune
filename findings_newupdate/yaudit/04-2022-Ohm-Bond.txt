1. Callback customization allows arbitrary contract execution Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: 
2. Missing logical protections in setIntervals() Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: 
3. BCV decrease design does not give market owner optimal price Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: 
4. totalDebt value overwritten Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: 
5. Values grow quickly near end of market Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: 
6. Inaccurate assumption about scaleAdjustment Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: 
7. Anyone can trigger a market closure Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: 
8. Missing zero case checks Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: 
9. Incompatible with fee-on-transfer tokens Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: 
10. Use != 0 for gas savings Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
11. Unnecessary zero initialization Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
12. Use prefix in loops Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: There are several instances of this finding: https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/BondAggregator.sol#L177 https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/BondAggregator.sol#L180 https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/BondAggregator.sol#L186 https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/BondAggregator.sol#L191 https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/OlympusTreasuryCallback.sol#L74 
13. Cache array length before loop Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
14. Bitshift is cheaper for powers of two Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
15. Remove unused functions from imported libraries Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
16. Remove unused variable Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
17. Cache variable for reuse Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
18. Tidy up _handlePayout logic Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
19. Redundant return variable Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
20. Use unchecked when no risk of overflow or underflow Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
21. Move variable assignment to avoid overwrite Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
22. Using simple comparison Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
23. Bond purchase size does not impact price Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
24. Frontrunning changes price Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
25. Unclear if default tuning parameters are optimal Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
26. Add a check to limit debtBuffer to 100% Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
27. Function format inconsistency Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
28. Variable name nitpick Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
29. TransferHelper.sol not from solmate Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
30. CloneERC20.sol missing EIP-2612 code Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
31. Incorrect comment Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
32. Confusing variable naming Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
33. Expired markets are never "closed" Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
34. Legitimate tokens disallowed Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
35. Tokens with non-string metadata disallowed Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
36. vesting and expiry sometimes used interchangeably Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
37. market price functions consistency Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
38. Use variable instead of magic numbers Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The _tune() function in BaseGauge.sol contains https://github.com/OlympusDAO/bonds/blob/1550298fe9618e861201787cd7fc2648566cf6af/src/bases/BondBaseCDA.sol#L532-L539 if (newControlVariable >= controlVariable) { terms[id_].controlVariable = newControlVariable; } else { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } By switching around the if/else clauses, we can replace the compound operator with a simple one if (newControlVariable < controlVariable) { // If decrease, control variable change will be carried out over the tune interval // this is because price will be lowered uint256 change = controlVariable - newControlVariable; adjustments[id_] = Adjustment(change, time_, meta.tuneAdjustmentDelay, true); } else { terms[id_].controlVariable = newControlVariable; } There are likely other instances of this gas savings in the code, but only one example was identified for illustrative purposes. 
