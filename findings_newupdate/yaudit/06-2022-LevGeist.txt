1. Strategy.sol no slippage tolerance limit set on _sellRewardForWant Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: _claimAndSellRewards always passes 0 as the minOut argument to the _sellRewardForWant method, so there is no slippage tolerance limit. 
2. BaseStrategy.sol Missing non-zero address check in setHealthCheck Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The function does not have a non-zero address check for its address argument. All other setter methods for address type variables in the contract have non-zero address checks. 
3. liquidatePosition loss recording does not record loss when _amountNeeded.sub(_liquidatedAmount) <= minWant Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: Losses are only recorded when _amountNeeded.sub(_liquidatedAmount); <= minWant if (diff <= minWant) { _loss = diff; } Instead of _amountNeeded.sub(_liquidatedAmount) >= minWant 
4. Strategy.sol Missing non-zero address check in _initializeThis Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The function calls an external contract to get some token addresses (address _aToken, , address _debtToken) = protocolDataProvider.getReserveTokensAddresses(address(want)); and then has a non-zero address check for _aToken, but not for _debtToken. 
5. Strategy.sol Missing invariants checks in liquidatePosition Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: In the code we see the following comments: // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount` // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded But they are just assumptions made by the developer and there are no assert/require statements to ensure they are really correct. 
6. Strategy.sol unreachable code in prepareReturn Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: On lines 254 to 257, the if statement: if (amountRequired.sub(_debtPayment) < _profit) does not evaluate, this is because amountRequired is debtOutstanding + _profit and _debtPayment is debtOutstanding, meaning that the if statement always evaluates to _profit < _profit which is never true, meaning that line 256 never evaluates. 
7. Unnecessary liquidation procedures Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: On line 336 https://github.com/Yacademy-block-2/yearnV2-gen-lev-lending/blob/levgeist/contracts/Strategy.sol#L336 the function checks if the want balance is sufficient to cover the amountNeeded, this is set as wantBalance > _amountNeeded. If wantBalance is the same as _amountNeeded the strategy still has sufficient funds to cover the withdraw, meaning the logic that follows this if statement is unnecessary. 
8. Strategy.sol & BaseStrategy.sol inefficient usage of for loops Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: Strategy.sol lines 199, 455, 509 and BaseStrategy.sol line 893 contain for loops that are implemented inefficiently in terms of gas for the EVM. Omitting assigning a default-zero type variable to zero, caching array's length, using ++i instead of i++ can save a good chunk of gas, especially if the loop is long running. 
9. Regular math can be used instead of SafeMath when it is safe Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: if (totalDebt > totalAssets) { // we have losses _loss = totalDebt.sub(totalAssets); } else { // we have profit _profit = totalAssets.sub(totalDebt); } 
10. BaseStrategy.sol does not emit event in setHealthCheck Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: All other setter methods for address type variables in the contract emit events on state change, example: function setStrategist(address _strategist) external onlyAuthorized { require(_strategist != address(0)); strategist = _strategist; emit UpdatedStrategist(_strategist); } 
11. Strategy.sol does not emit event in setCollateralTargets, setMinsAndMaxs, setRewardBehavior Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: 
12. Strategy.sol has rewards local variable defined in a couple of places which shadows reward state variable as defined in BaseStrategy.sol Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: 
13. Strategy.sol uses now keyword in _sellRewardForWant Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The code makes use of the now keyword in Solidity which is deprecated in future Solidity versions. 
14. Strategy.sol estimatedTotalAssets can be declared as external Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The estimatedTotalAssets method is declared as public which should be used for method that will be called from inside of the contract, but estimatedTotalAssets isn't. 
15. Centralised control of LP tokens on Spookyswap Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: As of 24/06/2022 84.6% of all Geist/FTM LP tokens are controlled by a single address as seen here: https://ftmscan.com/token/0x668ae94d0870230ac007a01b471d02b2c94ddcb9#balances this address is a MasterChef so does decentralise the system slightly, however if for whatever reason this liquidity was pulled it could result in extremely high slippage which reduces profitability of the strategy and exacerbates the chances of a sandwich attack. 
