1. Incompatible Vote Delegation Severity: High Difficulty: n/a Type: n/a Target: n/a Description: The VoteDelegation.sol contract has functions including delegate() and removeDelegation(), but the VoteDelegation.sol contract does not have any interaction with the snapshot DelegateRegistry contract. Because there are no contract calls to snapshot.org contracts, snapshot.org will not register any vote delegation. 
2. Lock 1e-18 YFI to Get Rewards Severity: High Difficulty: n/a Type: n/a Target: n/a Description: def test_gauge_cheat_yfi_lock( yfi, ve_yfi, whale, whale_amount, shark, shark_amount, fish, fish_amount, create_vault, create_gauge, gov ): yfi.approve(ve_yfi, shark_amount, {"from": shark}) ve_yfi.create_lock( shark_amount, chain.time() + 4 * 3600 * 24 * 365, {"from": shark} ) assert yfi.balanceOf(shark) == 0 yfi.approve(ve_yfi, fish_amount, {"from": fish}) ve_yfi.create_lock( fish_amount, chain.time() + 4 * 3600 * 24 * 365, {"from": fish} ) assert yfi.balanceOf(fish) == 0 yfi.approve(ve_yfi, 1, {"from": whale}) ve_yfi.create_lock( 1, chain.time() + 4 * 3600 * 24 * 365, {"from": whale} ) assert yfi.balanceOf(whale) == whale_amount - 1 lp_amount = 10**18 vault = create_vault() tx = create_gauge(vault) gauge = Gauge.at(tx.events["GaugeCreated"]["gauge"]) vault.mint(shark, lp_amount/100) vault.approve(gauge, lp_amount, {"from": shark}) gauge.deposit({"from": shark}) vault.mint(fish, lp_amount/100) vault.approve(gauge, lp_amount, {"from": fish}) gauge.deposit({"from": fish}) vault.mint(whale, 100*lp_amount) vault.approve(gauge, 100*lp_amount, {"from": whale}) gauge.deposit({"from": whale}) yfi_to_distribute = 10**16 yfi.mint(gov, yfi_to_distribute) yfi.approve(gauge, yfi_to_distribute, {"from": gov}) gauge.queueNewRewards(yfi_to_distribute, {"from": gov}) assert pytest.approx(gauge.rewardRate()) == yfi_to_distribute / (7 * 24 * 3600) chain.sleep(3600*24*7) chain.mine() assert gauge.earned(whale) < .39 * yfi_to_distribute gauge.getReward({"from": whale}) assert yfi.balanceOf(whale) < .39 * yfi_to_distribute + whale_amount gauge.withdraw({"from": whale}) assert vault.balanceOf(whale) == 100*lp_amount 
3. Flash Loan Sybil Attack to Boost Rewards Severity: High Difficulty: n/a Type: n/a Target: n/a Description: Boosted Balance equation: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/Gauge.sol#L302 Deposit Update Reward call: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/Gauge.sol#L351 Total Supply increase: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/Gauge.sol#L362 
4. Incorrect variables in getRewardFor call Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: The _account variable should be used in this line instead of msg.sender https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L512 IExtraReward(extraRewards[i]).getRewardFor(msg.sender); The _account variable should be used in this line instead of msg.sender https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L501 IVotingEscrow(veToken).deposit_for(msg.sender, reward); 
5. Unclear Integration of Vote Delegation Until Value Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: The VoteDelegation.sol contract has functions including delegate() and removeDelegation(), but the VoteDelegation.sol contract does not have any interaction with the snapshot DelegateRegistry contract. Because the actual act of voting is planned to happen off-chain with snapshot.org, snapshot.org needs to recognize what a valid vote or delegation is in the snapshot that it takes for each proposal. Currently there is no option in the snapshot.org delegation approach for an "until" value. Factoring in the "until" value could be implemented in a custom snapshot.org voting strategy, but because no such strategy is mentioned anywhere in the veYFI repository, it is expected that this has not been considered. 
6. force_withdraw() penalty may inadequately deter gamification and attacks on voting Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: The penalty_ratio equation https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L570 
7. Voting delegation is missing edge case checks Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The VoteDelegation.sol contract permits an until variable value of zero if the tokens are not locked. Any until variable value that is less than block.timestamp should have no impact on voting or delegation. But if the until value starts at zero, it is possible for the value to be increased to a value less than block.timestamp to reference a time in the recent past, but still have no impact. It is possible that the voting logic, which is not within the scope of these solidity contracts, may not properly consider this edge case. This edge case can be solved by adding a check in all functions that modify the until state variable, including _delegate() and increaseDelegationDuration(), to validate require(until > block.timestamp). An exception could be made for an until value of zero, resulting in a require statement that looks like require(_until > block.timestamp || _until == 0). Another edge case is a situation where the until value is set to a time beyond the lock expiration of the veYFI tokens. There is no check for to confirm until < locked.end. This edge case could also happen if a user delegated votes, then withdrew their tokens to a new account where the tokens were locked and votes delegated again. It is unclear whether the off-chain voting mechanism will handle this edge case, which could allow multiple votes from a single token. Otherwise, consider adding the check require(_until < locked.end). 
8. Sawtooth Wave Effect from Computing veYFI Balance and Supply Using Different Time Scales Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: Equation to compute Total Supply: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/VotingEscrow.vy#L756 (t_i is truncated to a value in weeks at L748 and L750.) Equation to compute Balance: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/VotingEscrow.vy#L677 _t is set to block.timestamp for balance computation: https://github.com/YAcademy-Residents/veYFI/blob/7846291efec36638eae32ac8798544050ca20877/contracts/VotingEscrow.vy#L647 
9. Equal penalty reward distribution not incentive aligned Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: A discussion for this issue was started by someone from Ribbon Finance (who forked the veYFI code) before the review ended in veYFI Issue 135 and a fix is being developed in PR #136. The issue is centered around how penalty fees paid in VotingEscrow.vy and Gauge.sol are redistributed to users. 
10. No penalty during migration Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The _lockingRatio() function returns PRECISON_FACTOR, equivalent to locking for the MAX_TIME value, when the ve token is undergoing migration: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L221 Instead, it would be better to revert in this case so that the ve token can be finished without any users taking advantage of this edge case. 
11. Using "unchecked" Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The _lockingRatio() function returns PRECISON_FACTOR, equivalent to locking for the MAX_TIME value, when the ve token is undergoing migration: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L221 Instead, it would be better to revert in this case so that the ve token can be finished without any users taking advantage of this edge case. 
12. Using simple comparison Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The _notifyRewardAmount() function in BaseGauge.sol contains https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L170-L177 if (block.timestamp >= periodFinish) { rewardRate = reward / duration; } else { uint256 remaining = periodFinish - block.timestamp; uint256 leftover = remaining * rewardRate; reward = reward + leftover; rewardRate = reward / duration; } By switching around the if/else clauses, we can replace the compound operator with a simple one if (block.timestamp < periodFinish) { uint256 remaining = periodFinish - block.timestamp; uint256 leftover = remaining * rewardRate; reward = reward + leftover; rewardRate = reward / duration; } else { rewardRate = reward / duration; } 
13. Use prefix in loops Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: There are 4 instances of this in Gauge.sol and 1 instance in VoteDelegation.sol https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L161 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L357 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L386 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L511 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VoteDelegation.sol#L121 
14. Payable functions can save gas Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The following functions have the onlyOwner modifier and can be marked as payable setVe() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Registry.sol#L49 addVaultToRewards() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Registry.sol#L67 removeVaultFromRewards() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Registry.sol#L94 setVe() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VeYfiRewards.sol#L30 setVe() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L110 setDuration() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L73 sweep() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L111 
15. Use != 0 for gas savings Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
16. Use Solidity errors in 0.8.4+ Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: 
17. Declare functions external for gas savings Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: There are two public functions that can be external https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L287 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L317 
18. Remove Aragon calls for gas savings Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The following functions include comments indicating they are fulling or partially used for Aragon compatibility, and may not otherwise be necessary: version state variable and _version init parameter https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L155 controller() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L129-L131 transfersEnabled() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L129-L131 balanceOf() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L650 totalSupply() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L772 changeController() https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L831-L837 
19. Inconsistent zero case in VotingEscrow.vy Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The balanceOf() function uses this code: if upoint.bias < 0: upoint.bias = 0 return convert(upoint.bias, uint256) while the balanceOfAt() function uses this code: if upoint.bias >= 0: return convert(upoint.bias, uint256) else: return 0 
20. Remove duplicated code Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The logic for the case block.timestamp >= periodFinish and (distributedSoFar * 12) / 10 < _amount is the same, so they can be placed into the same if statement. https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L146-L150 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L156-L162 The revised queueNewRewards() function can look like this function queueNewRewards(uint256 _amount) external override returns (bool) { require(_amount != 0, "==0"); SafeERC20.safeTransferFrom( IERC20(rewardToken), msg.sender, address(this), _amount ); emit RewardsQueued(msg.sender, _amount); _amount = _amount + queuedRewards; uint256 elapsedSinceBeginingOfPeriod = block.timestamp - (periodFinish - duration); uint256 distributedSoFar = elapsedSinceBeginingOfPeriod * rewardRate; // we only restart a new week if _amount is 120% of distributedSoFar. if (block.timestamp >= periodFinish || (distributedSoFar * 12) / 10 < _amount) { _notifyRewardAmount(_amount); queuedRewards = 0; } else { queuedRewards = _amount; } return true; } 
21. SLOAD gas savings Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: Existing code https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L80-L84 Modified code to use local variable instead of state variable in emit if (block.timestamp < periodFinish) { uint256 remaining = periodFinish - block.timestamp; uint256 newRate = remaining * rewardRate / newDuration; rewardRate = leftover; } duration = newDuration; emit DurationUpdated(newDuration, newRate); A similar type of improvement can be made in Registry.sol https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Registry.sol#L95-L96 The code can be modified to address gauge = gauges[_vault]; require(gauge != address(0x0), "!exist"); 
22. SafeERC20 functions not used Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: Gauge.sol line 500 => rewardToken.approve(address(veToken), reward); Gauge.sol line 527 => IERC20(rewardToken).approve(veYfiRewardPool, toTransfer); VeYfiRewards.sol line 140 => rewardToken.approve(address(veToken), reward); 
23. Unspecified Voting Requirements Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: There are built-in voting assumptions in the contract code, mostly borrowed from Convex: When a proposal is created, the checkpoint() function in VotingEscrow.vy should be called to properly set the epoch Voting power should be calculated using the on-chain functions such as get_last_user_slope(), balanceOf(), balanceOfAt(), supplyAt(), totalSupply(), and totalSupplyAt() in VotingEscrow.vy. Note that some of the math in these calculations could be moved to an off-chain voting strategy for gas savings Voting for a proposal with veYFI is allowed as soon as the veYFI is locked. Because there is potential for gamification in increasing veYFI stake shortly before key votes, protocols like Convex have implemented a minimum locking duration of several weeks before a token holder can vote, which is implemented in their VotingEligibility.sol contract. Some open and unanswered questions include: Who is allowed to create proposals on snapshot.org? How are the results of each snapshot vote converted to on-chain rewards? Is this automated? Will all vaults receive a gauge that can be voted for on snapshot.org, even those holding very little value? If so, this could lead to gamification of deprecated or old vaults. Is there a maximum allocation a gauge can receive? Is there minimum quorum for governance votes? Convex specifies these values: https://docs.convexfinance.com/convexfinance/general-information/voting-and-gauge-weights 
24. Variable naming inconsistency Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The first input to initialize() has the following comment https://github.com/yearn/veYFI/blob/d53465c5f615a04204faed55728840a1e79377fc/contracts/Gauge.sol#L67 _stakingToken The vault token to stake Elsewhere in veYFI, the naming convention assumes that each gauge corresponds to one Yearn vault. But the name _stakingToken and the comment in issue 46 indicates this might not be correct. This should be clarified in the comments and the variable names. 
25. Missing 0 check in setDuration() Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: If block.timestamp < periodFinish, then the code will check if newDuration is zero, but this check will not happen if the if statement is skipped when block.timestamp > periodFinish https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L73 This can cause problems in other functions that divide by the duration https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L170-L177 
26. Typos Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The MAX_DELAGATED variable should be spelled MAX_DELEGATED https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VoteDelegation.sol#L16 betwwen should be between https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L324 The last sentence in the ExtraReward.sol contract needs to be fixed, most likely by removing the words "Gauge will". It reads "Gauge will this contract is used behind multiple delegate proxies." https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/ExtraReward.sol#L13-L14 "claimm veYFI and aditional reward" should be "claim veYFI and additional reward" (two typos) https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L373 Triger should be Trigger https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L131 veYFITotalSypply should be veYFITotalSupply https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L284 "rewards are distributed during 7 days" should says "rewards are distributed during reward duration" because duration is a variable and could change https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L12 "over a week" should say "over the reward duration" because duration is a variable and could change https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L130 "restart a new week" should say "restart a new reward duration" because duration is a variable and could change https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/BaseGauge.sol#L154 A reference to CRV exists in the vyper code. Change ERC20CRV to ERC20YFI https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L152 "earning for an account" should be "earnings for an account" https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L248-L249 "address acccount" should be "address account" https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L219 
27. Replace magic numbers with constants Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The value 1e18 appears throughout the contracts https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VeYfiRewards.sol#L62 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VeYfiRewards.sol#L69 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L245 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L274 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L280 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/ExtraReward.sol#L75 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/ExtraReward.sol#L86 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/ExtraReward.sol#L92 
28. Code inconsistency Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The three different _updateReward() functions https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/ExtraReward.sol#L44 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VeYfiRewards.sol#L36 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L183 
29. Curve safety check removed Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: This is the check in Curve: https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy#L418 https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy#L438 https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy#L455 The check does not exist in the same locations in the veYFI VotingEscrow contract: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L458 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L496 https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L512 If this check is added to veYFI, it should also be added to createLockFor, a function that Curve does not have: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L477 
30. No migrateLock sample implementation Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The migrateLock() call in the existing veYFI code: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/VotingEscrow.vy#L606 
31. Use -= to keep code concise Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The += operator is used often in veYFI, but the -= operator is not used in this line https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L391 _balances[msg.sender] = _balances[msg.sender] - _amount; Consider changing this line to _balances[msg.sender] -= _amount; 
32. Update rewards for other users Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The depositFor() function: https://github.com/YAcademy-Residents/veYFI/blob/master/contracts/Gauge.sol#L344 
